;;
;; Phix dissassembly listing.  Generated at 11:22:37 on Wed 11/06/25.  (-d)
;;  (NB: Intended for human readership only; see plist.e for details)
;; ImageBase2=#00400000, BaseOfCode2=#00041000 (#00441000), SizeOfCode2=#0002BD30 (limit=#0046CD30),
;;                       BaseOfData2=#00002000 (#00402000), SizeOfData2=#0003EF20 (limit=#00440F20)
;; X64=0, PE=1
;;
;C:\dev\bzscript_phix\tests\asm_test.ex:
;=======================================
;     1 integer x = 5 + 6
    call #0046296B (:>initFEH)            ;#00441000: 350 66190200               v  00 00  1   1      
    call #00462B83 (:>initStack)          ;#00441005: 350 791B0200               v  00 00  1   2      
    call #004620E8 (:>initFPU)            ;#0044100A: 350 D9100200               v  00 00  1   3      
    call #0045B9E3 (:>Rand0)              ;#0044100F: 350 CFA90100               v  00 00  1   4      
;     2 integer y = 7
;     3 integer z = x + y
    mov [#00402A1C] (z), dword #12        ;#00441014: 307005 1C2A4000 12000000   uv 00 00  1   5      
;     4 puts(1, "Hello ASM.  I can see you now!")
    mov eax,1                             ;#0044101E: 270 01000000               vu 01 00  1   5      
    mov edx,[#00402A24]                   ;#00441023: 213025 242A4000            uv 04 00  1   6      
    call #0045E072 (:%opPuts)             ;#00441029: 350 44D00100               v  00 00  1   6      
;     5 printf(1, "%d", {z})
    mov eax,#00402A28                     ;#0044102E: 270 282A4000               uv 01 00  1   7      
    mov edx,1                             ;#00441033: 272 01000000               vu 04 00  1   7      
    push #0044104B                        ;#00441038: 150 4B104400               uv 00 00  1   8      
    push eax                              ;#0044103D: 120                        vu 00 01  1   8      
    push #12                              ;#0044103E: 152 12                     uv 00 00  1   9      
    mov edi,[#00402A28]                   ;#00441040: 213075 282A4000            vu 80 00  1   9      
    jmp #00460143 (:%pMkSq)               ;#00441046: 351 F8F00100               v  00 00  1  10      
    mov ecx,9                             ;#0044104B: 271 09000000               uv 02 00  1  11      
    mov edx,400                           ;#00441050: 272 90010000               vu 04 00  1  11      
    call #00462C02 (:%opFrame) (printf)   ;#00441055: 350 A81B0200               v  00 00  1  12      
    mov [ebp] (fn), dword 1               ;#0044105A: 307105 00 01000000         uv 00 20  1  13      
    mov esi,[#004024E4]                   ;#00441061: 213065 E4244000            vu 40 00  1  13      
    mov [ebp-4] (fmt),esi                 ;#00441067: 211165 FC                  uv 00 60  1  14      
    add dword[ebx+esi*4-8],1              ;#0044106A: 203104263 F8 01            u  00 48  3  16    *40*
    mov ecx,[#00402A28]                   ;#0044106F: 213015 282A4000            vu 02 00  1  18      
    mov [#00402A28],ebx                   ;#00441075: 211035 282A4000            uv 00 08  1  19      
    mov [ebp-8] (args),ecx                ;#0044107B: 211115 F8                  vu 00 22  1  19      
    mov [ebp+28] (retaddr),#0044108A      ;#0044107E: 307105 1C 8A104400         uv 00 20  1  20      
    jmp #00444FC4 (code:printf)           ;#00441085: 351 3A3F0000               v  00 00  1  20      
    mov edi,2192                          ;#0044108A: 277 90080000               uv 80 00  1  21      
    call :%opCallOnce (pFloatN.e)         ;#0044108F: 350 BC1B0200               v  00 00  1  21      
    jmp #00462C8F (:%opRetf)              ;#00441094: 351 F61B0200               v  00 00  1  22      
;C:\Phix\builtins\VM\pDiagN.e:
;=============================
;     1 --
;     2 -- pDiagN.e
;     3 -- =======
;     4 --
;     5 -- code responsible for writing the ex.err file
;     6 --
;     7 constant diagdiag = 0   -- show progress messages for debugging this source.
;     8                         --  (0=none, 1=all, 2=almost all, ... N=last only.)
;     9 constant show_bad_era = 01
;    10 
;    11 constant show_low_level_diagnostics = 0
;    12 
;    13 -- Technical note:
;    14 --  This should be coded as defensively as possible, rather than relying on
;    15 --  itself to give meaningful messages about errors in itself. In other words,
;    16 --  pdiag.e should not rely on pdiag.e to catch runtime errors. Strangely, it
;    17 --  tends to manage better than expected, but even so that does not make it
;    18 --  a good idea, or mean you should be surprised, when it self-implodes.
;    19 --  This means (without going overboard) that variables should be defined as 
;    20 --  object and then explicitly tested for the expected type, instead of being
;    21 --  declared as the expected type and relying on the builtin type checking, 
;    22 --  that all subscripts should be explicitly tested to be in range, and that  
;    23 --  all peeks are checked first with xIsBadReadPtr, plus anything else that
;    24 --  you can think of!
;    25 --
;    26 --[DEV rewrite]
;    27 --  If you get any error message (before you start hacking this code) which 
;    28 --  begins with "diag.e: oops," then please reduce the program to the smallest
;    29 --  possible one which still exhibits the error and send it to me. Since this
;    30 --  has been passed a nonsense [era] or [ep1], there is nothing you can do to 
;    31 --  improve matters here; it is a low-level bug that I alone must fix, sorry.
;    32 --  The same is true for line numbers of -1, except of course when an error
;    33 --  is being reported in a dll, or some non-#ilasm assembly code, or maybe
;    34 --  when "without debug" is in force at the point where the error occurred.
;    35 --
;    36 --27/2/15:
;    37 --  **NOTE** [DEV gibberish...]
;    38 --  This (pdiagN.e) runs in the context of the debugee. The symtabptr and
;    39 --  gvarptr available via e/rbp are pertinent to the program being debugged,
;    40 --  rather than the (phix) interpreter that this is linked in as part of.
;    41 --  Hence routine_id/call_func/proc/opCallOnce are all liable to miserable
;    42 --  failure if you try anything clever without that in mind. Likewise a
;    43 --  delete_routine() triggering out-of-context may well fail, ie/eg if such
;    44 --  was used/saved during initialisation, and later invoked from diag().
;    45 --  I suppose it might be possible to combine prtnid.e and pcfunc.e into
;    46 --  a context-free module that used indexes to a {symtaptr,symtabidx} table
;    47 --  as the integer ids, all in an optable rippled down the opInterp chain, 
;    48 --  but don't look at me (like that) mate!
;    49 --
;    50 --include builtins\pmt.e    -- test pmach.e (passed with flying colours) [DEV newEmit needs work! but it can wait]
;    51 --
;    52 --global constant diagBase = 2  -- temp, checked by p.exw to match newBase
;    53 
;    54 -- See also pmsgs.e, which is responsible for the two-liners created by
;    55 --  compile-time errors.
;    56 --
;    57 -- This file is automatically included as part of any exe file.
;    58 --
;    59 -- ******************************************
;    60 -- ******************************************
;    61 -- *****  WARNING: FRAGILE CODE AHEAD!  *****
;    62 -- ******************************************
;    63 -- ******************************************
;    64 --
;    65 -- Needless to say, I hope, take extra care here as if this should crash,
;    66 -- well, it will probably crash while trying to report the bug in itself...
;    67 --
;    68 -- When interpreting, errors in the user app are handled by the copy of 
;    69 --  pdiag.e in p.exe, which is also sitting ready to handle any errors
;    70 --  in the p.exw it was compiled from, whereas, of course, all compiled
;    71 --  applications must be shipped with their own private copy. This also
;    72 --  means you CANNOT "edit/test" this code in interpreted mode; instead
;    73 --  you MUST use -c to actually execute any modifications. "p -c test"
;    74 --  is strongly advised as opposed to using "p -c p" for testing, since
;    75 --  the latter may confuse by always being "one-step-out-of-date" (plus
;    76 --  of course you really do not want a broken p.exe lying around).
;    77 --
;    78 -- In general I would say there is no way to trace() this file, in any
;    79 --  case not when it is actually handling a crash. While theoretically
;    80 --  it may be possible to fudge a partial trace "in situ", it is going
;    81 --  to be far easier if you just copy/paste/rename and try out any new
;    82 --  ideas in some other/new/temporary file.
;    83 -- In many cases I have needed to add a slew of console displays to
;    84 --  narrow down the location of a bug in this code.
;    85 -- Of course it took me a while to figure out the proper way to code
;    86 --  this is to test everything and leave clues in the [partial] ex.err
;    87 --  should anything go wrong, such as those at the start of getValue().
;    88 --
;    89 -- TIP: In some cases where "p -c test" does not seem to want to work,
;    90 --  "p p -c test" may do the trick, particularly when adding/changing 
;    91 --  an opcode or making some other change to the p.exw sources.
;    92 -- A favourite trick is to replace the "if bind then" in Compile() in
;    93 --  pmain.e with "if 0 then", and [perhaps] manually include pdiag.e 
;    94 --  in a test program, to force the issue. YMMV, though.
;    95 --
;    96 -- TO DO: [DONE, I think]
;    97 --  Unify compile-time and run-time file handling so that the 
;    98 --  warning messages (from pmsgs.e) can be written to a run-time
;    99 --  .err report. Or perhaps just re-open it in append mode?
;   100 --
;   101 --!/**/without debug -- removal may or may not ease debugging!
;   102                     -- (this option probably makes v. little difference
;   103                     --  here, but see without type_check below.)
;   104 -- NB: the above "without debug" propagates into ppp.e and prntf.e, 
;   105 --     since they are used in the following code.
;   106 
;   107 --/**/  -- not really needed, but avoids an opCallOnce:
;   108 --include builtins\VM\pcfunc.e
;   109 --/**/  include builtins\VM\pprntfN.e
;   110 --!/!*!*!/  include builtins\VM\psprintN.e
;   111 --/**/  include builtins\pcurrdir.e
;   112 --/**/  include builtins\pcase.e
;   113 --include builtins\VM\pfileioN.e
;   114 --include builtins\VM\pAbort.e -- (now in pStack.e)
;   115 
;   116 
;   117 integer edi4
;   118 constant CTB = "**CORRUPT TYPE BYTE**"
;   119 procedure show_corruption(string msg)
;   120 --
;   121 -- If this triggers you should assume a bug in builtins\VM, although it
;   122 -- could be a rogue poke() or possibly some application-specific #ilASM{}.
;   123 -- Such problems usually require OllyDbg/FDBG/edb or similar for analysis.
;   124 --
;   125 -- The idea is that if you can reproduce the error with a consistent diff
;   126 -- then you can trap after pGtcb has been set, and then trap the expected
;   127 -- memory location where you expect the corruption will occur. The actual
;   128 -- location will most likely be different on every run. This may need to
;   129 -- follow the pGtcb chain N steps (see pHeap) to obtain any consistency.
;   130 --
;   131 integer pGtcb
;   132     #ilASM{
;   133         call :%pGetpGtcb
                call #0046306F (:%pGetpGtcb)  ;#0046BBD1: 350 9974FFFF               v  00 00  1   1      
;   134         [32]
;   135             mov [pGtcb],eax
                    mov [ebp-4] (pGtcb),eax  ;#0046BBD6: 211105 FC                  uv 00 21  1   2      
;   136         [64]
;   137             mov [pGtcb],rax
;   138         []
;   139           }
;   140     printf(1,"\n\n%s at #%08x(-1), pGtcb=#%08x, *4=#%08x, diff=#%08x\n\n",
;   141              {msg,edi4*4,pGtcb,pGtcb*4,edi4*4-pGtcb*4})
    mov ecx,[#00402430] (edi4)            ;#0046BBD9: 213015 30244000            vu 02 00  1   2      
    cmp ecx,h4                            ;#0046BBDF: 201371 00000040            uv 00 02  1   3      
    jne #0046BBF1                         ;#0046BBE5: 165 0A                     v  00 00  1   3      
    mov esi,919                           ;#0046BBE7: 276 97030000               uv 40 00  1   4      
    call #00462744 (:%pUnassigned)        ;#0046BBEC: 350 536BFFFF               v  00 00  1   4      
    lea edi,[ebp-8] (symtab[925])         ;#0046BBF1: 215175 F8                  uv 80 20  1   5      
    mov eax,[#0040205C] (JS)              ;#0046BBF4: 241 5C204000               vu 01 00  1   5      
    call #0045F412 (:%opMul)              ;#0046BBF9: 350 1438FFFF               v  00 00  1   6      
    mov esi,[ebp-4] (pGtcb)               ;#0046BBFE: 213165 FC                  uv 40 20  1   7      
    cmp esi,h4                            ;#0046BC01: 201376 00000040            uv 00 40  1   8 40   
    jne #0046BC13                         ;#0046BC07: 165 0A                     v  00 00  1   8      
    mov esi,923                           ;#0046BC09: 276 9B030000               uv 40 00  1   9      
    call #00462744 (:%pUnassigned)        ;#0046BC0E: 350 316BFFFF               v  00 00  1   9      
    lea edi,[ebp-12] (symtab[926])        ;#0046BC13: 215175 F4                  uv 80 20  1  10      
    mov ecx,esi                           ;#0046BC16: 211361                     vu 02 40  1  10      
    mov eax,[#0040205C] (JS)              ;#0046BC18: 241 5C204000               uv 01 00  1  11      
    call #0045F412 (:%opMul)              ;#0046BC1D: 350 F037FFFF               v  00 00  1  11      
    lea edi,[ebp-16] (symtab[927])        ;#0046BC22: 215175 F0                  uv 80 20  1  12      
    mov ecx,[#00402430] (edi4)            ;#0046BC25: 213015 30244000            vu 02 00  1  12      
    mov eax,[#0040205C] (JS)              ;#0046BC2B: 241 5C204000               uv 01 00  1  13      
    call #0045F412 (:%opMul)              ;#0046BC30: 350 DD37FFFF               v  00 00  1  13      
    lea edi,[ebp-20] (symtab[928])        ;#0046BC35: 215175 EC                  uv 80 20  1  14      
    mov ecx,[ebp-4] (pGtcb)               ;#0046BC38: 213115 FC                  vu 02 20  1  14      
    mov eax,[#0040205C] (JS)              ;#0046BC3B: 241 5C204000               uv 01 00  1  15      
    call #0045F412 (:%opMul)              ;#0046BC40: 350 CD37FFFF               v  00 00  1  15      
    lea edi,[ebp-24] (symtab[929])        ;#0046BC45: 215175 E8                  uv 80 20  1  16      
    mov ecx,[ebp-16] (symtab[927])        ;#0046BC48: 213115 F0                  vu 02 20  1  16      
    mov eax,[ebp-20] (symtab[928])        ;#0046BC4B: 213105 EC                  uv 01 20  1  17      
    call #0045F299 (:%opSub)              ;#0046BC4E: 350 4636FFFF               v  00 00  1  17      
    lea eax,[ebp-28] (symtab[930])        ;#0046BC53: 215105 E4                  uv 01 20  1  18      
    mov edx,5                             ;#0046BC56: 272 05000000               vu 04 00  1  18      
    push #0046BC94                        ;#0046BC5B: 150 94BC4600               uv 00 00  1  19      
    push eax                              ;#0046BC60: 120                        vu 00 01  1  19      
    push dword[ebp-24] (symtab[929])      ;#0046BC61: 377165 E8                  np 00 20  2  20      
    mov [ebp-24] (symtab[929]),ebx        ;#0046BC64: 211135 E8                  uv 00 28  1  22      
    push dword[ebp-12] (symtab[926])      ;#0046BC67: 377165 F4                  np 00 20  2  23      
    mov [ebp-12] (symtab[926]),ebx        ;#0046BC6A: 211135 F4                  uv 00 28  1  25      
    push dword[ebp-4] (pGtcb)             ;#0046BC6D: 377165 FC                  np 00 20  2  26      
    push dword[ebp-8] (symtab[925])       ;#0046BC70: 377165 F8                  np 00 20  2  28      
    mov [ebp-8] (symtab[925]),ebx         ;#0046BC73: 211135 F8                  uv 00 28  1  30      
    mov edi,[ebp] (msg)                   ;#0046BC76: 213175 00                  vu 80 20  1  30      
    cmp edi,h4                            ;#0046BC79: 201377 00000040            uv 00 80  1  31      
    jl #0046BC8B                          ;#0046BC7F: 174 0A                     v  00 00  1  31      
    add dword[ebx+edi*4-8],1              ;#0046BC81: 203104273 F8 01            u  00 88  3  32      
    cmp eax,922                           ;#0046BC86: 075 9A030000               vu 00 01  1  34      
    push edi                              ;#0046BC8B: 127                        uv 00 80  1  35      
    mov edi,[ebp-28] (symtab[930])        ;#0046BC8C: 213175 E4                  vu 80 20  1  35      
    jmp #00460143 (:%pMkSq)               ;#0046BC8F: 351 AF44FFFF               v  00 00  1  36      
    mov ecx,9                             ;#0046BC94: 271 09000000               uv 02 00  1  37      
    mov edx,400                           ;#0046BC99: 272 90010000               vu 04 00  1  37      
    call #00462C02 (:%opFrame) (printf)   ;#0046BC9E: 350 5F6FFFFF               v  00 00  1  38      
    mov [ebp] (fn), dword 1               ;#0046BCA3: 307105 00 01000000         uv 00 20  1  39      
    mov esi,[#00402438]                   ;#0046BCAA: 213065 38244000            vu 40 00  1  39      
    mov [ebp-4] (fmt),esi                 ;#0046BCB0: 211165 FC                  uv 00 60  1  40      
    add dword[ebx+esi*4-8],1              ;#0046BCB3: 203104263 F8 01            u  00 48  3  42    *40*
    mov edi,[ebp+20] (prevebp)            ;#0046BCB8: 213175 14                  vu 80 20  1  44      
    mov eax,[edi-28]                      ;#0046BCBB: 213107 E4                  uv 01 80  1  47    *80*
    mov [edi-28], dword h4                ;#0046BCBE: 307107 E4 00000040         vu 00 80  1  47      
    cmp eax,h4                            ;#0046BCC5: 075 00000040               uv 00 01  1  48      
    jne #0046BCD6                         ;#0046BCCA: 165 0A                     v  00 00  1  48      
    mov esi,930                           ;#0046BCCC: 276 A2030000               uv 40 00  1  49      
    call #00462744 (:%pUnassigned)        ;#0046BCD1: 350 6E6AFFFF               v  00 00  1  49      
    mov [ebp-8] (args),eax                ;#0046BCD6: 211105 F8                  uv 00 21  1  50      
    mov [ebp+28] (retaddr),#0046BCE5      ;#0046BCD9: 307105 1C E5BC4600         vu 00 20  1  50      
    jmp #00444FC4 (code:printf)           ;#0046BCE0: 351 DF92FDFF               v  00 00  1  51      
    jmp #00462C8F (:%opRetf)              ;#0046BCE5: 351 A56FFFFF               v  00 00  1  52      
;   142 end procedure
;   143 
;   144 --include pgets0.ew     --DEV removed 16/6/08...
;   145 --include builtins\VM\pppN.e
;   146 include builtins\ppp.e
;   147 -- 01/08/2013: (DEV... some misunderstanding here, file was created 30/7/14)
;   148 --include builtins\VM\pdeleteN.e
;   149 
;   150 --constant MAXLEN=5000
;   151 
;   152 integer fn
;   153 
;   154 -- added 17/5/15:
;   155 --constant MAXLINELEN = 77  -- approximate screen/printer width
;   156 constant MAXLINELEN = 129   -- approximate screen/printer width
;   157                             -- (77 rather than 80 as sprint(o,l) may tag
;   158                             --  a ".." in addition to the passed length)
;   159 
;   160 --
;   161 -- Note: The following just curbs the excesses, and is not meant to be accurate 
;   162 --       or have the desired effect when less than the above MAXLINELEN constant. 
;   163 --       It is quite arbitrary. Feel free to add an extra 0 or two on the end, but 
;   164 --       there is no point in making it so big it takes weeks to finish a report 
;   165 --       that is either too big to load into an editor, or takes another two weeks 
;   166 --       to do so, and equally of course a "no limit" option is just plain daft. 
;   167 --       Quite often, debugging can be a bit easier when this is fairly small,
;   168 --       ie/eg 500 equates to around 10 page downs to get past a big sequence,
;   169 --       whereas, obviously, 20000 could easily make that around 400 keystrokes.
;   170 --       Equally, while 500 might be best for day-to-day development, 50,000
;   171 --       might be more sensible on live end-user systems, to ensure you capture
;   172 --       everything needed to diagnose some rare intermittent problem.
;   173 --       DEV make this configurable in pgui, and default to 50000? Or maybe 50000 for compiled programs, 500 for interpreted?
;   174 --       Be warned that at 50000 I just start to notice the odd pregnant pause 
;   175 --       as it (p.exe) struggles to give birth to some monster ex.err files, and
;   176 --       would fully expect exponential slowdown as things get even bigger.
;   177 --
;   178 constant MAXLENN = 20000 -- longest string/sequence you will ever really need
;   179 --constant MAXLENN = 1000000 -- longest string/sequence you will ever really need
;   180 
;   181 -- Note: The following may not honor MAXLENN like it should/used to (which is, if 
;   182 --       anything, a problem in ppp.e rather than here). You may want this if, in 
;   183 --       order to reproduce a problem, you intend to cut/paste values out of an 
;   184 --       ex.err directly into the source of a test program.
;   185 --
;   186 constant OLDSTYLE = 0       --DEV/SUG make this a command line or pgui setting
;   187 
;   188 --
;   189 -- Of course the first notion is to print things as and when lines get full, however
;   190 --  consider s = repeat(0,20); s[10] = repeat(0,20): if, as I do, you want to see:
;   191 --  s[1..9] = {0,0,0,0,0,0,0,0,0}
;   192 --  s[10] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
;   193 --  s[11..20] = {0,0,0,0,0,0,0,0,0,0,0}
;   194 --  (assuming that 20 was enough to break past MAXLINELEN and force the linebreaks)
;   195 --  then while printing (or splitting) s[10] you've got 9 elements in hand, somewhere
;   196 --  higher up the call stack, that you haven't had reason to print yet, and of course 
;   197 --  with longer and more deeply nested structures things can get far worse. Instead,
;   198 --  just append things to a "printstack" along with a key to sort everything into the
;   199 --  right order before printing. The routines below chuck around a fair few partial
;   200 --  results, start and current indexes, and return the same in subtly different ways
;   201 --  depending on what just happened, that I would struggle to explain any better than
;   202 --  the source code itself does.
;   203 --
;   204 
;   205 sequence printstack -- each element contains 3 items:
;   206                     --  indicii - for sorting, eg {21,1}
;   207                     --  name    - eg "symtab[21][1..11]" (matches that {21,1})
;   208                     --  text    - the formatted value
;   209 
;   210 procedure addtostack(sequence idii, integer idxr, string name, string text)
    mov ecx,[ebp] (idii)                  ;#0046A62D: 213115 00                  uv 02 20  1   1      
    cmp ecx,h4                            ;#0046A630: 201371 00000040            uv 00 02  1   2 02   
    jl #0046A63F                          ;#0046A636: 174 07                     v  00 00  1   2      
    test byte[ebx+ecx*4-1],#80            ;#0046A638: 366104213 FF 80            u  00 0A  2   3      
    jne #0046A649                         ;#0046A63D: 165 0A                     v  00 00  1   4      
    mov ecx,1069                          ;#0046A63F: 271 2D040000               uv 02 00  1   5      
    call #00462D8D (:%opTcFail)           ;#0046A644: 350 4487FFFF               v  00 00  1   5      
    mov eax,[ebp-12] (text)               ;#0046A649: 213105 F4                  uv 01 20  1   6      
    cmp eax,h4                            ;#0046A64C: 075 00000040               uv 00 01  1   7 01   
    jl #0046A65A                          ;#0046A651: 174 07                     v  00 00  1   7      
    cmp byte[ebx+eax*4-1],#82             ;#0046A653: 200174203 FF 82            u  00 09  2   8      
    je #0046A664                          ;#0046A658: 164 0A                     v  00 00  1   9      
    mov ecx,1072                          ;#0046A65A: 271 30040000               uv 02 00  1  10      
    call #00462D8D (:%opTcFail)           ;#0046A65F: 350 2987FFFF               v  00 00  1  10      
;   211     idii = deep_copy(idii)
    mov ecx,8                             ;#0046A664: 271 08000000               uv 02 00  1  11      
    mov edx,266                           ;#0046A669: 272 0A010000               vu 04 00  1  11      
    call :%opFrame (deep_copy)            ;#0046A66E: 350 8F85FFFF               v  00 00  1  12      
    mov edi,[ebp+20] (prevebp)            ;#0046A673: 213175 14                  uv 80 20  1  13      
    mov eax,[edi]                         ;#0046A676: 213007                     uv 01 80  1  16 80 *80*
    mov [edi], dword h4                   ;#0046A678: 307007 00000040            vu 00 80  1  16      
    cmp eax,h4                            ;#0046A67E: 075 00000040               uv 00 01  1  17      
    jne #0046A68F                         ;#0046A683: 165 0A                     v  00 00  1  17      
    mov esi,1069                          ;#0046A685: 276 2D040000               uv 40 00  1  18      
    call #00462744 (:%pUnassigned)        ;#0046A68A: 350 B580FFFF               v  00 00  1  18      
    mov [ebp] (o),eax                     ;#0046A68F: 211105 00                  uv 00 21  1  19      
    mov [ebp+28] (retaddr),#0046A69E      ;#0046A692: 307105 1C 9EA64600         vu 00 20  1  19      
    jmp #0044FA59 (code:deep_copy)        ;#0046A699: 351 BB53FEFF               v  00 00  1  20      
    push eax                              ;#0046A69E: 120                        uv 00 01  1  21      
    mov esi,[ebp] (idii)                  ;#0046A69F: 213165 00                  vu 40 20  1  21      
    cmp esi,h4                            ;#0046A6A2: 201376 00000040            uv 00 40  1  22      
    jle #0046A6B8                         ;#0046A6A8: 176 0E                     v  00 00  1  22      
    sub dword[ebx+esi*4-8],1              ;#0046A6AA: 203154263 F8 01            u  00 48  3  23      
    jne #0046A6B8                         ;#0046A6AF: 165 07                     v  00 00  1  25      
    mov edx,esi                           ;#0046A6B1: 213326                     uv 04 40  1  26      
    call #004639A8 (:%pDealloc)           ;#0046A6B3: 350 F092FFFF               v  00 00  1  26      
    pop dword[ebp] (idii)                 ;#0046A6B8: 217105 00                  np 00 20  3  27      
    mov edi,[ebp] (idii)                  ;#0046A6BB: 213175 00                  uv 80 20  1  30      
    cmp edi,h4                            ;#0046A6BE: 201377 00000040            uv 00 80  1  31 80   
    jl #0046A6CD                          ;#0046A6C4: 174 07                     v  00 00  1  31      
    test byte[ebx+edi*4-1],#80            ;#0046A6C6: 366104273 FF 80            u  00 88  2  32      
    jne #0046A6D7                         ;#0046A6CB: 165 0A                     v  00 00  1  33      
    mov ecx,1069                          ;#0046A6CD: 271 2D040000               uv 02 00  1  34      
    call #00462D8D (:%opTcFail)           ;#0046A6D2: 350 B686FFFF               v  00 00  1  34      
;   212     idii[$] = idxr
    mov esi,edi                           ;#0046A6D7: 211376                     uv 40 80  1  35      
    mov edi,[#00402014]                   ;#0046A6D9: 213075 14204000            vu 80 00  1  35      
    mov ecx,[ebp-4] (idxr)                ;#0046A6DF: 213115 FC                  uv 02 20  1  36      
    mov eax,ebp                           ;#0046A6E2: 213305                     vu 01 20  1  36      
    call #004607F3 (:%pRepe1)             ;#0046A6E4: 350 0A61FFFF               v  00 00  1  37      
;   213 --  if idii={11} then ?9/0 end if
;   214     printstack = append(printstack,{idii,name,text})
    lea eax,[ebp-16] (symtab[1073])       ;#0046A6E9: 215105 F0                  uv 01 20  1  38      
    mov edx,3                             ;#0046A6EC: 272 03000000               vu 04 00  1  38      
    push #0046A740                        ;#0046A6F1: 150 40A74600               uv 00 00  1  39      
    push eax                              ;#0046A6F6: 120                        vu 00 01  1  39      
    mov eax,[ebp-12] (text)               ;#0046A6F7: 213105 F4                  uv 01 20  1  40      
    cmp eax,h4                            ;#0046A6FA: 075 00000040               uv 00 01  1  41 01   
    jl #0046A70B                          ;#0046A6FF: 174 0A                     v  00 00  1  41      
    add dword[ebx+eax*4-8],1              ;#0046A701: 203104203 F8 01            u  00 09  3  42      
    cmp eax,1072                          ;#0046A706: 075 30040000               vu 00 01  1  44      
    push eax                              ;#0046A70B: 120                        uv 00 01  1  45      
    mov esi,[ebp-8] (name)                ;#0046A70C: 213165 F8                  vu 40 20  1  45      
    cmp esi,h4                            ;#0046A70F: 201376 00000040            uv 00 40  1  46      
    jl #0046A721                          ;#0046A715: 174 0A                     v  00 00  1  46      
    add dword[ebx+esi*4-8],1              ;#0046A717: 203104263 F8 01            u  00 48  3  47      
    cmp eax,1071                          ;#0046A71C: 075 2F040000               vu 00 01  1  49      
    push esi                              ;#0046A721: 126                        uv 00 40  1  50      
    mov edi,[ebp] (idii)                  ;#0046A722: 213175 00                  vu 80 20  1  50      
    cmp edi,h4                            ;#0046A725: 201377 00000040            uv 00 80  1  51      
    jl #0046A737                          ;#0046A72B: 174 0A                     v  00 00  1  51      
    add dword[ebx+edi*4-8],1              ;#0046A72D: 203104273 F8 01            u  00 88  3  52      
    cmp eax,1069                          ;#0046A732: 075 2D040000               vu 00 01  1  54      
    push edi                              ;#0046A737: 127                        uv 00 80  1  55      
    mov edi,[ebp-16] (symtab[1073])       ;#0046A738: 213175 F0                  vu 80 20  1  55      
    jmp #00460143 (:%pMkSq)               ;#0046A73B: 351 035AFFFF               v  00 00  1  56      
    mov ecx,[#00402520] (printstack)      ;#0046A740: 213015 20254000            uv 02 00  1  57      
    cmp ecx,h4                            ;#0046A746: 201371 00000040            uv 00 02  1  58 02   
    jne #0046A758                         ;#0046A74C: 165 0A                     v  00 00  1  58      
    mov esi,1067                          ;#0046A74E: 276 2B040000               uv 40 00  1  59      
    call #00462744 (:%pUnassigned)        ;#0046A753: 350 EC7FFFFF               v  00 00  1  59      
    mov edx,#00402520                     ;#0046A758: 272 20254000               uv 04 00  1  60      
    mov edi,#00402520                     ;#0046A75D: 277 20254000               vu 80 00  1  60      
    lea ecx,[ebp-16] (symtab[1073])       ;#0046A762: 215115 F0                  uv 02 20  1  61      
    xor eax,eax                           ;#0046A765: 061300                     vu 01 01  1  61      
    call #0045F9F7 (:%opApnd)             ;#0046A767: 350 8B52FFFF               v  00 00  1  62      
    mov edx,[ebp-16] (symtab[1073])       ;#0046A76C: 213125 F0                  uv 04 20  1  63      
    cmp edx,h4                            ;#0046A76F: 201372 00000040            uv 00 04  1  64 04   
    mov [ebp-16] (symtab[1073]),ebx       ;#0046A775: 211135 F0                  vu 00 28  1  64      
    jle #0046A786                         ;#0046A778: 176 0C                     v  00 00  1  65      
    sub dword[ebx+edx*4-8],1              ;#0046A77A: 203154223 F8 01            u  00 0C  3  66      
    jne #0046A786                         ;#0046A77F: 165 05                     v  00 00  1  68      
    call #004639A8 (:%pDealloc)           ;#0046A781: 350 2292FFFF               v  00 00  1  69      
    jmp #00462C8F (:%opRetf)              ;#0046A786: 351 0485FFFF               v  00 00  1  70      
;   215 end procedure
;   216 
;   217 function subscr(string prev, string name, integer prst, integer prdx)
    mov ecx,[ebp] (prev)                  ;#0046BCEA: 213115 00                  uv 02 20  1   1      
    cmp ecx,h4                            ;#0046BCED: 201371 00000040            uv 00 02  1   2 02   
    jl #0046BCFC                          ;#0046BCF3: 174 07                     v  00 00  1   2      
    cmp byte[ebx+ecx*4-1],#82             ;#0046BCF5: 200174213 FF 82            u  00 0A  2   3      
    je #0046BD06                          ;#0046BCFA: 164 0A                     v  00 00  1   4      
    mov ecx,1076                          ;#0046BCFC: 271 34040000               uv 02 00  1   5      
    call #00462D8D (:%opTcFail)           ;#0046BD01: 350 8770FFFF               v  00 00  1   5      
;   218 -- Helper routine for setting subscripts, typically for things 
;   219 --  that are just about to be chucked onto the printstack.
;   220 -- Note this is not meant to be called for any [1..$] cases.
;   221     if prst=prdx then
    mov edi,[ebp-8] (prst)                ;#0046BD06: 213175 F8                  uv 80 20  1   6      
    mov esi,[ebp-12] (prdx)               ;#0046BD09: 213165 F4                  vu 40 20  1   6      
    cmp edi,esi                           ;#0046BD0C: 071367                     uv 00 C0  1   7      
    jne #0046BDAC                         ;#0046BD0E: 017205 98000000            v  00 00  1   7      
;   222         name = sprintf("%s[%d]",{name,prst})
    lea eax,[ebp-16] (symtab[1081])       ;#0046BD14: 215105 F0                  uv 01 20  1   8      
    mov edx,2                             ;#0046BD17: 272 02000000               vu 04 00  1   8      
    push #0046BD40                        ;#0046BD1C: 150 40BD4600               uv 00 00  1   9      
    push eax                              ;#0046BD21: 120                        vu 00 01  1   9      
    push edi                              ;#0046BD22: 127                        uv 00 80  1  10      
    mov eax,[ebp-4] (name)                ;#0046BD23: 213105 FC                  vu 01 20  1  10      
    cmp eax,h4                            ;#0046BD26: 075 00000040               uv 00 01  1  11      
    jl #0046BD37                          ;#0046BD2B: 174 0A                     v  00 00  1  11      
    add dword[ebx+eax*4-8],1              ;#0046BD2D: 203104203 F8 01            u  00 09  3  12      
    cmp eax,1077                          ;#0046BD32: 075 35040000               vu 00 01  1  14      
    push eax                              ;#0046BD37: 120                        uv 00 01  1  15      
    mov edi,[ebp-16] (symtab[1081])       ;#0046BD38: 213175 F0                  vu 80 20  1  15      
    jmp #00460143 (:%pMkSq)               ;#0046BD3B: 351 0344FFFF               v  00 00  1  16      
    mov ecx,2                             ;#0046BD40: 271 02000000               uv 02 00  1  17      
    mov edx,210                           ;#0046BD45: 272 D2000000               vu 04 00  1  17      
    call #00462C02 (:%opFrame) (sprintf)  ;#0046BD4A: 350 B36EFFFF               v  00 00  1  18      
    mov ecx,[#00402524]                   ;#0046BD4F: 213015 24254000            uv 02 00  1  19      
    mov [ebp] (fmt),ecx                   ;#0046BD55: 211115 00                  uv 00 22  1  20 02   
    add dword[ebx+ecx*4-8],1              ;#0046BD58: 203104213 F8 01            u  00 0A  3  22    *02*
    mov edi,[ebp+20] (prevebp)            ;#0046BD5D: 213175 14                  vu 80 20  1  24      
    mov eax,[edi-16]                      ;#0046BD60: 213107 F0                  uv 01 80  1  27    *80*
    mov [edi-16], dword h4                ;#0046BD63: 307107 F0 00000040         vu 00 80  1  27      
    cmp eax,h4                            ;#0046BD6A: 075 00000040               uv 00 01  1  28      
    jne #0046BD7B                         ;#0046BD6F: 165 0A                     v  00 00  1  28      
    mov esi,1081                          ;#0046BD71: 276 39040000               uv 40 00  1  29      
    call #00462744 (:%pUnassigned)        ;#0046BD76: 350 C969FFFF               v  00 00  1  29      
    mov [ebp-4] (args),eax                ;#0046BD7B: 211105 FC                  uv 00 21  1  30      
    mov [ebp+28] (retaddr),#0046BD8A      ;#0046BD7E: 307105 1C 8ABD4600         vu 00 20  1  30      
    jmp #00454E9A (code:sprintf)          ;#0046BD85: 351 1091FEFF               v  00 00  1  31      
    push eax                              ;#0046BD8A: 120                        uv 00 01  1  32      
    mov esi,[ebp-4] (name)                ;#0046BD8B: 213165 FC                  vu 40 20  1  32      
    cmp esi,h4                            ;#0046BD8E: 201376 00000040            uv 00 40  1  33      
    jle #0046BDA4                         ;#0046BD94: 176 0E                     v  00 00  1  33      
    sub dword[ebx+esi*4-8],1              ;#0046BD96: 203154263 F8 01            u  00 48  3  34      
    jne #0046BDA4                         ;#0046BD9B: 165 07                     v  00 00  1  36      
    mov edx,esi                           ;#0046BD9D: 213326                     uv 04 40  1  37      
    call #004639A8 (:%pDealloc)           ;#0046BD9F: 350 047CFFFF               v  00 00  1  37      
    pop dword[ebp-4] (name)               ;#0046BDA4: 217105 FC                  np 00 20  3  38      
    jmp #0046BE60                         ;#0046BDA7: 351 B4000000               v  00 00  1  41      
;   223     else
;   224         name = sprintf("%s[%d..%d]",{name,prst,prdx})
    lea eax,[ebp-16] (symtab[1081])       ;#0046BDAC: 215105 F0                  uv 01 20  1  42      
    mov edx,3                             ;#0046BDAF: 272 03000000               vu 04 00  1  42      
    push #0046BDDA                        ;#0046BDB4: 150 DABD4600               uv 00 00  1  43      
    push eax                              ;#0046BDB9: 120                        vu 00 01  1  43      
    push esi                              ;#0046BDBA: 126                        uv 00 40  1  44      
    push edi                              ;#0046BDBB: 127                        vu 00 80  1  44      
    mov ecx,[ebp-4] (name)                ;#0046BDBC: 213115 FC                  uv 02 20  1  45      
    cmp ecx,h4                            ;#0046BDBF: 201371 00000040            uv 00 02  1  46 02   
    jl #0046BDD1                          ;#0046BDC5: 174 0A                     v  00 00  1  46      
    add dword[ebx+ecx*4-8],1              ;#0046BDC7: 203104213 F8 01            u  00 0A  3  47      
    cmp eax,1077                          ;#0046BDCC: 075 35040000               vu 00 01  1  49      
    push ecx                              ;#0046BDD1: 121                        uv 00 02  1  50      
    mov edi,[ebp-16] (symtab[1081])       ;#0046BDD2: 213175 F0                  vu 80 20  1  50      
    jmp #00460143 (:%pMkSq)               ;#0046BDD5: 351 6943FFFF               v  00 00  1  51      
    mov ecx,2                             ;#0046BDDA: 271 02000000               uv 02 00  1  52      
    mov edx,210                           ;#0046BDDF: 272 D2000000               vu 04 00  1  52      
    call #00462C02 (:%opFrame) (sprintf)  ;#0046BDE4: 350 196EFFFF               v  00 00  1  53      
    mov eax,[#00402528]                   ;#0046BDE9: 241 28254000               uv 01 00  1  54      
    mov [ebp] (fmt),eax                   ;#0046BDEE: 211105 00                  uv 00 21  1  55 01   
    add dword[ebx+eax*4-8],1              ;#0046BDF1: 203104203 F8 01            u  00 09  3  57    *01*
    mov edi,[ebp+20] (prevebp)            ;#0046BDF6: 213175 14                  vu 80 20  1  59      
    mov eax,[edi-16]                      ;#0046BDF9: 213107 F0                  uv 01 80  1  62    *80*
    mov [edi-16], dword h4                ;#0046BDFC: 307107 F0 00000040         vu 00 80  1  62      
    cmp eax,h4                            ;#0046BE03: 075 00000040               uv 00 01  1  63      
    jne #0046BE14                         ;#0046BE08: 165 0A                     v  00 00  1  63      
    mov esi,1081                          ;#0046BE0A: 276 39040000               uv 40 00  1  64      
    call #00462744 (:%pUnassigned)        ;#0046BE0F: 350 3069FFFF               v  00 00  1  64      
    mov [ebp-4] (args),eax                ;#0046BE14: 211105 FC                  uv 00 21  1  65      
    mov [ebp+28] (retaddr),#0046BE23      ;#0046BE17: 307105 1C 23BE4600         vu 00 20  1  65      
    jmp #00454E9A (code:sprintf)          ;#0046BE1E: 351 7790FEFF               v  00 00  1  66      
    push eax                              ;#0046BE23: 120                        uv 00 01  1  67      
    mov esi,[ebp-4] (name)                ;#0046BE24: 213165 FC                  vu 40 20  1  67      
    cmp esi,h4                            ;#0046BE27: 201376 00000040            uv 00 40  1  68      
    jle #0046BE3D                         ;#0046BE2D: 176 0E                     v  00 00  1  68      
    sub dword[ebx+esi*4-8],1              ;#0046BE2F: 203154263 F8 01            u  00 48  3  69      
    jne #0046BE3D                         ;#0046BE34: 165 07                     v  00 00  1  71      
    mov edx,esi                           ;#0046BE36: 213326                     uv 04 40  1  72      
    call #004639A8 (:%pDealloc)           ;#0046BE38: 350 6B7BFFFF               v  00 00  1  72      
    pop dword[ebp-4] (name)               ;#0046BE3D: 217105 FC                  np 00 20  3  73      
;   225         prev = "{"&prev&"}"
    mov ecx,3                             ;#0046BE40: 271 03000000               uv 02 00  1  76      
    push #0046BE60                        ;#0046BE45: 150 60BE4600               vu 00 00  1  76      
    push dword[#00402530]                 ;#0046BE4A: 377065 30254000            np 00 00  2  77      
    push dword[ebp] (prev)                ;#0046BE50: 377165 00                  np 00 20  2  79      
    push dword[#0040252C]                 ;#0046BE53: 377065 2C254000            np 00 00  2  81      
    mov eax,ebp                           ;#0046BE59: 213305                     uv 01 20  1  83      
    jmp #0045FF95 (:%opConcatN)           ;#0046BE5B: 351 3541FFFF               v  00 00  1  83      
;   226     end if
;   227     return {prev,name}
    lea eax,[ebp-16] (symtab[1081])       ;#0046BE60: 215105 F0                  uv 01 20  1  84      
    mov edx,2                             ;#0046BE63: 272 02000000               vu 04 00  1  84      
    push #0046BEA2                        ;#0046BE68: 150 A2BE4600               uv 00 00  1  85      
    push eax                              ;#0046BE6D: 120                        vu 00 01  1  85      
    mov ecx,[ebp-4] (name)                ;#0046BE6E: 213115 FC                  uv 02 20  1  86      
    cmp ecx,h4                            ;#0046BE71: 201371 00000040            uv 00 02  1  87 02   
    jl #0046BE83                          ;#0046BE77: 174 0A                     v  00 00  1  87      
    add dword[ebx+ecx*4-8],1              ;#0046BE79: 203104213 F8 01            u  00 0A  3  88      
    cmp eax,1077                          ;#0046BE7E: 075 35040000               vu 00 01  1  90      
    push ecx                              ;#0046BE83: 121                        uv 00 02  1  91      
    mov edi,[ebp] (prev)                  ;#0046BE84: 213175 00                  vu 80 20  1  91      
    cmp edi,h4                            ;#0046BE87: 201377 00000040            uv 00 80  1  92      
    jl #0046BE99                          ;#0046BE8D: 174 0A                     v  00 00  1  92      
    add dword[ebx+edi*4-8],1              ;#0046BE8F: 203104273 F8 01            u  00 88  3  93      
    cmp eax,1076                          ;#0046BE94: 075 34040000               vu 00 01  1  95      
    push edi                              ;#0046BE99: 127                        uv 00 80  1  96      
    mov edi,[ebp-16] (symtab[1081])       ;#0046BE9A: 213175 F0                  vu 80 20  1  96      
    jmp #00460143 (:%pMkSq)               ;#0046BE9D: 351 A142FFFF               v  00 00  1  97      
    mov eax,[ebp-16] (symtab[1081])       ;#0046BEA2: 213105 F0                  uv 01 20  1  98      
    mov [ebp-16] (symtab[1081]),ebx       ;#0046BEA5: 211135 F0                  vu 00 28  1  98      
    jmp #00462C8F (:%opRetf)              ;#0046BEA8: 351 E26DFFFF               v  00 00  1  99      
;   228 end function
;   229 
;   230 constant tnr = "tnr\\\"\'0e"
;   231 function allascii(string x)
    mov esi,[ebp] (x)                     ;#0046BEAD: 213165 00                  uv 40 20  1   1      
    cmp esi,h4                            ;#0046BEB0: 201376 00000040            uv 00 40  1   2 40   
    jl #0046BEBF                          ;#0046BEB6: 174 07                     v  00 00  1   2      
    cmp byte[ebx+esi*4-1],#82             ;#0046BEB8: 200174263 FF 82            u  00 48  2   3      
    je #0046BEC9                          ;#0046BEBD: 164 0A                     v  00 00  1   4      
    mov ecx,1088                          ;#0046BEBF: 271 40040000               uv 02 00  1   5      
    call #00462D8D (:%opTcFail)           ;#0046BEC4: 350 C46EFFFF               v  00 00  1   5      
;   232 -- Phix allows "strings" to hold binary data, so double check 
;   233 -- before printing it as a string.
;   234 integer c, jstart = 0
    mov [ebp-8] (jstart),ebx              ;#0046BEC9: 211135 F8                  uv 00 28  1   6      
;   235     for i=length(x) to 1 by -1 do
    mov ecx,[ebx+esi*4-12]                ;#0046BECC: 213114263 F4               vu 02 48  1   6      
    mov [ebp-12] (symtab[1091]),ecx       ;#0046BED0: 211115 F4                  uv 00 22  1   7      
    mov [ebp-16] (i),ecx                  ;#0046BED3: 211115 F0                  vu 00 22  1   7      
    cmp ecx,1                             ;#0046BED6: 201371 01000000            uv 00 02  1   8      
    jl #0046C0C0                          ;#0046BEDC: 017214 DE010000            v  00 00  1   8      
;   236         c = x[i]
    mov edi,[ebp-16] (i)                  ;#0046BEE2: 213175 F0                  uv 80 20  1   9      
    mov esi,[ebp] (x)                     ;#0046BEE5: 213165 00                  vu 40 20  1   9      
    mov edx,1088                          ;#0046BEE8: 272 40040000               uv 04 00  1  10      
    call #004610CE (:%pSubse1is)          ;#0046BEED: 350 DC51FFFF               v  00 00  1  10      
    mov [ebp-4] (c),eax                   ;#0046BEF2: 211105 FC                  uv 00 21  1  11      
;   237         if c<' ' or c>#7E or c='`' then
    cmp eax,32                            ;#0046BEF5: 203370 20                  vu 00 01  1  11      
    jl #0046BF08                          ;#0046BEF8: 174 0E                     v  00 00  1  12      
    cmp eax,126                           ;#0046BEFA: 203370 7E                  uv 00 01  1  13      
    jg #0046BF08                          ;#0046BEFD: 177 09                     v  00 00  1  13      
    cmp eax,96                            ;#0046BEFF: 203370 60                  uv 00 01  1  14      
    jne #0046C066                         ;#0046BF02: 017205 5E010000            v  00 00  1  14      
;   238             if jstart=0 then jstart = i end if
    mov ecx,[ebp-8] (jstart)              ;#0046BF08: 213115 F8                  uv 02 20  1  15      
    cmp ecx,0                             ;#0046BF0B: 203371 00                  uv 00 02  1  16 02   
    jne #0046BF16                         ;#0046BF0E: 165 06                     v  00 00  1  16      
    mov edi,[ebp-16] (i)                  ;#0046BF10: 213175 F0                  uv 80 20  1  17      
    mov [ebp-8] (jstart),edi              ;#0046BF13: 211175 F8                  uv 00 A0  1  18 80   
;   239             for j=jstart to 1 by -1 do
    mov esi,[ebp-8] (jstart)              ;#0046BF16: 213165 F8                  vu 40 20  1  18      
    mov [ebp-20] (symtab[1093]),esi       ;#0046BF19: 211165 EC                  uv 00 60  1  19      
    mov [ebp-24] (j),esi                  ;#0046BF1C: 211165 E8                  vu 00 60  1  19      
    cmp esi,1                             ;#0046BF1F: 201376 01000000            uv 00 40  1  20      
    jl #0046C038                          ;#0046BF25: 017214 0D010000            v  00 00  1  20      
;   240 --added 9/4/20!!!:
;   241                 c = x[j]
    mov edi,[ebp-24] (j)                  ;#0046BF2B: 213175 E8                  uv 80 20  1  21      
    mov esi,[ebp] (x)                     ;#0046BF2E: 213165 00                  vu 40 20  1  21      
    mov edx,1088                          ;#0046BF31: 272 40040000               uv 04 00  1  22      
    call #004610CE (:%pSubse1is)          ;#0046BF36: 350 9351FFFF               v  00 00  1  22      
    mov [ebp-4] (c),eax                   ;#0046BF3B: 211105 FC                  uv 00 21  1  23      
;   242 --              if c<' ' or c>#7E or find(c,"\\\"\'") then
;   243                 if c<' ' or c>#7E or find(c,`\"'`) then
    cmp eax,32                            ;#0046BF3E: 203370 20                  vu 00 01  1  23      
    jl #0046BF82                          ;#0046BF41: 174 3F                     v  00 00  1  24      
    cmp eax,126                           ;#0046BF43: 203370 7E                  uv 00 01  1  25      
    jg #0046BF82                          ;#0046BF46: 177 3A                     v  00 00  1  25      
    mov ecx,8                             ;#0046BF48: 271 08000000               uv 02 00  1  26      
    mov edx,110                           ;#0046BF4D: 272 6E000000               vu 04 00  1  26      
    call #00462C02 (:%opFrame) (find)     ;#0046BF52: 350 AB6CFFFF               v  00 00  1  27      
    mov edi,[ebp+20] (prevebp)            ;#0046BF57: 213175 14                  uv 80 20  1  28      
    mov eax,[edi-4]                       ;#0046BF5A: 213107 FC                  uv 01 80  1  31 80 *80*
    mov [ebp] (needle),eax                ;#0046BF5D: 211105 00                  uv 00 21  1  32 01   
    mov ecx,[#00402538]                   ;#0046BF60: 213015 38254000            vu 02 00  1  32      
    mov [ebp-4] (haystack),ecx            ;#0046BF66: 211115 FC                  uv 00 22  1  33      
    add dword[ebx+ecx*4-8],1              ;#0046BF69: 203104213 F8 01            u  00 0A  3  35    *02*
    mov [ebp+28] (retaddr),#0046BF7A      ;#0046BF6E: 307105 1C 7ABF4600         vu 00 20  1  37      
    jmp #0045AADB (code:find)             ;#0046BF75: 351 61EBFEFF               v  00 00  1  38      
    test eax,eax                          ;#0046BF7A: 205300                     uv 00 01  1  39      
    je #0046C022                          ;#0046BF7C: 017204 A0000000            v  00 00  1  39      
;   244 --              if c<' ' or c>#FE or find(c,"\\\"\'") then
;   245                     c = find(c,"\t\n\r\\\"\'\0\e")
    mov ecx,8                             ;#0046BF82: 271 08000000               uv 02 00  1  40      
    mov edx,110                           ;#0046BF87: 272 6E000000               vu 04 00  1  40      
    call #00462C02 (:%opFrame) (find)     ;#0046BF8C: 350 716CFFFF               v  00 00  1  41      
    mov edi,[ebp+20] (prevebp)            ;#0046BF91: 213175 14                  uv 80 20  1  42      
    mov eax,[edi-4]                       ;#0046BF94: 213107 FC                  uv 01 80  1  45 80 *80*
    mov [ebp] (needle),eax                ;#0046BF97: 211105 00                  uv 00 21  1  46 01   
    mov edi,[#0040253C]                   ;#0046BF9A: 213075 3C254000            vu 80 00  1  46      
    mov [ebp-4] (haystack),edi            ;#0046BFA0: 211175 FC                  uv 00 A0  1  47      
    add dword[ebx+edi*4-8],1              ;#0046BFA3: 203104273 F8 01            u  00 88  3  49    *80*
    mov [ebp+28] (retaddr),#0046BFB4      ;#0046BFA8: 307105 1C B4BF4600         vu 00 20  1  51      
    jmp #0045AADB (code:find)             ;#0046BFAF: 351 27EBFEFF               v  00 00  1  52      
    mov [ebp-4] (c),eax                   ;#0046BFB4: 211105 FC                  uv 00 21  1  53      
;   246                     if c then
    test eax,eax                          ;#0046BFB7: 205300                     vu 00 01  1  53      
    je #0046C018                          ;#0046BFB9: 164 5D                     v  00 00  1  54      
;   247                         x[j..j] = '\\'&tnr[c]   -- NB does not work on RDS Eu/OpenEuphoria
    mov edi,eax                           ;#0046BFBB: 211307                     uv 80 01  1  55      
    mov esi,[#00402534] (tnr)             ;#0046BFBD: 213065 34254000            vu 40 00  1  55      
    mov edx,1085                          ;#0046BFC3: 272 3D040000               uv 04 00  1  56      
    call #004610CE (:%pSubse1is)          ;#0046BFC8: 350 0151FFFF               v  00 00  1  56      
    mov [ebp-28] (symtab[1097]),eax       ;#0046BFCD: 211105 E4                  uv 00 21  1  57      
    lea edx,[ebp-32] (symtab[1098])       ;#0046BFD0: 215125 E0                  vu 04 20  1  57      
    mov edi,#00402268                     ;#0046BFD3: 277 68224000               uv 80 00  1  58      
    lea ecx,[ebp-28] (symtab[1097])       ;#0046BFD8: 215115 E4                  vu 02 20  1  58      
    call #0045FD65 (:%opConcat)           ;#0046BFDB: 350 853DFFFF               v  00 00  1  59      
    mov ecx,1                             ;#0046BFE0: 271 01000000               uv 02 00  1  60      
    push #0046BFFA                        ;#0046BFE5: 150 FABF4600               vu 00 00  1  60      
    push dword[ebp-32] (symtab[1098])     ;#0046BFEA: 377165 E0                  np 00 20  2  61      
    push dword[ebp-24] (j)                ;#0046BFED: 377165 E8                  np 00 20  2  63      
    push dword[ebp-24] (j)                ;#0046BFF0: 377165 E8                  np 00 20  2  65      
    mov eax,ebp                           ;#0046BFF3: 213305                     uv 01 20  1  67      
    jmp #0046019E (:%pReps)               ;#0046BFF5: 351 A441FFFF               v  00 00  1  67      
    mov ecx,[ebp] (x)                     ;#0046BFFA: 213115 00                  uv 02 20  1  68      
    cmp ecx,h4                            ;#0046BFFD: 201371 00000040            uv 00 02  1  69 02   
    jl #0046C00C                          ;#0046C003: 174 07                     v  00 00  1  69      
    cmp byte[ebx+ecx*4-1],#82             ;#0046C005: 200174213 FF 82            u  00 0A  2  70      
    je #0046C022                          ;#0046C00A: 164 16                     v  00 00  1  71      
    mov ecx,1088                          ;#0046C00C: 271 40040000               uv 02 00  1  72      
    call #00462D8D (:%opTcFail)           ;#0046C011: 350 776DFFFF               v  00 00  1  72      
    jmp #0046C022                         ;#0046C016: 353 0A                     v  00 00  1  73      
;   248                     else
;   249                         return 0
    mov eax,0                             ;#0046C018: 270 00000000               uv 01 00  1  74      
    jmp #00462C8F (:%opRetf)              ;#0046C01D: 351 6D6CFFFF               v  00 00  1  74      
;   250                     end if
;   251                 end if
;   252             end for
    mov edi,[ebp-24] (j)                  ;#0046C022: 213175 E8                  uv 80 20  1  75      
    mov edx,1                             ;#0046C025: 272 01000000               vu 04 00  1  75      
    add edi,-1                            ;#0046C02A: 203307 FF                  uv 80 80  1  76      
    cmp edi,edx                           ;#0046C02D: 073372                     uv 00 84  1  77 80   
    mov [ebp-24] (j),edi                  ;#0046C02F: 211175 E8                  vu 00 A0  1  77      
    jge #0046BF2B                         ;#0046C032: 017215 F3FEFFFF            v  00 00  1  78      
;   253             return '"'&x&'"'
    mov ecx,3                             ;#0046C038: 271 03000000               uv 02 00  1  79      
    push #0046C059                        ;#0046C03D: 150 59C04600               vu 00 00  1  79      
    push dword[#0040226C]                 ;#0046C042: 377065 6C224000            np 00 00  2  80      
    push dword[ebp] (x)                   ;#0046C048: 377165 00                  np 00 20  2  82      
    push dword[#0040226C]                 ;#0046C04B: 377065 6C224000            np 00 00  2  84      
    lea eax,[ebp-36] (symtab[1099])       ;#0046C051: 215105 DC                  uv 01 20  1  86      
    jmp #0045FF95 (:%opConcatN)           ;#0046C054: 351 3C3FFFFF               v  00 00  1  86      
    mov eax,[ebp-36] (symtab[1099])       ;#0046C059: 213105 DC                  uv 01 20  1  87      
    mov [ebp-36] (symtab[1099]),ebx       ;#0046C05C: 211135 DC                  vu 00 28  1  87      
    jmp #00462C8F (:%opRetf)              ;#0046C05F: 351 2B6CFFFF               v  00 00  1  88      
;   254 --      elsif jstart=0 and find(c,"\\\"\'") then
    jmp #0046C0AA                         ;#0046C064: 353 44                     v  00 00  1  89      
;   255         elsif jstart=0 and find(c,`\"'`) then
    mov esi,[ebp-8] (jstart)              ;#0046C066: 213165 F8                  uv 40 20  1  90      
    cmp esi,0                             ;#0046C069: 203376 00                  uv 00 40  1  91 40   
    jne #0046C0AA                         ;#0046C06C: 165 3C                     v  00 00  1  91      
    mov ecx,8                             ;#0046C06E: 271 08000000               uv 02 00  1  92      
    mov edx,110                           ;#0046C073: 272 6E000000               vu 04 00  1  92      
    call #00462C02 (:%opFrame) (find)     ;#0046C078: 350 856BFFFF               v  00 00  1  93      
    mov edi,[ebp+20] (prevebp)            ;#0046C07D: 213175 14                  uv 80 20  1  94      
    mov eax,[edi-4]                       ;#0046C080: 213107 FC                  uv 01 80  1  97 80 *80*
    mov [ebp] (needle),eax                ;#0046C083: 211105 00                  uv 00 21  1  98 01   
    mov ecx,[#00402538]                   ;#0046C086: 213015 38254000            vu 02 00  1  98      
    mov [ebp-4] (haystack),ecx            ;#0046C08C: 211115 FC                  uv 00 22  1  99      
    add dword[ebx+ecx*4-8],1              ;#0046C08F: 203104213 F8 01            u  00 0A  3 101    *02*
    mov [ebp+28] (retaddr),#0046C0A0      ;#0046C094: 307105 1C A0C04600         vu 00 20  1 103      
    jmp #0045AADB (code:find)             ;#0046C09B: 351 3BEAFEFF               v  00 00  1 104      
    test eax,eax                          ;#0046C0A0: 205300                     uv 00 01  1 105      
    je #0046C0AA                          ;#0046C0A2: 164 06                     v  00 00  1 105      
;   256             jstart = i
    mov edi,[ebp-16] (i)                  ;#0046C0A4: 213175 F0                  uv 80 20  1 106      
    mov [ebp-8] (jstart),edi              ;#0046C0A7: 211175 F8                  uv 00 A0  1 107 80   
;   257         end if
;   258     end for
    mov esi,[ebp-16] (i)                  ;#0046C0AA: 213165 F0                  vu 40 20  1 107      
    mov edx,1                             ;#0046C0AD: 272 01000000               uv 04 00  1 108      
    add esi,-1                            ;#0046C0B2: 203306 FF                  vu 40 40  1 108      
    cmp esi,edx                           ;#0046C0B5: 073362                     uv 00 44  1 109      
    mov [ebp-16] (i),esi                  ;#0046C0B7: 211165 F0                  vu 00 60  1 109      
    jge #0046BEE2                         ;#0046C0BA: 017215 22FEFFFF            v  00 00  1 110      
;   259     return '`'&x&'`'
    mov ecx,3                             ;#0046C0C0: 271 03000000               uv 02 00  1 111      
    push #0046C0E1                        ;#0046C0C5: 150 E1C04600               vu 00 00  1 111      
    push dword[#00402280]                 ;#0046C0CA: 377065 80224000            np 00 00  2 112      
    push dword[ebp] (x)                   ;#0046C0D0: 377165 00                  np 00 20  2 114      
    push dword[#00402280]                 ;#0046C0D3: 377065 80224000            np 00 00  2 116      
    lea eax,[ebp-36] (symtab[1099])       ;#0046C0D9: 215105 DC                  uv 01 20  1 118      
    jmp #0045FF95 (:%opConcatN)           ;#0046C0DC: 351 B43EFFFF               v  00 00  1 118      
    mov eax,[ebp-36] (symtab[1099])       ;#0046C0E1: 213105 DC                  uv 01 20  1 119      
    mov [ebp-36] (symtab[1099]),ebx       ;#0046C0E4: 211135 DC                  vu 00 28  1 119      
    jmp #00462C8F (:%opRetf)              ;#0046C0E7: 351 A36BFFFF               v  00 00  1 120      
;   260 end function
;   261 
;   262 --
;   263 --DEV known "bug":
;   264 --If this outputs say (there's 160s at [22781..2], so allascii() says 0):
;   265 --  text[1..11] = {60'<',33'!',68'D',79'O',67'C',84'T',89'Y',80'P',69'E',32' ',104'h'}
;   266 --  text[12..21] = {116't',109'm',108'l',62'>',60'<',104'h',116't',109'm',108'l',32' '}
;   267 --  text[22753..22762] = {68'D',110'n',111'o',116't',101'e',68'D',62'>',60'<',115's',116't'}
;   268 --  text[22763..22772] = {114'r',111'o',110'n',103'g',62'>',78'N',111'o',116't',101'e',60'<'}
;   269 --  text[22773..22782] = {47'/',115's',116't',114'r',111'o',110'n',103'g',62'>',160' ',160' '}
;   270 --  text[22783..22792] = {73'I',110'n',32' ',87'W',105'i',110'n',100'd',111'o',119'w',115's'}
;   271 --  text[22793..22802] = {160' ',56'8',32' ',97'a',110'n',100'd',32' ',108'l',97'a',116't'}
;   272 --  text[22803..22812] = {101'e',114'r',32' ',111'o',112'p',101'e',114'r',97'a',116't',105'i'}
;   273 --Then Edita/reformat ex.err munges it to:
;   274 --  text[1..11] = "<!DOCTYPE h"
;   275 --  text[12..21] = "tml><html "
;   276 --  text[22753..22762] = "DnoteD><st"
;   277 --  text[22763..22772] = "rong>Note<"
;   278 --  text[22773..22782] = {47'/',115's',116't',114'r',111'o',110'n',103'g',62'>',160' ',160' '}
;   279 --  text[22783..22792] = "In Windows"
;   280 --  text[22793..22802] = {160' ',56'8',32' ',97'a',110'n',100'd',32' ',108'l',97'a',116't'}
;   281 --  text[22803..22812] = "er operati"
;   282 --a) it looks awful (all scrunched up), b) we could perhaps do better in the first place, here,
;   283 --c) we would still want to leave some dword-sequences, in the same way that eaerr.e does.
;   284 --d) we might want a length>40 and >95% of elements are ascii or similar.
;   285 --e) why not just \xHH those in 1..255 we're not sure of?
;   286 --
;   287 --20/2/2021
;   288 --4/2/21:
;   289 --string cdi_filename = "",
;   290 --     cdi_varname = ""
;   291 string cdi_filename,
;   292        cdi_varname
;   293 
;   294 function cdi(string name, string prev, integer prst, integer prdx, object o, sequence idii)
    mov eax,[ebp-4] (prev)                ;#0046A78B: 213105 FC                  uv 01 20  1   1      
    cmp eax,h4                            ;#0046A78E: 075 00000040               uv 00 01  1   2 01   
    jl #0046A79C                          ;#0046A793: 174 07                     v  00 00  1   2      
    cmp byte[ebx+eax*4-1],#82             ;#0046A795: 200174203 FF 82            u  00 09  2   3      
    je #0046A7A6                          ;#0046A79A: 164 0A                     v  00 00  1   4      
    mov ecx,1105                          ;#0046A79C: 271 51040000               uv 02 00  1   5      
    call #00462D8D (:%opTcFail)           ;#0046A7A1: 350 E785FFFF               v  00 00  1   5      
    mov esi,[ebp-20] (idii)               ;#0046A7A6: 213165 EC                  uv 40 20  1   6      
    cmp esi,h4                            ;#0046A7A9: 201376 00000040            uv 00 40  1   7 40   
    jl #0046A7B8                          ;#0046A7AF: 174 07                     v  00 00  1   7      
    test byte[ebx+esi*4-1],#80            ;#0046A7B1: 366104263 FF 80            u  00 48  2   8      
    jne #0046A7C2                         ;#0046A7B6: 165 0A                     v  00 00  1   9      
    mov ecx,1109                          ;#0046A7B8: 271 55040000               uv 02 00  1  10      
    call #00462D8D (:%opTcFail)           ;#0046A7BD: 350 CB85FFFF               v  00 00  1  10      
;   295 --
;   296 -- Clever display of i'th item. Recursive.
;   297 --  name is eg "symtab", but may get "symtab[1]", "symtab[1][1]", etc.
;   298 --  prev is previously collected stuff to output: concatenate to it, or split the line.
;   299 --  prst is a starting index where (a non-empty) prev began.
;   300 --  prdx is the element index of name that we just got passed in o.
;   301 --  idii is a list of (start) indexes, to be used in the final sort.
;   302 --
;   303 -- Returns extended or purged {prst,prev}
;   304 --
;   305 -- ps: not totally sure I got return "1,2,3" vs return "{1,2,3}" precisely right, 
;   306 --      but, touch wood, it seems fine in all the cases I have tested so far...
;   307 --
;   308 object this     -- Scratch var: string representation of o or next element of o.
;   309                 -- In the key recursive call below, "this" gets passed to "prev",
;   310                 -- and grows/shrinks from what that returns rather than directly.
;   311 
;   312 string namedx   -- Scratch var: name with some or other idx tacked on the end.
;   313 
;   314 integer newprst,                -- Scratch/innner version of prst.
;   315         lo,                     -- length(o) shorthand
;   316         lp,                     -- length(prev) shorthand
;   317         lt,                     -- length(name)+4+length(this) shorthand
;   318         dotdot = 0,             -- add ".." on the end
    mov [ebp-48] (dotdot),ebx             ;#0046A7C2: 211135 D0                  uv 00 28  1  11      
;   319         stringo = 0,            -- string(o)/allascii(o) shorthand
    mov [ebp-52] (stringo),ebx            ;#0046A7C5: 211135 CC                  vu 00 28  1  11      
;   320         wasstacklen             -- to check if something got dumped
;   321 
;   322 -- added 15/10/15:
;   323     if not integer(o) then
    mov edi,[ebp-16] (o)                  ;#0046A7C8: 213175 F0                  uv 80 20  1  12      
    cmp edi,h4                            ;#0046A7CB: 201377 00000040            uv 00 80  1  13 80   
    jl #0046A808                          ;#0046A7D1: 174 35                     v  00 00  1  13      
;   324         this = CTB --"**CORRUPT TYPE BYTE**"
    mov ecx,[#00402434] (CTB)             ;#0046A7D3: 213015 34244000            uv 02 00  1  14      
    mov [ebp-24] (this),ecx               ;#0046A7D9: 211115 E8                  uv 00 22  1  15 02   
    add dword[ebx+ecx*4-8],1              ;#0046A7DC: 203104213 F8 01            u  00 0A  3  17    *02*
;   325         #ilASM{
;   326             [32]
;   327                 mov eax,[o]
                        mov eax,[ebp-16] (o)  ;#0046A7E1: 213105 F0                  vu 01 20  1  19      
;   328                 mov cl,byte[ebx+eax*4-1]
                        mov cl,[ebx+eax*4-1]  ;#0046A7E4: 212114203 FF               uv 02 09  1  22    *01*
;   329             [64]
;   330                 mov rax,[o]
;   331                 mov cl,byte[rbx+rax*4-1]
;   332             []
;   333                 cmp cl,#12
                        cmp cl,#12        ;#0046A7E8: 200371 12                  uv 00 02  1  23 02   
;   334                 je @f
                        je #0046A808      ;#0046A7EB: 164 1B                     v  00 00  1  23      
;   335                 cmp cl,#80
                        cmp cl,#80        ;#0046A7ED: 200371 80                  uv 00 02  1  24      
;   336                 je @f
                        je #0046A808      ;#0046A7F0: 164 16                     v  00 00  1  24      
;   337                 cmp cl,#82
                        cmp cl,#82        ;#0046A7F2: 200371 82                  uv 00 02  1  25      
;   338 --6/4/16:
;   339 --              jne :badtypebyte
;   340                 je @f
                        je #0046A808      ;#0046A7F5: 164 11                     v  00 00  1  25      
;   341                     [32]
;   342                         lea edi,[ebx+eax*4]
                                lea edi,[ebx+eax*4]  ;#0046A7F7: 215074203                  uv 80 09  1  26      
;   343                         shr edi,2
                                shr edi,2  ;#0046A7FA: 301357 02                  u  80 80  1  27      
;   344                         mov [edi4],edi
                                mov [#00402430] (edi4),edi  ;#0046A7FD: 211075 30244000            uv 00 80  1  28 80   
;   345                     [64]
;   346                         lea rdi,[rbx+rax*4]
;   347                         shr rdi,2
;   348                         mov [edi4],rdi
;   349                     []
;   350                 jmp :badtypebyte
                        jmp #0046BB6E     ;#0046A803: 351 66130000               v  00 00  1  28      
;   351               @@:
;   352             }
;   353     end if
;   354     wasstacklen = length(printstack)
    lea edi,[ebp-56] (wasstacklen)        ;#0046A808: 215175 C8                  uv 80 20  1  29      
    mov esi,[#00402520] (printstack)      ;#0046A80B: 213065 20254000            vu 40 00  1  29      
    mov edx,1067                          ;#0046A811: 272 2B040000               uv 04 00  1  30      
    call #0045EFEC (:%opLen)              ;#0046A816: 350 D147FFFF               v  00 00  1  30      
;   355 
;   356     if string(o) then
    mov eax,[ebp-16] (o)                  ;#0046A81B: 213105 F0                  uv 01 20  1  31      
    cmp eax,h4                            ;#0046A81E: 075 00000040               uv 00 01  1  32 01   
    jl #0046A8CE                          ;#0046A823: 017214 A5000000            v  00 00  1  32      
    cmp byte[ebx+eax*4-1],#82             ;#0046A829: 200174203 FF 82            u  00 09  2  33      
    jne #0046A8CE                         ;#0046A82E: 017205 9A000000            v  00 00  1  34      
;   357         if length(o)>MAXLENN then
    mov edi,[ebx+eax*4-12]                ;#0046A834: 213174203 F4               uv 80 09  1  35      
    cmp edi,20000                         ;#0046A838: 201377 204E0000            uv 00 80  1  36 80   
    jle #0046A868                         ;#0046A83E: 176 28                     v  00 00  1  36      
;   358             o = o[1..MAXLENN]
    lea edx,[ebp-16] (o)                  ;#0046A840: 215125 F0                  uv 04 20  1  37      
    mov ecx,1                             ;#0046A843: 271 01000000               vu 02 00  1  37      
    push #0046A861                        ;#0046A848: 150 61A84600               uv 00 00  1  38      
    push edx                              ;#0046A84D: 122                        vu 00 04  1  38      
    push 20000                            ;#0046A84E: 150 204E0000               uv 00 00  1  39      
    push 1                                ;#0046A853: 152 01                     vu 00 00  1  39      
    mov esi,eax                           ;#0046A855: 211306                     uv 40 01  1  40      
    mov edx,1108                          ;#0046A857: 272 54040000               vu 04 00  1  40      
    jmp #00460A75 (:%pSubss)              ;#0046A85C: 351 1462FFFF               v  00 00  1  41      
;   359             dotdot = 1
    mov [ebp-48] (dotdot), dword 1        ;#0046A861: 307105 D0 01000000         uv 00 20  1  42      
;   360         end if
;   361         this = allascii(o)
    mov ecx,10                            ;#0046A868: 271 0A000000               vu 02 00  1  42      
    mov edx,1087                          ;#0046A86D: 272 3F040000               uv 04 00  1  43      
    call :%opFrame (allascii)             ;#0046A872: 350 8B83FFFF               v  00 00  1  43      
    mov edi,[ebp+20] (prevebp)            ;#0046A877: 213175 14                  uv 80 20  1  44      
    mov eax,[edi-16]                      ;#0046A87A: 213107 F0                  uv 01 80  1  47 80 *80*
    xor ebx,ebx                           ;#0046A87D: 061333                     vu 08 08  1  47      
    cmp eax,h4                            ;#0046A87F: 075 00000040               uv 00 01  1  48      
    jl #0046A890                          ;#0046A884: 174 0A                     v  00 00  1  48      
    add dword[ebx+eax*4-8],1              ;#0046A886: 203104203 F8 01            u  00 09  3  49      
    cmp eax,1108                          ;#0046A88B: 075 54040000               vu 00 01  1  51      
    mov [ebp] (x),eax                     ;#0046A890: 211105 00                  uv 00 21  1  52      
    mov [ebp+28] (retaddr),#0046A89F      ;#0046A893: 307105 1C 9FA84600         vu 00 20  1  52      
    jmp #0046BEAD (code:allascii)         ;#0046A89A: 351 0E160000               v  00 00  1  53      
    push eax                              ;#0046A89F: 120                        uv 00 01  1  54      
    mov esi,[ebp-24] (this)               ;#0046A8A0: 213165 E8                  vu 40 20  1  54      
    cmp esi,h4                            ;#0046A8A3: 201376 00000040            uv 00 40  1  55      
    jle #0046A8B9                         ;#0046A8A9: 176 0E                     v  00 00  1  55      
    sub dword[ebx+esi*4-8],1              ;#0046A8AB: 203154263 F8 01            u  00 48  3  56      
    jne #0046A8B9                         ;#0046A8B0: 165 07                     v  00 00  1  58      
    mov edx,esi                           ;#0046A8B2: 213326                     uv 04 40  1  59      
    call #004639A8 (:%pDealloc)           ;#0046A8B4: 350 EF90FFFF               v  00 00  1  59      
    pop dword[ebp-24] (this)              ;#0046A8B9: 217105 E8                  np 00 20  3  60      
;   362         if string(this) then
    mov ecx,[ebp-24] (this)               ;#0046A8BC: 213115 E8                  uv 02 20  1  63      
    cmp ecx,h4                            ;#0046A8BF: 201371 00000040            uv 00 02  1  64 02   
    jl #0046A8CE                          ;#0046A8C5: 174 07                     v  00 00  1  64      
;   363             stringo = 1
    mov [ebp-52] (stringo), dword 1       ;#0046A8C7: 307105 CC 01000000         uv 00 20  1  65      
;   364         end if
;   365     end if
;   366     if atom(o) then
    mov edi,[ebp-16] (o)                  ;#0046A8CE: 213175 F0                  vu 80 20  1  65      
    cmp edi,h4                            ;#0046A8D1: 201377 00000040            uv 00 80  1  66      
    jl #0046A8E4                          ;#0046A8D7: 174 0B                     v  00 00  1  66      
    cmp byte[ebx+edi*4-1],#12             ;#0046A8D9: 200174273 FF 12            u  00 88  2  67      
    jne #0046AAC9                         ;#0046A8DE: 017205 E5010000            v  00 00  1  68      
;   367         this = sprintf("%.10g", o)
    mov ecx,2                             ;#0046A8E4: 271 02000000               uv 02 00  1  69      
    mov edx,210                           ;#0046A8E9: 272 D2000000               vu 04 00  1  69      
    call #00462C02 (:%opFrame) (sprintf)  ;#0046A8EE: 350 0F83FFFF               v  00 00  1  70      
    mov eax,[#004024E8]                   ;#0046A8F3: 241 E8244000               uv 01 00  1  71      
    mov [ebp] (fmt),eax                   ;#0046A8F8: 211105 00                  uv 00 21  1  72 01   
    add dword[ebx+eax*4-8],1              ;#0046A8FB: 203104203 F8 01            u  00 09  3  74    *01*
    mov edi,[ebp+20] (prevebp)            ;#0046A900: 213175 14                  vu 80 20  1  76      
    mov eax,[edi-16]                      ;#0046A903: 213107 F0                  uv 01 80  1  79    *80*
    xor ebx,ebx                           ;#0046A906: 061333                     vu 08 08  1  79      
    cmp eax,h4                            ;#0046A908: 075 00000040               uv 00 01  1  80      
    jl #0046A919                          ;#0046A90D: 174 0A                     v  00 00  1  80      
    add dword[ebx+eax*4-8],1              ;#0046A90F: 203104203 F8 01            u  00 09  3  81      
    cmp eax,1108                          ;#0046A914: 075 54040000               vu 00 01  1  83      
    mov [ebp-4] (args),eax                ;#0046A919: 211105 FC                  uv 00 21  1  84      
    mov [ebp+28] (retaddr),#0046A928      ;#0046A91C: 307105 1C 28A94600         vu 00 20  1  84      
    jmp #00454E9A (code:sprintf)          ;#0046A923: 351 72A5FEFF               v  00 00  1  85      
    push eax                              ;#0046A928: 120                        uv 00 01  1  86      
    mov esi,[ebp-24] (this)               ;#0046A929: 213165 E8                  vu 40 20  1  86      
    cmp esi,h4                            ;#0046A92C: 201376 00000040            uv 00 40  1  87      
    jle #0046A942                         ;#0046A932: 176 0E                     v  00 00  1  87      
    sub dword[ebx+esi*4-8],1              ;#0046A934: 203154263 F8 01            u  00 48  3  88      
    jne #0046A942                         ;#0046A939: 165 07                     v  00 00  1  90      
    mov edx,esi                           ;#0046A93B: 213326                     uv 04 40  1  91      
    call #004639A8 (:%pDealloc)           ;#0046A93D: 350 6690FFFF               v  00 00  1  91      
    pop dword[ebp-24] (this)              ;#0046A942: 217105 E8                  np 00 20  3  92      
;   368         if integer(o) then
    mov ecx,[ebp-16] (o)                  ;#0046A945: 213115 F0                  uv 02 20  1  95      
    cmp ecx,h4                            ;#0046A948: 201371 00000040            uv 00 02  1  96 02   
    jg #0046A9E2                          ;#0046A94E: 017217 8E000000            v  00 00  1  96      
;   369 --9/2/20:
;   370 --          if o>=#20 and o<=#FF then
;   371             if o='\\' then
    cmp ecx,92                            ;#0046A954: 203371 5C                  uv 00 02  1  97      
    jne #0046A96E                         ;#0046A957: 165 15                     v  00 00  1  97      
;   372                 this &= "'\\\\'"
    lea edx,[ebp-24] (this)               ;#0046A959: 215125 E8                  uv 04 20  1  98      
    lea edi,[ebp-24] (this)               ;#0046A95C: 215175 E8                  vu 80 20  1  98      
    mov ecx,#00402548                     ;#0046A95F: 271 48254000               uv 02 00  1  99      
    call #0045FD65 (:%opConcat)           ;#0046A964: 350 FC53FFFF               v  00 00  1  99      
    jmp #0046B284                         ;#0046A969: 351 16090000               v  00 00  1 100      
;   373             elsif o>=#20 and o<=#7D then
    cmp ecx,32                            ;#0046A96E: 203371 20                  uv 00 02  1 101      
    jl #0046B284                          ;#0046A971: 017214 0D090000            v  00 00  1 101      
    cmp ecx,125                           ;#0046A977: 203371 7D                  uv 00 02  1 102      
    jg #0046B284                          ;#0046A97A: 017217 04090000            v  00 00  1 102      
;   374                 this &= sprintf("'%s'",o)
    mov ecx,2                             ;#0046A980: 271 02000000               uv 02 00  1 103      
    mov edx,210                           ;#0046A985: 272 D2000000               vu 04 00  1 103      
    call #00462C02 (:%opFrame) (sprintf)  ;#0046A98A: 350 7382FFFF               v  00 00  1 104      
    mov edi,[#004024D0]                   ;#0046A98F: 213075 D0244000            uv 80 00  1 105      
    mov [ebp] (fmt),edi                   ;#0046A995: 211175 00                  uv 00 A0  1 106 80   
    add dword[ebx+edi*4-8],1              ;#0046A998: 203104273 F8 01            u  00 88  3 108    *80*
    mov edi,[ebp+20] (prevebp)            ;#0046A99D: 213175 14                  vu 80 20  1 110      
    mov eax,[edi-16]                      ;#0046A9A0: 213107 F0                  uv 01 80  1 113    *80*
    mov [ebp-4] (args),eax                ;#0046A9A3: 211105 FC                  uv 00 21  1 114 01   
    mov [ebp+28] (retaddr),#0046A9B2      ;#0046A9A6: 307105 1C B2A94600         vu 00 20  1 114      
    jmp #00454E9A (code:sprintf)          ;#0046A9AD: 351 E8A4FEFF               v  00 00  1 115      
    push eax                              ;#0046A9B2: 120                        uv 00 01  1 116      
    mov esi,[ebp-64] (symtab[1121])       ;#0046A9B3: 213165 C0                  vu 40 20  1 116      
    cmp esi,h4                            ;#0046A9B6: 201376 00000040            uv 00 40  1 117      
    jle #0046A9CC                         ;#0046A9BC: 176 0E                     v  00 00  1 117      
    sub dword[ebx+esi*4-8],1              ;#0046A9BE: 203154263 F8 01            u  00 48  3 118      
    jne #0046A9CC                         ;#0046A9C3: 165 07                     v  00 00  1 120      
    mov edx,esi                           ;#0046A9C5: 213326                     uv 04 40  1 121      
    call #004639A8 (:%pDealloc)           ;#0046A9C7: 350 DC8FFFFF               v  00 00  1 121      
    pop dword[ebp-64] (symtab[1121])      ;#0046A9CC: 217105 C0                  np 00 20  3 122      
    lea edx,[ebp-24] (this)               ;#0046A9CF: 215125 E8                  uv 04 20  1 125      
    lea edi,[ebp-24] (this)               ;#0046A9D2: 215175 E8                  vu 80 20  1 125      
    lea ecx,[ebp-64] (symtab[1121])       ;#0046A9D5: 215115 C0                  uv 02 20  1 126      
    call #0045FD65 (:%opConcat)           ;#0046A9D8: 350 8853FFFF               v  00 00  1 126      
;   375             end if
    jmp #0046B284                         ;#0046A9DD: 351 A2080000               v  00 00  1 127      
;   376         elsif not find('.',this)
    mov ecx,8                             ;#0046A9E2: 271 08000000               uv 02 00  1 128      
    mov edx,110                           ;#0046A9E7: 272 6E000000               vu 04 00  1 128      
    call #00462C02 (:%opFrame) (find)     ;#0046A9EC: 350 1182FFFF               v  00 00  1 129      
    mov [ebp] (needle), dword 46          ;#0046A9F1: 307105 00 2E000000         uv 00 20  1 130      
    mov edi,[ebp+20] (prevebp)            ;#0046A9F8: 213175 14                  vu 80 20  1 130      
    mov eax,[edi-24]                      ;#0046A9FB: 213107 E8                  uv 01 80  1 133    *80*
    xor ebx,ebx                           ;#0046A9FE: 061333                     vu 08 08  1 133      
    cmp eax,h4                            ;#0046AA00: 075 00000040               uv 00 01  1 134      
    jl #0046AA11                          ;#0046AA05: 174 0A                     v  00 00  1 134      
    add dword[ebx+eax*4-8],1              ;#0046AA07: 203104203 F8 01            u  00 09  3 135      
    cmp eax,1110                          ;#0046AA0C: 075 56040000               vu 00 01  1 137      
    mov [ebp-4] (haystack),eax            ;#0046AA11: 211105 FC                  uv 00 21  1 138      
    mov [ebp+28] (retaddr),#0046AA20      ;#0046AA14: 307105 1C 20AA4600         vu 00 20  1 138      
    jmp #0045AADB (code:find)             ;#0046AA1B: 351 BB00FFFF               v  00 00  1 139      
    test eax,eax                          ;#0046AA20: 205300                     uv 00 01  1 140      
    jne #0046B284                         ;#0046AA22: 017205 5C080000            v  00 00  1 140      
;   377           and not find('e',this)        -- eg 1e308
    mov ecx,8                             ;#0046AA28: 271 08000000               uv 02 00  1 141      
    mov edx,110                           ;#0046AA2D: 272 6E000000               vu 04 00  1 141      
    call #00462C02 (:%opFrame) (find)     ;#0046AA32: 350 CB81FFFF               v  00 00  1 142      
    mov [ebp] (needle), dword 101         ;#0046AA37: 307105 00 65000000         uv 00 20  1 143      
    mov edi,[ebp+20] (prevebp)            ;#0046AA3E: 213175 14                  vu 80 20  1 143      
    mov eax,[edi-24]                      ;#0046AA41: 213107 E8                  uv 01 80  1 146    *80*
    xor ebx,ebx                           ;#0046AA44: 061333                     vu 08 08  1 146      
    cmp eax,h4                            ;#0046AA46: 075 00000040               uv 00 01  1 147      
    jl #0046AA57                          ;#0046AA4B: 174 0A                     v  00 00  1 147      
    add dword[ebx+eax*4-8],1              ;#0046AA4D: 203104203 F8 01            u  00 09  3 148      
    cmp eax,1110                          ;#0046AA52: 075 56040000               vu 00 01  1 150      
    mov [ebp-4] (haystack),eax            ;#0046AA57: 211105 FC                  uv 00 21  1 151      
    mov [ebp+28] (retaddr),#0046AA66      ;#0046AA5A: 307105 1C 66AA4600         vu 00 20  1 151      
    jmp #0045AADB (code:find)             ;#0046AA61: 351 7500FFFF               v  00 00  1 152      
    test eax,eax                          ;#0046AA66: 205300                     uv 00 01  1 153      
    jne #0046B284                         ;#0046AA68: 017205 16080000            v  00 00  1 153      
;   378           and not find('n',this) then   -- (inf/nan)
    mov ecx,8                             ;#0046AA6E: 271 08000000               uv 02 00  1 154      
    mov edx,110                           ;#0046AA73: 272 6E000000               vu 04 00  1 154      
    call #00462C02 (:%opFrame) (find)     ;#0046AA78: 350 8581FFFF               v  00 00  1 155      
    mov [ebp] (needle), dword 110         ;#0046AA7D: 307105 00 6E000000         uv 00 20  1 156      
    mov edi,[ebp+20] (prevebp)            ;#0046AA84: 213175 14                  vu 80 20  1 156      
    mov eax,[edi-24]                      ;#0046AA87: 213107 E8                  uv 01 80  1 159    *80*
    xor ebx,ebx                           ;#0046AA8A: 061333                     vu 08 08  1 159      
    cmp eax,h4                            ;#0046AA8C: 075 00000040               uv 00 01  1 160      
    jl #0046AA9D                          ;#0046AA91: 174 0A                     v  00 00  1 160      
    add dword[ebx+eax*4-8],1              ;#0046AA93: 203104203 F8 01            u  00 09  3 161      
    cmp eax,1110                          ;#0046AA98: 075 56040000               vu 00 01  1 163      
    mov [ebp-4] (haystack),eax            ;#0046AA9D: 211105 FC                  uv 00 21  1 164      
    mov [ebp+28] (retaddr),#0046AAAC      ;#0046AAA0: 307105 1C ACAA4600         vu 00 20  1 164      
    jmp #0045AADB (code:find)             ;#0046AAA7: 351 2F00FFFF               v  00 00  1 165      
    test eax,eax                          ;#0046AAAC: 205300                     uv 00 01  1 166      
    jne #0046B284                         ;#0046AAAE: 017205 D0070000            v  00 00  1 166      
;   379             --
;   380             -- Ensure you can tell 5 and 5.000000000001 apart.
;   381             -- Note that while you can infer from the presence
;   382             -- of ".0" it is "not integer", in no way does the
;   383             -- /absence/ mean anything at all about whether a 
;   384             -- variable was declared integer/atom/object/udt.
;   385             --
;   386             this &= ".0"
    lea edx,[ebp-24] (this)               ;#0046AAB4: 215125 E8                  uv 04 20  1 167      
    lea edi,[ebp-24] (this)               ;#0046AAB7: 215175 E8                  vu 80 20  1 167      
    mov ecx,#0040254C                     ;#0046AABA: 271 4C254000               uv 02 00  1 168      
    call #0045FD65 (:%opConcat)           ;#0046AABF: 350 A152FFFF               v  00 00  1 168      
;   387         end if
    jmp #0046B284                         ;#0046AAC4: 351 BB070000               v  00 00  1 169      
;   388     elsif not stringo then
    mov ecx,[ebp-52] (stringo)            ;#0046AAC9: 213115 CC                  uv 02 20  1 170      
    test ecx,ecx                          ;#0046AACC: 205311                     uv 00 02  1 171 02   
    jne #0046B284                         ;#0046AACE: 017205 B0070000            v  00 00  1 171      
;   389         if length(idii) then
    mov edi,[ebp-20] (idii)               ;#0046AAD4: 213175 EC                  uv 80 20  1 172      
    mov esi,[ebx+edi*4-12]                ;#0046AAD7: 213164273 F4               uv 40 88  1 175 80 *80*
    test esi,esi                          ;#0046AADB: 205366                     uv 00 40  1 176 40   
    je #0046AB5C                          ;#0046AADD: 164 7D                     v  00 00  1 176      
;   390             namedx = sprintf("%s[%d]",{name,prdx})
    lea eax,[ebp-68] (symtab[1123])       ;#0046AADF: 215105 BC                  uv 01 20  1 177      
    mov edx,2                             ;#0046AAE2: 272 02000000               vu 04 00  1 177      
    push #0046AB0D                        ;#0046AAE7: 150 0DAB4600               uv 00 00  1 178      
    push eax                              ;#0046AAEC: 120                        vu 00 01  1 178      
    push dword[ebp-12] (prdx)             ;#0046AAED: 377165 F4                  np 00 20  2 179      
    mov eax,[ebp] (name)                  ;#0046AAF0: 213105 00                  uv 01 20  1 181      
    cmp eax,h4                            ;#0046AAF3: 075 00000040               uv 00 01  1 182 01   
    jl #0046AB04                          ;#0046AAF8: 174 0A                     v  00 00  1 182      
    add dword[ebx+eax*4-8],1              ;#0046AAFA: 203104203 F8 01            u  00 09  3 183      
    cmp eax,1104                          ;#0046AAFF: 075 50040000               vu 00 01  1 185      
    push eax                              ;#0046AB04: 120                        uv 00 01  1 186      
    mov edi,[ebp-68] (symtab[1123])       ;#0046AB05: 213175 BC                  vu 80 20  1 186      
    jmp #00460143 (:%pMkSq)               ;#0046AB08: 351 3656FFFF               v  00 00  1 187      
    mov ecx,2                             ;#0046AB0D: 271 02000000               uv 02 00  1 188      
    mov edx,210                           ;#0046AB12: 272 D2000000               vu 04 00  1 188      
    call #00462C02 (:%opFrame) (sprintf)  ;#0046AB17: 350 E680FFFF               v  00 00  1 189      
    mov ecx,[#00402524]                   ;#0046AB1C: 213015 24254000            uv 02 00  1 190      
    mov [ebp] (fmt),ecx                   ;#0046AB22: 211115 00                  uv 00 22  1 191 02   
    add dword[ebx+ecx*4-8],1              ;#0046AB25: 203104213 F8 01            u  00 0A  3 193    *02*
    mov edi,[ebp+20] (prevebp)            ;#0046AB2A: 213175 14                  vu 80 20  1 195      
    mov eax,[edi-68]                      ;#0046AB2D: 213107 BC                  uv 01 80  1 198    *80*
    mov [edi-68], dword h4                ;#0046AB30: 307107 BC 00000040         vu 00 80  1 198      
    cmp eax,h4                            ;#0046AB37: 075 00000040               uv 00 01  1 199      
    jne #0046AB48                         ;#0046AB3C: 165 0A                     v  00 00  1 199      
    mov esi,1123                          ;#0046AB3E: 276 63040000               uv 40 00  1 200      
    call #00462744 (:%pUnassigned)        ;#0046AB43: 350 FC7BFFFF               v  00 00  1 200      
    mov [ebp-4] (args),eax                ;#0046AB48: 211105 FC                  uv 00 21  1 201      
    mov [ebp+28] (retaddr),#0046AB57      ;#0046AB4B: 307105 1C 57AB4600         vu 00 20  1 201      
    jmp #00454E9A (code:sprintf)          ;#0046AB52: 351 43A3FEFF               v  00 00  1 202      
    mov [ebp-28] (namedx),eax             ;#0046AB57: 211105 E4                  uv 00 21  1 203      
    jmp #0046AB86                         ;#0046AB5A: 353 2A                     v  00 00  1 203      
;   391         else
;   392             namedx = name
    mov esi,[ebp] (name)                  ;#0046AB5C: 213165 00                  uv 40 20  1 204      
    mov edx,[ebp-28] (namedx)             ;#0046AB5F: 213125 E4                  vu 04 20  1 204      
    cmp esi,h4                            ;#0046AB62: 201376 00000040            uv 00 40  1 205      
    jl #0046AB6F                          ;#0046AB68: 174 05                     v  00 00  1 205      
    add dword[ebx+esi*4-8],1              ;#0046AB6A: 203104263 F8 01            u  00 48  3 206      
    mov [ebp-28] (namedx),esi             ;#0046AB6F: 211165 E4                  vu 00 60  1 208      
    cmp edx,h4                            ;#0046AB72: 201372 00000040            uv 00 04  1 209      
    jle #0046AB86                         ;#0046AB78: 176 0C                     v  00 00  1 209      
    sub dword[ebx+edx*4-8],1              ;#0046AB7A: 203154223 F8 01            u  00 0C  3 210      
    jne #0046AB86                         ;#0046AB7F: 165 05                     v  00 00  1 212      
    call #004639A8 (:%pDealloc)           ;#0046AB81: 350 228EFFFF               v  00 00  1 213      
;   393         end if
;   394         this = ""
    mov edi,[#004022A4]                   ;#0046AB86: 213075 A4224000            uv 80 00  1 214      
    mov edx,[ebp-24] (this)               ;#0046AB8C: 213125 E8                  vu 04 20  1 214      
    cmp edi,h4                            ;#0046AB8F: 201377 00000040            uv 00 80  1 215      
    jl #0046AB9C                          ;#0046AB95: 174 05                     v  00 00  1 215      
    add dword[ebx+edi*4-8],1              ;#0046AB97: 203104273 F8 01            u  00 88  3 216      
    mov [ebp-24] (this),edi               ;#0046AB9C: 211175 E8                  vu 00 A0  1 218      
    cmp edx,h4                            ;#0046AB9F: 201372 00000040            uv 00 04  1 219      
    jle #0046ABB3                         ;#0046ABA5: 176 0C                     v  00 00  1 219      
    sub dword[ebx+edx*4-8],1              ;#0046ABA7: 203154223 F8 01            u  00 0C  3 220      
    jne #0046ABB3                         ;#0046ABAC: 165 05                     v  00 00  1 222      
    call #004639A8 (:%pDealloc)           ;#0046ABAE: 350 F58DFFFF               v  00 00  1 223      
;   395         newprst = 1
    mov [ebp-32] (newprst), dword 1       ;#0046ABB3: 307105 E0 01000000         uv 00 20  1 224      
;   396         lo = length(o)
    mov ecx,[ebp-16] (o)                  ;#0046ABBA: 213115 F0                  vu 02 20  1 224      
    mov eax,[ebx+ecx*4-12]                ;#0046ABBD: 213104213 F4               uv 01 0A  1 227    *02*
    mov [ebp-36] (lo),eax                 ;#0046ABC1: 211105 DC                  uv 00 21  1 228 01   
;   397         if lo>MAXLENN then
    cmp eax,20000                         ;#0046ABC4: 075 204E0000               vu 00 01  1 228      
    jle #0046ABF4                         ;#0046ABC9: 176 29                     v  00 00  1 229      
;   398             o = o[1..MAXLENN]
    lea edx,[ebp-16] (o)                  ;#0046ABCB: 215125 F0                  uv 04 20  1 230      
    mov ecx,1                             ;#0046ABCE: 271 01000000               vu 02 00  1 230      
    push #0046ABED                        ;#0046ABD3: 150 EDAB4600               uv 00 00  1 231      
    push edx                              ;#0046ABD8: 122                        vu 00 04  1 231      
    push 20000                            ;#0046ABD9: 150 204E0000               uv 00 00  1 232      
    push 1                                ;#0046ABDE: 152 01                     vu 00 00  1 232      
    mov esi,[ebp-16] (o)                  ;#0046ABE0: 213165 F0                  uv 40 20  1 233      
    mov edx,1108                          ;#0046ABE3: 272 54040000               vu 04 00  1 233      
    jmp #00460A75 (:%pSubss)              ;#0046ABE8: 351 885EFFFF               v  00 00  1 234      
;   399             dotdot = 1
    mov [ebp-48] (dotdot), dword 1        ;#0046ABED: 307105 D0 01000000         uv 00 20  1 235      
;   400         end if
;   401         for i=1 to length(o) do -- (nb not lo)
    mov edi,[ebp-16] (o)                  ;#0046ABF4: 213175 F0                  vu 80 20  1 235      
    mov ecx,[ebx+edi*4-12]                ;#0046ABF7: 213114273 F4               uv 02 88  1 238    *80*
    mov [ebp-60] (symtab[1119]),ecx       ;#0046ABFB: 211115 C4                  uv 00 22  1 239 02   
    mov [ebp-72] (i), dword 1             ;#0046ABFE: 307105 B8 01000000         vu 00 20  1 239      
    cmp ecx,1                             ;#0046AC05: 201371 01000000            uv 00 02  1 240      
    jl #0046ADD9                          ;#0046AC0B: 017214 C8010000            v  00 00  1 240      
;   402 --          {newprst,this} = cdi(namedx,this,newprst,i,o[i],idii&i)
;   403             {newprst,this} = cdi(namedx,this,newprst,i,o[i],deep_copy(idii)&i)
    mov edi,[ebp-72] (i)                  ;#0046AC11: 213175 B8                  uv 80 20  1 241      
    lea ecx,[ebp-76] (symtab[1125])       ;#0046AC14: 215115 B4                  vu 02 20  1 241      
    mov esi,[ebp-16] (o)                  ;#0046AC17: 213165 F0                  uv 40 20  1 242      
    mov edx,1108                          ;#0046AC1A: 272 54040000               vu 04 00  1 242      
    mov al,0                              ;#0046AC1F: 260 00                     uv 01 00  1 243      
    call #00460FE5 (:%pSubse1)            ;#0046AC21: 350 BF63FFFF               v  00 00  1 243      
    mov ecx,8                             ;#0046AC26: 271 08000000               uv 02 00  1 244      
    mov edx,266                           ;#0046AC2B: 272 0A010000               vu 04 00  1 244      
    call :%opFrame (deep_copy)            ;#0046AC30: 350 CD7FFFFF               v  00 00  1 245      
    mov edi,[ebp+20] (prevebp)            ;#0046AC35: 213175 14                  uv 80 20  1 246      
    mov eax,[edi-20]                      ;#0046AC38: 213107 EC                  uv 01 80  1 249 80 *80*
    xor ebx,ebx                           ;#0046AC3B: 061333                     vu 08 08  1 249      
    cmp eax,h4                            ;#0046AC3D: 075 00000040               uv 00 01  1 250      
    jl #0046AC4E                          ;#0046AC42: 174 0A                     v  00 00  1 250      
    add dword[ebx+eax*4-8],1              ;#0046AC44: 203104203 F8 01            u  00 09  3 251      
    cmp eax,1109                          ;#0046AC49: 075 55040000               vu 00 01  1 253      
    mov [ebp] (o),eax                     ;#0046AC4E: 211105 00                  uv 00 21  1 254      
    mov [ebp+28] (retaddr),#0046AC5D      ;#0046AC51: 307105 1C 5DAC4600         vu 00 20  1 254      
    jmp #0044FA59 (code:deep_copy)        ;#0046AC58: 351 FC4DFEFF               v  00 00  1 255      
    push eax                              ;#0046AC5D: 120                        uv 00 01  1 256      
    mov ecx,[ebp-80] (symtab[1126])       ;#0046AC5E: 213115 B0                  vu 02 20  1 256      
    cmp ecx,h4                            ;#0046AC61: 201371 00000040            uv 00 02  1 257      
    jle #0046AC77                         ;#0046AC67: 176 0E                     v  00 00  1 257      
    sub dword[ebx+ecx*4-8],1              ;#0046AC69: 203154213 F8 01            u  00 0A  3 258      
    jne #0046AC77                         ;#0046AC6E: 165 07                     v  00 00  1 260      
    mov edx,ecx                           ;#0046AC70: 213321                     uv 04 02  1 261      
    call #004639A8 (:%pDealloc)           ;#0046AC72: 350 318DFFFF               v  00 00  1 261      
    pop dword[ebp-80] (symtab[1126])      ;#0046AC77: 217105 B0                  np 00 20  3 262      
    mov edi,[ebp-80] (symtab[1126])       ;#0046AC7A: 213175 B0                  uv 80 20  1 265      
    mov esi,[ebp-84] (symtab[1127])       ;#0046AC7D: 213165 AC                  vu 40 20  1 265      
    mov [ebp-80] (symtab[1126]),ebx       ;#0046AC80: 211135 B0                  uv 00 28  1 266      
    cmp esi,h4                            ;#0046AC83: 201376 00000040            vu 00 40  1 266      
    mov [ebp-84] (symtab[1127]),edi       ;#0046AC89: 211175 AC                  uv 00 A0  1 267      
    jle #0046AC9C                         ;#0046AC8C: 176 0E                     v  00 00  1 267      
    sub dword[ebx+esi*4-8],1              ;#0046AC8E: 203154263 F8 01            u  00 48  3 268      
    jne #0046AC9C                         ;#0046AC93: 165 07                     v  00 00  1 270      
    mov edx,esi                           ;#0046AC95: 213326                     uv 04 40  1 271      
    call #004639A8 (:%pDealloc)           ;#0046AC97: 350 0C8DFFFF               v  00 00  1 271      
    lea edx,[ebp-84] (symtab[1127])       ;#0046AC9C: 215125 AC                  uv 04 20  1 272      
    lea edi,[ebp-84] (symtab[1127])       ;#0046AC9F: 215175 AC                  vu 80 20  1 272      
    lea ecx,[ebp-72] (i)                  ;#0046ACA2: 215115 B8                  uv 02 20  1 273      
    call #0045FD65 (:%opConcat)           ;#0046ACA5: 350 BB50FFFF               v  00 00  1 273      
    mov ecx,28                            ;#0046ACAA: 271 1C000000               uv 02 00  1 274      
    mov edx,1103                          ;#0046ACAF: 272 4F040000               vu 04 00  1 274      
    call #00462C02 (:%opFrame) (cdi)      ;#0046ACB4: 350 497FFFFF               v  00 00  1 275      
    mov edi,[ebp+20] (prevebp)            ;#0046ACB9: 213175 14                  uv 80 20  1 276      
    mov eax,[edi-28]                      ;#0046ACBC: 213107 E4                  uv 01 80  1 279 80 *80*
    xor ebx,ebx                           ;#0046ACBF: 061333                     vu 08 08  1 279      
    cmp eax,h4                            ;#0046ACC1: 075 00000040               uv 00 01  1 280      
    jl #0046ACD2                          ;#0046ACC6: 174 0A                     v  00 00  1 280      
    add dword[ebx+eax*4-8],1              ;#0046ACC8: 203104203 F8 01            u  00 09  3 281      
    cmp eax,1111                          ;#0046ACCD: 075 57040000               vu 00 01  1 283      
    mov [ebp] (name),eax                  ;#0046ACD2: 211105 00                  uv 00 21  1 284      
    mov edi,[ebp+20] (prevebp)            ;#0046ACD5: 213175 14                  vu 80 20  1 284      
    mov eax,[edi-24]                      ;#0046ACD8: 213107 E8                  uv 01 80  1 287    *80*
    xor ebx,ebx                           ;#0046ACDB: 061333                     vu 08 08  1 287      
    cmp eax,h4                            ;#0046ACDD: 075 00000040               uv 00 01  1 288      
    jl #0046ACEE                          ;#0046ACE2: 174 0A                     v  00 00  1 288      
    add dword[ebx+eax*4-8],1              ;#0046ACE4: 203104203 F8 01            u  00 09  3 289      
    cmp eax,1110                          ;#0046ACE9: 075 56040000               vu 00 01  1 291      
    mov [ebp-4] (prev),eax                ;#0046ACEE: 211105 FC                  uv 00 21  1 292      
    mov edi,[ebp+20] (prevebp)            ;#0046ACF1: 213175 14                  vu 80 20  1 292      
    mov eax,[edi-32]                      ;#0046ACF4: 213107 E0                  uv 01 80  1 295    *80*
    mov [ebp-8] (prst),eax                ;#0046ACF7: 211105 F8                  uv 00 21  1 296 01   
    mov edi,[ebp+20] (prevebp)            ;#0046ACFA: 213175 14                  vu 80 20  1 296      
    mov eax,[edi-72]                      ;#0046ACFD: 213107 B8                  uv 01 80  1 299    *80*
    mov [ebp-12] (prdx),eax               ;#0046AD00: 211105 F4                  uv 00 21  1 300 01   
    mov edi,[ebp+20] (prevebp)            ;#0046AD03: 213175 14                  vu 80 20  1 300      
    mov eax,[edi-76]                      ;#0046AD06: 213107 B4                  uv 01 80  1 303    *80*
    mov [edi-76], dword h4                ;#0046AD09: 307107 B4 00000040         vu 00 80  1 303      
    cmp eax,h4                            ;#0046AD10: 075 00000040               uv 00 01  1 304      
    jne #0046AD21                         ;#0046AD15: 165 0A                     v  00 00  1 304      
    mov esi,1125                          ;#0046AD17: 276 65040000               uv 40 00  1 305      
    call #00462744 (:%pUnassigned)        ;#0046AD1C: 350 237AFFFF               v  00 00  1 305      
    mov [ebp-16] (o),eax                  ;#0046AD21: 211105 F0                  uv 00 21  1 306      
    mov edi,[ebp+20] (prevebp)            ;#0046AD24: 213175 14                  vu 80 20  1 306      
    mov eax,[edi-84]                      ;#0046AD27: 213107 AC                  uv 01 80  1 309    *80*
    mov [edi-84], dword h4                ;#0046AD2A: 307107 AC 00000040         vu 00 80  1 309      
    cmp eax,h4                            ;#0046AD31: 075 00000040               uv 00 01  1 310      
    jne #0046AD42                         ;#0046AD36: 165 0A                     v  00 00  1 310      
    mov esi,1127                          ;#0046AD38: 276 67040000               uv 40 00  1 311      
    call #00462744 (:%pUnassigned)        ;#0046AD3D: 350 027AFFFF               v  00 00  1 311      
    mov [ebp-20] (idii),eax               ;#0046AD42: 211105 EC                  uv 00 21  1 312      
    mov [ebp+28] (retaddr),#0046AD51      ;#0046AD45: 307105 1C 51AD4600         vu 00 20  1 312      
    jmp #0046A78B (code:cdi)              ;#0046AD4C: 351 3AFAFFFF               v  00 00  1 313      
    push eax                              ;#0046AD51: 120                        uv 00 01  1 314      
    mov ecx,[ebp-76] (symtab[1125])       ;#0046AD52: 213115 B4                  vu 02 20  1 314      
    cmp ecx,h4                            ;#0046AD55: 201371 00000040            uv 00 02  1 315      
    jle #0046AD6B                         ;#0046AD5B: 176 0E                     v  00 00  1 315      
    sub dword[ebx+ecx*4-8],1              ;#0046AD5D: 203154213 F8 01            u  00 0A  3 316      
    jne #0046AD6B                         ;#0046AD62: 165 07                     v  00 00  1 318      
    mov edx,ecx                           ;#0046AD64: 213321                     uv 04 02  1 319      
    call #004639A8 (:%pDealloc)           ;#0046AD66: 350 3D8CFFFF               v  00 00  1 319      
    pop dword[ebp-76] (symtab[1125])      ;#0046AD6B: 217105 B4                  np 00 20  3 320      
    mov edi,2                             ;#0046AD6E: 277 02000000               uv 80 00  1 323      
    lea ecx,[ebp-24] (this)               ;#0046AD73: 215115 E8                  vu 02 20  1 323      
    mov esi,[ebp-76] (symtab[1125])       ;#0046AD76: 213165 B4                  uv 40 20  1 324      
    mov edx,1125                          ;#0046AD79: 272 65040000               vu 04 00  1 324      
    mov al,0                              ;#0046AD7E: 260 00                     uv 01 00  1 325      
    call #00460FE5 (:%pSubse1)            ;#0046AD80: 350 6062FFFF               v  00 00  1 325      
    mov edi,1                             ;#0046AD85: 277 01000000               uv 80 00  1 326      
    lea ecx,[ebp-32] (newprst)            ;#0046AD8A: 215115 E0                  vu 02 20  1 326      
    mov esi,[ebp-76] (symtab[1125])       ;#0046AD8D: 213165 B4                  uv 40 20  1 327      
    mov edx,1125                          ;#0046AD90: 272 65040000               vu 04 00  1 327      
    call #0046106B (:%pSubse1i)           ;#0046AD95: 350 D162FFFF               v  00 00  1 328      
    cmp eax,h4                            ;#0046AD9A: 075 00000040               uv 00 01  1 329      
    jl #0046ADAB                          ;#0046AD9F: 174 0A                     v  00 00  1 329      
    mov ecx,1112                          ;#0046ADA1: 271 58040000               uv 02 00  1 330      
    call #00462D8D (:%opTcFail)           ;#0046ADA6: 350 E27FFFFF               v  00 00  1 330      
    mov edx,[ebp-76] (symtab[1125])       ;#0046ADAB: 213125 B4                  uv 04 20  1 331      
    cmp edx,h4                            ;#0046ADAE: 201372 00000040            uv 00 04  1 332 04   
    mov [ebp-76] (symtab[1125]),ebx       ;#0046ADB4: 211135 B4                  vu 00 28  1 332      
    jle #0046ADC5                         ;#0046ADB7: 176 0C                     v  00 00  1 333      
    sub dword[ebx+edx*4-8],1              ;#0046ADB9: 203154223 F8 01            u  00 0C  3 334      
    jne #0046ADC5                         ;#0046ADBE: 165 05                     v  00 00  1 336      
    call #004639A8 (:%pDealloc)           ;#0046ADC0: 350 E38BFFFF               v  00 00  1 337      
;   404         end for
    mov edi,[ebp-72] (i)                  ;#0046ADC5: 213175 B8                  uv 80 20  1 338      
    mov ecx,[ebp-60] (symtab[1119])       ;#0046ADC8: 213115 C4                  vu 02 20  1 338      
    add edi,1                             ;#0046ADCB: 203307 01                  uv 80 80  1 339      
    cmp edi,ecx                           ;#0046ADCE: 073371                     uv 00 82  1 340 80   
    mov [ebp-72] (i),edi                  ;#0046ADD0: 211175 B8                  vu 00 A0  1 340      
    jle #0046AC11                         ;#0046ADD3: 017216 38FEFFFF            v  00 00  1 341      
;   405         if newprst>1
    mov esi,[ebp-32] (newprst)            ;#0046ADD9: 213165 E0                  uv 40 20  1 342      
    cmp esi,1                             ;#0046ADDC: 203376 01                  uv 00 40  1 343 40   
    jg #0046AE0E                          ;#0046ADDF: 177 2D                     v  00 00  1 343      
;   406         or (length(idii) and
    mov eax,[ebp-20] (idii)               ;#0046ADE1: 213105 EC                  uv 01 20  1 344      
    mov ecx,[ebx+eax*4-12]                ;#0046ADE4: 213114203 F4               uv 02 09  1 347 01 *01*
    test ecx,ecx                          ;#0046ADE8: 205311                     uv 00 02  1 348 02   
    je #0046B263                          ;#0046ADEA: 017204 73040000            v  00 00  1 348      
;   407             wasstacklen<length(printstack)) then
    lea edi,[ebp-88] (symtab[1128])       ;#0046ADF0: 215175 A8                  uv 80 20  1 349      
    mov esi,[#00402520] (printstack)      ;#0046ADF3: 213065 20254000            vu 40 00  1 349      
    mov edx,1067                          ;#0046ADF9: 272 2B040000               uv 04 00  1 350      
    call #0045EFEC (:%opLen)              ;#0046ADFE: 350 E941FFFF               v  00 00  1 350      
    mov edi,[ebp-56] (wasstacklen)        ;#0046AE03: 213175 C8                  uv 80 20  1 351      
    cmp edi,ecx                           ;#0046AE06: 071317                     uv 00 82  1 352 80   
    jge #0046B263                         ;#0046AE08: 017215 55040000            v  00 00  1 352      
;   408             --
;   409             -- Something just got printed, so empty prev and 
;   410             -- force linebreaks all the way back up the call 
;   411             -- stack (which is done by returning prdx+1)
;   412             --
;   413             if length(prev) then
    mov eax,[ebp-4] (prev)                ;#0046AE0E: 213105 FC                  uv 01 20  1 353      
    mov esi,[ebx+eax*4-12]                ;#0046AE11: 213164203 F4               uv 40 09  1 356 01 *01*
    test esi,esi                          ;#0046AE15: 205366                     uv 00 40  1 357 40   
    je #0046AF8A                          ;#0046AE17: 017204 6D010000            v  00 00  1 357      
;   414                 {prev,namedx} = subscr(prev,name,prst,prdx-1)
    lea edi,[ebp-92] (symtab[1129])       ;#0046AE1D: 215175 A4                  uv 80 20  1 358      
    mov ecx,[ebp-12] (prdx)               ;#0046AE20: 213115 F4                  vu 02 20  1 358      
    mov eax,[#0040201C]                   ;#0046AE23: 241 1C204000               uv 01 00  1 359      
    call #0045F299 (:%opSub)              ;#0046AE28: 350 6C44FFFF               v  00 00  1 359      
    mov ecx,5                             ;#0046AE2D: 271 05000000               uv 02 00  1 360      
    mov edx,1075                          ;#0046AE32: 272 33040000               vu 04 00  1 360      
    call #00462C02 (:%opFrame) (subscr)   ;#0046AE37: 350 C67DFFFF               v  00 00  1 361      
    mov edi,[ebp+20] (prevebp)            ;#0046AE3C: 213175 14                  uv 80 20  1 362      
    mov eax,[edi-4]                       ;#0046AE3F: 213107 FC                  uv 01 80  1 365 80 *80*
    xor ebx,ebx                           ;#0046AE42: 061333                     vu 08 08  1 365      
    cmp eax,h4                            ;#0046AE44: 075 00000040               uv 00 01  1 366      
    jl #0046AE55                          ;#0046AE49: 174 0A                     v  00 00  1 366      
    add dword[ebx+eax*4-8],1              ;#0046AE4B: 203104203 F8 01            u  00 09  3 367      
    cmp eax,1105                          ;#0046AE50: 075 51040000               vu 00 01  1 369      
    mov [ebp] (prev),eax                  ;#0046AE55: 211105 00                  uv 00 21  1 370      
    mov edi,[ebp+20] (prevebp)            ;#0046AE58: 213175 14                  vu 80 20  1 370      
    mov eax,[edi]                         ;#0046AE5B: 213007                     uv 01 80  1 373    *80*
    xor ebx,ebx                           ;#0046AE5D: 061333                     vu 08 08  1 373      
    cmp eax,h4                            ;#0046AE5F: 075 00000040               uv 00 01  1 374      
    jl #0046AE70                          ;#0046AE64: 174 0A                     v  00 00  1 374      
    add dword[ebx+eax*4-8],1              ;#0046AE66: 203104203 F8 01            u  00 09  3 375      
    cmp eax,1104                          ;#0046AE6B: 075 50040000               vu 00 01  1 377      
    mov [ebp-4] (name),eax                ;#0046AE70: 211105 FC                  uv 00 21  1 378      
    mov edi,[ebp+20] (prevebp)            ;#0046AE73: 213175 14                  vu 80 20  1 378      
    mov eax,[edi-8]                       ;#0046AE76: 213107 F8                  uv 01 80  1 381    *80*
    mov [ebp-8] (prst),eax                ;#0046AE79: 211105 F8                  uv 00 21  1 382 01   
    mov edi,[ebp+20] (prevebp)            ;#0046AE7C: 213175 14                  vu 80 20  1 382      
    mov eax,[edi-92]                      ;#0046AE7F: 213107 A4                  uv 01 80  1 385    *80*
    mov [ebp-12] (prdx),eax               ;#0046AE82: 211105 F4                  uv 00 21  1 386 01   
    mov [ebp+28] (retaddr),#0046AE91      ;#0046AE85: 307105 1C 91AE4600         vu 00 20  1 386      
    jmp #0046BCEA (code:subscr)           ;#0046AE8C: 351 590E0000               v  00 00  1 387      
    push eax                              ;#0046AE91: 120                        uv 00 01  1 388      
    mov edi,[ebp-68] (symtab[1123])       ;#0046AE92: 213175 BC                  vu 80 20  1 388      
    cmp edi,h4                            ;#0046AE95: 201377 00000040            uv 00 80  1 389      
    jle #0046AEAB                         ;#0046AE9B: 176 0E                     v  00 00  1 389      
    sub dword[ebx+edi*4-8],1              ;#0046AE9D: 203154273 F8 01            u  00 88  3 390      
    jne #0046AEAB                         ;#0046AEA2: 165 07                     v  00 00  1 392      
    mov edx,edi                           ;#0046AEA4: 213327                     uv 04 80  1 393      
    call #004639A8 (:%pDealloc)           ;#0046AEA6: 350 FD8AFFFF               v  00 00  1 393      
    pop dword[ebp-68] (symtab[1123])      ;#0046AEAB: 217105 BC                  np 00 20  3 394      
    mov edi,2                             ;#0046AEAE: 277 02000000               uv 80 00  1 397      
    lea ecx,[ebp-28] (namedx)             ;#0046AEB3: 215115 E4                  vu 02 20  1 397      
    mov esi,[ebp-68] (symtab[1123])       ;#0046AEB6: 213165 BC                  uv 40 20  1 398      
    mov edx,1123                          ;#0046AEB9: 272 63040000               vu 04 00  1 398      
    mov al,0                              ;#0046AEBE: 260 00                     uv 01 00  1 399      
    call #00460FE5 (:%pSubse1)            ;#0046AEC0: 350 2061FFFF               v  00 00  1 399      
    mov edi,1                             ;#0046AEC5: 277 01000000               uv 80 00  1 400      
    lea ecx,[ebp-4] (prev)                ;#0046AECA: 215115 FC                  vu 02 20  1 400      
    mov esi,[ebp-68] (symtab[1123])       ;#0046AECD: 213165 BC                  uv 40 20  1 401      
    mov edx,1123                          ;#0046AED0: 272 63040000               vu 04 00  1 401      
    mov al,0                              ;#0046AED5: 260 00                     uv 01 00  1 402      
    call #00460FE5 (:%pSubse1)            ;#0046AED7: 350 0961FFFF               v  00 00  1 402      
    mov ecx,[ebp-4] (prev)                ;#0046AEDC: 213115 FC                  uv 02 20  1 403      
    cmp ecx,h4                            ;#0046AEDF: 201371 00000040            uv 00 02  1 404 02   
    jl #0046AEEE                          ;#0046AEE5: 174 07                     v  00 00  1 404      
    cmp byte[ebx+ecx*4-1],#82             ;#0046AEE7: 200174213 FF 82            u  00 0A  2 405      
    je #0046AEF8                          ;#0046AEEC: 164 0A                     v  00 00  1 406      
    mov ecx,1105                          ;#0046AEEE: 271 51040000               uv 02 00  1 407      
    call #00462D8D (:%opTcFail)           ;#0046AEF3: 350 957EFFFF               v  00 00  1 407      
    mov edx,[ebp-68] (symtab[1123])       ;#0046AEF8: 213125 BC                  uv 04 20  1 408      
    cmp edx,h4                            ;#0046AEFB: 201372 00000040            uv 00 04  1 409 04   
    mov [ebp-68] (symtab[1123]),ebx       ;#0046AF01: 211135 BC                  vu 00 28  1 409      
    jle #0046AF12                         ;#0046AF04: 176 0C                     v  00 00  1 410      
    sub dword[ebx+edx*4-8],1              ;#0046AF06: 203154223 F8 01            u  00 0C  3 411      
    jne #0046AF12                         ;#0046AF0B: 165 05                     v  00 00  1 413      
    call #004639A8 (:%pDealloc)           ;#0046AF0D: 350 968AFFFF               v  00 00  1 414      
;   415                 addtostack(idii,prst,namedx,prev)
    mov ecx,5                             ;#0046AF12: 271 05000000               uv 02 00  1 415      
    mov edx,1068                          ;#0046AF17: 272 2C040000               vu 04 00  1 415      
    call :%opFrame (addtostack)           ;#0046AF1C: 350 E17CFFFF               v  00 00  1 416      
    mov edi,[ebp+20] (prevebp)            ;#0046AF21: 213175 14                  uv 80 20  1 417      
    mov eax,[edi-20]                      ;#0046AF24: 213107 EC                  uv 01 80  1 420 80 *80*
    xor ebx,ebx                           ;#0046AF27: 061333                     vu 08 08  1 420      
    cmp eax,h4                            ;#0046AF29: 075 00000040               uv 00 01  1 421      
    jl #0046AF3A                          ;#0046AF2E: 174 0A                     v  00 00  1 421      
    add dword[ebx+eax*4-8],1              ;#0046AF30: 203104203 F8 01            u  00 09  3 422      
    cmp eax,1109                          ;#0046AF35: 075 55040000               vu 00 01  1 424      
    mov [ebp] (idii),eax                  ;#0046AF3A: 211105 00                  uv 00 21  1 425      
    mov edi,[ebp+20] (prevebp)            ;#0046AF3D: 213175 14                  vu 80 20  1 425      
    mov eax,[edi-8]                       ;#0046AF40: 213107 F8                  uv 01 80  1 428    *80*
    mov [ebp-4] (idxr),eax                ;#0046AF43: 211105 FC                  uv 00 21  1 429 01   
    mov edi,[ebp+20] (prevebp)            ;#0046AF46: 213175 14                  vu 80 20  1 429      
    mov eax,[edi-28]                      ;#0046AF49: 213107 E4                  uv 01 80  1 432    *80*
    xor ebx,ebx                           ;#0046AF4C: 061333                     vu 08 08  1 432      
    cmp eax,h4                            ;#0046AF4E: 075 00000040               uv 00 01  1 433      
    jl #0046AF5F                          ;#0046AF53: 174 0A                     v  00 00  1 433      
    add dword[ebx+eax*4-8],1              ;#0046AF55: 203104203 F8 01            u  00 09  3 434      
    cmp eax,1111                          ;#0046AF5A: 075 57040000               vu 00 01  1 436      
    mov [ebp-8] (name),eax                ;#0046AF5F: 211105 F8                  uv 00 21  1 437      
    mov edi,[ebp+20] (prevebp)            ;#0046AF62: 213175 14                  vu 80 20  1 437      
    mov eax,[edi-4]                       ;#0046AF65: 213107 FC                  uv 01 80  1 440    *80*
    xor ebx,ebx                           ;#0046AF68: 061333                     vu 08 08  1 440      
    cmp eax,h4                            ;#0046AF6A: 075 00000040               uv 00 01  1 441      
    jl #0046AF7B                          ;#0046AF6F: 174 0A                     v  00 00  1 441      
    add dword[ebx+eax*4-8],1              ;#0046AF71: 203104203 F8 01            u  00 09  3 442      
    cmp eax,1105                          ;#0046AF76: 075 51040000               vu 00 01  1 444      
    mov [ebp-12] (text),eax               ;#0046AF7B: 211105 F4                  uv 00 21  1 445      
    mov [ebp+28] (retaddr),#0046AF8A      ;#0046AF7E: 307105 1C 8AAF4600         vu 00 20  1 445      
    jmp #0046A62D (code:addtostack)       ;#0046AF85: 351 A3F6FFFF               v  00 00  1 446      
;   416             end if
;   417             if newprst<=lo then
    mov edi,[ebp-32] (newprst)            ;#0046AF8A: 213175 E0                  uv 80 20  1 447      
    mov esi,[ebp-36] (lo)                 ;#0046AF8D: 213165 DC                  vu 40 20  1 447      
    cmp edi,esi                           ;#0046AF90: 071367                     uv 00 C0  1 448      
    jg #0046B216                          ;#0046AF92: 017217 7E020000            v  00 00  1 448      
;   418                 if prdx!=-1 then
    mov ecx,[ebp-12] (prdx)               ;#0046AF98: 213115 F4                  uv 02 20  1 449      
    cmp ecx,-1                            ;#0046AF9B: 203371 FF                  uv 00 02  1 450 02   
    je #0046B037                          ;#0046AF9E: 017204 93000000            v  00 00  1 450      
;   419                     name = sprintf("%s[%d]",{name,prdx})
    lea eax,[ebp-96] (symtab[1130])       ;#0046AFA4: 215105 A0                  uv 01 20  1 451      
    mov edx,2                             ;#0046AFA7: 272 02000000               vu 04 00  1 451      
    push #0046AFD0                        ;#0046AFAC: 150 D0AF4600               uv 00 00  1 452      
    push eax                              ;#0046AFB1: 120                        vu 00 01  1 452      
    push ecx                              ;#0046AFB2: 121                        uv 00 02  1 453      
    mov eax,[ebp] (name)                  ;#0046AFB3: 213105 00                  vu 01 20  1 453      
    cmp eax,h4                            ;#0046AFB6: 075 00000040               uv 00 01  1 454      
    jl #0046AFC7                          ;#0046AFBB: 174 0A                     v  00 00  1 454      
    add dword[ebx+eax*4-8],1              ;#0046AFBD: 203104203 F8 01            u  00 09  3 455      
    cmp eax,1104                          ;#0046AFC2: 075 50040000               vu 00 01  1 457      
    push eax                              ;#0046AFC7: 120                        uv 00 01  1 458      
    mov edi,[ebp-96] (symtab[1130])       ;#0046AFC8: 213175 A0                  vu 80 20  1 458      
    jmp #00460143 (:%pMkSq)               ;#0046AFCB: 351 7351FFFF               v  00 00  1 459      
    mov ecx,2                             ;#0046AFD0: 271 02000000               uv 02 00  1 460      
    mov edx,210                           ;#0046AFD5: 272 D2000000               vu 04 00  1 460      
    call #00462C02 (:%opFrame) (sprintf)  ;#0046AFDA: 350 237CFFFF               v  00 00  1 461      
    mov esi,[#00402524]                   ;#0046AFDF: 213065 24254000            uv 40 00  1 462      
    mov [ebp] (fmt),esi                   ;#0046AFE5: 211165 00                  uv 00 60  1 463 40   
    add dword[ebx+esi*4-8],1              ;#0046AFE8: 203104263 F8 01            u  00 48  3 465    *40*
    mov edi,[ebp+20] (prevebp)            ;#0046AFED: 213175 14                  vu 80 20  1 467      
    mov eax,[edi-96]                      ;#0046AFF0: 213107 A0                  uv 01 80  1 470    *80*
    mov [edi-96], dword h4                ;#0046AFF3: 307107 A0 00000040         vu 00 80  1 470      
    cmp eax,h4                            ;#0046AFFA: 075 00000040               uv 00 01  1 471      
    jne #0046B00B                         ;#0046AFFF: 165 0A                     v  00 00  1 471      
    mov esi,1130                          ;#0046B001: 276 6A040000               uv 40 00  1 472      
    call #00462744 (:%pUnassigned)        ;#0046B006: 350 3977FFFF               v  00 00  1 472      
    mov [ebp-4] (args),eax                ;#0046B00B: 211105 FC                  uv 00 21  1 473      
    mov [ebp+28] (retaddr),#0046B01A      ;#0046B00E: 307105 1C 1AB04600         vu 00 20  1 473      
    jmp #00454E9A (code:sprintf)          ;#0046B015: 351 809EFEFF               v  00 00  1 474      
    push eax                              ;#0046B01A: 120                        uv 00 01  1 475      
    mov ecx,[ebp] (name)                  ;#0046B01B: 213115 00                  vu 02 20  1 475      
    cmp ecx,h4                            ;#0046B01E: 201371 00000040            uv 00 02  1 476      
    jle #0046B034                         ;#0046B024: 176 0E                     v  00 00  1 476      
    sub dword[ebx+ecx*4-8],1              ;#0046B026: 203154213 F8 01            u  00 0A  3 477      
    jne #0046B034                         ;#0046B02B: 165 07                     v  00 00  1 479      
    mov edx,ecx                           ;#0046B02D: 213321                     uv 04 02  1 480      
    call #004639A8 (:%pDealloc)           ;#0046B02F: 350 7489FFFF               v  00 00  1 480      
    pop dword[ebp] (name)                 ;#0046B034: 217105 00                  np 00 20  3 481      
;   420                 end if
;   421                 {this,name} = subscr(this,name,newprst,lo)
    mov ecx,5                             ;#0046B037: 271 05000000               uv 02 00  1 484      
    mov edx,1075                          ;#0046B03C: 272 33040000               vu 04 00  1 484      
    call #00462C02 (:%opFrame) (subscr)   ;#0046B041: 350 BC7BFFFF               v  00 00  1 485      
    mov edi,[ebp+20] (prevebp)            ;#0046B046: 213175 14                  uv 80 20  1 486      
    mov eax,[edi-24]                      ;#0046B049: 213107 E8                  uv 01 80  1 489 80 *80*
    xor ebx,ebx                           ;#0046B04C: 061333                     vu 08 08  1 489      
    cmp eax,h4                            ;#0046B04E: 075 00000040               uv 00 01  1 490      
    jl #0046B05F                          ;#0046B053: 174 0A                     v  00 00  1 490      
    add dword[ebx+eax*4-8],1              ;#0046B055: 203104203 F8 01            u  00 09  3 491      
    cmp eax,1110                          ;#0046B05A: 075 56040000               vu 00 01  1 493      
    mov [ebp] (prev),eax                  ;#0046B05F: 211105 00                  uv 00 21  1 494      
    mov edi,[ebp+20] (prevebp)            ;#0046B062: 213175 14                  vu 80 20  1 494      
    mov eax,[edi]                         ;#0046B065: 213007                     uv 01 80  1 497    *80*
    xor ebx,ebx                           ;#0046B067: 061333                     vu 08 08  1 497      
    cmp eax,h4                            ;#0046B069: 075 00000040               uv 00 01  1 498      
    jl #0046B07A                          ;#0046B06E: 174 0A                     v  00 00  1 498      
    add dword[ebx+eax*4-8],1              ;#0046B070: 203104203 F8 01            u  00 09  3 499      
    cmp eax,1104                          ;#0046B075: 075 50040000               vu 00 01  1 501      
    mov [ebp-4] (name),eax                ;#0046B07A: 211105 FC                  uv 00 21  1 502      
    mov edi,[ebp+20] (prevebp)            ;#0046B07D: 213175 14                  vu 80 20  1 502      
    mov eax,[edi-32]                      ;#0046B080: 213107 E0                  uv 01 80  1 505    *80*
    mov [ebp-8] (prst),eax                ;#0046B083: 211105 F8                  uv 00 21  1 506 01   
    mov edi,[ebp+20] (prevebp)            ;#0046B086: 213175 14                  vu 80 20  1 506      
    mov eax,[edi-36]                      ;#0046B089: 213107 DC                  uv 01 80  1 509    *80*
    mov [ebp-12] (prdx),eax               ;#0046B08C: 211105 F4                  uv 00 21  1 510 01   
    mov [ebp+28] (retaddr),#0046B09B      ;#0046B08F: 307105 1C 9BB04600         vu 00 20  1 510      
    jmp #0046BCEA (code:subscr)           ;#0046B096: 351 4F0C0000               v  00 00  1 511      
    push eax                              ;#0046B09B: 120                        uv 00 01  1 512      
    mov edi,[ebp-96] (symtab[1130])       ;#0046B09C: 213175 A0                  vu 80 20  1 512      
    cmp edi,h4                            ;#0046B09F: 201377 00000040            uv 00 80  1 513      
    jle #0046B0B5                         ;#0046B0A5: 176 0E                     v  00 00  1 513      
    sub dword[ebx+edi*4-8],1              ;#0046B0A7: 203154273 F8 01            u  00 88  3 514      
    jne #0046B0B5                         ;#0046B0AC: 165 07                     v  00 00  1 516      
    mov edx,edi                           ;#0046B0AE: 213327                     uv 04 80  1 517      
    call #004639A8 (:%pDealloc)           ;#0046B0B0: 350 F388FFFF               v  00 00  1 517      
    pop dword[ebp-96] (symtab[1130])      ;#0046B0B5: 217105 A0                  np 00 20  3 518      
    mov edi,2                             ;#0046B0B8: 277 02000000               uv 80 00  1 521      
    mov ecx,ebp                           ;#0046B0BD: 213315                     vu 02 20  1 521      
    mov esi,[ebp-96] (symtab[1130])       ;#0046B0BF: 213165 A0                  uv 40 20  1 522      
    mov edx,1130                          ;#0046B0C2: 272 6A040000               vu 04 00  1 522      
    mov al,0                              ;#0046B0C7: 260 00                     uv 01 00  1 523      
    call #00460FE5 (:%pSubse1)            ;#0046B0C9: 350 175FFFFF               v  00 00  1 523      
    mov edi,1                             ;#0046B0CE: 277 01000000               uv 80 00  1 524      
    lea ecx,[ebp-24] (this)               ;#0046B0D3: 215115 E8                  vu 02 20  1 524      
    mov esi,[ebp-96] (symtab[1130])       ;#0046B0D6: 213165 A0                  uv 40 20  1 525      
    mov edx,1130                          ;#0046B0D9: 272 6A040000               vu 04 00  1 525      
    mov al,0                              ;#0046B0DE: 260 00                     uv 01 00  1 526      
    call #00460FE5 (:%pSubse1)            ;#0046B0E0: 350 005FFFFF               v  00 00  1 526      
    mov edx,[ebp-96] (symtab[1130])       ;#0046B0E5: 213125 A0                  uv 04 20  1 527      
    cmp edx,h4                            ;#0046B0E8: 201372 00000040            uv 00 04  1 528 04   
    mov [ebp-96] (symtab[1130]),ebx       ;#0046B0EE: 211135 A0                  vu 00 28  1 528      
    jle #0046B0FF                         ;#0046B0F1: 176 0C                     v  00 00  1 529      
    sub dword[ebx+edx*4-8],1              ;#0046B0F3: 203154223 F8 01            u  00 0C  3 530      
    jne #0046B0FF                         ;#0046B0F8: 165 05                     v  00 00  1 532      
    call #004639A8 (:%pDealloc)           ;#0046B0FA: 350 A988FFFF               v  00 00  1 533      
;   422                 if dotdot then
    mov ecx,[ebp-48] (dotdot)             ;#0046B0FF: 213115 D0                  uv 02 20  1 534      
    test ecx,ecx                          ;#0046B102: 205311                     uv 00 02  1 535 02   
    je #0046B116                          ;#0046B104: 164 10                     v  00 00  1 535      
;   423                     this &= ".."
    lea edx,[ebp-24] (this)               ;#0046B106: 215125 E8                  uv 04 20  1 536      
    lea edi,[ebp-24] (this)               ;#0046B109: 215175 E8                  vu 80 20  1 536      
    mov ecx,#00402550                     ;#0046B10C: 271 50254000               uv 02 00  1 537      
    call #0045FD65 (:%opConcat)           ;#0046B111: 350 4F4CFFFF               v  00 00  1 537      
;   424                 end if
;   425 --              addtostack(idii&newprst,newprst,name,this)
;   426                 addtostack(deep_copy(idii)&newprst,newprst,name,this)
    mov ecx,8                             ;#0046B116: 271 08000000               uv 02 00  1 538      
    mov edx,266                           ;#0046B11B: 272 0A010000               vu 04 00  1 538      
    call :%opFrame (deep_copy)            ;#0046B120: 350 DD7AFFFF               v  00 00  1 539      
    mov edi,[ebp+20] (prevebp)            ;#0046B125: 213175 14                  uv 80 20  1 540      
    mov eax,[edi-20]                      ;#0046B128: 213107 EC                  uv 01 80  1 543 80 *80*
    xor ebx,ebx                           ;#0046B12B: 061333                     vu 08 08  1 543      
    cmp eax,h4                            ;#0046B12D: 075 00000040               uv 00 01  1 544      
    jl #0046B13E                          ;#0046B132: 174 0A                     v  00 00  1 544      
    add dword[ebx+eax*4-8],1              ;#0046B134: 203104203 F8 01            u  00 09  3 545      
    cmp eax,1109                          ;#0046B139: 075 55040000               vu 00 01  1 547      
    mov [ebp] (o),eax                     ;#0046B13E: 211105 00                  uv 00 21  1 548      
    mov [ebp+28] (retaddr),#0046B14D      ;#0046B141: 307105 1C 4DB14600         vu 00 20  1 548      
    jmp #0044FA59 (code:deep_copy)        ;#0046B148: 351 0C49FEFF               v  00 00  1 549      
    push eax                              ;#0046B14D: 120                        uv 00 01  1 550      
    mov edi,[ebp-80] (symtab[1126])       ;#0046B14E: 213175 B0                  vu 80 20  1 550      
    cmp edi,h4                            ;#0046B151: 201377 00000040            uv 00 80  1 551      
    jle #0046B167                         ;#0046B157: 176 0E                     v  00 00  1 551      
    sub dword[ebx+edi*4-8],1              ;#0046B159: 203154273 F8 01            u  00 88  3 552      
    jne #0046B167                         ;#0046B15E: 165 07                     v  00 00  1 554      
    mov edx,edi                           ;#0046B160: 213327                     uv 04 80  1 555      
    call #004639A8 (:%pDealloc)           ;#0046B162: 350 4188FFFF               v  00 00  1 555      
    pop dword[ebp-80] (symtab[1126])      ;#0046B167: 217105 B0                  np 00 20  3 556      
    mov esi,[ebp-80] (symtab[1126])       ;#0046B16A: 213165 B0                  uv 40 20  1 559      
    mov ecx,[ebp-84] (symtab[1127])       ;#0046B16D: 213115 AC                  vu 02 20  1 559      
    mov [ebp-80] (symtab[1126]),ebx       ;#0046B170: 211135 B0                  uv 00 28  1 560      
    cmp ecx,h4                            ;#0046B173: 201371 00000040            vu 00 02  1 560      
    mov [ebp-84] (symtab[1127]),esi       ;#0046B179: 211165 AC                  uv 00 60  1 561      
    jle #0046B18C                         ;#0046B17C: 176 0E                     v  00 00  1 561      
    sub dword[ebx+ecx*4-8],1              ;#0046B17E: 203154213 F8 01            u  00 0A  3 562      
    jne #0046B18C                         ;#0046B183: 165 07                     v  00 00  1 564      
    mov edx,ecx                           ;#0046B185: 213321                     uv 04 02  1 565      
    call #004639A8 (:%pDealloc)           ;#0046B187: 350 1C88FFFF               v  00 00  1 565      
    lea edx,[ebp-84] (symtab[1127])       ;#0046B18C: 215125 AC                  uv 04 20  1 566      
    lea edi,[ebp-84] (symtab[1127])       ;#0046B18F: 215175 AC                  vu 80 20  1 566      
    lea ecx,[ebp-32] (newprst)            ;#0046B192: 215115 E0                  uv 02 20  1 567      
    call #0045FD65 (:%opConcat)           ;#0046B195: 350 CB4BFFFF               v  00 00  1 567      
    mov ecx,5                             ;#0046B19A: 271 05000000               uv 02 00  1 568      
    mov edx,1068                          ;#0046B19F: 272 2C040000               vu 04 00  1 568      
    call :%opFrame (addtostack)           ;#0046B1A4: 350 597AFFFF               v  00 00  1 569      
    mov edi,[ebp+20] (prevebp)            ;#0046B1A9: 213175 14                  uv 80 20  1 570      
    mov eax,[edi-84]                      ;#0046B1AC: 213107 AC                  uv 01 80  1 573 80 *80*
    mov [edi-84], dword h4                ;#0046B1AF: 307107 AC 00000040         vu 00 80  1 573      
    cmp eax,h4                            ;#0046B1B6: 075 00000040               uv 00 01  1 574      
    jne #0046B1C7                         ;#0046B1BB: 165 0A                     v  00 00  1 574      
    mov esi,1127                          ;#0046B1BD: 276 67040000               uv 40 00  1 575      
    call #00462744 (:%pUnassigned)        ;#0046B1C2: 350 7D75FFFF               v  00 00  1 575      
    mov [ebp] (idii),eax                  ;#0046B1C7: 211105 00                  uv 00 21  1 576      
    mov edi,[ebp+20] (prevebp)            ;#0046B1CA: 213175 14                  vu 80 20  1 576      
    mov eax,[edi-32]                      ;#0046B1CD: 213107 E0                  uv 01 80  1 579    *80*
    mov [ebp-4] (idxr),eax                ;#0046B1D0: 211105 FC                  uv 00 21  1 580 01   
    mov edi,[ebp+20] (prevebp)            ;#0046B1D3: 213175 14                  vu 80 20  1 580      
    mov eax,[edi]                         ;#0046B1D6: 213007                     uv 01 80  1 583    *80*
    xor ebx,ebx                           ;#0046B1D8: 061333                     vu 08 08  1 583      
    cmp eax,h4                            ;#0046B1DA: 075 00000040               uv 00 01  1 584      
    jl #0046B1EB                          ;#0046B1DF: 174 0A                     v  00 00  1 584      
    add dword[ebx+eax*4-8],1              ;#0046B1E1: 203104203 F8 01            u  00 09  3 585      
    cmp eax,1104                          ;#0046B1E6: 075 50040000               vu 00 01  1 587      
    mov [ebp-8] (name),eax                ;#0046B1EB: 211105 F8                  uv 00 21  1 588      
    mov edi,[ebp+20] (prevebp)            ;#0046B1EE: 213175 14                  vu 80 20  1 588      
    mov eax,[edi-24]                      ;#0046B1F1: 213107 E8                  uv 01 80  1 591    *80*
    xor ebx,ebx                           ;#0046B1F4: 061333                     vu 08 08  1 591      
    cmp eax,h4                            ;#0046B1F6: 075 00000040               uv 00 01  1 592      
    jl #0046B207                          ;#0046B1FB: 174 0A                     v  00 00  1 592      
    add dword[ebx+eax*4-8],1              ;#0046B1FD: 203104203 F8 01            u  00 09  3 593      
    cmp eax,1110                          ;#0046B202: 075 56040000               vu 00 01  1 595      
    mov [ebp-12] (text),eax               ;#0046B207: 211105 F4                  uv 00 21  1 596      
    mov [ebp+28] (retaddr),#0046B216      ;#0046B20A: 307105 1C 16B24600         vu 00 20  1 596      
    jmp #0046A62D (code:addtostack)       ;#0046B211: 351 17F4FFFF               v  00 00  1 597      
;   427             end if
;   428             return {prdx+1,""}
    lea edi,[ebp-92] (symtab[1129])       ;#0046B216: 215175 A4                  uv 80 20  1 598      
    mov ecx,[ebp-12] (prdx)               ;#0046B219: 213115 F4                  vu 02 20  1 598      
    mov eax,[#0040201C]                   ;#0046B21C: 241 1C204000               uv 01 00  1 599      
    call #0045F261 (:%opAdd)              ;#0046B221: 350 3B40FFFF               v  00 00  1 599      
    lea eax,[ebp-100] (symtab[1132])      ;#0046B226: 215105 9C                  uv 01 20  1 600      
    mov edx,2                             ;#0046B229: 272 02000000               vu 04 00  1 600      
    push #0046B258                        ;#0046B22E: 150 58B24600               uv 00 00  1 601      
    push eax                              ;#0046B233: 120                        vu 00 01  1 601      
    mov edi,[#004022A4]                   ;#0046B234: 213075 A4224000            uv 80 00  1 602      
    cmp edi,h4                            ;#0046B23A: 201377 00000040            uv 00 80  1 603 80   
    jl #0046B24C                          ;#0046B240: 174 0A                     v  00 00  1 603      
    add dword[ebx+edi*4-8],1              ;#0046B242: 203104273 F8 01            u  00 88  3 604      
    cmp eax,628                           ;#0046B247: 075 74020000               vu 00 01  1 606      
    push edi                              ;#0046B24C: 127                        uv 00 80  1 607      
    push dword[ebp-92] (symtab[1129])     ;#0046B24D: 377165 A4                  np 00 20  2 608      
    mov edi,[ebp-100] (symtab[1132])      ;#0046B250: 213175 9C                  uv 80 20  1 610      
    jmp #00460143 (:%pMkSq)               ;#0046B253: 351 EB4EFFFF               v  00 00  1 610      
    mov eax,[ebp-100] (symtab[1132])      ;#0046B258: 213105 9C                  uv 01 20  1 611      
    mov [ebp-100] (symtab[1132]),ebx      ;#0046B25B: 211135 9C                  vu 00 28  1 611      
    jmp #00462C8F (:%opRetf)              ;#0046B25E: 351 2C7AFFFF               v  00 00  1 612      
;   429         end if
;   430         this = "{"&this&"}"
    mov ecx,3                             ;#0046B263: 271 03000000               uv 02 00  1 613      
    push #0046B284                        ;#0046B268: 150 84B24600               vu 00 00  1 613      
    push dword[#00402530]                 ;#0046B26D: 377065 30254000            np 00 00  2 614      
    push dword[ebp-24] (this)             ;#0046B273: 377165 E8                  np 00 20  2 616      
    push dword[#0040252C]                 ;#0046B276: 377065 2C254000            np 00 00  2 618      
    lea eax,[ebp-24] (this)               ;#0046B27C: 215105 E8                  uv 01 20  1 620      
    jmp #0045FF95 (:%opConcatN)           ;#0046B27F: 351 114DFFFF               v  00 00  1 620      
;   431     end if
;   432     if dotdot then
    mov esi,[ebp-48] (dotdot)             ;#0046B284: 213165 D0                  uv 40 20  1 621      
    test esi,esi                          ;#0046B287: 205366                     uv 00 40  1 622 40   
    je #0046B2B0                          ;#0046B289: 164 25                     v  00 00  1 622      
;   433         this &= ".."
    mov ecx,[ebp-24] (this)               ;#0046B28B: 213115 E8                  uv 02 20  1 623      
    cmp ecx,h4                            ;#0046B28E: 201371 00000040            uv 00 02  1 624 02   
    jne #0046B2A0                         ;#0046B294: 165 0A                     v  00 00  1 624      
    mov esi,1110                          ;#0046B296: 276 56040000               uv 40 00  1 625      
    call #00462744 (:%pUnassigned)        ;#0046B29B: 350 A474FFFF               v  00 00  1 625      
    lea edx,[ebp-24] (this)               ;#0046B2A0: 215125 E8                  uv 04 20  1 626      
    lea edi,[ebp-24] (this)               ;#0046B2A3: 215175 E8                  vu 80 20  1 626      
    mov ecx,#00402550                     ;#0046B2A6: 271 50254000               uv 02 00  1 627      
    call #0045FD65 (:%opConcat)           ;#0046B2AB: 350 B54AFFFF               v  00 00  1 627      
;   434     end if
;   435     lp = length(prev)
    mov edi,[ebp-4] (prev)                ;#0046B2B0: 213175 FC                  uv 80 20  1 628      
    mov eax,[ebx+edi*4-12]                ;#0046B2B3: 213104273 F4               uv 01 88  1 631 80 *80*
    mov [ebp-40] (lp),eax                 ;#0046B2B7: 211105 D8                  uv 00 21  1 632 01   
;   436     lt = length(name)+4+length(this)    -- (+4 is for " = " and a ',')
    mov esi,[ebp] (name)                  ;#0046B2BA: 213165 00                  vu 40 20  1 632      
    mov ecx,[ebx+esi*4-12]                ;#0046B2BD: 213114263 F4               uv 02 48  1 635    *40*
    mov [ebp-88] (symtab[1128]),ecx       ;#0046B2C1: 211115 A8                  uv 00 22  1 636 02   
    lea edi,[ebp-92] (symtab[1129])       ;#0046B2C4: 215175 A4                  vu 80 20  1 636      
    mov eax,[#0040205C] (JS)              ;#0046B2C7: 241 5C204000               uv 01 00  1 637      
    call #0045F261 (:%opAdd)              ;#0046B2CC: 350 903FFFFF               v  00 00  1 637      
    lea edi,[ebp-88] (symtab[1128])       ;#0046B2D1: 215175 A8                  uv 80 20  1 638      
    mov esi,[ebp-24] (this)               ;#0046B2D4: 213165 E8                  vu 40 20  1 638      
    mov edx,1110                          ;#0046B2D7: 272 56040000               uv 04 00  1 639      
    call #0045EFEC (:%opLen)              ;#0046B2DC: 350 0B3DFFFF               v  00 00  1 639      
    lea edi,[ebp-44] (lt)                 ;#0046B2E1: 215175 D4                  uv 80 20  1 640      
    mov ecx,[ebp-92] (symtab[1129])       ;#0046B2E4: 213115 A4                  vu 02 20  1 640      
    mov eax,[ebp-88] (symtab[1128])       ;#0046B2E7: 213105 A8                  uv 01 20  1 641      
    call #0045F27A (:%opAddi)             ;#0046B2EA: 350 8B3FFFFF               v  00 00  1 641      
;   437 
;   438     while 1 do -- (max 2 iterations, before splitting long strings)
;   439         if lp=0 then
    mov edi,[ebp-40] (lp)                 ;#0046B2EF: 213175 D8                  uv 80 20  1 642      
    cmp edi,0                             ;#0046B2F2: 203377 00                  uv 00 80  1 643 80   
    jne #0046B368                         ;#0046B2F5: 165 71                     v  00 00  1 643      
;   440             if not stringo              -- (any splitting already done)
    mov esi,[ebp-52] (stringo)            ;#0046B2F7: 213165 CC                  uv 40 20  1 644      
    test esi,esi                          ;#0046B2FA: 205366                     uv 00 40  1 645 40   
    je #0046B329                          ;#0046B2FC: 164 2B                     v  00 00  1 645      
;   441             or lt+lp<MAXLINELEN then    -- (or no need to split string)
    lea edi,[ebp-92] (symtab[1129])       ;#0046B2FE: 215175 A4                  uv 80 20  1 646      
    mov ecx,[ebp-44] (lt)                 ;#0046B301: 213115 D4                  vu 02 20  1 646      
    mov eax,[ebp-40] (lp)                 ;#0046B304: 213105 D8                  uv 01 20  1 647      
    call #0045F261 (:%opAdd)              ;#0046B307: 350 553FFFFF               v  00 00  1 647      
    mov edi,129                           ;#0046B30C: 277 81000000               uv 80 00  1 648      
    mov eax,[ebp-92] (symtab[1129])       ;#0046B311: 213105 A4                  vu 01 20  1 648      
    mov esi,1064                          ;#0046B314: 276 28040000               uv 40 00  1 649      
    mov edx,1129                          ;#0046B319: 272 69040000               vu 04 00  1 649      
    call #0045F8B0 (:%opJcc)              ;#0046B31E: 350 8D45FFFF               v  00 00  1 650      
    jge #0046B5D0                         ;#0046B323: 017215 A7020000            v  00 00  1 651      
;   442                 return {prst,this}
    lea eax,[ebp-100] (symtab[1132])      ;#0046B329: 215105 9C                  uv 01 20  1 652      
    mov edx,2                             ;#0046B32C: 272 02000000               vu 04 00  1 652      
    push #0046B358                        ;#0046B331: 150 58B34600               uv 00 00  1 653      
    push eax                              ;#0046B336: 120                        vu 00 01  1 653      
    mov edi,[ebp-24] (this)               ;#0046B337: 213175 E8                  uv 80 20  1 654      
    cmp edi,h4                            ;#0046B33A: 201377 00000040            uv 00 80  1 655 80   
    jl #0046B34C                          ;#0046B340: 174 0A                     v  00 00  1 655      
    add dword[ebx+edi*4-8],1              ;#0046B342: 203104273 F8 01            u  00 88  3 656      
    cmp eax,1110                          ;#0046B347: 075 56040000               vu 00 01  1 658      
    push edi                              ;#0046B34C: 127                        uv 00 80  1 659      
    push dword[ebp-8] (prst)              ;#0046B34D: 377165 F8                  np 00 20  2 660      
    mov edi,[ebp-100] (symtab[1132])      ;#0046B350: 213175 9C                  uv 80 20  1 662      
    jmp #00460143 (:%pMkSq)               ;#0046B353: 351 EB4DFFFF               v  00 00  1 662      
    mov eax,[ebp-100] (symtab[1132])      ;#0046B358: 213105 9C                  uv 01 20  1 663      
    mov [ebp-100] (symtab[1132]),ebx      ;#0046B35B: 211135 9C                  vu 00 28  1 663      
    jmp #00462C8F (:%opRetf)              ;#0046B35E: 351 2C79FFFF               v  00 00  1 664      
;   443             end if
;   444             exit
    jmp #0046B5D0                         ;#0046B363: 351 68020000               v  00 00  1 665      
;   445         else
;   446 --4/2/21
;   447 --          if lt+lp<MAXLINELEN then
;   448             if lt+lp<MAXLINELEN
    lea edi,[ebp-92] (symtab[1129])       ;#0046B368: 215175 A4                  uv 80 20  1 666      
    mov ecx,[ebp-44] (lt)                 ;#0046B36B: 213115 D4                  vu 02 20  1 666      
    mov eax,[ebp-40] (lp)                 ;#0046B36E: 213105 D8                  uv 01 20  1 667      
    call #0045F261 (:%opAdd)              ;#0046B371: 350 EB3EFFFF               v  00 00  1 667      
    mov edi,129                           ;#0046B376: 277 81000000               uv 80 00  1 668      
    mov eax,[ebp-92] (symtab[1129])       ;#0046B37B: 213105 A4                  vu 01 20  1 668      
    mov esi,1064                          ;#0046B37E: 276 28040000               uv 40 00  1 669      
    mov edx,1129                          ;#0046B383: 272 69040000               vu 04 00  1 669      
    call #0045F8B0 (:%opJcc)              ;#0046B388: 350 2345FFFF               v  00 00  1 670      
    jge #0046B455                         ;#0046B38D: 017215 C2000000            v  00 00  1 671      
;   449             and (cdi_filename!="dict.e" or cdi_varname!="trees" or prdx=1 or remainder(prdx-1,5)!=0) then
    mov edi,[#00402554]                   ;#0046B393: 213075 54254000            uv 80 00  1 672      
    mov eax,[#00402540] (cdi_filename)    ;#0046B399: 241 40254000               vu 01 00  1 672      
    mov esi,1133                          ;#0046B39E: 276 6D040000               uv 40 00  1 673      
    mov edx,1100                          ;#0046B3A3: 272 4C040000               vu 04 00  1 673      
    call #0045F91F (:%opJccE)             ;#0046B3A8: 350 7245FFFF               v  00 00  1 674      
    jne #0046B3F3                         ;#0046B3AD: 165 44                     v  00 00  1 675      
    mov edi,[#00402558]                   ;#0046B3AF: 213075 58254000            uv 80 00  1 676      
    mov eax,[#00402544] (cdi_varname)     ;#0046B3B5: 241 44254000               vu 01 00  1 676      
    mov esi,1134                          ;#0046B3BA: 276 6E040000               uv 40 00  1 677      
    mov edx,1101                          ;#0046B3BF: 272 4D040000               vu 04 00  1 677      
    call #0045F91F (:%opJccE)             ;#0046B3C4: 350 5645FFFF               v  00 00  1 678      
    jne #0046B3F3                         ;#0046B3C9: 165 28                     v  00 00  1 679      
    mov esi,[ebp-12] (prdx)               ;#0046B3CB: 213165 F4                  uv 40 20  1 680      
    cmp esi,1                             ;#0046B3CE: 203376 01                  uv 00 40  1 681 40   
    je #0046B3F3                          ;#0046B3D1: 164 20                     v  00 00  1 681      
    lea edi,[ebp-92] (symtab[1129])       ;#0046B3D3: 215175 A4                  uv 80 20  1 682      
    mov ecx,esi                           ;#0046B3D6: 211361                     vu 02 40  1 682      
    mov eax,[#0040201C]                   ;#0046B3D8: 241 1C204000               uv 01 00  1 683      
    call #0045F299 (:%opSub)              ;#0046B3DD: 350 B73EFFFF               v  00 00  1 683      
    mov eax,[ebp-92] (symtab[1129])       ;#0046B3E2: 213105 A4                  uv 01 20  1 684      
    mov ecx,5                             ;#0046B3E5: 271 05000000               vu 02 00  1 684      
    xor edx,edx                           ;#0046B3EA: 061322                     uv 04 04  1 685      
    idiv ecx                              ;#0046B3EC: 367371                     np 05 07 46 686      
    cmp edx,0                             ;#0046B3EE: 203372 00                  uv 00 04  1 732      
    je #0046B455                          ;#0046B3F1: 164 62                     v  00 00  1 732      
;   450                 -- note that we are clearly returning a partial result here,
;   451                 -- of say "1,2,3" rather than "{1,2,3}".
;   452                 return {prst,prev&','&this}
    mov ecx,[ebp-24] (this)               ;#0046B3F3: 213115 E8                  uv 02 20  1 733      
    cmp ecx,h4                            ;#0046B3F6: 201371 00000040            uv 00 02  1 734 02   
    jne #0046B408                         ;#0046B3FC: 165 0A                     v  00 00  1 734      
    mov esi,1110                          ;#0046B3FE: 276 56040000               uv 40 00  1 735      
    call #00462744 (:%pUnassigned)        ;#0046B403: 350 3C73FFFF               v  00 00  1 735      
    mov ecx,3                             ;#0046B408: 271 03000000               uv 02 00  1 736      
    push #0046B426                        ;#0046B40D: 150 26B44600               vu 00 00  1 736      
    push dword[ebp-24] (this)             ;#0046B412: 377165 E8                  np 00 20  2 737      
    push dword[#004022D4]                 ;#0046B415: 377065 D4224000            np 00 00  2 739      
    push dword[ebp-4] (prev)              ;#0046B41B: 377165 FC                  np 00 20  2 741      
    lea eax,[ebp-84] (symtab[1127])       ;#0046B41E: 215105 AC                  uv 01 20  1 743      
    jmp #0045FF95 (:%opConcatN)           ;#0046B421: 351 6F4BFFFF               v  00 00  1 743      
    lea eax,[ebp-100] (symtab[1132])      ;#0046B426: 215105 9C                  uv 01 20  1 744      
    mov edx,2                             ;#0046B429: 272 02000000               vu 04 00  1 744      
    push #0046B445                        ;#0046B42E: 150 45B44600               uv 00 00  1 745      
    push eax                              ;#0046B433: 120                        vu 00 01  1 745      
    push dword[ebp-84] (symtab[1127])     ;#0046B434: 377165 AC                  np 00 20  2 746      
    mov [ebp-84] (symtab[1127]),ebx       ;#0046B437: 211135 AC                  uv 00 28  1 748      
    push dword[ebp-8] (prst)              ;#0046B43A: 377165 F8                  np 00 20  2 749      
    mov edi,[ebp-100] (symtab[1132])      ;#0046B43D: 213175 9C                  uv 80 20  1 751      
    jmp #00460143 (:%pMkSq)               ;#0046B440: 351 FE4CFFFF               v  00 00  1 751      
    mov eax,[ebp-100] (symtab[1132])      ;#0046B445: 213105 9C                  uv 01 20  1 752      
    mov [ebp-100] (symtab[1132]),ebx      ;#0046B448: 211135 9C                  vu 00 28  1 752      
    jmp #00462C8F (:%opRetf)              ;#0046B44B: 351 3F78FFFF               v  00 00  1 753      
    jmp #0046B2EF                         ;#0046B450: 351 9AFEFFFF               v  00 00  1 754      
;   453             else
;   454                 {prev,namedx} = subscr(prev,name,prst,prdx-1)
    lea edi,[ebp-104] (symtab[1135])      ;#0046B455: 215175 98                  uv 80 20  1 755      
    mov ecx,[ebp-12] (prdx)               ;#0046B458: 213115 F4                  vu 02 20  1 755      
    mov eax,[#0040201C]                   ;#0046B45B: 241 1C204000               uv 01 00  1 756      
    call #0045F299 (:%opSub)              ;#0046B460: 350 343EFFFF               v  00 00  1 756      
    mov ecx,5                             ;#0046B465: 271 05000000               uv 02 00  1 757      
    mov edx,1075                          ;#0046B46A: 272 33040000               vu 04 00  1 757      
    call #00462C02 (:%opFrame) (subscr)   ;#0046B46F: 350 8E77FFFF               v  00 00  1 758      
    mov edi,[ebp+20] (prevebp)            ;#0046B474: 213175 14                  uv 80 20  1 759      
    mov eax,[edi-4]                       ;#0046B477: 213107 FC                  uv 01 80  1 762 80 *80*
    xor ebx,ebx                           ;#0046B47A: 061333                     vu 08 08  1 762      
    cmp eax,h4                            ;#0046B47C: 075 00000040               uv 00 01  1 763      
    jl #0046B48D                          ;#0046B481: 174 0A                     v  00 00  1 763      
    add dword[ebx+eax*4-8],1              ;#0046B483: 203104203 F8 01            u  00 09  3 764      
    cmp eax,1105                          ;#0046B488: 075 51040000               vu 00 01  1 766      
    mov [ebp] (prev),eax                  ;#0046B48D: 211105 00                  uv 00 21  1 767      
    mov edi,[ebp+20] (prevebp)            ;#0046B490: 213175 14                  vu 80 20  1 767      
    mov eax,[edi]                         ;#0046B493: 213007                     uv 01 80  1 770    *80*
    xor ebx,ebx                           ;#0046B495: 061333                     vu 08 08  1 770      
    cmp eax,h4                            ;#0046B497: 075 00000040               uv 00 01  1 771      
    jl #0046B4A8                          ;#0046B49C: 174 0A                     v  00 00  1 771      
    add dword[ebx+eax*4-8],1              ;#0046B49E: 203104203 F8 01            u  00 09  3 772      
    cmp eax,1104                          ;#0046B4A3: 075 50040000               vu 00 01  1 774      
    mov [ebp-4] (name),eax                ;#0046B4A8: 211105 FC                  uv 00 21  1 775      
    mov edi,[ebp+20] (prevebp)            ;#0046B4AB: 213175 14                  vu 80 20  1 775      
    mov eax,[edi-8]                       ;#0046B4AE: 213107 F8                  uv 01 80  1 778    *80*
    mov [ebp-8] (prst),eax                ;#0046B4B1: 211105 F8                  uv 00 21  1 779 01   
    mov edi,[ebp+20] (prevebp)            ;#0046B4B4: 213175 14                  vu 80 20  1 779      
    mov eax,[edi-104]                     ;#0046B4B7: 213107 98                  uv 01 80  1 782    *80*
    mov [ebp-12] (prdx),eax               ;#0046B4BA: 211105 F4                  uv 00 21  1 783 01   
    mov [ebp+28] (retaddr),#0046B4C9      ;#0046B4BD: 307105 1C C9B44600         vu 00 20  1 783      
    jmp #0046BCEA (code:subscr)           ;#0046B4C4: 351 21080000               v  00 00  1 784      
    push eax                              ;#0046B4C9: 120                        uv 00 01  1 785      
    mov esi,[ebp-100] (symtab[1132])      ;#0046B4CA: 213165 9C                  vu 40 20  1 785      
    cmp esi,h4                            ;#0046B4CD: 201376 00000040            uv 00 40  1 786      
    jle #0046B4E3                         ;#0046B4D3: 176 0E                     v  00 00  1 786      
    sub dword[ebx+esi*4-8],1              ;#0046B4D5: 203154263 F8 01            u  00 48  3 787      
    jne #0046B4E3                         ;#0046B4DA: 165 07                     v  00 00  1 789      
    mov edx,esi                           ;#0046B4DC: 213326                     uv 04 40  1 790      
    call #004639A8 (:%pDealloc)           ;#0046B4DE: 350 C584FFFF               v  00 00  1 790      
    pop dword[ebp-100] (symtab[1132])     ;#0046B4E3: 217105 9C                  np 00 20  3 791      
    mov edi,2                             ;#0046B4E6: 277 02000000               uv 80 00  1 794      
    lea ecx,[ebp-28] (namedx)             ;#0046B4EB: 215115 E4                  vu 02 20  1 794      
    mov esi,[ebp-100] (symtab[1132])      ;#0046B4EE: 213165 9C                  uv 40 20  1 795      
    mov edx,1132                          ;#0046B4F1: 272 6C040000               vu 04 00  1 795      
    mov al,0                              ;#0046B4F6: 260 00                     uv 01 00  1 796      
    call #00460FE5 (:%pSubse1)            ;#0046B4F8: 350 E85AFFFF               v  00 00  1 796      
    mov edi,1                             ;#0046B4FD: 277 01000000               uv 80 00  1 797      
    lea ecx,[ebp-4] (prev)                ;#0046B502: 215115 FC                  vu 02 20  1 797      
    mov esi,[ebp-100] (symtab[1132])      ;#0046B505: 213165 9C                  uv 40 20  1 798      
    mov edx,1132                          ;#0046B508: 272 6C040000               vu 04 00  1 798      
    mov al,0                              ;#0046B50D: 260 00                     uv 01 00  1 799      
    call #00460FE5 (:%pSubse1)            ;#0046B50F: 350 D15AFFFF               v  00 00  1 799      
    mov edi,[ebp-4] (prev)                ;#0046B514: 213175 FC                  uv 80 20  1 800      
    cmp edi,h4                            ;#0046B517: 201377 00000040            uv 00 80  1 801 80   
    jl #0046B526                          ;#0046B51D: 174 07                     v  00 00  1 801      
    cmp byte[ebx+edi*4-1],#82             ;#0046B51F: 200174273 FF 82            u  00 88  2 802      
    je #0046B530                          ;#0046B524: 164 0A                     v  00 00  1 803      
    mov ecx,1105                          ;#0046B526: 271 51040000               uv 02 00  1 804      
    call #00462D8D (:%opTcFail)           ;#0046B52B: 350 5D78FFFF               v  00 00  1 804      
    mov edx,[ebp-100] (symtab[1132])      ;#0046B530: 213125 9C                  uv 04 20  1 805      
    cmp edx,h4                            ;#0046B533: 201372 00000040            uv 00 04  1 806 04   
    mov [ebp-100] (symtab[1132]),ebx      ;#0046B539: 211135 9C                  vu 00 28  1 806      
    jle #0046B54A                         ;#0046B53C: 176 0C                     v  00 00  1 807      
    sub dword[ebx+edx*4-8],1              ;#0046B53E: 203154223 F8 01            u  00 0C  3 808      
    jne #0046B54A                         ;#0046B543: 165 05                     v  00 00  1 810      
    call #004639A8 (:%pDealloc)           ;#0046B545: 350 5E84FFFF               v  00 00  1 811      
;   455                 addtostack(idii,prst,namedx,prev)
    mov ecx,5                             ;#0046B54A: 271 05000000               uv 02 00  1 812      
    mov edx,1068                          ;#0046B54F: 272 2C040000               vu 04 00  1 812      
    call :%opFrame (addtostack)           ;#0046B554: 350 A976FFFF               v  00 00  1 813      
    mov edi,[ebp+20] (prevebp)            ;#0046B559: 213175 14                  uv 80 20  1 814      
    mov eax,[edi-20]                      ;#0046B55C: 213107 EC                  uv 01 80  1 817 80 *80*
    xor ebx,ebx                           ;#0046B55F: 061333                     vu 08 08  1 817      
    cmp eax,h4                            ;#0046B561: 075 00000040               uv 00 01  1 818      
    jl #0046B572                          ;#0046B566: 174 0A                     v  00 00  1 818      
    add dword[ebx+eax*4-8],1              ;#0046B568: 203104203 F8 01            u  00 09  3 819      
    cmp eax,1109                          ;#0046B56D: 075 55040000               vu 00 01  1 821      
    mov [ebp] (idii),eax                  ;#0046B572: 211105 00                  uv 00 21  1 822      
    mov edi,[ebp+20] (prevebp)            ;#0046B575: 213175 14                  vu 80 20  1 822      
    mov eax,[edi-8]                       ;#0046B578: 213107 F8                  uv 01 80  1 825    *80*
    mov [ebp-4] (idxr),eax                ;#0046B57B: 211105 FC                  uv 00 21  1 826 01   
    mov edi,[ebp+20] (prevebp)            ;#0046B57E: 213175 14                  vu 80 20  1 826      
    mov eax,[edi-28]                      ;#0046B581: 213107 E4                  uv 01 80  1 829    *80*
    xor ebx,ebx                           ;#0046B584: 061333                     vu 08 08  1 829      
    cmp eax,h4                            ;#0046B586: 075 00000040               uv 00 01  1 830      
    jl #0046B597                          ;#0046B58B: 174 0A                     v  00 00  1 830      
    add dword[ebx+eax*4-8],1              ;#0046B58D: 203104203 F8 01            u  00 09  3 831      
    cmp eax,1111                          ;#0046B592: 075 57040000               vu 00 01  1 833      
    mov [ebp-8] (name),eax                ;#0046B597: 211105 F8                  uv 00 21  1 834      
    mov edi,[ebp+20] (prevebp)            ;#0046B59A: 213175 14                  vu 80 20  1 834      
    mov eax,[edi-4]                       ;#0046B59D: 213107 FC                  uv 01 80  1 837    *80*
    xor ebx,ebx                           ;#0046B5A0: 061333                     vu 08 08  1 837      
    cmp eax,h4                            ;#0046B5A2: 075 00000040               uv 00 01  1 838      
    jl #0046B5B3                          ;#0046B5A7: 174 0A                     v  00 00  1 838      
    add dword[ebx+eax*4-8],1              ;#0046B5A9: 203104203 F8 01            u  00 09  3 839      
    cmp eax,1105                          ;#0046B5AE: 075 51040000               vu 00 01  1 841      
    mov [ebp-12] (text),eax               ;#0046B5B3: 211105 F4                  uv 00 21  1 842      
    mov [ebp+28] (retaddr),#0046B5C2      ;#0046B5B6: 307105 1C C2B54600         vu 00 20  1 842      
    jmp #0046A62D (code:addtostack)       ;#0046B5BD: 351 6BF0FFFF               v  00 00  1 843      
;   456                 lp = 0
    mov [ebp-40] (lp),ebx                 ;#0046B5C2: 211135 D8                  uv 00 28  1 844      
;   457                 prst = prdx
    mov ecx,[ebp-12] (prdx)               ;#0046B5C5: 213115 F4                  vu 02 20  1 844      
    mov [ebp-8] (prst),ecx                ;#0046B5C8: 211115 F8                  uv 00 22  1 845      
;   458             end if
;   459         end if
;   460     end while
    jmp #0046B2EF                         ;#0046B5CB: 351 1FFDFFFF               v  00 00  1 845      
;   461 
;   462     if stringo then
    mov esi,[ebp-52] (stringo)            ;#0046B5D0: 213165 CC                  uv 40 20  1 846      
    test esi,esi                          ;#0046B5D3: 205366                     uv 00 40  1 847 40   
    je #0046BB97                          ;#0046B5D5: 017204 BC050000            v  00 00  1 847      
;   463         --
;   464         -- One that wouldn't fit, so split if needed and
;   465         -- force linebreaks all the way back up the call 
;   466         -- stack (which is done by returning prdx+1)
;   467         --
;   468         if prdx!=-1 then
    mov edi,[ebp-12] (prdx)               ;#0046B5DB: 213175 F4                  uv 80 20  1 848      
    cmp edi,-1                            ;#0046B5DE: 203377 FF                  uv 00 80  1 849 80   
    je #0046B67A                          ;#0046B5E1: 017204 93000000            v  00 00  1 849      
;   469             name = sprintf("%s[%d]",{name,prdx})
    lea eax,[ebp-108] (symtab[1136])      ;#0046B5E7: 215105 94                  uv 01 20  1 850      
    mov edx,2                             ;#0046B5EA: 272 02000000               vu 04 00  1 850      
    push #0046B613                        ;#0046B5EF: 150 13B64600               uv 00 00  1 851      
    push eax                              ;#0046B5F4: 120                        vu 00 01  1 851      
    push edi                              ;#0046B5F5: 127                        uv 00 80  1 852      
    mov eax,[ebp] (name)                  ;#0046B5F6: 213105 00                  vu 01 20  1 852      
    cmp eax,h4                            ;#0046B5F9: 075 00000040               uv 00 01  1 853      
    jl #0046B60A                          ;#0046B5FE: 174 0A                     v  00 00  1 853      
    add dword[ebx+eax*4-8],1              ;#0046B600: 203104203 F8 01            u  00 09  3 854      
    cmp eax,1104                          ;#0046B605: 075 50040000               vu 00 01  1 856      
    push eax                              ;#0046B60A: 120                        uv 00 01  1 857      
    mov edi,[ebp-108] (symtab[1136])      ;#0046B60B: 213175 94                  vu 80 20  1 857      
    jmp #00460143 (:%pMkSq)               ;#0046B60E: 351 304BFFFF               v  00 00  1 858      
    mov ecx,2                             ;#0046B613: 271 02000000               uv 02 00  1 859      
    mov edx,210                           ;#0046B618: 272 D2000000               vu 04 00  1 859      
    call #00462C02 (:%opFrame) (sprintf)  ;#0046B61D: 350 E075FFFF               v  00 00  1 860      
    mov ecx,[#00402524]                   ;#0046B622: 213015 24254000            uv 02 00  1 861      
    mov [ebp] (fmt),ecx                   ;#0046B628: 211115 00                  uv 00 22  1 862 02   
    add dword[ebx+ecx*4-8],1              ;#0046B62B: 203104213 F8 01            u  00 0A  3 864    *02*
    mov edi,[ebp+20] (prevebp)            ;#0046B630: 213175 14                  vu 80 20  1 866      
    mov eax,[edi-108]                     ;#0046B633: 213107 94                  uv 01 80  1 869    *80*
    mov [edi-108], dword h4               ;#0046B636: 307107 94 00000040         vu 00 80  1 869      
    cmp eax,h4                            ;#0046B63D: 075 00000040               uv 00 01  1 870      
    jne #0046B64E                         ;#0046B642: 165 0A                     v  00 00  1 870      
    mov esi,1136                          ;#0046B644: 276 70040000               uv 40 00  1 871      
    call #00462744 (:%pUnassigned)        ;#0046B649: 350 F670FFFF               v  00 00  1 871      
    mov [ebp-4] (args),eax                ;#0046B64E: 211105 FC                  uv 00 21  1 872      
    mov [ebp+28] (retaddr),#0046B65D      ;#0046B651: 307105 1C 5DB64600         vu 00 20  1 872      
    jmp #00454E9A (code:sprintf)          ;#0046B658: 351 3D98FEFF               v  00 00  1 873      
    push eax                              ;#0046B65D: 120                        uv 00 01  1 874      
    mov esi,[ebp] (name)                  ;#0046B65E: 213165 00                  vu 40 20  1 874      
    cmp esi,h4                            ;#0046B661: 201376 00000040            uv 00 40  1 875      
    jle #0046B677                         ;#0046B667: 176 0E                     v  00 00  1 875      
    sub dword[ebx+esi*4-8],1              ;#0046B669: 203154263 F8 01            u  00 48  3 876      
    jne #0046B677                         ;#0046B66E: 165 07                     v  00 00  1 878      
    mov edx,esi                           ;#0046B670: 213326                     uv 04 40  1 879      
    call #004639A8 (:%pDealloc)           ;#0046B672: 350 3183FFFF               v  00 00  1 879      
    pop dword[ebp] (name)                 ;#0046B677: 217105 00                  np 00 20  3 880      
;   470         end if
;   471         newprst = 1
    mov [ebp-32] (newprst), dword 1       ;#0046B67A: 307105 E0 01000000         uv 00 20  1 883      
;   472         idii = deep_copy(idii)
    mov ecx,8                             ;#0046B681: 271 08000000               vu 02 00  1 883      
    mov edx,266                           ;#0046B686: 272 0A010000               uv 04 00  1 884      
    call :%opFrame (deep_copy)            ;#0046B68B: 350 7275FFFF               v  00 00  1 884      
    mov edi,[ebp+20] (prevebp)            ;#0046B690: 213175 14                  uv 80 20  1 885      
    mov eax,[edi-20]                      ;#0046B693: 213107 EC                  uv 01 80  1 888 80 *80*
    mov [edi-20], dword h4                ;#0046B696: 307107 EC 00000040         vu 00 80  1 888      
    cmp eax,h4                            ;#0046B69D: 075 00000040               uv 00 01  1 889      
    jne #0046B6AE                         ;#0046B6A2: 165 0A                     v  00 00  1 889      
    mov esi,1109                          ;#0046B6A4: 276 55040000               uv 40 00  1 890      
    call #00462744 (:%pUnassigned)        ;#0046B6A9: 350 9670FFFF               v  00 00  1 890      
    mov [ebp] (o),eax                     ;#0046B6AE: 211105 00                  uv 00 21  1 891      
    mov [ebp+28] (retaddr),#0046B6BD      ;#0046B6B1: 307105 1C BDB64600         vu 00 20  1 891      
    jmp #0044FA59 (code:deep_copy)        ;#0046B6B8: 351 9C43FEFF               v  00 00  1 892      
    push eax                              ;#0046B6BD: 120                        uv 00 01  1 893      
    mov edi,[ebp-20] (idii)               ;#0046B6BE: 213175 EC                  vu 80 20  1 893      
    cmp edi,h4                            ;#0046B6C1: 201377 00000040            uv 00 80  1 894      
    jle #0046B6D7                         ;#0046B6C7: 176 0E                     v  00 00  1 894      
    sub dword[ebx+edi*4-8],1              ;#0046B6C9: 203154273 F8 01            u  00 88  3 895      
    jne #0046B6D7                         ;#0046B6CE: 165 07                     v  00 00  1 897      
    mov edx,edi                           ;#0046B6D0: 213327                     uv 04 80  1 898      
    call #004639A8 (:%pDealloc)           ;#0046B6D2: 350 D182FFFF               v  00 00  1 898      
    pop dword[ebp-20] (idii)              ;#0046B6D7: 217105 EC                  np 00 20  3 899      
    mov ecx,[ebp-20] (idii)               ;#0046B6DA: 213115 EC                  uv 02 20  1 902      
    cmp ecx,h4                            ;#0046B6DD: 201371 00000040            uv 00 02  1 903 02   
    jl #0046B6EC                          ;#0046B6E3: 174 07                     v  00 00  1 903      
    test byte[ebx+ecx*4-1],#80            ;#0046B6E5: 366104213 FF 80            u  00 0A  2 904      
    jne #0046B6F6                         ;#0046B6EA: 165 0A                     v  00 00  1 905      
    mov ecx,1109                          ;#0046B6EC: 271 55040000               uv 02 00  1 906      
    call #00462D8D (:%opTcFail)           ;#0046B6F1: 350 9776FFFF               v  00 00  1 906      
;   473         idii &= 1
    lea edx,[ebp-20] (idii)               ;#0046B6F6: 215125 EC                  uv 04 20  1 907      
    lea edi,[ebp-20] (idii)               ;#0046B6F9: 215175 EC                  vu 80 20  1 907      
    mov ecx,#0040201C                     ;#0046B6FC: 271 1C204000               uv 02 00  1 908      
    xor eax,eax                           ;#0046B701: 061300                     vu 01 01  1 908      
    call #0045F9F7 (:%opApnd)             ;#0046B703: 350 EF42FFFF               v  00 00  1 909      
;   474         lo = length(o)
    lea edi,[ebp-36] (lo)                 ;#0046B708: 215175 DC                  uv 80 20  1 910      
    mov esi,[ebp-16] (o)                  ;#0046B70B: 213165 F0                  vu 40 20  1 910      
    mov edx,1108                          ;#0046B70E: 272 54040000               uv 04 00  1 911      
    call #0045EFEC (:%opLen)              ;#0046B713: 350 D438FFFF               v  00 00  1 911      
;   475         while lo-newprst+length(name)+13>MAXLINELEN do
    lea edi,[ebp-104] (symtab[1135])      ;#0046B718: 215175 98                  uv 80 20  1 912      
    mov ecx,[ebp-36] (lo)                 ;#0046B71B: 213115 DC                  vu 02 20  1 912      
    mov eax,[ebp-32] (newprst)            ;#0046B71E: 213105 E0                  uv 01 20  1 913      
    call #0045F299 (:%opSub)              ;#0046B721: 350 733BFFFF               v  00 00  1 913      
    mov edi,[ebp] (name)                  ;#0046B726: 213175 00                  uv 80 20  1 914      
    mov esi,[ebx+edi*4-12]                ;#0046B729: 213164273 F4               uv 40 88  1 917 80 *80*
    mov [ebp-88] (symtab[1128]),esi       ;#0046B72D: 211165 A8                  uv 00 60  1 918 40   
    lea edi,[ebp-92] (symtab[1129])       ;#0046B730: 215175 A4                  vu 80 20  1 918      
    mov ecx,[ebp-104] (symtab[1135])      ;#0046B733: 213115 98                  uv 02 20  1 919      
    mov eax,esi                           ;#0046B736: 211360                     vu 01 40  1 919      
    call #0045F261 (:%opAdd)              ;#0046B738: 350 243BFFFF               v  00 00  1 920      
    lea edi,[ebp-104] (symtab[1135])      ;#0046B73D: 215175 98                  uv 80 20  1 921      
    mov ecx,[ebp-92] (symtab[1129])       ;#0046B740: 213115 A4                  vu 02 20  1 921      
    mov eax,[#00402094] (BRIGHT_MAGENTA)  ;#0046B743: 241 94204000               uv 01 00  1 922      
    call #0045F261 (:%opAdd)              ;#0046B748: 350 143BFFFF               v  00 00  1 922      
    mov edi,129                           ;#0046B74D: 277 81000000               uv 80 00  1 923      
    mov eax,[ebp-104] (symtab[1135])      ;#0046B752: 213105 98                  vu 01 20  1 923      
    mov esi,1064                          ;#0046B755: 276 28040000               uv 40 00  1 924      
    mov edx,1135                          ;#0046B75A: 272 6F040000               vu 04 00  1 924      
    call #0045F8B0 (:%opJcc)              ;#0046B75F: 350 4C41FFFF               v  00 00  1 925      
    jle #0046B977                         ;#0046B764: 017216 0D020000            v  00 00  1 926      
;   476             lp = newprst+MAXLINELEN-14-length(name)
    lea edi,[ebp-104] (symtab[1135])      ;#0046B76A: 215175 98                  uv 80 20  1 927      
    mov ecx,[ebp-32] (newprst)            ;#0046B76D: 213115 E0                  vu 02 20  1 927      
    mov eax,[#00402514] (MAXLINELEN)      ;#0046B770: 241 14254000               uv 01 00  1 928      
    call #0045F261 (:%opAdd)              ;#0046B775: 350 E73AFFFF               v  00 00  1 928      
    lea edi,[ebp-92] (symtab[1129])       ;#0046B77A: 215175 A4                  uv 80 20  1 929      
    mov ecx,[ebp-104] (symtab[1135])      ;#0046B77D: 213115 98                  vu 02 20  1 929      
    mov eax,[#0040209C] (YELLOW)          ;#0046B780: 241 9C204000               uv 01 00  1 930      
    call #0045F299 (:%opSub)              ;#0046B785: 350 0F3BFFFF               v  00 00  1 930      
    mov edi,[ebp] (name)                  ;#0046B78A: 213175 00                  uv 80 20  1 931      
    mov esi,[ebx+edi*4-12]                ;#0046B78D: 213164273 F4               uv 40 88  1 934 80 *80*
    mov [ebp-88] (symtab[1128]),esi       ;#0046B791: 211165 A8                  uv 00 60  1 935 40   
    lea edi,[ebp-40] (lp)                 ;#0046B794: 215175 D8                  vu 80 20  1 935      
    mov ecx,[ebp-92] (symtab[1129])       ;#0046B797: 213115 A4                  uv 02 20  1 936      
    mov eax,esi                           ;#0046B79A: 211360                     vu 01 40  1 936      
    call #0045F2B2 (:%opSubi)             ;#0046B79C: 350 113BFFFF               v  00 00  1 937      
;   477             if lp<newprst+5 then exit end if    -- added 1/3/2021...
    lea edi,[ebp-92] (symtab[1129])       ;#0046B7A1: 215175 A4                  uv 80 20  1 938      
    mov ecx,[ebp-32] (newprst)            ;#0046B7A4: 213115 E0                  vu 02 20  1 938      
    mov eax,[#0040206C] (D_MONTH)         ;#0046B7A7: 241 6C204000               uv 01 00  1 939      
    call #0045F261 (:%opAdd)              ;#0046B7AC: 350 B03AFFFF               v  00 00  1 939      
    mov edi,[ebp-92] (symtab[1129])       ;#0046B7B1: 213175 A4                  uv 80 20  1 940      
    mov eax,[ebp-40] (lp)                 ;#0046B7B4: 213105 D8                  vu 01 20  1 940      
    mov esi,1129                          ;#0046B7B7: 276 69040000               uv 40 00  1 941      
    mov edx,1114                          ;#0046B7BC: 272 5A040000               vu 04 00  1 941      
    call #0045F8B0 (:%opJcc)              ;#0046B7C1: 350 EA40FFFF               v  00 00  1 942      
    jl #0046B977                          ;#0046B7C6: 017214 AB010000            v  00 00  1 943      
;   478             this = allascii(o[newprst..lp])
    lea edx,[ebp-84] (symtab[1127])       ;#0046B7CC: 215125 AC                  uv 04 20  1 944      
    mov ecx,1                             ;#0046B7CF: 271 01000000               vu 02 00  1 944      
    push #0046B7ED                        ;#0046B7D4: 150 EDB74600               uv 00 00  1 945      
    push edx                              ;#0046B7D9: 122                        vu 00 04  1 945      
    push dword[ebp-40] (lp)               ;#0046B7DA: 377165 D8                  np 00 20  2 946      
    push dword[ebp-32] (newprst)          ;#0046B7DD: 377165 E0                  np 00 20  2 948      
    mov esi,[ebp-16] (o)                  ;#0046B7E0: 213165 F0                  uv 40 20  1 950      
    mov edx,1108                          ;#0046B7E3: 272 54040000               vu 04 00  1 950      
    jmp #00460A75 (:%pSubss)              ;#0046B7E8: 351 8852FFFF               v  00 00  1 951      
    mov ecx,10                            ;#0046B7ED: 271 0A000000               uv 02 00  1 952      
    mov edx,1087                          ;#0046B7F2: 272 3F040000               vu 04 00  1 952      
    call :%opFrame (allascii)             ;#0046B7F7: 350 0674FFFF               v  00 00  1 953      
    mov edi,[ebp+20] (prevebp)            ;#0046B7FC: 213175 14                  uv 80 20  1 954      
    mov eax,[edi-84]                      ;#0046B7FF: 213107 AC                  uv 01 80  1 957 80 *80*
    mov [edi-84], dword h4                ;#0046B802: 307107 AC 00000040         vu 00 80  1 957      
    cmp eax,h4                            ;#0046B809: 075 00000040               uv 00 01  1 958      
    jne #0046B81A                         ;#0046B80E: 165 0A                     v  00 00  1 958      
    mov esi,1127                          ;#0046B810: 276 67040000               uv 40 00  1 959      
    call #00462744 (:%pUnassigned)        ;#0046B815: 350 2A6FFFFF               v  00 00  1 959      
    mov [ebp] (x),eax                     ;#0046B81A: 211105 00                  uv 00 21  1 960      
    mov [ebp+28] (retaddr),#0046B829      ;#0046B81D: 307105 1C 29B84600         vu 00 20  1 960      
    jmp #0046BEAD (code:allascii)         ;#0046B824: 351 84060000               v  00 00  1 961      
    push eax                              ;#0046B829: 120                        uv 00 01  1 962      
    mov ecx,[ebp-24] (this)               ;#0046B82A: 213115 E8                  vu 02 20  1 962      
    cmp ecx,h4                            ;#0046B82D: 201371 00000040            uv 00 02  1 963      
    jle #0046B843                         ;#0046B833: 176 0E                     v  00 00  1 963      
    sub dword[ebx+ecx*4-8],1              ;#0046B835: 203154213 F8 01            u  00 0A  3 964      
    jne #0046B843                         ;#0046B83A: 165 07                     v  00 00  1 966      
    mov edx,ecx                           ;#0046B83C: 213321                     uv 04 02  1 967      
    call #004639A8 (:%pDealloc)           ;#0046B83E: 350 6581FFFF               v  00 00  1 967      
    pop dword[ebp-24] (this)              ;#0046B843: 217105 E8                  np 00 20  3 968      
;   479             namedx = sprintf("%s[%d..%d]",{name,newprst,lp})
    lea eax,[ebp-108] (symtab[1136])      ;#0046B846: 215105 94                  uv 01 20  1 971      
    mov edx,3                             ;#0046B849: 272 03000000               vu 04 00  1 971      
    push #0046B878                        ;#0046B84E: 150 78B84600               uv 00 00  1 972      
    push eax                              ;#0046B853: 120                        vu 00 01  1 972      
    push dword[ebp-40] (lp)               ;#0046B854: 377165 D8                  np 00 20  2 973      
    push dword[ebp-32] (newprst)          ;#0046B857: 377165 E0                  np 00 20  2 975      
    mov edi,[ebp] (name)                  ;#0046B85A: 213175 00                  uv 80 20  1 977      
    cmp edi,h4                            ;#0046B85D: 201377 00000040            uv 00 80  1 978 80   
    jl #0046B86F                          ;#0046B863: 174 0A                     v  00 00  1 978      
    add dword[ebx+edi*4-8],1              ;#0046B865: 203104273 F8 01            u  00 88  3 979      
    cmp eax,1104                          ;#0046B86A: 075 50040000               vu 00 01  1 981      
    push edi                              ;#0046B86F: 127                        uv 00 80  1 982      
    mov edi,[ebp-108] (symtab[1136])      ;#0046B870: 213175 94                  vu 80 20  1 982      
    jmp #00460143 (:%pMkSq)               ;#0046B873: 351 CB48FFFF               v  00 00  1 983      
    mov ecx,2                             ;#0046B878: 271 02000000               uv 02 00  1 984      
    mov edx,210                           ;#0046B87D: 272 D2000000               vu 04 00  1 984      
    call #00462C02 (:%opFrame) (sprintf)  ;#0046B882: 350 7B73FFFF               v  00 00  1 985      
    mov esi,[#00402528]                   ;#0046B887: 213065 28254000            uv 40 00  1 986      
    mov [ebp] (fmt),esi                   ;#0046B88D: 211165 00                  uv 00 60  1 987 40   
    add dword[ebx+esi*4-8],1              ;#0046B890: 203104263 F8 01            u  00 48  3 989    *40*
    mov edi,[ebp+20] (prevebp)            ;#0046B895: 213175 14                  vu 80 20  1 991      
    mov eax,[edi-108]                     ;#0046B898: 213107 94                  uv 01 80  1 994    *80*
    mov [edi-108], dword h4               ;#0046B89B: 307107 94 00000040         vu 00 80  1 994      
    cmp eax,h4                            ;#0046B8A2: 075 00000040               uv 00 01  1 995      
    jne #0046B8B3                         ;#0046B8A7: 165 0A                     v  00 00  1 995      
    mov esi,1136                          ;#0046B8A9: 276 70040000               uv 40 00  1 996      
    call #00462744 (:%pUnassigned)        ;#0046B8AE: 350 916EFFFF               v  00 00  1 996      
    mov [ebp-4] (args),eax                ;#0046B8B3: 211105 FC                  uv 00 21  1 997      
    mov [ebp+28] (retaddr),#0046B8C2      ;#0046B8B6: 307105 1C C2B84600         vu 00 20  1 997      
    jmp #00454E9A (code:sprintf)          ;#0046B8BD: 351 D895FEFF               v  00 00  1 998      
    push eax                              ;#0046B8C2: 120                        uv 00 01  1 999      
    mov ecx,[ebp-28] (namedx)             ;#0046B8C3: 213115 E4                  vu 02 20  1 999      
    cmp ecx,h4                            ;#0046B8C6: 201371 00000040            uv 00 02  1 1000      
    jle #0046B8DC                         ;#0046B8CC: 176 0E                     v  00 00  1 1000      
    sub dword[ebx+ecx*4-8],1              ;#0046B8CE: 203154213 F8 01            u  00 0A  3 1001      
    jne #0046B8DC                         ;#0046B8D3: 165 07                     v  00 00  1 1003      
    mov edx,ecx                           ;#0046B8D5: 213321                     uv 04 02  1 1004      
    call #004639A8 (:%pDealloc)           ;#0046B8D7: 350 CC80FFFF               v  00 00  1 1004      
    pop dword[ebp-28] (namedx)            ;#0046B8DC: 217105 E4                  np 00 20  3 1005      
;   480             addtostack(idii,newprst,namedx,this)
    mov ecx,5                             ;#0046B8DF: 271 05000000               uv 02 00  1 1008      
    mov edx,1068                          ;#0046B8E4: 272 2C040000               vu 04 00  1 1008      
    call :%opFrame (addtostack)           ;#0046B8E9: 350 1473FFFF               v  00 00  1 1009      
    mov edi,[ebp+20] (prevebp)            ;#0046B8EE: 213175 14                  uv 80 20  1 1010      
    mov eax,[edi-20]                      ;#0046B8F1: 213107 EC                  uv 01 80  1 1013 80 *80*
    xor ebx,ebx                           ;#0046B8F4: 061333                     vu 08 08  1 1013      
    cmp eax,h4                            ;#0046B8F6: 075 00000040               uv 00 01  1 1014      
    jl #0046B907                          ;#0046B8FB: 174 0A                     v  00 00  1 1014      
    add dword[ebx+eax*4-8],1              ;#0046B8FD: 203104203 F8 01            u  00 09  3 1015      
    cmp eax,1109                          ;#0046B902: 075 55040000               vu 00 01  1 1017      
    mov [ebp] (idii),eax                  ;#0046B907: 211105 00                  uv 00 21  1 1018      
    mov edi,[ebp+20] (prevebp)            ;#0046B90A: 213175 14                  vu 80 20  1 1018      
    mov eax,[edi-32]                      ;#0046B90D: 213107 E0                  uv 01 80  1 1021    *80*
    mov [ebp-4] (idxr),eax                ;#0046B910: 211105 FC                  uv 00 21  1 1022 01   
    mov edi,[ebp+20] (prevebp)            ;#0046B913: 213175 14                  vu 80 20  1 1022      
    mov eax,[edi-28]                      ;#0046B916: 213107 E4                  uv 01 80  1 1025    *80*
    xor ebx,ebx                           ;#0046B919: 061333                     vu 08 08  1 1025      
    cmp eax,h4                            ;#0046B91B: 075 00000040               uv 00 01  1 1026      
    jl #0046B92C                          ;#0046B920: 174 0A                     v  00 00  1 1026      
    add dword[ebx+eax*4-8],1              ;#0046B922: 203104203 F8 01            u  00 09  3 1027      
    cmp eax,1111                          ;#0046B927: 075 57040000               vu 00 01  1 1029      
    mov [ebp-8] (name),eax                ;#0046B92C: 211105 F8                  uv 00 21  1 1030      
    mov edi,[ebp+20] (prevebp)            ;#0046B92F: 213175 14                  vu 80 20  1 1030      
    mov eax,[edi-24]                      ;#0046B932: 213107 E8                  uv 01 80  1 1033    *80*
    xor ebx,ebx                           ;#0046B935: 061333                     vu 08 08  1 1033      
    cmp eax,h4                            ;#0046B937: 075 00000040               uv 00 01  1 1034      
    jl #0046B948                          ;#0046B93C: 174 0A                     v  00 00  1 1034      
    add dword[ebx+eax*4-8],1              ;#0046B93E: 203104203 F8 01            u  00 09  3 1035      
    cmp eax,1110                          ;#0046B943: 075 56040000               vu 00 01  1 1037      
    mov [ebp-12] (text),eax               ;#0046B948: 211105 F4                  uv 00 21  1 1038      
    mov [ebp+28] (retaddr),#0046B957      ;#0046B94B: 307105 1C 57B94600         vu 00 20  1 1038      
    jmp #0046A62D (code:addtostack)       ;#0046B952: 351 D6ECFFFF               v  00 00  1 1039      
;   481             newprst = lp+1
    mov edi,[ebp-40] (lp)                 ;#0046B957: 213175 D8                  uv 80 20  1 1040      
    add edi,1                             ;#0046B95A: 203307 01                  uv 80 80  1 1041 80   
    mov edx,edi                           ;#0046B95D: 213327                     uv 04 80  1 1042 80   
    mov [ebp-32] (newprst),edi            ;#0046B95F: 211175 E0                  vu 00 A0  1 1042      
    shl edx,1                             ;#0046B962: 321342                     u  04 04  1 1043      
    jno #0046B718                         ;#0046B964: 017201 AEFDFFFF            v  00 00  1 1043      
    lea edi,[ebp-32] (newprst)            ;#0046B96A: 215175 E0                  uv 80 20  1 1044      
    call #00462764 (:%e01tcfAddiii)       ;#0046B96D: 350 F26DFFFF               v  00 00  1 1044      
;   482         end while
    jmp #0046B718                         ;#0046B972: 351 A1FDFFFF               v  00 00  1 1045      
;   483         if newprst!=1 then
    mov esi,[ebp-32] (newprst)            ;#0046B977: 213165 E0                  uv 40 20  1 1046      
    cmp esi,1                             ;#0046B97A: 203376 01                  uv 00 40  1 1047 40   
    je #0046BAAA                          ;#0046B97D: 017204 27010000            v  00 00  1 1047      
;   484             name = sprintf("%s[%d..%d]",{name,newprst,lo})
    lea eax,[ebp-108] (symtab[1136])      ;#0046B983: 215105 94                  uv 01 20  1 1048      
    mov edx,3                             ;#0046B986: 272 03000000               vu 04 00  1 1048      
    push #0046B9B3                        ;#0046B98B: 150 B3B94600               uv 00 00  1 1049      
    push eax                              ;#0046B990: 120                        vu 00 01  1 1049      
    push dword[ebp-36] (lo)               ;#0046B991: 377165 DC                  np 00 20  2 1050      
    push esi                              ;#0046B994: 126                        uv 00 40  1 1052      
    mov ecx,[ebp] (name)                  ;#0046B995: 213115 00                  vu 02 20  1 1052      
    cmp ecx,h4                            ;#0046B998: 201371 00000040            uv 00 02  1 1053      
    jl #0046B9AA                          ;#0046B99E: 174 0A                     v  00 00  1 1053      
    add dword[ebx+ecx*4-8],1              ;#0046B9A0: 203104213 F8 01            u  00 0A  3 1054      
    cmp eax,1104                          ;#0046B9A5: 075 50040000               vu 00 01  1 1056      
    push ecx                              ;#0046B9AA: 121                        uv 00 02  1 1057      
    mov edi,[ebp-108] (symtab[1136])      ;#0046B9AB: 213175 94                  vu 80 20  1 1057      
    jmp #00460143 (:%pMkSq)               ;#0046B9AE: 351 9047FFFF               v  00 00  1 1058      
    mov ecx,2                             ;#0046B9B3: 271 02000000               uv 02 00  1 1059      
    mov edx,210                           ;#0046B9B8: 272 D2000000               vu 04 00  1 1059      
    call #00462C02 (:%opFrame) (sprintf)  ;#0046B9BD: 350 4072FFFF               v  00 00  1 1060      
    mov eax,[#00402528]                   ;#0046B9C2: 241 28254000               uv 01 00  1 1061      
    mov [ebp] (fmt),eax                   ;#0046B9C7: 211105 00                  uv 00 21  1 1062 01   
    add dword[ebx+eax*4-8],1              ;#0046B9CA: 203104203 F8 01            u  00 09  3 1064    *01*
    mov edi,[ebp+20] (prevebp)            ;#0046B9CF: 213175 14                  vu 80 20  1 1066      
    mov eax,[edi-108]                     ;#0046B9D2: 213107 94                  uv 01 80  1 1069    *80*
    mov [edi-108], dword h4               ;#0046B9D5: 307107 94 00000040         vu 00 80  1 1069      
    cmp eax,h4                            ;#0046B9DC: 075 00000040               uv 00 01  1 1070      
    jne #0046B9ED                         ;#0046B9E1: 165 0A                     v  00 00  1 1070      
    mov esi,1136                          ;#0046B9E3: 276 70040000               uv 40 00  1 1071      
    call #00462744 (:%pUnassigned)        ;#0046B9E8: 350 576DFFFF               v  00 00  1 1071      
    mov [ebp-4] (args),eax                ;#0046B9ED: 211105 FC                  uv 00 21  1 1072      
    mov [ebp+28] (retaddr),#0046B9FC      ;#0046B9F0: 307105 1C FCB94600         vu 00 20  1 1072      
    jmp #00454E9A (code:sprintf)          ;#0046B9F7: 351 9E94FEFF               v  00 00  1 1073      
    push eax                              ;#0046B9FC: 120                        uv 00 01  1 1074      
    mov esi,[ebp] (name)                  ;#0046B9FD: 213165 00                  vu 40 20  1 1074      
    cmp esi,h4                            ;#0046BA00: 201376 00000040            uv 00 40  1 1075      
    jle #0046BA16                         ;#0046BA06: 176 0E                     v  00 00  1 1075      
    sub dword[ebx+esi*4-8],1              ;#0046BA08: 203154263 F8 01            u  00 48  3 1076      
    jne #0046BA16                         ;#0046BA0D: 165 07                     v  00 00  1 1078      
    mov edx,esi                           ;#0046BA0F: 213326                     uv 04 40  1 1079      
    call #004639A8 (:%pDealloc)           ;#0046BA11: 350 927FFFFF               v  00 00  1 1079      
    pop dword[ebp] (name)                 ;#0046BA16: 217105 00                  np 00 20  3 1080      
;   485             this = allascii(o[newprst..lo])
    lea edx,[ebp-84] (symtab[1127])       ;#0046BA19: 215125 AC                  uv 04 20  1 1083      
    mov ecx,1                             ;#0046BA1C: 271 01000000               vu 02 00  1 1083      
    push #0046BA3A                        ;#0046BA21: 150 3ABA4600               uv 00 00  1 1084      
    push edx                              ;#0046BA26: 122                        vu 00 04  1 1084      
    push dword[ebp-36] (lo)               ;#0046BA27: 377165 DC                  np 00 20  2 1085      
    push dword[ebp-32] (newprst)          ;#0046BA2A: 377165 E0                  np 00 20  2 1087      
    mov esi,[ebp-16] (o)                  ;#0046BA2D: 213165 F0                  uv 40 20  1 1089      
    mov edx,1108                          ;#0046BA30: 272 54040000               vu 04 00  1 1089      
    jmp #00460A75 (:%pSubss)              ;#0046BA35: 351 3B50FFFF               v  00 00  1 1090      
    mov ecx,10                            ;#0046BA3A: 271 0A000000               uv 02 00  1 1091      
    mov edx,1087                          ;#0046BA3F: 272 3F040000               vu 04 00  1 1091      
    call :%opFrame (allascii)             ;#0046BA44: 350 B971FFFF               v  00 00  1 1092      
    mov edi,[ebp+20] (prevebp)            ;#0046BA49: 213175 14                  uv 80 20  1 1093      
    mov eax,[edi-84]                      ;#0046BA4C: 213107 AC                  uv 01 80  1 1096 80 *80*
    mov [edi-84], dword h4                ;#0046BA4F: 307107 AC 00000040         vu 00 80  1 1096      
    cmp eax,h4                            ;#0046BA56: 075 00000040               uv 00 01  1 1097      
    jne #0046BA67                         ;#0046BA5B: 165 0A                     v  00 00  1 1097      
    mov esi,1127                          ;#0046BA5D: 276 67040000               uv 40 00  1 1098      
    call #00462744 (:%pUnassigned)        ;#0046BA62: 350 DD6CFFFF               v  00 00  1 1098      
    mov [ebp] (x),eax                     ;#0046BA67: 211105 00                  uv 00 21  1 1099      
    mov [ebp+28] (retaddr),#0046BA76      ;#0046BA6A: 307105 1C 76BA4600         vu 00 20  1 1099      
    jmp #0046BEAD (code:allascii)         ;#0046BA71: 351 37040000               v  00 00  1 1100      
    push eax                              ;#0046BA76: 120                        uv 00 01  1 1101      
    mov ecx,[ebp-24] (this)               ;#0046BA77: 213115 E8                  vu 02 20  1 1101      
    cmp ecx,h4                            ;#0046BA7A: 201371 00000040            uv 00 02  1 1102      
    jle #0046BA90                         ;#0046BA80: 176 0E                     v  00 00  1 1102      
    sub dword[ebx+ecx*4-8],1              ;#0046BA82: 203154213 F8 01            u  00 0A  3 1103      
    jne #0046BA90                         ;#0046BA87: 165 07                     v  00 00  1 1105      
    mov edx,ecx                           ;#0046BA89: 213321                     uv 04 02  1 1106      
    call #004639A8 (:%pDealloc)           ;#0046BA8B: 350 187FFFFF               v  00 00  1 1106      
    pop dword[ebp-24] (this)              ;#0046BA90: 217105 E8                  np 00 20  3 1107      
;   486             if dotdot then
    mov edi,[ebp-48] (dotdot)             ;#0046BA93: 213175 D0                  uv 80 20  1 1110      
    test edi,edi                          ;#0046BA96: 205377                     uv 00 80  1 1111 80   
    je #0046BAAA                          ;#0046BA98: 164 10                     v  00 00  1 1111      
;   487                 this &= ".."
    lea edx,[ebp-24] (this)               ;#0046BA9A: 215125 E8                  uv 04 20  1 1112      
    lea edi,[ebp-24] (this)               ;#0046BA9D: 215175 E8                  vu 80 20  1 1112      
    mov ecx,#00402550                     ;#0046BAA0: 271 50254000               uv 02 00  1 1113      
    call #0045FD65 (:%opConcat)           ;#0046BAA5: 350 BB42FFFF               v  00 00  1 1113      
;   488             end if
;   489         end if
;   490         addtostack(idii,newprst,name,this)
    mov ecx,5                             ;#0046BAAA: 271 05000000               uv 02 00  1 1114      
    mov edx,1068                          ;#0046BAAF: 272 2C040000               vu 04 00  1 1114      
    call :%opFrame (addtostack)           ;#0046BAB4: 350 4971FFFF               v  00 00  1 1115      
    mov edi,[ebp+20] (prevebp)            ;#0046BAB9: 213175 14                  uv 80 20  1 1116      
    mov eax,[edi-20]                      ;#0046BABC: 213107 EC                  uv 01 80  1 1119 80 *80*
    xor ebx,ebx                           ;#0046BABF: 061333                     vu 08 08  1 1119      
    cmp eax,h4                            ;#0046BAC1: 075 00000040               uv 00 01  1 1120      
    jl #0046BAD2                          ;#0046BAC6: 174 0A                     v  00 00  1 1120      
    add dword[ebx+eax*4-8],1              ;#0046BAC8: 203104203 F8 01            u  00 09  3 1121      
    cmp eax,1109                          ;#0046BACD: 075 55040000               vu 00 01  1 1123      
    mov [ebp] (idii),eax                  ;#0046BAD2: 211105 00                  uv 00 21  1 1124      
    mov edi,[ebp+20] (prevebp)            ;#0046BAD5: 213175 14                  vu 80 20  1 1124      
    mov eax,[edi-32]                      ;#0046BAD8: 213107 E0                  uv 01 80  1 1127    *80*
    mov [ebp-4] (idxr),eax                ;#0046BADB: 211105 FC                  uv 00 21  1 1128 01   
    mov edi,[ebp+20] (prevebp)            ;#0046BADE: 213175 14                  vu 80 20  1 1128      
    mov eax,[edi]                         ;#0046BAE1: 213007                     uv 01 80  1 1131    *80*
    xor ebx,ebx                           ;#0046BAE3: 061333                     vu 08 08  1 1131      
    cmp eax,h4                            ;#0046BAE5: 075 00000040               uv 00 01  1 1132      
    jl #0046BAF6                          ;#0046BAEA: 174 0A                     v  00 00  1 1132      
    add dword[ebx+eax*4-8],1              ;#0046BAEC: 203104203 F8 01            u  00 09  3 1133      
    cmp eax,1104                          ;#0046BAF1: 075 50040000               vu 00 01  1 1135      
    mov [ebp-8] (name),eax                ;#0046BAF6: 211105 F8                  uv 00 21  1 1136      
    mov edi,[ebp+20] (prevebp)            ;#0046BAF9: 213175 14                  vu 80 20  1 1136      
    mov eax,[edi-24]                      ;#0046BAFC: 213107 E8                  uv 01 80  1 1139    *80*
    xor ebx,ebx                           ;#0046BAFF: 061333                     vu 08 08  1 1139      
    cmp eax,h4                            ;#0046BB01: 075 00000040               uv 00 01  1 1140      
    jl #0046BB12                          ;#0046BB06: 174 0A                     v  00 00  1 1140      
    add dword[ebx+eax*4-8],1              ;#0046BB08: 203104203 F8 01            u  00 09  3 1141      
    cmp eax,1110                          ;#0046BB0D: 075 56040000               vu 00 01  1 1143      
    mov [ebp-12] (text),eax               ;#0046BB12: 211105 F4                  uv 00 21  1 1144      
    mov [ebp+28] (retaddr),#0046BB21      ;#0046BB15: 307105 1C 21BB4600         vu 00 20  1 1144      
    jmp #0046A62D (code:addtostack)       ;#0046BB1C: 351 0CEBFFFF               v  00 00  1 1145      
;   491         return {prdx+1,""}
    lea edi,[ebp-92] (symtab[1129])       ;#0046BB21: 215175 A4                  uv 80 20  1 1146      
    mov ecx,[ebp-12] (prdx)               ;#0046BB24: 213115 F4                  vu 02 20  1 1146      
    mov eax,[#0040201C]                   ;#0046BB27: 241 1C204000               uv 01 00  1 1147      
    call #0045F261 (:%opAdd)              ;#0046BB2C: 350 3037FFFF               v  00 00  1 1147      
    lea eax,[ebp-108] (symtab[1136])      ;#0046BB31: 215105 94                  uv 01 20  1 1148      
    mov edx,2                             ;#0046BB34: 272 02000000               vu 04 00  1 1148      
    push #0046BB63                        ;#0046BB39: 150 63BB4600               uv 00 00  1 1149      
    push eax                              ;#0046BB3E: 120                        vu 00 01  1 1149      
    mov esi,[#004022A4]                   ;#0046BB3F: 213065 A4224000            uv 40 00  1 1150      
    cmp esi,h4                            ;#0046BB45: 201376 00000040            uv 00 40  1 1151 40   
    jl #0046BB57                          ;#0046BB4B: 174 0A                     v  00 00  1 1151      
    add dword[ebx+esi*4-8],1              ;#0046BB4D: 203104263 F8 01            u  00 48  3 1152      
    cmp eax,628                           ;#0046BB52: 075 74020000               vu 00 01  1 1154      
    push esi                              ;#0046BB57: 126                        uv 00 40  1 1155      
    push dword[ebp-92] (symtab[1129])     ;#0046BB58: 377165 A4                  np 00 20  2 1156      
    mov edi,[ebp-108] (symtab[1136])      ;#0046BB5B: 213175 94                  uv 80 20  1 1158      
    jmp #00460143 (:%pMkSq)               ;#0046BB5E: 351 E045FFFF               v  00 00  1 1158      
    mov eax,[ebp-108] (symtab[1136])      ;#0046BB63: 213105 94                  uv 01 20  1 1159      
    mov [ebp-108] (symtab[1136]),ebx      ;#0046BB66: 211135 94                  vu 00 28  1 1159      
    jmp #00462C8F (:%opRetf)              ;#0046BB69: 351 2171FFFF               v  00 00  1 1160      
;   492 #ilASM{ ::badtypebyte }
;   493         show_corruption(CTB)
    mov ecx,8                             ;#0046BB6E: 271 08000000               uv 02 00  1 1161      
    mov edx,921                           ;#0046BB73: 272 99030000               vu 04 00  1 1161      
    call :%opFrame (show_corruption)      ;#0046BB78: 350 8570FFFF               v  00 00  1 1162      
    mov ecx,[#00402434] (CTB)             ;#0046BB7D: 213015 34244000            uv 02 00  1 1163      
    mov [ebp] (msg),ecx                   ;#0046BB83: 211115 00                  uv 00 22  1 1164 02   
    add dword[ebx+ecx*4-8],1              ;#0046BB86: 203104213 F8 01            u  00 0A  3 1166    *02*
    mov [ebp+28] (retaddr),#0046BB97      ;#0046BB8B: 307105 1C 97BB4600         vu 00 20  1 1168      
    jmp #0046BBD1 (code:show_corruption)  ;#0046BB92: 351 3A000000               v  00 00  1 1169      
;   494     end if
;   495     return {prdx,this}
    lea eax,[ebp-108] (symtab[1136])      ;#0046BB97: 215105 94                  uv 01 20  1 1170      
    mov edx,2                             ;#0046BB9A: 272 02000000               vu 04 00  1 1170      
    push #0046BBC6                        ;#0046BB9F: 150 C6BB4600               uv 00 00  1 1171      
    push eax                              ;#0046BBA4: 120                        vu 00 01  1 1171      
    mov esi,[ebp-24] (this)               ;#0046BBA5: 213165 E8                  uv 40 20  1 1172      
    cmp esi,h4                            ;#0046BBA8: 201376 00000040            uv 00 40  1 1173 40   
    jl #0046BBBA                          ;#0046BBAE: 174 0A                     v  00 00  1 1173      
    add dword[ebx+esi*4-8],1              ;#0046BBB0: 203104263 F8 01            u  00 48  3 1174      
    cmp eax,1110                          ;#0046BBB5: 075 56040000               vu 00 01  1 1176      
    push esi                              ;#0046BBBA: 126                        uv 00 40  1 1177      
    push dword[ebp-12] (prdx)             ;#0046BBBB: 377165 F4                  np 00 20  2 1178      
    mov edi,[ebp-108] (symtab[1136])      ;#0046BBBE: 213175 94                  uv 80 20  1 1180      
    jmp #00460143 (:%pMkSq)               ;#0046BBC1: 351 7D45FFFF               v  00 00  1 1180      
    mov eax,[ebp-108] (symtab[1136])      ;#0046BBC6: 213105 94                  uv 01 20  1 1181      
    mov [ebp-108] (symtab[1136]),ebx      ;#0046BBC9: 211135 94                  vu 00 28  1 1181      
    jmp #00462C8F (:%opRetf)              ;#0046BBCC: 351 BE70FFFF               v  00 00  1 1182      
;   496 end function
;   497 
;   498 procedure clever_dump(string name, object o)
    mov esi,[ebp] (name)                  ;#0046A255: 213165 00                  uv 40 20  1   1      
    cmp esi,h4                            ;#0046A258: 201376 00000040            uv 00 40  1   2 40   
    jl #0046A267                          ;#0046A25E: 174 07                     v  00 00  1   2      
    cmp byte[ebx+esi*4-1],#82             ;#0046A260: 200174263 FF 82            u  00 48  2   3      
    je #0046A271                          ;#0046A265: 164 0A                     v  00 00  1   4      
    mov ecx,1138                          ;#0046A267: 271 72040000               uv 02 00  1   5      
    call #00462D8D (:%opTcFail)           ;#0046A26C: 350 1C8BFFFF               v  00 00  1   5      
;   499 --
;   500 -- Display "name = sprint(o)" but with indexes 
;   501 -- as needed, together with smart line splitting.
;   502 --
;   503 integer prst
;   504 string s
;   505     if OLDSTYLE then
;   506         printf(fn,"    %s = %s\n",{name,ppExf(o,{pp_Indent,length(name)+7})})
;   507 if diagdiag then
;   508         printf(1,"    %s = %s\n",{name,ppExf(o,{pp_Indent,length(name)+7})})
;   509 end if
;   510     else
;   511 --      printstack = {}
;   512         printstack = repeat(0,0)
    mov ecx,12                            ;#0046A271: 271 0C000000               uv 02 00  1   6      
    mov edx,240                           ;#0046A276: 272 F0000000               vu 04 00  1   6      
    call #00462C02 (:%opFrame) (repeat)   ;#0046A27B: 350 8289FFFF               v  00 00  1   7      
    mov [ebp] (x),ebx                     ;#0046A280: 211135 00                  uv 00 28  1   8      
    mov [ebp-4] (n),ebx                   ;#0046A283: 211135 FC                  vu 00 28  1   8      
    mov [ebp+28] (retaddr),#0046A292      ;#0046A286: 307105 1C 92A24600         uv 00 20  1   9      
    jmp #00451195 (code:repeat)           ;#0046A28D: 351 036FFEFF               v  00 00  1   9      
    push eax                              ;#0046A292: 120                        uv 00 01  1  10      
    mov ecx,[#00402520] (printstack)      ;#0046A293: 213015 20254000            vu 02 00  1  10      
    cmp ecx,h4                            ;#0046A299: 201371 00000040            uv 00 02  1  11      
    jle #0046A2AF                         ;#0046A29F: 176 0E                     v  00 00  1  11      
    sub dword[ebx+ecx*4-8],1              ;#0046A2A1: 203154213 F8 01            u  00 0A  3  12      
    jne #0046A2AF                         ;#0046A2A6: 165 07                     v  00 00  1  14      
    mov edx,ecx                           ;#0046A2A8: 213321                     uv 04 02  1  15      
    call #004639A8 (:%pDealloc)           ;#0046A2AA: 350 F996FFFF               v  00 00  1  15      
    pop [#00402520] (printstack)          ;#0046A2AF: 217005 20254000            np 00 00  3  16      
;   513 --4/2/21:
;   514 cdi_varname = name
    mov edi,[ebp] (name)                  ;#0046A2B5: 213175 00                  uv 80 20  1  19      
    mov edx,[#00402544] (cdi_varname)     ;#0046A2B8: 213025 44254000            vu 04 00  1  19      
    cmp edi,h4                            ;#0046A2BE: 201377 00000040            uv 00 80  1  20      
    jl #0046A2CB                          ;#0046A2C4: 174 05                     v  00 00  1  20      
    add dword[ebx+edi*4-8],1              ;#0046A2C6: 203104273 F8 01            u  00 88  3  21      
    mov [#00402544] (cdi_varname),edi     ;#0046A2CB: 211075 44254000            vu 00 80  1  23      
    cmp edx,h4                            ;#0046A2D1: 201372 00000040            uv 00 04  1  24      
    jle #0046A2E5                         ;#0046A2D7: 176 0C                     v  00 00  1  24      
    sub dword[ebx+edx*4-8],1              ;#0046A2D9: 203154223 F8 01            u  00 0C  3  25      
    jne #0046A2E5                         ;#0046A2DE: 165 05                     v  00 00  1  27      
    call #004639A8 (:%pDealloc)           ;#0046A2E0: 350 C396FFFF               v  00 00  1  28      
;   515         {prst,s} = cdi(name,"",1,-1,o,{})
    lea eax,[ebp-20] (symtab[1143])       ;#0046A2E5: 215105 EC                  uv 01 20  1  29      
    mov edx,0                             ;#0046A2E8: 272 00000000               vu 04 00  1  29      
    push #0046A2FB                        ;#0046A2ED: 150 FBA24600               uv 00 00  1  30      
    push eax                              ;#0046A2F2: 120                        vu 00 01  1  30      
    mov edi,[ebp-20] (symtab[1143])       ;#0046A2F3: 213175 EC                  uv 80 20  1  31      
    jmp #00460143 (:%pMkSq)               ;#0046A2F6: 351 485EFFFF               v  00 00  1  31      
    mov ecx,28                            ;#0046A2FB: 271 1C000000               uv 02 00  1  32      
    mov edx,1103                          ;#0046A300: 272 4F040000               vu 04 00  1  32      
    call #00462C02 (:%opFrame) (cdi)      ;#0046A305: 350 F888FFFF               v  00 00  1  33      
    mov edi,[ebp+20] (prevebp)            ;#0046A30A: 213175 14                  uv 80 20  1  34      
    mov eax,[edi]                         ;#0046A30D: 213007                     uv 01 80  1  37 80 *80*
    xor ebx,ebx                           ;#0046A30F: 061333                     vu 08 08  1  37      
    cmp eax,h4                            ;#0046A311: 075 00000040               uv 00 01  1  38      
    jl #0046A322                          ;#0046A316: 174 0A                     v  00 00  1  38      
    add dword[ebx+eax*4-8],1              ;#0046A318: 203104203 F8 01            u  00 09  3  39      
    cmp eax,1138                          ;#0046A31D: 075 72040000               vu 00 01  1  41      
    mov [ebp] (name),eax                  ;#0046A322: 211105 00                  uv 00 21  1  42      
    mov esi,[#004022A4]                   ;#0046A325: 213065 A4224000            vu 40 00  1  42      
    mov [ebp-4] (prev),esi                ;#0046A32B: 211165 FC                  uv 00 60  1  43      
    add dword[ebx+esi*4-8],1              ;#0046A32E: 203104263 F8 01            u  00 48  3  45    *40*
    mov [ebp-8] (prst), dword 1           ;#0046A333: 307105 F8 01000000         vu 00 20  1  47      
    mov [ebp-12] (prdx), dword -1         ;#0046A33A: 307105 F4 FFFFFFFF         uv 00 20  1  48      
    mov edi,[ebp+20] (prevebp)            ;#0046A341: 213175 14                  vu 80 20  1  48      
    mov eax,[edi-4]                       ;#0046A344: 213107 FC                  uv 01 80  1  51    *80*
    xor ebx,ebx                           ;#0046A347: 061333                     vu 08 08  1  51      
    cmp eax,h4                            ;#0046A349: 075 00000040               uv 00 01  1  52      
    jl #0046A35A                          ;#0046A34E: 174 0A                     v  00 00  1  52      
    add dword[ebx+eax*4-8],1              ;#0046A350: 203104203 F8 01            u  00 09  3  53      
    cmp eax,1139                          ;#0046A355: 075 73040000               vu 00 01  1  55      
    mov [ebp-16] (o),eax                  ;#0046A35A: 211105 F0                  uv 00 21  1  56      
    mov edi,[ebp+20] (prevebp)            ;#0046A35D: 213175 14                  vu 80 20  1  56      
    mov eax,[edi-20]                      ;#0046A360: 213107 EC                  uv 01 80  1  59    *80*
    mov [edi-20], dword h4                ;#0046A363: 307107 EC 00000040         vu 00 80  1  59      
    cmp eax,h4                            ;#0046A36A: 075 00000040               uv 00 01  1  60      
    jne #0046A37B                         ;#0046A36F: 165 0A                     v  00 00  1  60      
    mov esi,1143                          ;#0046A371: 276 77040000               uv 40 00  1  61      
    call #00462744 (:%pUnassigned)        ;#0046A376: 350 C983FFFF               v  00 00  1  61      
    mov [ebp-20] (idii),eax               ;#0046A37B: 211105 EC                  uv 00 21  1  62      
    mov [ebp+28] (retaddr),#0046A38A      ;#0046A37E: 307105 1C 8AA34600         vu 00 20  1  62      
    jmp #0046A78B (code:cdi)              ;#0046A385: 351 01040000               v  00 00  1  63      
    push eax                              ;#0046A38A: 120                        uv 00 01  1  64      
    mov ecx,[ebp-20] (symtab[1143])       ;#0046A38B: 213115 EC                  vu 02 20  1  64      
    cmp ecx,h4                            ;#0046A38E: 201371 00000040            uv 00 02  1  65      
    jle #0046A3A4                         ;#0046A394: 176 0E                     v  00 00  1  65      
    sub dword[ebx+ecx*4-8],1              ;#0046A396: 203154213 F8 01            u  00 0A  3  66      
    jne #0046A3A4                         ;#0046A39B: 165 07                     v  00 00  1  68      
    mov edx,ecx                           ;#0046A39D: 213321                     uv 04 02  1  69      
    call #004639A8 (:%pDealloc)           ;#0046A39F: 350 0496FFFF               v  00 00  1  69      
    pop dword[ebp-20] (symtab[1143])      ;#0046A3A4: 217105 EC                  np 00 20  3  70      
    mov edi,2                             ;#0046A3A7: 277 02000000               uv 80 00  1  73      
    lea ecx,[ebp-12] (s)                  ;#0046A3AC: 215115 F4                  vu 02 20  1  73      
    mov esi,[ebp-20] (symtab[1143])       ;#0046A3AF: 213165 EC                  uv 40 20  1  74      
    mov edx,1143                          ;#0046A3B2: 272 77040000               vu 04 00  1  74      
    mov al,0                              ;#0046A3B7: 260 00                     uv 01 00  1  75      
    call #00460FE5 (:%pSubse1)            ;#0046A3B9: 350 276CFFFF               v  00 00  1  75      
    mov edi,[ebp-12] (s)                  ;#0046A3BE: 213175 F4                  uv 80 20  1  76      
    cmp edi,h4                            ;#0046A3C1: 201377 00000040            uv 00 80  1  77 80   
    jl #0046A3D0                          ;#0046A3C7: 174 07                     v  00 00  1  77      
    cmp byte[ebx+edi*4-1],#82             ;#0046A3C9: 200174273 FF 82            u  00 88  2  78      
    je #0046A3DA                          ;#0046A3CE: 164 0A                     v  00 00  1  79      
    mov ecx,1141                          ;#0046A3D0: 271 75040000               uv 02 00  1  80      
    call #00462D8D (:%opTcFail)           ;#0046A3D5: 350 B389FFFF               v  00 00  1  80      
    mov edi,1                             ;#0046A3DA: 277 01000000               uv 80 00  1  81      
    lea ecx,[ebp-8] (prst)                ;#0046A3DF: 215115 F8                  vu 02 20  1  81      
    mov esi,[ebp-20] (symtab[1143])       ;#0046A3E2: 213165 EC                  uv 40 20  1  82      
    mov edx,1143                          ;#0046A3E5: 272 77040000               vu 04 00  1  82      
    call #0046106B (:%pSubse1i)           ;#0046A3EA: 350 7C6CFFFF               v  00 00  1  83      
    cmp eax,h4                            ;#0046A3EF: 075 00000040               uv 00 01  1  84      
    jl #0046A400                          ;#0046A3F4: 174 0A                     v  00 00  1  84      
    mov ecx,1140                          ;#0046A3F6: 271 74040000               uv 02 00  1  85      
    call #00462D8D (:%opTcFail)           ;#0046A3FB: 350 8D89FFFF               v  00 00  1  85      
    mov edx,[ebp-20] (symtab[1143])       ;#0046A400: 213125 EC                  uv 04 20  1  86      
    cmp edx,h4                            ;#0046A403: 201372 00000040            uv 00 04  1  87 04   
    mov [ebp-20] (symtab[1143]),ebx       ;#0046A409: 211135 EC                  vu 00 28  1  87      
    jle #0046A41A                         ;#0046A40C: 176 0C                     v  00 00  1  88      
    sub dword[ebx+edx*4-8],1              ;#0046A40E: 203154223 F8 01            u  00 0C  3  89      
    jne #0046A41A                         ;#0046A413: 165 05                     v  00 00  1  91      
    call #004639A8 (:%pDealloc)           ;#0046A415: 350 8E95FFFF               v  00 00  1  92      
;   516         if length(s) then
    mov ecx,[ebp-12] (s)                  ;#0046A41A: 213115 F4                  uv 02 20  1  93      
    mov edi,[ebx+ecx*4-12]                ;#0046A41D: 213174213 F4               uv 80 0A  1  96 02 *02*
    test edi,edi                          ;#0046A421: 205377                     uv 00 80  1  97 80   
    je #0046A4BE                          ;#0046A423: 017204 95000000            v  00 00  1  97      
;   517             addtostack({prst},prst,name,s)
    lea eax,[ebp-24] (symtab[1144])       ;#0046A429: 215105 E8                  uv 01 20  1  98      
    mov edx,1                             ;#0046A42C: 272 01000000               vu 04 00  1  98      
    push #0046A442                        ;#0046A431: 150 42A44600               uv 00 00  1  99      
    push eax                              ;#0046A436: 120                        vu 00 01  1  99      
    push dword[ebp-8] (prst)              ;#0046A437: 377165 F8                  np 00 20  2 100      
    mov edi,[ebp-24] (symtab[1144])       ;#0046A43A: 213175 E8                  uv 80 20  1 102      
    jmp #00460143 (:%pMkSq)               ;#0046A43D: 351 015DFFFF               v  00 00  1 102      
    mov ecx,5                             ;#0046A442: 271 05000000               uv 02 00  1 103      
    mov edx,1068                          ;#0046A447: 272 2C040000               vu 04 00  1 103      
    call :%opFrame (addtostack)           ;#0046A44C: 350 B187FFFF               v  00 00  1 104      
    mov edi,[ebp+20] (prevebp)            ;#0046A451: 213175 14                  uv 80 20  1 105      
    mov eax,[edi-24]                      ;#0046A454: 213107 E8                  uv 01 80  1 108 80 *80*
    mov [edi-24], dword h4                ;#0046A457: 307107 E8 00000040         vu 00 80  1 108      
    cmp eax,h4                            ;#0046A45E: 075 00000040               uv 00 01  1 109      
    jne #0046A46F                         ;#0046A463: 165 0A                     v  00 00  1 109      
    mov esi,1144                          ;#0046A465: 276 78040000               uv 40 00  1 110      
    call #00462744 (:%pUnassigned)        ;#0046A46A: 350 D582FFFF               v  00 00  1 110      
    mov [ebp] (idii),eax                  ;#0046A46F: 211105 00                  uv 00 21  1 111      
    mov edi,[ebp+20] (prevebp)            ;#0046A472: 213175 14                  vu 80 20  1 111      
    mov eax,[edi-8]                       ;#0046A475: 213107 F8                  uv 01 80  1 114    *80*
    mov [ebp-4] (idxr),eax                ;#0046A478: 211105 FC                  uv 00 21  1 115 01   
    mov edi,[ebp+20] (prevebp)            ;#0046A47B: 213175 14                  vu 80 20  1 115      
    mov eax,[edi]                         ;#0046A47E: 213007                     uv 01 80  1 118    *80*
    xor ebx,ebx                           ;#0046A480: 061333                     vu 08 08  1 118      
    cmp eax,h4                            ;#0046A482: 075 00000040               uv 00 01  1 119      
    jl #0046A493                          ;#0046A487: 174 0A                     v  00 00  1 119      
    add dword[ebx+eax*4-8],1              ;#0046A489: 203104203 F8 01            u  00 09  3 120      
    cmp eax,1138                          ;#0046A48E: 075 72040000               vu 00 01  1 122      
    mov [ebp-8] (name),eax                ;#0046A493: 211105 F8                  uv 00 21  1 123      
    mov edi,[ebp+20] (prevebp)            ;#0046A496: 213175 14                  vu 80 20  1 123      
    mov eax,[edi-12]                      ;#0046A499: 213107 F4                  uv 01 80  1 126    *80*
    xor ebx,ebx                           ;#0046A49C: 061333                     vu 08 08  1 126      
    cmp eax,h4                            ;#0046A49E: 075 00000040               uv 00 01  1 127      
    jl #0046A4AF                          ;#0046A4A3: 174 0A                     v  00 00  1 127      
    add dword[ebx+eax*4-8],1              ;#0046A4A5: 203104203 F8 01            u  00 09  3 128      
    cmp eax,1141                          ;#0046A4AA: 075 75040000               vu 00 01  1 130      
    mov [ebp-12] (text),eax               ;#0046A4AF: 211105 F4                  uv 00 21  1 131      
    mov [ebp+28] (retaddr),#0046A4BE      ;#0046A4B2: 307105 1C BEA44600         vu 00 20  1 131      
    jmp #0046A62D (code:addtostack)       ;#0046A4B9: 351 6F010000               v  00 00  1 132      
;   518         end if
;   519 --/* ah... it must be local!
;   520 --DEV erm...
;   521         printstack = deep_copy(printstack)
;   522 if length(printstack)>1 then
;   523 sequence dbg = repeat("pDiagN.e",1)
;   524 dbg = sort(dbg)
;   525         printstack = sort(printstack)
;   526 end if
;   527         for i=1 to length(printstack) do
;   528             printf(fn,"    %s = %s\n",printstack[i][2..3])
;   529         end for
;   530 --*/
;   531         if length(printstack) then
    mov esi,[#00402520] (printstack)      ;#0046A4BE: 213065 20254000            uv 40 00  1 133      
    mov ecx,[ebx+esi*4-12]                ;#0046A4C4: 213114263 F4               uv 02 48  1 136 40 *40*
    test ecx,ecx                          ;#0046A4C8: 205311                     uv 00 02  1 137 02   
    je #0046A628                          ;#0046A4CA: 017204 58010000            v  00 00  1 137      
;   532             sequence l_printstack = deep_copy(printstack)
    mov ecx,8                             ;#0046A4D0: 271 08000000               uv 02 00  1 138      
    mov edx,266                           ;#0046A4D5: 272 0A010000               vu 04 00  1 138      
    call :%opFrame (deep_copy)            ;#0046A4DA: 350 2387FFFF               v  00 00  1 139      
    mov edi,[#00402520] (printstack)      ;#0046A4DF: 213075 20254000            uv 80 00  1 140      
    mov [ebp] (o),edi                     ;#0046A4E5: 211175 00                  uv 00 A0  1 141 80   
    add dword[ebx+edi*4-8],1              ;#0046A4E8: 203104273 F8 01            u  00 88  3 143    *80*
    mov [ebp+28] (retaddr),#0046A4F9      ;#0046A4ED: 307105 1C F9A44600         vu 00 20  1 145      
    jmp #0044FA59 (code:deep_copy)        ;#0046A4F4: 351 6055FEFF               v  00 00  1 146      
    mov [ebp-28] (l_printstack),eax       ;#0046A4F9: 211105 E4                  uv 00 21  1 147      
    cmp eax,h4                            ;#0046A4FC: 075 00000040               vu 00 01  1 147      
    jl #0046A50A                          ;#0046A501: 174 07                     v  00 00  1 148      
    test byte[ebx+eax*4-1],#80            ;#0046A503: 366104203 FF 80            u  00 09  2 149      
    jne #0046A514                         ;#0046A508: 165 0A                     v  00 00  1 150      
    mov ecx,1145                          ;#0046A50A: 271 79040000               uv 02 00  1 151      
    call #00462D8D (:%opTcFail)           ;#0046A50F: 350 7988FFFF               v  00 00  1 151      
;   533 --29/6/21:
;   534 --          l_printstack = deep_copy(l_printstack)
;   535             l_printstack = sort(l_printstack)
    mov ecx,13                            ;#0046A514: 271 0D000000               uv 02 00  1 152      
    mov edx,244                           ;#0046A519: 272 F4000000               vu 04 00  1 152      
    call #00462C02 (:%opFrame) (sort)     ;#0046A51E: 350 DF86FFFF               v  00 00  1 153      
    mov edi,[ebp+20] (prevebp)            ;#0046A523: 213175 14                  uv 80 20  1 154      
    mov eax,[edi-28]                      ;#0046A526: 213107 E4                  uv 01 80  1 157 80 *80*
    mov [edi-28], dword h4                ;#0046A529: 307107 E4 00000040         vu 00 80  1 157      
    cmp eax,h4                            ;#0046A530: 075 00000040               uv 00 01  1 158      
    jne #0046A541                         ;#0046A535: 165 0A                     v  00 00  1 158      
    mov esi,1145                          ;#0046A537: 276 79040000               uv 40 00  1 159      
    call #00462744 (:%pUnassigned)        ;#0046A53C: 350 0382FFFF               v  00 00  1 159      
    mov [ebp] (x),eax                     ;#0046A541: 211105 00                  uv 00 21  1 160      
    mov [ebp+28] (retaddr),#0046A550      ;#0046A544: 307105 1C 50A54600         vu 00 20  1 160      
    jmp #00450DFF (code:sort)             ;#0046A54B: 351 AF68FEFF               v  00 00  1 161      
    push eax                              ;#0046A550: 120                        uv 00 01  1 162      
    mov esi,[ebp-28] (l_printstack)       ;#0046A551: 213165 E4                  vu 40 20  1 162      
    cmp esi,h4                            ;#0046A554: 201376 00000040            uv 00 40  1 163      
    jle #0046A56A                         ;#0046A55A: 176 0E                     v  00 00  1 163      
    sub dword[ebx+esi*4-8],1              ;#0046A55C: 203154263 F8 01            u  00 48  3 164      
    jne #0046A56A                         ;#0046A561: 165 07                     v  00 00  1 166      
    mov edx,esi                           ;#0046A563: 213326                     uv 04 40  1 167      
    call #004639A8 (:%pDealloc)           ;#0046A565: 350 3E94FFFF               v  00 00  1 167      
    pop dword[ebp-28] (l_printstack)      ;#0046A56A: 217105 E4                  np 00 20  3 168      
;   536             for i=1 to length(l_printstack) do
    mov ecx,[ebp-28] (l_printstack)       ;#0046A56D: 213115 E4                  uv 02 20  1 171      
    mov edi,[ebx+ecx*4-12]                ;#0046A570: 213174213 F4               uv 80 0A  1 174 02 *02*
    mov [ebp-32] (symtab[1146]),edi       ;#0046A574: 211175 E0                  uv 00 A0  1 175 80   
    mov [ebp-36] (i), dword 1             ;#0046A577: 307105 DC 01000000         vu 00 20  1 175      
    cmp edi,1                             ;#0046A57E: 201377 01000000            uv 00 80  1 176      
    jl #0046A628                          ;#0046A584: 017214 9E000000            v  00 00  1 176      
;   537                 printf(fn,"    %s = %s\n",l_printstack[i][2..3])
    lea edx,[ebp-16] (symtab[1142])       ;#0046A58A: 215125 F0                  uv 04 20  1 177      
    mov ecx,2                             ;#0046A58D: 271 02000000               vu 02 00  1 177      
    push #0046A5AC                        ;#0046A592: 150 ACA54600               uv 00 00  1 178      
    push edx                              ;#0046A597: 122                        vu 00 04  1 178      
    push 3                                ;#0046A598: 152 03                     uv 00 00  1 179      
    push 2                                ;#0046A59A: 152 02                     vu 00 00  1 179      
    push dword[ebp-36] (i)                ;#0046A59C: 377165 DC                  np 00 20  2 180      
    mov esi,[ebp-28] (l_printstack)       ;#0046A59F: 213165 E4                  uv 40 20  1 182      
    mov edx,1145                          ;#0046A5A2: 272 79040000               vu 04 00  1 182      
    jmp #00460A75 (:%pSubss)              ;#0046A5A7: 351 C964FFFF               v  00 00  1 183      
    mov ecx,9                             ;#0046A5AC: 271 09000000               uv 02 00  1 184      
    mov edx,400                           ;#0046A5B1: 272 90010000               vu 04 00  1 184      
    call #00462C02 (:%opFrame) (printf)   ;#0046A5B6: 350 4786FFFF               v  00 00  1 185      
    mov eax,[#00402510] (fn)              ;#0046A5BB: 241 10254000               uv 01 00  1 186      
    mov [ebp] (fn),eax                    ;#0046A5C0: 211105 00                  uv 00 21  1 187 01   
    cmp eax,h4                            ;#0046A5C3: 075 00000040               vu 00 01  1 187      
    jne #0046A5D9                         ;#0046A5C8: 165 0F                     v  00 00  1 188      
    mov esi,1063                          ;#0046A5CA: 276 27040000               uv 40 00  1 189      
    mov edi,741                           ;#0046A5CF: 277 E5020000               vu 80 00  1 189      
    call #00462744 (:%pUnassigned)        ;#0046A5D4: 350 6B81FFFF               v  00 00  1 190      
    mov ecx,[#0040255C]                   ;#0046A5D9: 213015 5C254000            uv 02 00  1 191      
    mov [ebp-4] (fmt),ecx                 ;#0046A5DF: 211115 FC                  uv 00 22  1 192 02   
    add dword[ebx+ecx*4-8],1              ;#0046A5E2: 203104213 F8 01            u  00 0A  3 194    *02*
    mov edi,[ebp+20] (prevebp)            ;#0046A5E7: 213175 14                  vu 80 20  1 196      
    mov eax,[edi-16]                      ;#0046A5EA: 213107 F0                  uv 01 80  1 199    *80*
    mov [edi-16], dword h4                ;#0046A5ED: 307107 F0 00000040         vu 00 80  1 199      
    cmp eax,h4                            ;#0046A5F4: 075 00000040               uv 00 01  1 200      
    jne #0046A605                         ;#0046A5F9: 165 0A                     v  00 00  1 200      
    mov esi,1142                          ;#0046A5FB: 276 76040000               uv 40 00  1 201      
    call #00462744 (:%pUnassigned)        ;#0046A600: 350 3F81FFFF               v  00 00  1 201      
    mov [ebp-8] (args),eax                ;#0046A605: 211105 F8                  uv 00 21  1 202      
    mov [ebp+28] (retaddr),#0046A614      ;#0046A608: 307105 1C 14A64600         vu 00 20  1 202      
    jmp #00444FC4 (code:printf)           ;#0046A60F: 351 B0A9FDFF               v  00 00  1 203      
;   538             end for
    mov edi,[ebp-36] (i)                  ;#0046A614: 213175 DC                  uv 80 20  1 204      
    mov esi,[ebp-32] (symtab[1146])       ;#0046A617: 213165 E0                  vu 40 20  1 204      
    add edi,1                             ;#0046A61A: 203307 01                  uv 80 80  1 205      
    cmp edi,esi                           ;#0046A61D: 073376                     uv 00 C0  1 206 80   
    mov [ebp-36] (i),edi                  ;#0046A61F: 211175 DC                  vu 00 A0  1 206      
    jle #0046A58A                         ;#0046A622: 017216 62FFFFFF            v  00 00  1 207      
;   539         end if
;   540     end if
    jmp #00462C8F (:%opRetf)              ;#0046A628: 351 6286FFFF               v  00 00  1 208      
;   541 end procedure
;   542 
;   543 -- DEV wants to be a function[?] for use in eg "type check failure, %s is %s"
;   544 --procedure short_dump(string name, object o)
;   545 --  printf(1,"%s = %s\n",{name,sprint(o,MAXLINELEN-length(name)-3)})    --(DEV -e2 only)
;   546 --  printf(1,"%s = %s\n",{name,sprint(o)})
;   547 --end procedure
;   548 
;   549 
;   550 integer lines
;   551 object crash_msg = 0
;   552 
;   553 -- copy of the one in p.exw:
;   554 integer batchmode       -- set by -batch command line option
;   555         batchmode = 0   -- 1=suppress displays/prompts [incomplete]
;   556 
;   557 procedure putz(string name, object o, integer novalue)
    mov ecx,[ebp] (name)                  ;#0046C0EC: 213115 00                  uv 02 20  1   1      
    cmp ecx,h4                            ;#0046C0EF: 201371 00000040            uv 00 02  1   2 02   
    jl #0046C0FE                          ;#0046C0F5: 174 07                     v  00 00  1   2      
    cmp byte[ebx+ecx*4-1],#82             ;#0046C0F7: 200174213 FF 82            u  00 0A  2   3      
    je #0046C108                          ;#0046C0FC: 164 0A                     v  00 00  1   4      
    mov ecx,1153                          ;#0046C0FE: 271 81040000               uv 02 00  1   5      
    call #00462D8D (:%opTcFail)           ;#0046C103: 350 856CFFFF               v  00 00  1   5      
;   558 string s
;   559     if novalue then
    mov edi,[ebp-8] (novalue)             ;#0046C108: 213175 F8                  uv 80 20  1   6      
    test edi,edi                          ;#0046C10B: 205377                     uv 00 80  1   7 80   
    je #0046C1BE                          ;#0046C10D: 017204 AB000000            v  00 00  1   7      
;   560         if novalue=1 then
    cmp edi,1                             ;#0046C113: 203377 01                  uv 00 80  1   8      
    jne #0046C12B                         ;#0046C116: 165 13                     v  00 00  1   8      
;   561             s = "<novalue>"
    mov esi,[#0040256C]                   ;#0046C118: 213065 6C254000            uv 40 00  1   9      
    mov [ebp-12] (s),esi                  ;#0046C11E: 211165 F4                  uv 00 60  1  10 40   
    add dword[ebx+esi*4-8],1              ;#0046C121: 203104263 F8 01            u  00 48  3  12    *40*
    jmp #0046C1BE                         ;#0046C126: 351 93000000               v  00 00  1  14      
;   562         elsif novalue=2 then
    cmp edi,2                             ;#0046C12B: 203377 02                  uv 00 80  1  15      
    jne #0046C15D                         ;#0046C12E: 165 2D                     v  00 00  1  15      
;   563             s = "*** INVALID REF ***"
    mov eax,[#00402570]                   ;#0046C130: 241 70254000               uv 01 00  1  16      
    mov edx,[ebp-12] (s)                  ;#0046C135: 213125 F4                  vu 04 20  1  16      
    cmp eax,h4                            ;#0046C138: 075 00000040               uv 00 01  1  17      
    jl #0046C144                          ;#0046C13D: 174 05                     v  00 00  1  17      
    add dword[ebx+eax*4-8],1              ;#0046C13F: 203104203 F8 01            u  00 09  3  18      
    mov [ebp-12] (s),eax                  ;#0046C144: 211105 F4                  vu 00 21  1  20      
    cmp edx,h4                            ;#0046C147: 201372 00000040            uv 00 04  1  21      
    jle #0046C1BE                         ;#0046C14D: 176 6F                     v  00 00  1  21      
    sub dword[ebx+edx*4-8],1              ;#0046C14F: 203154223 F8 01            u  00 0C  3  22      
    jne #0046C1BE                         ;#0046C154: 165 68                     v  00 00  1  24      
    call #004639A8 (:%pDealloc)           ;#0046C156: 350 4D78FFFF               v  00 00  1  25      
    jmp #0046C1BE                         ;#0046C15B: 353 61                     v  00 00  1  26      
;   564         elsif novalue=3 then
    cmp edi,3                             ;#0046C15D: 203377 03                  uv 00 80  1  27      
    jne #0046C191                         ;#0046C160: 165 2F                     v  00 00  1  27      
;   565             s = "*** CORRUPT TYPE BYTE ***"
    mov ecx,[#00402574]                   ;#0046C162: 213015 74254000            uv 02 00  1  28      
    mov edx,[ebp-12] (s)                  ;#0046C168: 213125 F4                  vu 04 20  1  28      
    cmp ecx,h4                            ;#0046C16B: 201371 00000040            uv 00 02  1  29      
    jl #0046C178                          ;#0046C171: 174 05                     v  00 00  1  29      
    add dword[ebx+ecx*4-8],1              ;#0046C173: 203104213 F8 01            u  00 0A  3  30      
    mov [ebp-12] (s),ecx                  ;#0046C178: 211115 F4                  vu 00 22  1  32      
    cmp edx,h4                            ;#0046C17B: 201372 00000040            uv 00 04  1  33      
    jle #0046C1BE                         ;#0046C181: 176 3B                     v  00 00  1  33      
    sub dword[ebx+edx*4-8],1              ;#0046C183: 203154223 F8 01            u  00 0C  3  34      
    jne #0046C1BE                         ;#0046C188: 165 34                     v  00 00  1  36      
    call #004639A8 (:%pDealloc)           ;#0046C18A: 350 1978FFFF               v  00 00  1  37      
    jmp #0046C1BE                         ;#0046C18F: 353 2D                     v  00 00  1  38      
;   566         else
;   567             s = "*** INVALID ??? ***"
    mov esi,[#00402578]                   ;#0046C191: 213065 78254000            uv 40 00  1  39      
    mov edx,[ebp-12] (s)                  ;#0046C197: 213125 F4                  vu 04 20  1  39      
    cmp esi,h4                            ;#0046C19A: 201376 00000040            uv 00 40  1  40      
    jl #0046C1A7                          ;#0046C1A0: 174 05                     v  00 00  1  40      
    add dword[ebx+esi*4-8],1              ;#0046C1A2: 203104263 F8 01            u  00 48  3  41      
    mov [ebp-12] (s),esi                  ;#0046C1A7: 211165 F4                  vu 00 60  1  43      
    cmp edx,h4                            ;#0046C1AA: 201372 00000040            uv 00 04  1  44      
    jle #0046C1BE                         ;#0046C1B0: 176 0C                     v  00 00  1  44      
    sub dword[ebx+edx*4-8],1              ;#0046C1B2: 203154223 F8 01            u  00 0C  3  45      
    jne #0046C1BE                         ;#0046C1B7: 165 05                     v  00 00  1  47      
    call #004639A8 (:%pDealloc)           ;#0046C1B9: 350 EA77FFFF               v  00 00  1  48      
;   568         end if
;   569     end if
;   570     if not batchmode then
    mov eax,[#00402568] (batchmode)       ;#0046C1BE: 241 68254000               uv 01 00  1  49      
    test eax,eax                          ;#0046C1C3: 205300                     uv 00 01  1  50 01   
    jne #0046C333                         ;#0046C1C5: 017205 68010000            v  00 00  1  50      
;   571         if lines<15 then    --DEV this (15) should be a parameter (or setting?):
    mov edi,15                            ;#0046C1CB: 277 0F000000               uv 80 00  1  51      
    mov eax,[#00402560] (lines)           ;#0046C1D0: 241 60254000               vu 01 00  1  51      
    mov esi,57                            ;#0046C1D5: 276 39000000               uv 40 00  1  52      
    mov edx,1149                          ;#0046C1DA: 272 7D040000               vu 04 00  1  52      
    call #0045F8B0 (:%opJcc)              ;#0046C1DF: 350 CC36FFFF               v  00 00  1  53      
    jge #0046C333                         ;#0046C1E4: 017215 49010000            v  00 00  1  54      
;   572 --DEV should this be in put2? (and not here)
;   573 --          if sequence(crash_msg) then
;   574 --              if length(crash_msg)=0 then
;   575 --                  crash_msg = "?? length 0 crash_msg ??\n"
;   576 --              elsif crash_msg[$]!='\n' then
;   577 --                  crash_msg &= "\n"
;   578 --              end if
;   579 --              puts(1,crash_msg)
;   580 --              lines = 999
;   581 --          else
;   582                 lines += 1
    mov edi,[#00402560] (lines)           ;#0046C1EA: 213075 60254000            uv 80 00  1  55      
    add edi,1                             ;#0046C1F0: 203307 01                  uv 80 80  1  56 80   
    mov edx,edi                           ;#0046C1F3: 213327                     uv 04 80  1  57 80   
    mov [#00402560] (lines),edi           ;#0046C1F5: 211075 60254000            vu 00 80  1  57      
    shl edx,1                             ;#0046C1FB: 321342                     u  04 04  1  58      
    jno #0046C209                         ;#0046C1FD: 161 0A                     v  00 00  1  58      
    mov edi,#00402560                     ;#0046C1FF: 277 60254000               uv 80 00  1  59      
    call #00462764 (:%e01tcfAddiii)       ;#0046C204: 350 5B65FFFF               v  00 00  1  59      
;   583                 if not novalue then
    mov ecx,[ebp-8] (novalue)             ;#0046C209: 213115 F8                  uv 02 20  1  60      
    test ecx,ecx                          ;#0046C20C: 205311                     uv 00 02  1  61 02   
    jne #0046C2A1                         ;#0046C20E: 017205 8D000000            v  00 00  1  61      
;   584 --8/2/24:
;   585 --                  s = sprint(o,MAXLINELEN-7-length(name))
;   586                     s = sprint(o,maxlen:=MAXLINELEN-7-length(name))
    mov esi,[ebp] (name)                  ;#0046C214: 213165 00                  uv 40 20  1  62      
    mov eax,[ebx+esi*4-12]                ;#0046C217: 213104263 F4               uv 01 48  1  65 40 *40*
    mov [ebp-16] (symtab[1162]),eax       ;#0046C21B: 211105 F0                  uv 00 21  1  66 01   
    mov edx,122                           ;#0046C21E: 272 7A000000               vu 04 00  1  66      
    sub edx,eax                           ;#0046C223: 051302                     uv 04 05  1  67      
    mov [ebp-20] (symtab[1163]),edx       ;#0046C225: 211125 EC                  uv 00 24  1  68 04   
    mov ecx,13                            ;#0046C228: 271 0D000000               vu 02 00  1  68      
    mov edx,212                           ;#0046C22D: 272 D4000000               uv 04 00  1  69      
    call #00462C02 (:%opFrame) (sprint)   ;#0046C232: 350 CB69FFFF               v  00 00  1  69      
    mov edi,[ebp+20] (prevebp)            ;#0046C237: 213175 14                  uv 80 20  1  70      
    mov eax,[edi-4]                       ;#0046C23A: 213107 FC                  uv 01 80  1  73 80 *80*
    xor ebx,ebx                           ;#0046C23D: 061333                     vu 08 08  1  73      
    cmp eax,h4                            ;#0046C23F: 075 00000040               uv 00 01  1  74      
    jl #0046C250                          ;#0046C244: 174 0A                     v  00 00  1  74      
    add dword[ebx+eax*4-8],1              ;#0046C246: 203104203 F8 01            u  00 09  3  75      
    cmp eax,1154                          ;#0046C24B: 075 82040000               vu 00 01  1  77      
    mov [ebp] (x),eax                     ;#0046C250: 211105 00                  uv 00 21  1  78      
    mov edi,[ebp+20] (prevebp)            ;#0046C253: 213175 14                  vu 80 20  1  78      
    mov eax,[edi-20]                      ;#0046C256: 213107 EC                  uv 01 80  1  81    *80*
    mov [ebp-8] (maxlen),eax              ;#0046C259: 211105 F8                  uv 00 21  1  82 01   
    mov [ebp+28] (retaddr),#0046C268      ;#0046C25C: 307105 1C 68C24600         vu 00 20  1  82      
    jmp #0045471E (code:sprint)           ;#0046C263: 351 B684FEFF               v  00 00  1  83      
    push eax                              ;#0046C268: 120                        uv 00 01  1  84      
    mov edi,[ebp-12] (s)                  ;#0046C269: 213175 F4                  vu 80 20  1  84      
    cmp edi,h4                            ;#0046C26C: 201377 00000040            uv 00 80  1  85      
    jle #0046C282                         ;#0046C272: 176 0E                     v  00 00  1  85      
    sub dword[ebx+edi*4-8],1              ;#0046C274: 203154273 F8 01            u  00 88  3  86      
    jne #0046C282                         ;#0046C279: 165 07                     v  00 00  1  88      
    mov edx,edi                           ;#0046C27B: 213327                     uv 04 80  1  89      
    call #004639A8 (:%pDealloc)           ;#0046C27D: 350 2677FFFF               v  00 00  1  89      
    pop dword[ebp-12] (s)                 ;#0046C282: 217105 F4                  np 00 20  3  90      
    mov ecx,[ebp-12] (s)                  ;#0046C285: 213115 F4                  uv 02 20  1  93      
    cmp ecx,h4                            ;#0046C288: 201371 00000040            uv 00 02  1  94 02   
    jl #0046C297                          ;#0046C28E: 174 07                     v  00 00  1  94      
    cmp byte[ebx+ecx*4-1],#82             ;#0046C290: 200174213 FF 82            u  00 0A  2  95      
    je #0046C2A1                          ;#0046C295: 164 0A                     v  00 00  1  96      
    mov ecx,1156                          ;#0046C297: 271 84040000               uv 02 00  1  97      
    call #00462D8D (:%opTcFail)           ;#0046C29C: 350 EC6AFFFF               v  00 00  1  97      
;   587                 end if
;   588                 printf(1,"    %s = %s\n",{name,s})
    lea eax,[ebp-24] (symtab[1164])       ;#0046C2A1: 215105 E8                  uv 01 20  1  98      
    mov edx,2                             ;#0046C2A4: 272 02000000               vu 04 00  1  98      
    push #0046C2E2                        ;#0046C2A9: 150 E2C24600               uv 00 00  1  99      
    push eax                              ;#0046C2AE: 120                        vu 00 01  1  99      
    mov esi,[ebp-12] (s)                  ;#0046C2AF: 213165 F4                  uv 40 20  1 100      
    cmp esi,h4                            ;#0046C2B2: 201376 00000040            uv 00 40  1 101 40   
    jl #0046C2C4                          ;#0046C2B8: 174 0A                     v  00 00  1 101      
    add dword[ebx+esi*4-8],1              ;#0046C2BA: 203104263 F8 01            u  00 48  3 102      
    cmp eax,1156                          ;#0046C2BF: 075 84040000               vu 00 01  1 104      
    push esi                              ;#0046C2C4: 126                        uv 00 40  1 105      
    mov eax,[ebp] (name)                  ;#0046C2C5: 213105 00                  vu 01 20  1 105      
    cmp eax,h4                            ;#0046C2C8: 075 00000040               uv 00 01  1 106      
    jl #0046C2D9                          ;#0046C2CD: 174 0A                     v  00 00  1 106      
    add dword[ebx+eax*4-8],1              ;#0046C2CF: 203104203 F8 01            u  00 09  3 107      
    cmp eax,1153                          ;#0046C2D4: 075 81040000               vu 00 01  1 109      
    push eax                              ;#0046C2D9: 120                        uv 00 01  1 110      
    mov edi,[ebp-24] (symtab[1164])       ;#0046C2DA: 213175 E8                  vu 80 20  1 110      
    jmp #00460143 (:%pMkSq)               ;#0046C2DD: 351 613EFFFF               v  00 00  1 111      
    mov ecx,9                             ;#0046C2E2: 271 09000000               uv 02 00  1 112      
    mov edx,400                           ;#0046C2E7: 272 90010000               vu 04 00  1 112      
    call #00462C02 (:%opFrame) (printf)   ;#0046C2EC: 350 1169FFFF               v  00 00  1 113      
    mov [ebp] (fn), dword 1               ;#0046C2F1: 307105 00 01000000         uv 00 20  1 114      
    mov ecx,[#0040255C]                   ;#0046C2F8: 213015 5C254000            vu 02 00  1 114      
    mov [ebp-4] (fmt),ecx                 ;#0046C2FE: 211115 FC                  uv 00 22  1 115      
    add dword[ebx+ecx*4-8],1              ;#0046C301: 203104213 F8 01            u  00 0A  3 117    *02*
    mov edi,[ebp+20] (prevebp)            ;#0046C306: 213175 14                  vu 80 20  1 119      
    mov eax,[edi-24]                      ;#0046C309: 213107 E8                  uv 01 80  1 122    *80*
    mov [edi-24], dword h4                ;#0046C30C: 307107 E8 00000040         vu 00 80  1 122      
    cmp eax,h4                            ;#0046C313: 075 00000040               uv 00 01  1 123      
    jne #0046C324                         ;#0046C318: 165 0A                     v  00 00  1 123      
    mov esi,1164                          ;#0046C31A: 276 8C040000               uv 40 00  1 124      
    call #00462744 (:%pUnassigned)        ;#0046C31F: 350 2064FFFF               v  00 00  1 124      
    mov [ebp-8] (args),eax                ;#0046C324: 211105 F8                  uv 00 21  1 125      
    mov [ebp+28] (retaddr),#0046C333      ;#0046C327: 307105 1C 33C34600         vu 00 20  1 125      
    jmp #00444FC4 (code:printf)           ;#0046C32E: 351 918CFDFF               v  00 00  1 126      
;   589 --          end if
;   590         end if
;   591     end if
;   592     if fn!=-1 then
    mov edi,-1                            ;#0046C333: 277 FFFFFFFF               uv 80 00  1 127      
    mov eax,[#00402510] (fn)              ;#0046C338: 241 10254000               vu 01 00  1 127      
    mov esi,24                            ;#0046C33D: 276 18000000               uv 40 00  1 128      
    mov edx,1063                          ;#0046C342: 272 27040000               vu 04 00  1 128      
    call #0045F91F (:%opJccE)             ;#0046C347: 350 D335FFFF               v  00 00  1 129      
    je #0046C445                          ;#0046C34C: 017204 F3000000            v  00 00  1 130      
;   593         if novalue then
    mov esi,[ebp-8] (novalue)             ;#0046C352: 213165 F8                  uv 40 20  1 131      
    test esi,esi                          ;#0046C355: 205366                     uv 00 40  1 132 40   
    je #0046C3F3                          ;#0046C357: 017204 96000000            v  00 00  1 132      
;   594             printf(fn,"    %s = %s\n",{name,s})
    lea eax,[ebp-24] (symtab[1164])       ;#0046C35D: 215105 E8                  uv 01 20  1 133      
    mov edx,2                             ;#0046C360: 272 02000000               vu 04 00  1 133      
    push #0046C39F                        ;#0046C365: 150 9FC34600               uv 00 00  1 134      
    push eax                              ;#0046C36A: 120                        vu 00 01  1 134      
    mov edi,[ebp-12] (s)                  ;#0046C36B: 213175 F4                  uv 80 20  1 135      
    cmp edi,h4                            ;#0046C36E: 201377 00000040            uv 00 80  1 136 80   
    jl #0046C380                          ;#0046C374: 174 0A                     v  00 00  1 136      
    add dword[ebx+edi*4-8],1              ;#0046C376: 203104273 F8 01            u  00 88  3 137      
    cmp eax,1156                          ;#0046C37B: 075 84040000               vu 00 01  1 139      
    push edi                              ;#0046C380: 127                        uv 00 80  1 140      
    mov ecx,[ebp] (name)                  ;#0046C381: 213115 00                  vu 02 20  1 140      
    cmp ecx,h4                            ;#0046C384: 201371 00000040            uv 00 02  1 141      
    jl #0046C396                          ;#0046C38A: 174 0A                     v  00 00  1 141      
    add dword[ebx+ecx*4-8],1              ;#0046C38C: 203104213 F8 01            u  00 0A  3 142      
    cmp eax,1153                          ;#0046C391: 075 81040000               vu 00 01  1 144      
    push ecx                              ;#0046C396: 121                        uv 00 02  1 145      
    mov edi,[ebp-24] (symtab[1164])       ;#0046C397: 213175 E8                  vu 80 20  1 145      
    jmp #00460143 (:%pMkSq)               ;#0046C39A: 351 A43DFFFF               v  00 00  1 146      
    mov ecx,9                             ;#0046C39F: 271 09000000               uv 02 00  1 147      
    mov edx,400                           ;#0046C3A4: 272 90010000               vu 04 00  1 147      
    call #00462C02 (:%opFrame) (printf)   ;#0046C3A9: 350 5468FFFF               v  00 00  1 148      
    mov eax,[#00402510] (fn)              ;#0046C3AE: 241 10254000               uv 01 00  1 149      
    mov [ebp] (fn),eax                    ;#0046C3B3: 211105 00                  uv 00 21  1 150 01   
    mov esi,[#0040255C]                   ;#0046C3B6: 213065 5C254000            vu 40 00  1 150      
    mov [ebp-4] (fmt),esi                 ;#0046C3BC: 211165 FC                  uv 00 60  1 151      
    add dword[ebx+esi*4-8],1              ;#0046C3BF: 203104263 F8 01            u  00 48  3 153    *40*
    mov edi,[ebp+20] (prevebp)            ;#0046C3C4: 213175 14                  vu 80 20  1 155      
    mov eax,[edi-24]                      ;#0046C3C7: 213107 E8                  uv 01 80  1 158    *80*
    mov [edi-24], dword h4                ;#0046C3CA: 307107 E8 00000040         vu 00 80  1 158      
    cmp eax,h4                            ;#0046C3D1: 075 00000040               uv 00 01  1 159      
    jne #0046C3E2                         ;#0046C3D6: 165 0A                     v  00 00  1 159      
    mov esi,1164                          ;#0046C3D8: 276 8C040000               uv 40 00  1 160      
    call #00462744 (:%pUnassigned)        ;#0046C3DD: 350 6263FFFF               v  00 00  1 160      
    mov [ebp-8] (args),eax                ;#0046C3E2: 211105 F8                  uv 00 21  1 161      
    mov [ebp+28] (retaddr),#0046C3F1      ;#0046C3E5: 307105 1C F1C34600         vu 00 20  1 161      
    jmp #00444FC4 (code:printf)           ;#0046C3EC: 351 D38BFDFF               v  00 00  1 162      
    jmp #0046C445                         ;#0046C3F1: 353 52                     v  00 00  1 163      
;   595         else
;   596             clever_dump(name, o)
    mov ecx,10                            ;#0046C3F3: 271 0A000000               uv 02 00  1 164      
    mov edx,1137                          ;#0046C3F8: 272 71040000               vu 04 00  1 164      
    call :%opFrame (clever_dump)          ;#0046C3FD: 350 0068FFFF               v  00 00  1 165      
    mov edi,[ebp+20] (prevebp)            ;#0046C402: 213175 14                  uv 80 20  1 166      
    mov eax,[edi]                         ;#0046C405: 213007                     uv 01 80  1 169 80 *80*
    xor ebx,ebx                           ;#0046C407: 061333                     vu 08 08  1 169      
    cmp eax,h4                            ;#0046C409: 075 00000040               uv 00 01  1 170      
    jl #0046C41A                          ;#0046C40E: 174 0A                     v  00 00  1 170      
    add dword[ebx+eax*4-8],1              ;#0046C410: 203104203 F8 01            u  00 09  3 171      
    cmp eax,1153                          ;#0046C415: 075 81040000               vu 00 01  1 173      
    mov [ebp] (name),eax                  ;#0046C41A: 211105 00                  uv 00 21  1 174      
    mov edi,[ebp+20] (prevebp)            ;#0046C41D: 213175 14                  vu 80 20  1 174      
    mov eax,[edi-4]                       ;#0046C420: 213107 FC                  uv 01 80  1 177    *80*
    xor ebx,ebx                           ;#0046C423: 061333                     vu 08 08  1 177      
    cmp eax,h4                            ;#0046C425: 075 00000040               uv 00 01  1 178      
    jl #0046C436                          ;#0046C42A: 174 0A                     v  00 00  1 178      
    add dword[ebx+eax*4-8],1              ;#0046C42C: 203104203 F8 01            u  00 09  3 179      
    cmp eax,1154                          ;#0046C431: 075 82040000               vu 00 01  1 181      
    mov [ebp-4] (o),eax                   ;#0046C436: 211105 FC                  uv 00 21  1 182      
    mov [ebp+28] (retaddr),#0046C445      ;#0046C439: 307105 1C 45C44600         vu 00 20  1 182      
    jmp #0046A255 (code:clever_dump)      ;#0046C440: 351 10DEFFFF               v  00 00  1 183      
;   597         end if
;   598     end if
    jmp #00462C8F (:%opRetf)              ;#0046C445: 351 4568FFFF               v  00 00  1 184      
;   599 end procedure
;   600 
;   601 procedure put2(string emsg)
    mov ecx,[ebp] (emsg)                  ;#0046C44A: 213115 00                  uv 02 20  1   1      
    cmp ecx,h4                            ;#0046C44D: 201371 00000040            uv 00 02  1   2 02   
    jl #0046C45C                          ;#0046C453: 174 07                     v  00 00  1   2      
    cmp byte[ebx+ecx*4-1],#82             ;#0046C455: 200174213 FF 82            u  00 0A  2   3      
    je #0046C466                          ;#0046C45A: 164 0A                     v  00 00  1   4      
    mov ecx,1166                          ;#0046C45C: 271 8E040000               uv 02 00  1   5      
    call #00462D8D (:%opTcFail)           ;#0046C461: 350 2769FFFF               v  00 00  1   5      
;   602     if not batchmode then
    mov edi,[#00402568] (batchmode)       ;#0046C466: 213075 68254000            uv 80 00  1   6      
    test edi,edi                          ;#0046C46C: 205377                     uv 00 80  1   7 80   
    jne #0046C57F                         ;#0046C46E: 017205 0B010000            v  00 00  1   7      
;   603         if lines<15 or diagdiag then
    mov edi,15                            ;#0046C474: 277 0F000000               uv 80 00  1   8      
    mov eax,[#00402560] (lines)           ;#0046C479: 241 60254000               vu 01 00  1   8      
    mov esi,57                            ;#0046C47E: 276 39000000               uv 40 00  1   9      
    mov edx,1149                          ;#0046C483: 272 7D040000               vu 04 00  1   9      
    call #0045F8B0 (:%opJcc)              ;#0046C488: 350 2334FFFF               v  00 00  1  10      
    jl #0046C494                          ;#0046C48D: 174 05                     v  00 00  1  11      
    jmp #0046C57F                         ;#0046C48F: 351 EB000000               v  00 00  1  12      
;   604             if sequence(crash_msg) then
    mov esi,[#00402564] (crash_msg)       ;#0046C494: 213065 64254000            uv 40 00  1  13      
    cmp esi,h4                            ;#0046C49A: 201376 00000040            uv 00 40  1  14 40   
    jl #0046C553                          ;#0046C4A0: 017214 AD000000            v  00 00  1  14      
    test byte[ebx+esi*4-1],#80            ;#0046C4A6: 366104263 FF 80            u  00 48  2  15      
    je #0046C553                          ;#0046C4AB: 017204 A2000000            v  00 00  1  16      
;   605                 if length(crash_msg)=0 then
    mov ecx,[ebx+esi*4-12]                ;#0046C4B1: 213114263 F4               uv 02 48  1  17      
    cmp ecx,0                             ;#0046C4B5: 203371 00                  uv 00 02  1  18 02   
    jne #0046C4EB                         ;#0046C4B8: 165 31                     v  00 00  1  18      
;   606                     crash_msg = "?? length 0 crash_msg ??\n"
    mov edi,[#00402580]                   ;#0046C4BA: 213075 80254000            uv 80 00  1  19      
    cmp edi,h4                            ;#0046C4C0: 201377 00000040            uv 00 80  1  20 80   
    jl #0046C4CD                          ;#0046C4C6: 174 05                     v  00 00  1  20      
    add dword[ebx+edi*4-8],1              ;#0046C4C8: 203104273 F8 01            u  00 88  3  21      
    mov [#00402564] (crash_msg),edi       ;#0046C4CD: 211075 64254000            vu 00 80  1  23      
    cmp esi,h4                            ;#0046C4D3: 201376 00000040            uv 00 40  1  24      
    jle #0046C51B                         ;#0046C4D9: 176 40                     v  00 00  1  24      
    sub dword[ebx+esi*4-8],1              ;#0046C4DB: 203154263 F8 01            u  00 48  3  25      
    jne #0046C51B                         ;#0046C4E0: 165 39                     v  00 00  1  27      
    mov edx,esi                           ;#0046C4E2: 211362                     uv 04 40  1  28      
    call #004639A8 (:%pDealloc)           ;#0046C4E4: 350 BF74FFFF               v  00 00  1  28      
    jmp #0046C51B                         ;#0046C4E9: 353 30                     v  00 00  1  29      
;   607                 elsif crash_msg[$]!='\n' then
    mov edi,-1                            ;#0046C4EB: 277 FFFFFFFF               uv 80 00  1  30      
    lea ecx,[ebp-8] (symtab[1169])        ;#0046C4F0: 215115 F8                  vu 02 20  1  30      
    mov edx,1150                          ;#0046C4F3: 272 7E040000               uv 04 00  1  31      
    mov al,0                              ;#0046C4F8: 260 00                     vu 01 00  1  31      
    call #00460FE5 (:%pSubse1)            ;#0046C4FA: 350 E64AFFFF               v  00 00  1  32      
    mov eax,[ebp-8] (symtab[1169])        ;#0046C4FF: 213105 F8                  uv 01 20  1  33      
    cmp eax,10                            ;#0046C502: 203370 0A                  uv 00 01  1  34 01   
    je #0046C51B                          ;#0046C505: 164 14                     v  00 00  1  34      
;   608                     crash_msg &= "\n"
    mov edx,#00402564                     ;#0046C507: 272 64254000               uv 04 00  1  35      
    mov edi,#00402564                     ;#0046C50C: 277 64254000               vu 80 00  1  35      
    mov ecx,#00402330                     ;#0046C511: 271 30234000               uv 02 00  1  36      
    call #0045FD65 (:%opConcat)           ;#0046C516: 350 4A38FFFF               v  00 00  1  36      
;   609                 end if
;   610                 puts(1,emsg&"\n")
    lea edx,[ebp-12] (symtab[1170])       ;#0046C51B: 215125 F4                  uv 04 20  1  37      
    mov edi,ebp                           ;#0046C51E: 213375                     vu 80 20  1  37      
    mov ecx,#00402330                     ;#0046C520: 271 30234000               uv 02 00  1  38      
    call #0045FD65 (:%opConcat)           ;#0046C525: 350 3B38FFFF               v  00 00  1  38      
    mov eax,1                             ;#0046C52A: 270 01000000               uv 01 00  1  39      
    mov edx,[ebp-12] (symtab[1170])       ;#0046C52F: 213125 F4                  vu 04 20  1  39      
    call #0045E072 (:%opPuts)             ;#0046C532: 350 3B1BFFFF               v  00 00  1  40      
;   611                 puts(1,crash_msg)
    mov eax,1                             ;#0046C537: 270 01000000               uv 01 00  1  41      
    mov edx,[#00402564] (crash_msg)       ;#0046C53C: 213025 64254000            vu 04 00  1  41      
    call #0045E072 (:%opPuts)             ;#0046C542: 350 2B1BFFFF               v  00 00  1  42      
;   612                 lines = 999
    mov [#00402560] (lines), dword 999    ;#0046C547: 307005 60254000 E7030000   uv 00 00  1  43      
    jmp #0046C57F                         ;#0046C551: 353 2C                     v  00 00  1  43      
;   613             else
;   614                 lines += 1
    mov ecx,[#00402560] (lines)           ;#0046C553: 213015 60254000            uv 02 00  1  44      
    add ecx,1                             ;#0046C559: 203301 01                  uv 02 02  1  45 02   
    mov edx,ecx                           ;#0046C55C: 213321                     uv 04 02  1  46 02   
    mov [#00402560] (lines),ecx           ;#0046C55E: 211015 60254000            vu 00 02  1  46      
    shl edx,1                             ;#0046C564: 321342                     u  04 04  1  47      
    jno #0046C572                         ;#0046C566: 161 0A                     v  00 00  1  47      
    mov edi,#00402560                     ;#0046C568: 277 60254000               uv 80 00  1  48      
    call #00462764 (:%e01tcfAddiii)       ;#0046C56D: 350 F261FFFF               v  00 00  1  48      
;   615                 puts(1,emsg)
    mov eax,1                             ;#0046C572: 270 01000000               uv 01 00  1  49      
    mov edx,[ebp] (emsg)                  ;#0046C577: 213125 00                  vu 04 20  1  49      
    call #0045E072 (:%opPuts)             ;#0046C57A: 350 F31AFFFF               v  00 00  1  50      
;   616             end if
;   617         end if
;   618     end if
;   619     if fn!=-1 then
    mov edi,-1                            ;#0046C57F: 277 FFFFFFFF               uv 80 00  1  51      
    mov eax,[#00402510] (fn)              ;#0046C584: 241 10254000               vu 01 00  1  51      
    mov esi,24                            ;#0046C589: 276 18000000               uv 40 00  1  52      
    mov edx,1063                          ;#0046C58E: 272 27040000               vu 04 00  1  52      
    call #0045F91F (:%opJccE)             ;#0046C593: 350 8733FFFF               v  00 00  1  53      
    je #0046C5A7                          ;#0046C598: 164 0D                     v  00 00  1  54      
;   620         puts(fn,emsg)
    mov eax,[#00402510] (fn)              ;#0046C59A: 241 10254000               uv 01 00  1  55      
    mov edx,[ebp] (emsg)                  ;#0046C59F: 213125 00                  vu 04 20  1  55      
    call #0045E072 (:%opPuts)             ;#0046C5A2: 350 CB1AFFFF               v  00 00  1  56      
;   621     end if
    jmp #00462C8F (:%opRetf)              ;#0046C5A7: 351 E366FFFF               v  00 00  1  57      
;   622 end procedure
;   623 
;   624 without type_check  -- NB. This code is just too low-level.
;   625 -- If you remove the above in the hope that it will help, you will 
;   626 --  probably be disappointed. You tend to get eg:
;   627 --      diag looping (minimal diagnostics follow); error code is:30
;   628 --      ep1 is C0000005
;   629 --      ep2 is 00000000
;   630 --      era is 00409E9B
;   631 --      ern is 3186
;   632 
;   633 constant swod = 0 -- 1=show without debug routines and vars
;   634 
;   635 --
;   636 -- Symbol table constants/structure
;   637 --  duplicates from pglobals.e, needed for bound .exes
;   638 --   (there are *no globals* in this file, unless you count
;   639 --    external refs to printf/sprintf/stuff from ppp.e)
;   640 --
;   641 constant 
;   642          S_Name = 1,    -- const/var/rtn name
;   643          S_NTyp = 2,    -- Const/GVar/TVar/Nspc/Type/Func/Proc
;   644          S_FPno = 3,    -- File and Path number
;   645          S_State = 4,   -- state flag. S_fwd/S_used/S_set
;   646 --       S_Nlink = 5,   -- hash link
;   647          S_Slink = 6,   -- localscopeX link
;   648 -- constants and variables [S_NTyp<=S_TVar]
;   649 --       S_vtype = 7,   -- variable type or namespace fileno
;   650 --       S_value = 8,   -- value
;   651          S_Tidx = 9,    -- thread idx (S_NTyp=S_Tvar only)
;   652 --       S_ErrV = 10,   -- {'v', file, line, col}; see pmain.e[-35]
;   653 --       S_Init = 11,   -- Initialised chain (known init if non-0/see S_Const note below)
;   654 -- routines [S_NTyp>=S_Type]
;   655 --       S_sig  = 7,    -- routine signature
;   656          S_Parm1 = 8,   -- first parameter. (idx to symtab, follow S_Slink)
;   657 --       S_ParmN = 9,   -- minimum no of parameters (max is length(S_sig)-1)
;   658 --       S_Ltot = 10,   -- total no of parameters, locals, and temporary vars
;   659                         -- (needed to allocate the stack frame space)
;   660          S_il   = 11,   -- intermediate code
;   661          S_ltab = 12,   -- line table (packed when compiled, raw when interpreted)
;   662          S_1stl = 13,   -- first line (of "procedure"/"function"/"type" keyword)
;   663 --       S_Efct = 14,
;   664 --       S_ErrR = 15    -- {'R', file, line, col}; see pmain.e[-60]
;   665 $
;   666 
;   667 constant 
;   668 --       S_Const = 1,   -- symtab[i][S_NTyp] values
;   669          S_GVar2 = 2,   -- global or static variable
;   670          S_TVar3 = 3,   -- temp or threadstack (local) variable/parameter
;   671 --       S_Nspc = 4,    -- namespace
;   672 --       S_Rsvd = 5,
;   673          S_Type = 6,    -- Type of thermal yellow portable encryptor
;   674 --       S_Func = 7,    -- Function of finding unusual nonsense comments
;   675 --       S_Proc = 8     -- Procedure for private rotating obstacle counter
;   676          K_wdb = #100   -- with debug setting
;   677 
;   678 constant
;   679          T_pathset = 16,
;   680          T_fileset = 17,
;   681          T_cmdlnflg = 19,
;   682 --       T_callstk = 20,
;   683          T_maintls = 21,
;   684          T_EBP     = 22,    -- compiled/listing=0, interpreted={ebp4,esp4,sym4} (set at last possible moment)
;   685          T_ds4     = 23,    -- compiled = start of data section, same but /4 when interpreted ([T_EBP]!=0)
;   686          T_const1  = 26
;   687 
;   688 function convert_offset(atom era, sequence sr)
;   689 --printf(1,"pDiag.e line 1112: convert_offset(era=#%08x, sr=%v)\n",{era, sr})
;   690 integer lineno = sr[S_1stl]     -- line no of "procedure"/"function"/"type" keyword
    mov edi,13                            ;#00461C7F: 277 0D000000               uv 80 00  1   1      
    lea ecx,[ebp-8] (lineno)              ;#00461C84: 215115 F8                  vu 02 20  1   1      
    mov esi,[ebp-4] (sr)                  ;#00461C87: 213165 FC                  uv 40 20  1   2      
    mov edx,1197                          ;#00461C8A: 272 AD040000               vu 04 00  1   2      
    call #0046106B (:%pSubse1i)           ;#00461C8F: 350 D7F3FFFF               v  00 00  1   3      
;   691 sequence linetab = sr[S_ltab]
    mov edi,12                            ;#00461C94: 277 0C000000               uv 80 00  1   4      
    lea ecx,[ebp-12] (linetab)            ;#00461C99: 215115 F4                  vu 02 20  1   4      
    mov esi,[ebp-4] (sr)                  ;#00461C9C: 213165 FC                  uv 40 20  1   5      
    mov edx,1197                          ;#00461C9F: 272 AD040000               vu 04 00  1   5      
    mov al,0                              ;#00461CA4: 260 00                     uv 01 00  1   6      
    call #00460FE5 (:%pSubse1)            ;#00461CA6: 350 3AF3FFFF               v  00 00  1   6      
;   692     if linetab={} then return -1 end if -- added 20/12/19
    lea eax,[ebp-16] (symtab[1200])       ;#00461CAB: 215105 F0                  uv 01 20  1   7      
    mov edx,0                             ;#00461CAE: 272 00000000               vu 04 00  1   7      
    push #00461CC1                        ;#00461CB3: 150 C11C4600               uv 00 00  1   8      
    push eax                              ;#00461CB8: 120                        vu 00 01  1   8      
    mov edi,[ebp-16] (symtab[1200])       ;#00461CB9: 213175 F0                  uv 80 20  1   9      
    jmp #00460143 (:%pMkSq)               ;#00461CBC: 351 82E4FFFF               v  00 00  1   9      
    mov edi,[ebp-16] (symtab[1200])       ;#00461CC1: 213175 F0                  uv 80 20  1  10      
    mov eax,[ebp-12] (linetab)            ;#00461CC4: 213105 F4                  vu 01 20  1  10      
    mov esi,1200                          ;#00461CC7: 276 B0040000               uv 40 00  1  11      
    mov edx,1199                          ;#00461CCC: 272 AF040000               vu 04 00  1  11      
    call #0045F91F (:%opJccE)             ;#00461CD1: 350 49DCFFFF               v  00 00  1  12      
    jne #00461CE2                         ;#00461CD6: 165 0A                     v  00 00  1  13      
    mov eax,-1                            ;#00461CD8: 270 FFFFFFFF               uv 01 00  1  14      
    jmp #00462C8F (:%opRetf)              ;#00461CDD: 351 AD0F0000               v  00 00  1  14      
;   693 integer lastline = linetab[$]
    mov edi,-1                            ;#00461CE2: 277 FFFFFFFF               uv 80 00  1  15      
    lea ecx,[ebp-20] (lastline)           ;#00461CE7: 215115 EC                  vu 02 20  1  15      
    mov esi,[ebp-12] (linetab)            ;#00461CEA: 213165 F4                  uv 40 20  1  16      
    mov edx,1199                          ;#00461CED: 272 AF040000               vu 04 00  1  16      
    call #0046106B (:%pSubse1i)           ;#00461CF2: 350 74F3FFFF               v  00 00  1  17      
;   694 atom returnoffset = era-sr[S_il]
    mov edi,11                            ;#00461CF7: 277 0B000000               uv 80 00  1  18      
    lea ecx,[ebp-28] (symtab[1203])       ;#00461CFC: 215115 E4                  vu 02 20  1  18      
    mov esi,[ebp-4] (sr)                  ;#00461CFF: 213165 FC                  uv 40 20  1  19      
    mov edx,1197                          ;#00461D02: 272 AD040000               vu 04 00  1  19      
    mov al,0                              ;#00461D07: 260 00                     uv 01 00  1  20      
    call #00460FE5 (:%pSubse1)            ;#00461D09: 350 D7F2FFFF               v  00 00  1  20      
    lea edi,[ebp-24] (returnoffset)       ;#00461D0E: 215175 E8                  uv 80 20  1  21      
    mov ecx,[ebp] (era)                   ;#00461D11: 213115 00                  vu 02 20  1  21      
    mov eax,[ebp-28] (symtab[1203])       ;#00461D14: 213105 E4                  uv 01 20  1  22      
    call #0045F299 (:%opSub)              ;#00461D17: 350 7DD5FFFF               v  00 00  1  22      
;   695 integer thisline, linenxt, skip, base = 0, lti, tmp
    mov [ebp-44] (base),ebx               ;#00461D1C: 211135 D4                  uv 00 28  1  23      
;   696     --
;   697     -- Convert the offset to a line number.
;   698     -- A raw line table, as built in pilx86.e, is {skip|offset} where
;   699     --  skip is <0, meaning -n lines emitted no code, and
;   700     --  offset is >=0, a start offset of the next code-emitting line.
;   701     --  There is also a dummy max entry added at the end of ilxlate().
;   702     --  A line table should never have two (or more) skips in a row.
;   703     -- When interpreting, we can just use the raw table directly: skip down the
;   704     --  table until the offset is (b)reached, though we only know that when we 
;   705     --  hit the next entry, as detailed in the following.
;   706     --  Example1: a raw linetab of {-2,0,24,36} means offsets 0..23 are S_1st+2,
;   707     --            24..35 are S_1st+3, and <0 or >=36 are out-of-bounds (so leave 
;   708     --            lineno as -1). We only know that we should have stopped for an 
;   709     --            offset of 17 when we hit the 24, and the lineno we want is that 
;   710     --            before the +1 triggered by the 0 (or whatever line adjustment 
;   711     --            we made on [2] when we decide to stop on [3]).
;   712     --  Example2: for a linetab of {-14,#14,-3,#47...} and offset of #22, we only 
;   713     --            know that #14 (S_1st+14) is the right entry when we hit the #47
;   714     --            (S_1st+18), so there is a +1 and -(-3) that we must ignore.
;   715     --            Note that while an exception at offset #47 means S_1st+18, a 
;   716     --            return address of #47 would be the last call made by S_1st+14;
;   717     --            hence add -1 when using a return address to report an error.
;   718     -- When compiled, the linetab is packed: the offsets are converted to deltas
;   719     --  (so most will be <=127) with #81,#80 used as lead-ins for word,dword to
;   720     --  hold values that will not fit in a byte, and lastly stored as a "string"
;   721     --  of binary (#00..#FF) bytes, making it just over 25% of the size, on 32
;   722     --  bit systems, and just over 12.5% on 64 bit systems (ie worth having).
;   723     --  A fairly straightforward decode of the next raw value (into lti) is
;   724     --  followed by the same logic as above, except that when we start with a
;   725     --  raw table we can test lastline directly, but not when unpacking it.
;   726     -- Lastly note that [era] is incredibly fiddly to set, especially for
;   727     --  low-level routines isolated several calls deep from user code. If
;   728     --  the following yields -1, first suspect [era] rather than this code,
;   729     --  except for e30ume, in which case suspect that "Address Mapping" in
;   730     --  :!fehDiag (below) is missing a test/label.
;   731     --
;   732     if string(linetab) then -- compiled (deltas packed to string)
    mov edi,[ebp-12] (linetab)            ;#00461D1F: 213175 F4                  vu 80 20  1  23      
    cmp byte[ebx+edi*4-1],#82             ;#00461D22: 200174273 FF 82            u  00 88  2  26    *80*
    jne #00462006                         ;#00461D27: 017205 D9020000            v  00 00  1  27      
;   733         lineno = -1
    mov [ebp-8] (lineno), dword -1        ;#00461D2D: 307105 F8 FFFFFFFF         uv 00 20  1  28      
;   734         if returnoffset>=0 then
    xor edi,edi                           ;#00461D34: 061377                     vu 80 80  1  28      
    mov eax,[ebp-24] (returnoffset)       ;#00461D36: 213105 E8                  uv 01 20  1  29      
    mov esi,25                            ;#00461D39: 276 19000000               vu 40 00  1  29      
    mov edx,1202                          ;#00461D3E: 272 B2040000               uv 04 00  1  30      
    call #0045F8B0 (:%opJcc)              ;#00461D43: 350 68DBFFFF               v  00 00  1  30      
    jl #004620CE                          ;#00461D48: 017214 80030000            v  00 00  1  31      
;   735             thisline = sr[S_1stl]
    mov edi,13                            ;#00461D4E: 277 0D000000               uv 80 00  1  32      
    lea ecx,[ebp-32] (thisline)           ;#00461D53: 215115 E0                  vu 02 20  1  32      
    mov esi,[ebp-4] (sr)                  ;#00461D56: 213165 FC                  uv 40 20  1  33      
    mov edx,1197                          ;#00461D59: 272 AD040000               vu 04 00  1  33      
    call #0046106B (:%pSubse1i)           ;#00461D5E: 350 08F3FFFF               v  00 00  1  34      
;   736             linenxt = thisline
    mov [ebp-36] (linenxt),eax            ;#00461D63: 211105 DC                  uv 00 21  1  35      
;   737             skip = 0
    mov [ebp-40] (skip),ebx               ;#00461D66: 211135 D8                  vu 00 28  1  35      
;   738             base = 0
    mov [ebp-44] (base),ebx               ;#00461D69: 211135 D4                  uv 00 28  1  36      
;   739             for i=1 to length(linetab) do
    mov ecx,[ebp-12] (linetab)            ;#00461D6C: 213115 F4                  vu 02 20  1  36      
    mov edi,[ebx+ecx*4-12]                ;#00461D6F: 213174213 F4               uv 80 0A  1  39    *02*
    mov [ebp-56] (symtab[1210]),edi       ;#00461D73: 211175 C8                  uv 00 A0  1  40 80   
    mov [ebp-60] (i), dword 1             ;#00461D76: 307105 C4 01000000         vu 00 20  1  40      
    cmp edi,1                             ;#00461D7D: 201377 01000000            uv 00 80  1  41      
    jl #004620CE                          ;#00461D83: 017214 45030000            v  00 00  1  41      
;   740                 if skip then
    mov esi,[ebp-40] (skip)               ;#00461D89: 213165 D8                  uv 40 20  1  42      
    test esi,esi                          ;#00461D8C: 205366                     uv 00 40  1  43 40   
    je #00461DAD                          ;#00461D8E: 164 1D                     v  00 00  1  43      
;   741                     skip -= 1
    sub esi,1                             ;#00461D90: 203356 01                  uv 40 40  1  44      
    mov edx,esi                           ;#00461D93: 213326                     uv 04 40  1  45 40   
    mov [ebp-40] (skip),esi               ;#00461D95: 211165 D8                  vu 00 60  1  45      
    shl edx,1                             ;#00461D98: 321342                     u  04 04  1  46      
    jno #00461FED                         ;#00461D9A: 017201 4D020000            v  00 00  1  46      
    lea edi,[ebp-40] (skip)               ;#00461DA0: 215175 D8                  uv 80 20  1  47      
    call #00462764 (:%e01tcfAddiii)       ;#00461DA3: 350 BC090000               v  00 00  1  47      
    jmp #00461FED                         ;#00461DA8: 351 40020000               v  00 00  1  48      
;   742                 else
;   743                     lti = linetab[i]
    mov edi,[ebp-60] (i)                  ;#00461DAD: 213175 C4                  uv 80 20  1  49      
    lea ecx,[ebp-48] (lti)                ;#00461DB0: 215115 D0                  vu 02 20  1  49      
    mov esi,[ebp-12] (linetab)            ;#00461DB3: 213165 F4                  uv 40 20  1  50      
    mov edx,1199                          ;#00461DB6: 272 AF040000               vu 04 00  1  50      
    call #0046106B (:%pSubse1i)           ;#00461DBB: 350 ABF2FFFF               v  00 00  1  51      
;   744                     if lti>#7F then
    cmp eax,127                           ;#00461DC0: 203370 7F                  uv 00 01  1  52      
    jle #00461F73                         ;#00461DC3: 017216 AA010000            v  00 00  1  52      
;   745                         if lti>#81 then
    cmp eax,129                           ;#00461DC9: 075 81000000               uv 00 01  1  53      
    jle #00461DEF                         ;#00461DCE: 176 1F                     v  00 00  1  53      
;   746                             lti = lti-#100
    sub eax,256                           ;#00461DD0: 055 00010000               uv 01 01  1  54      
    mov edx,eax                           ;#00461DD5: 213320                     uv 04 01  1  55 01   
    mov [ebp-48] (lti),eax                ;#00461DD7: 211105 D0                  vu 00 21  1  55      
    shl edx,1                             ;#00461DDA: 321342                     u  04 04  1  56      
    jno #00461F73                         ;#00461DDC: 017201 91010000            v  00 00  1  56      
    lea edi,[ebp-48] (lti)                ;#00461DE2: 215175 D0                  uv 80 20  1  57      
    call #00462764 (:%e01tcfAddiii)       ;#00461DE5: 350 7A090000               v  00 00  1  57      
    jmp #00461F73                         ;#00461DEA: 351 84010000               v  00 00  1  58      
;   747                         elsif lti=#81 then
    cmp eax,129                           ;#00461DEF: 075 81000000               uv 00 01  1  59      
    jne #00461E74                         ;#00461DF4: 165 7E                     v  00 00  1  59      
;   748                             lti = linetab[i+1]*#100+linetab[i+2]
    mov ecx,[ebp-60] (i)                  ;#00461DF6: 213115 C4                  uv 02 20  1  60      
    add ecx,1                             ;#00461DF9: 203301 01                  uv 02 02  1  61 02   
    mov edi,ecx                           ;#00461DFC: 213371                     uv 80 02  1  62 02   
    lea ecx,[ebp-28] (symtab[1203])       ;#00461DFE: 215115 E4                  vu 02 20  1  62      
    mov esi,[ebp-12] (linetab)            ;#00461E01: 213165 F4                  uv 40 20  1  63      
    mov edx,1199                          ;#00461E04: 272 AF040000               vu 04 00  1  63      
    mov al,0                              ;#00461E09: 260 00                     uv 01 00  1  64      
    call #00460FE5 (:%pSubse1)            ;#00461E0B: 350 D5F1FFFF               v  00 00  1  64      
    lea edi,[ebp-68] (symtab[1213])       ;#00461E10: 215175 BC                  uv 80 20  1  65      
    mov ecx,[ebp-28] (symtab[1203])       ;#00461E13: 213115 E4                  vu 02 20  1  65      
    mov eax,[#004020E0] (MB_DEFBUTTON2)   ;#00461E16: 241 E0204000               uv 01 00  1  66      
    call #0045F412 (:%opMul)              ;#00461E1B: 350 F2D5FFFF               v  00 00  1  66      
    mov edi,[ebp-60] (i)                  ;#00461E20: 213175 C4                  uv 80 20  1  67      
    add edi,2                             ;#00461E23: 203307 02                  uv 80 80  1  68 80   
    lea ecx,[ebp-28] (symtab[1203])       ;#00461E26: 215115 E4                  vu 02 20  1  68      
    mov esi,[ebp-12] (linetab)            ;#00461E29: 213165 F4                  uv 40 20  1  69      
    mov edx,1199                          ;#00461E2C: 272 AF040000               vu 04 00  1  69      
    mov al,0                              ;#00461E31: 260 00                     uv 01 00  1  70      
    call #00460FE5 (:%pSubse1)            ;#00461E33: 350 ADF1FFFF               v  00 00  1  70      
    lea edi,[ebp-48] (lti)                ;#00461E38: 215175 D0                  uv 80 20  1  71      
    mov ecx,[ebp-68] (symtab[1213])       ;#00461E3B: 213115 BC                  vu 02 20  1  71      
    mov eax,[ebp-28] (symtab[1203])       ;#00461E3E: 213105 E4                  uv 01 20  1  72      
    call #0045F27A (:%opAddi)             ;#00461E41: 350 34D4FFFF               v  00 00  1  72      
;   749                             if lti>#7FFF then
    mov edi,[ebp-48] (lti)                ;#00461E46: 213175 D0                  uv 80 20  1  73      
    cmp edi,32767                         ;#00461E49: 201377 FF7F0000            uv 00 80  1  74 80   
    jle #00461E68                         ;#00461E4F: 176 17                     v  00 00  1  74      
;   750                                 lti -= #10000   -- (skip < -128)
    sub edi,65536                         ;#00461E51: 201357 00000100            uv 80 80  1  75      
    mov edx,edi                           ;#00461E57: 213327                     uv 04 80  1  76 80   
    mov [ebp-48] (lti),edi                ;#00461E59: 211175 D0                  vu 00 A0  1  76      
    shl edx,1                             ;#00461E5C: 321342                     u  04 04  1  77      
    jno #00461E68                         ;#00461E5E: 161 08                     v  00 00  1  77      
    lea edi,[ebp-48] (lti)                ;#00461E60: 215175 D0                  uv 80 20  1  78      
    call #00462764 (:%e01tcfAddiii)       ;#00461E63: 350 FC080000               v  00 00  1  78      
;   751                             end if
;   752                             skip = 2
    mov [ebp-40] (skip), dword 2          ;#00461E68: 307105 D8 02000000         uv 00 20  1  79      
    jmp #00461F73                         ;#00461E6F: 351 FF000000               v  00 00  1  79      
;   753                         elsif lti=#80 then
    cmp eax,128                           ;#00461E74: 075 80000000               uv 00 01  1  80      
    jne #00461F6E                         ;#00461E79: 017205 EF000000            v  00 00  1  80      
;   754                             lti = linetab[i+1]*#1000000+linetab[i+2]*#10000+linetab[i+3]*#100+linetab[i+4]
    mov esi,[ebp-60] (i)                  ;#00461E7F: 213165 C4                  uv 40 20  1  81      
    add esi,1                             ;#00461E82: 203306 01                  uv 40 40  1  82 40   
    mov edi,esi                           ;#00461E85: 213376                     uv 80 40  1  83 40   
    lea ecx,[ebp-28] (symtab[1203])       ;#00461E87: 215115 E4                  vu 02 20  1  83      
    mov esi,[ebp-12] (linetab)            ;#00461E8A: 213165 F4                  uv 40 20  1  84      
    mov edx,1199                          ;#00461E8D: 272 AF040000               vu 04 00  1  84      
    mov al,0                              ;#00461E92: 260 00                     uv 01 00  1  85      
    call #00460FE5 (:%pSubse1)            ;#00461E94: 350 4CF1FFFF               v  00 00  1  85      
    lea edi,[ebp-68] (symtab[1213])       ;#00461E99: 215175 BC                  uv 80 20  1  86      
    mov ecx,[ebp-28] (symtab[1203])       ;#00461E9C: 213115 E4                  vu 02 20  1  86      
    mov eax,[#004025E4]                   ;#00461E9F: 241 E4254000               uv 01 00  1  87      
    call #0045F412 (:%opMul)              ;#00461EA4: 350 69D5FFFF               v  00 00  1  87      
    mov edi,[ebp-60] (i)                  ;#00461EA9: 213175 C4                  uv 80 20  1  88      
    add edi,2                             ;#00461EAC: 203307 02                  uv 80 80  1  89 80   
    lea ecx,[ebp-28] (symtab[1203])       ;#00461EAF: 215115 E4                  vu 02 20  1  89      
    mov esi,[ebp-12] (linetab)            ;#00461EB2: 213165 F4                  uv 40 20  1  90      
    mov edx,1199                          ;#00461EB5: 272 AF040000               vu 04 00  1  90      
    mov al,0                              ;#00461EBA: 260 00                     uv 01 00  1  91      
    call #00460FE5 (:%pSubse1)            ;#00461EBC: 350 24F1FFFF               v  00 00  1  91      
    lea edi,[ebp-72] (symtab[1216])       ;#00461EC1: 215175 B8                  uv 80 20  1  92      
    mov ecx,[ebp-28] (symtab[1203])       ;#00461EC4: 213115 E4                  vu 02 20  1  92      
    mov eax,[MB_SETFOREGROUND]            ;#00461EC7: 241 EC204000               uv 01 00  1  93      
    call #0045F412 (:%opMul)              ;#00461ECC: 350 41D5FFFF               v  00 00  1  93      
    lea edi,[ebp-76] (symtab[1217])       ;#00461ED1: 215175 B4                  uv 80 20  1  94      
    mov ecx,[ebp-68] (symtab[1213])       ;#00461ED4: 213115 BC                  vu 02 20  1  94      
    mov eax,[ebp-72] (symtab[1216])       ;#00461ED7: 213105 B8                  uv 01 20  1  95      
    call #0045F261 (:%opAdd)              ;#00461EDA: 350 82D3FFFF               v  00 00  1  95      
    mov edi,[ebp-60] (i)                  ;#00461EDF: 213175 C4                  uv 80 20  1  96      
    add edi,3                             ;#00461EE2: 203307 03                  uv 80 80  1  97 80   
    lea ecx,[ebp-28] (symtab[1203])       ;#00461EE5: 215115 E4                  vu 02 20  1  97      
    mov esi,[ebp-12] (linetab)            ;#00461EE8: 213165 F4                  uv 40 20  1  98      
    mov edx,1199                          ;#00461EEB: 272 AF040000               vu 04 00  1  98      
    mov al,0                              ;#00461EF0: 260 00                     uv 01 00  1  99      
    call #00460FE5 (:%pSubse1)            ;#00461EF2: 350 EEF0FFFF               v  00 00  1  99      
    lea edi,[ebp-68] (symtab[1213])       ;#00461EF7: 215175 BC                  uv 80 20  1 100      
    mov ecx,[ebp-28] (symtab[1203])       ;#00461EFA: 213115 E4                  vu 02 20  1 100      
    mov eax,[#004020E0] (MB_DEFBUTTON2)   ;#00461EFD: 241 E0204000               uv 01 00  1 101      
    call #0045F412 (:%opMul)              ;#00461F02: 350 0BD5FFFF               v  00 00  1 101      
    lea edi,[ebp-72] (symtab[1216])       ;#00461F07: 215175 B8                  uv 80 20  1 102      
    mov ecx,[ebp-76] (symtab[1217])       ;#00461F0A: 213115 B4                  vu 02 20  1 102      
    mov eax,[ebp-68] (symtab[1213])       ;#00461F0D: 213105 BC                  uv 01 20  1 103      
    call #0045F261 (:%opAdd)              ;#00461F10: 350 4CD3FFFF               v  00 00  1 103      
    mov edi,[ebp-60] (i)                  ;#00461F15: 213175 C4                  uv 80 20  1 104      
    add edi,4                             ;#00461F18: 203307 04                  uv 80 80  1 105 80   
    lea ecx,[ebp-28] (symtab[1203])       ;#00461F1B: 215115 E4                  vu 02 20  1 105      
    mov esi,[ebp-12] (linetab)            ;#00461F1E: 213165 F4                  uv 40 20  1 106      
    mov edx,1199                          ;#00461F21: 272 AF040000               vu 04 00  1 106      
    mov al,0                              ;#00461F26: 260 00                     uv 01 00  1 107      
    call #00460FE5 (:%pSubse1)            ;#00461F28: 350 B8F0FFFF               v  00 00  1 107      
    lea edi,[ebp-48] (lti)                ;#00461F2D: 215175 D0                  uv 80 20  1 108      
    mov ecx,[ebp-72] (symtab[1216])       ;#00461F30: 213115 B8                  vu 02 20  1 108      
    mov eax,[ebp-28] (symtab[1203])       ;#00461F33: 213105 E4                  uv 01 20  1 109      
    call #0045F27A (:%opAddi)             ;#00461F36: 350 3FD3FFFF               v  00 00  1 109      
;   755                             if lti>#7FFFFFFF then
    mov edi,[#0040230C]                   ;#00461F3B: 213075 0C234000            uv 80 00  1 110      
    mov eax,[ebp-48] (lti)                ;#00461F41: 213105 D0                  vu 01 20  1 110      
    mov esi,698                           ;#00461F44: 276 BA020000               uv 40 00  1 111      
    mov edx,1208                          ;#00461F49: 272 B8040000               vu 04 00  1 111      
    call #0045F8B0 (:%opJcc)              ;#00461F4E: 350 5DD9FFFF               v  00 00  1 112      
    jle #00461F65                         ;#00461F53: 176 10                     v  00 00  1 113      
;   756                                 lti -= #100000000 -- (skip < -32,768?? [very rare, if ever])
    lea edi,[ebp-48] (lti)                ;#00461F55: 215175 D0                  uv 80 20  1 114      
    mov ecx,[ebp-48] (lti)                ;#00461F58: 213115 D0                  vu 02 20  1 114      
    mov eax,[#004025E8]                   ;#00461F5B: 241 E8254000               uv 01 00  1 115      
    call #0045F2B2 (:%opSubi)             ;#00461F60: 350 4DD3FFFF               v  00 00  1 115      
;   757                             end if
;   758                             skip = 4
    mov [ebp-40] (skip), dword 4          ;#00461F65: 307105 D8 04000000         uv 00 20  1 116      
    jmp #00461F73                         ;#00461F6C: 353 05                     v  00 00  1 116      
;   759                         else
;   760                             ?9/0    -- (sanity check, should never happen)
    call #004627B6 (:%pDiv0)              ;#00461F6E: 350 43080000               v  00 00  1 117      
;   761                         end if
;   762                     end if
;   763                     if lti<0 then       -- -n lines emitted no code
    mov esi,[ebp-48] (lti)                ;#00461F73: 213165 D0                  uv 40 20  1 118      
    cmp esi,0                             ;#00461F76: 203376 00                  uv 00 40  1 119 40   
    jge #00461F93                         ;#00461F79: 175 18                     v  00 00  1 119      
;   764                         linenxt -= lti
    mov edi,[ebp-36] (linenxt)            ;#00461F7B: 213175 DC                  uv 80 20  1 120      
    sub edi,esi                           ;#00461F7E: 051367                     uv 80 C0  1 121 80   
    mov edx,edi                           ;#00461F80: 213327                     uv 04 80  1 122 80   
    mov [ebp-36] (linenxt),edi            ;#00461F82: 211175 DC                  vu 00 A0  1 122      
    shl edx,1                             ;#00461F85: 321342                     u  04 04  1 123      
    jno #00461FED                         ;#00461F87: 161 64                     v  00 00  1 123      
    lea edi,[ebp-36] (linenxt)            ;#00461F89: 215175 DC                  uv 80 20  1 124      
    call #00462764 (:%e01tcfAddiii)       ;#00461F8C: 350 D3070000               v  00 00  1 124      
    jmp #00461FED                         ;#00461F91: 353 5A                     v  00 00  1 125      
;   765                     else                -- start offset of next line
;   766                         tmp = base
    mov ecx,[ebp-44] (base)               ;#00461F93: 213115 D4                  uv 02 20  1 126      
    mov [ebp-52] (tmp),ecx                ;#00461F96: 211115 CC                  uv 00 22  1 127 02   
;   767                         base += lti
    add ecx,esi                           ;#00461F99: 001361                     vu 02 42  1 127      
    mov edx,ecx                           ;#00461F9B: 213321                     uv 04 02  1 128      
    mov [ebp-44] (base),ecx               ;#00461F9D: 211115 D4                  vu 00 22  1 128      
    shl edx,1                             ;#00461FA0: 321342                     u  04 04  1 129      
    jno #00461FAC                         ;#00461FA2: 161 08                     v  00 00  1 129      
    lea edi,[ebp-44] (base)               ;#00461FA4: 215175 D4                  uv 80 20  1 130      
    call #00462764 (:%e01tcfAddiii)       ;#00461FA7: 350 B8070000               v  00 00  1 130      
;   768                         lti = tmp
    mov eax,[ebp-52] (tmp)                ;#00461FAC: 213105 CC                  uv 01 20  1 131      
    mov [ebp-48] (lti),eax                ;#00461FAF: 211105 D0                  uv 00 21  1 132 01   
;   769 --                              if returnoffset<=lti then exit end if   -- all done
;   770                         if returnoffset<lti then
    mov edi,eax                           ;#00461FB2: 211307                     vu 80 01  1 132      
    mov eax,[ebp-24] (returnoffset)       ;#00461FB4: 213105 E8                  uv 01 20  1 133      
    mov esi,1208                          ;#00461FB7: 276 B8040000               vu 40 00  1 133      
    mov edx,1202                          ;#00461FBC: 272 B2040000               uv 04 00  1 134      
    call #0045F8B0 (:%opJcc)              ;#00461FC1: 350 EAD8FFFF               v  00 00  1 134      
    jge #00461FD3                         ;#00461FC6: 175 0B                     v  00 00  1 135      
;   771                             lineno = thisline
    mov edi,[ebp-32] (thisline)           ;#00461FC8: 213175 E0                  uv 80 20  1 136      
    mov [ebp-8] (lineno),edi              ;#00461FCB: 211175 F8                  uv 00 A0  1 137 80   
;   772                             exit
    jmp #004620CE                         ;#00461FCE: 351 FB000000               v  00 00  1 137      
;   773                         end if  -- all done
;   774                         thisline = linenxt
    mov esi,[ebp-36] (linenxt)            ;#00461FD3: 213165 DC                  uv 40 20  1 138      
    mov [ebp-32] (thisline),esi           ;#00461FD6: 211165 E0                  uv 00 60  1 139 40   
;   775                         linenxt += 1
    add esi,1                             ;#00461FD9: 203306 01                  vu 40 40  1 139      
    mov edx,esi                           ;#00461FDC: 213326                     uv 04 40  1 140      
    mov [ebp-36] (linenxt),esi            ;#00461FDE: 211165 DC                  vu 00 60  1 140      
    shl edx,1                             ;#00461FE1: 321342                     u  04 04  1 141      
    jno #00461FED                         ;#00461FE3: 161 08                     v  00 00  1 141      
    lea edi,[ebp-36] (linenxt)            ;#00461FE5: 215175 DC                  uv 80 20  1 142      
    call #00462764 (:%e01tcfAddiii)       ;#00461FE8: 350 77070000               v  00 00  1 142      
;   776                     end if
;   777                 end if
;   778             end for
    mov ecx,[ebp-60] (i)                  ;#00461FED: 213115 C4                  uv 02 20  1 143      
    mov eax,[ebp-56] (symtab[1210])       ;#00461FF0: 213105 C8                  vu 01 20  1 143      
    add ecx,1                             ;#00461FF3: 203301 01                  uv 02 02  1 144      
    cmp ecx,eax                           ;#00461FF6: 073310                     uv 00 03  1 145 02   
    mov [ebp-60] (i),ecx                  ;#00461FF8: 211115 C4                  vu 00 22  1 145      
    jle #00461D89                         ;#00461FFB: 017216 88FDFFFF            v  00 00  1 146      
;   779         end if
    jmp #004620CE                         ;#00462001: 351 C8000000               v  00 00  1 147      
;   780     else -- interpreted (raw linetab, a dword-sequence, not converted to deltas/packed)
;   781 --      lineno = sr[S_1stl]
;   782 --      lastline = linetab[$]
;   783         if returnoffset<0 or returnoffset>=lastline then
    xor edi,edi                           ;#00462006: 061377                     uv 80 80  1 148      
    mov eax,[ebp-24] (returnoffset)       ;#00462008: 213105 E8                  vu 01 20  1 148      
    mov esi,25                            ;#0046200B: 276 19000000               uv 40 00  1 149      
    mov edx,1202                          ;#00462010: 272 B2040000               vu 04 00  1 149      
    call #0045F8B0 (:%opJcc)              ;#00462015: 350 96D8FFFF               v  00 00  1 150      
    jl #00462033                          ;#0046201A: 174 17                     v  00 00  1 151      
    mov edi,[ebp-20] (lastline)           ;#0046201C: 213175 EC                  uv 80 20  1 152      
    mov eax,[ebp-24] (returnoffset)       ;#0046201F: 213105 E8                  vu 01 20  1 152      
    mov esi,1201                          ;#00462022: 276 B1040000               uv 40 00  1 153      
    mov edx,1202                          ;#00462027: 272 B2040000               vu 04 00  1 153      
    call #0045F8B0 (:%opJcc)              ;#0046202C: 350 7FD8FFFF               v  00 00  1 154      
    jl #0046203F                          ;#00462031: 174 0C                     v  00 00  1 155      
;   784             lineno = -1
    mov [ebp-8] (lineno), dword -1        ;#00462033: 307105 F8 FFFFFFFF         uv 00 20  1 156      
    jmp #004620CE                         ;#0046203A: 351 8F000000               v  00 00  1 156      
;   785         else
;   786             linenxt = lineno
    mov esi,[ebp-8] (lineno)              ;#0046203F: 213165 F8                  uv 40 20  1 157      
    mov [ebp-36] (linenxt),esi            ;#00462042: 211165 DC                  uv 00 60  1 158 40   
;   787             for i=1 to length(linetab) do
    mov ecx,[ebp-12] (linetab)            ;#00462045: 213115 F4                  vu 02 20  1 158      
    mov edi,[ebx+ecx*4-12]                ;#00462048: 213174213 F4               uv 80 0A  1 161    *02*
    mov [ebp-64] (symtab[1212]),edi       ;#0046204C: 211175 C0                  uv 00 A0  1 162 80   
    mov [ebp-60] (i), dword 1             ;#0046204F: 307105 C4 01000000         vu 00 20  1 162      
    cmp edi,1                             ;#00462056: 201377 01000000            uv 00 80  1 163      
    jl #004620CE                          ;#0046205C: 174 70                     v  00 00  1 163      
;   788                 lti = linetab[i]
    mov edi,[ebp-60] (i)                  ;#0046205E: 213175 C4                  uv 80 20  1 164      
    lea ecx,[ebp-48] (lti)                ;#00462061: 215115 D0                  vu 02 20  1 164      
    mov esi,[ebp-12] (linetab)            ;#00462064: 213165 F4                  uv 40 20  1 165      
    mov edx,1199                          ;#00462067: 272 AF040000               vu 04 00  1 165      
    call #0046106B (:%pSubse1i)           ;#0046206C: 350 FAEFFFFF               v  00 00  1 166      
;   789                 if lti<0 then       -- -n lines emitted no code
    cmp eax,0                             ;#00462071: 203370 00                  uv 00 01  1 167      
    jge #0046208E                         ;#00462074: 175 18                     v  00 00  1 167      
;   790                     linenxt -= lti
    mov ecx,[ebp-36] (linenxt)            ;#00462076: 213115 DC                  uv 02 20  1 168      
    sub ecx,eax                           ;#00462079: 051301                     uv 02 03  1 169 02   
    mov edx,ecx                           ;#0046207B: 213321                     uv 04 02  1 170 02   
    mov [ebp-36] (linenxt),ecx            ;#0046207D: 211115 DC                  vu 00 22  1 170      
    shl edx,1                             ;#00462080: 321342                     u  04 04  1 171      
    jno #004620BE                         ;#00462082: 161 3A                     v  00 00  1 171      
    lea edi,[ebp-36] (linenxt)            ;#00462084: 215175 DC                  uv 80 20  1 172      
    call #00462764 (:%e01tcfAddiii)       ;#00462087: 350 D8060000               v  00 00  1 172      
    jmp #004620BE                         ;#0046208C: 353 30                     v  00 00  1 173      
;   791                 else                -- start offset of next line
;   792 --                          if returnoffset<=lti then exit end if   -- all done
;   793                     if returnoffset<lti then exit end if    -- all done
    mov edi,eax                           ;#0046208E: 211307                     uv 80 01  1 174      
    mov eax,[ebp-24] (returnoffset)       ;#00462090: 213105 E8                  vu 01 20  1 174      
    mov esi,1208                          ;#00462093: 276 B8040000               uv 40 00  1 175      
    mov edx,1202                          ;#00462098: 272 B2040000               vu 04 00  1 175      
    call #0045F8B0 (:%opJcc)              ;#0046209D: 350 0ED8FFFF               v  00 00  1 176      
    jl #004620CE                          ;#004620A2: 174 2A                     v  00 00  1 177      
;   794                     lineno = linenxt
    mov edi,[ebp-36] (linenxt)            ;#004620A4: 213175 DC                  uv 80 20  1 178      
    mov [ebp-8] (lineno),edi              ;#004620A7: 211175 F8                  uv 00 A0  1 179 80   
;   795                     linenxt += 1
    add edi,1                             ;#004620AA: 203307 01                  vu 80 80  1 179      
    mov edx,edi                           ;#004620AD: 213327                     uv 04 80  1 180      
    mov [ebp-36] (linenxt),edi            ;#004620AF: 211175 DC                  vu 00 A0  1 180      
    shl edx,1                             ;#004620B2: 321342                     u  04 04  1 181      
    jno #004620BE                         ;#004620B4: 161 08                     v  00 00  1 181      
    lea edi,[ebp-36] (linenxt)            ;#004620B6: 215175 DC                  uv 80 20  1 182      
    call #00462764 (:%e01tcfAddiii)       ;#004620B9: 350 A6060000               v  00 00  1 182      
;   796                 end if
;   797             end for
    mov esi,[ebp-60] (i)                  ;#004620BE: 213165 C4                  uv 40 20  1 183      
    mov ecx,[ebp-64] (symtab[1212])       ;#004620C1: 213115 C0                  vu 02 20  1 183      
    add esi,1                             ;#004620C4: 203306 01                  uv 40 40  1 184      
    cmp esi,ecx                           ;#004620C7: 073361                     uv 00 42  1 185 40   
    mov [ebp-60] (i),esi                  ;#004620C9: 211165 C4                  vu 00 60  1 185      
    jle #0046205E                         ;#004620CC: 176 90                     v  00 00  1 186      
;   798         end if
;   799     end if
;   800     return lineno
    mov eax,[ebp-8] (lineno)              ;#004620CE: 213105 F8                  uv 01 20  1 187      
    jmp #00462C8F (:%opRetf)              ;#004620D1: 351 B90B0000               v  00 00  1 187      
;   801 end function
;   802 
;   803 
;   804 --DEV should this just be a parameter to getVal?
;   805 --integer lc    -- limit counter (set to 500)
;   806 --integer showellipse -- set if lc blown
;   807 --integer novalue
;   808 
;   809 --constant
;   810 --  kernel32 = open_dll("kernel32.dll"),
;   811 --
;   812 --  C_PTR = C_POINTER,
;   813 --
;   814 ----#without reformat
;   815 --  xIsBadReadPtr = define_c_func(kernel32, "IsBadReadPtr",
;   816 --      {C_PTR,     --  CONST VOID  * lp,   // address of memory block
;   817 --       C_INT},    --  UINT  ucb   // size of block
;   818 --      C_INT)      -- BOOL
;   819 ----#with reformat
;   820 
;   821 procedure die()
;   822 -- a non-catchable fatal error.
;   823     -- first, kill any exception handler:
;   824     #ilASM{
;   825         [32]
;   826             mov [ebp+16],ebx    -- catch addr
                    mov [ebp+16],ebx      ;#004620D6: 211135 10                  uv 00 28  1   1      
;   827         [64]
;   828             mov [rbp+32],rbx    -- catch addr
;   829           }
;   830     ?9/0
    call #004627B6 (:%pDiv0)              ;#004620D9: 350 D8060000               v  00 00  1   1      
    jmp #00462C8F (:%opRetf)              ;#004620DE: 351 AC0B0000               v  00 00  1   2      
;   831 end procedure
;   832 
;   833 --now in psym.e:
;   834 --enum E_CODE, -- (atom) hardware and operating system exceptions usually have bit #800000000 set, user exceptions can be any atom value, even 0. 
;   835 --   E_ADDR, -- (atom) a machine address indicating where the exception ocurred.
;   836 --   E_LINE, -- (integer, optional) the source code line matching E_ADDR in E_RTN.
;   837 --   E_RTN,  -- (integer, optional) equivalent to routine_id(), an index to the symbol table identifying the routine.
;   838 --   E_NAME, -- (string|integer, optional) the human-readable name of E_RTN.
;   839 --   E_FILE, -- (string|integer, optional) the source filename containing E_NAME.
;   840 --   E_PATH, -- (string|integer, optional) the directory containing E_FILE.
;   841 --   E_USER  -- (object, optional) user defined/application specific content.
;   842 object throwee
;   843 
;   844 procedure throw(object e, object user_data={})
    mov edi,[ebp-4] (user_data)           ;#0046116B: 213175 FC                  uv 80 20  1   1      
    cmp edi,h4                            ;#0046116E: 201377 00000040            uv 00 80  1   2 80   
    jne #00461186                         ;#00461174: 165 10                     v  00 00  1   2      
    lea eax,[ebp-4] (user_data)           ;#00461176: 215105 FC                  uv 01 20  1   3      
    xor edx,edx                           ;#00461179: 061322                     vu 04 04  1   3      
    push #00461186                        ;#0046117B: 150 86114600               uv 00 00  1   4      
    push eax                              ;#00461180: 120                        vu 00 01  1   4      
    jmp #00460143 (:%pMkSq)               ;#00461181: 351 BDEFFFFF               v  00 00  1   5      
;   845 --
;   846 -- (invoked via :%pThrow, see below)
;   847 --  This is, of course, just a trigger - the real implementation(/challenge) 
;   848 --  of exception handling lies within the call stack and opTry/opCatch.
;   849 --
;   850 -- Note: the default of {} is actually provided in pmain.e, see T_throw.
;   851 --
;   852     throwee = 0
    mov edx,[#004025EC] (throwee)         ;#00461186: 213025 EC254000            uv 04 00  1   6      
    cmp edx,h4                            ;#0046118C: 201372 00000040            uv 00 04  1   7 04   
    mov [#004025EC] (throwee),ebx         ;#00461192: 211035 EC254000            vu 00 08  1   7      
    jle #004611A6                         ;#00461198: 176 0C                     v  00 00  1   8      
    sub dword[ebx+edx*4-8],1              ;#0046119A: 203154223 F8 01            u  00 0C  3   9      
    jne #004611A6                         ;#0046119F: 165 05                     v  00 00  1  11      
    call #004639A8 (:%pDealloc)           ;#004611A1: 350 02280000               v  00 00  1  12      
;   853     if user_data!={} then
    lea eax,[ebp-8] (symtab[1224])        ;#004611A6: 215105 F8                  uv 01 20  1  13      
    mov edx,0                             ;#004611A9: 272 00000000               vu 04 00  1  13      
    push #004611BC                        ;#004611AE: 150 BC114600               uv 00 00  1  14      
    push eax                              ;#004611B3: 120                        vu 00 01  1  14      
    mov edi,[ebp-8] (symtab[1224])        ;#004611B4: 213175 F8                  uv 80 20  1  15      
    jmp #00460143 (:%pMkSq)               ;#004611B7: 351 87EFFFFF               v  00 00  1  15      
    mov edi,[ebp-8] (symtab[1224])        ;#004611BC: 213175 F8                  uv 80 20  1  16      
    mov eax,[ebp-4] (user_data)           ;#004611BF: 213105 FC                  vu 01 20  1  16      
    mov esi,1224                          ;#004611C2: 276 C8040000               uv 40 00  1  17      
    mov edx,1223                          ;#004611C7: 272 C7040000               vu 04 00  1  17      
    call #0045F91F (:%opJccE)             ;#004611CC: 350 4EE7FFFF               v  00 00  1  18      
    je #004613B1                          ;#004611D1: 017204 DA010000            v  00 00  1  19      
;   854         if not atom(e) then
    mov esi,[ebp] (e)                     ;#004611D7: 213165 00                  uv 40 20  1  20      
    cmp esi,h4                            ;#004611DA: 201376 00000040            uv 00 40  1  21 40   
    jl #00461364                          ;#004611E0: 017214 7E010000            v  00 00  1  21      
    cmp byte[ebx+esi*4-1],#12             ;#004611E6: 200174263 FF 12            u  00 48  2  22      
    je #00461364                          ;#004611EB: 017204 73010000            v  00 00  1  23      
;   855             if string(e) and find('%',e) and sequence(user_data) then
    cmp esi,h4                            ;#004611F1: 201376 00000040            uv 00 40  1  24      
    jl #00461347                          ;#004611F7: 017214 4A010000            v  00 00  1  24      
    cmp byte[ebx+esi*4-1],#82             ;#004611FD: 200174263 FF 82            u  00 48  2  25      
    jne #00461347                         ;#00461202: 017205 3F010000            v  00 00  1  26      
    mov ecx,8                             ;#00461208: 271 08000000               uv 02 00  1  27      
    mov edx,110                           ;#0046120D: 272 6E000000               vu 04 00  1  27      
    call #00462C02 (:%opFrame) (find)     ;#00461212: 350 EB190000               v  00 00  1  28      
    mov [ebp] (needle), dword 37          ;#00461217: 307105 00 25000000         uv 00 20  1  29      
    mov edi,[ebp+20] (prevebp)            ;#0046121E: 213175 14                  vu 80 20  1  29      
    mov eax,[edi]                         ;#00461221: 213007                     uv 01 80  1  32    *80*
    xor ebx,ebx                           ;#00461223: 061333                     vu 08 08  1  32      
    cmp eax,h4                            ;#00461225: 075 00000040               uv 00 01  1  33      
    jl #00461236                          ;#0046122A: 174 0A                     v  00 00  1  33      
    add dword[ebx+eax*4-8],1              ;#0046122C: 203104203 F8 01            u  00 09  3  34      
    cmp eax,1222                          ;#00461231: 075 C6040000               vu 00 01  1  36      
    mov [ebp-4] (haystack),eax            ;#00461236: 211105 FC                  uv 00 21  1  37      
    mov [ebp+28] (retaddr),#00461245      ;#00461239: 307105 1C 45124600         vu 00 20  1  37      
    jmp #0045AADB (code:find)             ;#00461240: 351 9698FFFF               v  00 00  1  38      
    test eax,eax                          ;#00461245: 205300                     uv 00 01  1  39      
    je #00461347                          ;#00461247: 017204 FA000000            v  00 00  1  39      
    mov ecx,[ebp-4] (user_data)           ;#0046124D: 213115 FC                  uv 02 20  1  40      
    cmp ecx,h4                            ;#00461250: 201371 00000040            uv 00 02  1  41 02   
    jl #00461347                          ;#00461256: 017214 EB000000            v  00 00  1  41      
    test byte[ebx+ecx*4-1],#80            ;#0046125C: 366104213 FF 80            u  00 0A  2  42      
    je #00461347                          ;#00461261: 017204 E0000000            v  00 00  1  43      
;   856                 e = sprintf(e,user_data)
    mov ecx,2                             ;#00461267: 271 02000000               uv 02 00  1  44      
    mov edx,210                           ;#0046126C: 272 D2000000               vu 04 00  1  44      
    call #00462C02 (:%opFrame) (sprintf)  ;#00461271: 350 8C190000               v  00 00  1  45      
    mov edi,[ebp+20] (prevebp)            ;#00461276: 213175 14                  uv 80 20  1  46      
    mov eax,[edi]                         ;#00461279: 213007                     uv 01 80  1  49 80 *80*
    mov [edi], dword h4                   ;#0046127B: 307007 00000040            vu 00 80  1  49      
    cmp eax,h4                            ;#00461281: 075 00000040               uv 00 01  1  50      
    jne #00461292                         ;#00461286: 165 0A                     v  00 00  1  50      
    mov esi,1222                          ;#00461288: 276 C6040000               uv 40 00  1  51      
    call #00462744 (:%pUnassigned)        ;#0046128D: 350 B2140000               v  00 00  1  51      
    mov [ebp] (fmt),eax                   ;#00461292: 211105 00                  uv 00 21  1  52      
    mov edi,[ebp+20] (prevebp)            ;#00461295: 213175 14                  vu 80 20  1  52      
    mov eax,[edi-4]                       ;#00461298: 213107 FC                  uv 01 80  1  55    *80*
    xor ebx,ebx                           ;#0046129B: 061333                     vu 08 08  1  55      
    cmp eax,h4                            ;#0046129D: 075 00000040               uv 00 01  1  56      
    jl #004612AE                          ;#004612A2: 174 0A                     v  00 00  1  56      
    add dword[ebx+eax*4-8],1              ;#004612A4: 203104203 F8 01            u  00 09  3  57      
    cmp eax,1223                          ;#004612A9: 075 C7040000               vu 00 01  1  59      
    mov [ebp-4] (args),eax                ;#004612AE: 211105 FC                  uv 00 21  1  60      
    mov [ebp+28] (retaddr),#004612BD      ;#004612B1: 307105 1C BD124600         vu 00 20  1  60      
    jmp #00454E9A (code:sprintf)          ;#004612B8: 351 DD3BFFFF               v  00 00  1  61      
    push eax                              ;#004612BD: 120                        uv 00 01  1  62      
    mov edi,[ebp] (e)                     ;#004612BE: 213175 00                  vu 80 20  1  62      
    cmp edi,h4                            ;#004612C1: 201377 00000040            uv 00 80  1  63      
    jle #004612D7                         ;#004612C7: 176 0E                     v  00 00  1  63      
    sub dword[ebx+edi*4-8],1              ;#004612C9: 203154273 F8 01            u  00 88  3  64      
    jne #004612D7                         ;#004612CE: 165 07                     v  00 00  1  66      
    mov edx,edi                           ;#004612D0: 213327                     uv 04 80  1  67      
    call #004639A8 (:%pDealloc)           ;#004612D2: 350 D1260000               v  00 00  1  67      
    pop dword[ebp] (e)                    ;#004612D7: 217105 00                  np 00 20  3  68      
;   857                 throwee = e
    mov esi,[ebp] (e)                     ;#004612DA: 213165 00                  uv 40 20  1  71      
    mov edx,[#004025EC] (throwee)         ;#004612DD: 213025 EC254000            vu 04 00  1  71      
    cmp esi,h4                            ;#004612E3: 201376 00000040            uv 00 40  1  72      
    jl #004612F0                          ;#004612E9: 174 05                     v  00 00  1  72      
    add dword[ebx+esi*4-8],1              ;#004612EB: 203104263 F8 01            u  00 48  3  73      
    mov [#004025EC] (throwee),esi         ;#004612F0: 211065 EC254000            vu 00 40  1  75      
    cmp edx,h4                            ;#004612F6: 201372 00000040            uv 00 04  1  76      
    jle #0046130A                         ;#004612FC: 176 0C                     v  00 00  1  76      
    sub dword[ebx+edx*4-8],1              ;#004612FE: 203154223 F8 01            u  00 0C  3  77      
    jne #0046130A                         ;#00461303: 165 05                     v  00 00  1  79      
    call #004639A8 (:%pDealloc)           ;#00461305: 350 9E260000               v  00 00  1  80      
;   858                 e = {0,-1,-1,-1,-1,-1,-1,e}
    mov eax,ebp                           ;#0046130A: 213305                     uv 01 20  1  81      
    mov edx,8                             ;#0046130C: 272 08000000               vu 04 00  1  81      
    push #00461342                        ;#00461311: 150 42134600               uv 00 00  1  82      
    push eax                              ;#00461316: 120                        vu 00 01  1  82      
    mov ecx,[ebp] (e)                     ;#00461317: 213115 00                  uv 02 20  1  83      
    cmp ecx,h4                            ;#0046131A: 201371 00000040            uv 00 02  1  84 02   
    jl #0046132C                          ;#00461320: 174 0A                     v  00 00  1  84      
    add dword[ebx+ecx*4-8],1              ;#00461322: 203104213 F8 01            u  00 0A  3  85      
    cmp eax,1222                          ;#00461327: 075 C6040000               vu 00 01  1  87      
    push ecx                              ;#0046132C: 121                        uv 00 02  1  88      
    push -1                               ;#0046132D: 152 FF                     vu 00 00  1  88      
    push -1                               ;#0046132F: 152 FF                     uv 00 00  1  89      
    push -1                               ;#00461331: 152 FF                     vu 00 00  1  89      
    push -1                               ;#00461333: 152 FF                     uv 00 00  1  90      
    push -1                               ;#00461335: 152 FF                     vu 00 00  1  90      
    push -1                               ;#00461337: 152 FF                     uv 00 00  1  91      
    push 0                                ;#00461339: 152 00                     vu 00 00  1  91      
    mov edi,ecx                           ;#0046133B: 211317                     uv 80 02  1  92      
    jmp #00460143 (:%pMkSq)               ;#0046133D: 351 01EEFFFF               v  00 00  1  92      
    jmp #00461665                         ;#00461342: 351 1E030000               v  00 00  1  93      
;   859             else
;   860                 die()
    xor ecx,ecx                           ;#00461347: 061311                     uv 02 02  1  94      
    mov edx,1219                          ;#00461349: 272 C3040000               vu 04 00  1  94      
    call #00462C02 (:%opFrame) (die)      ;#0046134E: 350 AF180000               v  00 00  1  95      
    mov [ebp+28] (retaddr),#0046135F      ;#00461353: 307105 1C 5F134600         uv 00 20  1  96      
    jmp #004620D6 (code:die)              ;#0046135A: 351 770D0000               v  00 00  1  96      
;   861             end if
    jmp #00461665                         ;#0046135F: 351 01030000               v  00 00  1  97      
;   862         else
;   863             e = {e,-1,-1,-1,-1,-1,-1,user_data}
    mov eax,ebp                           ;#00461364: 213305                     uv 01 20  1  98      
    mov edx,8                             ;#00461366: 272 08000000               vu 04 00  1  98      
    push #004613AC                        ;#0046136B: 150 AC134600               uv 00 00  1  99      
    push eax                              ;#00461370: 120                        vu 00 01  1  99      
    mov eax,[ebp-4] (user_data)           ;#00461371: 213105 FC                  uv 01 20  1 100      
    cmp eax,h4                            ;#00461374: 075 00000040               uv 00 01  1 101 01   
    jl #00461385                          ;#00461379: 174 0A                     v  00 00  1 101      
    add dword[ebx+eax*4-8],1              ;#0046137B: 203104203 F8 01            u  00 09  3 102      
    cmp eax,1223                          ;#00461380: 075 C7040000               vu 00 01  1 104      
    push eax                              ;#00461385: 120                        uv 00 01  1 105      
    push -1                               ;#00461386: 152 FF                     vu 00 00  1 105      
    push -1                               ;#00461388: 152 FF                     uv 00 00  1 106      
    push -1                               ;#0046138A: 152 FF                     vu 00 00  1 106      
    push -1                               ;#0046138C: 152 FF                     uv 00 00  1 107      
    push -1                               ;#0046138E: 152 FF                     vu 00 00  1 107      
    push -1                               ;#00461390: 152 FF                     uv 00 00  1 108      
    cmp esi,h4                            ;#00461392: 201376 00000040            vu 00 40  1 108      
    jl #004613A4                          ;#00461398: 174 0A                     v  00 00  1 109      
    add dword[ebx+esi*4-8],1              ;#0046139A: 203104263 F8 01            u  00 48  3 110      
    cmp eax,1222                          ;#0046139F: 075 C6040000               vu 00 01  1 112      
    push esi                              ;#004613A4: 126                        uv 00 40  1 113      
    mov edi,esi                           ;#004613A5: 211367                     vu 80 40  1 113      
    jmp #00460143 (:%pMkSq)               ;#004613A7: 351 97EDFFFF               v  00 00  1 114      
;   864         end if
    jmp #00461665                         ;#004613AC: 351 B4020000               v  00 00  1 115      
;   865     elsif atom(e) then
    mov edi,[ebp] (e)                     ;#004613B1: 213175 00                  uv 80 20  1 116      
    cmp edi,h4                            ;#004613B4: 201377 00000040            uv 00 80  1 117 80   
    jl #004613C3                          ;#004613BA: 174 07                     v  00 00  1 117      
    cmp byte[ebx+edi*4-1],#12             ;#004613BC: 200174273 FF 12            u  00 88  2 118      
    jne #004613F9                         ;#004613C1: 165 36                     v  00 00  1 119      
;   866         e = {e,-1,-1,-1,-1,-1,-1}
    mov eax,ebp                           ;#004613C3: 213305                     uv 01 20  1 120      
    mov edx,7                             ;#004613C5: 272 07000000               vu 04 00  1 120      
    push #004613F4                        ;#004613CA: 150 F4134600               uv 00 00  1 121      
    push eax                              ;#004613CF: 120                        vu 00 01  1 121      
    push -1                               ;#004613D0: 152 FF                     uv 00 00  1 122      
    push -1                               ;#004613D2: 152 FF                     vu 00 00  1 122      
    push -1                               ;#004613D4: 152 FF                     uv 00 00  1 123      
    push -1                               ;#004613D6: 152 FF                     vu 00 00  1 123      
    push -1                               ;#004613D8: 152 FF                     uv 00 00  1 124      
    push -1                               ;#004613DA: 152 FF                     vu 00 00  1 124      
    cmp edi,h4                            ;#004613DC: 201377 00000040            uv 00 80  1 125      
    jl #004613EE                          ;#004613E2: 174 0A                     v  00 00  1 125      
    add dword[ebx+edi*4-8],1              ;#004613E4: 203104273 F8 01            u  00 88  3 126      
    cmp eax,1222                          ;#004613E9: 075 C6040000               vu 00 01  1 128      
    push edi                              ;#004613EE: 127                        uv 00 80  1 129      
    jmp #00460143 (:%pMkSq)               ;#004613EF: 351 4FEDFFFF               v  00 00  1 129      
    jmp #00461665                         ;#004613F4: 351 6C020000               v  00 00  1 130      
;   867     elsif string(e) then
    cmp edi,h4                            ;#004613F9: 201377 00000040            uv 00 80  1 131      
    jl #00461472                          ;#004613FF: 174 71                     v  00 00  1 131      
    cmp byte[ebx+edi*4-1],#82             ;#00461401: 200174273 FF 82            u  00 88  2 132      
    jne #00461472                         ;#00461406: 165 6A                     v  00 00  1 133      
;   868         throwee = e
    mov edx,[#004025EC] (throwee)         ;#00461408: 213025 EC254000            uv 04 00  1 134      
    cmp edi,h4                            ;#0046140E: 201377 00000040            vu 00 80  1 134      
    jl #0046141B                          ;#00461414: 174 05                     v  00 00  1 135      
    add dword[ebx+edi*4-8],1              ;#00461416: 203104273 F8 01            u  00 88  3 136      
    mov [#004025EC] (throwee),edi         ;#0046141B: 211075 EC254000            vu 00 80  1 138      
    cmp edx,h4                            ;#00461421: 201372 00000040            uv 00 04  1 139      
    jle #00461435                         ;#00461427: 176 0C                     v  00 00  1 139      
    sub dword[ebx+edx*4-8],1              ;#00461429: 203154223 F8 01            u  00 0C  3 140      
    jne #00461435                         ;#0046142E: 165 05                     v  00 00  1 142      
    call #004639A8 (:%pDealloc)           ;#00461430: 350 73250000               v  00 00  1 143      
;   869         e = {0,-1,-1,-1,-1,-1,-1,e}
    mov eax,ebp                           ;#00461435: 213305                     uv 01 20  1 144      
    mov edx,8                             ;#00461437: 272 08000000               vu 04 00  1 144      
    push #0046146D                        ;#0046143C: 150 6D144600               uv 00 00  1 145      
    push eax                              ;#00461441: 120                        vu 00 01  1 145      
    mov ecx,[ebp] (e)                     ;#00461442: 213115 00                  uv 02 20  1 146      
    cmp ecx,h4                            ;#00461445: 201371 00000040            uv 00 02  1 147 02   
    jl #00461457                          ;#0046144B: 174 0A                     v  00 00  1 147      
    add dword[ebx+ecx*4-8],1              ;#0046144D: 203104213 F8 01            u  00 0A  3 148      
    cmp eax,1222                          ;#00461452: 075 C6040000               vu 00 01  1 150      
    push ecx                              ;#00461457: 121                        uv 00 02  1 151      
    push -1                               ;#00461458: 152 FF                     vu 00 00  1 151      
    push -1                               ;#0046145A: 152 FF                     uv 00 00  1 152      
    push -1                               ;#0046145C: 152 FF                     vu 00 00  1 152      
    push -1                               ;#0046145E: 152 FF                     uv 00 00  1 153      
    push -1                               ;#00461460: 152 FF                     vu 00 00  1 153      
    push -1                               ;#00461462: 152 FF                     uv 00 00  1 154      
    push 0                                ;#00461464: 152 00                     vu 00 00  1 154      
    mov edi,ecx                           ;#00461466: 211317                     uv 80 02  1 155      
    jmp #00460143 (:%pMkSq)               ;#00461468: 351 D6ECFFFF               v  00 00  1 155      
    jmp #00461665                         ;#0046146D: 351 F3010000               v  00 00  1 156      
;   870     elsif length(e)<E_ADDR
    mov eax,[ebx+edi*4-12]                ;#00461472: 213104273 F4               uv 01 88  1 157      
    cmp eax,2                             ;#00461476: 203370 02                  uv 00 01  1 158 01   
    jl #0046164D                          ;#00461479: 017214 CE010000            v  00 00  1 158      
;   871        or not atom(e[E_CODE])
    mov edi,1                             ;#0046147F: 277 01000000               uv 80 00  1 159      
    lea ecx,[ebp-16] (symtab[1226])       ;#00461484: 215115 F0                  vu 02 20  1 159      
    mov esi,[ebp] (e)                     ;#00461487: 213165 00                  uv 40 20  1 160      
    mov edx,1222                          ;#0046148A: 272 C6040000               vu 04 00  1 160      
    mov al,0                              ;#0046148F: 260 00                     uv 01 00  1 161      
    call #00460FE5 (:%pSubse1)            ;#00461491: 350 4FFBFFFF               v  00 00  1 161      
    mov ecx,[ebp-16] (symtab[1226])       ;#00461496: 213115 F0                  uv 02 20  1 162      
    cmp ecx,h4                            ;#00461499: 201371 00000040            uv 00 02  1 163 02   
    jl #004614AC                          ;#0046149F: 174 0B                     v  00 00  1 163      
    cmp byte[ebx+ecx*4-1],#12             ;#004614A1: 200174213 FF 12            u  00 0A  2 164      
    jne #0046164D                         ;#004614A6: 017205 A1010000            v  00 00  1 165      
;   872        or not atom(e[E_ADDR])
    mov edi,2                             ;#004614AC: 277 02000000               uv 80 00  1 166      
    lea ecx,[ebp-16] (symtab[1226])       ;#004614B1: 215115 F0                  vu 02 20  1 166      
    mov esi,[ebp] (e)                     ;#004614B4: 213165 00                  uv 40 20  1 167      
    mov edx,1222                          ;#004614B7: 272 C6040000               vu 04 00  1 167      
    mov al,0                              ;#004614BC: 260 00                     uv 01 00  1 168      
    call #00460FE5 (:%pSubse1)            ;#004614BE: 350 22FBFFFF               v  00 00  1 168      
    mov edi,[ebp-16] (symtab[1226])       ;#004614C3: 213175 F0                  uv 80 20  1 169      
    cmp edi,h4                            ;#004614C6: 201377 00000040            uv 00 80  1 170 80   
    jl #004614D9                          ;#004614CC: 174 0B                     v  00 00  1 170      
    cmp byte[ebx+edi*4-1],#12             ;#004614CE: 200174273 FF 12            u  00 88  2 171      
    jne #0046164D                         ;#004614D3: 017205 74010000            v  00 00  1 172      
;   873        or (length(e)>=E_LINE and not integer(e[E_LINE]))
    mov eax,[ebp] (e)                     ;#004614D9: 213105 00                  uv 01 20  1 173      
    mov ecx,[ebx+eax*4-12]                ;#004614DC: 213114203 F4               uv 02 09  1 176 01 *01*
    cmp ecx,3                             ;#004614E0: 203371 03                  uv 00 02  1 177 02   
    jl #00461514                          ;#004614E3: 174 2F                     v  00 00  1 177      
    mov edi,3                             ;#004614E5: 277 03000000               uv 80 00  1 178      
    lea ecx,[ebp-16] (symtab[1226])       ;#004614EA: 215115 F0                  vu 02 20  1 178      
    mov esi,eax                           ;#004614ED: 211306                     uv 40 01  1 179      
    mov edx,1222                          ;#004614EF: 272 C6040000               vu 04 00  1 179      
    mov al,0                              ;#004614F4: 260 00                     uv 01 00  1 180      
    call #00460FE5 (:%pSubse1)            ;#004614F6: 350 EAFAFFFF               v  00 00  1 180      
    mov esi,[ebp-16] (symtab[1226])       ;#004614FB: 213165 F0                  uv 40 20  1 181      
    xor eax,eax                           ;#004614FE: 061300                     vu 01 01  1 181      
    cmp esi,h4                            ;#00461500: 201376 00000040            uv 00 40  1 182      
    setl al                               ;#00461506: 017234300                  np 01 00  2 183      
    mov [ebp-12] (symtab[1225]),eax       ;#00461509: 211105 F4                  uv 00 21  1 185      
    test eax,eax                          ;#0046150C: 205300                     vu 00 01  1 185      
    je #0046164D                          ;#0046150E: 017204 39010000            v  00 00  1 186      
;   874        or (length(e)>=E_RTN  and not integer(e[E_RTN]))
    mov edi,[ebp] (e)                     ;#00461514: 213175 00                  uv 80 20  1 187      
    mov ecx,[ebx+edi*4-12]                ;#00461517: 213114273 F4               uv 02 88  1 190 80 *80*
    cmp ecx,4                             ;#0046151B: 203371 04                  uv 00 02  1 191 02   
    jl #0046154F                          ;#0046151E: 174 2F                     v  00 00  1 191      
    mov edi,4                             ;#00461520: 277 04000000               uv 80 00  1 192      
    lea ecx,[ebp-16] (symtab[1226])       ;#00461525: 215115 F0                  vu 02 20  1 192      
    mov esi,[ebp] (e)                     ;#00461528: 213165 00                  uv 40 20  1 193      
    mov edx,1222                          ;#0046152B: 272 C6040000               vu 04 00  1 193      
    mov al,0                              ;#00461530: 260 00                     uv 01 00  1 194      
    call #00460FE5 (:%pSubse1)            ;#00461532: 350 AEFAFFFF               v  00 00  1 194      
    mov eax,[ebp-16] (symtab[1226])       ;#00461537: 213105 F0                  uv 01 20  1 195      
    xor ecx,ecx                           ;#0046153A: 061311                     vu 02 02  1 195      
    cmp eax,h4                            ;#0046153C: 075 00000040               uv 00 01  1 196      
    setl cl                               ;#00461541: 017234301                  np 02 00  2 197      
    mov [ebp-12] (symtab[1225]),ecx       ;#00461544: 211115 F4                  uv 00 22  1 199      
    test ecx,ecx                          ;#00461547: 205311                     vu 00 02  1 199      
    je #0046164D                          ;#00461549: 017204 FE000000            v  00 00  1 200      
;   875        or (length(e)>=E_NAME and not string(e[E_NAME]) and e[E_NAME]!=-1)
    mov edi,[ebp] (e)                     ;#0046154F: 213175 00                  uv 80 20  1 201      
    mov esi,[ebx+edi*4-12]                ;#00461552: 213164273 F4               uv 40 88  1 204 80 *80*
    cmp esi,5                             ;#00461556: 203376 05                  uv 00 40  1 205 40   
    jl #004615A6                          ;#00461559: 174 4B                     v  00 00  1 205      
    mov edi,5                             ;#0046155B: 277 05000000               uv 80 00  1 206      
    lea ecx,[ebp-16] (symtab[1226])       ;#00461560: 215115 F0                  vu 02 20  1 206      
    mov esi,[ebp] (e)                     ;#00461563: 213165 00                  uv 40 20  1 207      
    mov edx,1222                          ;#00461566: 272 C6040000               vu 04 00  1 207      
    mov al,0                              ;#0046156B: 260 00                     uv 01 00  1 208      
    call #00460FE5 (:%pSubse1)            ;#0046156D: 350 73FAFFFF               v  00 00  1 208      
    mov eax,[ebp-16] (symtab[1226])       ;#00461572: 213105 F0                  uv 01 20  1 209      
    cmp eax,h4                            ;#00461575: 075 00000040               uv 00 01  1 210 01   
    jl #00461583                          ;#0046157A: 174 07                     v  00 00  1 210      
    cmp byte[ebx+eax*4-1],#82             ;#0046157C: 200174203 FF 82            u  00 09  2 211      
    je #004615A6                          ;#00461581: 164 23                     v  00 00  1 212      
    mov edi,5                             ;#00461583: 277 05000000               uv 80 00  1 213      
    lea ecx,[ebp-16] (symtab[1226])       ;#00461588: 215115 F0                  vu 02 20  1 213      
    mov esi,[ebp] (e)                     ;#0046158B: 213165 00                  uv 40 20  1 214      
    mov edx,1222                          ;#0046158E: 272 C6040000               vu 04 00  1 214      
    mov al,0                              ;#00461593: 260 00                     uv 01 00  1 215      
    call #00460FE5 (:%pSubse1)            ;#00461595: 350 4BFAFFFF               v  00 00  1 215      
    mov ecx,[ebp-16] (symtab[1226])       ;#0046159A: 213115 F0                  uv 02 20  1 216      
    cmp ecx,-1                            ;#0046159D: 203371 FF                  uv 00 02  1 217 02   
    jne #0046164D                         ;#004615A0: 017205 A7000000            v  00 00  1 217      
;   876        or (length(e)>=E_FILE and not string(e[E_FILE]) and e[E_FILE]!=-1)
    mov edi,[ebp] (e)                     ;#004615A6: 213175 00                  uv 80 20  1 218      
    mov eax,[ebx+edi*4-12]                ;#004615A9: 213104273 F4               uv 01 88  1 221 80 *80*
    cmp eax,6                             ;#004615AD: 203370 06                  uv 00 01  1 222 01   
    jl #004615FA                          ;#004615B0: 174 48                     v  00 00  1 222      
    mov edi,6                             ;#004615B2: 277 06000000               uv 80 00  1 223      
    lea ecx,[ebp-16] (symtab[1226])       ;#004615B7: 215115 F0                  vu 02 20  1 223      
    mov esi,[ebp] (e)                     ;#004615BA: 213165 00                  uv 40 20  1 224      
    mov edx,1222                          ;#004615BD: 272 C6040000               vu 04 00  1 224      
    mov al,0                              ;#004615C2: 260 00                     uv 01 00  1 225      
    call #00460FE5 (:%pSubse1)            ;#004615C4: 350 1CFAFFFF               v  00 00  1 225      
    mov ecx,[ebp-16] (symtab[1226])       ;#004615C9: 213115 F0                  uv 02 20  1 226      
    cmp ecx,h4                            ;#004615CC: 201371 00000040            uv 00 02  1 227 02   
    jl #004615DB                          ;#004615D2: 174 07                     v  00 00  1 227      
    cmp byte[ebx+ecx*4-1],#82             ;#004615D4: 200174213 FF 82            u  00 0A  2 228      
    je #004615FA                          ;#004615D9: 164 1F                     v  00 00  1 229      
    mov edi,6                             ;#004615DB: 277 06000000               uv 80 00  1 230      
    lea ecx,[ebp-16] (symtab[1226])       ;#004615E0: 215115 F0                  vu 02 20  1 230      
    mov esi,[ebp] (e)                     ;#004615E3: 213165 00                  uv 40 20  1 231      
    mov edx,1222                          ;#004615E6: 272 C6040000               vu 04 00  1 231      
    mov al,0                              ;#004615EB: 260 00                     uv 01 00  1 232      
    call #00460FE5 (:%pSubse1)            ;#004615ED: 350 F3F9FFFF               v  00 00  1 232      
    mov edi,[ebp-16] (symtab[1226])       ;#004615F2: 213175 F0                  uv 80 20  1 233      
    cmp edi,-1                            ;#004615F5: 203377 FF                  uv 00 80  1 234 80   
    jne #0046164D                         ;#004615F8: 165 53                     v  00 00  1 234      
;   877        or (length(e)>=E_PATH and not string(e[E_PATH]) and e[E_PATH]!=-1) then
    mov eax,[ebp] (e)                     ;#004615FA: 213105 00                  uv 01 20  1 235      
    mov ecx,[ebx+eax*4-12]                ;#004615FD: 213114203 F4               uv 02 09  1 238 01 *01*
    cmp ecx,7                             ;#00461601: 203371 07                  uv 00 02  1 239 02   
    jl #00461665                          ;#00461604: 174 5F                     v  00 00  1 239      
    mov edi,7                             ;#00461606: 277 07000000               uv 80 00  1 240      
    lea ecx,[ebp-16] (symtab[1226])       ;#0046160B: 215115 F0                  vu 02 20  1 240      
    mov esi,eax                           ;#0046160E: 211306                     uv 40 01  1 241      
    mov edx,1222                          ;#00461610: 272 C6040000               vu 04 00  1 241      
    mov al,0                              ;#00461615: 260 00                     uv 01 00  1 242      
    call #00460FE5 (:%pSubse1)            ;#00461617: 350 C9F9FFFF               v  00 00  1 242      
    mov esi,[ebp-16] (symtab[1226])       ;#0046161C: 213165 F0                  uv 40 20  1 243      
    cmp esi,h4                            ;#0046161F: 201376 00000040            uv 00 40  1 244 40   
    jl #0046162E                          ;#00461625: 174 07                     v  00 00  1 244      
    cmp byte[ebx+esi*4-1],#82             ;#00461627: 200174263 FF 82            u  00 48  2 245      
    je #00461665                          ;#0046162C: 164 37                     v  00 00  1 246      
    mov edi,7                             ;#0046162E: 277 07000000               uv 80 00  1 247      
    lea ecx,[ebp-16] (symtab[1226])       ;#00461633: 215115 F0                  vu 02 20  1 247      
    mov esi,[ebp] (e)                     ;#00461636: 213165 00                  uv 40 20  1 248      
    mov edx,1222                          ;#00461639: 272 C6040000               vu 04 00  1 248      
    mov al,0                              ;#0046163E: 260 00                     uv 01 00  1 249      
    call #00460FE5 (:%pSubse1)            ;#00461640: 350 A0F9FFFF               v  00 00  1 249      
    mov edi,[ebp-16] (symtab[1226])       ;#00461645: 213175 F0                  uv 80 20  1 250      
    cmp edi,-1                            ;#00461648: 203377 FF                  uv 00 80  1 251 80   
    je #00461665                          ;#0046164B: 164 18                     v  00 00  1 251      
;   878         die()
    xor ecx,ecx                           ;#0046164D: 061311                     uv 02 02  1 252      
    mov edx,1219                          ;#0046164F: 272 C3040000               vu 04 00  1 252      
    call #00462C02 (:%opFrame) (die)      ;#00461654: 350 A9150000               v  00 00  1 253      
    mov [ebp+28] (retaddr),#00461665      ;#00461659: 307105 1C 65164600         uv 00 20  1 254      
    jmp #004620D6 (code:die)              ;#00461660: 351 710A0000               v  00 00  1 254      
;   879     end if
;   880 
;   881     while length(e)<E_PATH do e &= -1 end while
    lea edi,[ebp-12] (symtab[1225])       ;#00461665: 215175 F4                  uv 80 20  1 255      
    mov esi,[ebp] (e)                     ;#00461668: 213165 00                  vu 40 20  1 255      
    mov edx,1222                          ;#0046166B: 272 C6040000               uv 04 00  1 256      
    call #0045EFEC (:%opLen)              ;#00461670: 350 77D9FFFF               v  00 00  1 256      
    cmp ecx,7                             ;#00461675: 203371 07                  uv 00 02  1 257      
    jge #0046168A                         ;#00461678: 175 10                     v  00 00  1 257      
    mov edx,ebp                           ;#0046167A: 213325                     uv 04 20  1 258      
    mov edi,ebp                           ;#0046167C: 213375                     vu 80 20  1 258      
    mov ecx,#00402014                     ;#0046167E: 271 14204000               uv 02 00  1 259      
    call #0045FD65 (:%opConcat)           ;#00461683: 350 DDE6FFFF               v  00 00  1 259      
    jmp #00461665                         ;#00461688: 353 DB                     v  00 00  1 260      
;   882 
;   883     sequence symtab
;   884     #ilASM{
;   885         [32]
;   886             lea edi,[symtab]
                    lea edi,[ebp-20] (symtab)  ;#0046168A: 215175 EC                  uv 80 20  1 261      
;   887             call :%opGetST      -- [edi]=symtab (ie our local:=the real symtab)
                    call #00462AEB (:%opGetST)  ;#0046168D: 350 59140000               v  00 00  1 261      
;   888         [64]
;   889             lea rdi,[symtab]
;   890             call :%opGetST      -- [rdi]=symtab (ie our local:=the real symtab)
;   891         []
;   892           }
;   893 
;   894     integer rid = e[E_RTN]
    mov edi,4                             ;#00461692: 277 04000000               uv 80 00  1 262      
    lea ecx,[ebp-24] (rid)                ;#00461697: 215115 E8                  vu 02 20  1 262      
    mov esi,[ebp] (e)                     ;#0046169A: 213165 00                  uv 40 20  1 263      
    mov edx,1222                          ;#0046169D: 272 C6040000               vu 04 00  1 263      
    mov al,0                              ;#004616A2: 260 00                     uv 01 00  1 264      
    call #00460FE5 (:%pSubse1)            ;#004616A4: 350 3CF9FFFF               v  00 00  1 264      
;   895     if rid=-1 then              -- replace with the calling routine number
    cmp eax,-1                            ;#004616A9: 203370 FF                  uv 00 01  1 265      
    jne #004616CA                         ;#004616AC: 165 1C                     v  00 00  1 265      
;   896         #ilASM{
;   897             [32]
;   898                 mov eax,[ebp+20]    -- prev_ebp
                        mov eax,[ebp+20] (prevebp)  ;#004616AE: 213105 14                  uv 01 20  1 266      
;   899                 mov eax,[eax+8]     -- calling routine no
                        mov eax,[eax+8]   ;#004616B1: 213100 08                  uv 01 01  1 269 01 *01*
;   900                 mov [rid],eax
                        mov [ebp-24] (rid),eax  ;#004616B4: 211105 E8                  uv 00 21  1 270 01   
;   901             [64]
;   902                 mov rax,[rbp+40]    -- prev_ebp
;   903                 mov rax,[rax+16]    -- calling routine no
;   904                 mov [rid],rax
;   905               }
;   906         e[E_RTN] = rid
    mov edi,[#00402118] (E_RTN)           ;#004616B7: 213075 18214000            vu 80 00  1 270      
    mov ecx,[ebp-24] (rid)                ;#004616BD: 213115 E8                  uv 02 20  1 271      
    mov esi,[ebp] (e)                     ;#004616C0: 213165 00                  vu 40 20  1 271      
    mov eax,ebp                           ;#004616C3: 213305                     uv 01 20  1 272      
    call #004607F3 (:%pRepe1)             ;#004616C5: 350 29F1FFFF               v  00 00  1 272      
;   907     end if
;   908 
;   909     if rid>=1 and rid<=length(symtab)
    mov eax,[ebp-24] (rid)                ;#004616CA: 213105 E8                  uv 01 20  1 273      
    cmp eax,1                             ;#004616CD: 203370 01                  uv 00 01  1 274 01   
    jl #00461A5F                          ;#004616D0: 017214 89030000            v  00 00  1 274      
    lea edi,[ebp-12] (symtab[1225])       ;#004616D6: 215175 F4                  uv 80 20  1 275      
    mov esi,[ebp-20] (symtab)             ;#004616D9: 213165 EC                  vu 40 20  1 275      
    mov edx,1227                          ;#004616DC: 272 CB040000               uv 04 00  1 276      
    call #0045EFEC (:%opLen)              ;#004616E1: 350 06D9FFFF               v  00 00  1 276      
    cmp eax,ecx                           ;#004616E6: 071310                     uv 00 03  1 277      
    jg #00461A5F                          ;#004616E8: 017217 71030000            v  00 00  1 277      
;   910     and sequence(symtab[rid])
    cmp esi,h4                            ;#004616EE: 201376 00000040            uv 00 40  1 278      
    jne #00461700                         ;#004616F4: 165 0A                     v  00 00  1 278      
    mov esi,1227                          ;#004616F6: 276 CB040000               uv 40 00  1 279      
    call #00462744 (:%pUnassigned)        ;#004616FB: 350 44100000               v  00 00  1 279      
    mov edi,eax                           ;#00461700: 211307                     uv 80 01  1 280      
    lea ecx,[ebp-16] (symtab[1226])       ;#00461702: 215115 F0                  vu 02 20  1 280      
    mov edx,1227                          ;#00461705: 272 CB040000               uv 04 00  1 281      
    mov al,0                              ;#0046170A: 260 00                     vu 01 00  1 281      
    call #00460FE5 (:%pSubse1)            ;#0046170C: 350 D4F8FFFF               v  00 00  1 282      
    mov edi,[ebp-16] (symtab[1226])       ;#00461711: 213175 F0                  uv 80 20  1 283      
    cmp edi,h4                            ;#00461714: 201377 00000040            uv 00 80  1 284 80   
    jl #00461A5F                          ;#0046171A: 017214 3F030000            v  00 00  1 284      
    test byte[ebx+edi*4-1],#80            ;#00461720: 366104273 FF 80            u  00 88  2 285      
    je #00461A5F                          ;#00461725: 017204 34030000            v  00 00  1 286      
;   911     and symtab[rid][S_NTyp]>=S_Type then
    lea eax,[ebp-16] (symtab[1226])       ;#0046172B: 215105 F0                  uv 01 20  1 287      
    push #00461746                        ;#0046172E: 150 46174600               vu 00 00  1 287      
    push eax                              ;#00461733: 120                        uv 00 01  1 288      
    push 2                                ;#00461734: 152 02                     vu 00 00  1 288      
    push dword[ebp-24] (rid)              ;#00461736: 377165 E8                  np 00 20  2 289      
    mov ecx,2                             ;#00461739: 271 02000000               uv 02 00  1 291      
    lea edx,[ebp-20] (symtab)             ;#0046173E: 215125 EC                  vu 04 20  1 291      
    jmp #00460F1C (:%pSubse)              ;#00461741: 351 D6F7FFFF               v  00 00  1 292      
    mov edi,6                             ;#00461746: 277 06000000               uv 80 00  1 293      
    mov eax,[ebp-16] (symtab[1226])       ;#0046174B: 213105 F0                  vu 01 20  1 293      
    mov esi,1185                          ;#0046174E: 276 A1040000               uv 40 00  1 294      
    mov edx,1226                          ;#00461753: 272 CA040000               vu 04 00  1 294      
    call #0045F8B0 (:%opJcc)              ;#00461758: 350 53E1FFFF               v  00 00  1 295      
    jl #00461A5F                          ;#0046175D: 017214 FC020000            v  00 00  1 296      
;   912         if e[E_NAME]=-1 then
    mov edi,5                             ;#00461763: 277 05000000               uv 80 00  1 297      
    lea ecx,[ebp-16] (symtab[1226])       ;#00461768: 215115 F0                  vu 02 20  1 297      
    mov esi,[ebp] (e)                     ;#0046176B: 213165 00                  uv 40 20  1 298      
    mov edx,1222                          ;#0046176E: 272 C6040000               vu 04 00  1 298      
    mov al,0                              ;#00461773: 260 00                     uv 01 00  1 299      
    call #00460FE5 (:%pSubse1)            ;#00461775: 350 6BF8FFFF               v  00 00  1 299      
    mov ecx,[ebp-16] (symtab[1226])       ;#0046177A: 213115 F0                  uv 02 20  1 300      
    cmp ecx,-1                            ;#0046177D: 203371 FF                  uv 00 02  1 301 02   
    jne #0046181F                         ;#00461780: 017205 99000000            v  00 00  1 301      
;   913             object name = symtab[rid][S_Name]
    lea eax,[ebp-28] (name)               ;#00461786: 215105 E4                  uv 01 20  1 302      
    push #004617A1                        ;#00461789: 150 A1174600               vu 00 00  1 302      
    push eax                              ;#0046178E: 120                        uv 00 01  1 303      
    push 1                                ;#0046178F: 152 01                     vu 00 00  1 303      
    push dword[ebp-24] (rid)              ;#00461791: 377165 E8                  np 00 20  2 304      
    mov ecx,2                             ;#00461794: 271 02000000               uv 02 00  1 306      
    lea edx,[ebp-20] (symtab)             ;#00461799: 215125 EC                  vu 04 20  1 306      
    jmp #00460F1C (:%pSubse)              ;#0046179C: 351 7BF7FFFF               v  00 00  1 307      
;   914             if not string(name) then
    mov edi,[ebp-28] (name)               ;#004617A1: 213175 E4                  uv 80 20  1 308      
    cmp edi,h4                            ;#004617A4: 201377 00000040            uv 00 80  1 309 80   
    jl #004617B3                          ;#004617AA: 174 07                     v  00 00  1 309      
    cmp byte[ebx+edi*4-1],#82             ;#004617AC: 200174273 FF 82            u  00 88  2 310      
    je #0046180C                          ;#004617B1: 164 59                     v  00 00  1 311      
;   915                 name = sprint(name)
    mov ecx,13                            ;#004617B3: 271 0D000000               uv 02 00  1 312      
    mov edx,212                           ;#004617B8: 272 D4000000               vu 04 00  1 312      
    call #00462C02 (:%opFrame) (sprint)   ;#004617BD: 350 40140000               v  00 00  1 313      
    mov edi,[ebp+20] (prevebp)            ;#004617C2: 213175 14                  uv 80 20  1 314      
    mov eax,[edi-28]                      ;#004617C5: 213107 E4                  uv 01 80  1 317 80 *80*
    mov [edi-28], dword h4                ;#004617C8: 307107 E4 00000040         vu 00 80  1 317      
    cmp eax,h4                            ;#004617CF: 075 00000040               uv 00 01  1 318      
    jne #004617E0                         ;#004617D4: 165 0A                     v  00 00  1 318      
    mov esi,1229                          ;#004617D6: 276 CD040000               uv 40 00  1 319      
    call #00462744 (:%pUnassigned)        ;#004617DB: 350 640F0000               v  00 00  1 319      
    mov [ebp] (x),eax                     ;#004617E0: 211105 00                  uv 00 21  1 320      
    mov [ebp+28] (retaddr),#004617EF      ;#004617E3: 307105 1C EF174600         vu 00 20  1 320      
    jmp #0045471E (code:sprint)           ;#004617EA: 351 2F2FFFFF               v  00 00  1 321      
    push eax                              ;#004617EF: 120                        uv 00 01  1 322      
    mov esi,[ebp-28] (name)               ;#004617F0: 213165 E4                  vu 40 20  1 322      
    cmp esi,h4                            ;#004617F3: 201376 00000040            uv 00 40  1 323      
    jle #00461809                         ;#004617F9: 176 0E                     v  00 00  1 323      
    sub dword[ebx+esi*4-8],1              ;#004617FB: 203154263 F8 01            u  00 48  3 324      
    jne #00461809                         ;#00461800: 165 07                     v  00 00  1 326      
    mov edx,esi                           ;#00461802: 213326                     uv 04 40  1 327      
    call #004639A8 (:%pDealloc)           ;#00461804: 350 9F210000               v  00 00  1 327      
    pop dword[ebp-28] (name)              ;#00461809: 217105 E4                  np 00 20  3 328      
;   916             end if
;   917             e[E_NAME] = name
    mov edi,[#0040211C] (E_NAME)          ;#0046180C: 213075 1C214000            uv 80 00  1 331      
    mov ecx,[ebp-28] (name)               ;#00461812: 213115 E4                  vu 02 20  1 331      
    mov esi,[ebp] (e)                     ;#00461815: 213165 00                  uv 40 20  1 332      
    mov eax,ebp                           ;#00461818: 213305                     vu 01 20  1 332      
    call #004607F3 (:%pRepe1)             ;#0046181A: 350 D4EFFFFF               v  00 00  1 333      
;   918         end if
;   919         if e[E_FILE]=-1 then
    mov edi,6                             ;#0046181F: 277 06000000               uv 80 00  1 334      
    lea ecx,[ebp-16] (symtab[1226])       ;#00461824: 215115 F0                  vu 02 20  1 334      
    mov esi,[ebp] (e)                     ;#00461827: 213165 00                  uv 40 20  1 335      
    mov edx,1222                          ;#0046182A: 272 C6040000               vu 04 00  1 335      
    mov al,0                              ;#0046182F: 260 00                     uv 01 00  1 336      
    call #00460FE5 (:%pSubse1)            ;#00461831: 350 AFF7FFFF               v  00 00  1 336      
    mov eax,[ebp-16] (symtab[1226])       ;#00461836: 213105 F0                  uv 01 20  1 337      
    cmp eax,-1                            ;#00461839: 203370 FF                  uv 00 01  1 338 01   
    jne #00461B05                         ;#0046183C: 017205 C3020000            v  00 00  1 338      
;   920             integer fno = symtab[rid][S_FPno]
    lea eax,[ebp-32] (fno)                ;#00461842: 215105 E0                  uv 01 20  1 339      
    push #0046185D                        ;#00461845: 150 5D184600               vu 00 00  1 339      
    push eax                              ;#0046184A: 120                        uv 00 01  1 340      
    push 3                                ;#0046184B: 152 03                     vu 00 00  1 340      
    push dword[ebp-24] (rid)              ;#0046184D: 377165 E8                  np 00 20  2 341      
    mov ecx,2                             ;#00461850: 271 02000000               uv 02 00  1 343      
    lea edx,[ebp-20] (symtab)             ;#00461855: 215125 EC                  vu 04 20  1 343      
    jmp #00460F1C (:%pSubse)              ;#00461858: 351 BFF6FFFF               v  00 00  1 344      
;   921             if fno<1 or fno>length(symtab[T_fileset]) then
    cmp eax,1                             ;#0046185D: 203370 01                  uv 00 01  1 345      
    jl #004618C6                          ;#00461860: 174 64                     v  00 00  1 345      
    mov edi,[ebp-20] (symtab)             ;#00461862: 213175 EC                  uv 80 20  1 346      
    cmp edi,h4                            ;#00461865: 201377 00000040            uv 00 80  1 347 80   
    jne #00461877                         ;#0046186B: 165 0A                     v  00 00  1 347      
    mov esi,1227                          ;#0046186D: 276 CB040000               uv 40 00  1 348      
    call #00462744 (:%pUnassigned)        ;#00461872: 350 CD0E0000               v  00 00  1 348      
    mov edi,17                            ;#00461877: 277 11000000               uv 80 00  1 349      
    lea ecx,[ebp-16] (symtab[1226])       ;#0046187C: 215115 F0                  vu 02 20  1 349      
    mov esi,[ebp-20] (symtab)             ;#0046187F: 213165 EC                  uv 40 20  1 350      
    mov edx,1227                          ;#00461882: 272 CB040000               vu 04 00  1 350      
    mov al,0                              ;#00461887: 260 00                     uv 01 00  1 351      
    call #00460FE5 (:%pSubse1)            ;#00461889: 350 57F7FFFF               v  00 00  1 351      
    lea edi,[ebp-12] (symtab[1225])       ;#0046188E: 215175 F4                  uv 80 20  1 352      
    mov esi,[ebp-16] (symtab[1226])       ;#00461891: 213165 F0                  vu 40 20  1 352      
    mov edx,1226                          ;#00461894: 272 CA040000               uv 04 00  1 353      
    call #0045EFEC (:%opLen)              ;#00461899: 350 4ED7FFFF               v  00 00  1 353      
    mov edx,[ebp-16] (symtab[1226])       ;#0046189E: 213125 F0                  uv 04 20  1 354      
    cmp edx,h4                            ;#004618A1: 201372 00000040            uv 00 04  1 355 04   
    mov [ebp-16] (symtab[1226]),ebx       ;#004618A7: 211135 F0                  vu 00 28  1 355      
    jle #004618B8                         ;#004618AA: 176 0C                     v  00 00  1 356      
    sub dword[ebx+edx*4-8],1              ;#004618AC: 203154223 F8 01            u  00 0C  3 357      
    jne #004618B8                         ;#004618B1: 165 05                     v  00 00  1 359      
    call #004639A8 (:%pDealloc)           ;#004618B3: 350 F0200000               v  00 00  1 360      
    mov eax,[ebp-32] (fno)                ;#004618B8: 213105 E0                  uv 01 20  1 361      
    mov edi,[ebp-12] (symtab[1225])       ;#004618BB: 213175 F4                  vu 80 20  1 361      
    cmp eax,edi                           ;#004618BE: 071370                     uv 00 81  1 362      
    jle #00461980                         ;#004618C0: 017216 BA000000            v  00 00  1 362      
;   922                 e[E_FILE] = sprintf("?? (fno=%d)",{fno})    -- should not happen!
    lea eax,[ebp-8] (symtab[1224])        ;#004618C6: 215105 F8                  uv 01 20  1 363      
    mov edx,1                             ;#004618C9: 272 01000000               vu 04 00  1 363      
    push #004618DF                        ;#004618CE: 150 DF184600               uv 00 00  1 364      
    push eax                              ;#004618D3: 120                        vu 00 01  1 364      
    push dword[ebp-32] (fno)              ;#004618D4: 377165 E0                  np 00 20  2 365      
    mov edi,[ebp-8] (symtab[1224])        ;#004618D7: 213175 F8                  uv 80 20  1 367      
    jmp #00460143 (:%pMkSq)               ;#004618DA: 351 64E8FFFF               v  00 00  1 367      
    mov ecx,2                             ;#004618DF: 271 02000000               uv 02 00  1 368      
    mov edx,210                           ;#004618E4: 272 D2000000               vu 04 00  1 368      
    call #00462C02 (:%opFrame) (sprintf)  ;#004618E9: 350 14130000               v  00 00  1 369      
    mov esi,[#004025F0]                   ;#004618EE: 213065 F0254000            uv 40 00  1 370      
    mov [ebp] (fmt),esi                   ;#004618F4: 211165 00                  uv 00 60  1 371 40   
    add dword[ebx+esi*4-8],1              ;#004618F7: 203104263 F8 01            u  00 48  3 373    *40*
    mov edi,[ebp+20] (prevebp)            ;#004618FC: 213175 14                  vu 80 20  1 375      
    mov eax,[edi-8]                       ;#004618FF: 213107 F8                  uv 01 80  1 378    *80*
    mov [edi-8], dword h4                 ;#00461902: 307107 F8 00000040         vu 00 80  1 378      
    cmp eax,h4                            ;#00461909: 075 00000040               uv 00 01  1 379      
    jne #0046191A                         ;#0046190E: 165 0A                     v  00 00  1 379      
    mov esi,1224                          ;#00461910: 276 C8040000               uv 40 00  1 380      
    call #00462744 (:%pUnassigned)        ;#00461915: 350 2A0E0000               v  00 00  1 380      
    mov [ebp-4] (args),eax                ;#0046191A: 211105 FC                  uv 00 21  1 381      
    mov [ebp+28] (retaddr),#00461929      ;#0046191D: 307105 1C 29194600         vu 00 20  1 381      
    jmp #00454E9A (code:sprintf)          ;#00461924: 351 7135FFFF               v  00 00  1 382      
    push eax                              ;#00461929: 120                        uv 00 01  1 383      
    mov ecx,[ebp-36] (symtab[1232])       ;#0046192A: 213115 DC                  vu 02 20  1 383      
    cmp ecx,h4                            ;#0046192D: 201371 00000040            uv 00 02  1 384      
    jle #00461943                         ;#00461933: 176 0E                     v  00 00  1 384      
    sub dword[ebx+ecx*4-8],1              ;#00461935: 203154213 F8 01            u  00 0A  3 385      
    jne #00461943                         ;#0046193A: 165 07                     v  00 00  1 387      
    mov edx,ecx                           ;#0046193C: 213321                     uv 04 02  1 388      
    call #004639A8 (:%pDealloc)           ;#0046193E: 350 65200000               v  00 00  1 388      
    pop dword[ebp-36] (symtab[1232])      ;#00461943: 217105 DC                  np 00 20  3 389      
    mov edi,[#00402120] (E_FILE)          ;#00461946: 213075 20214000            uv 80 00  1 392      
    mov ecx,[ebp-36] (symtab[1232])       ;#0046194C: 213115 DC                  vu 02 20  1 392      
    mov esi,[ebp] (e)                     ;#0046194F: 213165 00                  uv 40 20  1 393      
    mov eax,ebp                           ;#00461952: 213305                     vu 01 20  1 393      
    call #004607F3 (:%pRepe1)             ;#00461954: 350 9AEEFFFF               v  00 00  1 394      
    mov edx,[ebp-36] (symtab[1232])       ;#00461959: 213125 DC                  uv 04 20  1 395      
    cmp edx,h4                            ;#0046195C: 201372 00000040            uv 00 04  1 396 04   
    mov [ebp-36] (symtab[1232]),ebx       ;#00461962: 211135 DC                  vu 00 28  1 396      
    jle #00461B05                         ;#00461965: 017216 9A010000            v  00 00  1 397      
    sub dword[ebx+edx*4-8],1              ;#0046196B: 203154223 F8 01            u  00 0C  3 398      
    jne #00461B05                         ;#00461970: 017205 8F010000            v  00 00  1 400      
    call #004639A8 (:%pDealloc)           ;#00461976: 350 2D200000               v  00 00  1 401      
    jmp #00461B05                         ;#0046197B: 351 85010000               v  00 00  1 402      
;   923             else
;   924                 e[E_FILE] = symtab[T_fileset][fno][2]
    lea eax,[ebp-16] (symtab[1226])       ;#00461980: 215105 F0                  uv 01 20  1 403      
    push #0046199D                        ;#00461983: 150 9D194600               vu 00 00  1 403      
    push eax                              ;#00461988: 120                        uv 00 01  1 404      
    push 2                                ;#00461989: 152 02                     vu 00 00  1 404      
    push dword[ebp-32] (fno)              ;#0046198B: 377165 E0                  np 00 20  2 405      
    push 17                               ;#0046198E: 152 11                     uv 00 00  1 407      
    mov ecx,3                             ;#00461990: 271 03000000               vu 02 00  1 407      
    lea edx,[ebp-20] (symtab)             ;#00461995: 215125 EC                  uv 04 20  1 408      
    jmp #00460F1C (:%pSubse)              ;#00461998: 351 7FF5FFFF               v  00 00  1 408      
    mov edi,[#00402120] (E_FILE)          ;#0046199D: 213075 20214000            uv 80 00  1 409      
    mov ecx,[ebp-16] (symtab[1226])       ;#004619A3: 213115 F0                  vu 02 20  1 409      
    mov esi,[ebp] (e)                     ;#004619A6: 213165 00                  uv 40 20  1 410      
    mov eax,ebp                           ;#004619A9: 213305                     vu 01 20  1 410      
    call #004607F3 (:%pRepe1)             ;#004619AB: 350 43EEFFFF               v  00 00  1 411      
    mov edx,[ebp-16] (symtab[1226])       ;#004619B0: 213125 F0                  uv 04 20  1 412      
    cmp edx,h4                            ;#004619B3: 201372 00000040            uv 00 04  1 413 04   
    mov [ebp-16] (symtab[1226]),ebx       ;#004619B9: 211135 F0                  vu 00 28  1 413      
    jle #004619CA                         ;#004619BC: 176 0C                     v  00 00  1 414      
    sub dword[ebx+edx*4-8],1              ;#004619BE: 203154223 F8 01            u  00 0C  3 415      
    jne #004619CA                         ;#004619C3: 165 05                     v  00 00  1 417      
    call #004639A8 (:%pDealloc)           ;#004619C5: 350 DE1F0000               v  00 00  1 418      
;   925                 if e[E_PATH]=-1 then
    mov edi,7                             ;#004619CA: 277 07000000               uv 80 00  1 419      
    lea ecx,[ebp-16] (symtab[1226])       ;#004619CF: 215115 F0                  vu 02 20  1 419      
    mov esi,[ebp] (e)                     ;#004619D2: 213165 00                  uv 40 20  1 420      
    mov edx,1222                          ;#004619D5: 272 C6040000               vu 04 00  1 420      
    mov al,0                              ;#004619DA: 260 00                     uv 01 00  1 421      
    call #00460FE5 (:%pSubse1)            ;#004619DC: 350 04F6FFFF               v  00 00  1 421      
    mov eax,[ebp-16] (symtab[1226])       ;#004619E1: 213105 F0                  uv 01 20  1 422      
    cmp eax,-1                            ;#004619E4: 203370 FF                  uv 00 01  1 423 01   
    jne #00461B05                         ;#004619E7: 017205 18010000            v  00 00  1 423      
;   926                     e[E_PATH] = symtab[T_pathset][symtab[T_fileset][fno][1]]
    lea eax,[ebp-16] (symtab[1226])       ;#004619ED: 215105 F0                  uv 01 20  1 424      
    push #00461A0A                        ;#004619F0: 150 0A1A4600               vu 00 00  1 424      
    push eax                              ;#004619F5: 120                        uv 00 01  1 425      
    push 1                                ;#004619F6: 152 01                     vu 00 00  1 425      
    push dword[ebp-32] (fno)              ;#004619F8: 377165 E0                  np 00 20  2 426      
    push 17                               ;#004619FB: 152 11                     uv 00 00  1 428      
    mov ecx,3                             ;#004619FD: 271 03000000               vu 02 00  1 428      
    lea edx,[ebp-20] (symtab)             ;#00461A02: 215125 EC                  uv 04 20  1 429      
    jmp #00460F1C (:%pSubse)              ;#00461A05: 351 12F5FFFF               v  00 00  1 429      
    lea eax,[ebp-40] (symtab[1233])       ;#00461A0A: 215105 D8                  uv 01 20  1 430      
    push #00461A25                        ;#00461A0D: 150 251A4600               vu 00 00  1 430      
    push eax                              ;#00461A12: 120                        uv 00 01  1 431      
    push dword[ebp-16] (symtab[1226])     ;#00461A13: 377165 F0                  np 00 20  2 432      
    push 16                               ;#00461A16: 152 10                     uv 00 00  1 434      
    mov ecx,2                             ;#00461A18: 271 02000000               vu 02 00  1 434      
    lea edx,[ebp-20] (symtab)             ;#00461A1D: 215125 EC                  uv 04 20  1 435      
    jmp #00460F1C (:%pSubse)              ;#00461A20: 351 F7F4FFFF               v  00 00  1 435      
    mov edi,[#00402124] (E_PATH)          ;#00461A25: 213075 24214000            uv 80 00  1 436      
    mov ecx,[ebp-40] (symtab[1233])       ;#00461A2B: 213115 D8                  vu 02 20  1 436      
    mov esi,[ebp] (e)                     ;#00461A2E: 213165 00                  uv 40 20  1 437      
    mov eax,ebp                           ;#00461A31: 213305                     vu 01 20  1 437      
    call #004607F3 (:%pRepe1)             ;#00461A33: 350 BBEDFFFF               v  00 00  1 438      
    mov edx,[ebp-40] (symtab[1233])       ;#00461A38: 213125 D8                  uv 04 20  1 439      
    cmp edx,h4                            ;#00461A3B: 201372 00000040            uv 00 04  1 440 04   
    mov [ebp-40] (symtab[1233]),ebx       ;#00461A41: 211135 D8                  vu 00 28  1 440      
    jle #00461B05                         ;#00461A44: 017216 BB000000            v  00 00  1 441      
    sub dword[ebx+edx*4-8],1              ;#00461A4A: 203154223 F8 01            u  00 0C  3 442      
    jne #00461B05                         ;#00461A4F: 017205 B0000000            v  00 00  1 444      
    call #004639A8 (:%pDealloc)           ;#00461A55: 350 4E1F0000               v  00 00  1 445      
;   927                 end if
;   928             end if
;   929         end if
    jmp #00461B05                         ;#00461A5A: 351 A6000000               v  00 00  1 446      
;   930     elsif e[E_NAME]=-1 then
    mov edi,5                             ;#00461A5F: 277 05000000               uv 80 00  1 447      
    lea ecx,[ebp-40] (symtab[1233])       ;#00461A64: 215115 D8                  vu 02 20  1 447      
    mov esi,[ebp] (e)                     ;#00461A67: 213165 00                  uv 40 20  1 448      
    mov edx,1222                          ;#00461A6A: 272 C6040000               vu 04 00  1 448      
    mov al,0                              ;#00461A6F: 260 00                     uv 01 00  1 449      
    call #00460FE5 (:%pSubse1)            ;#00461A71: 350 6FF5FFFF               v  00 00  1 449      
    mov eax,[ebp-40] (symtab[1233])       ;#00461A76: 213105 D8                  uv 01 20  1 450      
    cmp eax,-1                            ;#00461A79: 203370 FF                  uv 00 01  1 451 01   
    jne #00461B05                         ;#00461A7C: 017205 83000000            v  00 00  1 451      
;   931         e[E_NAME] = sprintf("?? (rid=%d)",rid)  -- should not happen!
    mov ecx,2                             ;#00461A82: 271 02000000               uv 02 00  1 452      
    mov edx,210                           ;#00461A87: 272 D2000000               vu 04 00  1 452      
    call #00462C02 (:%opFrame) (sprintf)  ;#00461A8C: 350 71110000               v  00 00  1 453      
    mov edi,[#004025F4]                   ;#00461A91: 213075 F4254000            uv 80 00  1 454      
    mov [ebp] (fmt),edi                   ;#00461A97: 211175 00                  uv 00 A0  1 455 80   
    add dword[ebx+edi*4-8],1              ;#00461A9A: 203104273 F8 01            u  00 88  3 457    *80*
    mov edi,[ebp+20] (prevebp)            ;#00461A9F: 213175 14                  vu 80 20  1 459      
    mov eax,[edi-24]                      ;#00461AA2: 213107 E8                  uv 01 80  1 462    *80*
    mov [ebp-4] (args),eax                ;#00461AA5: 211105 FC                  uv 00 21  1 463 01   
    mov [ebp+28] (retaddr),#00461AB4      ;#00461AA8: 307105 1C B41A4600         vu 00 20  1 463      
    jmp #00454E9A (code:sprintf)          ;#00461AAF: 351 E633FFFF               v  00 00  1 464      
    push eax                              ;#00461AB4: 120                        uv 00 01  1 465      
    mov ecx,[ebp-36] (symtab[1232])       ;#00461AB5: 213115 DC                  vu 02 20  1 465      
    cmp ecx,h4                            ;#00461AB8: 201371 00000040            uv 00 02  1 466      
    jle #00461ACE                         ;#00461ABE: 176 0E                     v  00 00  1 466      
    sub dword[ebx+ecx*4-8],1              ;#00461AC0: 203154213 F8 01            u  00 0A  3 467      
    jne #00461ACE                         ;#00461AC5: 165 07                     v  00 00  1 469      
    mov edx,ecx                           ;#00461AC7: 213321                     uv 04 02  1 470      
    call #004639A8 (:%pDealloc)           ;#00461AC9: 350 DA1E0000               v  00 00  1 470      
    pop dword[ebp-36] (symtab[1232])      ;#00461ACE: 217105 DC                  np 00 20  3 471      
    mov edi,[#0040211C] (E_NAME)          ;#00461AD1: 213075 1C214000            uv 80 00  1 474      
    mov ecx,[ebp-36] (symtab[1232])       ;#00461AD7: 213115 DC                  vu 02 20  1 474      
    mov esi,[ebp] (e)                     ;#00461ADA: 213165 00                  uv 40 20  1 475      
    mov eax,ebp                           ;#00461ADD: 213305                     vu 01 20  1 475      
    call #004607F3 (:%pRepe1)             ;#00461ADF: 350 0FEDFFFF               v  00 00  1 476      
    mov edx,[ebp-36] (symtab[1232])       ;#00461AE4: 213125 DC                  uv 04 20  1 477      
    cmp edx,h4                            ;#00461AE7: 201372 00000040            uv 00 04  1 478 04   
    mov [ebp-36] (symtab[1232]),ebx       ;#00461AED: 211135 DC                  vu 00 28  1 478      
    jle #00461AFE                         ;#00461AF0: 176 0C                     v  00 00  1 479      
    sub dword[ebx+edx*4-8],1              ;#00461AF2: 203154223 F8 01            u  00 0C  3 480      
    jne #00461AFE                         ;#00461AF7: 165 05                     v  00 00  1 482      
    call #004639A8 (:%pDealloc)           ;#00461AF9: 350 AA1E0000               v  00 00  1 483      
;   932         rid = -1  -- (only real addresses in real routines get mapped to a line no)
    mov [ebp-24] (rid), dword -1          ;#00461AFE: 307105 E8 FFFFFFFF         uv 00 20  1 484      
;   933     end if
;   934     if e[E_ADDR]=-1 then -- replace with called from address from the throw() call:
    mov edi,2                             ;#00461B05: 277 02000000               vu 80 00  1 484      
    lea ecx,[ebp-40] (symtab[1233])       ;#00461B0A: 215115 D8                  uv 02 20  1 485      
    mov esi,[ebp] (e)                     ;#00461B0D: 213165 00                  vu 40 20  1 485      
    mov edx,1222                          ;#00461B10: 272 C6040000               uv 04 00  1 486      
    mov al,0                              ;#00461B15: 260 00                     vu 01 00  1 486      
    call #00460FE5 (:%pSubse1)            ;#00461B17: 350 C9F4FFFF               v  00 00  1 487      
    mov eax,[ebp-40] (symtab[1233])       ;#00461B1C: 213105 D8                  uv 01 20  1 488      
    cmp eax,-1                            ;#00461B1F: 203370 FF                  uv 00 01  1 489 01   
    jne #00461B56                         ;#00461B22: 165 32                     v  00 00  1 489      
;   935         atom addr
;   936         #ilASM{
;   937             [32]
;   938                 mov eax,[ebp+12]    -- called from (not :throwret below!)
                        mov eax,[ebp+12]  ;#00461B24: 213105 0C                  uv 01 20  1 490      
;   939                 lea edi,[addr]
                        lea edi,[ebp-44] (addr)  ;#00461B27: 215175 D4                  vu 80 20  1 490      
;   940                 call :%pStoreMint   -- [edi]:=eax, as float if rqd
                        call #00463978 (:%pStoreMint)  ;#00461B2A: 350 491E0000               v  00 00  1 491      
;   941             [64]
;   942                 mov rax,[rbp+24]
;   943                 lea rdi,[addr]
;   944                 call :%pStoreMint   -- [rdi]:=rax, as float if rqd
;   945               }
;   946         e[E_ADDR] = addr
    mov edi,[ebp-44] (addr)               ;#00461B2F: 213175 D4                  uv 80 20  1 492      
    cmp edi,h4                            ;#00461B32: 201377 00000040            uv 00 80  1 493 80   
    jne #00461B44                         ;#00461B38: 165 0A                     v  00 00  1 493      
    mov esi,1235                          ;#00461B3A: 276 D3040000               uv 40 00  1 494      
    call #00462744 (:%pUnassigned)        ;#00461B3F: 350 000C0000               v  00 00  1 494      
    mov ecx,edi                           ;#00461B44: 211371                     uv 02 80  1 495      
    mov edi,[#00402110] (E_ADDR)          ;#00461B46: 213075 10214000            vu 80 00  1 495      
    mov esi,[ebp] (e)                     ;#00461B4C: 213165 00                  uv 40 20  1 496      
    mov eax,ebp                           ;#00461B4F: 213305                     vu 01 20  1 496      
    call #004607F3 (:%pRepe1)             ;#00461B51: 350 9DECFFFF               v  00 00  1 497      
;   947 --5/9/19:
;   948 --      if e[E_LINE]=-1 and rid!=-1 then
;   949 --          integer lineno := convert_offset(addr-1,symtab[rid])
;   950 --          e[E_LINE] = lineno
;   951 --      end if
;   952     end if 
;   953     if e[E_LINE]=-1 and rid!=-1 then
    mov edi,3                             ;#00461B56: 277 03000000               uv 80 00  1 498      
    lea ecx,[ebp-40] (symtab[1233])       ;#00461B5B: 215115 D8                  vu 02 20  1 498      
    mov esi,[ebp] (e)                     ;#00461B5E: 213165 00                  uv 40 20  1 499      
    mov edx,1222                          ;#00461B61: 272 C6040000               vu 04 00  1 499      
    mov al,0                              ;#00461B66: 260 00                     uv 01 00  1 500      
    call #00460FE5 (:%pSubse1)            ;#00461B68: 350 78F4FFFF               v  00 00  1 500      
    mov eax,[ebp-40] (symtab[1233])       ;#00461B6D: 213105 D8                  uv 01 20  1 501      
    cmp eax,-1                            ;#00461B70: 203370 FF                  uv 00 01  1 502 01   
    jne #00461C48                         ;#00461B73: 017205 CF000000            v  00 00  1 502      
    mov ecx,[ebp-24] (rid)                ;#00461B79: 213115 E8                  uv 02 20  1 503      
    cmp ecx,-1                            ;#00461B7C: 203371 FF                  uv 00 02  1 504 02   
    je #00461C48                          ;#00461B7F: 017204 C3000000            v  00 00  1 504      
;   954         integer lineno := convert_offset(e[E_ADDR]-1,symtab[rid])
    mov edi,2                             ;#00461B85: 277 02000000               uv 80 00  1 505      
    lea ecx,[ebp-40] (symtab[1233])       ;#00461B8A: 215115 D8                  vu 02 20  1 505      
    mov esi,[ebp] (e)                     ;#00461B8D: 213165 00                  uv 40 20  1 506      
    mov edx,1222                          ;#00461B90: 272 C6040000               vu 04 00  1 506      
    mov al,0                              ;#00461B95: 260 00                     uv 01 00  1 507      
    call #00460FE5 (:%pSubse1)            ;#00461B97: 350 49F4FFFF               v  00 00  1 507      
    lea edi,[ebp-52] (symtab[1237])       ;#00461B9C: 215175 CC                  uv 80 20  1 508      
    mov ecx,[ebp-40] (symtab[1233])       ;#00461B9F: 213115 D8                  vu 02 20  1 508      
    mov eax,[#0040201C]                   ;#00461BA2: 241 1C204000               uv 01 00  1 509      
    call #0045F299 (:%opSub)              ;#00461BA7: 350 EDD6FFFF               v  00 00  1 509      
    mov edi,[ebp-20] (symtab)             ;#00461BAC: 213175 EC                  uv 80 20  1 510      
    cmp edi,h4                            ;#00461BAF: 201377 00000040            uv 00 80  1 511 80   
    jne #00461BC1                         ;#00461BB5: 165 0A                     v  00 00  1 511      
    mov esi,1227                          ;#00461BB7: 276 CB040000               uv 40 00  1 512      
    call #00462744 (:%pUnassigned)        ;#00461BBC: 350 830B0000               v  00 00  1 512      
    mov edi,[ebp-24] (rid)                ;#00461BC1: 213175 E8                  uv 80 20  1 513      
    lea ecx,[ebp-40] (symtab[1233])       ;#00461BC4: 215115 D8                  vu 02 20  1 513      
    mov esi,[ebp-20] (symtab)             ;#00461BC7: 213165 EC                  uv 40 20  1 514      
    mov edx,1227                          ;#00461BCA: 272 CB040000               vu 04 00  1 514      
    mov al,0                              ;#00461BCF: 260 00                     uv 01 00  1 515      
    call #00460FE5 (:%pSubse1)            ;#00461BD1: 350 0FF4FFFF               v  00 00  1 515      
    mov ecx,20                            ;#00461BD6: 271 14000000               uv 02 00  1 516      
    mov edx,1195                          ;#00461BDB: 272 AB040000               vu 04 00  1 516      
    call :%opFrame (convert_offset)       ;#00461BE0: 350 1D100000               v  00 00  1 517      
    mov edi,[ebp+20] (prevebp)            ;#00461BE5: 213175 14                  uv 80 20  1 518      
    mov eax,[edi-52]                      ;#00461BE8: 213107 CC                  uv 01 80  1 521 80 *80*
    mov [edi-52], dword h4                ;#00461BEB: 307107 CC 00000040         vu 00 80  1 521      
    cmp eax,h4                            ;#00461BF2: 075 00000040               uv 00 01  1 522      
    jne #00461C03                         ;#00461BF7: 165 0A                     v  00 00  1 522      
    mov esi,1237                          ;#00461BF9: 276 D5040000               uv 40 00  1 523      
    call #00462744 (:%pUnassigned)        ;#00461BFE: 350 410B0000               v  00 00  1 523      
    mov [ebp] (era),eax                   ;#00461C03: 211105 00                  uv 00 21  1 524      
    mov edi,[ebp+20] (prevebp)            ;#00461C06: 213175 14                  vu 80 20  1 524      
    mov eax,[edi-40]                      ;#00461C09: 213107 D8                  uv 01 80  1 527    *80*
    mov [edi-40], dword h4                ;#00461C0C: 307107 D8 00000040         vu 00 80  1 527      
    cmp eax,h4                            ;#00461C13: 075 00000040               uv 00 01  1 528      
    jne #00461C24                         ;#00461C18: 165 0A                     v  00 00  1 528      
    mov esi,1233                          ;#00461C1A: 276 D1040000               uv 40 00  1 529      
    call #00462744 (:%pUnassigned)        ;#00461C1F: 350 200B0000               v  00 00  1 529      
    mov [ebp-4] (sr),eax                  ;#00461C24: 211105 FC                  uv 00 21  1 530      
    mov [ebp+28] (retaddr),#00461C33      ;#00461C27: 307105 1C 331C4600         vu 00 20  1 530      
    jmp #00461C7F (code:convert_offset)   ;#00461C2E: 351 4C000000               v  00 00  1 531      
    mov [ebp-48] (lineno),eax             ;#00461C33: 211105 D0                  uv 00 21  1 532      
;   955         e[E_LINE] = lineno
    mov ecx,eax                           ;#00461C36: 211301                     vu 02 01  1 532      
    mov edi,[#00402114] (E_LINE)          ;#00461C38: 213075 14214000            uv 80 00  1 533      
    mov esi,[ebp] (e)                     ;#00461C3E: 213165 00                  vu 40 20  1 533      
    mov eax,ebp                           ;#00461C41: 213305                     uv 01 20  1 534      
    call #004607F3 (:%pRepe1)             ;#00461C43: 350 ABEBFFFF               v  00 00  1 534      
;   956     end if
;   957     #ilASM{
;   958             -- 1) if no exception handler then e55ue
;   959         [32]
;   960             cmp [ebp+16],ebx        -- catch addr/flag
                    cmp [ebp+16],ebx      ;#00461C48: 071135 10                  uv 00 28  2 535      
;   961             jne @f
                    jne #00461C5E         ;#00461C4B: 165 11                     v  00 00  1 536      
;   962                 mov al,55           -- e55ue
                        mov al,55         ;#00461C4D: 260 37                     uv 01 00  1 537      
;   963                 mov edx,[ebp+12]    -- called from address
                        mov edx,[ebp+12]  ;#00461C4F: 213125 0C                  vu 04 20  1 537      
;   964                 mov ebp,[ebp+20]    -- prev_ebp
                        mov ebp,[ebp+20] (prevebp)  ;#00461C52: 213155 14                  uv 20 20  1 538      
;   965                 sub edx,1
                        sub edx,1         ;#00461C55: 203352 01                  vu 04 04  1 538      
;   966                 jmp :!iDiag
                        jmp #00463E69 (:!iDiag)  ;#00461C58: 351 0C220000               v  00 00  1 539      
;   967                 int3
                        int3              ;#00461C5D: 314                        np 00 00 13 540      
;   968         [64]
;   969             cmp [rbp+32],rbx        -- catch addr/flag
;   970             jne @f
;   971                 mov al,55           -- e55ue
;   972                 mov rdx,[rbp+24]    -- called from address
;   973                 mov rbp,[rbp+40]    -- prev_ebp
;   974                 sub rdx,1
;   975                 jmp :!iDiag
;   976                 int3
;   977         []
;   978           @@:
;   979 
;   980         [32]
;   981             mov eax,[e]
                    mov eax,[ebp] (e)     ;#00461C5E: 213105 00                  uv 01 20  1 553      
;   982             mov [e],ebx
                    mov [ebp] (e),ebx     ;#00461C61: 211135 00                  vu 00 28  1 553      
;   983         [64]
;   984             mov rax,[e]
;   985             mov [e],rbx
;   986         []
;   987             -- 3) while 1 issue fake opRetf (including this routine!)
;   988           ::fakeRetLoop
;   989         [32]
;   990             mov ecx,[ebp+16]        -- catch addr/flag
                    mov ecx,[ebp+16]      ;#00461C64: 213115 10                  uv 02 20  1 554      
;   991             cmp ecx,1
                    cmp ecx,1             ;#00461C67: 203371 01                  uv 00 02  1 555 02   
;   992             jne @f
                    jne #00461C78         ;#00461C6A: 165 0C                     v  00 00  1 555      
;   993                 mov dword[ebp+28],:fakeRetLoop  -- replace return address
                        mov [ebp+28] (retaddr),#00461C64  ;#00461C6C: 307105 1C 641C4600         uv 00 20  1 556      
;   994                 jmp :%opRetf
                        jmp #00462C8F (:%opRetf)  ;#00461C73: 351 17100000               v  00 00  1 556      
;   995         [64]
;   996             mov rcx,[rbp+32]        -- catch addr/flag
;   997             cmp rcx,1
;   998             jne @f
;   999                 mov dword[rbp+56],:fakeRetLoop  -- replace return address
;  1000                 jmp :%opRetf
;  1001         []
;  1002       @@:
;  1003             -- 4) jump to error handler (catch clause)
;  1004         [32]
;  1005             jmp ecx
                    jmp ecx               ;#00461C78: 377341                     np 00 02  2 557      
;  1006         [64]
;  1007             jmp rcx
;  1008         []
;  1009           }
    jmp #00462C8F (:%opRetf)              ;#00461C7A: 351 10100000               v  00 00  1 559      
;  1010 end procedure
;  1011 
;  1012 --/*
;  1013 function getVal(atom addr)
;  1014 object  result,
;  1015         o
;  1016 integer vtyp, len, keep
;  1017     novalue = 0         -- control flag, to prevent ppExf of "<novalue>" result
;  1018 --DEV 64bit
;  1019     if machine_bits()=32 then
;  1020         result = peek4s(addr)   --DEV crash here after e91pie
;  1021         if result<#40000000 then    -- a 31-bit integer
;  1022             return result
;  1023         end if
;  1024         result -= #40000000
;  1025     else
;  1026         result = peek8s(addr)   --DEV crash here after e91pie
;  1027         if result<#4000000000000000 then    -- a 63-bit integer
;  1028             return result
;  1029         end if
;  1030         result -= #4000000000000000
;  1031     end if
;  1032     if result=0 then
;  1033         novalue = 1
;  1034         return "<novalue>"
;  1035     end if
;  1036     addr = result*4
;  1037 
;  1038 --  if c_func(xIsBadReadPtr,{addr,1}) then
;  1039 --      --DEV 64bit? (should be alright...)
;  1040 --      result = sprintf("<**diag.e: bad ptr** (#%08x)>\n",addr)
;  1041 --      puts(1,result)
;  1042 --      return result
;  1043 --  end if
;  1044 
;  1045     vtyp = peek(addr-1)
;  1046     if vtyp=#12 then        -- a 64-bit float
;  1047         if machine_bits()=32 then
;  1048             result = peek({addr,8})
;  1049             return float64_to_atom(result)
;  1050         else
;  1051             result = peek({addr,10})
;  1052             return float80_to_atom(result)
;  1053         end if
;  1054     end if
;  1055     if machine_bits()=32 then
;  1056         len = peek4s(addr-12)
;  1057     else
;  1058         len = peek8s(addr-24)
;  1059     end if
;  1060 --  if not diagBase then    -- (old style handling)
;  1061 --      addr = peek4u(addr-20)
;  1062 --  end if
;  1063     if vtyp=#82 then        -- an 8-bit ascii string
;  1064         if len>lc then
;  1065             len = lc
;  1066             lc = 0
;  1067             showellipse = 1
;  1068         end if
;  1069         return peek({addr,len})
;  1070     end if
;  1071     if vtyp!=#80 then       -- sanity check: must be a sequence then.
;  1072         novalue = 1
;  1073         result = sprintf("<**GARBAGE/CORRUPT TYPE BYTE** (#%02x at [#%08x])>\n",{vtyp,addr-1})
;  1074         puts(1,result)
;  1075         return result
;  1076     end if
;  1077     result = {}
;  1078     while len and lc do
;  1079         lc -= 1
;  1080         len -= 1
;  1081 --#without reformat
;  1082 if 0 then -- new code 12/6/10 (show more of eg allfiles)
;  1083         if lc>99 and len and showellipse=0 then
;  1084             keep = lc-99
;  1085             lc = 99
;  1086             o = getVal(addr)
;  1087             if showellipse then
;  1088                 if string(o) then
;  1089                     o &= "..."
;  1090                     showellipse = 0
;  1091                 else
;  1092                     -- (oops!) quit, so ellipse shows near the break
;  1093                     -- (which is added in getValue, once outta here)
;  1094                     exit
;  1095                 end if
;  1096             end if
;  1097             result = append(result,o)
;  1098             lc += keep
;  1099         else
;  1100             result = append(result,getVal(addr))
;  1101         end if
;  1102 else
;  1103         result = append(result,getVal(addr))
;  1104 end if
;  1105 --#with reformat
;  1106         if machine_bits()=32 then
;  1107             addr += 4
;  1108         else
;  1109             addr += 8
;  1110         end if
;  1111     end while
;  1112     if len then
;  1113         showellipse = 1
;  1114     end if
;  1115     return result
;  1116 end function
;  1117 --*/
;  1118 
;  1119 --
;  1120 -- NB: the or_xxx are held as refs, eg after string str="abc" #ilASM{ mov ecx,[str] }
;  1121 --  then [or_ecx] might be the atom #40100888 such that shl ecx,2 yields #00402220, and
;  1122 --  [#0040221F] is #82 and [#00402220] is 'a'. Likewise for floats/dword-sequences.
;  1123 --  (see builtins\VM\pHeap.e notes for some more details if any of that confuses you)
;  1124 --
;  1125 --  Also, h4 (unassigned) may show as 1073741824 (32bit) or 4.6116860185e+18 (64bit),
;  1126 --  (just for the or_xxx), at least until some extra code is added somewhere in here.
;  1127 --  Of course, should any of these values (or anything else from pDiagN.e) appear in 
;  1128 --  an ex.err (presumably because you took out the "without debug"), they are being 
;  1129 --DEV is that just or_ebp?
;  1130 --  manipulated on-the-fly and bear little or no resemblance to values at the point 
;  1131 --  of the crash, and should (with quite some justification) be regarded as complete 
;  1132 --  and utter gibberish. To be precise, they are far more believable if deliberately 
;  1133 --  displayed on-screen, in here or pFEH.e, than when they are incidentally printed 
;  1134 --  as a run-of-the-mill type thing, as is the case if they ever appear in an ex.err.
;  1135 
;  1136 --integer exception = 0
;  1137 --integer rid           -- routine no, initially from symtab[T_callstk], then from callstack
;  1138 integer or_ebp          -- from the exception context, or the real ebp (pre-diag()) [stored/4]
;  1139 atom or_esp,            -- from the exception context, or the real esp
;  1140      xceptn,            -- exception code or 0
;  1141      xcepta,            -- exception address or 0
;  1142      or_eax,            -- from the exception context, but never the real eax
;  1143      or_ecx,            -- from the exception context, or the real ecx
;  1144      or_era,            -- effective return address (may==xcepta)
;  1145      or_edx,            -- from the exception context - not available if xceptn==0!
;  1146      or_esi,            -- from the exception context, or the real esi
;  1147      or_edi             -- from the exception context, or the real edi
;  1148 --   era                -- return address, initially from symtab[T_callstk] then callstack
;  1149 --   etd                -- threadstack addr
;  1150 
;  1151 --/*
;  1152 SUG:
;  1153 --function or_string(atom a)
;  1154 function or_ref(atom a)
;  1155 object o
;  1156 --  if integer(a) then return sprint(a) end if
;  1157     if integer(a) then return a end if
;  1158     #ilASM{
;  1159         [32]
;  1160             mov eax,[a]
;  1161             push ebx
;  1162             fld qword[ebx+eax*4]
;  1163             fistp dword[esp]
;  1164             pop eax
;  1165             add dword[ebx+eax*4-8],1
;  1166             mov [o],eax
;  1167         [64]
;  1168             mov rax,[a]
;  1169             push rbx
;  1170             fld tbyte[rbx+rax*4]
;  1171             fistp qword[rsp]
;  1172             pop rax
;  1173             add qword[rbx+rax*4-16],1
;  1174             mov [o],rax
;  1175         []
;  1176           }
;  1177 --  return sprint(o)
;  1178     return o
;  1179 end function
;  1180 --*/
;  1181 
;  1182 --constant repch = "\r\n\t",
;  1183 --       repstrs = {"\\r","\\n","\\t"}
;  1184 
;  1185 --object symtab     -- copy of symtab obtained via :%opGetST (see pStack.e)
;  1186 
;  1187 --constant unassigned = "<unassigned>"
;  1188 
;  1189 integer ds4
;  1190 
;  1191 function getGvarValue(integer gidx)
;  1192 integer novalue
;  1193 object res
;  1194     #ilASM{
;  1195             mov [novalue],0
                    mov [ebp-4] (novalue), dword 0  ;#0046C721: 307105 FC 00000000         uv 00 20  1   1      
;  1196         [32]
;  1197             mov esi,[ds4]
                    mov esi,[#00402620] (ds4)  ;#0046C728: 213065 20264000            vu 40 00  1   1      
;  1198             mov edx,[gidx]
                    mov edx,[ebp] (gidx)  ;#0046C72E: 213125 00                  uv 04 20  1   2      
;  1199             shl esi,2
                    shl esi,2             ;#0046C731: 301346 02                  u  40 40  1   3      
;  1200             mov esi,[esi+edx*4+16] -- ([ds+(gidx+4)*4] == gvar[gidx])
                    mov esi,[esi+edx*4+16]  ;#0046C734: 213164226 10               uv 40 44  1   6 40 *44*
;  1201             cmp esi,h4
                    cmp esi,h4            ;#0046C738: 201376 00000040            uv 00 40  1   7 40   
;  1202             jne @f
                    jne #0046C750         ;#0046C73E: 165 10                     v  00 00  1   7      
;  1203                 mov [novalue],1
                        mov [ebp-4] (novalue), dword 1  ;#0046C740: 307105 FC 01000000         uv 00 20  1   8      
;  1204                 mov [res],0
                        mov [ebp-8] (res), dword 0  ;#0046C747: 307105 F8 00000000         vu 00 20  1   8      
;  1205                 jmp :done
                        jmp #0046C7A8     ;#0046C74E: 353 58                     v  00 00  1   9      
;  1206           @@:
;  1207             jl @f
                    jl #0046C7A5          ;#0046C750: 174 53                     v  00 00  1  10      
;  1208                 -- Note: this is fairly simplistic: we could go much further,
;  1209                 -- (DEV) with a recursive check on nested sequences (including
;  1210                 --       that it ain't circular), the entire length is valid,
;  1211                 --       and there is a pRoot locating "SBH\0" as per pHeap.e
;  1212                 --       Yes, I know MSDN says "This function is obsolete and
;  1213                 --       should not be used", but it /is/ reasonable here as
;  1214                 --       we will very shortly terminate the program anyway.
;  1215                 lea edi,[ebx+esi*4-1]
                        lea edi,[ebx+esi*4-1]  ;#0046C752: 215174263 FF               uv 80 48  1  11      
;  1216             [PE32]
;  1217                 push 1      -- UINT_PTR ucb
                        push 1            ;#0046C756: 152 01                     vu 00 00  1  11      
;  1218                 push edi    -- LPVOID lp
                        push edi          ;#0046C758: 127                        uv 00 80  1  12      
;  1219                 call "kernel32.dll","IsBadWritePtr"
                        call [#0040107C] (IsBadWritePtr)  ;#0046C759: 377025 7C104000            np 00 00  2  13      
;  1220                 test eax,eax
                        test eax,eax      ;#0046C75F: 205300                     uv 00 01  1  15      
;  1221                 jz :typeaddrok
                        jz #0046C773      ;#0046C761: 164 10                     v  00 00  1  15      
;  1222                     mov [novalue],2 -- invalid ref
                            mov [ebp-4] (novalue), dword 2  ;#0046C763: 307105 FC 02000000         uv 00 20  1  16      
;  1223                     mov [res],0
                            mov [ebp-8] (res), dword 0  ;#0046C76A: 307105 F8 00000000         vu 00 20  1  16      
;  1224                     jmp :done
                            jmp #0046C7A8  ;#0046C771: 353 35                     v  00 00  1  17      
;  1225               ::typeaddrok
;  1226             [ELF32]
;  1227 --              pop al -- (or we could just skip this entirely)
;  1228             [32]
;  1229                 mov cl,[edi]
                        mov cl,[edi]      ;#0046C773: 212017                     uv 02 80  1  18      
;  1230                 cmp cl,#12
                        cmp cl,#12        ;#0046C775: 200371 12                  uv 00 02  1  19 02   
;  1231                 je :typebyteok
                        je #0046C7A0      ;#0046C778: 164 26                     v  00 00  1  19      
;  1232                 cmp cl,#80
                        cmp cl,#80        ;#0046C77A: 200371 80                  uv 00 02  1  20      
;  1233                 je :typebyteok
                        je #0046C7A0      ;#0046C77D: 164 21                     v  00 00  1  20      
;  1234                 cmp cl,#82
                        cmp cl,#82        ;#0046C77F: 200371 82                  uv 00 02  1  21      
;  1235                 je :typebyteok
                        je #0046C7A0      ;#0046C782: 164 1C                     v  00 00  1  21      
;  1236                     mov [novalue],3 -- corrupt type byte
                            mov [ebp-4] (novalue), dword 3  ;#0046C784: 307105 FC 03000000         uv 00 20  1  22      
;  1237                     mov [res],0
                            mov [ebp-8] (res), dword 0  ;#0046C78B: 307105 F8 00000000         vu 00 20  1  22      
;  1238 --6/4/16:
;  1239                     add edi,1
                            add edi,1     ;#0046C792: 203307 01                  uv 80 80  1  23      
;  1240                     shr edi,2
                            shr edi,2     ;#0046C795: 301357 02                  u  80 80  1  24      
;  1241                     mov [edi4],edi
                            mov [#00402430] (edi4),edi  ;#0046C798: 211075 30244000            uv 00 80  1  25 80   
;  1242                     jmp :done
                            jmp #0046C7A8  ;#0046C79E: 353 08                     v  00 00  1  25      
;  1243               ::typebyteok
;  1244                 add dword[ebx+esi*4-8],1
                        add dword[ebx+esi*4-8],1  ;#0046C7A0: 203104263 F8 01            u  00 48  3  26      
;  1245           @@:
;  1246             mov [res],esi
                    mov [ebp-8] (res),esi  ;#0046C7A5: 211165 F8                  vu 00 60  1  28      
;  1247         [64]
;  1248 --pop al
;  1249             mov rsi,[ds4]
;  1250             mov rdx,[gidx]
;  1251             shl rsi,2
;  1252             mov rsi,[rsi+rdx*8+24] -- ([ds+(gidx+3)*8] == gvar[gidx])
;  1253             mov r15,h4
;  1254             cmp rsi,r15
;  1255             jne @f
;  1256                 mov [novalue],1
;  1257                 mov [res],0
;  1258                 jmp :done
;  1259           @@:
;  1260             jl @f
;  1261                 -- ditto (as [32])
;  1262                 lea rdi,[rbx+rsi*4-1]
;  1263             [PE64]
;  1264                 mov rcx,rsp -- put 2 copies of rsp onto the stack...
;  1265                 push rsp
;  1266                 push rcx
;  1267                 or rsp,8    -- [rsp] is now 1st or 2nd copy:
;  1268                             -- if on entry rsp was xxx8: both copies remain on the stack
;  1269                             -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them (+8)
;  1270                             -- obviously rsp is now xxx8, whatever alignment we started with
;  1271                 sub rsp,8*5                 -- shadow space and align
;  1272                 mov rdx,1                   -- UINT_PTR ucb
;  1273                 mov rcx,rdi                 -- LPVOID lp
;  1274                 call "kernel32.dll","IsBadWritePtr"
;  1275 --              add rsp,8*5
;  1276 --              pop rsp     -- restore, equivalent to rsp += (either #08 or #10)
;  1277                 mov rsp,[rsp+8*5]   -- equivalent to add/pop
;  1278                 test rax,rax
;  1279                 jz :typeaddrok
;  1280                     mov [novalue],2 -- invalid ref
;  1281                     mov [res],0
;  1282                     jmp :done
;  1283               ::typeaddrok
;  1284             [ELF64]
;  1285 --              pop al  -- (or we could just skip this entirely)
;  1286             [64]
;  1287                 mov cl,[rdi]
;  1288                 cmp cl,#12
;  1289                 je :typebyteok
;  1290                 cmp cl,#80
;  1291                 je :typebyteok
;  1292                 cmp cl,#82
;  1293                 je :typebyteok
;  1294                     mov [novalue],3 -- corrupt type byte
;  1295                     mov [res],0
;  1296 --6/4/16:
;  1297                     add rdi,1
;  1298                     shr rdi,2
;  1299                     mov [edi4],rdi
;  1300                     jmp :done
;  1301               ::typebyteok
;  1302                 add qword[rbx+rsi*4-16],1
;  1303           @@:
;  1304             mov [res],rsi
;  1305         []
;  1306           ::done
;  1307           } 
;  1308 --  res = sprintf("%s [gidx=%d, ds4=%d]",{sprint(res),gidx,ds4})
;  1309     if novalue=3 then show_corruption(CTB) end if
    mov edi,3                             ;#0046C7A8: 277 03000000               uv 80 00  1  29      
    mov eax,[ebp-4] (novalue)             ;#0046C7AD: 213105 FC                  vu 01 20  1  29      
    mov esi,36                            ;#0046C7B0: 276 24000000               uv 40 00  1  30      
    mov edx,1252                          ;#0046C7B5: 272 E4040000               vu 04 00  1  30      
    call #0045F91F (:%opJccE)             ;#0046C7BA: 350 6031FFFF               v  00 00  1  31      
    jne #0046C7EA                         ;#0046C7BF: 165 29                     v  00 00  1  32      
    mov ecx,8                             ;#0046C7C1: 271 08000000               uv 02 00  1  33      
    mov edx,921                           ;#0046C7C6: 272 99030000               vu 04 00  1  33      
    call :%opFrame (show_corruption)      ;#0046C7CB: 350 3264FFFF               v  00 00  1  34      
    mov ecx,[#00402434] (CTB)             ;#0046C7D0: 213015 34244000            uv 02 00  1  35      
    mov [ebp] (msg),ecx                   ;#0046C7D6: 211115 00                  uv 00 22  1  36 02   
    add dword[ebx+ecx*4-8],1              ;#0046C7D9: 203104213 F8 01            u  00 0A  3  38    *02*
    mov [ebp+28] (retaddr),#0046C7EA      ;#0046C7DE: 307105 1C EAC74600         vu 00 20  1  40      
    jmp #0046BBD1 (code:show_corruption)  ;#0046C7E5: 351 E7F3FFFF               v  00 00  1  41      
;  1310     return {novalue,res}    -- ({0,whatever} or {1\2\3,0})
    mov esi,[ebp-4] (novalue)             ;#0046C7EA: 213165 FC                  uv 40 20  1  42      
    cmp esi,h4                            ;#0046C7ED: 201376 00000040            uv 00 40  1  43 40   
    jne #0046C7FF                         ;#0046C7F3: 165 0A                     v  00 00  1  43      
    mov esi,1252                          ;#0046C7F5: 276 E4040000               uv 40 00  1  44      
    call #00462744 (:%pUnassigned)        ;#0046C7FA: 350 455FFFFF               v  00 00  1  44      
    lea eax,[ebp-12] (symtab[1254])       ;#0046C7FF: 215105 F4                  uv 01 20  1  45      
    mov edx,2                             ;#0046C802: 272 02000000               vu 04 00  1  45      
    push #0046C82C                        ;#0046C807: 150 2CC84600               uv 00 00  1  46      
    push eax                              ;#0046C80C: 120                        vu 00 01  1  46      
    mov edi,[ebp-8] (res)                 ;#0046C80D: 213175 F8                  uv 80 20  1  47      
    cmp edi,h4                            ;#0046C810: 201377 00000040            uv 00 80  1  48 80   
    jl #0046C822                          ;#0046C816: 174 0A                     v  00 00  1  48      
    add dword[ebx+edi*4-8],1              ;#0046C818: 203104273 F8 01            u  00 88  3  49      
    cmp eax,1253                          ;#0046C81D: 075 E5040000               vu 00 01  1  51      
    push edi                              ;#0046C822: 127                        uv 00 80  1  52      
    push esi                              ;#0046C823: 126                        vu 00 40  1  52      
    mov edi,[ebp-12] (symtab[1254])       ;#0046C824: 213175 F4                  uv 80 20  1  53      
    jmp #00460143 (:%pMkSq)               ;#0046C827: 351 1739FFFF               v  00 00  1  53      
    mov eax,[ebp-12] (symtab[1254])       ;#0046C82C: 213105 F4                  uv 01 20  1  54      
    mov [ebp-12] (symtab[1254]),ebx       ;#0046C82F: 211135 F4                  vu 00 28  1  54      
    jmp #00462C8F (:%opRetf)              ;#0046C832: 351 5864FFFF               v  00 00  1  55      
;  1311 end function
;  1312 
;  1313 function getTvarValue(integer tidx)
;  1314 --
;  1315 -- tidx is 0,-1,-2,-3, etc as per symtab[N][S_Tidx],
;  1316 --  for [ebp], [ebp-4], [ebp-8], [ebp-12], [ebp-16],
;  1317 --   or [rbp], [rbp-8], [rbp-16], [rbp-24], [rsp-32],
;  1318 --  where ebp/rbp is as stored in or_ebp.
;  1319 --
;  1320 integer novalue
;  1321 object res
;  1322     #ilASM{
;  1323             mov [novalue],0
                    mov [ebp-4] (novalue), dword 0  ;#0046C60C: 307105 FC 00000000         uv 00 20  1   1      
;  1324         [32]
;  1325             mov esi,[or_ebp]
                    mov esi,[#004025F8] (or_ebp)  ;#0046C613: 213065 F8254000            vu 40 00  1   1      
;  1326             mov ecx,[tidx]
                    mov ecx,[ebp] (tidx)  ;#0046C619: 213115 00                  uv 02 20  1   2      
;  1327             shl esi,2
                    shl esi,2             ;#0046C61C: 301346 02                  u  40 40  1   3      
;  1328             mov esi,[esi+ecx*4]
                    mov esi,[esi+ecx*4]   ;#0046C61F: 213064216                  uv 40 42  1   6 40 *42*
;  1329             cmp esi,h4
                    cmp esi,h4            ;#0046C622: 201376 00000040            uv 00 40  1   7 40   
;  1330             jne @f
                    jne #0046C63A         ;#0046C628: 165 10                     v  00 00  1   7      
;  1331                 mov [novalue],1
                        mov [ebp-4] (novalue), dword 1  ;#0046C62A: 307105 FC 01000000         uv 00 20  1   8      
;  1332                 mov [res],0
                        mov [ebp-8] (res), dword 0  ;#0046C631: 307105 F8 00000000         vu 00 20  1   8      
;  1333                 jmp :done
                        jmp #0046C692     ;#0046C638: 353 58                     v  00 00  1   9      
;  1334           @@:
;  1335             jl @f
                    jl #0046C68F          ;#0046C63A: 174 53                     v  00 00  1  10      
;  1336                 -- ditto (as getGvarValue/[32])
;  1337                 lea edi,[ebx+esi*4-1]
                        lea edi,[ebx+esi*4-1]  ;#0046C63C: 215174263 FF               uv 80 48  1  11      
;  1338             [PE32]
;  1339                 push 1      -- UINT_PTR ucb
                        push 1            ;#0046C640: 152 01                     vu 00 00  1  11      
;  1340                 push edi    -- LPVOID lp
                        push edi          ;#0046C642: 127                        uv 00 80  1  12      
;  1341                 call "kernel32.dll","IsBadWritePtr"
                        call [#0040107C] (IsBadWritePtr)  ;#0046C643: 377025 7C104000            np 00 00  2  13      
;  1342                 test eax,eax
                        test eax,eax      ;#0046C649: 205300                     uv 00 01  1  15      
;  1343                 jz :typeaddrok
                        jz #0046C65D      ;#0046C64B: 164 10                     v  00 00  1  15      
;  1344                     mov [novalue],2 -- invalid ref
                            mov [ebp-4] (novalue), dword 2  ;#0046C64D: 307105 FC 02000000         uv 00 20  1  16      
;  1345                     mov [res],0
                            mov [ebp-8] (res), dword 0  ;#0046C654: 307105 F8 00000000         vu 00 20  1  16      
;  1346                     jmp :done
                            jmp #0046C692  ;#0046C65B: 353 35                     v  00 00  1  17      
;  1347               ::typeaddrok
;  1348             [ELF32]
;  1349 --              pop al
;  1350             [32]
;  1351                 mov cl,[edi]
                        mov cl,[edi]      ;#0046C65D: 212017                     uv 02 80  1  18      
;  1352                 cmp cl,#12
                        cmp cl,#12        ;#0046C65F: 200371 12                  uv 00 02  1  19 02   
;  1353                 je :typebyteok
                        je #0046C68A      ;#0046C662: 164 26                     v  00 00  1  19      
;  1354                 cmp cl,#80
                        cmp cl,#80        ;#0046C664: 200371 80                  uv 00 02  1  20      
;  1355                 je :typebyteok
                        je #0046C68A      ;#0046C667: 164 21                     v  00 00  1  20      
;  1356                 cmp cl,#82
                        cmp cl,#82        ;#0046C669: 200371 82                  uv 00 02  1  21      
;  1357                 je :typebyteok
                        je #0046C68A      ;#0046C66C: 164 1C                     v  00 00  1  21      
;  1358                     mov [novalue],3 -- corrupt type byte
                            mov [ebp-4] (novalue), dword 3  ;#0046C66E: 307105 FC 03000000         uv 00 20  1  22      
;  1359                     mov [res],0
                            mov [ebp-8] (res), dword 0  ;#0046C675: 307105 F8 00000000         vu 00 20  1  22      
;  1360 --6/4/16:
;  1361                     add edi,1
                            add edi,1     ;#0046C67C: 203307 01                  uv 80 80  1  23      
;  1362                     shr edi,2
                            shr edi,2     ;#0046C67F: 301357 02                  u  80 80  1  24      
;  1363                     mov [edi4],edi
                            mov [#00402430] (edi4),edi  ;#0046C682: 211075 30244000            uv 00 80  1  25 80   
;  1364                     jmp :done
                            jmp #0046C692  ;#0046C688: 353 08                     v  00 00  1  25      
;  1365               ::typebyteok
;  1366                 add dword[ebx+esi*4-8],1
                        add dword[ebx+esi*4-8],1  ;#0046C68A: 203104263 F8 01            u  00 48  3  26      
;  1367           @@:
;  1368             mov [res],esi
                    mov [ebp-8] (res),esi  ;#0046C68F: 211165 F8                  vu 00 60  1  28      
;  1369         [64]
;  1370             mov rsi,[or_ebp]
;  1371             mov rcx,[tidx]
;  1372             shl rsi,2
;  1373             mov r15,h4
;  1374             mov rsi,[rsi+rcx*8]
;  1375             cmp rsi,r15
;  1376             jne @f
;  1377                 mov [novalue],1
;  1378                 mov [res],0
;  1379                 jmp :done
;  1380           @@:
;  1381             jl @f
;  1382                 -- ditto (as getGvarValue/[32])
;  1383                 lea rdi,[rbx+rsi*4-1]
;  1384             [PE64]
;  1385                 mov rcx,rsp -- put 2 copies of rsp onto the stack...
;  1386                 push rsp
;  1387                 push rcx
;  1388                 or rsp,8    -- [rsp] is now 1st or 2nd copy:
;  1389                             -- if on entry rsp was xxx8: both copies remain on the stack
;  1390                             -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them (+8)
;  1391                             -- obviously rsp is now xxx8, whatever alignment we started with
;  1392                 sub rsp,8*5                 -- shadow space and align
;  1393                 mov rdx,1                   -- UINT_PTR ucb
;  1394                 mov rcx,rdi                 -- LPVOID lp
;  1395                 call "kernel32.dll","IsBadWritePtr"
;  1396 --              add rsp,8*5
;  1397 --              pop rsp     -- restore, equivalent to rsp += (either #08 or #10)
;  1398                 mov rsp,[rsp+8*5]   -- equivalent to add/pop
;  1399                 test rax,rax
;  1400                 jz :typeaddrok
;  1401                     mov [novalue],2 -- invalid ref
;  1402                     mov [res],0
;  1403                     jmp :done
;  1404               ::typeaddrok
;  1405             [ELF64]
;  1406 --              pop al
;  1407             [64]
;  1408                 mov cl,[rdi]
;  1409                 cmp cl,#12
;  1410                 je :typebyteok
;  1411                 cmp cl,#80
;  1412                 je :typebyteok
;  1413                 cmp cl,#82
;  1414                 je :typebyteok
;  1415                     mov [novalue],3 -- corrupt type byte
;  1416                     mov [res],0
;  1417 --6/4/16:
;  1418                     add rdi,1
;  1419                     shr rdi,2
;  1420                     mov [edi4],rdi
;  1421                     jmp :done
;  1422               ::typebyteok
;  1423                 add qword[rbx+rsi*4-16],1
;  1424           @@:
;  1425             mov [res],rsi
;  1426         []
;  1427           ::done
;  1428           } 
;  1429     if novalue=3 then show_corruption(CTB) end if
    mov edi,3                             ;#0046C692: 277 03000000               uv 80 00  1  29      
    mov eax,[ebp-4] (novalue)             ;#0046C697: 213105 FC                  vu 01 20  1  29      
    mov esi,36                            ;#0046C69A: 276 24000000               uv 40 00  1  30      
    mov edx,1258                          ;#0046C69F: 272 EA040000               vu 04 00  1  30      
    call #0045F91F (:%opJccE)             ;#0046C6A4: 350 7632FFFF               v  00 00  1  31      
    jne #0046C6D4                         ;#0046C6A9: 165 29                     v  00 00  1  32      
    mov ecx,8                             ;#0046C6AB: 271 08000000               uv 02 00  1  33      
    mov edx,921                           ;#0046C6B0: 272 99030000               vu 04 00  1  33      
    call :%opFrame (show_corruption)      ;#0046C6B5: 350 4865FFFF               v  00 00  1  34      
    mov ecx,[#00402434] (CTB)             ;#0046C6BA: 213015 34244000            uv 02 00  1  35      
    mov [ebp] (msg),ecx                   ;#0046C6C0: 211115 00                  uv 00 22  1  36 02   
    add dword[ebx+ecx*4-8],1              ;#0046C6C3: 203104213 F8 01            u  00 0A  3  38    *02*
    mov [ebp+28] (retaddr),#0046C6D4      ;#0046C6C8: 307105 1C D4C64600         vu 00 20  1  40      
    jmp #0046BBD1 (code:show_corruption)  ;#0046C6CF: 351 FDF4FFFF               v  00 00  1  41      
;  1430     return {novalue,res}    -- ({0,whatever} or {1,0})
    mov edi,[ebp-4] (novalue)             ;#0046C6D4: 213175 FC                  uv 80 20  1  42      
    cmp edi,h4                            ;#0046C6D7: 201377 00000040            uv 00 80  1  43 80   
    jne #0046C6E9                         ;#0046C6DD: 165 0A                     v  00 00  1  43      
    mov esi,1258                          ;#0046C6DF: 276 EA040000               uv 40 00  1  44      
    call #00462744 (:%pUnassigned)        ;#0046C6E4: 350 5B60FFFF               v  00 00  1  44      
    lea eax,[ebp-12] (symtab[1260])       ;#0046C6E9: 215105 F4                  uv 01 20  1  45      
    mov edx,2                             ;#0046C6EC: 272 02000000               vu 04 00  1  45      
    push #0046C716                        ;#0046C6F1: 150 16C74600               uv 00 00  1  46      
    push eax                              ;#0046C6F6: 120                        vu 00 01  1  46      
    mov esi,[ebp-8] (res)                 ;#0046C6F7: 213165 F8                  uv 40 20  1  47      
    cmp esi,h4                            ;#0046C6FA: 201376 00000040            uv 00 40  1  48 40   
    jl #0046C70C                          ;#0046C700: 174 0A                     v  00 00  1  48      
    add dword[ebx+esi*4-8],1              ;#0046C702: 203104263 F8 01            u  00 48  3  49      
    cmp eax,1259                          ;#0046C707: 075 EB040000               vu 00 01  1  51      
    push esi                              ;#0046C70C: 126                        uv 00 40  1  52      
    push edi                              ;#0046C70D: 127                        vu 00 80  1  52      
    mov edi,[ebp-12] (symtab[1260])       ;#0046C70E: 213175 F4                  uv 80 20  1  53      
    jmp #00460143 (:%pMkSq)               ;#0046C711: 351 2D3AFFFF               v  00 00  1  53      
    mov eax,[ebp-12] (symtab[1260])       ;#0046C716: 213105 F4                  uv 01 20  1  54      
    mov [ebp-12] (symtab[1260]),ebx       ;#0046C719: 211135 F4                  vu 00 28  1  54      
    jmp #00462C8F (:%opRetf)              ;#0046C71C: 351 6E65FFFF               v  00 00  1  55      
;  1431 end function
;  1432 
;  1433 --/*
;  1434 function getValue(integer symidx, integer limit, integer indent, integer crop)
;  1435 object  o,
;  1436         ss   -- symtab[symidx]
;  1437 integer r, k,
;  1438         nTyp, tidx
;  1439 
;  1440     lc = limit
;  1441     showellipse = 0
;  1442     -- obviously none of these should ever happen, but if they do then leave
;  1443     --  as many clues as you can in the ex.err to help resolve things.
;  1444     if symidx<0 or symidx>length(symtab) then
;  1445         return sprintf("pdiag:getValue bad symidx[=%d]",symidx)
;  1446     end if
;  1447     ss = symtab[symidx]
;  1448     if atom(ss) then
;  1449         return sprintf("pdiag:symtab[symidx[=%d]] is an atom",symidx)
;  1450     end if
;  1451     nTyp = ss[S_NTyp]
;  1452     if nTyp>S_TVar3 or nTyp<S_Const then
;  1453         return sprintf("pdiag:getValue bad symtab[symidx][S_NTyp]=%d",nTyp)
;  1454     end if
;  1455 --newEmit... and 64bit
;  1456     if nTyp=S_TVar3 then
;  1457         tidx = ss[S_Tidx]
;  1458         o = getVal(or_ebp*4+tidx*4)
;  1459     else
;  1460         tidx = ss[S_Slink]
;  1461         o = getVal(etd+tidx*4-4)
;  1462     end if
;  1463     if not novalue then
;  1464 --DEV try that new routine here...?
;  1465         if indent then
;  1466             o = ppExf(o,{pp_Indent,indent+7})
;  1467         else
;  1468             o = ppf(o)
;  1469         end if
;  1470         if showellipse then
;  1471             if crop then
;  1472                 lc = find('\n',o)
;  1473                 if lc then o = o[1..lc-1] end if
;  1474             end if
;  1475             lc = length(o)
;  1476             if o[lc]='}' then
;  1477                 o[lc..lc] = ",...}"
;  1478             else
;  1479                 o &= "..."
;  1480             end if
;  1481         end if
;  1482 --#without reformat
;  1483 --DEV 24/6/10 (need to experiment a bit here...)
;  1484 if 0 then -- (added 21/8/2010)
;  1485         r = 1
;  1486         while 1 do
;  1487             k = find(repch[r],o)
;  1488             if k then
;  1489                 o[k..k] = repstrs[r]
;  1490             else
;  1491                 r += 1
;  1492                 if r>length(repch) then exit end if
;  1493             end if
;  1494         end while
;  1495 end if
;  1496 --#with reformat
;  1497     end if
;  1498     return o
;  1499 end function
;  1500 --*/
;  1501 
;  1502 --integer dcount        -- number of dropped callstack blocks
;  1503 
;  1504 --newEBP... 64bit
;  1505 --/*
;  1506 function retN()
;  1507     if machine_bits()=32 then
;  1508         {N,rid,from_addr,ret_addr,prev_ebp,ebp_root} = peek4u({or_ebp*4+4,6})
;  1509     else -- machine_bits()=64
;  1510         {N,rid,from_addr,ret_addr,prev_ebp,ebp_root} = peek8u({or_ebp*4+8,6})
;  1511     end if
;  1512 
;  1513 atom prev_ebp
;  1514     while 1 do
;  1515         prev_ebp = peek4u(or_ebp*4+20)
;  1516         if prev_ebp=0 then return 0 end if
;  1517         era = peek4u(or_ebp*4+16)   -- return address
;  1518         or_ebp = floor(prev_ebp/4)
;  1519         if era=0 then
;  1520             put2("(^^^) call_back from Windows/dll/asm\n")
;  1521         else
;  1522 --          if c_func(xIsBadReadPtr,{or_ebp*4,12}) then
;  1523 --              put2(sprintf("<**diag.e: bad prev_ebp** (#%08x)>\n",or_ebp*4))
;  1524 --              return 0
;  1525 --          end if
;  1526             rid = peek4u(or_ebp*4+8)
;  1527             era -= 1    -- ensure within code emitted for line [DEV??]
;  1528             return 1
;  1529         end if
;  1530     end while
;  1531 end function
;  1532 --*/
;  1533 --function retDX()
;  1534 --  --
;  1535 --  -- The callstack is managed as a linked list of 8K virtual stack blocks (vsb).
;  1536 --  -- The header of each block is 24 bytes:
;  1537 --  --
;  1538 --  --  vsb_prev, vsb_next, spare, [threadstackptr], vsb_used, [symtabptr]
;  1539 --  --
;  1540 --  --  [threadstackptr] and [symtabptr] are not relevant here, included as a
;  1541 --  --   precursor to full thread handling, and subject to change. In fact we
;  1542 --  --   got ecs (which now points at this header) from symtab[T_callstk], which 
;  1543 --  --   also contains etd, the real threadstack address, when we used opGetST as
;  1544 --  --   the very first step.
;  1545 --  --
;  1546 --  -- spare is set to #DC0DC0DC at the point where dcount blocks were 
;  1547 --  --  dropped, that is in the e77phroom case.
;  1548 --  --
;  1549 --  -- The remainder of each block contains frames, minimum of 6 dwords each:
;  1550 --  --
;  1551 --  --  called_from addr
;  1552 --  --  first (address of first item being saved)
;  1553 --  --  items 1..N (params and locals as they were before the call)
;  1554 --  --  N (number of params and locals which got saved)
;  1555 --  --  calling routine (index to symtab)
;  1556 --  --  routine being called (index to symtab)
;  1557 --  --  return addr
;  1558 --  --
;  1559 --  -- Each block can hold up to 339 frames, or a single frame can contain 
;  1560 --  --  up to 2032 parameters, local variables, and temporaries.
;  1561 --  -- To simplify handling, frames do not span blocks. If there is not
;  1562 --  --  enough space for the new frame, it is put in a new vsb and the old
;  1563 --  --  one is left not-quite-full. Each frame is intended to be read from
;  1564 --  --  the end downwards; attempts to read forwards are doomed to failure
;  1565 --  --  - though that should cause no great difficulty for anyone.
;  1566 --  -- The called from address is used for debug handling only and will 
;  1567 --  --  match the routine name, whereas the return address will match with
;  1568 --  --  the closing ')' or possibly the following statement.
;  1569 --  -- While strictly speaking the calling routine is redundant, it does
;  1570 --  --  allow some verification as the call stack is walked.
;  1571 --  --
;  1572 --  -- At startup, the lowest callstack block is created with a dummy pair
;  1573 --  -- of {T_maintls(=21),0}, which helps opRetf behave correctly and can/
;  1574 --  -- should be used to signal the bottom of stack.
;  1575 --  -- 
;  1576 ----puts(1,"retD()\n")
;  1577 --  while 1 do
;  1578 --      if vsb_used=2 then return 0 end if  -- must be our {21,0} pair.
;  1579 --      if vsb_used=0 then
;  1580 --if newEBP then -- (DEV [nonsense])
;  1581 --          if dcount then
;  1582 --              put2(sprintf("<%d callstack blocks skipped>\n",dcount))
;  1583 --              dcount = 0
;  1584 --          end if
;  1585 --else
;  1586 --          if peek4u(ecs+8)=#DC0DC0DC then
;  1587 --              put2(sprintf("<%d callstack blocks skipped>\n",dcount))
;  1588 --          end if
;  1589 --end if
;  1590 --          ecs = peek4u(ecs)   -- follow vsb_prev link
;  1591 ----DEV: not newEBP
;  1592 --          vsb_used = peek4u(ecs+16)
;  1593 --      end if
;  1594 ----o = peek4u({ecs,vsb_used+20})
;  1595 ----?o
;  1596 ----?vsb_used
;  1597 --      base = ecs+vsb_used*4
;  1598 --      ridX = peek4u(base+16)
;  1599 --      if rid!=ridX then
;  1600 --          printf(1,"diag callee internal error (rid %d!=%d)\n",{rid,ridX})
;  1601 --          return 0
;  1602 --      end if
;  1603 --      rid = peek4u(base+12)
;  1604 ----printf(1,"new rid=%d\n",rid)
;  1605 --      N = peek4u(base+8)
;  1606 --      if N<0 or N>vsb_used then
;  1607 --          printf(1,"diag callee internal error (N=%d, vsb_used=%d)\n",{N,vsb_used})
;  1608 --          return 0
;  1609 --      end if
;  1610 ----printf(1,"N=%d\n",N)
;  1611 --      base += 4-N*4
;  1612 --      first = peek4u(base)
;  1613 --      if N=0 then
;  1614 --          if first!=0 then
;  1615 --              printf(1,"diag callee internal error (N=0, first=%08x)\n",first)
;  1616 --              return 0
;  1617 --          end if
;  1618 --      else
;  1619 --          if first<etd or first>etd+vmax*4then
;  1620 --              printf(1,"diag callee internal error (first=%08x, etd=%08x, vmax=%d)\n",{first,etd,vmax})
;  1621 --              return 0
;  1622 --          end if
;  1623 ----printf(1,"first=%d\n",first)
;  1624 --          mem_copy(first,base+4,N)
;  1625 --      end if
;  1626 --      era = peek4u(base-4)
;  1627 ----printf(1,"new era=%d\n",era)
;  1628 --      vsb_used -= (N+6)
;  1629 ----?vsb_used
;  1630 --      if era=0 then
;  1631 ----            if vsb_used=2 then exit end if
;  1632 --          put2("(^^^) call_back from Windows/dll/asm\n")
;  1633 ------      vsb_used -= ??
;  1634 --      else
;  1635 --          era -= 1    -- ensure within code emitted for line [DEV??]
;  1636 --          return 1
;  1637 --      end if
;  1638 --  end while
;  1639 --end function
;  1640 
;  1641 integer vmax        -- highest permitted threadstack entry
;  1642         vmax = 0    -- (equal to the length of vmap)
;  1643 
;  1644 sequence vmap -- variable map; var address --> offset into threadstack
;  1645                 --  (a flat array of all static and dynamic var refs)
;  1646                 -- ==> index into symtab for var name, type, etc.
;  1647 
;  1648 function varIdx(atom addr, integer rid, sequence symtab)
;  1649 integer gvar0   -- addr gvar[0] (==[maxgvar]) [may need to be atom, or gvar04]
;  1650 integer maxgvar
;  1651 integer varno
;  1652 integer tidx
;  1653 object sr
;  1654 integer nTyp
;  1655     #ilASM{
;  1656         [32]
;  1657             mov eax,[ds4]
                    mov eax,[#00402620] (ds4)  ;#0046C837: 241 20264000               uv 01 00  1   1      
;  1658             shl eax,2
                    shl eax,2             ;#0046C83C: 301340 02                  u  01 01  1   2      
;  1659             add eax,16
                    add eax,16            ;#0046C83F: 203300 10                  uv 01 01  1   3 01   
;  1660             mov [gvar0],eax
                    mov [ebp-12] (gvar0),eax  ;#0046C842: 211105 F4                  uv 00 21  1   4 01   
;  1661             mov eax,[eax]
                    mov eax,[eax]         ;#0046C845: 213000                     uv 01 01  1   6    *01*
;  1662             mov [maxgvar],eax
                    mov [ebp-16] (maxgvar),eax  ;#0046C847: 211105 F0                  uv 00 21  1   7 01   
;  1663         [64]
;  1664             mov rax,[ds4]
;  1665             shl rax,2
;  1666             add rax,24
;  1667             mov [gvar0],rax
;  1668             mov rax,[rax]
;  1669             mov [maxgvar],rax
;  1670         []
;  1671           } 
;  1672 --DEV (untried)
;  1673 --  varno = floor((addr-gvar0)/machine_word())
;  1674     if machine_bits()=32 then
;  1675         varno = floor((addr-gvar0)/4)
    mov ecx,[ebp-12] (gvar0)              ;#0046C84A: 213115 F4                  vu 02 20  1   7      
    cmp ecx,h4                            ;#0046C84D: 201371 00000040            uv 00 02  1   8      
    jne #0046C85F                         ;#0046C853: 165 0A                     v  00 00  1   8      
    mov esi,1268                          ;#0046C855: 276 F4040000               uv 40 00  1   9      
    call #00462744 (:%pUnassigned)        ;#0046C85A: 350 E55EFFFF               v  00 00  1   9      
    lea edi,[ebp-36] (symtab[1274])       ;#0046C85F: 215175 DC                  uv 80 20  1  10      
    mov ecx,[ebp] (addr)                  ;#0046C862: 213115 00                  vu 02 20  1  10      
    mov eax,[ebp-12] (gvar0)              ;#0046C865: 213105 F4                  uv 01 20  1  11      
    call #0045F299 (:%opSub)              ;#0046C868: 350 2C2AFFFF               v  00 00  1  11      
    lea edi,[ebp-20] (varno)              ;#0046C86D: 215175 EC                  uv 80 20  1  12      
    mov ecx,[ebp-36] (symtab[1274])       ;#0046C870: 213115 DC                  vu 02 20  1  12      
    mov eax,[#0040205C] (JS)              ;#0046C873: 241 5C204000               uv 01 00  1  13      
    call #0045F39A (:%opDivf)             ;#0046C878: 350 1D2BFFFF               v  00 00  1  13      
;  1676     else
;  1677         varno = floor((addr-gvar0)/8)
;  1678     end if
;  1679 --?{varno,maxgvar,addr,gvar0}
;  1680 --{-400121,561,#F4850,#402018}
;  1681 --DEV/SUG:
;  1682 --  if maxgvar!=vmax then return verror("pdiag.e/VarIdx: maxgvar(%d)!=vmax(%d)\n",{maxgvar,vmax})
;  1683     if varno>0 and varno<maxgvar then
    xor edi,edi                           ;#0046C87D: 061377                     uv 80 80  1  14      
    mov eax,[ebp-20] (varno)              ;#0046C87F: 213105 EC                  vu 01 20  1  14      
    mov esi,25                            ;#0046C882: 276 19000000               uv 40 00  1  15      
    mov edx,1270                          ;#0046C887: 272 F6040000               vu 04 00  1  15      
    call #0045F8B0 (:%opJcc)              ;#0046C88C: 350 1F30FFFF               v  00 00  1  16      
    jle #0046C970                         ;#0046C891: 017216 D9000000            v  00 00  1  17      
    mov edi,[ebp-16] (maxgvar)            ;#0046C897: 213175 F0                  uv 80 20  1  18      
    mov eax,[ebp-20] (varno)              ;#0046C89A: 213105 EC                  vu 01 20  1  18      
    mov esi,1269                          ;#0046C89D: 276 F5040000               uv 40 00  1  19      
    mov edx,1270                          ;#0046C8A2: 272 F6040000               vu 04 00  1  19      
    call #0045F8B0 (:%opJcc)              ;#0046C8A7: 350 0430FFFF               v  00 00  1  20      
    jge #0046C970                         ;#0046C8AC: 017215 BE000000            v  00 00  1  21      
;  1684         -- a gvar
;  1685         --(DEV we could do some more error checking here...)
;  1686         --DEV** we need a gvar mapping...
;  1687 --      if varno>0 and varno<=length(vmap) then
;  1688         if varno>0 and varno<=vmax then
    mov esi,[ebp-20] (varno)              ;#0046C8B2: 213165 EC                  uv 40 20  1  22      
    cmp esi,0                             ;#0046C8B5: 203376 00                  uv 00 40  1  23 40   
    jle #0046C8FE                         ;#0046C8B8: 176 44                     v  00 00  1  23      
    mov ecx,[#00402624] (vmax)            ;#0046C8BA: 213015 24264000            uv 02 00  1  24      
    cmp esi,ecx                           ;#0046C8C0: 071316                     uv 00 42  1  25 02   
    jg #0046C8FE                          ;#0046C8C2: 177 3A                     v  00 00  1  25      
;  1689             return vmap[varno]
    mov edi,[#00402628] (vmap)            ;#0046C8C4: 213075 28264000            uv 80 00  1  26      
    cmp edi,h4                            ;#0046C8CA: 201377 00000040            uv 00 80  1  27 80   
    jne #0046C8DC                         ;#0046C8D0: 165 0A                     v  00 00  1  27      
    mov esi,1262                          ;#0046C8D2: 276 EE040000               uv 40 00  1  28      
    call #00462744 (:%pUnassigned)        ;#0046C8D7: 350 685EFFFF               v  00 00  1  28      
    mov edi,esi                           ;#0046C8DC: 211367                     uv 80 40  1  29      
    lea ecx,[ebp-40] (symtab[1275])       ;#0046C8DE: 215115 D8                  vu 02 20  1  29      
    mov esi,[#00402628] (vmap)            ;#0046C8E1: 213065 28264000            uv 40 00  1  30      
    mov edx,1262                          ;#0046C8E7: 272 EE040000               vu 04 00  1  30      
    mov al,0                              ;#0046C8EC: 260 00                     uv 01 00  1  31      
    call #00460FE5 (:%pSubse1)            ;#0046C8EE: 350 F246FFFF               v  00 00  1  31      
    mov eax,[ebp-40] (symtab[1275])       ;#0046C8F3: 213105 D8                  uv 01 20  1  32      
    mov [ebp-40] (symtab[1275]),ebx       ;#0046C8F6: 211135 D8                  vu 00 28  1  32      
    jmp #00462C8F (:%opRetf)              ;#0046C8F9: 351 9163FFFF               v  00 00  1  33      
;  1690         end if
;  1691         printf(1,"bad varno(%d)\n",{varno})
    lea eax,[ebp-44] (symtab[1277])       ;#0046C8FE: 215105 D4                  uv 01 20  1  34      
    mov edx,1                             ;#0046C901: 272 01000000               vu 04 00  1  34      
    push #0046C915                        ;#0046C906: 150 15C94600               uv 00 00  1  35      
    push eax                              ;#0046C90B: 120                        vu 00 01  1  35      
    push esi                              ;#0046C90C: 126                        uv 00 40  1  36      
    mov edi,[ebp-44] (symtab[1277])       ;#0046C90D: 213175 D4                  vu 80 20  1  36      
    jmp #00460143 (:%pMkSq)               ;#0046C910: 351 2E38FFFF               v  00 00  1  37      
    mov ecx,9                             ;#0046C915: 271 09000000               uv 02 00  1  38      
    mov edx,400                           ;#0046C91A: 272 90010000               vu 04 00  1  38      
    call #00462C02 (:%opFrame) (printf)   ;#0046C91F: 350 DE62FFFF               v  00 00  1  39      
    mov [ebp] (fn), dword 1               ;#0046C924: 307105 00 01000000         uv 00 20  1  40      
    mov ecx,[#0040262C]                   ;#0046C92B: 213015 2C264000            vu 02 00  1  40      
    mov [ebp-4] (fmt),ecx                 ;#0046C931: 211115 FC                  uv 00 22  1  41      
    add dword[ebx+ecx*4-8],1              ;#0046C934: 203104213 F8 01            u  00 0A  3  43    *02*
    mov edi,[ebp+20] (prevebp)            ;#0046C939: 213175 14                  vu 80 20  1  45      
    mov eax,[edi-44]                      ;#0046C93C: 213107 D4                  uv 01 80  1  48    *80*
    mov [edi-44], dword h4                ;#0046C93F: 307107 D4 00000040         vu 00 80  1  48      
    cmp eax,h4                            ;#0046C946: 075 00000040               uv 00 01  1  49      
    jne #0046C957                         ;#0046C94B: 165 0A                     v  00 00  1  49      
    mov esi,1277                          ;#0046C94D: 276 FD040000               uv 40 00  1  50      
    call #00462744 (:%pUnassigned)        ;#0046C952: 350 ED5DFFFF               v  00 00  1  50      
    mov [ebp-8] (args),eax                ;#0046C957: 211105 F8                  uv 00 21  1  51      
    mov [ebp+28] (retaddr),#0046C966      ;#0046C95A: 307105 1C 66C94600         vu 00 20  1  51      
    jmp #00444FC4 (code:printf)           ;#0046C961: 351 5E86FDFF               v  00 00  1  52      
;  1692         return -1
    mov eax,-1                            ;#0046C966: 270 FFFFFFFF               uv 01 00  1  53      
    jmp #00462C8F (:%opRetf)              ;#0046C96B: 351 1F63FFFF               v  00 00  1  53      
;  1693 --      return varno
;  1694 --DEV/SUG:
;  1695 --      return verror("bad varno(%d)\n",{varno})
;  1696     end if
;  1697     -- a tvar
;  1698     if rid<1 or rid>length(symtab) then
    mov esi,[ebp-4] (rid)                 ;#0046C970: 213165 FC                  uv 40 20  1  54      
    cmp esi,1                             ;#0046C973: 203376 01                  uv 00 40  1  55 40   
    jl #0046C983                          ;#0046C976: 174 0B                     v  00 00  1  55      
    mov edi,[ebp-8] (symtab)              ;#0046C978: 213175 F8                  uv 80 20  1  56      
    mov ecx,[ebx+edi*4-12]                ;#0046C97B: 213114273 F4               uv 02 88  1  59 80 *80*
    cmp esi,ecx                           ;#0046C97F: 071316                     uv 00 42  1  60 02   
    jle #0046C9F4                         ;#0046C981: 176 71                     v  00 00  1  60      
;  1699         printf(1,"pdiag.e/VarIdx: bad rid(%d)\n",{rid})
    lea eax,[ebp-44] (symtab[1277])       ;#0046C983: 215105 D4                  uv 01 20  1  61      
    mov edx,1                             ;#0046C986: 272 01000000               vu 04 00  1  61      
    push #0046C99A                        ;#0046C98B: 150 9AC94600               uv 00 00  1  62      
    push eax                              ;#0046C990: 120                        vu 00 01  1  62      
    push esi                              ;#0046C991: 126                        uv 00 40  1  63      
    mov edi,[ebp-44] (symtab[1277])       ;#0046C992: 213175 D4                  vu 80 20  1  63      
    jmp #00460143 (:%pMkSq)               ;#0046C995: 351 A937FFFF               v  00 00  1  64      
    mov ecx,9                             ;#0046C99A: 271 09000000               uv 02 00  1  65      
    mov edx,400                           ;#0046C99F: 272 90010000               vu 04 00  1  65      
    call #00462C02 (:%opFrame) (printf)   ;#0046C9A4: 350 5962FFFF               v  00 00  1  66      
    mov [ebp] (fn), dword 1               ;#0046C9A9: 307105 00 01000000         uv 00 20  1  67      
    mov eax,[#00402630]                   ;#0046C9B0: 241 30264000               vu 01 00  1  67      
    mov [ebp-4] (fmt),eax                 ;#0046C9B5: 211105 FC                  uv 00 21  1  68      
    add dword[ebx+eax*4-8],1              ;#0046C9B8: 203104203 F8 01            u  00 09  3  70    *01*
    mov edi,[ebp+20] (prevebp)            ;#0046C9BD: 213175 14                  vu 80 20  1  72      
    mov eax,[edi-44]                      ;#0046C9C0: 213107 D4                  uv 01 80  1  75    *80*
    mov [edi-44], dword h4                ;#0046C9C3: 307107 D4 00000040         vu 00 80  1  75      
    cmp eax,h4                            ;#0046C9CA: 075 00000040               uv 00 01  1  76      
    jne #0046C9DB                         ;#0046C9CF: 165 0A                     v  00 00  1  76      
    mov esi,1277                          ;#0046C9D1: 276 FD040000               uv 40 00  1  77      
    call #00462744 (:%pUnassigned)        ;#0046C9D6: 350 695DFFFF               v  00 00  1  77      
    mov [ebp-8] (args),eax                ;#0046C9DB: 211105 F8                  uv 00 21  1  78      
    mov [ebp+28] (retaddr),#0046C9EA      ;#0046C9DE: 307105 1C EAC94600         vu 00 20  1  78      
    jmp #00444FC4 (code:printf)           ;#0046C9E5: 351 DA85FDFF               v  00 00  1  79      
;  1700         return -1
    mov eax,-1                            ;#0046C9EA: 270 FFFFFFFF               uv 01 00  1  80      
    jmp #00462C8F (:%opRetf)              ;#0046C9EF: 351 9B62FFFF               v  00 00  1  80      
;  1701     end if
;  1702     sr = symtab[rid]
    mov edi,esi                           ;#0046C9F4: 211367                     uv 80 40  1  81      
    lea ecx,[ebp-28] (sr)                 ;#0046C9F6: 215115 E4                  vu 02 20  1  81      
    mov esi,[ebp-8] (symtab)              ;#0046C9F9: 213165 F8                  uv 40 20  1  82      
    mov edx,1267                          ;#0046C9FC: 272 F3040000               vu 04 00  1  82      
    mov al,0                              ;#0046CA01: 260 00                     uv 01 00  1  83      
    call #00460FE5 (:%pSubse1)            ;#0046CA03: 350 DD45FFFF               v  00 00  1  83      
;  1703     if atom(sr) then
    mov ecx,[ebp-28] (sr)                 ;#0046CA08: 213115 E4                  uv 02 20  1  84      
    cmp ecx,h4                            ;#0046CA0B: 201371 00000040            uv 00 02  1  85 02   
    jl #0046CA1A                          ;#0046CA11: 174 07                     v  00 00  1  85      
    cmp byte[ebx+ecx*4-1],#12             ;#0046CA13: 200174213 FF 12            u  00 0A  2  86      
    jne #0046CA8D                         ;#0046CA18: 165 73                     v  00 00  1  87      
;  1704         printf(1,"pdiag.e/VarIdx:atom(symtab[%d])!\n",{rid})
    lea eax,[ebp-44] (symtab[1277])       ;#0046CA1A: 215105 D4                  uv 01 20  1  88      
    mov edx,1                             ;#0046CA1D: 272 01000000               vu 04 00  1  88      
    push #0046CA33                        ;#0046CA22: 150 33CA4600               uv 00 00  1  89      
    push eax                              ;#0046CA27: 120                        vu 00 01  1  89      
    push dword[ebp-4] (rid)               ;#0046CA28: 377165 FC                  np 00 20  2  90      
    mov edi,[ebp-44] (symtab[1277])       ;#0046CA2B: 213175 D4                  uv 80 20  1  92      
    jmp #00460143 (:%pMkSq)               ;#0046CA2E: 351 1037FFFF               v  00 00  1  92      
    mov ecx,9                             ;#0046CA33: 271 09000000               uv 02 00  1  93      
    mov edx,400                           ;#0046CA38: 272 90010000               vu 04 00  1  93      
    call #00462C02 (:%opFrame) (printf)   ;#0046CA3D: 350 C061FFFF               v  00 00  1  94      
    mov [ebp] (fn), dword 1               ;#0046CA42: 307105 00 01000000         uv 00 20  1  95      
    mov eax,[#00402634]                   ;#0046CA49: 241 34264000               vu 01 00  1  95      
    mov [ebp-4] (fmt),eax                 ;#0046CA4E: 211105 FC                  uv 00 21  1  96      
    add dword[ebx+eax*4-8],1              ;#0046CA51: 203104203 F8 01            u  00 09  3  98    *01*
    mov edi,[ebp+20] (prevebp)            ;#0046CA56: 213175 14                  vu 80 20  1 100      
    mov eax,[edi-44]                      ;#0046CA59: 213107 D4                  uv 01 80  1 103    *80*
    mov [edi-44], dword h4                ;#0046CA5C: 307107 D4 00000040         vu 00 80  1 103      
    cmp eax,h4                            ;#0046CA63: 075 00000040               uv 00 01  1 104      
    jne #0046CA74                         ;#0046CA68: 165 0A                     v  00 00  1 104      
    mov esi,1277                          ;#0046CA6A: 276 FD040000               uv 40 00  1 105      
    call #00462744 (:%pUnassigned)        ;#0046CA6F: 350 D05CFFFF               v  00 00  1 105      
    mov [ebp-8] (args),eax                ;#0046CA74: 211105 F8                  uv 00 21  1 106      
    mov [ebp+28] (retaddr),#0046CA83      ;#0046CA77: 307105 1C 83CA4600         vu 00 20  1 106      
    jmp #00444FC4 (code:printf)           ;#0046CA7E: 351 4185FDFF               v  00 00  1 107      
;  1705         return -1
    mov eax,-1                            ;#0046CA83: 270 FFFFFFFF               uv 01 00  1 108      
    jmp #00462C8F (:%opRetf)              ;#0046CA88: 351 0262FFFF               v  00 00  1 108      
;  1706     end if
;  1707     nTyp = sr[S_NTyp]
    mov edi,2                             ;#0046CA8D: 277 02000000               uv 80 00  1 109      
    lea ecx,[ebp-32] (nTyp)               ;#0046CA92: 215115 E0                  vu 02 20  1 109      
    mov esi,[ebp-28] (sr)                 ;#0046CA95: 213165 E4                  uv 40 20  1 110      
    mov edx,1272                          ;#0046CA98: 272 F8040000               vu 04 00  1 110      
    mov al,0                              ;#0046CA9D: 260 00                     uv 01 00  1 111      
    call #00460FE5 (:%pSubse1)            ;#0046CA9F: 350 4145FFFF               v  00 00  1 111      
;  1708     if nTyp<S_Type then
    cmp eax,6                             ;#0046CAA4: 203370 06                  uv 00 01  1 112      
    jge #0046CB20                         ;#0046CAA7: 175 77                     v  00 00  1 112      
;  1709         printf(1,"pdiag.e/VarIdx:bad type(symtab[%d][S_NTyp]=%d)!\n",{rid,nTyp})
    lea eax,[ebp-44] (symtab[1277])       ;#0046CAA9: 215105 D4                  uv 01 20  1 113      
    mov edx,2                             ;#0046CAAC: 272 02000000               vu 04 00  1 113      
    push #0046CAC5                        ;#0046CAB1: 150 C5CA4600               uv 00 00  1 114      
    push eax                              ;#0046CAB6: 120                        vu 00 01  1 114      
    push dword[ebp-32] (nTyp)             ;#0046CAB7: 377165 E0                  np 00 20  2 115      
    push dword[ebp-4] (rid)               ;#0046CABA: 377165 FC                  np 00 20  2 117      
    mov edi,[ebp-44] (symtab[1277])       ;#0046CABD: 213175 D4                  uv 80 20  1 119      
    jmp #00460143 (:%pMkSq)               ;#0046CAC0: 351 7E36FFFF               v  00 00  1 119      
    mov ecx,9                             ;#0046CAC5: 271 09000000               uv 02 00  1 120      
    mov edx,400                           ;#0046CACA: 272 90010000               vu 04 00  1 120      
    call #00462C02 (:%opFrame) (printf)   ;#0046CACF: 350 2E61FFFF               v  00 00  1 121      
    mov [ebp] (fn), dword 1               ;#0046CAD4: 307105 00 01000000         uv 00 20  1 122      
    mov ecx,[#00402638]                   ;#0046CADB: 213015 38264000            vu 02 00  1 122      
    mov [ebp-4] (fmt),ecx                 ;#0046CAE1: 211115 FC                  uv 00 22  1 123      
    add dword[ebx+ecx*4-8],1              ;#0046CAE4: 203104213 F8 01            u  00 0A  3 125    *02*
    mov edi,[ebp+20] (prevebp)            ;#0046CAE9: 213175 14                  vu 80 20  1 127      
    mov eax,[edi-44]                      ;#0046CAEC: 213107 D4                  uv 01 80  1 130    *80*
    mov [edi-44], dword h4                ;#0046CAEF: 307107 D4 00000040         vu 00 80  1 130      
    cmp eax,h4                            ;#0046CAF6: 075 00000040               uv 00 01  1 131      
    jne #0046CB07                         ;#0046CAFB: 165 0A                     v  00 00  1 131      
    mov esi,1277                          ;#0046CAFD: 276 FD040000               uv 40 00  1 132      
    call #00462744 (:%pUnassigned)        ;#0046CB02: 350 3D5CFFFF               v  00 00  1 132      
    mov [ebp-8] (args),eax                ;#0046CB07: 211105 F8                  uv 00 21  1 133      
    mov [ebp+28] (retaddr),#0046CB16      ;#0046CB0A: 307105 1C 16CB4600         vu 00 20  1 133      
    jmp #00444FC4 (code:printf)           ;#0046CB11: 351 AE84FDFF               v  00 00  1 134      
;  1710         return -1
    mov eax,-1                            ;#0046CB16: 270 FFFFFFFF               uv 01 00  1 135      
    jmp #00462C8F (:%opRetf)              ;#0046CB1B: 351 6F61FFFF               v  00 00  1 135      
;  1711     end if
;  1712 --DEV (untried)
;  1713 --  tidx = floor((or_ebp*4-addr)/machine_word())
;  1714     if machine_bits()=32 then
;  1715         tidx = floor((or_ebp*4-addr)/4)
    mov esi,[#004025F8] (or_ebp)          ;#0046CB20: 213065 F8254000            uv 40 00  1 136      
    cmp esi,h4                            ;#0046CB26: 201376 00000040            uv 00 40  1 137 40   
    jne #0046CB38                         ;#0046CB2C: 165 0A                     v  00 00  1 137      
    mov esi,1238                          ;#0046CB2E: 276 D6040000               uv 40 00  1 138      
    call #00462744 (:%pUnassigned)        ;#0046CB33: 350 0C5CFFFF               v  00 00  1 138      
    lea edi,[ebp-36] (symtab[1274])       ;#0046CB38: 215175 DC                  uv 80 20  1 139      
    mov ecx,esi                           ;#0046CB3B: 211361                     vu 02 40  1 139      
    mov eax,[#0040205C] (JS)              ;#0046CB3D: 241 5C204000               uv 01 00  1 140      
    call #0045F412 (:%opMul)              ;#0046CB42: 350 CB28FFFF               v  00 00  1 140      
    lea edi,[ebp-52] (symtab[1282])       ;#0046CB47: 215175 CC                  uv 80 20  1 141      
    mov ecx,[ebp-36] (symtab[1274])       ;#0046CB4A: 213115 DC                  vu 02 20  1 141      
    mov eax,[ebp] (addr)                  ;#0046CB4D: 213105 00                  uv 01 20  1 142      
    call #0045F299 (:%opSub)              ;#0046CB50: 350 4427FFFF               v  00 00  1 142      
    lea edi,[ebp-24] (tidx)               ;#0046CB55: 215175 E8                  uv 80 20  1 143      
    mov ecx,[ebp-52] (symtab[1282])       ;#0046CB58: 213115 CC                  vu 02 20  1 143      
    mov eax,[#0040205C] (JS)              ;#0046CB5B: 241 5C204000               uv 01 00  1 144      
    call #0045F39A (:%opDivf)             ;#0046CB60: 350 3528FFFF               v  00 00  1 144      
;  1716     else
;  1717         tidx = floor((or_ebp*4-addr)/8)
;  1718     end if
;  1719 --?tidx
;  1720     varno = sr[S_Parm1]
    mov edi,8                             ;#0046CB65: 277 08000000               uv 80 00  1 145      
    lea ecx,[ebp-20] (varno)              ;#0046CB6A: 215115 EC                  vu 02 20  1 145      
    mov esi,[ebp-28] (sr)                 ;#0046CB6D: 213165 E4                  uv 40 20  1 146      
    mov edx,1272                          ;#0046CB70: 272 F8040000               vu 04 00  1 146      
    mov al,0                              ;#0046CB75: 260 00                     uv 01 00  1 147      
    call #00460FE5 (:%pSubse1)            ;#0046CB77: 350 6944FFFF               v  00 00  1 147      
;  1721     while 1 do
;  1722         if varno<1 or varno>length(symtab) then
    mov edi,[ebp-20] (varno)              ;#0046CB7C: 213175 EC                  uv 80 20  1 148      
    cmp edi,1                             ;#0046CB7F: 203377 01                  uv 00 80  1 149 80   
    jl #0046CB8F                          ;#0046CB82: 174 0B                     v  00 00  1 149      
    mov ecx,[ebp-8] (symtab)              ;#0046CB84: 213115 F8                  uv 02 20  1 150      
    mov esi,[ebx+ecx*4-12]                ;#0046CB87: 213164213 F4               uv 40 0A  1 153 02 *02*
    cmp edi,esi                           ;#0046CB8B: 071367                     uv 00 C0  1 154 40   
    jle #0046CBD1                         ;#0046CB8D: 176 42                     v  00 00  1 154      
;  1723             printf(1,"pdiag.e/VarIdx:bad S_Parm1/S_link chain (varno=%d)\n",varno)
    mov ecx,9                             ;#0046CB8F: 271 09000000               uv 02 00  1 155      
    mov edx,400                           ;#0046CB94: 272 90010000               vu 04 00  1 155      
    call #00462C02 (:%opFrame) (printf)   ;#0046CB99: 350 6460FFFF               v  00 00  1 156      
    mov [ebp] (fn), dword 1               ;#0046CB9E: 307105 00 01000000         uv 00 20  1 157      
    mov eax,[#0040263C]                   ;#0046CBA5: 241 3C264000               vu 01 00  1 157      
    mov [ebp-4] (fmt),eax                 ;#0046CBAA: 211105 FC                  uv 00 21  1 158      
    add dword[ebx+eax*4-8],1              ;#0046CBAD: 203104203 F8 01            u  00 09  3 160    *01*
    mov edi,[ebp+20] (prevebp)            ;#0046CBB2: 213175 14                  vu 80 20  1 162      
    mov eax,[edi-20]                      ;#0046CBB5: 213107 EC                  uv 01 80  1 165    *80*
    mov [ebp-8] (args),eax                ;#0046CBB8: 211105 F8                  uv 00 21  1 166 01   
    mov [ebp+28] (retaddr),#0046CBC7      ;#0046CBBB: 307105 1C C7CB4600         vu 00 20  1 166      
    jmp #00444FC4 (code:printf)           ;#0046CBC2: 351 FD83FDFF               v  00 00  1 167      
;  1724             return -1
    mov eax,-1                            ;#0046CBC7: 270 FFFFFFFF               uv 01 00  1 168      
    jmp #00462C8F (:%opRetf)              ;#0046CBCC: 351 BE60FFFF               v  00 00  1 168      
;  1725         end if
;  1726         sr = symtab[varno]
    lea ecx,[ebp-28] (sr)                 ;#0046CBD1: 215115 E4                  uv 02 20  1 169      
    mov esi,[ebp-8] (symtab)              ;#0046CBD4: 213165 F8                  vu 40 20  1 169      
    mov edx,1267                          ;#0046CBD7: 272 F3040000               uv 04 00  1 170      
    mov al,0                              ;#0046CBDC: 260 00                     vu 01 00  1 170      
    call #00460FE5 (:%pSubse1)            ;#0046CBDE: 350 0244FFFF               v  00 00  1 171      
;  1727         if atom(sr) then
    mov ecx,[ebp-28] (sr)                 ;#0046CBE3: 213115 E4                  uv 02 20  1 172      
    cmp ecx,h4                            ;#0046CBE6: 201371 00000040            uv 00 02  1 173 02   
    jl #0046CBF5                          ;#0046CBEC: 174 07                     v  00 00  1 173      
    cmp byte[ebx+ecx*4-1],#12             ;#0046CBEE: 200174213 FF 12            u  00 0A  2 174      
    jne #0046CC37                         ;#0046CBF3: 165 42                     v  00 00  1 175      
;  1728             printf(1,"pdiag.e:atom(symtab[%d])!\n",varno)
    mov ecx,9                             ;#0046CBF5: 271 09000000               uv 02 00  1 176      
    mov edx,400                           ;#0046CBFA: 272 90010000               vu 04 00  1 176      
    call #00462C02 (:%opFrame) (printf)   ;#0046CBFF: 350 FE5FFFFF               v  00 00  1 177      
    mov [ebp] (fn), dword 1               ;#0046CC04: 307105 00 01000000         uv 00 20  1 178      
    mov eax,[#00402640]                   ;#0046CC0B: 241 40264000               vu 01 00  1 178      
    mov [ebp-4] (fmt),eax                 ;#0046CC10: 211105 FC                  uv 00 21  1 179      
    add dword[ebx+eax*4-8],1              ;#0046CC13: 203104203 F8 01            u  00 09  3 181    *01*
    mov edi,[ebp+20] (prevebp)            ;#0046CC18: 213175 14                  vu 80 20  1 183      
    mov eax,[edi-20]                      ;#0046CC1B: 213107 EC                  uv 01 80  1 186    *80*
    mov [ebp-8] (args),eax                ;#0046CC1E: 211105 F8                  uv 00 21  1 187 01   
    mov [ebp+28] (retaddr),#0046CC2D      ;#0046CC21: 307105 1C 2DCC4600         vu 00 20  1 187      
    jmp #00444FC4 (code:printf)           ;#0046CC28: 351 9783FDFF               v  00 00  1 188      
;  1729             return -1
    mov eax,-1                            ;#0046CC2D: 270 FFFFFFFF               uv 01 00  1 189      
    jmp #00462C8F (:%opRetf)              ;#0046CC32: 351 5860FFFF               v  00 00  1 189      
;  1730         end if
;  1731         nTyp = sr[S_NTyp]
    mov edi,2                             ;#0046CC37: 277 02000000               uv 80 00  1 190      
    lea ecx,[ebp-32] (nTyp)               ;#0046CC3C: 215115 E0                  vu 02 20  1 190      
    mov esi,[ebp-28] (sr)                 ;#0046CC3F: 213165 E4                  uv 40 20  1 191      
    mov edx,1272                          ;#0046CC42: 272 F8040000               vu 04 00  1 191      
    mov al,0                              ;#0046CC47: 260 00                     uv 01 00  1 192      
    call #00460FE5 (:%pSubse1)            ;#0046CC49: 350 9743FFFF               v  00 00  1 192      
;  1732         if nTyp!=S_TVar3 then
    cmp eax,3                             ;#0046CC4E: 203370 03                  uv 00 01  1 193      
    je #0046CCCA                          ;#0046CC51: 164 77                     v  00 00  1 193      
;  1733             printf(1,"pdiag.e/VarIdx:bad type(symtab[%d][S_NTyp](%d)!=S_TVar3)\n",{rid,nTyp})
    lea eax,[ebp-44] (symtab[1277])       ;#0046CC53: 215105 D4                  uv 01 20  1 194      
    mov edx,2                             ;#0046CC56: 272 02000000               vu 04 00  1 194      
    push #0046CC6F                        ;#0046CC5B: 150 6FCC4600               uv 00 00  1 195      
    push eax                              ;#0046CC60: 120                        vu 00 01  1 195      
    push dword[ebp-32] (nTyp)             ;#0046CC61: 377165 E0                  np 00 20  2 196      
    push dword[ebp-4] (rid)               ;#0046CC64: 377165 FC                  np 00 20  2 198      
    mov edi,[ebp-44] (symtab[1277])       ;#0046CC67: 213175 D4                  uv 80 20  1 200      
    jmp #00460143 (:%pMkSq)               ;#0046CC6A: 351 D434FFFF               v  00 00  1 200      
    mov ecx,9                             ;#0046CC6F: 271 09000000               uv 02 00  1 201      
    mov edx,400                           ;#0046CC74: 272 90010000               vu 04 00  1 201      
    call #00462C02 (:%opFrame) (printf)   ;#0046CC79: 350 845FFFFF               v  00 00  1 202      
    mov [ebp] (fn), dword 1               ;#0046CC7E: 307105 00 01000000         uv 00 20  1 203      
    mov ecx,[#00402644]                   ;#0046CC85: 213015 44264000            vu 02 00  1 203      
    mov [ebp-4] (fmt),ecx                 ;#0046CC8B: 211115 FC                  uv 00 22  1 204      
    add dword[ebx+ecx*4-8],1              ;#0046CC8E: 203104213 F8 01            u  00 0A  3 206    *02*
    mov edi,[ebp+20] (prevebp)            ;#0046CC93: 213175 14                  vu 80 20  1 208      
    mov eax,[edi-44]                      ;#0046CC96: 213107 D4                  uv 01 80  1 211    *80*
    mov [edi-44], dword h4                ;#0046CC99: 307107 D4 00000040         vu 00 80  1 211      
    cmp eax,h4                            ;#0046CCA0: 075 00000040               uv 00 01  1 212      
    jne #0046CCB1                         ;#0046CCA5: 165 0A                     v  00 00  1 212      
    mov esi,1277                          ;#0046CCA7: 276 FD040000               uv 40 00  1 213      
    call #00462744 (:%pUnassigned)        ;#0046CCAC: 350 935AFFFF               v  00 00  1 213      
    mov [ebp-8] (args),eax                ;#0046CCB1: 211105 F8                  uv 00 21  1 214      
    mov [ebp+28] (retaddr),#0046CCC0      ;#0046CCB4: 307105 1C C0CC4600         vu 00 20  1 214      
    jmp #00444FC4 (code:printf)           ;#0046CCBB: 351 0483FDFF               v  00 00  1 215      
;  1734             return -1
    mov eax,-1                            ;#0046CCC0: 270 FFFFFFFF               uv 01 00  1 216      
    jmp #00462C8F (:%opRetf)              ;#0046CCC5: 351 C55FFFFF               v  00 00  1 216      
;  1735         end if
;  1736         if tidx=0 then exit end if
    xor edi,edi                           ;#0046CCCA: 061377                     uv 80 80  1 217      
    mov eax,[ebp-24] (tidx)               ;#0046CCCC: 213105 E8                  vu 01 20  1 217      
    mov esi,25                            ;#0046CCCF: 276 19000000               uv 40 00  1 218      
    mov edx,1271                          ;#0046CCD4: 272 F7040000               vu 04 00  1 218      
    call #0045F91F (:%opJccE)             ;#0046CCD9: 350 412CFFFF               v  00 00  1 219      
    je #0046CD21                          ;#0046CCDE: 164 41                     v  00 00  1 220      
;  1737         varno = sr[S_Slink]
    mov edi,6                             ;#0046CCE0: 277 06000000               uv 80 00  1 221      
    lea ecx,[ebp-20] (varno)              ;#0046CCE5: 215115 EC                  vu 02 20  1 221      
    mov esi,[ebp-28] (sr)                 ;#0046CCE8: 213165 E4                  uv 40 20  1 222      
    mov edx,1272                          ;#0046CCEB: 272 F8040000               vu 04 00  1 222      
    mov al,0                              ;#0046CCF0: 260 00                     uv 01 00  1 223      
    call #00460FE5 (:%pSubse1)            ;#0046CCF2: 350 EE42FFFF               v  00 00  1 223      
;  1738         tidx -= 1
    mov edi,[ebp-24] (tidx)               ;#0046CCF7: 213175 E8                  uv 80 20  1 224      
    cmp edi,h4                            ;#0046CCFA: 201377 00000040            uv 00 80  1 225 80   
    jne #0046CD0C                         ;#0046CD00: 165 0A                     v  00 00  1 225      
    mov esi,1271                          ;#0046CD02: 276 F7040000               uv 40 00  1 226      
    call #00462744 (:%pUnassigned)        ;#0046CD07: 350 385AFFFF               v  00 00  1 226      
    lea edi,[ebp-24] (tidx)               ;#0046CD0C: 215175 E8                  uv 80 20  1 227      
    mov ecx,[ebp-24] (tidx)               ;#0046CD0F: 213115 E8                  vu 02 20  1 227      
    mov eax,[#0040201C]                   ;#0046CD12: 241 1C204000               uv 01 00  1 228      
    call #0045F2B2 (:%opSubi)             ;#0046CD17: 350 9625FFFF               v  00 00  1 228      
;  1739     end while
    jmp #0046CB7C                         ;#0046CD1C: 351 5BFEFFFF               v  00 00  1 229      
;  1740     return varno
    mov eax,[ebp-20] (varno)              ;#0046CD21: 213105 EC                  uv 01 20  1 230      
    jmp #00462C8F (:%opRetf)              ;#0046CD24: 351 665FFFFF               v  00 00  1 230      
;  1741 --/*
;  1742 integer tidx, stidx
;  1743 integer N, rtnid
;  1744 object sr
;  1745     stidx = floor((addr-etd)/4)+1
;  1746 --  stidx = floor((etd-addr)/4)+1
;  1747     if stidx>0 and stidx<=length(vmap) then
;  1748         return vmap[stidx]
;  1749     end if
;  1750     -- a local var then:
;  1751     N = peek4u(or_ebp*4+4)
;  1752 --  tidx = floor((addr-or_ebp*4)/4)
;  1753     tidx = floor((or_ebp*4-addr)/4)
;  1754 --DEV isn't this <=0? aren't both N and tidx +ve?!
;  1755 --  if tidx<0 and tidx<N then
;  1756     if tidx>=0 and tidx<N then
;  1757         rtnid = peek4u(or_ebp*4+8)  --DEV?? rid not good enough for ya?
;  1758 -- this may be temp!
;  1759 if rtnid!=rid then
;  1760     puts(1,"pdiag.e:varIdx - rtnid!=rid\n")
;  1761 end if
;  1762         if rtnid<1 or rtnid>length(symtab) then
;  1763             puts(1,"pdiag.e:symtab[rtnid] ioob!\n")
;  1764             return -1
;  1765         end if
;  1766         sr = symtab[rtnid]
;  1767         if atom(sr) then
;  1768             puts(1,"pdiag.e:atom(symtab[rtnid])!\n")
;  1769             return -1
;  1770         end if
;  1771         nTyp = sr[S_NTyp]
;  1772         if nTyp>=S_Type then
;  1773             N = tidx
;  1774             tidx = sr[S_Parm1]
;  1775             while N do
;  1776                 if tidx<1 or tidx>length(symtab) then
;  1777                     puts(1,"\n\n**pdiag.e:bad S_Parm1/S_link chain!\n\n")
;  1778                     return -1
;  1779                 end if
;  1780                 sr = symtab[tidx]
;  1781                 if atom(sr) then
;  1782                     printf(1,"pdiag.e:atom(symtab[tidx(=%d)])!\n",tidx)
;  1783                     return -1
;  1784                 end if
;  1785                 tidx = sr[S_Slink]
;  1786                 N -= 1
;  1787             end while
;  1788             return tidx
;  1789         end if
;  1790     end if
;  1791     printf(1,"\n**pdiag.e:tidx(=%d) out of range!\n",tidx)
;  1792     printf(1,"  (addr=#%08x, ebp=#%08x, N=%d)\n",{addr,or_ebp*4,N})
;  1793     printf(1,"  (stidx=%d, etd=#%08x, length(vmap)=%d)\n",{stidx,etd,length(vmap)})
;  1794 --*/
;  1795 --  return -1   -- oops!
    call #00462756 (:%pBadRetf)           ;#0046CD29: 350 285AFFFF               v  00 00  1 231      
;  1796 end function
;  1797 
;  1798 constant cmp_eax_imm32  = #3D           -- 0o075 imm32              -- cmp eax,imm32
;  1799 
;  1800 --DEV...
;  1801 object crashfile = 0
;  1802 
;  1803 integer diaglooping = 0
;  1804 constant ecode = "diag looping, error code is "
;  1805 constant erais = ", era is #"
;  1806 
;  1807 integer msg_id = 0  -- 1..255  (should we ever need more, then I suggest if al is #FF, 
;  1808                     --          then instead of "and e/rax,#FF", "shr e/rax,8" allows
;  1809                     --          the high 3 bytes of eax to contain another 16 million,
;  1810                     --          and leaves "mov al,#01".."mov al,#FE" still working.)
;  1811 
;  1812 function addrS(atom a)
;  1813     if a=0 then return "0" end if
    mov edi,[ebp] (a)                     ;#0046C5AC: 213175 00                  uv 80 20  1   1      
    cmp edi,0                             ;#0046C5AF: 203377 00                  uv 00 80  1   2 80   
    jne #0046C5C3                         ;#0046C5B2: 165 0F                     v  00 00  1   2      
    mov eax,[#00402250]                   ;#0046C5B4: 241 50224000               uv 01 00  1   3      
    add dword[ebx+eax*4-8],1              ;#0046C5B9: 203104203 F8 01            u  00 09  3   6    *01*
    jmp #00462C8F (:%opRetf)              ;#0046C5BE: 351 CC66FFFF               v  00 00  1   8      
;  1814     return sprintf("%08x",a)
    mov ecx,2                             ;#0046C5C3: 271 02000000               uv 02 00  1   9      
    mov edx,210                           ;#0046C5C8: 272 D2000000               vu 04 00  1   9      
    call #00462C02 (:%opFrame) (sprintf)  ;#0046C5CD: 350 3066FFFF               v  00 00  1  10      
    mov esi,[#0040265C]                   ;#0046C5D2: 213065 5C264000            uv 40 00  1  11      
    mov [ebp] (fmt),esi                   ;#0046C5D8: 211165 00                  uv 00 60  1  12 40   
    add dword[ebx+esi*4-8],1              ;#0046C5DB: 203104263 F8 01            u  00 48  3  14    *40*
    mov edi,[ebp+20] (prevebp)            ;#0046C5E0: 213175 14                  vu 80 20  1  16      
    mov eax,[edi]                         ;#0046C5E3: 213007                     uv 01 80  1  19    *80*
    xor ebx,ebx                           ;#0046C5E5: 061333                     vu 08 08  1  19      
    cmp eax,h4                            ;#0046C5E7: 075 00000040               uv 00 01  1  20      
    jl #0046C5F8                          ;#0046C5EC: 174 0A                     v  00 00  1  20      
    add dword[ebx+eax*4-8],1              ;#0046C5EE: 203104203 F8 01            u  00 09  3  21      
    cmp eax,1293                          ;#0046C5F3: 075 0D050000               vu 00 01  1  23      
    mov [ebp-4] (args),eax                ;#0046C5F8: 211105 FC                  uv 00 21  1  24      
    mov [ebp+28] (retaddr),#0046C607      ;#0046C5FB: 307105 1C 07C64600         vu 00 20  1  24      
    jmp #00454E9A (code:sprintf)          ;#0046C602: 351 9388FEFF               v  00 00  1  25      
    jmp #00462C8F (:%opRetf)              ;#0046C607: 351 8366FFFF               v  00 00  1  26      
;  1815 end function
;  1816 
;  1817 --DEV this may in fact be pointless...
;  1818 integer rbldrqd = 1 -- (shadow copy of the one in pemit2.e)
;  1819 
;  1820 --17/4/16:
;  1821 include builtins\puts1h.e
;  1822 
;  1823 object crash_rtn = -1
;  1824 
;  1825 procedure set_crash_routine(integer rid)
;  1826 -- implements crash_routine()
;  1827 -- specify the routine id of a function to call in the event
;  1828 -- that your program must be shut down due to an error. The
;  1829 -- function should accept one parameter (currently always 0)
;  1830 -- and return 0 to allow any other crash routines to run.
;  1831     if rid=-1 then
    mov esi,[ebp] (rid)                   ;#00461100: 213165 00                  uv 40 20  1   1      
    cmp esi,-1                            ;#00461103: 203376 FF                  uv 00 40  1   2 40   
    jne #0046112E                         ;#00461106: 165 26                     v  00 00  1   2      
;  1832         crash_rtn = -1
    mov edx,[#00402664] (crash_rtn)       ;#00461108: 213025 64264000            uv 04 00  1   3      
    cmp edx,h4                            ;#0046110E: 201372 00000040            uv 00 04  1   4 04   
    mov [crash_rtn], dword -1             ;#00461114: 307005 64264000 FFFFFFFF   vu 00 00  1   4      
    jle #00461166                         ;#0046111E: 176 46                     v  00 00  1   5      
    sub dword[ebx+edx*4-8],1              ;#00461120: 203154223 F8 01            u  00 0C  3   6      
    jne #00461166                         ;#00461125: 165 3F                     v  00 00  1   8      
    call #004639A8 (:%pDealloc)           ;#00461127: 350 7C280000               v  00 00  1   9      
    jmp #00461166                         ;#0046112C: 353 38                     v  00 00  1  10      
;  1833     elsif crash_rtn=-1 then
    mov ecx,[#00402664] (crash_rtn)       ;#0046112E: 213015 64264000            uv 02 00  1  11      
    cmp ecx,-1                            ;#00461134: 203371 FF                  uv 00 02  1  12 02   
    jne #00461153                         ;#00461137: 165 1A                     v  00 00  1  12      
;  1834         crash_rtn = {rid}
    mov eax,#00402664                     ;#00461139: 270 64264000               uv 01 00  1  13      
    mov edx,1                             ;#0046113E: 272 01000000               vu 04 00  1  13      
    push #00461151                        ;#00461143: 150 51114600               uv 00 00  1  14      
    push eax                              ;#00461148: 120                        vu 00 01  1  14      
    push esi                              ;#00461149: 126                        uv 00 40  1  15      
    mov edi,ecx                           ;#0046114A: 211317                     vu 80 02  1  15      
    jmp #00460143 (:%pMkSq)               ;#0046114C: 351 F2EFFFFF               v  00 00  1  16      
    jmp #00461166                         ;#00461151: 353 13                     v  00 00  1  17      
;  1835     else
;  1836         crash_rtn = append(crash_rtn,rid)
    mov edx,#00402664                     ;#00461153: 272 64264000               uv 04 00  1  18      
    mov edi,#00402664                     ;#00461158: 277 64264000               vu 80 00  1  18      
    mov ecx,ebp                           ;#0046115D: 213315                     uv 02 20  1  19      
    xor eax,eax                           ;#0046115F: 061300                     vu 01 01  1  19      
    call #0045F9F7 (:%opApnd)             ;#00461161: 350 91E8FFFF               v  00 00  1  20      
;  1837     end if
    jmp #00462C8F (:%opRetf)              ;#00461166: 351 241B0000               v  00 00  1  21      
;  1838 end procedure
;  1839 
;  1840 --function diag(atom msg_id)
;  1841 procedure diag()
;  1842 --
;  1843 -- create the ex.err.
;  1844 --
;  1845 -- on entry (only called from below) the following must be set:
;  1846 --  msg_id, 1..255
;  1847 --  xceptn, exception code (may be 0)
;  1848 --  xcepta, exception address (iff xceptn!=0)
;  1849 --  or_era, effective return address
;  1850 --  and from the exception context or the real register,
;  1851 --  or_ebp, (should match ebp, pre-diag()) [stored/4]
;  1852 --  or_ecx,
;  1853 --  or_edi,
;  1854 --  or_esi,
;  1855 --  or_esp (should match esp)
;  1856 --
;  1857 -- note that ep1 and ep2 (if used) are (now) msg_id-dependent.
;  1858 --
;  1859 
;  1860 object symtab   -- copy of symtab obtained via :%opGetST (see pStack.e)
;  1861 
;  1862 object  si,             -- copy of symtab[i]
;  1863         sp,             -- copy of symtab[<param/local var>]
;  1864         name,           -- var name or -1 for temporaries we should skip
;  1865         o--,o2          -- output vars
;  1866 integer lineno,         -- linenumber as calculated from return addr/offset & linetab
;  1867 --      linenxt,        -- see lineno calculation
;  1868 --      lti,            -- copy of linetab[i] used in lineno calculation
;  1869 --      thisline,       -- needed for lineno in packed linetab case
;  1870 --      skip,           -- needed for packed linetabs
;  1871         fileno,         -- for grouping symtab entries into files
;  1872         fpno,           -- copy of si[S_FPno]
;  1873         sNTyp           -- copy of sr[S_NTyp]
;  1874 integer c               -- scratch var
;  1875 atom    --returnoffset, -- era as offset into code block, used in lineno calc
;  1876         TchkRetAddr,    -- value of !opTchkRetAddr in pStack.e
;  1877         cb_ret_addr,    -- value of !cb_ret in pcfunc.e
;  1878         cf_ret_addr     -- value of !cf_ret in pcallfunc.e
;  1879 --      cc_ret_addr     -- value of !cc_ret in pcallfunc.e  [drat: global labels not allowed inside routines!!!]
;  1880 
;  1881 sequence msg,           -- error message, from msgs[msg_id] plus any params
;  1882          wmsg,          -- work var, used for building msg
;  1883 --       s8,            -- copy of symtab[T_callstk], see below
;  1884          sr,            -- copy of symtab[rid]
;  1885 --       linetab,       -- copy of symtab[rid][S_ltab]
;  1886          filename,      -- output var
;  1887          pathset,       -- copy of symtab[T_pathset] with mainpath added if .exe
;  1888          x6             -- e30->e92 fixup
;  1889 
;  1890 --atom ep1, ep2         -- error parameters
;  1891 
;  1892 --integer lastline
;  1893 --integer tmp
;  1894 
;  1895 integer p
;  1896 
;  1897 --DEV temp (29/4/19):
;  1898 --integer N, rid
;  1899 atom N, rid
;  1900 --DEV from_addr is not really used!! (if we can get away without it...)
;  1901 atom from_addr, ehand, ret_addr, prev_ebp, ebp_root
;  1902 atom vsb_prev, vsb_next, vsb_magic
;  1903 string magicok
;  1904 integer abortcode
;  1905 integer rtype   -- 1 skip (lineno=-1),
;  1906                 -- 2 normal
;  1907                 -- 3 without debug
;  1908 integer tidx
;  1909 integer varno
;  1910 integer novalue
;  1911 string msg2
;  1912 
;  1913 --DEV:
;  1914 atom symtabptr
;  1915 atom gvarptr
;  1916 
;  1917 --9/6/21:
;  1918     #ilASM{
;  1919         [32]
;  1920             xor eax,eax
                    xor eax,eax           ;#0046433C: 061300                     uv 01 01  1   1      
;  1921         [64]
;  1922             xor rax,rax
;  1923         []
;  1924             call :%pWithJS
                    call #004637C7 (:%pWithJS)  ;#0046433E: 350 84F4FFFF               v  00 00  1   1      
;  1925             call :%pDeSeqip
                    call #00460A46 (:%pDeSeqip)  ;#00464343: 350 FEC6FFFF               v  00 00  1   2      
;  1926             call :%pSafeOff
                    call #004637D8 (:%pSafeOff)  ;#00464348: 350 8BF4FFFF               v  00 00  1   3      
;  1927           }
;  1928 
;  1929 --20/2/2021
;  1930     cdi_filename = ""
    mov esi,[#004022A4]                   ;#0046434D: 213065 A4224000            uv 40 00  1   4      
    mov edx,[#00402540] (cdi_filename)    ;#00464353: 213025 40254000            vu 04 00  1   4      
    cmp esi,h4                            ;#00464359: 201376 00000040            uv 00 40  1   5      
    jl #00464366                          ;#0046435F: 174 05                     v  00 00  1   5      
    add dword[ebx+esi*4-8],1              ;#00464361: 203104263 F8 01            u  00 48  3   6      
    mov [#00402540] (cdi_filename),esi    ;#00464366: 211065 40254000            vu 00 40  1   8      
    cmp edx,h4                            ;#0046436C: 201372 00000040            uv 00 04  1   9      
    jle #00464380                         ;#00464372: 176 0C                     v  00 00  1   9      
    sub dword[ebx+edx*4-8],1              ;#00464374: 203154223 F8 01            u  00 0C  3  10      
    jne #00464380                         ;#00464379: 165 05                     v  00 00  1  12      
    call #004639A8 (:%pDealloc)           ;#0046437B: 350 28F6FFFF               v  00 00  1  13      
;  1931     cdi_varname = ""
    mov ecx,[#004022A4]                   ;#00464380: 213015 A4224000            uv 02 00  1  14      
    mov edx,[#00402544] (cdi_varname)     ;#00464386: 213025 44254000            vu 04 00  1  14      
    cmp ecx,h4                            ;#0046438C: 201371 00000040            uv 00 02  1  15      
    jl #00464399                          ;#00464392: 174 05                     v  00 00  1  15      
    add dword[ebx+ecx*4-8],1              ;#00464394: 203104213 F8 01            u  00 0A  3  16      
    mov [#00402544] (cdi_varname),ecx     ;#00464399: 211015 44254000            vu 00 02  1  18      
    cmp edx,h4                            ;#0046439F: 201372 00000040            uv 00 04  1  19      
    jle #004643B3                         ;#004643A5: 176 0C                     v  00 00  1  19      
    sub dword[ebx+edx*4-8],1              ;#004643A7: 203154223 F8 01            u  00 0C  3  20      
    jne #004643B3                         ;#004643AC: 165 05                     v  00 00  1  22      
    call #004639A8 (:%pDealloc)           ;#004643AE: 350 F5F5FFFF               v  00 00  1  23      
;  1932 
;  1933 --26/4/2021 (moved from constants to inner, due to p2js-related changes to pmain.e/DoSequence().)
;  1934 --
;  1935 -- *NB* These must be kept in very strict order, never delete or insert entries.
;  1936 --
;  1937 sequence msgs =
;  1938 {
;  1939  "type check failure, %s is %s\n",                              -- e01tcf
;  1940     -- As called from opTchk, when var-id is known (idx in ecx).
;  1941     -- See also e110tce, called when var_id not known (addr in ecx).
;  1942     -- Note: s[i+1] gives a type check failure with a ???[S_name]=0
;  1943     --  if i is #3FFFFFFF, as unnamed temporary index sums are given 
;  1944     --  an integer type (for performance reasons). Obviously that is
;  1945     --  less than ideal and ought to be fixed one day. [DEV]
;  1946  "attempt to divide by 0\n",                                    -- e02atdb0
;  1947  "true/false condition must be an ATOM\n",                      -- e03tfcmbaa
;  1948     -- Usually only happens on "if x then" where x is not 
;  1949     -- a relational expression (eg a=b) but is either a 
;  1950     -- single variable or a function result. (unlike RDS)
;  1951     -- see also e14soa. Note this message may not occur
;  1952     -- on subscripted items when a program is compiled, eg
;  1953     -- if x is {1,2,"fred",4} then "if x[3] then" is just 
;  1954     -- treated as true (not zero), though you should get
;  1955     -- an error when the same code is interpreted. This is
;  1956     -- a deliberate optimisation.
;  1957 --DEV maybe we shouldn't inline unless it's a sequence of integer?
;  1958  "attempt to subscript an atom\n",                              -- e04atsaa
;  1959 --30/4/24
;  1960 -- "subscript is not an atom\n",                                -- e05sinaa
;  1961  "subscript is not an integer\n",                               -- e05sinaa
;  1962  "index %d out of bounds, assigning to sequence length %d\n",   -- e06ioob
;  1963  "slice start is less than 1 (%d)\n",                           -- e07ssilt1
;  1964     -- Note that the value shown is that after adjustment 
;  1965     -- for negative indexes, eg if length(x) is 10, then
;  1966     -- x[-11..10] will complain ssilt1 (0) as -11 maps to 0.
;  1967     -- see e10sspeos. In fact e07ssilt1 only ocurs for 0. [Erm? DEV test that]
;  1968     -- Obviously if the slice start is a variable, rather
;  1969     -- than an expression, the "true" value can be found
;  1970     -- elsewhere in the ex.err file.
;  1971  "slice end is not an integer\n",                               -- e08seinai
;  1972  "slice length is negative [%d..%d]\n",                         -- e09slin
;  1973     -- values shown are as adjusted for negative indexes, [DEV?]
;  1974     --  eg if length(s)=4, then s[-1..-3] shows as [4..2]
;  1975     -- see also comments against e07ssilt1.
;  1976  "slice starts past end of sequence (%d > %d)\n",               -- e10sspeos
;  1977     -- or slice start(%d) less than negative length(%d), see below
;  1978  "slice ends past end of sequence (%d > %d)\n",                 -- e11sepeos
;  1979     -- or slice end(%d) less than negative length(%d), see below
;  1980  "program aborted\n",                                           -- e12pa
;  1981     -- Operator has typed '!' in the trace() window.
;  1982  "attempt to exit a function without returning a value\n",      -- e13ateafworav
;  1983     -- For an example of why this cannot/should not be trapped 
;  1984     -- as a compile-time error, see isChecked() in arwen.ew.
;  1985  "sequence op (%s) attempted (use sq_%s?)\n",                   -- e14soa
;  1986     -- Phix does not support implicit/infix sequence ops;
;  1987     -- you must use explicit function-style calls, ie/eg
;  1988     -- replace "{1,2}+3" with "sq_add({1,2},3)" to get {4,5}.
;  1989     --  (Acutally, in the name of compatibility with legacy code,
;  1990     --   it will replace some of the most blatently obvious cases,
;  1991     --   see sqopWarn in p.exw/pmain.e)
;  1992     -- Note that name="Pete" yields 1 or 0 (True/False) on Phix,
;  1993     -- instead of eg {0,1,0,1}, "sequence lengths not the same",
;  1994     -- or the infamous "true/false condition must be an ATOM".
;  1995     -- (the latter can still happen, just nowhere near as often)
;  1996     -- Forcing "+" to be replaced with "sq_add" is better, IMNSHO, than
;  1997     -- forcing "=" to be replaced with "equal", as happens with RDS Eu.
;  1998     -- (nb some legacy code may need "=" to be replaced with "sq_eq")
;  1999     -- Also the compile-time errors "type error (use sq_add?)" et al
;  2000     -- catch a significant number of cases before it gets to this.
;  2001     -- Lastly, there is no sense, for example, in changing the infix
;  2002     -- relational ops (<,<=,=,!=,>=,>) to always return a boolean but
;  2003     -- still allowing maths ops (+,-,*,/) to do sequence ops. This 
;  2004     -- would spanner all legacy code even more, for example the old
;  2005     -- upper/lower would work fine on chars but leave all sequences/
;  2006     -- strings completely unchanged. It is far more helpful to sound
;  2007     -- this alarm than silently go wrong.
;  2008  "unrecognised c_func return type\n",                           -- e15ucfrt
;  2009     -- Note that C_FLOAT, E_INTEGER, E_ATOM, and E_OBJECT have not
;  2010     --  been attempted/tested and hence report this error.
;  2011     -- (for the latter 3 I require a suitable RDS-Eu-compiled DLL)  --DEV
;  2012     -- BTW: E_INTEGER, E_ATOM, E_SEQUENCE, and E_OBJECT are only
;  2013     --  used for RDS-Eu-compiled DLLs, new values (P_XXX?) will
;  2014     --  have to be devised for Phix-compiled DLLs, if/when that
;  2015     --  becomes possible.
;  2016  "call_backs cannot have optional parameters\n",                -- e16cbchop
;  2017     -- There is no way for Phix to determine how many parameters
;  2018     --  some C/asm/other language has pushed onto the stack, shy 
;  2019     --  of entire program dissassembly/analysis that is, and not
;  2020     --  that I have ever seen a callback with anything other than
;  2021     --  a fixed number of parameters (and if I ever did, then my
;  2022     --  answer would be a separate "call_back_var_args" routine).
;  2023     -- If you want optional/defaulted parameters for the benefit
;  2024     --  of other Phix code, then you may need a "thin wrapper":
;  2025     --  function varfunc(a=?, b=?,...)
;  2026     --      ....
;  2027     --  end function
;  2028     --  ---nono = call_back(routine_id("varfunc")) -- this error
;  2029     --  function fixfunc(a,b,...)
;  2030     --      return varfunc(a,b,...) -- a "thin wrapper"
;  2031     --  end function
;  2032     --  cb_xx = call_back(routine_id("fixfunc"))
;  2033     -- Hence you can call varfunc with more or less parameters,
;  2034     --  whereas cb_xx is always invoked with a known fixed set.
;  2035  "sequence op (mul) attempted (use sq_mul?)\n",                 -- e17soma      -- """"""""""""""" --
;  2036  "sequence op (remainder) attempted (use sq_remainder?)\n",     -- e18sora      -- """"""""""""""" --
;  2037  "sequence op (floor) attempted (use sq_floor?)\n",             -- e19sofa      -- """"""""""""""" --
;  2038  "invalid match start index\n",                                 -- e20imsi
;  2039  "invalid find start index\n",                                  -- e21ifsi
;  2040     -- In find('3',"123",s), s of 1..3 and -1..-3 yield 3,
;  2041     --  4 yields 0, but all other values, including non-atoms,
;  2042     --  unassigned variables, 0, and s<=-4, yield this error.
;  2043     --  Of course -1, being shorthand for length(), is the 
;  2044     --  same as 3 in the above, and -3 is the same as 1.
;  2045     -- Aside: find('.',filename,-5) could be used to quickly
;  2046     --  find a file extension of 4 or less characters. While
;  2047     --  length+1 can be helpful, as resuming on lastresult+1
;  2048     --  is a common idiom, there is no similar equivalent for
;  2049     --  negative subscripts. It may turn out that just simply
;  2050     --  ignoring bad (integer) starts and returning 0 makes
;  2051     --  for an easier life, I could easily do that if the 
;  2052     --  common consus suggests it would be better, though it
;  2053     --  seems to me more likely to catch bugs/typos this way.
;  2054  "invalid mem_copy length\n",                                   -- e22imcl
;  2055     -- number of bytes to copy is negative
;  2056  "invalid mem_set length\n",                                    -- e23imsl
;  2057     -- number of bytes to set is negative
;  2058     --  (ditto)
;  2059  "invalid mem_copy memory address\n",                           -- e24imcma
;  2060     -- a machine exception occurred in a mem_copy operation
;  2061  "invalid mem_set memory address\n",                            -- e25imsma
;  2062     -- a machine exception occurred in a mem_set operation
;  2063  "invalid argument type for integer := peek()\n",               -- e26iatfpi
;  2064     -- Occurs, for example, in integer i = peek(x), when x is
;  2065     --  assigned to something like {addr,4}.
;  2066     -- The compiler emits opPeeki rather than opPeek because 
;  2067     --  the result is an integer, however opPeeki does not
;  2068     --  have any code to deal with a sequence argument, and 
;  2069     --  even if it did, a typecheck on i would occur anyway.
;  2070  "argument to rand() must be >= 1\n",                           -- e27atrmbge1
;  2071     -- (Acutally this only triggers for 0; -1 is treated as
;  2072     --  MAXUINT, which has turned out to be quite handy.)
;  2073  "argument to %s() must be an atom (use sq_%s?)\n",             -- e28NNatXmbausq
;  2074 -- no longer used (e48atlmmba triggers instead)
;  2075 -- "argument to set_rand() must be an atom\n",                  -- e29atsrmba
;  2076  -1,
;  2077 -- "with/without js conflict\n",                                    -- e29wojsc
;  2078     -- something said with js, something else said without js.
;  2079     -- (a compile-time error, non-catchable except by p.exw itself)
;  2080     -- (in the end, this was done directly in pmain.e/DoWith())
;  2081  "fatal exception %s at #%08x\n",                               -- e30ume
;  2082     -- Unknown machine error.
;  2083     --
;  2084     -- It is pretty much the job of this program, with help
;  2085     -- from the back end, to map such errors in Phix hll
;  2086     -- code to human-readable form. As per the note above,
;  2087     -- when an error occurs in some dll/asm code, this is
;  2088     -- about the best I can do (with a line no of "-1", unless
;  2089     -- it is part of a #ilasm statement), and hopefully there 
;  2090     -- are enough clues later on in the ex.err to guide you 
;  2091     -- towards solving the problem. However this message should 
;  2092     -- not occur for "pure hll code".
;  2093     --
;  2094     -- There are literally thousands of places in the backend 
;  2095     -- where it catches/maps exceptions, and without any doubt
;  2096     -- there will be several left that were accidentally missed.
;  2097     --
;  2098     -- Generally speaking, addresses in the range #00400000 
;  2099     -- to #0040C000 indicate a problem in the back-end, please
;  2100     -- contact the author (Pete Lomax) for assistance, and/or
;  2101     -- see plist.e, flag dumpVM/the list2.asm that creates.
;  2102     --
;  2103  "memory corruption: eax is #%08x, edx is #%08x\n",             -- e31mce
;  2104     -- only occurs on debug builds
;  2105  "heap corruption [era=%08x, edi=%08x]\n",                      -- e32hc(era,edi)
;  2106     -- oh dear...
;  2107 -- "argument to arctan() must be atom (use sq_arctan?)\n",      -- e33atatmba   -- no longer in use (see e28)
;  2108  "memory allocation failure\n",                                 -- e33maf
;  2109     -- oh dear...
;  2110  "power() function underflow\n",                                -- e34pfu
;  2111     -- result is less than -1.7976931348623146e308
;  2112     -- (technically the term underflow is usually
;  2113     --  used to mean "too near zero", btw, which
;  2114     --  just makes power() quietly return a zero.)
;  2115  "power() function overflow\n",                                 -- e35pfo
;  2116     -- result is more than +1.7976931348623146e308
;  2117  "length of an atom is not defined\n",                          -- e36loaaind
;  2118  "argument to allocate() must be positive integer\n",           -- e37atambpi
;  2119 --DEV e38 no longer used?
;  2120  "argument to free() must be an atom\n",                        -- e38atfmba
;  2121  "arguments to mem_copy() must be atoms\n",                     -- e39atmcmba
;  2122  "arguments to mem_set() must be atoms\n",                      -- e40atmsmba
;  2123  "first argument to poke() must be atom\n",                     -- e41fatpmba
;  2124 --no longer used:
;  2125 -- "first argument to poke4() must be atom\n",                  -- e42fatp4mba
;  2126 -- -1,
;  2127  "abort(%d)\n",                                                 -- e42a(ecx)
;  2128     -- only invoked when an error hander is present.
;  2129     -- normally abort(n) terminates the application,
;  2130     -- however inside a try block (or with a handler
;  2131     -- detected somewhere higher up in the stack) it 
;  2132     -- is mapped to throw(42,"abort(%d)").
;  2133     -- Note that e87acmbi may be triggered first.
;  2134  "argument to peek() must be atom or sequence of two atoms\n",  -- e43atpmbaoso2a
;  2135  "peek size must be 1|2|4|8\n",                                 -- e44psmb1248
;  2136  "attempt to get square root of negative number\n",             -- e45atgsqronn
;  2137 
;  2138  "argument to float32_to_atom() must be sequence of length 4\n", -- e46atf32tambsol4
;  2139  "argument to float64_to_atom() must be sequence of length 8\n", -- e47atf64tambsol8
;  2140     -- btw, the above messages occur for an unassigned argument, rather
;  2141     --  than the usual e92/"variable xxx has not been assigned a value".
;  2142 -- "argument to chdir() must be string\n",                      -- e48atcdmbs
;  2143 -- -1,                                                          -- no longer in use
;  2144  "argument to :%LoadMint must be an atom\n",                    -- e48atlmmba
;  2145  "argument to atom_to_float32() must be atom\n",                -- e49atatf32mba
;  2146  "argument to atom_to_float64() must be atom\n",                -- e50atatf64mba
;  2147  "HeapFree error code [%08x]\n",                                -- e51hfec
;  2148     -- Should not happen. Suggests that your program has
;  2149     -- corrupted memory, the operating system free chain, 
;  2150     -- for instance. Try using safe.e (see that file for
;  2151     -- instructions) and/or a debug version of p.exe. -- DEV
;  2152     -- Make a copy of the program source, then repeatedly
;  2153     -- delete as many lines as possible while the error
;  2154     -- still occurs. If you can get it to under 100 lines
;  2155     -- (program no longer has to do anything useful, btw)
;  2156     -- then you can submit it for further investigation.
;  2157 -- "repeat count must be non negative integer\n",               -- e52rcmbnni
;  2158  "p2js violation: JavaScript does not support string subscript destructuring\n",    -- e52jsdnssd
;  2159 -- -1,--"for loop error\n",                                     -- e53fle           --DEV see e120,1
;  2160  "memory corruption at #%08x (pGtcb*4=#%08x, diff=#%08x)\n",    -- e53mcat(esi,ecx)
;  2161     -- internal error. If you can reproduce this problem,
;  2162     -- ideally on a compiled program with a listing file,
;  2163     -- and get a consistent diff then it should be fairly
;  2164     -- easy to trap after pGtcb has been set and predict
;  2165     -- the memory location that needs trapping. If you do
;  2166     -- not get a consistent diff, or intermittent errors,
;  2167     -- this will likely be very difficult to track down.
;  2168  "attempt to raise negative number to non-integer power\n",     -- e54atrnntnip
;  2169     -- mathematically, power(-3,-3) is an imaginary number.
;  2170  "unhandled exception\n",                                       -- e55ue
;  2171     -- from throw.e - which contains discussion and code to
;  2172     -- report the error on the throw statement (default) or 
;  2173     -- within the throw() routine itself.
;  2174 -- -1,--"first argument to append() must be sequence\n",                -- e55fatambs
;  2175     -- You may mean a&b instead of append(a,b)
;  2176     -- Note that append("one","two") is {'o','n','e',"two"},
;  2177     -- whereas "one"&"two" is "onetwo", although they 
;  2178     -- give the same results if b is an atom.
;  2179 -- -1,--"first argument to prepend() must be sequence\n",           -- e56fatpmbs
;  2180     -- You may mean b&a instead of prepend(a,b)
;  2181     -- Note that prepend("two","one") is {"one",'t','w','o'},
;  2182     -- whereas "one"&"two" is "onetwo", although they 
;  2183     -- give the same results if b is an atom.
;  2184 -- -1, -- spare (dict.e now invokes crash(msg,args,3))
;  2185 -- "invalid dictionary id\n",                                   -- e56idi
;  2186     -- triggered from builtins\dict.e via :!fatalN so that
;  2187     -- the error occurs on the calling statement.
;  2188  "p2js violation: relies on copy on write semantics\n",         -- e56rocow
;  2189     -- something needs a rewrite or deep_copy()...
;  2190     -- this (runtime) error is deemed non-catchable.
;  2191  "invalid file name\n",                                         -- e57ifn
;  2192     -- A common cause of this is using append instead of &:
;  2193     --  append(`C:\test\`,"fred.txt") returns the nested
;  2194     --  {'C',':','\','t','e','s','t','\',"fred.txt"}, whereas
;  2195     --  `C:\test\`&"fred.txt" returns `C:\test\fred.txt`.
;  2196     -- Remember that "append(s,x)" always returns a sequence (or 
;  2197     --  string) of length(s)+1, whereas "s&x" returns a sequence 
;  2198     --  (or string) of length(s)+length(x) [that is, except when 
;  2199     --  x is an atom, in which case they are equivalent].
;  2200  "invalid file number (%d)\n",                                  -- e58bfn(edi) [e58ifn...]
;  2201     -- file must be open for getc, puts, seek, where, etc.
;  2202  "wrong file mode for attempted operation\n",                   -- e59wfmfao
;  2203     -- eg attempt to read a file after open(x,"w").
;  2204  "file number is not an integer\n",                             -- e60fninai
;  2205     -- this error is also common for unassigned vars.
;  2206  "invalid open mode\n",                                         -- e61iom
;  2207     -- second parameter to open must be (r|w|a|u)[b].
;  2208     -- BTW, Phix allows single-character modes, eg 'r',
;  2209     -- whereas RDS Eu does not.
;  2210  "file number %d is not open\n",                                -- e62fnnino
;  2211  "second parameter of seek() must be an atom\n",                -- e63sposmba
;  2212  "seek fail on open append\n",                                  -- e64sfooa
;  2213     -- after successfully opening a file for append
;  2214     -- (fn=open(xxx,"a")), it automatically seeks to
;  2215     -- the end of file. This seek has failed.
;  2216     -- This should not happen, maybe you found a bug,
;  2217     -- or maybe your hard drive has errors.
;  2218  "sequence found in character string\n",                        -- e65sfics
;  2219     -- second parameter to puts or [s]printf may not
;  2220     -- contain nested sequences.
;  2221     -- Try using pp(), ppf(), ?, or [s]print().
;  2222  "invalid lock type\n",                                         -- e66ilt
;  2223  "byterange must be {} or pair of atoms\n",                     -- e67bre
;  2224 -- -1,--"argument to dir() must be string\n",                   -- e68atcdmbs (not actually used/see pdir.e)
;  2225     -- See e73atodmbs
;  2226  "crash(`%s`)\n",                                               -- e68crash
;  2227     -- crash() invoked (but not caught by a try block)
;  2228  "error in format string\n",                                    -- e69eifs (see pprntf.e/badfmt())
;  2229     -- Missing or unrecognised format character after a '%',
;  2230     --  eg "%", "%3.2", "%q". See also e73atodmbs.
;  2231  "insufficient values for (s)printf()\n",                       -- e70ivfpf
;  2232 -- -1,--"argument to getenv() must be string",                  -- e71atgmbs (not actually used/see penv.e)
;  2233     -- See e73atodmbs
;  2234  "call_func/proc parameter error\n",                            -- e71cfppe
;  2235     -- The second argument ("params") is not a sequence.
;  2236  "invalid routine_id(%d)\n",                                    -- e72iri(edi)
;  2237     -- The first argument to call_proc/func, or call_back (which
;  2238     -- can also accept {'+',rtnid} as the first argument) is not
;  2239     -- an integer, is not in the range 1..length(symtab), or
;  2240     -- symtab[i] is not a type, function, or procedure. Usually 
;  2241     -- occurs after a previous call to routine_id, define_c_func, 
;  2242     -- etc returned -1.
;  2243     -- Also invoked directly from delete_routine() aka :%opDelRtn.
;  2244     -- Note: a non-integer routine_id appears as -8.
;  2245 --DEV++
;  2246  "argument to open_dll() must be string\n",                     -- e73atodmbs
;  2247     -- Either the parameter is not a sequence, or some element
;  2248     -- of it is not a character. Note that strings and flat
;  2249     -- dword sequences are equally acceptable, eg/ie "kernel32"
;  2250     -- or {'k','e','r','n','e','l','3','2'} work the same.
;  2251  "define_c_func/proc parameter error\n",                        -- e74dcfpe
;  2252     -- the first argument to define_c_func/proc is:
;  2253     --   an atom, and the second is either unassigned,
;  2254     --                       a sequence of length zero,
;  2255     --               or a sequence containing non-chars, or
;  2256     --   a sequence, with non-zero length, or the second
;  2257     --               parameter is unassigned or sequence.
;  2258     -- ie the legal forms of define_c_func/proc are:
;  2259     --      define_c_func/proc(atom,name,...)
;  2260     --      define_c_func/proc({},addr,...)
;  2261  "call back routine parameters must all be atoms\n",            -- e75cbrpmaba
;  2262  "%c requires an atom value\n",                                 -- e76pcraav
;  2263  "program has run out of memory\n",                             -- e77phroom
;  2264  "attempt to get_text() >1GB file\n",                           -- e78atgtgt1gbf
;  2265     -- Very large files can (obviously) be read line-by-line, or 
;  2266     --  byte-by-byte, or via seeks, but you may *not* load the 
;  2267     --  whole thing into memory at once (1GB ~=300 bibles).
;  2268     --  get_text() is not really suitable for files >5MB.
;  2269  "argument to rand() must be an atom\n",                        -- e79atrmba
;  2270  "call_back returned non-atom\n",                               -- e80cbrna(esi)
;  2271     -- note this error occurs after the callback has returned,
;  2272     -- hence none of the parameters or locals can be shown.
;  2273  "insufficient parameters in call_func/proc()\n",               -- e81ipicfp
;  2274     -- second argument to call_func/proc must be a sequence
;  2275     -- containing at least the number of non-defaluted elements 
;  2276     -- declared as parameters for the specified routine.
;  2277  "argument to call() must be atom\n",                           -- e82atcmba                --DEV 8/6/15: I suspect this is no longer in use...
;  2278     -- Note that Phix allows a call() to a call_back()
;  2279     -- whereas RDS Eu suffers a machine exception.
;  2280  "arguments to position() must be integer\n",                   -- e83atpmbi
;  2281  "call_back parameter must be routine_id or {'+',routine_id}\n", -- e84cbpmbropr
;  2282  "unknown type byte (not 0x12, 0x80, or 0x82)\n",               -- e85utb
;  2283     -- usually caused by memory corruption, has also occurred
;  2284     -- due to compiler emitting invalid refs & fixup failures.
;  2285  "argument to trace() must be integer 0..3\n",                  -- e86attmbi03
;  2286     -- technically -1 is also valid, and implements the same as
;  2287     -- keying 'Q' in the trace() window, ie permanently off.
;  2288  "abort() code must be integer\n",                              -- e87acmbi
;  2289  "arguments to c_%sc() must be atoms or strings\n",             -- e88atcfpmbaos(edi)
;  2290     -- (edi=1 -> c_func, else c_proc)
;  2291  "too many parameters in call_func/proc()\n",                   -- e89tmpicfp
;  2292  "argument to profile() must be 0 or 1\n",                      -- e90atpmb01
;  2293 -- "profile internal error\n",                                  -- e91pie   [DEV]
;  2294  "variable %s has not been assigned a value\n",                 -- e91vhnbaav(ecx)
;  2295     -- or_ecx is var no
;  2296  "variable %s has not been assigned a value\n",                 -- e92vhnbaav(esi)
;  2297     -- or_esi is var no
;  2298  "variable %s has not been assigned a value\n",                 -- e93vhnbaav(edi) [:%opPpndSA]
;  2299     -- or_edi is var address
;  2300  "variable %s has not been assigned a value\n",                 -- e94vhnbaav(edx,esi)  [if integer(esi), report as e04atsaa]
;  2301     -- or_edx is var no
;  2302 --DEV these appear untested:::
;  2303  "text_color error [%08x]\n",                                   -- e95tce
;  2304  "bk_color error [%08x]\n",                                     -- e96bce
;  2305  "heap error [%s]\n",                                           -- e97he
;  2306  "flush error [%s]\n",                                          -- e98fiofe
;  2307     -- internal kernel32 WriteFile failure when writing the
;  2308     -- contents of a file buffer. Code is from Microsoft.
;  2309     -- Unlikely, should not happen, maybe a scandisk
;  2310     -- is needed, maybe your hard drive is failing...
;  2311  "invalid peek memory address\n",                               -- e99ipma
;  2312     -- A MEMORY VIOLATION (#C0000005) exception occured when
;  2313     --  trying to read from the supplied memory address.
;  2314     -- Can occur on peek[(2|4|8)(u|s)]() calls, if they are
;  2315     --  passed a bad location or an impossible (-ve) length.
;  2316  "invalid poke memory address\n",                               -- e100ipma
;  2317     -- A MEMORY VIOLATION (#C0000005) exception occured when
;  2318     --  trying to write to the supplied memory address.
;  2319     -- Can occur in poke[(1|2|4|8)]() calls, if they are 
;  2320     --  passsed a bad location or an invalid length.
;  2321  "attempt to allocate string of negative length\n",             -- e101atasonl
;  2322     -- internal error in the back end. The only way application
;  2323     -- code could attempt something similar is repeat(' ',-n),
;  2324     -- which is caught as e52rcmbnni before getting this far,
;  2325     -- and, e37atambpi handles -ve values passed to allocate().
;  2326     -- NB: a line no of -1 is expected should this occur; there
;  2327     --     is no known way to deliberately cause this error.
;  2328     -- (this message was added to catch bugs in gets().)
;  2329  "attempt to raise 0 to power <= 0\n",                          -- e102cr0tple0
;  2330  "attempt to get remainder of a number divided by 0\n",         -- e103atgrondb0
;  2331  "call back error?\n",                                          -- e104cbe [DEV no longer used]
;  2332  "not enough format strings to print data\n",                   -- e105nefstpd (pprntf.e only)
;  2333     -- May be removed for compatibility reasons, see pprntf.e.
;  2334  "index %d out of bounds, reading sequence length %d\n",        -- e106ioob
;  2335     -- (edi,edx)
;  2336  "invalid free memory address\n",                               -- e107ifma
;  2337  "position error [%d]\n",                                       -- e108pe(edi)
;  2338     -- Maybe the co-ordinates specified are outside the boundaries
;  2339     -- of the (Windows) screen buffer. See also e83atpmbi, which
;  2340     -- occurs for attempts to position at negative coordinates.
;  2341     -- Note this error is used by get_position() and postion().
;  2342  "clear_screen error\n",                                        -- e109cse
;  2343     -- Internal error, should not happen (and in fact this
;  2344     --  message has never been successfully triggered)
;  2345  "type check failure, %s is %s\n",                              -- e110tce(ecx)
;  2346     -- as e01tcf but ecx is var addr not idx
;  2347  "bitwise operations are limited to 32-bit numbers\n",          -- e111bolt32b
;  2348     -- DEV: it may be sensible to permit and_bits(x,#FFFFFFFF),
;  2349     -- or in fact any and_bits op where either param is 32-bit:
;  2350     -- In the case of and_bits, this message only occurs if both
;  2351     -- arguments are larger than 32 bits.
;  2352  "second argument of find() must be a sequence\n",              -- e112saofmbs
;  2353  "second argument of match() must be a sequence\n",             -- e113saommbs
;  2354  "sequence to be poked must only contain atoms\n",              -- e114stbpmoca
;  2355  "argument to sleep() must be atom\n",                          -- e115atsmba
;  2356  "routine requires %d parameters, not %d\n",                    -- e116rrnp
;  2357     -- either the define_c_func/proc statement is wrong, or
;  2358     --  the c_func/proc statement is wrong.
;  2359  "routine does not return a value\n",                           -- e117rdnrav
;  2360     -- typically this means the program is using c_func
;  2361     --  to invoke a routine defined using define_c_proc
;  2362  "routine returns a value\n",                                   -- e118rrav
;  2363     -- typically this means the program is using c_proc
;  2364     --  to invoke a routine defined using define_c_func
;  2365  "assertion failure%s\n",                                       -- e119af(edi)
;  2366     -- an assertion has failed, doh
;  2367  "for loop error, %s is %s\n",                                  -- e120fle
;  2368     -- Phix does not permit floating point for loops, since
;  2369     -- they do not work (eg on RDS Eu, try for x=1.1 to 1.3 
;  2370     -- by 0.1 do ?x end for; you only get 1.1 and 1.2 output).
;  2371     -- Replace eg 'for x=1.0 to 2.0 by 0.1 do ... end for'
;  2372     -- with 'atom x=1.0 for j=10 to 20 do ... x+=0.1 end for'
;  2373     -- Can also be triggered by using large integers.
;  2374     -- The "illegal expression type" compile-time error also 
;  2375     -- helps to catch most such problems in legacy code.
;  2376     -- NB: ep1 is init value (not var no)
;  2377  "for loop error, limit is %s, step is %s\n",                   -- e121flelimstep
;  2378     -- As above, Phix does not permit floating point for loops.
;  2379     -- This extends to final values, for example if you get
;  2380     --  for loop error, limit is 900,000,000, step is 800,000,000
;  2381     -- then it is because 1,700,000,000 is > 1,073,741,823.
;  2382     -- NB: ep1 is limit value, ep2 is step value (no var nos)
;  2383  "invalid poke size\n",                                         -- e122ips
;  2384  "delete_routine already set\n",                                -- e123dras
;  2385  "not permitted in safe mode\n",                                -- e124npism
;  2386  -1}
    lea eax,[ebp-156] (msgs)              ;#004643B3: 215205 64FFFFFF            uv 01 20  1  24      
    mov edx,125                           ;#004643B9: 272 7D000000               vu 04 00  1  24      
    push #00464F88                        ;#004643BE: 150 884F4600               uv 00 00  1  25      
    push eax                              ;#004643C3: 120                        vu 00 01  1  25      
    push -1                               ;#004643C4: 152 FF                     uv 00 00  1  26      
    mov eax,[#00402840]                   ;#004643C6: 241 40284000               vu 01 00  1  26      
    cmp eax,h4                            ;#004643CB: 075 00000040               uv 00 01  1  27      
    jl #004643DC                          ;#004643D0: 174 0A                     v  00 00  1  27      
    add dword[ebx+eax*4-8],1              ;#004643D2: 203104203 F8 01            u  00 09  3  28      
    cmp eax,1467                          ;#004643D7: 075 BB050000               vu 00 01  1  30      
    push eax                              ;#004643DC: 120                        uv 00 01  1  31      
    mov edi,[#0040283C]                   ;#004643DD: 213075 3C284000            vu 80 00  1  31      
    cmp edi,h4                            ;#004643E3: 201377 00000040            uv 00 80  1  32      
    jl #004643F5                          ;#004643E9: 174 0A                     v  00 00  1  32      
    add dword[ebx+edi*4-8],1              ;#004643EB: 203104273 F8 01            u  00 88  3  33      
    cmp eax,1466                          ;#004643F0: 075 BA050000               vu 00 01  1  35      
    push edi                              ;#004643F5: 127                        uv 00 80  1  36      
    mov esi,[#00402838]                   ;#004643F6: 213065 38284000            vu 40 00  1  36      
    cmp esi,h4                            ;#004643FC: 201376 00000040            uv 00 40  1  37      
    jl #0046440E                          ;#00464402: 174 0A                     v  00 00  1  37      
    add dword[ebx+esi*4-8],1              ;#00464404: 203104263 F8 01            u  00 48  3  38      
    cmp eax,1465                          ;#00464409: 075 B9050000               vu 00 01  1  40      
    push esi                              ;#0046440E: 126                        uv 00 40  1  41      
    mov ecx,[#00402834]                   ;#0046440F: 213015 34284000            vu 02 00  1  41      
    cmp ecx,h4                            ;#00464415: 201371 00000040            uv 00 02  1  42      
    jl #00464427                          ;#0046441B: 174 0A                     v  00 00  1  42      
    add dword[ebx+ecx*4-8],1              ;#0046441D: 203104213 F8 01            u  00 0A  3  43      
    cmp eax,1464                          ;#00464422: 075 B8050000               vu 00 01  1  45      
    push ecx                              ;#00464427: 121                        uv 00 02  1  46      
    mov eax,[#00402830]                   ;#00464428: 241 30284000               vu 01 00  1  46      
    cmp eax,h4                            ;#0046442D: 075 00000040               uv 00 01  1  47      
    jl #0046443E                          ;#00464432: 174 0A                     v  00 00  1  47      
    add dword[ebx+eax*4-8],1              ;#00464434: 203104203 F8 01            u  00 09  3  48      
    cmp eax,1463                          ;#00464439: 075 B7050000               vu 00 01  1  50      
    push eax                              ;#0046443E: 120                        uv 00 01  1  51      
    mov edi,[#0040282C]                   ;#0046443F: 213075 2C284000            vu 80 00  1  51      
    cmp edi,h4                            ;#00464445: 201377 00000040            uv 00 80  1  52      
    jl #00464457                          ;#0046444B: 174 0A                     v  00 00  1  52      
    add dword[ebx+edi*4-8],1              ;#0046444D: 203104273 F8 01            u  00 88  3  53      
    cmp eax,1462                          ;#00464452: 075 B6050000               vu 00 01  1  55      
    push edi                              ;#00464457: 127                        uv 00 80  1  56      
    mov esi,[#00402828]                   ;#00464458: 213065 28284000            vu 40 00  1  56      
    cmp esi,h4                            ;#0046445E: 201376 00000040            uv 00 40  1  57      
    jl #00464470                          ;#00464464: 174 0A                     v  00 00  1  57      
    add dword[ebx+esi*4-8],1              ;#00464466: 203104263 F8 01            u  00 48  3  58      
    cmp eax,1461                          ;#0046446B: 075 B5050000               vu 00 01  1  60      
    push esi                              ;#00464470: 126                        uv 00 40  1  61      
    mov ecx,[#00402824]                   ;#00464471: 213015 24284000            vu 02 00  1  61      
    cmp ecx,h4                            ;#00464477: 201371 00000040            uv 00 02  1  62      
    jl #00464489                          ;#0046447D: 174 0A                     v  00 00  1  62      
    add dword[ebx+ecx*4-8],1              ;#0046447F: 203104213 F8 01            u  00 0A  3  63      
    cmp eax,1460                          ;#00464484: 075 B4050000               vu 00 01  1  65      
    push ecx                              ;#00464489: 121                        uv 00 02  1  66      
    mov eax,[#00402820]                   ;#0046448A: 241 20284000               vu 01 00  1  66      
    cmp eax,h4                            ;#0046448F: 075 00000040               uv 00 01  1  67      
    jl #004644A0                          ;#00464494: 174 0A                     v  00 00  1  67      
    add dword[ebx+eax*4-8],1              ;#00464496: 203104203 F8 01            u  00 09  3  68      
    cmp eax,1459                          ;#0046449B: 075 B3050000               vu 00 01  1  70      
    push eax                              ;#004644A0: 120                        uv 00 01  1  71      
    mov edi,[#0040281C]                   ;#004644A1: 213075 1C284000            vu 80 00  1  71      
    cmp edi,h4                            ;#004644A7: 201377 00000040            uv 00 80  1  72      
    jl #004644B9                          ;#004644AD: 174 0A                     v  00 00  1  72      
    add dword[ebx+edi*4-8],1              ;#004644AF: 203104273 F8 01            u  00 88  3  73      
    cmp eax,1458                          ;#004644B4: 075 B2050000               vu 00 01  1  75      
    push edi                              ;#004644B9: 127                        uv 00 80  1  76      
    mov esi,[#00402818]                   ;#004644BA: 213065 18284000            vu 40 00  1  76      
    cmp esi,h4                            ;#004644C0: 201376 00000040            uv 00 40  1  77      
    jl #004644D2                          ;#004644C6: 174 0A                     v  00 00  1  77      
    add dword[ebx+esi*4-8],1              ;#004644C8: 203104263 F8 01            u  00 48  3  78      
    cmp eax,1457                          ;#004644CD: 075 B1050000               vu 00 01  1  80      
    push esi                              ;#004644D2: 126                        uv 00 40  1  81      
    mov ecx,[#00402814]                   ;#004644D3: 213015 14284000            vu 02 00  1  81      
    cmp ecx,h4                            ;#004644D9: 201371 00000040            uv 00 02  1  82      
    jl #004644EB                          ;#004644DF: 174 0A                     v  00 00  1  82      
    add dword[ebx+ecx*4-8],1              ;#004644E1: 203104213 F8 01            u  00 0A  3  83      
    cmp eax,1456                          ;#004644E6: 075 B0050000               vu 00 01  1  85      
    push ecx                              ;#004644EB: 121                        uv 00 02  1  86      
    mov eax,[#00402810]                   ;#004644EC: 241 10284000               vu 01 00  1  86      
    cmp eax,h4                            ;#004644F1: 075 00000040               uv 00 01  1  87      
    jl #00464502                          ;#004644F6: 174 0A                     v  00 00  1  87      
    add dword[ebx+eax*4-8],1              ;#004644F8: 203104203 F8 01            u  00 09  3  88      
    cmp eax,1455                          ;#004644FD: 075 AF050000               vu 00 01  1  90      
    push eax                              ;#00464502: 120                        uv 00 01  1  91      
    mov edi,[#0040280C]                   ;#00464503: 213075 0C284000            vu 80 00  1  91      
    cmp edi,h4                            ;#00464509: 201377 00000040            uv 00 80  1  92      
    jl #0046451B                          ;#0046450F: 174 0A                     v  00 00  1  92      
    add dword[ebx+edi*4-8],1              ;#00464511: 203104273 F8 01            u  00 88  3  93      
    cmp eax,1454                          ;#00464516: 075 AE050000               vu 00 01  1  95      
    push edi                              ;#0046451B: 127                        uv 00 80  1  96      
    mov esi,[#00402668]                   ;#0046451C: 213065 68264000            vu 40 00  1  96      
    cmp esi,h4                            ;#00464522: 201376 00000040            uv 00 40  1  97      
    jl #00464534                          ;#00464528: 174 0A                     v  00 00  1  97      
    add dword[ebx+esi*4-8],1              ;#0046452A: 203104263 F8 01            u  00 48  3  98      
    cmp eax,1349                          ;#0046452F: 075 45050000               vu 00 01  1 100      
    push esi                              ;#00464534: 126                        uv 00 40  1 101      
    mov ecx,[#00402808]                   ;#00464535: 213015 08284000            vu 02 00  1 101      
    cmp ecx,h4                            ;#0046453B: 201371 00000040            uv 00 02  1 102      
    jl #0046454D                          ;#00464541: 174 0A                     v  00 00  1 102      
    add dword[ebx+ecx*4-8],1              ;#00464543: 203104213 F8 01            u  00 0A  3 103      
    cmp eax,1453                          ;#00464548: 075 AD050000               vu 00 01  1 105      
    push ecx                              ;#0046454D: 121                        uv 00 02  1 106      
    mov eax,[#00402804]                   ;#0046454E: 241 04284000               vu 01 00  1 106      
    cmp eax,h4                            ;#00464553: 075 00000040               uv 00 01  1 107      
    jl #00464564                          ;#00464558: 174 0A                     v  00 00  1 107      
    add dword[ebx+eax*4-8],1              ;#0046455A: 203104203 F8 01            u  00 09  3 108      
    cmp eax,1452                          ;#0046455F: 075 AC050000               vu 00 01  1 110      
    push eax                              ;#00464564: 120                        uv 00 01  1 111      
    mov edi,[#00402800]                   ;#00464565: 213075 00284000            vu 80 00  1 111      
    cmp edi,h4                            ;#0046456B: 201377 00000040            uv 00 80  1 112      
    jl #0046457D                          ;#00464571: 174 0A                     v  00 00  1 112      
    add dword[ebx+edi*4-8],1              ;#00464573: 203104273 F8 01            u  00 88  3 113      
    cmp eax,1451                          ;#00464578: 075 AB050000               vu 00 01  1 115      
    push edi                              ;#0046457D: 127                        uv 00 80  1 116      
    mov esi,[#004027FC]                   ;#0046457E: 213065 FC274000            vu 40 00  1 116      
    cmp esi,h4                            ;#00464584: 201376 00000040            uv 00 40  1 117      
    jl #00464596                          ;#0046458A: 174 0A                     v  00 00  1 117      
    add dword[ebx+esi*4-8],1              ;#0046458C: 203104263 F8 01            u  00 48  3 118      
    cmp eax,1450                          ;#00464591: 075 AA050000               vu 00 01  1 120      
    push esi                              ;#00464596: 126                        uv 00 40  1 121      
    mov ecx,[#004027F8]                   ;#00464597: 213015 F8274000            vu 02 00  1 121      
    cmp ecx,h4                            ;#0046459D: 201371 00000040            uv 00 02  1 122      
    jl #004645AF                          ;#004645A3: 174 0A                     v  00 00  1 122      
    add dword[ebx+ecx*4-8],1              ;#004645A5: 203104213 F8 01            u  00 0A  3 123      
    cmp eax,1449                          ;#004645AA: 075 A9050000               vu 00 01  1 125      
    push ecx                              ;#004645AF: 121                        uv 00 02  1 126      
    mov eax,[#004027F4]                   ;#004645B0: 241 F4274000               vu 01 00  1 126      
    cmp eax,h4                            ;#004645B5: 075 00000040               uv 00 01  1 127      
    jl #004645C6                          ;#004645BA: 174 0A                     v  00 00  1 127      
    add dword[ebx+eax*4-8],1              ;#004645BC: 203104203 F8 01            u  00 09  3 128      
    cmp eax,1448                          ;#004645C1: 075 A8050000               vu 00 01  1 130      
    push eax                              ;#004645C6: 120                        uv 00 01  1 131      
    mov edi,[#004027F0]                   ;#004645C7: 213075 F0274000            vu 80 00  1 131      
    cmp edi,h4                            ;#004645CD: 201377 00000040            uv 00 80  1 132      
    jl #004645DF                          ;#004645D3: 174 0A                     v  00 00  1 132      
    add dword[ebx+edi*4-8],1              ;#004645D5: 203104273 F8 01            u  00 88  3 133      
    cmp eax,1447                          ;#004645DA: 075 A7050000               vu 00 01  1 135      
    push edi                              ;#004645DF: 127                        uv 00 80  1 136      
    mov esi,[#004027EC]                   ;#004645E0: 213065 EC274000            vu 40 00  1 136      
    cmp esi,h4                            ;#004645E6: 201376 00000040            uv 00 40  1 137      
    jl #004645F8                          ;#004645EC: 174 0A                     v  00 00  1 137      
    add dword[ebx+esi*4-8],1              ;#004645EE: 203104263 F8 01            u  00 48  3 138      
    cmp eax,1446                          ;#004645F3: 075 A6050000               vu 00 01  1 140      
    push esi                              ;#004645F8: 126                        uv 00 40  1 141      
    mov ecx,[#004027E8]                   ;#004645F9: 213015 E8274000            vu 02 00  1 141      
    cmp ecx,h4                            ;#004645FF: 201371 00000040            uv 00 02  1 142      
    jl #00464611                          ;#00464605: 174 0A                     v  00 00  1 142      
    add dword[ebx+ecx*4-8],1              ;#00464607: 203104213 F8 01            u  00 0A  3 143      
    cmp eax,1445                          ;#0046460C: 075 A5050000               vu 00 01  1 145      
    push ecx                              ;#00464611: 121                        uv 00 02  1 146      
    mov eax,[#004027E4]                   ;#00464612: 241 E4274000               vu 01 00  1 146      
    cmp eax,h4                            ;#00464617: 075 00000040               uv 00 01  1 147      
    jl #00464628                          ;#0046461C: 174 0A                     v  00 00  1 147      
    add dword[ebx+eax*4-8],1              ;#0046461E: 203104203 F8 01            u  00 09  3 148      
    cmp eax,1444                          ;#00464623: 075 A4050000               vu 00 01  1 150      
    push eax                              ;#00464628: 120                        uv 00 01  1 151      
    mov edi,[#004027E0]                   ;#00464629: 213075 E0274000            vu 80 00  1 151      
    cmp edi,h4                            ;#0046462F: 201377 00000040            uv 00 80  1 152      
    jl #00464641                          ;#00464635: 174 0A                     v  00 00  1 152      
    add dword[ebx+edi*4-8],1              ;#00464637: 203104273 F8 01            u  00 88  3 153      
    cmp eax,1443                          ;#0046463C: 075 A3050000               vu 00 01  1 155      
    push edi                              ;#00464641: 127                        uv 00 80  1 156      
    mov esi,[#004027DC]                   ;#00464642: 213065 DC274000            vu 40 00  1 156      
    cmp esi,h4                            ;#00464648: 201376 00000040            uv 00 40  1 157      
    jl #0046465A                          ;#0046464E: 174 0A                     v  00 00  1 157      
    add dword[ebx+esi*4-8],1              ;#00464650: 203104263 F8 01            u  00 48  3 158      
    cmp eax,1442                          ;#00464655: 075 A2050000               vu 00 01  1 160      
    push esi                              ;#0046465A: 126                        uv 00 40  1 161      
    mov ecx,[#004027D8]                   ;#0046465B: 213015 D8274000            vu 02 00  1 161      
    cmp ecx,h4                            ;#00464661: 201371 00000040            uv 00 02  1 162      
    jl #00464673                          ;#00464667: 174 0A                     v  00 00  1 162      
    add dword[ebx+ecx*4-8],1              ;#00464669: 203104213 F8 01            u  00 0A  3 163      
    cmp eax,1441                          ;#0046466E: 075 A1050000               vu 00 01  1 165      
    push ecx                              ;#00464673: 121                        uv 00 02  1 166      
    mov eax,[#004027D4]                   ;#00464674: 241 D4274000               vu 01 00  1 166      
    cmp eax,h4                            ;#00464679: 075 00000040               uv 00 01  1 167      
    jl #0046468A                          ;#0046467E: 174 0A                     v  00 00  1 167      
    add dword[ebx+eax*4-8],1              ;#00464680: 203104203 F8 01            u  00 09  3 168      
    cmp eax,1440                          ;#00464685: 075 A0050000               vu 00 01  1 170      
    push eax                              ;#0046468A: 120                        uv 00 01  1 171      
    mov edi,[#004027D0]                   ;#0046468B: 213075 D0274000            vu 80 00  1 171      
    cmp edi,h4                            ;#00464691: 201377 00000040            uv 00 80  1 172      
    jl #004646A3                          ;#00464697: 174 0A                     v  00 00  1 172      
    add dword[ebx+edi*4-8],1              ;#00464699: 203104273 F8 01            u  00 88  3 173      
    cmp eax,1439                          ;#0046469E: 075 9F050000               vu 00 01  1 175      
    push edi                              ;#004646A3: 127                        uv 00 80  1 176      
    mov esi,[#004027CC]                   ;#004646A4: 213065 CC274000            vu 40 00  1 176      
    cmp esi,h4                            ;#004646AA: 201376 00000040            uv 00 40  1 177      
    jl #004646BC                          ;#004646B0: 174 0A                     v  00 00  1 177      
    add dword[ebx+esi*4-8],1              ;#004646B2: 203104263 F8 01            u  00 48  3 178      
    cmp eax,1438                          ;#004646B7: 075 9E050000               vu 00 01  1 180      
    push esi                              ;#004646BC: 126                        uv 00 40  1 181      
    cmp esi,h4                            ;#004646BD: 201376 00000040            vu 00 40  1 181      
    jl #004646CF                          ;#004646C3: 174 0A                     v  00 00  1 182      
    add dword[ebx+esi*4-8],1              ;#004646C5: 203104263 F8 01            u  00 48  3 183      
    cmp eax,1438                          ;#004646CA: 075 9E050000               vu 00 01  1 185      
    push esi                              ;#004646CF: 126                        uv 00 40  1 186      
    cmp esi,h4                            ;#004646D0: 201376 00000040            vu 00 40  1 186      
    jl #004646E2                          ;#004646D6: 174 0A                     v  00 00  1 187      
    add dword[ebx+esi*4-8],1              ;#004646D8: 203104263 F8 01            u  00 48  3 188      
    cmp eax,1438                          ;#004646DD: 075 9E050000               vu 00 01  1 190      
    push esi                              ;#004646E2: 126                        uv 00 40  1 191      
    cmp esi,h4                            ;#004646E3: 201376 00000040            vu 00 40  1 191      
    jl #004646F5                          ;#004646E9: 174 0A                     v  00 00  1 192      
    add dword[ebx+esi*4-8],1              ;#004646EB: 203104263 F8 01            u  00 48  3 193      
    cmp eax,1438                          ;#004646F0: 075 9E050000               vu 00 01  1 195      
    push esi                              ;#004646F5: 126                        uv 00 40  1 196      
    mov ecx,[#004027C8]                   ;#004646F6: 213015 C8274000            vu 02 00  1 196      
    cmp ecx,h4                            ;#004646FC: 201371 00000040            uv 00 02  1 197      
    jl #0046470E                          ;#00464702: 174 0A                     v  00 00  1 197      
    add dword[ebx+ecx*4-8],1              ;#00464704: 203104213 F8 01            u  00 0A  3 198      
    cmp eax,1437                          ;#00464709: 075 9D050000               vu 00 01  1 200      
    push ecx                              ;#0046470E: 121                        uv 00 02  1 201      
    mov eax,[#004027C4]                   ;#0046470F: 241 C4274000               vu 01 00  1 201      
    cmp eax,h4                            ;#00464714: 075 00000040               uv 00 01  1 202      
    jl #00464725                          ;#00464719: 174 0A                     v  00 00  1 202      
    add dword[ebx+eax*4-8],1              ;#0046471B: 203104203 F8 01            u  00 09  3 203      
    cmp eax,1436                          ;#00464720: 075 9C050000               vu 00 01  1 205      
    push eax                              ;#00464725: 120                        uv 00 01  1 206      
    mov edi,[#004027C0]                   ;#00464726: 213075 C0274000            vu 80 00  1 206      
    cmp edi,h4                            ;#0046472C: 201377 00000040            uv 00 80  1 207      
    jl #0046473E                          ;#00464732: 174 0A                     v  00 00  1 207      
    add dword[ebx+edi*4-8],1              ;#00464734: 203104273 F8 01            u  00 88  3 208      
    cmp eax,1435                          ;#00464739: 075 9B050000               vu 00 01  1 210      
    push edi                              ;#0046473E: 127                        uv 00 80  1 211      
    mov esi,[#004027BC]                   ;#0046473F: 213065 BC274000            vu 40 00  1 211      
    cmp esi,h4                            ;#00464745: 201376 00000040            uv 00 40  1 212      
    jl #00464757                          ;#0046474B: 174 0A                     v  00 00  1 212      
    add dword[ebx+esi*4-8],1              ;#0046474D: 203104263 F8 01            u  00 48  3 213      
    cmp eax,1434                          ;#00464752: 075 9A050000               vu 00 01  1 215      
    push esi                              ;#00464757: 126                        uv 00 40  1 216      
    mov ecx,[#004027B8]                   ;#00464758: 213015 B8274000            vu 02 00  1 216      
    cmp ecx,h4                            ;#0046475E: 201371 00000040            uv 00 02  1 217      
    jl #00464770                          ;#00464764: 174 0A                     v  00 00  1 217      
    add dword[ebx+ecx*4-8],1              ;#00464766: 203104213 F8 01            u  00 0A  3 218      
    cmp eax,1433                          ;#0046476B: 075 99050000               vu 00 01  1 220      
    push ecx                              ;#00464770: 121                        uv 00 02  1 221      
    mov eax,[#004027B4]                   ;#00464771: 241 B4274000               vu 01 00  1 221      
    cmp eax,h4                            ;#00464776: 075 00000040               uv 00 01  1 222      
    jl #00464787                          ;#0046477B: 174 0A                     v  00 00  1 222      
    add dword[ebx+eax*4-8],1              ;#0046477D: 203104203 F8 01            u  00 09  3 223      
    cmp eax,1432                          ;#00464782: 075 98050000               vu 00 01  1 225      
    push eax                              ;#00464787: 120                        uv 00 01  1 226      
    mov edi,[#004027B0]                   ;#00464788: 213075 B0274000            vu 80 00  1 226      
    cmp edi,h4                            ;#0046478E: 201377 00000040            uv 00 80  1 227      
    jl #004647A0                          ;#00464794: 174 0A                     v  00 00  1 227      
    add dword[ebx+edi*4-8],1              ;#00464796: 203104273 F8 01            u  00 88  3 228      
    cmp eax,1431                          ;#0046479B: 075 97050000               vu 00 01  1 230      
    push edi                              ;#004647A0: 127                        uv 00 80  1 231      
    mov esi,[#004027AC]                   ;#004647A1: 213065 AC274000            vu 40 00  1 231      
    cmp esi,h4                            ;#004647A7: 201376 00000040            uv 00 40  1 232      
    jl #004647B9                          ;#004647AD: 174 0A                     v  00 00  1 232      
    add dword[ebx+esi*4-8],1              ;#004647AF: 203104263 F8 01            u  00 48  3 233      
    cmp eax,1430                          ;#004647B4: 075 96050000               vu 00 01  1 235      
    push esi                              ;#004647B9: 126                        uv 00 40  1 236      
    mov ecx,[#004027A8]                   ;#004647BA: 213015 A8274000            vu 02 00  1 236      
    cmp ecx,h4                            ;#004647C0: 201371 00000040            uv 00 02  1 237      
    jl #004647D2                          ;#004647C6: 174 0A                     v  00 00  1 237      
    add dword[ebx+ecx*4-8],1              ;#004647C8: 203104213 F8 01            u  00 0A  3 238      
    cmp eax,1429                          ;#004647CD: 075 95050000               vu 00 01  1 240      
    push ecx                              ;#004647D2: 121                        uv 00 02  1 241      
    mov eax,[#004027A4]                   ;#004647D3: 241 A4274000               vu 01 00  1 241      
    cmp eax,h4                            ;#004647D8: 075 00000040               uv 00 01  1 242      
    jl #004647E9                          ;#004647DD: 174 0A                     v  00 00  1 242      
    add dword[ebx+eax*4-8],1              ;#004647DF: 203104203 F8 01            u  00 09  3 243      
    cmp eax,1428                          ;#004647E4: 075 94050000               vu 00 01  1 245      
    push eax                              ;#004647E9: 120                        uv 00 01  1 246      
    mov edi,[#004027A0]                   ;#004647EA: 213075 A0274000            vu 80 00  1 246      
    cmp edi,h4                            ;#004647F0: 201377 00000040            uv 00 80  1 247      
    jl #00464802                          ;#004647F6: 174 0A                     v  00 00  1 247      
    add dword[ebx+edi*4-8],1              ;#004647F8: 203104273 F8 01            u  00 88  3 248      
    cmp eax,1427                          ;#004647FD: 075 93050000               vu 00 01  1 250      
    push edi                              ;#00464802: 127                        uv 00 80  1 251      
    mov esi,[#0040279C]                   ;#00464803: 213065 9C274000            vu 40 00  1 251      
    cmp esi,h4                            ;#00464809: 201376 00000040            uv 00 40  1 252      
    jl #0046481B                          ;#0046480F: 174 0A                     v  00 00  1 252      
    add dword[ebx+esi*4-8],1              ;#00464811: 203104263 F8 01            u  00 48  3 253      
    cmp eax,1426                          ;#00464816: 075 92050000               vu 00 01  1 255      
    push esi                              ;#0046481B: 126                        uv 00 40  1 256      
    mov ecx,[#00402798]                   ;#0046481C: 213015 98274000            vu 02 00  1 256      
    cmp ecx,h4                            ;#00464822: 201371 00000040            uv 00 02  1 257      
    jl #00464834                          ;#00464828: 174 0A                     v  00 00  1 257      
    add dword[ebx+ecx*4-8],1              ;#0046482A: 203104213 F8 01            u  00 0A  3 258      
    cmp eax,1425                          ;#0046482F: 075 91050000               vu 00 01  1 260      
    push ecx                              ;#00464834: 121                        uv 00 02  1 261      
    mov eax,[#00402794]                   ;#00464835: 241 94274000               vu 01 00  1 261      
    cmp eax,h4                            ;#0046483A: 075 00000040               uv 00 01  1 262      
    jl #0046484B                          ;#0046483F: 174 0A                     v  00 00  1 262      
    add dword[ebx+eax*4-8],1              ;#00464841: 203104203 F8 01            u  00 09  3 263      
    cmp eax,1424                          ;#00464846: 075 90050000               vu 00 01  1 265      
    push eax                              ;#0046484B: 120                        uv 00 01  1 266      
    mov edi,[#00402790]                   ;#0046484C: 213075 90274000            vu 80 00  1 266      
    cmp edi,h4                            ;#00464852: 201377 00000040            uv 00 80  1 267      
    jl #00464864                          ;#00464858: 174 0A                     v  00 00  1 267      
    add dword[ebx+edi*4-8],1              ;#0046485A: 203104273 F8 01            u  00 88  3 268      
    cmp eax,1423                          ;#0046485F: 075 8F050000               vu 00 01  1 270      
    push edi                              ;#00464864: 127                        uv 00 80  1 271      
    mov esi,[#0040278C]                   ;#00464865: 213065 8C274000            vu 40 00  1 271      
    cmp esi,h4                            ;#0046486B: 201376 00000040            uv 00 40  1 272      
    jl #0046487D                          ;#00464871: 174 0A                     v  00 00  1 272      
    add dword[ebx+esi*4-8],1              ;#00464873: 203104263 F8 01            u  00 48  3 273      
    cmp eax,1422                          ;#00464878: 075 8E050000               vu 00 01  1 275      
    push esi                              ;#0046487D: 126                        uv 00 40  1 276      
    mov ecx,[#00402788]                   ;#0046487E: 213015 88274000            vu 02 00  1 276      
    cmp ecx,h4                            ;#00464884: 201371 00000040            uv 00 02  1 277      
    jl #00464896                          ;#0046488A: 174 0A                     v  00 00  1 277      
    add dword[ebx+ecx*4-8],1              ;#0046488C: 203104213 F8 01            u  00 0A  3 278      
    cmp eax,1421                          ;#00464891: 075 8D050000               vu 00 01  1 280      
    push ecx                              ;#00464896: 121                        uv 00 02  1 281      
    mov eax,[#00402784]                   ;#00464897: 241 84274000               vu 01 00  1 281      
    cmp eax,h4                            ;#0046489C: 075 00000040               uv 00 01  1 282      
    jl #004648AD                          ;#004648A1: 174 0A                     v  00 00  1 282      
    add dword[ebx+eax*4-8],1              ;#004648A3: 203104203 F8 01            u  00 09  3 283      
    cmp eax,1420                          ;#004648A8: 075 8C050000               vu 00 01  1 285      
    push eax                              ;#004648AD: 120                        uv 00 01  1 286      
    mov edi,[#00402780]                   ;#004648AE: 213075 80274000            vu 80 00  1 286      
    cmp edi,h4                            ;#004648B4: 201377 00000040            uv 00 80  1 287      
    jl #004648C6                          ;#004648BA: 174 0A                     v  00 00  1 287      
    add dword[ebx+edi*4-8],1              ;#004648BC: 203104273 F8 01            u  00 88  3 288      
    cmp eax,1419                          ;#004648C1: 075 8B050000               vu 00 01  1 290      
    push edi                              ;#004648C6: 127                        uv 00 80  1 291      
    mov esi,[#0040277C]                   ;#004648C7: 213065 7C274000            vu 40 00  1 291      
    cmp esi,h4                            ;#004648CD: 201376 00000040            uv 00 40  1 292      
    jl #004648DF                          ;#004648D3: 174 0A                     v  00 00  1 292      
    add dword[ebx+esi*4-8],1              ;#004648D5: 203104263 F8 01            u  00 48  3 293      
    cmp eax,1418                          ;#004648DA: 075 8A050000               vu 00 01  1 295      
    push esi                              ;#004648DF: 126                        uv 00 40  1 296      
    mov ecx,[#00402778]                   ;#004648E0: 213015 78274000            vu 02 00  1 296      
    cmp ecx,h4                            ;#004648E6: 201371 00000040            uv 00 02  1 297      
    jl #004648F8                          ;#004648EC: 174 0A                     v  00 00  1 297      
    add dword[ebx+ecx*4-8],1              ;#004648EE: 203104213 F8 01            u  00 0A  3 298      
    cmp eax,1417                          ;#004648F3: 075 89050000               vu 00 01  1 300      
    push ecx                              ;#004648F8: 121                        uv 00 02  1 301      
    mov eax,[#00402774]                   ;#004648F9: 241 74274000               vu 01 00  1 301      
    cmp eax,h4                            ;#004648FE: 075 00000040               uv 00 01  1 302      
    jl #0046490F                          ;#00464903: 174 0A                     v  00 00  1 302      
    add dword[ebx+eax*4-8],1              ;#00464905: 203104203 F8 01            u  00 09  3 303      
    cmp eax,1416                          ;#0046490A: 075 88050000               vu 00 01  1 305      
    push eax                              ;#0046490F: 120                        uv 00 01  1 306      
    mov edi,[#00402770]                   ;#00464910: 213075 70274000            vu 80 00  1 306      
    cmp edi,h4                            ;#00464916: 201377 00000040            uv 00 80  1 307      
    jl #00464928                          ;#0046491C: 174 0A                     v  00 00  1 307      
    add dword[ebx+edi*4-8],1              ;#0046491E: 203104273 F8 01            u  00 88  3 308      
    cmp eax,1415                          ;#00464923: 075 87050000               vu 00 01  1 310      
    push edi                              ;#00464928: 127                        uv 00 80  1 311      
    mov esi,[#0040276C]                   ;#00464929: 213065 6C274000            vu 40 00  1 311      
    cmp esi,h4                            ;#0046492F: 201376 00000040            uv 00 40  1 312      
    jl #00464941                          ;#00464935: 174 0A                     v  00 00  1 312      
    add dword[ebx+esi*4-8],1              ;#00464937: 203104263 F8 01            u  00 48  3 313      
    cmp eax,1414                          ;#0046493C: 075 86050000               vu 00 01  1 315      
    push esi                              ;#00464941: 126                        uv 00 40  1 316      
    mov ecx,[#00402768]                   ;#00464942: 213015 68274000            vu 02 00  1 316      
    cmp ecx,h4                            ;#00464948: 201371 00000040            uv 00 02  1 317      
    jl #0046495A                          ;#0046494E: 174 0A                     v  00 00  1 317      
    add dword[ebx+ecx*4-8],1              ;#00464950: 203104213 F8 01            u  00 0A  3 318      
    cmp eax,1413                          ;#00464955: 075 85050000               vu 00 01  1 320      
    push ecx                              ;#0046495A: 121                        uv 00 02  1 321      
    mov eax,[#00402764]                   ;#0046495B: 241 64274000               vu 01 00  1 321      
    cmp eax,h4                            ;#00464960: 075 00000040               uv 00 01  1 322      
    jl #00464971                          ;#00464965: 174 0A                     v  00 00  1 322      
    add dword[ebx+eax*4-8],1              ;#00464967: 203104203 F8 01            u  00 09  3 323      
    cmp eax,1412                          ;#0046496C: 075 84050000               vu 00 01  1 325      
    push eax                              ;#00464971: 120                        uv 00 01  1 326      
    mov edi,[#00402760]                   ;#00464972: 213075 60274000            vu 80 00  1 326      
    cmp edi,h4                            ;#00464978: 201377 00000040            uv 00 80  1 327      
    jl #0046498A                          ;#0046497E: 174 0A                     v  00 00  1 327      
    add dword[ebx+edi*4-8],1              ;#00464980: 203104273 F8 01            u  00 88  3 328      
    cmp eax,1411                          ;#00464985: 075 83050000               vu 00 01  1 330      
    push edi                              ;#0046498A: 127                        uv 00 80  1 331      
    mov esi,[#0040275C]                   ;#0046498B: 213065 5C274000            vu 40 00  1 331      
    cmp esi,h4                            ;#00464991: 201376 00000040            uv 00 40  1 332      
    jl #004649A3                          ;#00464997: 174 0A                     v  00 00  1 332      
    add dword[ebx+esi*4-8],1              ;#00464999: 203104263 F8 01            u  00 48  3 333      
    cmp eax,1410                          ;#0046499E: 075 82050000               vu 00 01  1 335      
    push esi                              ;#004649A3: 126                        uv 00 40  1 336      
    mov ecx,[#00402758]                   ;#004649A4: 213015 58274000            vu 02 00  1 336      
    cmp ecx,h4                            ;#004649AA: 201371 00000040            uv 00 02  1 337      
    jl #004649BC                          ;#004649B0: 174 0A                     v  00 00  1 337      
    add dword[ebx+ecx*4-8],1              ;#004649B2: 203104213 F8 01            u  00 0A  3 338      
    cmp eax,1409                          ;#004649B7: 075 81050000               vu 00 01  1 340      
    push ecx                              ;#004649BC: 121                        uv 00 02  1 341      
    mov eax,[#00402754]                   ;#004649BD: 241 54274000               vu 01 00  1 341      
    cmp eax,h4                            ;#004649C2: 075 00000040               uv 00 01  1 342      
    jl #004649D3                          ;#004649C7: 174 0A                     v  00 00  1 342      
    add dword[ebx+eax*4-8],1              ;#004649C9: 203104203 F8 01            u  00 09  3 343      
    cmp eax,1408                          ;#004649CE: 075 80050000               vu 00 01  1 345      
    push eax                              ;#004649D3: 120                        uv 00 01  1 346      
    mov edi,[#00402750]                   ;#004649D4: 213075 50274000            vu 80 00  1 346      
    cmp edi,h4                            ;#004649DA: 201377 00000040            uv 00 80  1 347      
    jl #004649EC                          ;#004649E0: 174 0A                     v  00 00  1 347      
    add dword[ebx+edi*4-8],1              ;#004649E2: 203104273 F8 01            u  00 88  3 348      
    cmp eax,1407                          ;#004649E7: 075 7F050000               vu 00 01  1 350      
    push edi                              ;#004649EC: 127                        uv 00 80  1 351      
    mov esi,[#0040274C]                   ;#004649ED: 213065 4C274000            vu 40 00  1 351      
    cmp esi,h4                            ;#004649F3: 201376 00000040            uv 00 40  1 352      
    jl #00464A05                          ;#004649F9: 174 0A                     v  00 00  1 352      
    add dword[ebx+esi*4-8],1              ;#004649FB: 203104263 F8 01            u  00 48  3 353      
    cmp eax,1406                          ;#00464A00: 075 7E050000               vu 00 01  1 355      
    push esi                              ;#00464A05: 126                        uv 00 40  1 356      
    mov ecx,[#00402748]                   ;#00464A06: 213015 48274000            vu 02 00  1 356      
    cmp ecx,h4                            ;#00464A0C: 201371 00000040            uv 00 02  1 357      
    jl #00464A1E                          ;#00464A12: 174 0A                     v  00 00  1 357      
    add dword[ebx+ecx*4-8],1              ;#00464A14: 203104213 F8 01            u  00 0A  3 358      
    cmp eax,1405                          ;#00464A19: 075 7D050000               vu 00 01  1 360      
    push ecx                              ;#00464A1E: 121                        uv 00 02  1 361      
    mov eax,[#00402744]                   ;#00464A1F: 241 44274000               vu 01 00  1 361      
    cmp eax,h4                            ;#00464A24: 075 00000040               uv 00 01  1 362      
    jl #00464A35                          ;#00464A29: 174 0A                     v  00 00  1 362      
    add dword[ebx+eax*4-8],1              ;#00464A2B: 203104203 F8 01            u  00 09  3 363      
    cmp eax,1404                          ;#00464A30: 075 7C050000               vu 00 01  1 365      
    push eax                              ;#00464A35: 120                        uv 00 01  1 366      
    mov edi,[#00402740]                   ;#00464A36: 213075 40274000            vu 80 00  1 366      
    cmp edi,h4                            ;#00464A3C: 201377 00000040            uv 00 80  1 367      
    jl #00464A4E                          ;#00464A42: 174 0A                     v  00 00  1 367      
    add dword[ebx+edi*4-8],1              ;#00464A44: 203104273 F8 01            u  00 88  3 368      
    cmp eax,1403                          ;#00464A49: 075 7B050000               vu 00 01  1 370      
    push edi                              ;#00464A4E: 127                        uv 00 80  1 371      
    mov esi,[#0040273C]                   ;#00464A4F: 213065 3C274000            vu 40 00  1 371      
    cmp esi,h4                            ;#00464A55: 201376 00000040            uv 00 40  1 372      
    jl #00464A67                          ;#00464A5B: 174 0A                     v  00 00  1 372      
    add dword[ebx+esi*4-8],1              ;#00464A5D: 203104263 F8 01            u  00 48  3 373      
    cmp eax,1402                          ;#00464A62: 075 7A050000               vu 00 01  1 375      
    push esi                              ;#00464A67: 126                        uv 00 40  1 376      
    mov ecx,[#00402738]                   ;#00464A68: 213015 38274000            vu 02 00  1 376      
    cmp ecx,h4                            ;#00464A6E: 201371 00000040            uv 00 02  1 377      
    jl #00464A80                          ;#00464A74: 174 0A                     v  00 00  1 377      
    add dword[ebx+ecx*4-8],1              ;#00464A76: 203104213 F8 01            u  00 0A  3 378      
    cmp eax,1401                          ;#00464A7B: 075 79050000               vu 00 01  1 380      
    push ecx                              ;#00464A80: 121                        uv 00 02  1 381      
    mov eax,[#00402734]                   ;#00464A81: 241 34274000               vu 01 00  1 381      
    cmp eax,h4                            ;#00464A86: 075 00000040               uv 00 01  1 382      
    jl #00464A97                          ;#00464A8B: 174 0A                     v  00 00  1 382      
    add dword[ebx+eax*4-8],1              ;#00464A8D: 203104203 F8 01            u  00 09  3 383      
    cmp eax,1400                          ;#00464A92: 075 78050000               vu 00 01  1 385      
    push eax                              ;#00464A97: 120                        uv 00 01  1 386      
    mov edi,[#00402730]                   ;#00464A98: 213075 30274000            vu 80 00  1 386      
    cmp edi,h4                            ;#00464A9E: 201377 00000040            uv 00 80  1 387      
    jl #00464AB0                          ;#00464AA4: 174 0A                     v  00 00  1 387      
    add dword[ebx+edi*4-8],1              ;#00464AA6: 203104273 F8 01            u  00 88  3 388      
    cmp eax,1399                          ;#00464AAB: 075 77050000               vu 00 01  1 390      
    push edi                              ;#00464AB0: 127                        uv 00 80  1 391      
    mov esi,[#0040272C]                   ;#00464AB1: 213065 2C274000            vu 40 00  1 391      
    cmp esi,h4                            ;#00464AB7: 201376 00000040            uv 00 40  1 392      
    jl #00464AC9                          ;#00464ABD: 174 0A                     v  00 00  1 392      
    add dword[ebx+esi*4-8],1              ;#00464ABF: 203104263 F8 01            u  00 48  3 393      
    cmp eax,1398                          ;#00464AC4: 075 76050000               vu 00 01  1 395      
    push esi                              ;#00464AC9: 126                        uv 00 40  1 396      
    mov ecx,[#00402728]                   ;#00464ACA: 213015 28274000            vu 02 00  1 396      
    cmp ecx,h4                            ;#00464AD0: 201371 00000040            uv 00 02  1 397      
    jl #00464AE2                          ;#00464AD6: 174 0A                     v  00 00  1 397      
    add dword[ebx+ecx*4-8],1              ;#00464AD8: 203104213 F8 01            u  00 0A  3 398      
    cmp eax,1397                          ;#00464ADD: 075 75050000               vu 00 01  1 400      
    push ecx                              ;#00464AE2: 121                        uv 00 02  1 401      
    mov eax,[#00402724]                   ;#00464AE3: 241 24274000               vu 01 00  1 401      
    cmp eax,h4                            ;#00464AE8: 075 00000040               uv 00 01  1 402      
    jl #00464AF9                          ;#00464AED: 174 0A                     v  00 00  1 402      
    add dword[ebx+eax*4-8],1              ;#00464AEF: 203104203 F8 01            u  00 09  3 403      
    cmp eax,1396                          ;#00464AF4: 075 74050000               vu 00 01  1 405      
    push eax                              ;#00464AF9: 120                        uv 00 01  1 406      
    mov edi,[#00402720]                   ;#00464AFA: 213075 20274000            vu 80 00  1 406      
    cmp edi,h4                            ;#00464B00: 201377 00000040            uv 00 80  1 407      
    jl #00464B12                          ;#00464B06: 174 0A                     v  00 00  1 407      
    add dword[ebx+edi*4-8],1              ;#00464B08: 203104273 F8 01            u  00 88  3 408      
    cmp eax,1395                          ;#00464B0D: 075 73050000               vu 00 01  1 410      
    push edi                              ;#00464B12: 127                        uv 00 80  1 411      
    mov esi,[#0040271C]                   ;#00464B13: 213065 1C274000            vu 40 00  1 411      
    cmp esi,h4                            ;#00464B19: 201376 00000040            uv 00 40  1 412      
    jl #00464B2B                          ;#00464B1F: 174 0A                     v  00 00  1 412      
    add dword[ebx+esi*4-8],1              ;#00464B21: 203104263 F8 01            u  00 48  3 413      
    cmp eax,1394                          ;#00464B26: 075 72050000               vu 00 01  1 415      
    push esi                              ;#00464B2B: 126                        uv 00 40  1 416      
    mov ecx,[#00402718]                   ;#00464B2C: 213015 18274000            vu 02 00  1 416      
    cmp ecx,h4                            ;#00464B32: 201371 00000040            uv 00 02  1 417      
    jl #00464B44                          ;#00464B38: 174 0A                     v  00 00  1 417      
    add dword[ebx+ecx*4-8],1              ;#00464B3A: 203104213 F8 01            u  00 0A  3 418      
    cmp eax,1393                          ;#00464B3F: 075 71050000               vu 00 01  1 420      
    push ecx                              ;#00464B44: 121                        uv 00 02  1 421      
    mov eax,[#00402714]                   ;#00464B45: 241 14274000               vu 01 00  1 421      
    cmp eax,h4                            ;#00464B4A: 075 00000040               uv 00 01  1 422      
    jl #00464B5B                          ;#00464B4F: 174 0A                     v  00 00  1 422      
    add dword[ebx+eax*4-8],1              ;#00464B51: 203104203 F8 01            u  00 09  3 423      
    cmp eax,1392                          ;#00464B56: 075 70050000               vu 00 01  1 425      
    push eax                              ;#00464B5B: 120                        uv 00 01  1 426      
    mov edi,[#00402710]                   ;#00464B5C: 213075 10274000            vu 80 00  1 426      
    cmp edi,h4                            ;#00464B62: 201377 00000040            uv 00 80  1 427      
    jl #00464B74                          ;#00464B68: 174 0A                     v  00 00  1 427      
    add dword[ebx+edi*4-8],1              ;#00464B6A: 203104273 F8 01            u  00 88  3 428      
    cmp eax,1391                          ;#00464B6F: 075 6F050000               vu 00 01  1 430      
    push edi                              ;#00464B74: 127                        uv 00 80  1 431      
    mov esi,[#0040270C]                   ;#00464B75: 213065 0C274000            vu 40 00  1 431      
    cmp esi,h4                            ;#00464B7B: 201376 00000040            uv 00 40  1 432      
    jl #00464B8D                          ;#00464B81: 174 0A                     v  00 00  1 432      
    add dword[ebx+esi*4-8],1              ;#00464B83: 203104263 F8 01            u  00 48  3 433      
    cmp eax,1390                          ;#00464B88: 075 6E050000               vu 00 01  1 435      
    push esi                              ;#00464B8D: 126                        uv 00 40  1 436      
    mov ecx,[#00402708]                   ;#00464B8E: 213015 08274000            vu 02 00  1 436      
    cmp ecx,h4                            ;#00464B94: 201371 00000040            uv 00 02  1 437      
    jl #00464BA6                          ;#00464B9A: 174 0A                     v  00 00  1 437      
    add dword[ebx+ecx*4-8],1              ;#00464B9C: 203104213 F8 01            u  00 0A  3 438      
    cmp eax,1389                          ;#00464BA1: 075 6D050000               vu 00 01  1 440      
    push ecx                              ;#00464BA6: 121                        uv 00 02  1 441      
    mov eax,[#00402704]                   ;#00464BA7: 241 04274000               vu 01 00  1 441      
    cmp eax,h4                            ;#00464BAC: 075 00000040               uv 00 01  1 442      
    jl #00464BBD                          ;#00464BB1: 174 0A                     v  00 00  1 442      
    add dword[ebx+eax*4-8],1              ;#00464BB3: 203104203 F8 01            u  00 09  3 443      
    cmp eax,1388                          ;#00464BB8: 075 6C050000               vu 00 01  1 445      
    push eax                              ;#00464BBD: 120                        uv 00 01  1 446      
    mov edi,[#00402700]                   ;#00464BBE: 213075 00274000            vu 80 00  1 446      
    cmp edi,h4                            ;#00464BC4: 201377 00000040            uv 00 80  1 447      
    jl #00464BD6                          ;#00464BCA: 174 0A                     v  00 00  1 447      
    add dword[ebx+edi*4-8],1              ;#00464BCC: 203104273 F8 01            u  00 88  3 448      
    cmp eax,1387                          ;#00464BD1: 075 6B050000               vu 00 01  1 450      
    push edi                              ;#00464BD6: 127                        uv 00 80  1 451      
    mov esi,[#004026FC]                   ;#00464BD7: 213065 FC264000            vu 40 00  1 451      
    cmp esi,h4                            ;#00464BDD: 201376 00000040            uv 00 40  1 452      
    jl #00464BEF                          ;#00464BE3: 174 0A                     v  00 00  1 452      
    add dword[ebx+esi*4-8],1              ;#00464BE5: 203104263 F8 01            u  00 48  3 453      
    cmp eax,1386                          ;#00464BEA: 075 6A050000               vu 00 01  1 455      
    push esi                              ;#00464BEF: 126                        uv 00 40  1 456      
    mov ecx,[#004026F8]                   ;#00464BF0: 213015 F8264000            vu 02 00  1 456      
    cmp ecx,h4                            ;#00464BF6: 201371 00000040            uv 00 02  1 457      
    jl #00464C08                          ;#00464BFC: 174 0A                     v  00 00  1 457      
    add dword[ebx+ecx*4-8],1              ;#00464BFE: 203104213 F8 01            u  00 0A  3 458      
    cmp eax,1385                          ;#00464C03: 075 69050000               vu 00 01  1 460      
    push ecx                              ;#00464C08: 121                        uv 00 02  1 461      
    mov eax,[#004026F4]                   ;#00464C09: 241 F4264000               vu 01 00  1 461      
    cmp eax,h4                            ;#00464C0E: 075 00000040               uv 00 01  1 462      
    jl #00464C1F                          ;#00464C13: 174 0A                     v  00 00  1 462      
    add dword[ebx+eax*4-8],1              ;#00464C15: 203104203 F8 01            u  00 09  3 463      
    cmp eax,1384                          ;#00464C1A: 075 68050000               vu 00 01  1 465      
    push eax                              ;#00464C1F: 120                        uv 00 01  1 466      
    mov edi,[#004026F0]                   ;#00464C20: 213075 F0264000            vu 80 00  1 466      
    cmp edi,h4                            ;#00464C26: 201377 00000040            uv 00 80  1 467      
    jl #00464C38                          ;#00464C2C: 174 0A                     v  00 00  1 467      
    add dword[ebx+edi*4-8],1              ;#00464C2E: 203104273 F8 01            u  00 88  3 468      
    cmp eax,1383                          ;#00464C33: 075 67050000               vu 00 01  1 470      
    push edi                              ;#00464C38: 127                        uv 00 80  1 471      
    mov esi,[#004026EC]                   ;#00464C39: 213065 EC264000            vu 40 00  1 471      
    cmp esi,h4                            ;#00464C3F: 201376 00000040            uv 00 40  1 472      
    jl #00464C51                          ;#00464C45: 174 0A                     v  00 00  1 472      
    add dword[ebx+esi*4-8],1              ;#00464C47: 203104263 F8 01            u  00 48  3 473      
    cmp eax,1382                          ;#00464C4C: 075 66050000               vu 00 01  1 475      
    push esi                              ;#00464C51: 126                        uv 00 40  1 476      
    mov ecx,[#004026E8]                   ;#00464C52: 213015 E8264000            vu 02 00  1 476      
    cmp ecx,h4                            ;#00464C58: 201371 00000040            uv 00 02  1 477      
    jl #00464C6A                          ;#00464C5E: 174 0A                     v  00 00  1 477      
    add dword[ebx+ecx*4-8],1              ;#00464C60: 203104213 F8 01            u  00 0A  3 478      
    cmp eax,1381                          ;#00464C65: 075 65050000               vu 00 01  1 480      
    push ecx                              ;#00464C6A: 121                        uv 00 02  1 481      
    mov eax,[#004026E4]                   ;#00464C6B: 241 E4264000               vu 01 00  1 481      
    cmp eax,h4                            ;#00464C70: 075 00000040               uv 00 01  1 482      
    jl #00464C81                          ;#00464C75: 174 0A                     v  00 00  1 482      
    add dword[ebx+eax*4-8],1              ;#00464C77: 203104203 F8 01            u  00 09  3 483      
    cmp eax,1380                          ;#00464C7C: 075 64050000               vu 00 01  1 485      
    push eax                              ;#00464C81: 120                        uv 00 01  1 486      
    mov edi,[#004026E0]                   ;#00464C82: 213075 E0264000            vu 80 00  1 486      
    cmp edi,h4                            ;#00464C88: 201377 00000040            uv 00 80  1 487      
    jl #00464C9A                          ;#00464C8E: 174 0A                     v  00 00  1 487      
    add dword[ebx+edi*4-8],1              ;#00464C90: 203104273 F8 01            u  00 88  3 488      
    cmp eax,1379                          ;#00464C95: 075 63050000               vu 00 01  1 490      
    push edi                              ;#00464C9A: 127                        uv 00 80  1 491      
    mov esi,[#004026DC]                   ;#00464C9B: 213065 DC264000            vu 40 00  1 491      
    cmp esi,h4                            ;#00464CA1: 201376 00000040            uv 00 40  1 492      
    jl #00464CB3                          ;#00464CA7: 174 0A                     v  00 00  1 492      
    add dword[ebx+esi*4-8],1              ;#00464CA9: 203104263 F8 01            u  00 48  3 493      
    cmp eax,1378                          ;#00464CAE: 075 62050000               vu 00 01  1 495      
    push esi                              ;#00464CB3: 126                        uv 00 40  1 496      
    mov ecx,[#004026D8]                   ;#00464CB4: 213015 D8264000            vu 02 00  1 496      
    cmp ecx,h4                            ;#00464CBA: 201371 00000040            uv 00 02  1 497      
    jl #00464CCC                          ;#00464CC0: 174 0A                     v  00 00  1 497      
    add dword[ebx+ecx*4-8],1              ;#00464CC2: 203104213 F8 01            u  00 0A  3 498      
    cmp eax,1377                          ;#00464CC7: 075 61050000               vu 00 01  1 500      
    push ecx                              ;#00464CCC: 121                        uv 00 02  1 501      
    push -1                               ;#00464CCD: 152 FF                     vu 00 00  1 501      
    mov eax,[#004026D4]                   ;#00464CCF: 241 D4264000               uv 01 00  1 502      
    cmp eax,h4                            ;#00464CD4: 075 00000040               uv 00 01  1 503 01   
    jl #00464CE5                          ;#00464CD9: 174 0A                     v  00 00  1 503      
    add dword[ebx+eax*4-8],1              ;#00464CDB: 203104203 F8 01            u  00 09  3 504      
    cmp eax,1376                          ;#00464CE0: 075 60050000               vu 00 01  1 506      
    push eax                              ;#00464CE5: 120                        uv 00 01  1 507      
    mov edi,[#004026D0]                   ;#00464CE6: 213075 D0264000            vu 80 00  1 507      
    cmp edi,h4                            ;#00464CEC: 201377 00000040            uv 00 80  1 508      
    jl #00464CFE                          ;#00464CF2: 174 0A                     v  00 00  1 508      
    add dword[ebx+edi*4-8],1              ;#00464CF4: 203104273 F8 01            u  00 88  3 509      
    cmp eax,1375                          ;#00464CF9: 075 5F050000               vu 00 01  1 511      
    push edi                              ;#00464CFE: 127                        uv 00 80  1 512      
    mov esi,[#004026CC]                   ;#00464CFF: 213065 CC264000            vu 40 00  1 512      
    cmp esi,h4                            ;#00464D05: 201376 00000040            uv 00 40  1 513      
    jl #00464D17                          ;#00464D0B: 174 0A                     v  00 00  1 513      
    add dword[ebx+esi*4-8],1              ;#00464D0D: 203104263 F8 01            u  00 48  3 514      
    cmp eax,1374                          ;#00464D12: 075 5E050000               vu 00 01  1 516      
    push esi                              ;#00464D17: 126                        uv 00 40  1 517      
    mov ecx,[#004026C8]                   ;#00464D18: 213015 C8264000            vu 02 00  1 517      
    cmp ecx,h4                            ;#00464D1E: 201371 00000040            uv 00 02  1 518      
    jl #00464D30                          ;#00464D24: 174 0A                     v  00 00  1 518      
    add dword[ebx+ecx*4-8],1              ;#00464D26: 203104213 F8 01            u  00 0A  3 519      
    cmp eax,1373                          ;#00464D2B: 075 5D050000               vu 00 01  1 521      
    push ecx                              ;#00464D30: 121                        uv 00 02  1 522      
    mov eax,[#004026C4]                   ;#00464D31: 241 C4264000               vu 01 00  1 522      
    cmp eax,h4                            ;#00464D36: 075 00000040               uv 00 01  1 523      
    jl #00464D47                          ;#00464D3B: 174 0A                     v  00 00  1 523      
    add dword[ebx+eax*4-8],1              ;#00464D3D: 203104203 F8 01            u  00 09  3 524      
    cmp eax,1372                          ;#00464D42: 075 5C050000               vu 00 01  1 526      
    push eax                              ;#00464D47: 120                        uv 00 01  1 527      
    mov edi,[#004026C0]                   ;#00464D48: 213075 C0264000            vu 80 00  1 527      
    cmp edi,h4                            ;#00464D4E: 201377 00000040            uv 00 80  1 528      
    jl #00464D60                          ;#00464D54: 174 0A                     v  00 00  1 528      
    add dword[ebx+edi*4-8],1              ;#00464D56: 203104273 F8 01            u  00 88  3 529      
    cmp eax,1371                          ;#00464D5B: 075 5B050000               vu 00 01  1 531      
    push edi                              ;#00464D60: 127                        uv 00 80  1 532      
    mov esi,[#004026BC]                   ;#00464D61: 213065 BC264000            vu 40 00  1 532      
    cmp esi,h4                            ;#00464D67: 201376 00000040            uv 00 40  1 533      
    jl #00464D79                          ;#00464D6D: 174 0A                     v  00 00  1 533      
    add dword[ebx+esi*4-8],1              ;#00464D6F: 203104263 F8 01            u  00 48  3 534      
    cmp eax,1370                          ;#00464D74: 075 5A050000               vu 00 01  1 536      
    push esi                              ;#00464D79: 126                        uv 00 40  1 537      
    mov ecx,[#004026B8]                   ;#00464D7A: 213015 B8264000            vu 02 00  1 537      
    cmp ecx,h4                            ;#00464D80: 201371 00000040            uv 00 02  1 538      
    jl #00464D92                          ;#00464D86: 174 0A                     v  00 00  1 538      
    add dword[ebx+ecx*4-8],1              ;#00464D88: 203104213 F8 01            u  00 0A  3 539      
    cmp eax,1369                          ;#00464D8D: 075 59050000               vu 00 01  1 541      
    push ecx                              ;#00464D92: 121                        uv 00 02  1 542      
    mov eax,[#004026B4]                   ;#00464D93: 241 B4264000               vu 01 00  1 542      
    cmp eax,h4                            ;#00464D98: 075 00000040               uv 00 01  1 543      
    jl #00464DA9                          ;#00464D9D: 174 0A                     v  00 00  1 543      
    add dword[ebx+eax*4-8],1              ;#00464D9F: 203104203 F8 01            u  00 09  3 544      
    cmp eax,1368                          ;#00464DA4: 075 58050000               vu 00 01  1 546      
    push eax                              ;#00464DA9: 120                        uv 00 01  1 547      
    mov edi,[#004026B0]                   ;#00464DAA: 213075 B0264000            vu 80 00  1 547      
    cmp edi,h4                            ;#00464DB0: 201377 00000040            uv 00 80  1 548      
    jl #00464DC2                          ;#00464DB6: 174 0A                     v  00 00  1 548      
    add dword[ebx+edi*4-8],1              ;#00464DB8: 203104273 F8 01            u  00 88  3 549      
    cmp eax,1367                          ;#00464DBD: 075 57050000               vu 00 01  1 551      
    push edi                              ;#00464DC2: 127                        uv 00 80  1 552      
    mov esi,[#004026AC]                   ;#00464DC3: 213065 AC264000            vu 40 00  1 552      
    cmp esi,h4                            ;#00464DC9: 201376 00000040            uv 00 40  1 553      
    jl #00464DDB                          ;#00464DCF: 174 0A                     v  00 00  1 553      
    add dword[ebx+esi*4-8],1              ;#00464DD1: 203104263 F8 01            u  00 48  3 554      
    cmp eax,1366                          ;#00464DD6: 075 56050000               vu 00 01  1 556      
    push esi                              ;#00464DDB: 126                        uv 00 40  1 557      
    mov ecx,[#004026A8]                   ;#00464DDC: 213015 A8264000            vu 02 00  1 557      
    cmp ecx,h4                            ;#00464DE2: 201371 00000040            uv 00 02  1 558      
    jl #00464DF4                          ;#00464DE8: 174 0A                     v  00 00  1 558      
    add dword[ebx+ecx*4-8],1              ;#00464DEA: 203104213 F8 01            u  00 0A  3 559      
    cmp eax,1365                          ;#00464DEF: 075 55050000               vu 00 01  1 561      
    push ecx                              ;#00464DF4: 121                        uv 00 02  1 562      
    mov eax,[#004026A4]                   ;#00464DF5: 241 A4264000               vu 01 00  1 562      
    cmp eax,h4                            ;#00464DFA: 075 00000040               uv 00 01  1 563      
    jl #00464E0B                          ;#00464DFF: 174 0A                     v  00 00  1 563      
    add dword[ebx+eax*4-8],1              ;#00464E01: 203104203 F8 01            u  00 09  3 564      
    cmp eax,1364                          ;#00464E06: 075 54050000               vu 00 01  1 566      
    push eax                              ;#00464E0B: 120                        uv 00 01  1 567      
    mov edi,[#004026A0]                   ;#00464E0C: 213075 A0264000            vu 80 00  1 567      
    cmp edi,h4                            ;#00464E12: 201377 00000040            uv 00 80  1 568      
    jl #00464E24                          ;#00464E18: 174 0A                     v  00 00  1 568      
    add dword[ebx+edi*4-8],1              ;#00464E1A: 203104273 F8 01            u  00 88  3 569      
    cmp eax,1363                          ;#00464E1F: 075 53050000               vu 00 01  1 571      
    push edi                              ;#00464E24: 127                        uv 00 80  1 572      
    mov esi,[#0040269C]                   ;#00464E25: 213065 9C264000            vu 40 00  1 572      
    cmp esi,h4                            ;#00464E2B: 201376 00000040            uv 00 40  1 573      
    jl #00464E3D                          ;#00464E31: 174 0A                     v  00 00  1 573      
    add dword[ebx+esi*4-8],1              ;#00464E33: 203104263 F8 01            u  00 48  3 574      
    cmp eax,1362                          ;#00464E38: 075 52050000               vu 00 01  1 576      
    push esi                              ;#00464E3D: 126                        uv 00 40  1 577      
    mov ecx,[#00402698]                   ;#00464E3E: 213015 98264000            vu 02 00  1 577      
    cmp ecx,h4                            ;#00464E44: 201371 00000040            uv 00 02  1 578      
    jl #00464E56                          ;#00464E4A: 174 0A                     v  00 00  1 578      
    add dword[ebx+ecx*4-8],1              ;#00464E4C: 203104213 F8 01            u  00 0A  3 579      
    cmp eax,1361                          ;#00464E51: 075 51050000               vu 00 01  1 581      
    push ecx                              ;#00464E56: 121                        uv 00 02  1 582      
    mov eax,[#00402694]                   ;#00464E57: 241 94264000               vu 01 00  1 582      
    cmp eax,h4                            ;#00464E5C: 075 00000040               uv 00 01  1 583      
    jl #00464E6D                          ;#00464E61: 174 0A                     v  00 00  1 583      
    add dword[ebx+eax*4-8],1              ;#00464E63: 203104203 F8 01            u  00 09  3 584      
    cmp eax,1360                          ;#00464E68: 075 50050000               vu 00 01  1 586      
    push eax                              ;#00464E6D: 120                        uv 00 01  1 587      
    mov edi,[#00402690]                   ;#00464E6E: 213075 90264000            vu 80 00  1 587      
    cmp edi,h4                            ;#00464E74: 201377 00000040            uv 00 80  1 588      
    jl #00464E86                          ;#00464E7A: 174 0A                     v  00 00  1 588      
    add dword[ebx+edi*4-8],1              ;#00464E7C: 203104273 F8 01            u  00 88  3 589      
    cmp eax,1359                          ;#00464E81: 075 4F050000               vu 00 01  1 591      
    push edi                              ;#00464E86: 127                        uv 00 80  1 592      
    mov esi,[#0040268C]                   ;#00464E87: 213065 8C264000            vu 40 00  1 592      
    cmp esi,h4                            ;#00464E8D: 201376 00000040            uv 00 40  1 593      
    jl #00464E9F                          ;#00464E93: 174 0A                     v  00 00  1 593      
    add dword[ebx+esi*4-8],1              ;#00464E95: 203104263 F8 01            u  00 48  3 594      
    cmp eax,1358                          ;#00464E9A: 075 4E050000               vu 00 01  1 596      
    push esi                              ;#00464E9F: 126                        uv 00 40  1 597      
    mov ecx,[#00402688]                   ;#00464EA0: 213015 88264000            vu 02 00  1 597      
    cmp ecx,h4                            ;#00464EA6: 201371 00000040            uv 00 02  1 598      
    jl #00464EB8                          ;#00464EAC: 174 0A                     v  00 00  1 598      
    add dword[ebx+ecx*4-8],1              ;#00464EAE: 203104213 F8 01            u  00 0A  3 599      
    cmp eax,1357                          ;#00464EB3: 075 4D050000               vu 00 01  1 601      
    push ecx                              ;#00464EB8: 121                        uv 00 02  1 602      
    mov eax,[#00402684]                   ;#00464EB9: 241 84264000               vu 01 00  1 602      
    cmp eax,h4                            ;#00464EBE: 075 00000040               uv 00 01  1 603      
    jl #00464ECF                          ;#00464EC3: 174 0A                     v  00 00  1 603      
    add dword[ebx+eax*4-8],1              ;#00464EC5: 203104203 F8 01            u  00 09  3 604      
    cmp eax,1356                          ;#00464ECA: 075 4C050000               vu 00 01  1 606      
    push eax                              ;#00464ECF: 120                        uv 00 01  1 607      
    mov edi,[#00402680]                   ;#00464ED0: 213075 80264000            vu 80 00  1 607      
    cmp edi,h4                            ;#00464ED6: 201377 00000040            uv 00 80  1 608      
    jl #00464EE8                          ;#00464EDC: 174 0A                     v  00 00  1 608      
    add dword[ebx+edi*4-8],1              ;#00464EDE: 203104273 F8 01            u  00 88  3 609      
    cmp eax,1355                          ;#00464EE3: 075 4B050000               vu 00 01  1 611      
    push edi                              ;#00464EE8: 127                        uv 00 80  1 612      
    mov esi,[#0040267C]                   ;#00464EE9: 213065 7C264000            vu 40 00  1 612      
    cmp esi,h4                            ;#00464EEF: 201376 00000040            uv 00 40  1 613      
    jl #00464F01                          ;#00464EF5: 174 0A                     v  00 00  1 613      
    add dword[ebx+esi*4-8],1              ;#00464EF7: 203104263 F8 01            u  00 48  3 614      
    cmp eax,1354                          ;#00464EFC: 075 4A050000               vu 00 01  1 616      
    push esi                              ;#00464F01: 126                        uv 00 40  1 617      
    mov ecx,[#00402678]                   ;#00464F02: 213015 78264000            vu 02 00  1 617      
    cmp ecx,h4                            ;#00464F08: 201371 00000040            uv 00 02  1 618      
    jl #00464F1A                          ;#00464F0E: 174 0A                     v  00 00  1 618      
    add dword[ebx+ecx*4-8],1              ;#00464F10: 203104213 F8 01            u  00 0A  3 619      
    cmp eax,1353                          ;#00464F15: 075 49050000               vu 00 01  1 621      
    push ecx                              ;#00464F1A: 121                        uv 00 02  1 622      
    mov eax,[#00402674]                   ;#00464F1B: 241 74264000               vu 01 00  1 622      
    cmp eax,h4                            ;#00464F20: 075 00000040               uv 00 01  1 623      
    jl #00464F31                          ;#00464F25: 174 0A                     v  00 00  1 623      
    add dword[ebx+eax*4-8],1              ;#00464F27: 203104203 F8 01            u  00 09  3 624      
    cmp eax,1352                          ;#00464F2C: 075 48050000               vu 00 01  1 626      
    push eax                              ;#00464F31: 120                        uv 00 01  1 627      
    mov edi,[#00402670]                   ;#00464F32: 213075 70264000            vu 80 00  1 627      
    cmp edi,h4                            ;#00464F38: 201377 00000040            uv 00 80  1 628      
    jl #00464F4A                          ;#00464F3E: 174 0A                     v  00 00  1 628      
    add dword[ebx+edi*4-8],1              ;#00464F40: 203104273 F8 01            u  00 88  3 629      
    cmp eax,1351                          ;#00464F45: 075 47050000               vu 00 01  1 631      
    push edi                              ;#00464F4A: 127                        uv 00 80  1 632      
    mov esi,[#0040266C]                   ;#00464F4B: 213065 6C264000            vu 40 00  1 632      
    cmp esi,h4                            ;#00464F51: 201376 00000040            uv 00 40  1 633      
    jl #00464F63                          ;#00464F57: 174 0A                     v  00 00  1 633      
    add dword[ebx+esi*4-8],1              ;#00464F59: 203104263 F8 01            u  00 48  3 634      
    cmp eax,1350                          ;#00464F5E: 075 46050000               vu 00 01  1 636      
    push esi                              ;#00464F63: 126                        uv 00 40  1 637      
    mov ecx,[#00402668]                   ;#00464F64: 213015 68264000            vu 02 00  1 637      
    cmp ecx,h4                            ;#00464F6A: 201371 00000040            uv 00 02  1 638      
    jl #00464F7C                          ;#00464F70: 174 0A                     v  00 00  1 638      
    add dword[ebx+ecx*4-8],1              ;#00464F72: 203104213 F8 01            u  00 0A  3 639      
    cmp eax,1349                          ;#00464F77: 075 45050000               vu 00 01  1 641      
    push ecx                              ;#00464F7C: 121                        uv 00 02  1 642      
    mov edi,[ebp-156] (msgs)              ;#00464F7D: 213275 64FFFFFF            vu 80 20  1 642      
    jmp #00460143 (:%pMkSq)               ;#00464F83: 351 BBB1FFFF               v  00 00  1 643      
;  2387 
;  2388                                                                 -- e14soa(edi:)
;  2389 sequence e14ops = {"add","sub","div","mul",                     -- 1,2,3,4
;  2390                    "remainder","floor","unary minus","not",     -- 5,6,7,8
;  2391                    "and_bits","or_bits","xor_bits","not_bits",  -- 9,10,11,12
;  2392                    "power","xor"}                               -- 13,14
    lea eax,[ebp-160] (e14ops)            ;#00464F88: 215205 60FFFFFF            uv 01 20  1 644      
    mov edx,14                            ;#00464F8E: 272 0E000000               vu 04 00  1 644      
    push #004650FA                        ;#00464F93: 150 FA504600               uv 00 00  1 645      
    push eax                              ;#00464F98: 120                        vu 00 01  1 645      
    mov eax,[#00402878]                   ;#00464F99: 241 78284000               uv 01 00  1 646      
    cmp eax,h4                            ;#00464F9E: 075 00000040               uv 00 01  1 647 01   
    jl #00464FAF                          ;#00464FA3: 174 0A                     v  00 00  1 647      
    add dword[ebx+eax*4-8],1              ;#00464FA5: 203104203 F8 01            u  00 09  3 648      
    cmp eax,1482                          ;#00464FAA: 075 CA050000               vu 00 01  1 650      
    push eax                              ;#00464FAF: 120                        uv 00 01  1 651      
    mov esi,[#00402874]                   ;#00464FB0: 213065 74284000            vu 40 00  1 651      
    cmp esi,h4                            ;#00464FB6: 201376 00000040            uv 00 40  1 652      
    jl #00464FC8                          ;#00464FBC: 174 0A                     v  00 00  1 652      
    add dword[ebx+esi*4-8],1              ;#00464FBE: 203104263 F8 01            u  00 48  3 653      
    cmp eax,1481                          ;#00464FC3: 075 C9050000               vu 00 01  1 655      
    push esi                              ;#00464FC8: 126                        uv 00 40  1 656      
    mov ecx,[#00402870]                   ;#00464FC9: 213015 70284000            vu 02 00  1 656      
    cmp ecx,h4                            ;#00464FCF: 201371 00000040            uv 00 02  1 657      
    jl #00464FE1                          ;#00464FD5: 174 0A                     v  00 00  1 657      
    add dword[ebx+ecx*4-8],1              ;#00464FD7: 203104213 F8 01            u  00 0A  3 658      
    cmp eax,1480                          ;#00464FDC: 075 C8050000               vu 00 01  1 660      
    push ecx                              ;#00464FE1: 121                        uv 00 02  1 661      
    mov edi,[#0040286C]                   ;#00464FE2: 213075 6C284000            vu 80 00  1 661      
    cmp edi,h4                            ;#00464FE8: 201377 00000040            uv 00 80  1 662      
    jl #00464FFA                          ;#00464FEE: 174 0A                     v  00 00  1 662      
    add dword[ebx+edi*4-8],1              ;#00464FF0: 203104273 F8 01            u  00 88  3 663      
    cmp eax,1479                          ;#00464FF5: 075 C7050000               vu 00 01  1 665      
    push edi                              ;#00464FFA: 127                        uv 00 80  1 666      
    mov eax,[#00402868]                   ;#00464FFB: 241 68284000               vu 01 00  1 666      
    cmp eax,h4                            ;#00465000: 075 00000040               uv 00 01  1 667      
    jl #00465011                          ;#00465005: 174 0A                     v  00 00  1 667      
    add dword[ebx+eax*4-8],1              ;#00465007: 203104203 F8 01            u  00 09  3 668      
    cmp eax,1478                          ;#0046500C: 075 C6050000               vu 00 01  1 670      
    push eax                              ;#00465011: 120                        uv 00 01  1 671      
    mov esi,[#00402864]                   ;#00465012: 213065 64284000            vu 40 00  1 671      
    cmp esi,h4                            ;#00465018: 201376 00000040            uv 00 40  1 672      
    jl #0046502A                          ;#0046501E: 174 0A                     v  00 00  1 672      
    add dword[ebx+esi*4-8],1              ;#00465020: 203104263 F8 01            u  00 48  3 673      
    cmp eax,1477                          ;#00465025: 075 C5050000               vu 00 01  1 675      
    push esi                              ;#0046502A: 126                        uv 00 40  1 676      
    mov ecx,[#00402860]                   ;#0046502B: 213015 60284000            vu 02 00  1 676      
    cmp ecx,h4                            ;#00465031: 201371 00000040            uv 00 02  1 677      
    jl #00465043                          ;#00465037: 174 0A                     v  00 00  1 677      
    add dword[ebx+ecx*4-8],1              ;#00465039: 203104213 F8 01            u  00 0A  3 678      
    cmp eax,1476                          ;#0046503E: 075 C4050000               vu 00 01  1 680      
    push ecx                              ;#00465043: 121                        uv 00 02  1 681      
    mov edi,[#0040285C]                   ;#00465044: 213075 5C284000            vu 80 00  1 681      
    cmp edi,h4                            ;#0046504A: 201377 00000040            uv 00 80  1 682      
    jl #0046505C                          ;#00465050: 174 0A                     v  00 00  1 682      
    add dword[ebx+edi*4-8],1              ;#00465052: 203104273 F8 01            u  00 88  3 683      
    cmp eax,1475                          ;#00465057: 075 C3050000               vu 00 01  1 685      
    push edi                              ;#0046505C: 127                        uv 00 80  1 686      
    mov eax,[#00402858]                   ;#0046505D: 241 58284000               vu 01 00  1 686      
    cmp eax,h4                            ;#00465062: 075 00000040               uv 00 01  1 687      
    jl #00465073                          ;#00465067: 174 0A                     v  00 00  1 687      
    add dword[ebx+eax*4-8],1              ;#00465069: 203104203 F8 01            u  00 09  3 688      
    cmp eax,1474                          ;#0046506E: 075 C2050000               vu 00 01  1 690      
    push eax                              ;#00465073: 120                        uv 00 01  1 691      
    mov esi,[#00402854]                   ;#00465074: 213065 54284000            vu 40 00  1 691      
    cmp esi,h4                            ;#0046507A: 201376 00000040            uv 00 40  1 692      
    jl #0046508C                          ;#00465080: 174 0A                     v  00 00  1 692      
    add dword[ebx+esi*4-8],1              ;#00465082: 203104263 F8 01            u  00 48  3 693      
    cmp eax,1473                          ;#00465087: 075 C1050000               vu 00 01  1 695      
    push esi                              ;#0046508C: 126                        uv 00 40  1 696      
    mov ecx,[#00402850]                   ;#0046508D: 213015 50284000            vu 02 00  1 696      
    cmp ecx,h4                            ;#00465093: 201371 00000040            uv 00 02  1 697      
    jl #004650A5                          ;#00465099: 174 0A                     v  00 00  1 697      
    add dword[ebx+ecx*4-8],1              ;#0046509B: 203104213 F8 01            u  00 0A  3 698      
    cmp eax,1472                          ;#004650A0: 075 C0050000               vu 00 01  1 700      
    push ecx                              ;#004650A5: 121                        uv 00 02  1 701      
    mov edi,[#0040284C]                   ;#004650A6: 213075 4C284000            vu 80 00  1 701      
    cmp edi,h4                            ;#004650AC: 201377 00000040            uv 00 80  1 702      
    jl #004650BE                          ;#004650B2: 174 0A                     v  00 00  1 702      
    add dword[ebx+edi*4-8],1              ;#004650B4: 203104273 F8 01            u  00 88  3 703      
    cmp eax,1471                          ;#004650B9: 075 BF050000               vu 00 01  1 705      
    push edi                              ;#004650BE: 127                        uv 00 80  1 706      
    mov eax,[#00402848]                   ;#004650BF: 241 48284000               vu 01 00  1 706      
    cmp eax,h4                            ;#004650C4: 075 00000040               uv 00 01  1 707      
    jl #004650D5                          ;#004650C9: 174 0A                     v  00 00  1 707      
    add dword[ebx+eax*4-8],1              ;#004650CB: 203104203 F8 01            u  00 09  3 708      
    cmp eax,1470                          ;#004650D0: 075 BE050000               vu 00 01  1 710      
    push eax                              ;#004650D5: 120                        uv 00 01  1 711      
    mov esi,[#00402844]                   ;#004650D6: 213065 44284000            vu 40 00  1 711      
    cmp esi,h4                            ;#004650DC: 201376 00000040            uv 00 40  1 712      
    jl #004650EE                          ;#004650E2: 174 0A                     v  00 00  1 712      
    add dword[ebx+esi*4-8],1              ;#004650E4: 203104263 F8 01            u  00 48  3 713      
    cmp eax,1469                          ;#004650E9: 075 BD050000               vu 00 01  1 715      
    push esi                              ;#004650EE: 126                        uv 00 40  1 716      
    mov edi,[ebp-160] (e14ops)            ;#004650EF: 213275 60FFFFFF            vu 80 20  1 716      
    jmp #00460143 (:%pMkSq)               ;#004650F5: 351 49B0FFFF               v  00 00  1 717      
;  2393 --              ,
;  2394 --       e28ops = {"rand","cos","sin","tan","arctan","log","sqrt"}
;  2395 
;  2396 --DEV use NTdesc from pglobals.e?: (no, we don't have that here!)
;  2397 sequence rtndescs = {"type","function", "procedure"}
    lea eax,[ebp-164] (rtndescs)          ;#004650FA: 215205 5CFFFFFF            uv 01 20  1 718      
    mov edx,3                             ;#00465100: 272 03000000               vu 04 00  1 718      
    push #0046515F                        ;#00465105: 150 5F514600               uv 00 00  1 719      
    push eax                              ;#0046510A: 120                        vu 00 01  1 719      
    mov ecx,[#00402884]                   ;#0046510B: 213015 84284000            uv 02 00  1 720      
    cmp ecx,h4                            ;#00465111: 201371 00000040            uv 00 02  1 721 02   
    jl #00465123                          ;#00465117: 174 0A                     v  00 00  1 721      
    add dword[ebx+ecx*4-8],1              ;#00465119: 203104213 F8 01            u  00 0A  3 722      
    cmp eax,1486                          ;#0046511E: 075 CE050000               vu 00 01  1 724      
    push ecx                              ;#00465123: 121                        uv 00 02  1 725      
    mov eax,[#00402880]                   ;#00465124: 241 80284000               vu 01 00  1 725      
    cmp eax,h4                            ;#00465129: 075 00000040               uv 00 01  1 726      
    jl #0046513A                          ;#0046512E: 174 0A                     v  00 00  1 726      
    add dword[ebx+eax*4-8],1              ;#00465130: 203104203 F8 01            u  00 09  3 727      
    cmp eax,1485                          ;#00465135: 075 CD050000               vu 00 01  1 729      
    push eax                              ;#0046513A: 120                        uv 00 01  1 730      
    mov esi,[#0040287C]                   ;#0046513B: 213065 7C284000            vu 40 00  1 730      
    cmp esi,h4                            ;#00465141: 201376 00000040            uv 00 40  1 731      
    jl #00465153                          ;#00465147: 174 0A                     v  00 00  1 731      
    add dword[ebx+esi*4-8],1              ;#00465149: 203104263 F8 01            u  00 48  3 732      
    cmp eax,1484                          ;#0046514E: 075 CC050000               vu 00 01  1 734      
    push esi                              ;#00465153: 126                        uv 00 40  1 735      
    mov edi,[ebp-164] (rtndescs)          ;#00465154: 213275 5CFFFFFF            vu 80 20  1 735      
    jmp #00460143 (:%pMkSq)               ;#0046515A: 351 E4AFFFFF               v  00 00  1 736      
;  2398 
;  2399 
;  2400 --/*
;  2401     This will definitely never work on RDS Eu!
;  2402 --*/
;  2403 --puts(1,"uh1?\n")
;  2404 --?msg_id
;  2405     diaglooping += 1
    mov ecx,[#0040264C] (diaglooping)     ;#0046515F: 213015 4C264000            uv 02 00  1 737      
    add ecx,1                             ;#00465165: 203301 01                  uv 02 02  1 738 02   
    mov edx,ecx                           ;#00465168: 213321                     uv 04 02  1 739 02   
    mov [#0040264C] (diaglooping),ecx     ;#0046516A: 211015 4C264000            vu 00 02  1 739      
    shl edx,1                             ;#00465170: 321342                     u  04 04  1 740      
    jno #0046517E                         ;#00465172: 161 0A                     v  00 00  1 740      
    mov edi,#0040264C                     ;#00465174: 277 4C264000               uv 80 00  1 741      
    call #00462764 (:%e01tcfAddiii)       ;#00465179: 350 E6D5FFFF               v  00 00  1 741      
;  2406 --maybe:
;  2407 --  enter_cs()
;  2408 --DEV
;  2409 --!/*
;  2410     if rbldrqd then
    mov eax,[#00402660] (rbldrqd)         ;#0046517E: 241 60264000               uv 01 00  1 742      
    test eax,eax                          ;#00465183: 205300                     uv 00 01  1 743 01   
    je #004651A3                          ;#00465185: 164 1C                     v  00 00  1 743      
;  2411 --      rebuild_callback()
;  2412         --
;  2413         -- invoke pemit2.e/rebuild_callback() if needed, but we can't use a
;  2414         -- normal hll call as this is linked into all .exe files, in which 
;  2415         -- case :!rbidscb resolves to 0 and this does nothing. Likewise we
;  2416         -- use a shadow copy of rbldrqd, and invoke :!rbidscb at most once,
;  2417         -- which (if non-0) tests the real rbldrqd before doing anything.
;  2418         --
;  2419         rbldrqd = 0
    mov [#00402660] (rbldrqd),ebx         ;#00465187: 211035 60264000            uv 00 08  1 744      
;  2420         #ilASM{ 
;  2421             [32]
;  2422 --DEV push/pop d/qword[ds+8] (not yet supported by pilasm.e)
;  2423                 mov eax,[ds+8]
                        mov eax,[#00402008]  ;#0046518D: 213005 08204000            vu 01 00  1 744      
;  2424                 push eax
                        push eax          ;#00465193: 120                        uv 00 01  1 745      
;  2425                 call :!rbidscb  -- (leaves return addr on stack)
                        call #00465199    ;#00465194: 350 00000000               v  00 00  1 745      
;  2426                 add esp,4       -- (discard "")
                        add esp,4         ;#00465199: 203304 04                  uv 10 10  1 746      
;  2427                 pop eax
                        pop eax           ;#0046519C: 130                        vu 01 00  1 746      
;  2428                 mov [ds+8],eax
                        mov [#00402008],eax  ;#0046519D: 211005 08204000            uv 00 01  1 747      
;  2429             [64]
;  2430                 mov rax,[ds+8]
;  2431                 push rax
;  2432                 call :!rbidscb  -- (leaves return addr on stack)
;  2433                 add rsp,8       -- (discard "")
;  2434                 pop rax
;  2435                 mov [ds+8],rax
;  2436             []
;  2437               }
;  2438     end if
;  2439 --!*/
;  2440 --/*
;  2441     if rbldrqd then
;  2442         #ilASM{ 
;  2443 --jmp :fin
;  2444 --    :!rbidscb
;  2445             [32]
;  2446 --              push dword[esp]                         -- (leave the ret addr on stack)
;  2447                 mov edx,routine_id(rebuild_callback)    -- mov edx,imm32 (sets K_ridt)
;  2448                 mov ecx,$_Ltot                          -- mov ecx,imm32 (=symtab[rebuild_callback][S_Ltot])
;  2449                 call :%opFrame
;  2450 X               mov dword[ebp+16],:rbidsret
;  2451                 mov dword[ebp+28],:rbidsret
;  2452                 jmp $_il                                -- jmp code:rebuild_callback
;  2453             [64]
;  2454 --              push qword[rsp]                         -- (leave the ret addr on stack)
;  2455 --pop al
;  2456                 mov rdx,routine_id(rebuild_callback)    -- mov edx,imm32 (sets K_ridt)
;  2457                 mov rcx,$_Ltot                          -- mov ecx,imm32 (=symtab[rebuild_callback][S_Ltot])
;  2458                 call :%opFrame
;  2459 X               mov qword[rbp+32],:rbidsret
;  2460                 mov qword[rbp+56],:rbidsret
;  2461                 jmp $_il                                -- jmp code:rebuild_callback
;  2462             []
;  2463           ::rbidsret    
;  2464 --          ret
;  2465 --    ::fin
;  2466           }
;  2467     end if
;  2468 --*/
;  2469 --?1
;  2470 --?9/0
;  2471 --?2
;  2472 
;  2473 --  if msg_id=#FFFFFFFF then    -- (-1 as an unsigned 32-bit value!)
;  2474 ----puts(1,"setting batchmode to 1...\n") --DEV temp!
;  2475 --      batchmode = 1
;  2476 --      return 0
;  2477 --  end if
;  2478 --DEV [may no longer be rqd] [set routines should be in here anyway]
;  2479 --  crash_msg = ""      -- /necessary/: ensure compiler knows this is string/integer
;  2480 --  crash_msg = "abc"       -- /necessary/: ensure compiler knows this is string/integer
;  2481                         --  (needed since it is only ever set by assembly code)
;  2482 --  crash_msg = 0   -- get callstack as at enumbset.
;  2483 --  crashfile = 0
;  2484     #ilASM{
;  2485         [32]
;  2486 --11/12/15:
;  2487             mov eax,:!opTchkRetAddr
                    mov eax,#00462D87     ;#004651A3: 270 872D4600               vu 01 00  1 747      
;  2488             lea edi,[TchkRetAddr]
                    lea edi,[ebp-40] (TchkRetAddr)  ;#004651A8: 215175 D8                  uv 80 20  1 748      
;  2489             push ebx
                    push ebx              ;#004651AB: 123                        vu 00 08  1 748      
;  2490             push eax
                    push eax              ;#004651AC: 120                        uv 00 01  1 749      
;  2491 --          push ebx
;  2492 --          mov dword[esp],:!opTchkRetAddr
;  2493             fild qword[esp]
                    fild qword[esp]       ;#004651AD: 337054044                  np 00 10  3 750      
;  2494             add esp,8
                    add esp,8             ;#004651B0: 203304 08                  uv 10 10  1 753      
;  2495             call :%pStoreFlt
                    call #0046388C (:%pStoreFlt)  ;#004651B3: 350 D4E6FFFF               v  00 00  1 753      
;  2496             mov eax,:!cb_ret
                    mov eax,#0045BC40     ;#004651B8: 270 40BC4500               uv 01 00  1 754      
;  2497             lea edi,[cb_ret_addr]
                    lea edi,[ebp-44] (cb_ret_addr)  ;#004651BD: 215175 D4                  vu 80 20  1 754      
;  2498             push ebx
                    push ebx              ;#004651C0: 123                        uv 00 08  1 755      
;  2499             push eax
                    push eax              ;#004651C1: 120                        vu 00 01  1 755      
;  2500             fild qword[esp]
                    fild qword[esp]       ;#004651C2: 337054044                  np 00 10  3 756      
;  2501             add esp,8
                    add esp,8             ;#004651C5: 203304 08                  uv 10 10  1 759      
;  2502             call :%pStoreFlt
                    call #0046388C (:%pStoreFlt)  ;#004651C8: 350 BFE6FFFF               v  00 00  1 759      
;  2503             mov eax,:!cf_ret
                    mov eax,#00462EF5     ;#004651CD: 270 F52E4600               uv 01 00  1 760      
;  2504             lea edi,[cf_ret_addr]
                    lea edi,[ebp-48] (cf_ret_addr)  ;#004651D2: 215175 D0                  vu 80 20  1 760      
;  2505             push ebx
                    push ebx              ;#004651D5: 123                        uv 00 08  1 761      
;  2506             push eax
                    push eax              ;#004651D6: 120                        vu 00 01  1 761      
;  2507             fild qword[esp]
                    fild qword[esp]       ;#004651D7: 337054044                  np 00 10  3 762      
;  2508             add esp,8
                    add esp,8             ;#004651DA: 203304 08                  uv 10 10  1 765      
;  2509             call :%pStoreFlt
                    call #0046388C (:%pStoreFlt)  ;#004651DD: 350 AAE6FFFF               v  00 00  1 765      
;  2510 --          mov eax,:!cc_ret
;  2511 --          lea edi,[cc_ret_addr]
;  2512 --          push ebx
;  2513 --          push eax
;  2514 --          fild qword[esp]
;  2515 --          add esp,8
;  2516 --          call :%pStoreFlt
;  2517             lea edi,[symtab]
                    mov edi,ebp           ;#004651E2: 213375                     uv 80 20  1 766      
;  2518         [64]
;  2519             mov rax,:!opTchkRetAddr
;  2520             lea rdi,[TchkRetAddr]
;  2521             push rax
;  2522 --          mov qword[rsp],:!opTchkRetAddr
;  2523             fild qword[rsp]
;  2524             add rsp,8
;  2525             call :%pStoreFlt
;  2526             mov rax,:!cb_ret
;  2527             lea rdi,[cb_ret_addr]
;  2528             push rax
;  2529             fild qword[rsp]
;  2530             add rsp,8
;  2531             call :%pStoreFlt
;  2532             mov rax,:!cf_ret
;  2533             lea rdi,[cf_ret_addr]
;  2534             push rax
;  2535             fild qword[rsp]
;  2536             add rsp,8
;  2537             call :%pStoreFlt
;  2538 --          mov rax,:!cc_ret
;  2539 --          lea rdi,[cc_ret_addr]
;  2540 --          push rax
;  2541 --          fild qword[rsp]
;  2542 --          add rsp,8
;  2543 --          call :%pStoreFlt
;  2544             lea rdi,[symtab]
;  2545         []
;  2546             call :%opGetST  -- [e/rdi]:=symtab (see pStack.e)
                    call #00462AEB (:%opGetST)  ;#004651E4: 350 02D9FFFF               v  00 00  1 766      
;  2547           }
;  2548     lines = 0
    mov [#00402560] (lines),ebx           ;#004651E9: 211035 60254000            uv 00 08  1 767      
;  2549 --puts(1,"d2\n")
;  2550     if symtab[T_EBP]=0 then             -- compiled
    mov esi,[ebp] (symtab)                ;#004651EF: 213165 00                  vu 40 20  1 767      
    cmp esi,h4                            ;#004651F2: 201376 00000040            uv 00 40  1 768      
    jne #00465204                         ;#004651F8: 165 0A                     v  00 00  1 768      
    mov esi,1309                          ;#004651FA: 276 1D050000               uv 40 00  1 769      
    call #00462744 (:%pUnassigned)        ;#004651FF: 350 40D5FFFF               v  00 00  1 769      
    mov edi,22                            ;#00465204: 277 16000000               uv 80 00  1 770      
    lea ecx,[ebp-168] (symtab[1487])      ;#00465209: 215215 58FFFFFF            vu 02 20  1 770      
    mov edx,1309                          ;#0046520F: 272 1D050000               uv 04 00  1 771      
    mov al,0                              ;#00465214: 260 00                     vu 01 00  1 771      
    call #00460FE5 (:%pSubse1)            ;#00465216: 350 CABDFFFF               v  00 00  1 772      
    mov edi,[ebp-168] (symtab[1487])      ;#0046521B: 213275 58FFFFFF            uv 80 20  1 773      
    cmp edi,0                             ;#00465221: 203377 00                  uv 00 80  1 774 80   
    jne #0046526C                         ;#00465224: 165 46                     v  00 00  1 774      
;  2551         ds4 = floor(symtab[T_ds4]/4)
    mov ecx,[ebp] (symtab)                ;#00465226: 213115 00                  uv 02 20  1 775      
    cmp ecx,h4                            ;#00465229: 201371 00000040            uv 00 02  1 776 02   
    jne #0046523B                         ;#0046522F: 165 0A                     v  00 00  1 776      
    mov esi,1309                          ;#00465231: 276 1D050000               uv 40 00  1 777      
    call #00462744 (:%pUnassigned)        ;#00465236: 350 09D5FFFF               v  00 00  1 777      
    mov edi,23                            ;#0046523B: 277 17000000               uv 80 00  1 778      
    lea ecx,[ebp-168] (symtab[1487])      ;#00465240: 215215 58FFFFFF            vu 02 20  1 778      
    mov esi,[ebp] (symtab)                ;#00465246: 213165 00                  uv 40 20  1 779      
    mov edx,1309                          ;#00465249: 272 1D050000               vu 04 00  1 779      
    mov al,0                              ;#0046524E: 260 00                     uv 01 00  1 780      
    call #00460FE5 (:%pSubse1)            ;#00465250: 350 90BDFFFF               v  00 00  1 780      
    mov edi,#00402620                     ;#00465255: 277 20264000               uv 80 00  1 781      
    mov ecx,[ebp-168] (symtab[1487])      ;#0046525A: 213215 58FFFFFF            vu 02 20  1 781      
    mov eax,[#0040205C] (JS)              ;#00465260: 241 5C204000               uv 01 00  1 782      
    call #0045F39A (:%opDivf)             ;#00465265: 350 30A1FFFF               v  00 00  1 782      
    jmp #0046529A                         ;#0046526A: 353 2E                     v  00 00  1 783      
;  2552     else                                -- interpreted
;  2553         ds4 = symtab[T_ds4]
    mov edi,[ebp] (symtab)                ;#0046526C: 213175 00                  uv 80 20  1 784      
    cmp edi,h4                            ;#0046526F: 201377 00000040            uv 00 80  1 785 80   
    jne #00465281                         ;#00465275: 165 0A                     v  00 00  1 785      
    mov esi,1309                          ;#00465277: 276 1D050000               uv 40 00  1 786      
    call #00462744 (:%pUnassigned)        ;#0046527C: 350 C3D4FFFF               v  00 00  1 786      
    mov edi,23                            ;#00465281: 277 17000000               uv 80 00  1 787      
    mov ecx,#00402620                     ;#00465286: 271 20264000               vu 02 00  1 787      
    mov esi,[ebp] (symtab)                ;#0046528B: 213165 00                  uv 40 20  1 788      
    mov edx,1309                          ;#0046528E: 272 1D050000               vu 04 00  1 788      
    mov al,0                              ;#00465293: 260 00                     uv 01 00  1 789      
    call #00460FE5 (:%pSubse1)            ;#00465295: 350 4BBDFFFF               v  00 00  1 789      
;  2554     end if
;  2555 
;  2556 -- 4/8/15:
;  2557     if and_bits(symtab[T_cmdlnflg],#04)!=0 then
    mov ecx,[ebp] (symtab)                ;#0046529A: 213115 00                  uv 02 20  1 790      
    cmp ecx,h4                            ;#0046529D: 201371 00000040            uv 00 02  1 791 02   
    jne #004652AF                         ;#004652A3: 165 0A                     v  00 00  1 791      
    mov esi,1309                          ;#004652A5: 276 1D050000               uv 40 00  1 792      
    call #00462744 (:%pUnassigned)        ;#004652AA: 350 95D4FFFF               v  00 00  1 792      
    mov edi,19                            ;#004652AF: 277 13000000               uv 80 00  1 793      
    lea ecx,[ebp-168] (symtab[1487])      ;#004652B4: 215215 58FFFFFF            vu 02 20  1 793      
    mov esi,[ebp] (symtab)                ;#004652BA: 213165 00                  uv 40 20  1 794      
    mov edx,1309                          ;#004652BD: 272 1D050000               vu 04 00  1 794      
    mov al,0                              ;#004652C2: 260 00                     uv 01 00  1 795      
    call #00460FE5 (:%pSubse1)            ;#004652C4: 350 1CBDFFFF               v  00 00  1 795      
    lea edi,[ebp-172] (symtab[1488])      ;#004652C9: 215275 54FFFFFF            uv 80 20  1 796      
    mov ecx,[ebp-168] (symtab[1487])      ;#004652CF: 213215 58FFFFFF            vu 02 20  1 796      
    mov eax,[#0040205C] (JS)              ;#004652D5: 241 5C204000               uv 01 00  1 797      
    call #0045F45E (:%opAndBits)          ;#004652DA: 350 7FA1FFFF               v  00 00  1 797      
    mov edi,[ebp-172] (symtab[1488])      ;#004652DF: 213275 54FFFFFF            uv 80 20  1 798      
    cmp edi,0                             ;#004652E5: 203377 00                  uv 00 80  1 799 80   
    je #004652F4                          ;#004652E8: 164 0A                     v  00 00  1 799      
;  2558         batchmode = 1
    mov [#00402568] (batchmode), dword 1  ;#004652EA: 307005 68254000 01000000   uv 00 00  1 800      
;  2559     end if
;  2560 
;  2561 --(DEV) this may help you get better ex.err when something crashes in this file (untested)
;  2562 --/*
;  2563     pst4 = symtab[T_EBP][3]     -- (we may want to loop until we hit a 0)
;  2564     #ilASM{
;  2565         [32]
;  2566             mov eax,[pst4]
;  2567             shl eax,2
;  2568             mov [ds+8],eax
;  2569         [64]
;  2570             pop al
;  2571 --          mov rax,[pst4]
;  2572         []
;  2573           }
;  2574 --*/
;  2575 
;  2576 --?1
;  2577 --?msg_id
;  2578 --?2
;  2579 --?msg_id
;  2580 --puts(1,"d2a-\n")
;  2581 --DEV (temp)
;  2582 --DEV these may want to be inside the loop... (is ebp_root overwritten?)
;  2583 --DEV untried:
;  2584 --  {N,rid,from_addr,ret_addr,prev_ebp,ebp_root} = peekNS({or_ebp*4+machine_word(),6},machine_word(),0)
;  2585 --  {vsb_prev,vsb_next,symtabptr,gvarptr,vsb_magic} = peekNS({ebp_root,5},machine_word(),0)
;  2586     if machine_bits()=32 then
;  2587 --EXCEPT
;  2588 --      {N,rid,from_addr,ret_addr,prev_ebp,ebp_root} = peek4u({or_ebp*4+4,6})
;  2589         {N,rid,from_addr,ehand,prev_ebp,ebp_root,ret_addr} = peek4u({or_ebp*4+4,7})
    mov esi,[#004025F8] (or_ebp)          ;#004652F4: 213065 F8254000            vu 40 00  1 800      
    cmp esi,h4                            ;#004652FA: 201376 00000040            uv 00 40  1 801      
    jne #0046530C                         ;#00465300: 165 0A                     v  00 00  1 801      
    mov esi,1238                          ;#00465302: 276 D6040000               uv 40 00  1 802      
    call #00462744 (:%pUnassigned)        ;#00465307: 350 38D4FFFF               v  00 00  1 802      
    lea edi,[ebp-176] (symtab[1489])      ;#0046530C: 215275 50FFFFFF            uv 80 20  1 803      
    mov ecx,esi                           ;#00465312: 211361                     vu 02 40  1 803      
    mov eax,[#0040205C] (JS)              ;#00465314: 241 5C204000               uv 01 00  1 804      
    call #0045F412 (:%opMul)              ;#00465319: 350 F4A0FFFF               v  00 00  1 804      
    lea edi,[ebp-180] (symtab[1490])      ;#0046531E: 215275 4CFFFFFF            uv 80 20  1 805      
    mov ecx,[ebp-176] (symtab[1489])      ;#00465324: 213215 50FFFFFF            vu 02 20  1 805      
    mov eax,[#0040205C] (JS)              ;#0046532A: 241 5C204000               uv 01 00  1 806      
    call #0045F261 (:%opAdd)              ;#0046532F: 350 2D9FFFFF               v  00 00  1 806      
    lea eax,[ebp-184] (symtab[1491])      ;#00465334: 215205 48FFFFFF            uv 01 20  1 807      
    mov edx,2                             ;#0046533A: 272 02000000               vu 04 00  1 807      
    push #0046535E                        ;#0046533F: 150 5E534600               uv 00 00  1 808      
    push eax                              ;#00465344: 120                        vu 00 01  1 808      
    push 7                                ;#00465345: 152 07                     uv 00 00  1 809      
    push dword[ebp-180] (symtab[1490])    ;#00465347: 377265 4CFFFFFF            np 00 20  2 810      
    mov [ebp-180] (symtab[1490]),ebx      ;#0046534D: 211235 4CFFFFFF            uv 00 28  1 812      
    mov edi,[ebp-184] (symtab[1491])      ;#00465353: 213275 48FFFFFF            vu 80 20  1 812      
    jmp #00460143 (:%pMkSq)               ;#00465359: 351 E5ADFFFF               v  00 00  1 813      
    lea edi,[ebp-168] (symtab[1487])      ;#0046535E: 215275 58FFFFFF            uv 80 20  1 814      
    mov esi,[ebp-184] (symtab[1491])      ;#00465364: 213265 48FFFFFF            vu 40 20  1 814      
    xor ecx,ecx                           ;#0046536A: 061311                     uv 02 02  1 815      
    mov edx,4                             ;#0046536C: 272 04000000               vu 04 00  1 815      
    call #0045E945 (:%opPeekNx)           ;#00465371: 350 CF95FFFF               v  00 00  1 816      
    mov edi,7                             ;#00465376: 277 07000000               uv 80 00  1 817      
    lea ecx,[ebp-96] (ret_addr)           ;#0046537B: 215115 A0                  vu 02 20  1 817      
    mov esi,[ebp-168] (symtab[1487])      ;#0046537E: 213265 58FFFFFF            uv 40 20  1 818      
    mov edx,1487                          ;#00465384: 272 CF050000               vu 04 00  1 818      
    mov al,0                              ;#00465389: 260 00                     uv 01 00  1 819      
    call #00460FE5 (:%pSubse1)            ;#0046538B: 350 55BCFFFF               v  00 00  1 819      
    mov edi,6                             ;#00465390: 277 06000000               uv 80 00  1 820      
    lea ecx,[ebp-104] (ebp_root)          ;#00465395: 215115 98                  vu 02 20  1 820      
    mov esi,[ebp-168] (symtab[1487])      ;#00465398: 213265 58FFFFFF            uv 40 20  1 821      
    mov edx,1487                          ;#0046539E: 272 CF050000               vu 04 00  1 821      
    mov al,0                              ;#004653A3: 260 00                     uv 01 00  1 822      
    call #00460FE5 (:%pSubse1)            ;#004653A5: 350 3BBCFFFF               v  00 00  1 822      
    mov edi,5                             ;#004653AA: 277 05000000               uv 80 00  1 823      
    lea ecx,[ebp-100] (prev_ebp)          ;#004653AF: 215115 9C                  vu 02 20  1 823      
    mov esi,[ebp-168] (symtab[1487])      ;#004653B2: 213265 58FFFFFF            uv 40 20  1 824      
    mov edx,1487                          ;#004653B8: 272 CF050000               vu 04 00  1 824      
    mov al,0                              ;#004653BD: 260 00                     uv 01 00  1 825      
    call #00460FE5 (:%pSubse1)            ;#004653BF: 350 21BCFFFF               v  00 00  1 825      
    mov edi,4                             ;#004653C4: 277 04000000               uv 80 00  1 826      
    lea ecx,[ebp-92] (ehand)              ;#004653C9: 215115 A4                  vu 02 20  1 826      
    mov esi,[ebp-168] (symtab[1487])      ;#004653CC: 213265 58FFFFFF            uv 40 20  1 827      
    mov edx,1487                          ;#004653D2: 272 CF050000               vu 04 00  1 827      
    mov al,0                              ;#004653D7: 260 00                     uv 01 00  1 828      
    call #00460FE5 (:%pSubse1)            ;#004653D9: 350 07BCFFFF               v  00 00  1 828      
    mov edi,3                             ;#004653DE: 277 03000000               uv 80 00  1 829      
    lea ecx,[ebp-88] (from_addr)          ;#004653E3: 215115 A8                  vu 02 20  1 829      
    mov esi,[ebp-168] (symtab[1487])      ;#004653E6: 213265 58FFFFFF            uv 40 20  1 830      
    mov edx,1487                          ;#004653EC: 272 CF050000               vu 04 00  1 830      
    mov al,0                              ;#004653F1: 260 00                     uv 01 00  1 831      
    call #00460FE5 (:%pSubse1)            ;#004653F3: 350 EDBBFFFF               v  00 00  1 831      
    mov edi,2                             ;#004653F8: 277 02000000               uv 80 00  1 832      
    lea ecx,[ebp-84] (rid)                ;#004653FD: 215115 AC                  vu 02 20  1 832      
    mov esi,[ebp-168] (symtab[1487])      ;#00465400: 213265 58FFFFFF            uv 40 20  1 833      
    mov edx,1487                          ;#00465406: 272 CF050000               vu 04 00  1 833      
    mov al,0                              ;#0046540B: 260 00                     uv 01 00  1 834      
    call #00460FE5 (:%pSubse1)            ;#0046540D: 350 D3BBFFFF               v  00 00  1 834      
    mov edi,1                             ;#00465412: 277 01000000               uv 80 00  1 835      
    lea ecx,[ebp-80] (N)                  ;#00465417: 215115 B0                  vu 02 20  1 835      
    mov esi,[ebp-168] (symtab[1487])      ;#0046541A: 213265 58FFFFFF            uv 40 20  1 836      
    mov edx,1487                          ;#00465420: 272 CF050000               vu 04 00  1 836      
    mov al,0                              ;#00465425: 260 00                     uv 01 00  1 837      
    call #00460FE5 (:%pSubse1)            ;#00465427: 350 B9BBFFFF               v  00 00  1 837      
    mov edx,[ebp-168] (symtab[1487])      ;#0046542C: 213225 58FFFFFF            uv 04 20  1 838      
    cmp edx,h4                            ;#00465432: 201372 00000040            uv 00 04  1 839 04   
    mov [ebp-168] (symtab[1487]),ebx      ;#00465438: 211235 58FFFFFF            vu 00 28  1 839      
    jle #0046544C                         ;#0046543E: 176 0C                     v  00 00  1 840      
    sub dword[ebx+edx*4-8],1              ;#00465440: 203154223 F8 01            u  00 0C  3 841      
    jne #0046544C                         ;#00465445: 165 05                     v  00 00  1 843      
    call #004639A8 (:%pDealloc)           ;#00465447: 350 5CE5FFFF               v  00 00  1 844      
;  2590         {vsb_prev,vsb_next,symtabptr,gvarptr,vsb_magic} = peek4u({ebp_root,5})
    lea eax,[ebp-184] (symtab[1491])      ;#0046544C: 215205 48FFFFFF            uv 01 20  1 845      
    mov edx,2                             ;#00465452: 272 02000000               vu 04 00  1 845      
    push #00465480                        ;#00465457: 150 80544600               uv 00 00  1 846      
    push eax                              ;#0046545C: 120                        vu 00 01  1 846      
    push 5                                ;#0046545D: 152 05                     uv 00 00  1 847      
    mov ecx,[ebp-104] (ebp_root)          ;#0046545F: 213115 98                  vu 02 20  1 847      
    cmp ecx,h4                            ;#00465462: 201371 00000040            uv 00 02  1 848      
    jl #00465474                          ;#00465468: 174 0A                     v  00 00  1 848      
    add dword[ebx+ecx*4-8],1              ;#0046546A: 203104213 F8 01            u  00 0A  3 849      
    cmp eax,1335                          ;#0046546F: 075 37050000               vu 00 01  1 851      
    push ecx                              ;#00465474: 121                        uv 00 02  1 852      
    mov edi,[ebp-184] (symtab[1491])      ;#00465475: 213275 48FFFFFF            vu 80 20  1 852      
    jmp #00460143 (:%pMkSq)               ;#0046547B: 351 C3ACFFFF               v  00 00  1 853      
    lea edi,[ebp-188] (symtab[1492])      ;#00465480: 215275 44FFFFFF            uv 80 20  1 854      
    mov esi,[ebp-184] (symtab[1491])      ;#00465486: 213265 48FFFFFF            vu 40 20  1 854      
    xor ecx,ecx                           ;#0046548C: 061311                     uv 02 02  1 855      
    mov edx,4                             ;#0046548E: 272 04000000               vu 04 00  1 855      
    call #0045E945 (:%opPeekNx)           ;#00465493: 350 AD94FFFF               v  00 00  1 856      
    mov edi,5                             ;#00465498: 277 05000000               uv 80 00  1 857      
    lea ecx,[ebp-116] (vsb_magic)         ;#0046549D: 215115 8C                  vu 02 20  1 857      
    mov esi,[ebp-188] (symtab[1492])      ;#004654A0: 213265 44FFFFFF            uv 40 20  1 858      
    mov edx,1492                          ;#004654A6: 272 D4050000               vu 04 00  1 858      
    mov al,0                              ;#004654AB: 260 00                     uv 01 00  1 859      
    call #00460FE5 (:%pSubse1)            ;#004654AD: 350 33BBFFFF               v  00 00  1 859      
    mov edi,4                             ;#004654B2: 277 04000000               uv 80 00  1 860      
    lea ecx,[ebp-152] (gvarptr)           ;#004654B7: 215215 68FFFFFF            vu 02 20  1 860      
    mov esi,[ebp-188] (symtab[1492])      ;#004654BD: 213265 44FFFFFF            uv 40 20  1 861      
    mov edx,1492                          ;#004654C3: 272 D4050000               vu 04 00  1 861      
    mov al,0                              ;#004654C8: 260 00                     uv 01 00  1 862      
    call #00460FE5 (:%pSubse1)            ;#004654CA: 350 16BBFFFF               v  00 00  1 862      
    mov edi,3                             ;#004654CF: 277 03000000               uv 80 00  1 863      
    lea ecx,[ebp-148] (symtabptr)         ;#004654D4: 215215 6CFFFFFF            vu 02 20  1 863      
    mov esi,[ebp-188] (symtab[1492])      ;#004654DA: 213265 44FFFFFF            uv 40 20  1 864      
    mov edx,1492                          ;#004654E0: 272 D4050000               vu 04 00  1 864      
    mov al,0                              ;#004654E5: 260 00                     uv 01 00  1 865      
    call #00460FE5 (:%pSubse1)            ;#004654E7: 350 F9BAFFFF               v  00 00  1 865      
    mov edi,2                             ;#004654EC: 277 02000000               uv 80 00  1 866      
    lea ecx,[ebp-112] (vsb_next)          ;#004654F1: 215115 90                  vu 02 20  1 866      
    mov esi,[ebp-188] (symtab[1492])      ;#004654F4: 213265 44FFFFFF            uv 40 20  1 867      
    mov edx,1492                          ;#004654FA: 272 D4050000               vu 04 00  1 867      
    mov al,0                              ;#004654FF: 260 00                     uv 01 00  1 868      
    call #00460FE5 (:%pSubse1)            ;#00465501: 350 DFBAFFFF               v  00 00  1 868      
    mov edi,1                             ;#00465506: 277 01000000               uv 80 00  1 869      
    lea ecx,[ebp-108] (vsb_prev)          ;#0046550B: 215115 94                  vu 02 20  1 869      
    mov esi,[ebp-188] (symtab[1492])      ;#0046550E: 213265 44FFFFFF            uv 40 20  1 870      
    mov edx,1492                          ;#00465514: 272 D4050000               vu 04 00  1 870      
    mov al,0                              ;#00465519: 260 00                     uv 01 00  1 871      
    call #00460FE5 (:%pSubse1)            ;#0046551B: 350 C5BAFFFF               v  00 00  1 871      
    mov edx,[ebp-188] (symtab[1492])      ;#00465520: 213225 44FFFFFF            uv 04 20  1 872      
    cmp edx,h4                            ;#00465526: 201372 00000040            uv 00 04  1 873 04   
    mov [ebp-188] (symtab[1492]),ebx      ;#0046552C: 211235 44FFFFFF            vu 00 28  1 873      
    jle #00465540                         ;#00465532: 176 0C                     v  00 00  1 874      
    sub dword[ebx+edx*4-8],1              ;#00465534: 203154223 F8 01            u  00 0C  3 875      
    jne #00465540                         ;#00465539: 165 05                     v  00 00  1 877      
    call #004639A8 (:%pDealloc)           ;#0046553B: 350 68E4FFFF               v  00 00  1 878      
;  2591     else -- machine_bits()=64
;  2592 --      {N,rid,from_addr,ret_addr,prev_ebp,ebp_root} = peek8u({or_ebp*4+8,6})
;  2593         {N,rid,from_addr,ehand,prev_ebp,ebp_root,ret_addr} = peek8u({or_ebp*4+8,7})
;  2594         {vsb_prev,vsb_next,symtabptr,gvarptr,vsb_magic} = peek8u({ebp_root,5})
;  2595     end if
;  2596 
;  2597 --  if not batchmode then --DEV
;  2598     if show_low_level_diagnostics then
;  2599         if diagdiag>0 or (vsb_magic-#40565342) or msg_id<1 or msg_id>length(msgs) then
;  2600             printf(1,"N=%d, rid=%d, from=#%s, ret=#%s, ehand=%s, prevebp=#%s, ebproot=#%s\n",
;  2601 --DEV (is fn not assigned yet??)
;  2602 --          put2(sprintf("N=%d, rid=%d, from=#%s, ret=#%s, ehand=%s, prevebp=#%s, ebproot=#%s\n",
;  2603                    {N,rid,addrS(from_addr),addrS(ret_addr),addrS(ehand),addrS(prev_ebp),addrS(ebp_root)})
;  2604             printf(1,"or_eax=#%08x, or_ecx=#%08x, or_edx=#%08x,\nor_esi=#%08x, or_edi=#%08x\n",
;  2605 --          put2(sprintf("or_eax=#%08x, or_ecx=#%08x, or_edx=#%08x,\nor_esi=#%08x, or_edi=#%08x\n",
;  2606                    {or_eax,or_ecx,or_edx,or_esi,or_edi})
;  2607 --          magicok = "\"@VSB\""
;  2608             magicok = `"@VSB"`
;  2609 --DEV wrong on machine_bits()=64... (possibly one for docs) [I think it may be OK now...]
;  2610 --          if vsb_magic!=#40565342 then
;  2611             if (vsb_magic-#40565342) then
;  2612                 magicok = "**BAD MAGIC**"
;  2613             end if
;  2614             printf(1,"vsb_prev=#%s, vsb_next=#%s, vsb_magic=%s (%s)\n",
;  2615 --          put2(sprintf("vsb_prev=#%s, vsb_next=#%s, vsb_magic=%s (%s)\n",
;  2616                    {addrS(vsb_prev),addrS(vsb_next),addrS(vsb_magic),magicok})
;  2617 --  end if
;  2618 --
;  2619 --  if not batchmode then
;  2620 --      if msg_id<1 or msg_id>length(msgs) then
;  2621 --          msg = "**BAD MESSAGE ID**"
;  2622 --      else
;  2623 --          msg = msgs[msg_id][1..-2] -- (strip trailing \n)
;  2624 --      end if
;  2625 --      printf(1,"\ndiag(%d[%s]) called...\n",{msg_id,msg})
;  2626 --      lines += 1
;  2627 --end if
;  2628         end if
;  2629     end if
;  2630 --puts(1,"d2a\n")
;  2631     abortcode = 1
    mov [ebp-124] (abortcode), dword 1    ;#00465540: 307105 84 01000000         uv 00 20  1 879      
;  2632 --  if string(crash_msg) then
;  2633 --      msg = crash_msg
;  2634 --  els
;  2635     if msg_id<1 or msg_id>length(msgs) then
    mov eax,[#00402658] (msg_id)          ;#00465547: 241 58264000               vu 01 00  1 879      
    cmp eax,1                             ;#0046554C: 203370 01                  uv 00 01  1 880      
    jl #00465556                          ;#0046554F: 174 05                     v  00 00  1 880      
    cmp eax,125                           ;#00465551: 203370 7D                  uv 00 01  1 881      
    jle #0046558D                         ;#00465554: 176 37                     v  00 00  1 881      
;  2636         msg = sprintf("diag(%d) [**BAD MESSAGE ID**] called\n",msg_id)
    mov ecx,2                             ;#00465556: 271 02000000               uv 02 00  1 882      
    mov edx,210                           ;#0046555B: 272 D2000000               vu 04 00  1 882      
    call #00462C02 (:%opFrame) (sprintf)  ;#00465560: 350 9DD6FFFF               v  00 00  1 883      
    mov ecx,[#00402888]                   ;#00465565: 213015 88284000            uv 02 00  1 884      
    mov [ebp] (fmt),ecx                   ;#0046556B: 211115 00                  uv 00 22  1 885 02   
    add dword[ebx+ecx*4-8],1              ;#0046556E: 203104213 F8 01            u  00 0A  3 887    *02*
    mov edi,[#00402658] (msg_id)          ;#00465573: 213075 58264000            vu 80 00  1 889      
    mov [ebp-4] (args),edi                ;#00465579: 211175 FC                  uv 00 A0  1 890      
    mov [ebp+28] (retaddr),#00465588      ;#0046557C: 307105 1C 88554600         vu 00 20  1 890      
    jmp #00454E9A (code:sprintf)          ;#00465583: 351 12F9FEFF               v  00 00  1 891      
    mov [ebp-52] (msg),eax                ;#00465588: 211105 CC                  uv 00 21  1 892      
;  2637 --      msg_id = 1 --DEV abortcode
;  2638 --      abortcode = 1
    jmp #004655AD                         ;#0046558B: 353 20                     v  00 00  1 892      
;  2639     else
;  2640         msg = msgs[msg_id]
    mov edi,eax                           ;#0046558D: 211307                     uv 80 01  1 893      
    lea ecx,[ebp-52] (msg)                ;#0046558F: 215115 CC                  vu 02 20  1 893      
    mov esi,[ebp-156] (msgs)              ;#00465592: 213265 64FFFFFF            uv 40 20  1 894      
    mov edx,1348                          ;#00465598: 272 44050000               vu 04 00  1 894      
    mov al,0                              ;#0046559D: 260 00                     uv 01 00  1 895      
    call #00460FE5 (:%pSubse1)            ;#0046559F: 350 41BAFFFF               v  00 00  1 895      
;  2641         abortcode = msg_id
    mov ecx,[#00402658] (msg_id)          ;#004655A4: 213015 58264000            uv 02 00  1 896      
    mov [ebp-124] (abortcode),ecx         ;#004655AA: 211115 84                  uv 00 22  1 897 02   
;  2642     end if
;  2643 
;  2644 --puts(1,"d2b\n")
;  2645     --
;  2646     -- NB. symtab may contain uninitialised fields (especially S_value). [DEV]
;  2647     --
;  2648     --    Attempts to modify symtab, which now has a reference count of 2,
;  2649     --    will attempt a clone operation and may therefore crash, as well
;  2650     --    as being about as likely to succeed as changing the brake pads,
;  2651     --    clutch, gearbox, tyres, steering wheel, and engine oil, all at 
;  2652     --    the same time, on a juggernaut careering out of control down 
;  2653     --    a steep mountain road.
;  2654     --
;  2655     --    Likewise attempts to (eg) print symtab may also crash.
;  2656     --
;  2657     --    Lastly, note that \constants\ are not necessarily initialised yet, 
;  2658     --    not just the obvious main=create(Window...) but also name="name",
;  2659     --    though literal integer constants (eg DEBUG=1) should be fine.
;  2660     --
;  2661 --puts(1,"d2c\n")
;  2662 --if atom(symtab) then return 0 end if  --DEV??!
;  2663 --  s8 = symtab[T_callstk]  -- {ep1,ep2,era,etd,ern,or_ebp*4,?vsb_used?,dcount}
;  2664     --
;  2665     -- NB. s8 is "volatile". Hopefully this is of no concern to you, but in 
;  2666     -- order to avoid allocating space on the heap (which may be full), or 
;  2667     -- messing with bytesallocated/freed counts, opGetST uses a rather dim
;  2668     -- ref-count-agnostic-hack when it updates symtab[T_callstk]. If opGetST 
;  2669     -- is invoked again (eg it is used in both routine_id and command_line) 
;  2670     -- then this s8, or more specifically any float elements extracted from 
;  2671     -- this s8, may also get modified (from afar). An atom z z=s8[5] is not
;  2672     -- necessarily safe from a following opGetST either. Of course if you 
;  2673     -- create eg a string version of s8, or z, then that won't change.
;  2674     --
;  2675     -- ep1 and ep2 are error code specific, for example e09slin is
;  2676     --  "slice length is negative [%d..%d]\n" and ep1/2 are those idx.
;  2677     -- era is a return addr, possibly adjusted to pick up a var address,
;  2678     --  which can be converted to a line number via routineno/linetab.
;  2679     -- etd is a raw pointer to the threadstack static ref bank.
;  2680     --  Note this is non-subscriptable and may contain unassigned items.
;  2681     -- ern is a routine no/index into symtab, eg 21 for main file code.
;  2682     -- or_ebp is a raw pointer to frame in the callstack (see function retD)
;  2683 --DEV currently not reported!
;  2684     -- dcount is the number of dropped callstack blocks. If the program
;  2685     --  runs out of memory all but the first and last two callstack 
;  2686     --  blocks are freed, which will hopefully release enough memory
;  2687     --  for this routine to complete successfully. This program should 
;  2688     --  also limit the entries printed to keep ex.err reasonably sized.
;  2689     --
;  2690 --puts(1,"d2d\n")
;  2691 --/*
;  2692 --  if not batchmode then
;  2693 --      puts(1,"{ep1,ep2,era,etd,ern,or_ebp*4,???,dcount}:\n")
;  2694 --      printf(1,"s8=#%08x,#%08x,#%08x,#%08x,%d,#%08x,%d,%d\n",s8) lines += 2
;  2695 --  end if
;  2696     --?8
;  2697     ep1 = s8[1]             -- error parameter 1
;  2698     ep2 = s8[2]             -- error parameter 2
;  2699     era = s8[3]             -- return addr (adjusted to be within code emitted for line)
;  2700     etd = s8[4]             -- threadstack ptr
;  2701     rid = s8[5]             -- active routine number
;  2702     or_ebp*4 = s8[6]            -- frame ptr (at point of failure)
;  2703 --vsb_used [DEV]
;  2704     dcount = s8[8]          -- dropped callstack blocks
;  2705 --?9
;  2706     if not batchmode then
;  2707         ppOpt({pp_Ascii,{' ',#7E},pp_Nest,1})
;  2708     end if
;  2709 --  ppOpt({pp_Pause,10})
;  2710 --ppOpt({pp_Pause,0})
;  2711 
;  2712 --puts(1,"d3\n")
;  2713 --?10
;  2714 --*/
;  2715     --
;  2716     -- First create a vmap to allow gvar idx/addr to be mapped to symtab
;  2717     --
;  2718     if vmax=0 then
    mov edi,[#00402624] (vmax)            ;#004655AD: 213075 24264000            vu 80 00  1 897      
    cmp edi,0                             ;#004655B3: 203377 00                  uv 00 80  1 898      
    jne #004657E6                         ;#004655B6: 017205 2A020000            v  00 00  1 898      
;  2719 --      vmap = {}
;  2720         vmap = repeat(0,0)
    mov ecx,12                            ;#004655BC: 271 0C000000               uv 02 00  1 899      
    mov edx,240                           ;#004655C1: 272 F0000000               vu 04 00  1 899      
    call #00462C02 (:%opFrame) (repeat)   ;#004655C6: 350 37D6FFFF               v  00 00  1 900      
    mov [ebp] (x),ebx                     ;#004655CB: 211135 00                  uv 00 28  1 901      
    mov [ebp-4] (n),ebx                   ;#004655CE: 211135 FC                  vu 00 28  1 901      
    mov [ebp+28] (retaddr),#004655DD      ;#004655D1: 307105 1C DD554600         uv 00 20  1 902      
    jmp #00451195 (code:repeat)           ;#004655D8: 351 B8BBFEFF               v  00 00  1 902      
    push eax                              ;#004655DD: 120                        uv 00 01  1 903      
    mov eax,[#00402628] (vmap)            ;#004655DE: 241 28264000               vu 01 00  1 903      
    cmp eax,h4                            ;#004655E3: 075 00000040               uv 00 01  1 904      
    jle #004655F8                         ;#004655E8: 176 0E                     v  00 00  1 904      
    sub dword[ebx+eax*4-8],1              ;#004655EA: 203154203 F8 01            u  00 09  3 905      
    jne #004655F8                         ;#004655EF: 165 07                     v  00 00  1 907      
    mov edx,eax                           ;#004655F1: 213320                     uv 04 01  1 908      
    call #004639A8 (:%pDealloc)           ;#004655F3: 350 B0E3FFFF               v  00 00  1 908      
    pop [#00402628] (vmap)                ;#004655F8: 217005 28264000            np 00 00  3 909      
;  2721         for i=length(symtab) to T_maintls by -1 do
    lea edi,[ebp-172] (symtab[1488])      ;#004655FE: 215275 54FFFFFF            uv 80 20  1 912      
    mov esi,[ebp] (symtab)                ;#00465604: 213165 00                  vu 40 20  1 912      
    mov edx,1309                          ;#00465607: 272 1D050000               uv 04 00  1 913      
    call #0045EFEC (:%opLen)              ;#0046560C: 350 DB99FFFF               v  00 00  1 913      
    mov [ebp-212] (i),ecx                 ;#00465611: 211215 2CFFFFFF            uv 00 22  1 914      
    cmp ecx,21                            ;#00465617: 201371 15000000            vu 00 02  1 914      
    jl #004657E6                          ;#0046561D: 017214 C3010000            v  00 00  1 915      
;  2722             si = symtab[i]
    mov edi,[ebp] (symtab)                ;#00465623: 213175 00                  uv 80 20  1 916      
    cmp edi,h4                            ;#00465626: 201377 00000040            uv 00 80  1 917 80   
    jne #00465638                         ;#0046562C: 165 0A                     v  00 00  1 917      
    mov esi,1309                          ;#0046562E: 276 1D050000               uv 40 00  1 918      
    call #00462744 (:%pUnassigned)        ;#00465633: 350 0CD1FFFF               v  00 00  1 918      
    mov edi,[ebp-212] (i)                 ;#00465638: 213275 2CFFFFFF            uv 80 20  1 919      
    lea ecx,[ebp-4] (si)                  ;#0046563E: 215115 FC                  vu 02 20  1 919      
    mov esi,[ebp] (symtab)                ;#00465641: 213165 00                  uv 40 20  1 920      
    mov edx,1309                          ;#00465644: 272 1D050000               vu 04 00  1 920      
    mov al,0                              ;#00465649: 260 00                     uv 01 00  1 921      
    call #00460FE5 (:%pSubse1)            ;#0046564B: 350 95B9FFFF               v  00 00  1 921      
;  2723             if sequence(si)
    mov eax,[ebp-4] (si)                  ;#00465650: 213105 FC                  uv 01 20  1 922      
    cmp eax,h4                            ;#00465653: 075 00000040               uv 00 01  1 923 01   
    jl #004657CA                          ;#00465658: 017214 6C010000            v  00 00  1 923      
    test byte[ebx+eax*4-1],#80            ;#0046565E: 366104203 FF 80            u  00 09  2 924      
    je #004657CA                          ;#00465663: 017204 61010000            v  00 00  1 925      
;  2724             and si[S_NTyp]<=S_GVar2 then
    mov edi,2                             ;#00465669: 277 02000000               uv 80 00  1 926      
    lea ecx,[ebp-216] (symtab[1500])      ;#0046566E: 215215 28FFFFFF            vu 02 20  1 926      
    mov esi,eax                           ;#00465674: 211306                     uv 40 01  1 927      
    mov edx,1310                          ;#00465676: 272 1E050000               vu 04 00  1 927      
    mov al,0                              ;#0046567B: 260 00                     uv 01 00  1 928      
    call #00460FE5 (:%pSubse1)            ;#0046567D: 350 63B9FFFF               v  00 00  1 928      
    mov edi,2                             ;#00465682: 277 02000000               uv 80 00  1 929      
    mov eax,[ebp-216] (symtab[1500])      ;#00465687: 213205 28FFFFFF            vu 01 20  1 929      
    mov esi,1183                          ;#0046568D: 276 9F040000               uv 40 00  1 930      
    mov edx,1500                          ;#00465692: 272 DC050000               vu 04 00  1 930      
    call #0045F8B0 (:%opJcc)              ;#00465697: 350 14A2FFFF               v  00 00  1 931      
    jg #004657CA                          ;#0046569C: 017217 28010000            v  00 00  1 932      
;  2725                 c = si[S_Slink]
    mov edi,6                             ;#004656A2: 277 06000000               uv 80 00  1 933      
    lea ecx,[ebp-36] (c)                  ;#004656A7: 215115 DC                  vu 02 20  1 933      
    mov esi,[ebp-4] (si)                  ;#004656AA: 213165 FC                  uv 40 20  1 934      
    mov edx,1310                          ;#004656AD: 272 1E050000               vu 04 00  1 934      
    call #0046106B (:%pSubse1i)           ;#004656B2: 350 B4B9FFFF               v  00 00  1 935      
;  2726                 if c>vmax then
    mov ecx,[#00402624] (vmax)            ;#004656B7: 213015 24264000            uv 02 00  1 936      
    cmp eax,ecx                           ;#004656BD: 071310                     uv 00 03  1 937 02   
    jle #004657B1                         ;#004656BF: 017216 EC000000            v  00 00  1 937      
;  2727 --                  vmap &= repeat(0,c-vmax)
;  2728                     if vmax=0 then
    cmp ecx,0                             ;#004656C5: 203371 00                  uv 00 02  1 938      
    jne #00465719                         ;#004656C8: 165 4F                     v  00 00  1 938      
;  2729                         vmap = repeat(0,c)
    mov ecx,12                            ;#004656CA: 271 0C000000               uv 02 00  1 939      
    mov edx,240                           ;#004656CF: 272 F0000000               vu 04 00  1 939      
    call #00462C02 (:%opFrame) (repeat)   ;#004656D4: 350 29D5FFFF               v  00 00  1 940      
    mov [ebp] (x),ebx                     ;#004656D9: 211135 00                  uv 00 28  1 941      
    mov edi,[ebp+20] (prevebp)            ;#004656DC: 213175 14                  vu 80 20  1 941      
    mov eax,[edi-36]                      ;#004656DF: 213107 DC                  uv 01 80  1 944    *80*
    mov [ebp-4] (n),eax                   ;#004656E2: 211105 FC                  uv 00 21  1 945 01   
    mov [ebp+28] (retaddr),#004656F1      ;#004656E5: 307105 1C F1564600         vu 00 20  1 945      
    jmp #00451195 (code:repeat)           ;#004656EC: 351 A4BAFEFF               v  00 00  1 946      
    push eax                              ;#004656F1: 120                        uv 00 01  1 947      
    mov edi,[#00402628] (vmap)            ;#004656F2: 213075 28264000            vu 80 00  1 947      
    cmp edi,h4                            ;#004656F8: 201377 00000040            uv 00 80  1 948      
    jle #0046570E                         ;#004656FE: 176 0E                     v  00 00  1 948      
    sub dword[ebx+edi*4-8],1              ;#00465700: 203154273 F8 01            u  00 88  3 949      
    jne #0046570E                         ;#00465705: 165 07                     v  00 00  1 951      
    mov edx,edi                           ;#00465707: 213327                     uv 04 80  1 952      
    call #004639A8 (:%pDealloc)           ;#00465709: 350 9AE2FFFF               v  00 00  1 952      
    pop [#00402628] (vmap)                ;#0046570E: 217005 28264000            np 00 00  3 953      
    jmp #004657A8                         ;#00465714: 351 8F000000               v  00 00  1 956      
;  2730                     else
;  2731                         vmap &= repeat(0,c-vmax)
    lea edi,[ebp-180] (symtab[1490])      ;#00465719: 215275 4CFFFFFF            uv 80 20  1 957      
    mov ecx,eax                           ;#0046571F: 211301                     vu 02 01  1 957      
    mov eax,[#00402624] (vmax)            ;#00465721: 241 24264000               uv 01 00  1 958      
    call #0045F299 (:%opSub)              ;#00465726: 350 6E9BFFFF               v  00 00  1 958      
    mov ecx,12                            ;#0046572B: 271 0C000000               uv 02 00  1 959      
    mov edx,240                           ;#00465730: 272 F0000000               vu 04 00  1 959      
    call #00462C02 (:%opFrame) (repeat)   ;#00465735: 350 C8D4FFFF               v  00 00  1 960      
    mov [ebp] (x),ebx                     ;#0046573A: 211135 00                  uv 00 28  1 961      
    mov edi,[ebp+20] (prevebp)            ;#0046573D: 213175 14                  vu 80 20  1 961      
    mov eax,[edi-180]                     ;#00465740: 213207 4CFFFFFF            uv 01 80  1 964    *80*
    mov [edi-180], dword h4               ;#00465746: 307207 4CFFFFFF 00000040   vu 00 80  1 964      
    cmp eax,h4                            ;#00465750: 075 00000040               uv 00 01  1 965      
    jne #00465761                         ;#00465755: 165 0A                     v  00 00  1 965      
    mov esi,1490                          ;#00465757: 276 D2050000               uv 40 00  1 966      
    call #00462744 (:%pUnassigned)        ;#0046575C: 350 E3CFFFFF               v  00 00  1 966      
    mov [ebp-4] (n),eax                   ;#00465761: 211105 FC                  uv 00 21  1 967      
    mov [ebp+28] (retaddr),#00465770      ;#00465764: 307105 1C 70574600         vu 00 20  1 967      
    jmp #00451195 (code:repeat)           ;#0046576B: 351 25BAFEFF               v  00 00  1 968      
    push eax                              ;#00465770: 120                        uv 00 01  1 969      
    mov esi,[ebp-220] (symtab[1501])      ;#00465771: 213265 24FFFFFF            vu 40 20  1 969      
    cmp esi,h4                            ;#00465777: 201376 00000040            uv 00 40  1 970      
    jle #0046578D                         ;#0046577D: 176 0E                     v  00 00  1 970      
    sub dword[ebx+esi*4-8],1              ;#0046577F: 203154263 F8 01            u  00 48  3 971      
    jne #0046578D                         ;#00465784: 165 07                     v  00 00  1 973      
    mov edx,esi                           ;#00465786: 213326                     uv 04 40  1 974      
    call #004639A8 (:%pDealloc)           ;#00465788: 350 1BE2FFFF               v  00 00  1 974      
    pop dword[ebp-220] (symtab[1501])     ;#0046578D: 217205 24FFFFFF            np 00 20  3 975      
    mov edx,#00402628                     ;#00465793: 272 28264000               uv 04 00  1 978      
    mov edi,#00402628                     ;#00465798: 277 28264000               vu 80 00  1 978      
    lea ecx,[ebp-220] (symtab[1501])      ;#0046579D: 215215 24FFFFFF            uv 02 20  1 979      
    call #0045FD65 (:%opConcat)           ;#004657A3: 350 BDA5FFFF               v  00 00  1 979      
;  2732                     end if
;  2733                     vmax = c
    mov ecx,[ebp-36] (c)                  ;#004657A8: 213115 DC                  uv 02 20  1 980      
    mov [#00402624] (vmax),ecx            ;#004657AB: 211015 24264000            uv 00 02  1 981 02   
;  2734                 end if
;  2735                 vmap[c] = i
    mov edi,[ebp-36] (c)                  ;#004657B1: 213175 DC                  vu 80 20  1 981      
    mov ecx,[ebp-212] (i)                 ;#004657B4: 213215 2CFFFFFF            uv 02 20  1 982      
    mov esi,[#00402628] (vmap)            ;#004657BA: 213065 28264000            vu 40 00  1 982      
    mov eax,#00402628                     ;#004657C0: 270 28264000               uv 01 00  1 983      
    call #004607F3 (:%pRepe1)             ;#004657C5: 350 29B0FFFF               v  00 00  1 983      
;  2736             end if
;  2737         end for
    mov eax,[ebp-212] (i)                 ;#004657CA: 213205 2CFFFFFF            uv 01 20  1 984      
    mov edx,21                            ;#004657D0: 272 15000000               vu 04 00  1 984      
    add eax,-1                            ;#004657D5: 203300 FF                  uv 01 01  1 985      
    cmp eax,edx                           ;#004657D8: 073302                     uv 00 05  1 986 01   
    mov [ebp-212] (i),eax                 ;#004657DA: 211205 2CFFFFFF            vu 00 21  1 986      
    jge #00465623                         ;#004657E0: 017215 3DFEFFFF            v  00 00  1 987      
;  2738     end if
;  2739     --
;  2740     -- initialise pathset [DEV do we want this/call current_dir&'\\' just the once?] [seems ok like this...]
;  2741     --
;  2742     pathset = symtab[T_pathset]
    mov edi,[ebp] (symtab)                ;#004657E6: 213175 00                  uv 80 20  1 988      
    cmp edi,h4                            ;#004657E9: 201377 00000040            uv 00 80  1 989 80   
    jne #004657FB                         ;#004657EF: 165 0A                     v  00 00  1 989      
    mov esi,1309                          ;#004657F1: 276 1D050000               uv 40 00  1 990      
    call #00462744 (:%pUnassigned)        ;#004657F6: 350 49CFFFFF               v  00 00  1 990      
    mov edi,16                            ;#004657FB: 277 10000000               uv 80 00  1 991      
    lea ecx,[ebp-68] (pathset)            ;#00465800: 215115 BC                  vu 02 20  1 991      
    mov esi,[ebp] (symtab)                ;#00465803: 213165 00                  uv 40 20  1 992      
    mov edx,1309                          ;#00465806: 272 1D050000               vu 04 00  1 992      
    mov al,0                              ;#0046580B: 260 00                     uv 01 00  1 993      
    call #00460FE5 (:%pSubse1)            ;#0046580D: 350 D3B7FFFF               v  00 00  1 993      
;  2743 --  for j=1 to length(pathset) do
;  2744 --      if length(pathset[j])<2 or pathset[j][2]!=':' then
;  2745 --          pathset[j] = current_dir()&`\`&pathset[j]
;  2746 --      end if
;  2747 --  end for
;  2748     if msg_id=106 then      -- e106ioob(edi,edx)
    mov ecx,[#00402658] (msg_id)          ;#00465812: 213015 58264000            uv 02 00  1 994      
    cmp ecx,106                           ;#00465818: 203371 6A                  uv 00 02  1 995 02   
    jne #004659FA                         ;#0046581B: 017205 D9010000            v  00 00  1 995      
;  2749         if find(or_edi,{#40000000,#4000000000000000}) then
    lea eax,[ebp-184] (symtab[1491])      ;#00465821: 215205 48FFFFFF            uv 01 20  1 996      
    mov edx,2                             ;#00465827: 272 02000000               vu 04 00  1 996      
    push #0046586D                        ;#0046582C: 150 6D584600               uv 00 00  1 997      
    push eax                              ;#00465831: 120                        vu 00 01  1 997      
    mov eax,[#00402894] (a64h4)           ;#00465832: 241 94284000               uv 01 00  1 998      
    cmp eax,h4                            ;#00465837: 075 00000040               uv 00 01  1 999 01   
    jl #00465848                          ;#0046583C: 174 0A                     v  00 00  1 999      
    add dword[ebx+eax*4-8],1              ;#0046583E: 203104203 F8 01            u  00 09  3 1000      
    cmp eax,1504                          ;#00465843: 075 E0050000               vu 00 01  1 1002      
    push eax                              ;#00465848: 120                        uv 00 01  1 1003      
    mov edi,[#00402890] (a32h4)           ;#00465849: 213075 90284000            vu 80 00  1 1003      
    cmp edi,h4                            ;#0046584F: 201377 00000040            uv 00 80  1 1004      
    jl #00465861                          ;#00465855: 174 0A                     v  00 00  1 1004      
    add dword[ebx+edi*4-8],1              ;#00465857: 203104273 F8 01            u  00 88  3 1005      
    cmp eax,1503                          ;#0046585C: 075 DF050000               vu 00 01  1 1007      
    push edi                              ;#00465861: 127                        uv 00 80  1 1008      
    mov edi,[ebp-184] (symtab[1491])      ;#00465862: 213275 48FFFFFF            vu 80 20  1 1008      
    jmp #00460143 (:%pMkSq)               ;#00465868: 351 D6A8FFFF               v  00 00  1 1009      
    mov ecx,8                             ;#0046586D: 271 08000000               uv 02 00  1 1010      
    mov edx,110                           ;#00465872: 272 6E000000               vu 04 00  1 1010      
    call #00462C02 (:%opFrame) (find)     ;#00465877: 350 86D3FFFF               v  00 00  1 1011      
    mov esi,[#0040261C] (or_edi)          ;#0046587C: 213065 1C264000            uv 40 00  1 1012      
    mov [ebp] (needle),esi                ;#00465882: 211165 00                  uv 00 60  1 1013 40   
    cmp esi,h4                            ;#00465885: 201376 00000040            vu 00 40  1 1013      
    jl #00465897                          ;#0046588B: 174 0A                     v  00 00  1 1014      
    add dword[ebx+esi*4-8],1              ;#0046588D: 203104263 F8 01            u  00 48  3 1015      
    cmp eax,1247                          ;#00465892: 075 DF040000               vu 00 01  1 1017      
    mov edi,[ebp+20] (prevebp)            ;#00465897: 213175 14                  uv 80 20  1 1018      
    mov eax,[edi-184]                     ;#0046589A: 213207 48FFFFFF            uv 01 80  1 1021 80 *80*
    mov [edi-184], dword h4               ;#004658A0: 307207 48FFFFFF 00000040   vu 00 80  1 1021      
    cmp eax,h4                            ;#004658AA: 075 00000040               uv 00 01  1 1022      
    jne #004658BB                         ;#004658AF: 165 0A                     v  00 00  1 1022      
    mov esi,1491                          ;#004658B1: 276 D3050000               uv 40 00  1 1023      
    call #00462744 (:%pUnassigned)        ;#004658B6: 350 89CEFFFF               v  00 00  1 1023      
    mov [ebp-4] (haystack),eax            ;#004658BB: 211105 FC                  uv 00 21  1 1024      
    mov [ebp+28] (retaddr),#004658CA      ;#004658BE: 307105 1C CA584600         vu 00 20  1 1024      
    jmp #0045AADB (code:find)             ;#004658C5: 351 1152FFFF               v  00 00  1 1025      
    test eax,eax                          ;#004658CA: 205300                     uv 00 01  1 1026      
    je #00465927                          ;#004658CC: 164 59                     v  00 00  1 1026      
;  2750 --          or_edx = or_ecx
;  2751             or_esi = or_ecx
    mov ecx,[#0040260C] (or_ecx)          ;#004658CE: 213015 0C264000            uv 02 00  1 1027      
    cmp ecx,h4                            ;#004658D4: 201371 00000040            uv 00 02  1 1028 02   
    jne #004658E6                         ;#004658DA: 165 0A                     v  00 00  1 1028      
    mov esi,1243                          ;#004658DC: 276 DB040000               uv 40 00  1 1029      
    call #00462744 (:%pUnassigned)        ;#004658E1: 350 5ECEFFFF               v  00 00  1 1029      
    mov edx,[#00402618] (or_esi)          ;#004658E6: 213025 18264000            uv 04 00  1 1030      
    cmp ecx,h4                            ;#004658EC: 201371 00000040            vu 00 02  1 1030      
    jl #004658FE                          ;#004658F2: 174 0A                     v  00 00  1 1031      
    add dword[ebx+ecx*4-8],1              ;#004658F4: 203104213 F8 01            u  00 0A  3 1032      
    cmp eax,1243                          ;#004658F9: 075 DB040000               vu 00 01  1 1034      
    mov [#00402618] (or_esi),ecx          ;#004658FE: 211015 18264000            uv 00 02  1 1035      
    cmp edx,h4                            ;#00465904: 201372 00000040            vu 00 04  1 1035      
    jle #00465918                         ;#0046590A: 176 0C                     v  00 00  1 1036      
    sub dword[ebx+edx*4-8],1              ;#0046590C: 203154223 F8 01            u  00 0C  3 1037      
    jne #00465918                         ;#00465911: 165 05                     v  00 00  1 1039      
    call #004639A8 (:%pDealloc)           ;#00465913: 350 90E0FFFF               v  00 00  1 1040      
;  2752             msg_id = 92
    mov [#00402658] (msg_id), dword 92    ;#00465918: 307005 58264000 5C000000   uv 00 00  1 1041      
    jmp #00465D9C                         ;#00465922: 351 75040000               v  00 00  1 1041      
;  2753         else
;  2754 --          msg = sprintf(msg,{or_edi,or_edx})
;  2755             msg = sprintf(msg,{or_edi,or_esi})
    lea eax,[ebp-184] (symtab[1491])      ;#00465927: 215205 48FFFFFF            uv 01 20  1 1042      
    mov edx,2                             ;#0046592D: 272 02000000               vu 04 00  1 1042      
    push #00465975                        ;#00465932: 150 75594600               uv 00 00  1 1043      
    push eax                              ;#00465937: 120                        vu 00 01  1 1043      
    mov edi,[#00402618] (or_esi)          ;#00465938: 213075 18264000            uv 80 00  1 1044      
    cmp edi,h4                            ;#0046593E: 201377 00000040            uv 00 80  1 1045 80   
    jl #00465950                          ;#00465944: 174 0A                     v  00 00  1 1045      
    add dword[ebx+edi*4-8],1              ;#00465946: 203104273 F8 01            u  00 88  3 1046      
    cmp eax,1246                          ;#0046594B: 075 DE040000               vu 00 01  1 1048      
    push edi                              ;#00465950: 127                        uv 00 80  1 1049      
    mov esi,[#0040261C] (or_edi)          ;#00465951: 213065 1C264000            vu 40 00  1 1049      
    cmp esi,h4                            ;#00465957: 201376 00000040            uv 00 40  1 1050      
    jl #00465969                          ;#0046595D: 174 0A                     v  00 00  1 1050      
    add dword[ebx+esi*4-8],1              ;#0046595F: 203104263 F8 01            u  00 48  3 1051      
    cmp eax,1247                          ;#00465964: 075 DF040000               vu 00 01  1 1053      
    push esi                              ;#00465969: 126                        uv 00 40  1 1054      
    mov edi,[ebp-184] (symtab[1491])      ;#0046596A: 213275 48FFFFFF            vu 80 20  1 1054      
    jmp #00460143 (:%pMkSq)               ;#00465970: 351 CEA7FFFF               v  00 00  1 1055      
    mov ecx,2                             ;#00465975: 271 02000000               uv 02 00  1 1056      
    mov edx,210                           ;#0046597A: 272 D2000000               vu 04 00  1 1056      
    call #00462C02 (:%opFrame) (sprintf)  ;#0046597F: 350 7ED2FFFF               v  00 00  1 1057      
    mov edi,[ebp+20] (prevebp)            ;#00465984: 213175 14                  uv 80 20  1 1058      
    mov eax,[edi-52]                      ;#00465987: 213107 CC                  uv 01 80  1 1061 80 *80*
    mov [edi-52], dword h4                ;#0046598A: 307107 CC 00000040         vu 00 80  1 1061      
    cmp eax,h4                            ;#00465991: 075 00000040               uv 00 01  1 1062      
    jne #004659A2                         ;#00465996: 165 0A                     v  00 00  1 1062      
    mov esi,1322                          ;#00465998: 276 2A050000               uv 40 00  1 1063      
    call #00462744 (:%pUnassigned)        ;#0046599D: 350 A2CDFFFF               v  00 00  1 1063      
    mov [ebp] (fmt),eax                   ;#004659A2: 211105 00                  uv 00 21  1 1064      
    mov edi,[ebp+20] (prevebp)            ;#004659A5: 213175 14                  vu 80 20  1 1064      
    mov eax,[edi-184]                     ;#004659A8: 213207 48FFFFFF            uv 01 80  1 1067    *80*
    mov [edi-184], dword h4               ;#004659AE: 307207 48FFFFFF 00000040   vu 00 80  1 1067      
    cmp eax,h4                            ;#004659B8: 075 00000040               uv 00 01  1 1068      
    jne #004659C9                         ;#004659BD: 165 0A                     v  00 00  1 1068      
    mov esi,1491                          ;#004659BF: 276 D3050000               uv 40 00  1 1069      
    call #00462744 (:%pUnassigned)        ;#004659C4: 350 7BCDFFFF               v  00 00  1 1069      
    mov [ebp-4] (args),eax                ;#004659C9: 211105 FC                  uv 00 21  1 1070      
    mov [ebp+28] (retaddr),#004659D8      ;#004659CC: 307105 1C D8594600         vu 00 20  1 1070      
    jmp #00454E9A (code:sprintf)          ;#004659D3: 351 C2F4FEFF               v  00 00  1 1071      
    push eax                              ;#004659D8: 120                        uv 00 01  1 1072      
    mov ecx,[ebp-52] (msg)                ;#004659D9: 213115 CC                  vu 02 20  1 1072      
    cmp ecx,h4                            ;#004659DC: 201371 00000040            uv 00 02  1 1073      
    jle #004659F2                         ;#004659E2: 176 0E                     v  00 00  1 1073      
    sub dword[ebx+ecx*4-8],1              ;#004659E4: 203154213 F8 01            u  00 0A  3 1074      
    jne #004659F2                         ;#004659E9: 165 07                     v  00 00  1 1076      
    mov edx,ecx                           ;#004659EB: 213321                     uv 04 02  1 1077      
    call #004639A8 (:%pDealloc)           ;#004659ED: 350 B6DFFFFF               v  00 00  1 1077      
    pop dword[ebp-52] (msg)               ;#004659F2: 217105 CC                  np 00 20  3 1078      
;  2756         end if
    jmp #00465D9C                         ;#004659F5: 351 A2030000               v  00 00  1 1081      
;  2757     elsif msg_id=30 then    -- e30ume
    cmp ecx,30                            ;#004659FA: 203371 1E                  uv 00 02  1 1082      
    jne #00465D9C                         ;#004659FD: 017205 99030000            v  00 00  1 1082      
;  2758         -- Map any machine exceptions that occur on add1 (refcount) 
;  2759         --  followed by a "helper" cmp eax,<varno>; ==> to e92:
;  2760 if machine_bits()=32 then
;  2761             x6 = peek({or_era,6})
    lea eax,[ebp-184] (symtab[1491])      ;#00465A03: 215205 48FFFFFF            uv 01 20  1 1083      
    mov edx,2                             ;#00465A09: 272 02000000               vu 04 00  1 1083      
    push #00465A3A                        ;#00465A0E: 150 3A5A4600               uv 00 00  1 1084      
    push eax                              ;#00465A13: 120                        vu 00 01  1 1084      
    push 6                                ;#00465A14: 152 06                     uv 00 00  1 1085      
    mov esi,[#00402610] (or_era)          ;#00465A16: 213065 10264000            vu 40 00  1 1085      
    cmp esi,h4                            ;#00465A1C: 201376 00000040            uv 00 40  1 1086      
    jl #00465A2E                          ;#00465A22: 174 0A                     v  00 00  1 1086      
    add dword[ebx+esi*4-8],1              ;#00465A24: 203104263 F8 01            u  00 48  3 1087      
    cmp eax,1244                          ;#00465A29: 075 DC040000               vu 00 01  1 1089      
    push esi                              ;#00465A2E: 126                        uv 00 40  1 1090      
    mov edi,[ebp-184] (symtab[1491])      ;#00465A2F: 213275 48FFFFFF            vu 80 20  1 1090      
    jmp #00460143 (:%pMkSq)               ;#00465A35: 351 09A7FFFF               v  00 00  1 1091      
    lea edi,[ebp-72] (x6)                 ;#00465A3A: 215175 B8                  uv 80 20  1 1092      
    mov esi,[ebp-184] (symtab[1491])      ;#00465A3D: 213265 48FFFFFF            vu 40 20  1 1092      
    xor ecx,ecx                           ;#00465A43: 061311                     uv 02 02  1 1093      
    mov edx,1                             ;#00465A45: 272 01000000               vu 04 00  1 1093      
    call #0045E945 (:%opPeekNx)           ;#00465A4A: 350 F68EFFFF               v  00 00  1 1094      
;  2762             --  add dword[ebx+src*4-8],1    203104 2s3 F8 01
;  2763             if x6[1]=0o203
    mov edi,1                             ;#00465A4F: 277 01000000               uv 80 00  1 1095      
    lea ecx,[ebp-216] (symtab[1500])      ;#00465A54: 215215 28FFFFFF            vu 02 20  1 1095      
    mov esi,[ebp-72] (x6)                 ;#00465A5A: 213165 B8                  uv 40 20  1 1096      
    mov edx,1327                          ;#00465A5D: 272 2F050000               vu 04 00  1 1096      
    mov al,0                              ;#00465A62: 260 00                     uv 01 00  1 1097      
    call #00460FE5 (:%pSubse1)            ;#00465A64: 350 7CB5FFFF               v  00 00  1 1097      
    mov eax,[ebp-216] (symtab[1500])      ;#00465A69: 213205 28FFFFFF            uv 01 20  1 1098      
    cmp eax,131                           ;#00465A6F: 075 83000000               uv 00 01  1 1099 01   
    jne #00465BC2                         ;#00465A74: 017205 48010000            v  00 00  1 1099      
;  2764             and x6[2]=0o104
    mov edi,2                             ;#00465A7A: 277 02000000               uv 80 00  1 1100      
    lea ecx,[ebp-216] (symtab[1500])      ;#00465A7F: 215215 28FFFFFF            vu 02 20  1 1100      
    mov esi,[ebp-72] (x6)                 ;#00465A85: 213165 B8                  uv 40 20  1 1101      
    mov edx,1327                          ;#00465A88: 272 2F050000               vu 04 00  1 1101      
    mov al,0                              ;#00465A8D: 260 00                     uv 01 00  1 1102      
    call #00460FE5 (:%pSubse1)            ;#00465A8F: 350 51B5FFFF               v  00 00  1 1102      
    mov ecx,[ebp-216] (symtab[1500])      ;#00465A94: 213215 28FFFFFF            uv 02 20  1 1103      
    cmp ecx,68                            ;#00465A9A: 203371 44                  uv 00 02  1 1104 02   
    jne #00465BC2                         ;#00465A9D: 017205 1F010000            v  00 00  1 1104      
;  2765             and and_bits(x6[3],0o307)=0o203         -- sib(maybe!) of 0o2s3,
    mov edi,3                             ;#00465AA3: 277 03000000               uv 80 00  1 1105      
    lea ecx,[ebp-216] (symtab[1500])      ;#00465AA8: 215215 28FFFFFF            vu 02 20  1 1105      
    mov esi,[ebp-72] (x6)                 ;#00465AAE: 213165 B8                  uv 40 20  1 1106      
    mov edx,1327                          ;#00465AB1: 272 2F050000               vu 04 00  1 1106      
    mov al,0                              ;#00465AB6: 260 00                     uv 01 00  1 1107      
    call #00460FE5 (:%pSubse1)            ;#00465AB8: 350 28B5FFFF               v  00 00  1 1107      
    lea edi,[ebp-224] (symtab[1509])      ;#00465ABD: 215275 20FFFFFF            uv 80 20  1 1108      
    mov ecx,[ebp-216] (symtab[1500])      ;#00465AC3: 213215 28FFFFFF            vu 02 20  1 1108      
    mov eax,[#004028A4]                   ;#00465AC9: 241 A4284000               uv 01 00  1 1109      
    call #0045F45E (:%opAndBits)          ;#00465ACE: 350 8B99FFFF               v  00 00  1 1109      
    mov edi,[ebp-224] (symtab[1509])      ;#00465AD3: 213275 20FFFFFF            uv 80 20  1 1110      
    cmp edi,131                           ;#00465AD9: 201377 83000000            uv 00 80  1 1111 80   
    jne #00465BC2                         ;#00465ADF: 017205 DD000000            v  00 00  1 1111      
;  2766             and x6[4]=#F8                           -- displacement is -8
    mov edi,4                             ;#00465AE5: 277 04000000               uv 80 00  1 1112      
    lea ecx,[ebp-216] (symtab[1500])      ;#00465AEA: 215215 28FFFFFF            vu 02 20  1 1112      
    mov esi,[ebp-72] (x6)                 ;#00465AF0: 213165 B8                  uv 40 20  1 1113      
    mov edx,1327                          ;#00465AF3: 272 2F050000               vu 04 00  1 1113      
    mov al,0                              ;#00465AF8: 260 00                     uv 01 00  1 1114      
    call #00460FE5 (:%pSubse1)            ;#00465AFA: 350 E6B4FFFF               v  00 00  1 1114      
    mov ecx,[ebp-216] (symtab[1500])      ;#00465AFF: 213215 28FFFFFF            uv 02 20  1 1115      
    cmp ecx,248                           ;#00465B05: 201371 F8000000            uv 00 02  1 1116 02   
    jne #00465BC2                         ;#00465B0B: 017205 B1000000            v  00 00  1 1116      
;  2767             and x6[5]=#01 then                      -- literal imm8 of 1
    mov edi,5                             ;#00465B11: 277 05000000               uv 80 00  1 1117      
    lea ecx,[ebp-216] (symtab[1500])      ;#00465B16: 215215 28FFFFFF            vu 02 20  1 1117      
    mov esi,[ebp-72] (x6)                 ;#00465B1C: 213165 B8                  uv 40 20  1 1118      
    mov edx,1327                          ;#00465B1F: 272 2F050000               vu 04 00  1 1118      
    mov al,0                              ;#00465B24: 260 00                     uv 01 00  1 1119      
    call #00460FE5 (:%pSubse1)            ;#00465B26: 350 BAB4FFFF               v  00 00  1 1119      
    mov eax,[ebp-216] (symtab[1500])      ;#00465B2B: 213205 28FFFFFF            uv 01 20  1 1120      
    cmp eax,1                             ;#00465B31: 203370 01                  uv 00 01  1 1121 01   
    jne #00465BC2                         ;#00465B34: 017205 88000000            v  00 00  1 1121      
;  2768                 if x6[6]=cmp_eax_imm32 then
    mov edi,6                             ;#00465B3A: 277 06000000               uv 80 00  1 1122      
    lea ecx,[ebp-216] (symtab[1500])      ;#00465B3F: 215215 28FFFFFF            vu 02 20  1 1122      
    mov esi,[ebp-72] (x6)                 ;#00465B45: 213165 B8                  uv 40 20  1 1123      
    mov edx,1327                          ;#00465B48: 272 2F050000               vu 04 00  1 1123      
    mov al,0                              ;#00465B4D: 260 00                     uv 01 00  1 1124      
    call #00460FE5 (:%pSubse1)            ;#00465B4F: 350 91B4FFFF               v  00 00  1 1124      
    mov edi,[ebp-216] (symtab[1500])      ;#00465B54: 213275 28FFFFFF            uv 80 20  1 1125      
    cmp edi,61                            ;#00465B5A: 203377 3D                  uv 00 80  1 1126 80   
    jne #00465BC2                         ;#00465B5D: 165 63                     v  00 00  1 1126      
;  2769                     or_esi = peek4u(or_era+6)
    mov ecx,[#00402610] (or_era)          ;#00465B5F: 213015 10264000            uv 02 00  1 1127      
    cmp ecx,h4                            ;#00465B65: 201371 00000040            uv 00 02  1 1128 02   
    jne #00465B77                         ;#00465B6B: 165 0A                     v  00 00  1 1128      
    mov esi,1244                          ;#00465B6D: 276 DC040000               uv 40 00  1 1129      
    call #00462744 (:%pUnassigned)        ;#00465B72: 350 CDCBFFFF               v  00 00  1 1129      
    lea edi,[ebp-180] (symtab[1490])      ;#00465B77: 215275 4CFFFFFF            uv 80 20  1 1130      
    mov eax,[#00402070] (D_DAY)           ;#00465B7D: 241 70204000               vu 01 00  1 1130      
    call #0045F261 (:%opAdd)              ;#00465B82: 350 DA96FFFF               v  00 00  1 1131      
    mov edi,#00402618                     ;#00465B87: 277 18264000               uv 80 00  1 1132      
    mov esi,[ebp-180] (symtab[1490])      ;#00465B8C: 213265 4CFFFFFF            vu 40 20  1 1132      
    xor ecx,ecx                           ;#00465B92: 061311                     uv 02 02  1 1133      
    mov edx,4                             ;#00465B94: 272 04000000               vu 04 00  1 1133      
    call #0045E945 (:%opPeekNx)           ;#00465B99: 350 A78DFFFF               v  00 00  1 1134      
;  2770                     msg_id = 92
    mov [#00402658] (msg_id), dword 92    ;#00465B9E: 307005 58264000 5C000000   uv 00 00  1 1135      
;  2771                     msg = msgs[92]
    mov edi,92                            ;#00465BA8: 277 5C000000               vu 80 00  1 1135      
    lea ecx,[ebp-52] (msg)                ;#00465BAD: 215115 CC                  uv 02 20  1 1136      
    mov esi,[ebp-156] (msgs)              ;#00465BB0: 213265 64FFFFFF            vu 40 20  1 1136      
    mov edx,1348                          ;#00465BB6: 272 44050000               uv 04 00  1 1137      
    mov al,0                              ;#00465BBB: 260 00                     vu 01 00  1 1137      
    call #00460FE5 (:%pSubse1)            ;#00465BBD: 350 23B4FFFF               v  00 00  1 1138      
;  2772                 end if
;  2773             end if
;  2774 else
;  2775             x6 = peek({or_era,7})
;  2776 --eg:
;  2777 --  add qword[rbx+rcx*4-16],1             ;#00452707: 48:203104213 F0 01         u  00 0A  3   6      
;  2778 --  cmp eax,1186                          ;#0045270D: 075 A2040000               vu 00 01  1   8      
;  2779 --vs:
;  2780 --  add dword[ebx+ecx*4-8],1              ;#0042ED50: 203104213 F8 01            u  00 0A  3   5      
;  2781 --  cmp eax,1182                          ;#0042ED55: 075 9E040000               vu 00 01  1   7      
;  2782             if x6[1]=#48
;  2783             and x6[2]=0o203
;  2784             and x6[3]=0o104
;  2785             and and_bits(x6[4],0o307)=0o203         -- sib(maybe!) of 0o2s3,
;  2786             and x6[5]=#F0                           -- displacement is -16
;  2787             and x6[6]=#01 then                      -- literal imm8 of 1
;  2788                 if x6[7]=cmp_eax_imm32 then
;  2789                     or_esi = peek4u(or_era+7)
;  2790                     msg_id = 92
;  2791                     msg = msgs[92]
;  2792                 end if
;  2793             end if
;  2794 end if
;  2795         if msg_id=30 then
    mov edi,[#00402658] (msg_id)          ;#00465BC2: 213075 58264000            uv 80 00  1 1139      
    cmp edi,30                            ;#00465BC8: 203377 1E                  uv 00 80  1 1140 80   
    jne #00465D9C                         ;#00465BCB: 017205 CB010000            v  00 00  1 1140      
;  2796             if xceptn=#C0000005
    mov edi,[#004028AC]                   ;#00465BD1: 213075 AC284000            uv 80 00  1 1141      
    mov eax,[#00402600] (xceptn)          ;#00465BD7: 241 00264000               vu 01 00  1 1141      
    mov esi,1511                          ;#00465BDC: 276 E7050000               uv 40 00  1 1142      
    mov edx,1240                          ;#00465BE1: 272 D8040000               vu 04 00  1 1142      
    call #0045F91F (:%opJccE)             ;#00465BE6: 350 349DFFFF               v  00 00  1 1143      
    je #00465BFB                          ;#00465BEB: 164 0E                     v  00 00  1 1144      
;  2797             or xceptn=#C0000005-#100000000 then
    mov ecx,[#00402600] (xceptn)          ;#00465BED: 213015 00264000            uv 02 00  1 1145      
    cmp ecx,-1073741819                   ;#00465BF3: 201371 050000C0            uv 00 02  1 1146 02   
    jne #00465C0E                         ;#00465BF9: 165 13                     v  00 00  1 1146      
;  2798                 wmsg = "[MEMORY VIOLATION]"
    mov esi,[#004028B4]                   ;#00465BFB: 213065 B4284000            uv 40 00  1 1147      
    mov [ebp-56] (wmsg),esi               ;#00465C01: 211165 C8                  uv 00 60  1 1148 40   
    add dword[ebx+esi*4-8],1              ;#00465C04: 203104263 F8 01            u  00 48  3 1150    *40*
    jmp #00465CD1                         ;#00465C09: 351 C3000000               v  00 00  1 1152      
;  2799             elsif xceptn=#C00000FD
    mov edi,[#004028B8]                   ;#00465C0E: 213075 B8284000            uv 80 00  1 1153      
    mov eax,ecx                           ;#00465C14: 211310                     vu 01 02  1 1153      
    mov esi,1514                          ;#00465C16: 276 EA050000               uv 40 00  1 1154      
    mov edx,1240                          ;#00465C1B: 272 D8040000               vu 04 00  1 1154      
    call #0045F91F (:%opJccE)             ;#00465C20: 350 FA9CFFFF               v  00 00  1 1155      
    je #00465C42                          ;#00465C25: 164 1B                     v  00 00  1 1156      
;  2800                or xceptn=#C00000FD-#100000000 then
    mov edi,-1073741571                   ;#00465C27: 277 FD0000C0               uv 80 00  1 1157      
    mov eax,[#00402600] (xceptn)          ;#00465C2C: 241 00264000               vu 01 00  1 1157      
    mov esi,1515                          ;#00465C31: 276 EB050000               uv 40 00  1 1158      
    mov edx,1240                          ;#00465C36: 272 D8040000               vu 04 00  1 1158      
    call #0045F91F (:%opJccE)             ;#00465C3B: 350 DF9CFFFF               v  00 00  1 1159      
    jne #00465C71                         ;#00465C40: 165 2F                     v  00 00  1 1160      
;  2801                 wmsg = "[STACK OVERFLOW]"
    mov esi,[#004028C0]                   ;#00465C42: 213065 C0284000            uv 40 00  1 1161      
    mov edx,[ebp-56] (wmsg)               ;#00465C48: 213125 C8                  vu 04 20  1 1161      
    cmp esi,h4                            ;#00465C4B: 201376 00000040            uv 00 40  1 1162      
    jl #00465C58                          ;#00465C51: 174 05                     v  00 00  1 1162      
    add dword[ebx+esi*4-8],1              ;#00465C53: 203104263 F8 01            u  00 48  3 1163      
    mov [ebp-56] (wmsg),esi               ;#00465C58: 211165 C8                  vu 00 60  1 1165      
    cmp edx,h4                            ;#00465C5B: 201372 00000040            uv 00 04  1 1166      
    jle #00465CD1                         ;#00465C61: 176 6E                     v  00 00  1 1166      
    sub dword[ebx+edx*4-8],1              ;#00465C63: 203154223 F8 01            u  00 0C  3 1167      
    jne #00465CD1                         ;#00465C68: 165 67                     v  00 00  1 1169      
    call #004639A8 (:%pDealloc)           ;#00465C6A: 350 39DDFFFF               v  00 00  1 1170      
;  2802 --#80000003/[EXCEPTION_BREAKPOINT(int3)]
    jmp #00465CD1                         ;#00465C6F: 353 60                     v  00 00  1 1171      
;  2803             else
;  2804                 wmsg = sprintf("#%08x",xceptn)
    mov ecx,2                             ;#00465C71: 271 02000000               uv 02 00  1 1172      
    mov edx,210                           ;#00465C76: 272 D2000000               vu 04 00  1 1172      
    call #00462C02 (:%opFrame) (sprintf)  ;#00465C7B: 350 82CFFFFF               v  00 00  1 1173      
    mov edi,[#004028C4]                   ;#00465C80: 213075 C4284000            uv 80 00  1 1174      
    mov [ebp] (fmt),edi                   ;#00465C86: 211175 00                  uv 00 A0  1 1175 80   
    add dword[ebx+edi*4-8],1              ;#00465C89: 203104273 F8 01            u  00 88  3 1177    *80*
    mov ecx,[#00402600] (xceptn)          ;#00465C8E: 213015 00264000            vu 02 00  1 1179      
    mov [ebp-4] (args),ecx                ;#00465C94: 211115 FC                  uv 00 22  1 1180      
    cmp ecx,h4                            ;#00465C97: 201371 00000040            vu 00 02  1 1180      
    jl #00465CA9                          ;#00465C9D: 174 0A                     v  00 00  1 1181      
    add dword[ebx+ecx*4-8],1              ;#00465C9F: 203104213 F8 01            u  00 0A  3 1182      
    cmp eax,1240                          ;#00465CA4: 075 D8040000               vu 00 01  1 1184      
    mov [ebp+28] (retaddr),#00465CB5      ;#00465CA9: 307105 1C B55C4600         uv 00 20  1 1185      
    jmp #00454E9A (code:sprintf)          ;#00465CB0: 351 E5F1FEFF               v  00 00  1 1185      
    push eax                              ;#00465CB5: 120                        uv 00 01  1 1186      
    mov eax,[ebp-56] (wmsg)               ;#00465CB6: 213105 C8                  vu 01 20  1 1186      
    cmp eax,h4                            ;#00465CB9: 075 00000040               uv 00 01  1 1187      
    jle #00465CCE                         ;#00465CBE: 176 0E                     v  00 00  1 1187      
    sub dword[ebx+eax*4-8],1              ;#00465CC0: 203154203 F8 01            u  00 09  3 1188      
    jne #00465CCE                         ;#00465CC5: 165 07                     v  00 00  1 1190      
    mov edx,eax                           ;#00465CC7: 213320                     uv 04 01  1 1191      
    call #004639A8 (:%pDealloc)           ;#00465CC9: 350 DADCFFFF               v  00 00  1 1191      
    pop dword[ebp-56] (wmsg)              ;#00465CCE: 217105 C8                  np 00 20  3 1192      
;  2805             end if
;  2806             msg = sprintf(msg,{wmsg,xcepta})
    lea eax,[ebp-184] (symtab[1491])      ;#00465CD1: 215205 48FFFFFF            uv 01 20  1 1195      
    mov edx,2                             ;#00465CD7: 272 02000000               vu 04 00  1 1195      
    push #00465D1C                        ;#00465CDC: 150 1C5D4600               uv 00 00  1 1196      
    push eax                              ;#00465CE1: 120                        vu 00 01  1 1196      
    mov esi,[#00402604] (xcepta)          ;#00465CE2: 213065 04264000            uv 40 00  1 1197      
    cmp esi,h4                            ;#00465CE8: 201376 00000040            uv 00 40  1 1198 40   
    jl #00465CFA                          ;#00465CEE: 174 0A                     v  00 00  1 1198      
    add dword[ebx+esi*4-8],1              ;#00465CF0: 203104263 F8 01            u  00 48  3 1199      
    cmp eax,1241                          ;#00465CF5: 075 D9040000               vu 00 01  1 1201      
    push esi                              ;#00465CFA: 126                        uv 00 40  1 1202      
    mov edi,[ebp-56] (wmsg)               ;#00465CFB: 213175 C8                  vu 80 20  1 1202      
    cmp edi,h4                            ;#00465CFE: 201377 00000040            uv 00 80  1 1203      
    jl #00465D10                          ;#00465D04: 174 0A                     v  00 00  1 1203      
    add dword[ebx+edi*4-8],1              ;#00465D06: 203104273 F8 01            u  00 88  3 1204      
    cmp eax,1323                          ;#00465D0B: 075 2B050000               vu 00 01  1 1206      
    push edi                              ;#00465D10: 127                        uv 00 80  1 1207      
    mov edi,[ebp-184] (symtab[1491])      ;#00465D11: 213275 48FFFFFF            vu 80 20  1 1207      
    jmp #00460143 (:%pMkSq)               ;#00465D17: 351 27A4FFFF               v  00 00  1 1208      
    mov ecx,2                             ;#00465D1C: 271 02000000               uv 02 00  1 1209      
    mov edx,210                           ;#00465D21: 272 D2000000               vu 04 00  1 1209      
    call #00462C02 (:%opFrame) (sprintf)  ;#00465D26: 350 D7CEFFFF               v  00 00  1 1210      
    mov edi,[ebp+20] (prevebp)            ;#00465D2B: 213175 14                  uv 80 20  1 1211      
    mov eax,[edi-52]                      ;#00465D2E: 213107 CC                  uv 01 80  1 1214 80 *80*
    mov [edi-52], dword h4                ;#00465D31: 307107 CC 00000040         vu 00 80  1 1214      
    cmp eax,h4                            ;#00465D38: 075 00000040               uv 00 01  1 1215      
    jne #00465D49                         ;#00465D3D: 165 0A                     v  00 00  1 1215      
    mov esi,1322                          ;#00465D3F: 276 2A050000               uv 40 00  1 1216      
    call #00462744 (:%pUnassigned)        ;#00465D44: 350 FBC9FFFF               v  00 00  1 1216      
    mov [ebp] (fmt),eax                   ;#00465D49: 211105 00                  uv 00 21  1 1217      
    mov edi,[ebp+20] (prevebp)            ;#00465D4C: 213175 14                  vu 80 20  1 1217      
    mov eax,[edi-184]                     ;#00465D4F: 213207 48FFFFFF            uv 01 80  1 1220    *80*
    mov [edi-184], dword h4               ;#00465D55: 307207 48FFFFFF 00000040   vu 00 80  1 1220      
    cmp eax,h4                            ;#00465D5F: 075 00000040               uv 00 01  1 1221      
    jne #00465D70                         ;#00465D64: 165 0A                     v  00 00  1 1221      
    mov esi,1491                          ;#00465D66: 276 D3050000               uv 40 00  1 1222      
    call #00462744 (:%pUnassigned)        ;#00465D6B: 350 D4C9FFFF               v  00 00  1 1222      
    mov [ebp-4] (args),eax                ;#00465D70: 211105 FC                  uv 00 21  1 1223      
    mov [ebp+28] (retaddr),#00465D7F      ;#00465D73: 307105 1C 7F5D4600         vu 00 20  1 1223      
    jmp #00454E9A (code:sprintf)          ;#00465D7A: 351 1BF1FEFF               v  00 00  1 1224      
    push eax                              ;#00465D7F: 120                        uv 00 01  1 1225      
    mov ecx,[ebp-52] (msg)                ;#00465D80: 213115 CC                  vu 02 20  1 1225      
    cmp ecx,h4                            ;#00465D83: 201371 00000040            uv 00 02  1 1226      
    jle #00465D99                         ;#00465D89: 176 0E                     v  00 00  1 1226      
    sub dword[ebx+ecx*4-8],1              ;#00465D8B: 203154213 F8 01            u  00 0A  3 1227      
    jne #00465D99                         ;#00465D90: 165 07                     v  00 00  1 1229      
    mov edx,ecx                           ;#00465D92: 213321                     uv 04 02  1 1230      
    call #004639A8 (:%pDealloc)           ;#00465D94: 350 0FDCFFFF               v  00 00  1 1230      
    pop dword[ebp-52] (msg)               ;#00465D99: 217105 CC                  np 00 20  3 1231      
;  2807         end if
;  2808     end if
;  2809 --?msg_id
;  2810     if msg_id=1             -- e01tcf(ecx)  -- (ecx is var no)
    mov esi,[#00402658] (msg_id)          ;#00465D9C: 213065 58264000            uv 40 00  1 1234      
    cmp esi,1                             ;#00465DA2: 203376 01                  uv 00 40  1 1235 40   
    jl #0046813B                          ;#00465DA5: 017214 90230000            v  00 00  1 1235      
    cmp esi,120                           ;#00465DAB: 203376 78                  uv 00 40  1 1236      
    jg #0046813B                          ;#00465DAE: 017217 87230000            v  00 00  1 1236      
    jmp dword[esi*4+#00465DB7]            ;#00465DB4: 377044265 B75D4600         np 00 40  2 1237      
    #00465F9B [1]                         ;#00465DBB:  9B5F4600                  
    #0046813B [2]                         ;#00465DBF:  3B814600                  
    #0046813B [3]                         ;#00465DC3:  3B814600                  
    #0046813B [4]                         ;#00465DC7:  3B814600                  
    #0046813B [5]                         ;#00465DCB:  3B814600                  
    #00467819 [6]                         ;#00465DCF:  19784600                  
    #0046813B [7]                         ;#00465DD3:  3B814600                  
    #0046813B [8]                         ;#00465DD7:  3B814600                  
    #00467508 [9]                         ;#00465DDB:  08754600                  
    #0046813B [10]                        ;#00465DDF:  3B814600                  
    #004675DB [11]                        ;#00465DE3:  DB754600                  
    #0046813B [12]                        ;#00465DE7:  3B814600                  
    #0046813B [13]                        ;#00465DEB:  3B814600                  
    #004678EA [14]                        ;#00465DEF:  EA784600                  
    #0046813B [15]                        ;#00465DF3:  3B814600                  
    #0046813B [16]                        ;#00465DF7:  3B814600                  
    #0046813B [17]                        ;#00465DFB:  3B814600                  
    #0046813B [18]                        ;#00465DFF:  3B814600                  
    #0046813B [19]                        ;#00465E03:  3B814600                  
    #0046813B [20]                        ;#00465E07:  3B814600                  
    #0046813B [21]                        ;#00465E0B:  3B814600                  
    #0046813B [22]                        ;#00465E0F:  3B814600                  
    #0046813B [23]                        ;#00465E13:  3B814600                  
    #0046813B [24]                        ;#00465E17:  3B814600                  
    #0046813B [25]                        ;#00465E1B:  3B814600                  
    #0046813B [26]                        ;#00465E1F:  3B814600                  
    #0046813B [27]                        ;#00465E23:  3B814600                  
    #0046813B [28]                        ;#00465E27:  3B814600                  
    #0046813B [29]                        ;#00465E2B:  3B814600                  
    #0046813B [30]                        ;#00465E2F:  3B814600                  
    #0046813B [31]                        ;#00465E33:  3B814600                  
    #00466B14 [32]                        ;#00465E37:  146B4600                  
    #0046813B [33]                        ;#00465E3B:  3B814600                  
    #0046813B [34]                        ;#00465E3F:  3B814600                  
    #0046813B [35]                        ;#00465E43:  3B814600                  
    #0046813B [36]                        ;#00465E47:  3B814600                  
    #0046813B [37]                        ;#00465E4B:  3B814600                  
    #0046813B [38]                        ;#00465E4F:  3B814600                  
    #0046813B [39]                        ;#00465E53:  3B814600                  
    #0046813B [40]                        ;#00465E57:  3B814600                  
    #0046813B [41]                        ;#00465E5B:  3B814600                  
    #00467EA7 [42]                        ;#00465E5F:  A77E4600                  
    #0046813B [43]                        ;#00465E63:  3B814600                  
    #0046813B [44]                        ;#00465E67:  3B814600                  
    #0046813B [45]                        ;#00465E6B:  3B814600                  
    #0046813B [46]                        ;#00465E6F:  3B814600                  
    #0046813B [47]                        ;#00465E73:  3B814600                  
    #0046813B [48]                        ;#00465E77:  3B814600                  
    #0046813B [49]                        ;#00465E7B:  3B814600                  
    #0046813B [50]                        ;#00465E7F:  3B814600                  
    #0046813B [51]                        ;#00465E83:  3B814600                  
    #0046813B [52]                        ;#00465E87:  3B814600                  
    #00467B7C [53]                        ;#00465E8B:  7C7B4600                  
    #0046813B [54]                        ;#00465E8F:  3B814600                  
    #00467F61 [55]                        ;#00465E93:  617F4600                  
    #0046813B [56]                        ;#00465E97:  3B814600                  
    #0046813B [57]                        ;#00465E9B:  3B814600                  
    #00466C39 [58]                        ;#00465E9F:  396C4600                  
    #0046813B [59]                        ;#00465EA3:  3B814600                  
    #0046813B [60]                        ;#00465EA7:  3B814600                  
    #0046813B [61]                        ;#00465EAB:  3B814600                  
    #0046813B [62]                        ;#00465EAF:  3B814600                  
    #0046813B [63]                        ;#00465EB3:  3B814600                  
    #0046813B [64]                        ;#00465EB7:  3B814600                  
    #0046813B [65]                        ;#00465EBB:  3B814600                  
    #0046813B [66]                        ;#00465EBF:  3B814600                  
    #0046813B [67]                        ;#00465EC3:  3B814600                  
    #00467DED [68]                        ;#00465EC7:  ED7D4600                  
    #0046813B [69]                        ;#00465ECB:  3B814600                  
    #0046813B [70]                        ;#00465ECF:  3B814600                  
    #0046813B [71]                        ;#00465ED3:  3B814600                  
    #004677A0 [72]                        ;#00465ED7:  A0774600                  
    #0046813B [73]                        ;#00465EDB:  3B814600                  
    #0046813B [74]                        ;#00465EDF:  3B814600                  
    #0046813B [75]                        ;#00465EE3:  3B814600                  
    #0046813B [76]                        ;#00465EE7:  3B814600                  
    #0046813B [77]                        ;#00465EEB:  3B814600                  
    #0046813B [78]                        ;#00465EEF:  3B814600                  
    #0046813B [79]                        ;#00465EF3:  3B814600                  
    #00467B2B [80]                        ;#00465EF7:  2B7B4600                  
    #0046813B [81]                        ;#00465EFB:  3B814600                  
    #0046813B [82]                        ;#00465EFF:  3B814600                  
    #0046813B [83]                        ;#00465F03:  3B814600                  
    #0046813B [84]                        ;#00465F07:  3B814600                  
    #0046813B [85]                        ;#00465F0B:  3B814600                  
    #0046813B [86]                        ;#00465F0F:  3B814600                  
    #0046813B [87]                        ;#00465F13:  3B814600                  
    #00467CBD [88]                        ;#00465F17:  BD7C4600                  
    #0046813B [89]                        ;#00465F1B:  3B814600                  
    #0046813B [90]                        ;#00465F1F:  3B814600                  
    #004666D5 [91]                        ;#00465F23:  D5664600                  
    #004666D5 [92]                        ;#00465F27:  D5664600                  
    #004666D5 [93]                        ;#00465F2B:  D5664600                  
    #004666D5 [94]                        ;#00465F2F:  D5664600                  
    #0046813B [95]                        ;#00465F33:  3B814600                  
    #0046813B [96]                        ;#00465F37:  3B814600                  
    #0046813B [97]                        ;#00465F3B:  3B814600                  
    #0046813B [98]                        ;#00465F3F:  3B814600                  
    #0046813B [99]                        ;#00465F43:  3B814600                  
    #0046813B [100]                       ;#00465F47:  3B814600                  
    #0046813B [101]                       ;#00465F4B:  3B814600                  
    #0046813B [102]                       ;#00465F4F:  3B814600                  
    #0046813B [103]                       ;#00465F53:  3B814600                  
    #0046813B [104]                       ;#00465F57:  3B814600                  
    #0046813B [105]                       ;#00465F5B:  3B814600                  
    #0046813B [106]                       ;#00465F5F:  3B814600                  
    #0046813B [107]                       ;#00465F63:  3B814600                  
    #00467A71 [108]                       ;#00465F67:  717A4600                  
    #0046813B [109]                       ;#00465F6B:  3B814600                  
    #00465F9B [110]                       ;#00465F6F:  9B5F4600                  
    #0046813B [111]                       ;#00465F73:  3B814600                  
    #0046813B [112]                       ;#00465F77:  3B814600                  
    #0046813B [113]                       ;#00465F7B:  3B814600                  
    #0046813B [114]                       ;#00465F7F:  3B814600                  
    #0046813B [115]                       ;#00465F83:  3B814600                  
    #00467819 [116]                       ;#00465F87:  19784600                  
    #0046813B [117]                       ;#00465F8B:  3B814600                  
    #0046813B [118]                       ;#00465F8F:  3B814600                  
    #00466CB2 [119]                       ;#00465F93:  B26C4600                  
    #00466DE1 [120]                       ;#00465F97:  E16D4600                  
;  2811     or msg_id=110 then      -- e110tce(ecx) -- (ecx is var address)
;  2812         if msg_id=1 then
    cmp esi,1                             ;#00465F9B: 203376 01                  uv 00 40  1 1239      
    jne #00465FDE                         ;#00465F9E: 165 3E                     v  00 00  1 1239      
;  2813             varno = or_ecx
    mov edi,[#0040260C] (or_ecx)          ;#00465FA0: 213075 0C264000            uv 80 00  1 1240      
    cmp edi,h4                            ;#00465FA6: 201377 00000040            uv 00 80  1 1241 80   
    jne #00465FB8                         ;#00465FAC: 165 0A                     v  00 00  1 1241      
    mov esi,1243                          ;#00465FAE: 276 DB040000               uv 40 00  1 1242      
    call #00462744 (:%pUnassigned)        ;#00465FB3: 350 8CC7FFFF               v  00 00  1 1242      
    mov [ebp-136] (varno),edi             ;#00465FB8: 211275 78FFFFFF            uv 00 A0  1 1243      
    cmp edi,h4                            ;#00465FBE: 201377 00000040            vu 00 80  1 1243      
    jl #00466065                          ;#00465FC4: 017214 9B000000            v  00 00  1 1244      
    mov esi,1243                          ;#00465FCA: 276 DB040000               uv 40 00  1 1245      
    mov edi,1343                          ;#00465FCF: 277 3F050000               vu 80 00  1 1245      
    call #00462744 (:%pUnassigned)        ;#00465FD4: 350 6BC7FFFF               v  00 00  1 1246      
    jmp #00466065                         ;#00465FD9: 351 87000000               v  00 00  1 1247      
;  2814         else
;  2815             varno = varIdx(or_ecx,rid,symtab)
    mov ecx,14                            ;#00465FDE: 271 0E000000               uv 02 00  1 1248      
    mov edx,1264                          ;#00465FE3: 272 F0040000               vu 04 00  1 1248      
    call #00462C02 (:%opFrame) (varIdx)   ;#00465FE8: 350 15CCFFFF               v  00 00  1 1249      
    mov eax,[#0040260C] (or_ecx)          ;#00465FED: 241 0C264000               uv 01 00  1 1250      
    mov [ebp] (addr),eax                  ;#00465FF2: 211105 00                  uv 00 21  1 1251 01   
    cmp eax,h4                            ;#00465FF5: 075 00000040               vu 00 01  1 1251      
    jl #00466006                          ;#00465FFA: 174 0A                     v  00 00  1 1252      
    add dword[ebx+eax*4-8],1              ;#00465FFC: 203104203 F8 01            u  00 09  3 1253      
    cmp eax,1243                          ;#00466001: 075 DB040000               vu 00 01  1 1255      
    mov edi,[ebp+20] (prevebp)            ;#00466006: 213175 14                  uv 80 20  1 1256      
    mov eax,[edi-84]                      ;#00466009: 213107 AC                  uv 01 80  1 1259 80 *80*
    xor ebx,ebx                           ;#0046600C: 061333                     vu 08 08  1 1259      
    cmp eax,h4                            ;#0046600E: 075 00000040               uv 00 01  1 1260      
    jl #0046601F                          ;#00466013: 174 0A                     v  00 00  1 1260      
    add dword[ebx+eax*4-8],1              ;#00466015: 203104203 F8 01            u  00 09  3 1261      
    cmp eax,1330                          ;#0046601A: 075 32050000               vu 00 01  1 1263      
    mov [ebp-4] (rid),eax                 ;#0046601F: 211105 FC                  uv 00 21  1 1264      
    mov edi,[ebp+20] (prevebp)            ;#00466022: 213175 14                  vu 80 20  1 1264      
    mov eax,[edi]                         ;#00466025: 213007                     uv 01 80  1 1267    *80*
    xor ebx,ebx                           ;#00466027: 061333                     vu 08 08  1 1267      
    cmp eax,h4                            ;#00466029: 075 00000040               uv 00 01  1 1268      
    jl #0046603A                          ;#0046602E: 174 0A                     v  00 00  1 1268      
    add dword[ebx+eax*4-8],1              ;#00466030: 203104203 F8 01            u  00 09  3 1269      
    cmp eax,1309                          ;#00466035: 075 1D050000               vu 00 01  1 1271      
    mov [ebp-8] (symtab),eax              ;#0046603A: 211105 F8                  uv 00 21  1 1272      
    mov [ebp+28] (retaddr),#00466049      ;#0046603D: 307105 1C 49604600         vu 00 20  1 1272      
    jmp #0046C837 (code:varIdx)           ;#00466044: 351 EE670000               v  00 00  1 1273      
    mov [ebp-136] (varno),eax             ;#00466049: 211205 78FFFFFF            uv 00 21  1 1274      
    cmp eax,h4                            ;#0046604F: 075 00000040               vu 00 01  1 1274      
    jl #00466065                          ;#00466054: 174 0F                     v  00 00  1 1275      
    mov esi,1263                          ;#00466056: 276 EF040000               uv 40 00  1 1276      
    mov edi,1343                          ;#0046605B: 277 3F050000               vu 80 00  1 1276      
    call #00462744 (:%pUnassigned)        ;#00466060: 350 DFC6FFFF               v  00 00  1 1277      
;  2816         end if
;  2817         o = "???"
    mov ecx,[#004028C8]                   ;#00466065: 213015 C8284000            uv 02 00  1 1278      
    mov [ebp-16] (o),ecx                  ;#0046606B: 211115 F0                  uv 00 22  1 1279 02   
    add dword[ebx+ecx*4-8],1              ;#0046606E: 203104213 F8 01            u  00 0A  3 1281    *02*
;  2818         if varno<1 or varno>length(symtab) then
    mov edi,1                             ;#00466073: 277 01000000               vu 80 00  1 1283      
    mov eax,[ebp-136] (varno)             ;#00466078: 213205 78FFFFFF            uv 01 20  1 1284      
    mov esi,26                            ;#0046607E: 276 1A000000               vu 40 00  1 1284      
    mov edx,1343                          ;#00466083: 272 3F050000               uv 04 00  1 1285      
    call #0045F8B0 (:%opJcc)              ;#00466088: 350 2398FFFF               v  00 00  1 1285      
    jl #004660B0                          ;#0046608D: 174 21                     v  00 00  1 1286      
    lea edi,[ebp-224] (symtab[1509])      ;#0046608F: 215275 20FFFFFF            uv 80 20  1 1287      
    mov esi,[ebp] (symtab)                ;#00466095: 213165 00                  vu 40 20  1 1287      
    mov edx,1309                          ;#00466098: 272 1D050000               uv 04 00  1 1288      
    call #0045EFEC (:%opLen)              ;#0046609D: 350 4A8FFFFF               v  00 00  1 1288      
    mov edi,[ebp-136] (varno)             ;#004660A2: 213275 78FFFFFF            uv 80 20  1 1289      
    cmp edi,ecx                           ;#004660A8: 071317                     uv 00 82  1 1290 80   
    jle #00466141                         ;#004660AA: 017216 91000000            v  00 00  1 1290      
;  2819             name = sprintf("???(varno=%d[or_ecx=#%08x])",{varno,or_ecx})
    lea eax,[ebp-184] (symtab[1491])      ;#004660B0: 215205 48FFFFFF            uv 01 20  1 1291      
    mov edx,2                             ;#004660B6: 272 02000000               vu 04 00  1 1291      
    push #004660E9                        ;#004660BB: 150 E9604600               uv 00 00  1 1292      
    push eax                              ;#004660C0: 120                        vu 00 01  1 1292      
    mov eax,[#0040260C] (or_ecx)          ;#004660C1: 241 0C264000               uv 01 00  1 1293      
    cmp eax,h4                            ;#004660C6: 075 00000040               uv 00 01  1 1294 01   
    jl #004660D7                          ;#004660CB: 174 0A                     v  00 00  1 1294      
    add dword[ebx+eax*4-8],1              ;#004660CD: 203104203 F8 01            u  00 09  3 1295      
    cmp eax,1243                          ;#004660D2: 075 DB040000               vu 00 01  1 1297      
    push eax                              ;#004660D7: 120                        uv 00 01  1 1298      
    push dword[ebp-136] (varno)           ;#004660D8: 377265 78FFFFFF            np 00 20  2 1299      
    mov edi,[ebp-184] (symtab[1491])      ;#004660DE: 213275 48FFFFFF            uv 80 20  1 1301      
    jmp #00460143 (:%pMkSq)               ;#004660E4: 351 5AA0FFFF               v  00 00  1 1301      
    mov ecx,2                             ;#004660E9: 271 02000000               uv 02 00  1 1302      
    mov edx,210                           ;#004660EE: 272 D2000000               vu 04 00  1 1302      
    call #00462C02 (:%opFrame) (sprintf)  ;#004660F3: 350 0ACBFFFF               v  00 00  1 1303      
    mov esi,[#004028CC]                   ;#004660F8: 213065 CC284000            uv 40 00  1 1304      
    mov [ebp] (fmt),esi                   ;#004660FE: 211165 00                  uv 00 60  1 1305 40   
    add dword[ebx+esi*4-8],1              ;#00466101: 203104263 F8 01            u  00 48  3 1307    *40*
    mov edi,[ebp+20] (prevebp)            ;#00466106: 213175 14                  vu 80 20  1 1309      
    mov eax,[edi-184]                     ;#00466109: 213207 48FFFFFF            uv 01 80  1 1312    *80*
    mov [edi-184], dword h4               ;#0046610F: 307207 48FFFFFF 00000040   vu 00 80  1 1312      
    cmp eax,h4                            ;#00466119: 075 00000040               uv 00 01  1 1313      
    jne #0046612A                         ;#0046611E: 165 0A                     v  00 00  1 1313      
    mov esi,1491                          ;#00466120: 276 D3050000               uv 40 00  1 1314      
    call #00462744 (:%pUnassigned)        ;#00466125: 350 1AC6FFFF               v  00 00  1 1314      
    mov [ebp-4] (args),eax                ;#0046612A: 211105 FC                  uv 00 21  1 1315      
    mov [ebp+28] (retaddr),#00466139      ;#0046612D: 307105 1C 39614600         vu 00 20  1 1315      
    jmp #00454E9A (code:sprintf)          ;#00466134: 351 61EDFEFF               v  00 00  1 1316      
    mov [ebp-12] (name),eax               ;#00466139: 211105 F4                  uv 00 21  1 1317      
    jmp #00466608                         ;#0046613C: 351 C7040000               v  00 00  1 1317      
;  2820         else
;  2821             si = symtab[varno]
    cmp esi,h4                            ;#00466141: 201376 00000040            uv 00 40  1 1318      
    jne #00466153                         ;#00466147: 165 0A                     v  00 00  1 1318      
    mov esi,1309                          ;#00466149: 276 1D050000               uv 40 00  1 1319      
    call #00462744 (:%pUnassigned)        ;#0046614E: 350 F1C5FFFF               v  00 00  1 1319      
    cmp edi,h4                            ;#00466153: 201377 00000040            uv 00 80  1 1320      
    jne #00466165                         ;#00466159: 165 0A                     v  00 00  1 1320      
    mov esi,1343                          ;#0046615B: 276 3F050000               uv 40 00  1 1321      
    call #00462744 (:%pUnassigned)        ;#00466160: 350 DFC5FFFF               v  00 00  1 1321      
    lea ecx,[ebp-4] (si)                  ;#00466165: 215115 FC                  uv 02 20  1 1322      
    mov edx,1309                          ;#00466168: 272 1D050000               vu 04 00  1 1322      
    mov al,0                              ;#0046616D: 260 00                     uv 01 00  1 1323      
    call #00460FE5 (:%pSubse1)            ;#0046616F: 350 71AEFFFF               v  00 00  1 1323      
;  2822             if atom(si) then
    mov ecx,[ebp-4] (si)                  ;#00466174: 213115 FC                  uv 02 20  1 1324      
    cmp ecx,h4                            ;#00466177: 201371 00000040            uv 00 02  1 1325 02   
    jl #00466186                          ;#0046617D: 174 07                     v  00 00  1 1325      
    cmp byte[ebx+ecx*4-1],#12             ;#0046617F: 200174213 FF 12            u  00 0A  2 1326      
    jne #004661DC                         ;#00466184: 165 56                     v  00 00  1 1327      
;  2823                 name = sprintf("???(atom(symtab[%d]))",varno)
    mov ecx,2                             ;#00466186: 271 02000000               uv 02 00  1 1328      
    mov edx,210                           ;#0046618B: 272 D2000000               vu 04 00  1 1328      
    call #00462C02 (:%opFrame) (sprintf)  ;#00466190: 350 6DCAFFFF               v  00 00  1 1329      
    mov eax,[#004028D0]                   ;#00466195: 241 D0284000               uv 01 00  1 1330      
    mov [ebp] (fmt),eax                   ;#0046619A: 211105 00                  uv 00 21  1 1331 01   
    add dword[ebx+eax*4-8],1              ;#0046619D: 203104203 F8 01            u  00 09  3 1333    *01*
    mov edi,[ebp+20] (prevebp)            ;#004661A2: 213175 14                  vu 80 20  1 1335      
    mov eax,[edi-136]                     ;#004661A5: 213207 78FFFFFF            uv 01 80  1 1338    *80*
    mov [ebp-4] (args),eax                ;#004661AB: 211105 FC                  uv 00 21  1 1339 01   
    mov [ebp+28] (retaddr),#004661BA      ;#004661AE: 307105 1C BA614600         vu 00 20  1 1339      
    jmp #00454E9A (code:sprintf)          ;#004661B5: 351 E0ECFEFF               v  00 00  1 1340      
    push eax                              ;#004661BA: 120                        uv 00 01  1 1341      
    mov edi,[ebp-12] (name)               ;#004661BB: 213175 F4                  vu 80 20  1 1341      
    cmp edi,h4                            ;#004661BE: 201377 00000040            uv 00 80  1 1342      
    jle #004661D4                         ;#004661C4: 176 0E                     v  00 00  1 1342      
    sub dword[ebx+edi*4-8],1              ;#004661C6: 203154273 F8 01            u  00 88  3 1343      
    jne #004661D4                         ;#004661CB: 165 07                     v  00 00  1 1345      
    mov edx,edi                           ;#004661CD: 213327                     uv 04 80  1 1346      
    call #004639A8 (:%pDealloc)           ;#004661CF: 350 D4D7FFFF               v  00 00  1 1346      
    pop dword[ebp-12] (name)              ;#004661D4: 217105 F4                  np 00 20  3 1347      
    jmp #00466608                         ;#004661D7: 351 2C040000               v  00 00  1 1350      
;  2824             else
;  2825                 name = si[S_Name]
    mov edi,1                             ;#004661DC: 277 01000000               uv 80 00  1 1351      
    lea ecx,[ebp-12] (name)               ;#004661E1: 215115 F4                  vu 02 20  1 1351      
    mov esi,[ebp-4] (si)                  ;#004661E4: 213165 FC                  uv 40 20  1 1352      
    mov edx,1310                          ;#004661E7: 272 1E050000               vu 04 00  1 1352      
    mov al,0                              ;#004661EC: 260 00                     uv 01 00  1 1353      
    call #00460FE5 (:%pSubse1)            ;#004661EE: 350 F2ADFFFF               v  00 00  1 1353      
;  2826                 if atom(name) then
    mov ecx,[ebp-12] (name)               ;#004661F3: 213115 F4                  uv 02 20  1 1354      
    cmp ecx,h4                            ;#004661F6: 201371 00000040            uv 00 02  1 1355 02   
    jl #00466205                          ;#004661FC: 174 07                     v  00 00  1 1355      
    cmp byte[ebx+ecx*4-1],#12             ;#004661FE: 200174213 FF 12            u  00 0A  2 1356      
    jne #0046622F                         ;#00466203: 165 2A                     v  00 00  1 1357      
;  2827                     --DEV/SUG unnamed index temps -> ioob??? (see e01tcf)
;  2828 --30/4/24 (assume"")
;  2829 --                  name = sprintf("???(symtab[%d][S_name]=%d)",{varno,si})
;  2830                     name = "subscript"
    mov eax,[#004028D4]                   ;#00466205: 241 D4284000               uv 01 00  1 1358      
    cmp eax,h4                            ;#0046620A: 075 00000040               uv 00 01  1 1359 01   
    jl #00466216                          ;#0046620F: 174 05                     v  00 00  1 1359      
    add dword[ebx+eax*4-8],1              ;#00466211: 203104203 F8 01            u  00 09  3 1360      
    mov [ebp-12] (name),eax               ;#00466216: 211105 F4                  vu 00 21  1 1362      
    cmp ecx,h4                            ;#00466219: 201371 00000040            uv 00 02  1 1363      
    jle #0046622F                         ;#0046621F: 176 0E                     v  00 00  1 1363      
    sub dword[ebx+ecx*4-8],1              ;#00466221: 203154213 F8 01            u  00 0A  3 1364      
    jne #0046622F                         ;#00466226: 165 07                     v  00 00  1 1366      
    mov edx,ecx                           ;#00466228: 211312                     uv 04 02  1 1367      
    call #004639A8 (:%pDealloc)           ;#0046622A: 350 79D7FFFF               v  00 00  1 1367      
;  2831                 end if
;  2832                 sNTyp = si[S_NTyp]
    mov edi,2                             ;#0046622F: 277 02000000               uv 80 00  1 1368      
    lea ecx,[ebp-32] (sNTyp)              ;#00466234: 215115 E0                  vu 02 20  1 1368      
    mov esi,[ebp-4] (si)                  ;#00466237: 213165 FC                  uv 40 20  1 1369      
    mov edx,1310                          ;#0046623A: 272 1E050000               vu 04 00  1 1369      
    call #0046106B (:%pSubse1i)           ;#0046623F: 350 27AEFFFF               v  00 00  1 1370      
;  2833                 if sNTyp!=S_GVar2
    cmp eax,2                             ;#00466244: 203370 02                  uv 00 01  1 1371      
    je #004662A5                          ;#00466247: 164 5C                     v  00 00  1 1371      
;  2834                 and sNTyp!=S_TVar3 then
    cmp eax,3                             ;#00466249: 203370 03                  uv 00 01  1 1372      
    je #004662A5                          ;#0046624C: 164 57                     v  00 00  1 1372      
;  2835                     o = sprintf("???(symtab[%d] wrong type)",varno)
    mov ecx,2                             ;#0046624E: 271 02000000               uv 02 00  1 1373      
    mov edx,210                           ;#00466253: 272 D2000000               vu 04 00  1 1373      
    call #00462C02 (:%opFrame) (sprintf)  ;#00466258: 350 A5C9FFFF               v  00 00  1 1374      
    mov edi,[#004028D8]                   ;#0046625D: 213075 D8284000            uv 80 00  1 1375      
    mov [ebp] (fmt),edi                   ;#00466263: 211175 00                  uv 00 A0  1 1376 80   
    add dword[ebx+edi*4-8],1              ;#00466266: 203104273 F8 01            u  00 88  3 1378    *80*
    mov edi,[ebp+20] (prevebp)            ;#0046626B: 213175 14                  vu 80 20  1 1380      
    mov eax,[edi-136]                     ;#0046626E: 213207 78FFFFFF            uv 01 80  1 1383    *80*
    mov [ebp-4] (args),eax                ;#00466274: 211105 FC                  uv 00 21  1 1384 01   
    mov [ebp+28] (retaddr),#00466283      ;#00466277: 307105 1C 83624600         vu 00 20  1 1384      
    jmp #00454E9A (code:sprintf)          ;#0046627E: 351 17ECFEFF               v  00 00  1 1385      
    push eax                              ;#00466283: 120                        uv 00 01  1 1386      
    mov ecx,[ebp-16] (o)                  ;#00466284: 213115 F0                  vu 02 20  1 1386      
    cmp ecx,h4                            ;#00466287: 201371 00000040            uv 00 02  1 1387      
    jle #0046629D                         ;#0046628D: 176 0E                     v  00 00  1 1387      
    sub dword[ebx+ecx*4-8],1              ;#0046628F: 203154213 F8 01            u  00 0A  3 1388      
    jne #0046629D                         ;#00466294: 165 07                     v  00 00  1 1390      
    mov edx,ecx                           ;#00466296: 213321                     uv 04 02  1 1391      
    call #004639A8 (:%pDealloc)           ;#00466298: 350 0BD7FFFF               v  00 00  1 1391      
    pop dword[ebp-16] (o)                 ;#0046629D: 217105 F0                  np 00 20  3 1392      
    jmp #00466608                         ;#004662A0: 351 63030000               v  00 00  1 1395      
;  2836                 else
;  2837                     if sNTyp=S_GVar2 then
    cmp eax,2                             ;#004662A5: 203370 02                  uv 00 01  1 1396      
    jne #0046638F                         ;#004662A8: 017205 E1000000            v  00 00  1 1396      
;  2838                         {novalue,o} = getGvarValue(si[S_Slink])
    mov edi,6                             ;#004662AE: 277 06000000               uv 80 00  1 1397      
    lea ecx,[ebp-216] (symtab[1500])      ;#004662B3: 215215 28FFFFFF            vu 02 20  1 1397      
    mov esi,[ebp-4] (si)                  ;#004662B9: 213165 FC                  uv 40 20  1 1398      
    mov edx,1310                          ;#004662BC: 272 1E050000               vu 04 00  1 1398      
    mov al,0                              ;#004662C1: 260 00                     uv 01 00  1 1399      
    call #00460FE5 (:%pSubse1)            ;#004662C3: 350 1DADFFFF               v  00 00  1 1399      
    mov ecx,4                             ;#004662C8: 271 04000000               uv 02 00  1 1400      
    mov edx,1250                          ;#004662CD: 272 E2040000               vu 04 00  1 1400      
    call :%opFrame (getGvarValue)         ;#004662D2: 350 2BC9FFFF               v  00 00  1 1401      
    mov edi,[ebp+20] (prevebp)            ;#004662D7: 213175 14                  uv 80 20  1 1402      
    mov eax,[edi-216]                     ;#004662DA: 213207 28FFFFFF            uv 01 80  1 1405 80 *80*
    mov [edi-216], dword h4               ;#004662E0: 307207 28FFFFFF 00000040   vu 00 80  1 1405      
    cmp eax,h4                            ;#004662EA: 075 00000040               uv 00 01  1 1406      
    jne #004662FB                         ;#004662EF: 165 0A                     v  00 00  1 1406      
    mov esi,1500                          ;#004662F1: 276 DC050000               uv 40 00  1 1407      
    call #00462744 (:%pUnassigned)        ;#004662F6: 350 49C4FFFF               v  00 00  1 1407      
    mov [ebp] (gidx),eax                  ;#004662FB: 211105 00                  uv 00 21  1 1408      
    mov [ebp+28] (retaddr),#0046630A      ;#004662FE: 307105 1C 0A634600         vu 00 20  1 1408      
    jmp #0046C721 (code:getGvarValue)     ;#00466305: 351 17640000               v  00 00  1 1409      
    push eax                              ;#0046630A: 120                        uv 00 01  1 1410      
    mov edi,[ebp-184] (symtab[1491])      ;#0046630B: 213275 48FFFFFF            vu 80 20  1 1410      
    cmp edi,h4                            ;#00466311: 201377 00000040            uv 00 80  1 1411      
    jle #00466327                         ;#00466317: 176 0E                     v  00 00  1 1411      
    sub dword[ebx+edi*4-8],1              ;#00466319: 203154273 F8 01            u  00 88  3 1412      
    jne #00466327                         ;#0046631E: 165 07                     v  00 00  1 1414      
    mov edx,edi                           ;#00466320: 213327                     uv 04 80  1 1415      
    call #004639A8 (:%pDealloc)           ;#00466322: 350 81D6FFFF               v  00 00  1 1415      
    pop dword[ebp-184] (symtab[1491])     ;#00466327: 217205 48FFFFFF            np 00 20  3 1416      
    mov edi,2                             ;#0046632D: 277 02000000               uv 80 00  1 1419      
    lea ecx,[ebp-16] (o)                  ;#00466332: 215115 F0                  vu 02 20  1 1419      
    mov esi,[ebp-184] (symtab[1491])      ;#00466335: 213265 48FFFFFF            uv 40 20  1 1420      
    mov edx,1491                          ;#0046633B: 272 D3050000               vu 04 00  1 1420      
    mov al,0                              ;#00466340: 260 00                     uv 01 00  1 1421      
    call #00460FE5 (:%pSubse1)            ;#00466342: 350 9EACFFFF               v  00 00  1 1421      
    mov edi,1                             ;#00466347: 277 01000000               uv 80 00  1 1422      
    lea ecx,[ebp-140] (novalue)           ;#0046634C: 215215 74FFFFFF            vu 02 20  1 1422      
    mov esi,[ebp-184] (symtab[1491])      ;#00466352: 213265 48FFFFFF            uv 40 20  1 1423      
    mov edx,1491                          ;#00466358: 272 D3050000               vu 04 00  1 1423      
    call #0046106B (:%pSubse1i)           ;#0046635D: 350 09ADFFFF               v  00 00  1 1424      
    mov edx,[ebp-184] (symtab[1491])      ;#00466362: 213225 48FFFFFF            uv 04 20  1 1425      
    cmp edx,h4                            ;#00466368: 201372 00000040            uv 00 04  1 1426 04   
    mov [ebp-184] (symtab[1491]),ebx      ;#0046636E: 211235 48FFFFFF            vu 00 28  1 1426      
    jle #0046646C                         ;#00466374: 017216 F2000000            v  00 00  1 1427      
    sub dword[ebx+edx*4-8],1              ;#0046637A: 203154223 F8 01            u  00 0C  3 1428      
    jne #0046646C                         ;#0046637F: 017205 E7000000            v  00 00  1 1430      
    call #004639A8 (:%pDealloc)           ;#00466385: 350 1ED6FFFF               v  00 00  1 1431      
    jmp #0046646C                         ;#0046638A: 351 DD000000               v  00 00  1 1432      
;  2839                     elsif sNTyp=S_TVar3 then
    cmp eax,3                             ;#0046638F: 203370 03                  uv 00 01  1 1433      
    jne #0046646C                         ;#00466392: 017205 D4000000            v  00 00  1 1433      
;  2840                         {novalue,o} = getTvarValue(si[S_Tidx])
    mov edi,9                             ;#00466398: 277 09000000               uv 80 00  1 1434      
    lea ecx,[ebp-216] (symtab[1500])      ;#0046639D: 215215 28FFFFFF            vu 02 20  1 1434      
    mov esi,[ebp-4] (si)                  ;#004663A3: 213165 FC                  uv 40 20  1 1435      
    mov edx,1310                          ;#004663A6: 272 1E050000               vu 04 00  1 1435      
    mov al,0                              ;#004663AB: 260 00                     uv 01 00  1 1436      
    call #00460FE5 (:%pSubse1)            ;#004663AD: 350 33ACFFFF               v  00 00  1 1436      
    mov ecx,4                             ;#004663B2: 271 04000000               uv 02 00  1 1437      
    mov edx,1256                          ;#004663B7: 272 E8040000               vu 04 00  1 1437      
    call :%opFrame (getTvarValue)         ;#004663BC: 350 41C8FFFF               v  00 00  1 1438      
    mov edi,[ebp+20] (prevebp)            ;#004663C1: 213175 14                  uv 80 20  1 1439      
    mov eax,[edi-216]                     ;#004663C4: 213207 28FFFFFF            uv 01 80  1 1442 80 *80*
    mov [edi-216], dword h4               ;#004663CA: 307207 28FFFFFF 00000040   vu 00 80  1 1442      
    cmp eax,h4                            ;#004663D4: 075 00000040               uv 00 01  1 1443      
    jne #004663E5                         ;#004663D9: 165 0A                     v  00 00  1 1443      
    mov esi,1500                          ;#004663DB: 276 DC050000               uv 40 00  1 1444      
    call #00462744 (:%pUnassigned)        ;#004663E0: 350 5FC3FFFF               v  00 00  1 1444      
    mov [ebp] (tidx),eax                  ;#004663E5: 211105 00                  uv 00 21  1 1445      
    mov [ebp+28] (retaddr),#004663F4      ;#004663E8: 307105 1C F4634600         vu 00 20  1 1445      
    jmp #0046C60C (code:getTvarValue)     ;#004663EF: 351 18620000               v  00 00  1 1446      
    push eax                              ;#004663F4: 120                        uv 00 01  1 1447      
    mov ecx,[ebp-228] (symtab[1523])      ;#004663F5: 213215 1CFFFFFF            vu 02 20  1 1447      
    cmp ecx,h4                            ;#004663FB: 201371 00000040            uv 00 02  1 1448      
    jle #00466411                         ;#00466401: 176 0E                     v  00 00  1 1448      
    sub dword[ebx+ecx*4-8],1              ;#00466403: 203154213 F8 01            u  00 0A  3 1449      
    jne #00466411                         ;#00466408: 165 07                     v  00 00  1 1451      
    mov edx,ecx                           ;#0046640A: 213321                     uv 04 02  1 1452      
    call #004639A8 (:%pDealloc)           ;#0046640C: 350 97D5FFFF               v  00 00  1 1452      
    pop dword[ebp-228] (symtab[1523])     ;#00466411: 217205 1CFFFFFF            np 00 20  3 1453      
    mov edi,2                             ;#00466417: 277 02000000               uv 80 00  1 1456      
    lea ecx,[ebp-16] (o)                  ;#0046641C: 215115 F0                  vu 02 20  1 1456      
    mov esi,[ebp-228] (symtab[1523])      ;#0046641F: 213265 1CFFFFFF            uv 40 20  1 1457      
    mov edx,1523                          ;#00466425: 272 F3050000               vu 04 00  1 1457      
    mov al,0                              ;#0046642A: 260 00                     uv 01 00  1 1458      
    call #00460FE5 (:%pSubse1)            ;#0046642C: 350 B4ABFFFF               v  00 00  1 1458      
    mov edi,1                             ;#00466431: 277 01000000               uv 80 00  1 1459      
    lea ecx,[ebp-140] (novalue)           ;#00466436: 215215 74FFFFFF            vu 02 20  1 1459      
    mov esi,[ebp-228] (symtab[1523])      ;#0046643C: 213265 1CFFFFFF            uv 40 20  1 1460      
    mov edx,1523                          ;#00466442: 272 F3050000               vu 04 00  1 1460      
    call #0046106B (:%pSubse1i)           ;#00466447: 350 1FACFFFF               v  00 00  1 1461      
    mov edx,[ebp-228] (symtab[1523])      ;#0046644C: 213225 1CFFFFFF            uv 04 20  1 1462      
    cmp edx,h4                            ;#00466452: 201372 00000040            uv 00 04  1 1463 04   
    mov [ebp-228] (symtab[1523]),ebx      ;#00466458: 211235 1CFFFFFF            vu 00 28  1 1463      
    jle #0046646C                         ;#0046645E: 176 0C                     v  00 00  1 1464      
    sub dword[ebx+edx*4-8],1              ;#00466460: 203154223 F8 01            u  00 0C  3 1465      
    jne #0046646C                         ;#00466465: 165 05                     v  00 00  1 1467      
    call #004639A8 (:%pDealloc)           ;#00466467: 350 3CD5FFFF               v  00 00  1 1468      
;  2841                     end if
;  2842                     if novalue then
    mov eax,[ebp-140] (novalue)           ;#0046646C: 213205 74FFFFFF            uv 01 20  1 1469      
    mov edx,1344                          ;#00466472: 272 40050000               vu 04 00  1 1469      
    call #0045F94C (:%opJif)              ;#00466477: 350 D094FFFF               v  00 00  1 1470      
    je #00466579                          ;#0046647C: 017204 F7000000            v  00 00  1 1471      
;  2843                         if novalue=1 then
    cmp eax,1                             ;#00466482: 203370 01                  uv 00 01  1 1472      
    jne #004664C1                         ;#00466485: 165 3A                     v  00 00  1 1472      
;  2844                             o = "<novalue>"
    mov edi,[#0040256C]                   ;#00466487: 213075 6C254000            uv 80 00  1 1473      
    mov edx,[ebp-16] (o)                  ;#0046648D: 213125 F0                  vu 04 20  1 1473      
    cmp edi,h4                            ;#00466490: 201377 00000040            uv 00 80  1 1474      
    jl #0046649D                          ;#00466496: 174 05                     v  00 00  1 1474      
    add dword[ebx+edi*4-8],1              ;#00466498: 203104273 F8 01            u  00 88  3 1475      
    mov [ebp-16] (o),edi                  ;#0046649D: 211175 F0                  vu 00 A0  1 1477      
    cmp edx,h4                            ;#004664A0: 201372 00000040            uv 00 04  1 1478      
    jle #00466608                         ;#004664A6: 017216 5C010000            v  00 00  1 1478      
    sub dword[ebx+edx*4-8],1              ;#004664AC: 203154223 F8 01            u  00 0C  3 1479      
    jne #00466608                         ;#004664B1: 017205 51010000            v  00 00  1 1481      
    call #004639A8 (:%pDealloc)           ;#004664B7: 350 ECD4FFFF               v  00 00  1 1482      
    jmp #00466608                         ;#004664BC: 351 47010000               v  00 00  1 1483      
;  2845                         elsif novalue=2 then
    cmp eax,2                             ;#004664C1: 203370 02                  uv 00 01  1 1484      
    jne #00466500                         ;#004664C4: 165 3A                     v  00 00  1 1484      
;  2846                             o = "*** INVALID REF ***"
    mov ecx,[#00402570]                   ;#004664C6: 213015 70254000            uv 02 00  1 1485      
    mov edx,[ebp-16] (o)                  ;#004664CC: 213125 F0                  vu 04 20  1 1485      
    cmp ecx,h4                            ;#004664CF: 201371 00000040            uv 00 02  1 1486      
    jl #004664DC                          ;#004664D5: 174 05                     v  00 00  1 1486      
    add dword[ebx+ecx*4-8],1              ;#004664D7: 203104213 F8 01            u  00 0A  3 1487      
    mov [ebp-16] (o),ecx                  ;#004664DC: 211115 F0                  vu 00 22  1 1489      
    cmp edx,h4                            ;#004664DF: 201372 00000040            uv 00 04  1 1490      
    jle #00466608                         ;#004664E5: 017216 1D010000            v  00 00  1 1490      
    sub dword[ebx+edx*4-8],1              ;#004664EB: 203154223 F8 01            u  00 0C  3 1491      
    jne #00466608                         ;#004664F0: 017205 12010000            v  00 00  1 1493      
    call #004639A8 (:%pDealloc)           ;#004664F6: 350 ADD4FFFF               v  00 00  1 1494      
    jmp #00466608                         ;#004664FB: 351 08010000               v  00 00  1 1495      
;  2847                         elsif novalue=3 then
    cmp eax,3                             ;#00466500: 203370 03                  uv 00 01  1 1496      
    jne #0046653F                         ;#00466503: 165 3A                     v  00 00  1 1496      
;  2848                             o = "*** CORRUPT TYPE BYTE ***"
    mov esi,[#00402574]                   ;#00466505: 213065 74254000            uv 40 00  1 1497      
    mov edx,[ebp-16] (o)                  ;#0046650B: 213125 F0                  vu 04 20  1 1497      
    cmp esi,h4                            ;#0046650E: 201376 00000040            uv 00 40  1 1498      
    jl #0046651B                          ;#00466514: 174 05                     v  00 00  1 1498      
    add dword[ebx+esi*4-8],1              ;#00466516: 203104263 F8 01            u  00 48  3 1499      
    mov [ebp-16] (o),esi                  ;#0046651B: 211165 F0                  vu 00 60  1 1501      
    cmp edx,h4                            ;#0046651E: 201372 00000040            uv 00 04  1 1502      
    jle #00466608                         ;#00466524: 017216 DE000000            v  00 00  1 1502      
    sub dword[ebx+edx*4-8],1              ;#0046652A: 203154223 F8 01            u  00 0C  3 1503      
    jne #00466608                         ;#0046652F: 017205 D3000000            v  00 00  1 1505      
    call #004639A8 (:%pDealloc)           ;#00466535: 350 6ED4FFFF               v  00 00  1 1506      
    jmp #00466608                         ;#0046653A: 351 C9000000               v  00 00  1 1507      
;  2849                         else
;  2850                             o = "*** INVALID ??? ***"
    mov edi,[#00402578]                   ;#0046653F: 213075 78254000            uv 80 00  1 1508      
    mov edx,[ebp-16] (o)                  ;#00466545: 213125 F0                  vu 04 20  1 1508      
    cmp edi,h4                            ;#00466548: 201377 00000040            uv 00 80  1 1509      
    jl #00466555                          ;#0046654E: 174 05                     v  00 00  1 1509      
    add dword[ebx+edi*4-8],1              ;#00466550: 203104273 F8 01            u  00 88  3 1510      
    mov [ebp-16] (o),edi                  ;#00466555: 211175 F0                  vu 00 A0  1 1512      
    cmp edx,h4                            ;#00466558: 201372 00000040            uv 00 04  1 1513      
    jle #00466608                         ;#0046655E: 017216 A4000000            v  00 00  1 1513      
    sub dword[ebx+edx*4-8],1              ;#00466564: 203154223 F8 01            u  00 0C  3 1514      
    jne #00466608                         ;#00466569: 017205 99000000            v  00 00  1 1516      
    call #004639A8 (:%pDealloc)           ;#0046656F: 350 34D4FFFF               v  00 00  1 1517      
;  2851                         end if
    jmp #00466608                         ;#00466574: 351 8F000000               v  00 00  1 1518      
;  2852                     else
;  2853 --8/2/24:
;  2854 --                      o = sprint(o,50-length(name))
;  2855                         o = sprint(o,maxlen:=50-length(name))
    lea edi,[ebp-224] (symtab[1509])      ;#00466579: 215275 20FFFFFF            uv 80 20  1 1519      
    mov esi,[ebp-12] (name)               ;#0046657F: 213165 F4                  vu 40 20  1 1519      
    mov edx,1312                          ;#00466582: 272 20050000               uv 04 00  1 1520      
    call #0045EFEC (:%opLen)              ;#00466587: 350 608AFFFF               v  00 00  1 1520      
    lea edi,[ebp-180] (symtab[1490])      ;#0046658C: 215275 4CFFFFFF            uv 80 20  1 1521      
    mov ecx,[#004028DC]                   ;#00466592: 213015 DC284000            vu 02 00  1 1521      
    mov eax,[ebp-224] (symtab[1509])      ;#00466598: 213205 20FFFFFF            uv 01 20  1 1522      
    call #0045F299 (:%opSub)              ;#0046659E: 350 F68CFFFF               v  00 00  1 1522      
    mov ecx,13                            ;#004665A3: 271 0D000000               uv 02 00  1 1523      
    mov edx,212                           ;#004665A8: 272 D4000000               vu 04 00  1 1523      
    call #00462C02 (:%opFrame) (sprint)   ;#004665AD: 350 50C6FFFF               v  00 00  1 1524      
    mov edi,[ebp+20] (prevebp)            ;#004665B2: 213175 14                  uv 80 20  1 1525      
    mov eax,[edi-16]                      ;#004665B5: 213107 F0                  uv 01 80  1 1528 80 *80*
    mov [edi-16], dword h4                ;#004665B8: 307107 F0 00000040         vu 00 80  1 1528      
    cmp eax,h4                            ;#004665BF: 075 00000040               uv 00 01  1 1529      
    jne #004665D0                         ;#004665C4: 165 0A                     v  00 00  1 1529      
    mov esi,1313                          ;#004665C6: 276 21050000               uv 40 00  1 1530      
    call #00462744 (:%pUnassigned)        ;#004665CB: 350 74C1FFFF               v  00 00  1 1530      
    mov [ebp] (x),eax                     ;#004665D0: 211105 00                  uv 00 21  1 1531      
    mov edi,[ebp+20] (prevebp)            ;#004665D3: 213175 14                  vu 80 20  1 1531      
    mov eax,[edi-180]                     ;#004665D6: 213207 4CFFFFFF            uv 01 80  1 1534    *80*
    mov [ebp-8] (maxlen),eax              ;#004665DC: 211105 F8                  uv 00 21  1 1535 01   
    mov [ebp+28] (retaddr),#004665EB      ;#004665DF: 307105 1C EB654600         vu 00 20  1 1535      
    jmp #0045471E (code:sprint)           ;#004665E6: 351 33E1FEFF               v  00 00  1 1536      
    push eax                              ;#004665EB: 120                        uv 00 01  1 1537      
    mov edi,[ebp-16] (o)                  ;#004665EC: 213175 F0                  vu 80 20  1 1537      
    cmp edi,h4                            ;#004665EF: 201377 00000040            uv 00 80  1 1538      
    jle #00466605                         ;#004665F5: 176 0E                     v  00 00  1 1538      
    sub dword[ebx+edi*4-8],1              ;#004665F7: 203154273 F8 01            u  00 88  3 1539      
    jne #00466605                         ;#004665FC: 165 07                     v  00 00  1 1541      
    mov edx,edi                           ;#004665FE: 213327                     uv 04 80  1 1542      
    call #004639A8 (:%pDealloc)           ;#00466600: 350 A3D3FFFF               v  00 00  1 1542      
    pop dword[ebp-16] (o)                 ;#00466605: 217105 F0                  np 00 20  3 1543      
;  2856                     end if
;  2857                 end if
;  2858             end if
;  2859         end if
;  2860 --      o = getValue(or_edi, 50, length(si)+17, 1)
;  2861         msg = sprintf(msg,{name,o})         -- "type check failure, %s is %s\n"
    lea eax,[ebp-232] (symtab[1525])      ;#00466608: 215205 18FFFFFF            uv 01 20  1 1546      
    mov edx,2                             ;#0046660E: 272 02000000               vu 04 00  1 1546      
    push #00466650                        ;#00466613: 150 50664600               uv 00 00  1 1547      
    push eax                              ;#00466618: 120                        vu 00 01  1 1547      
    mov esi,[ebp-16] (o)                  ;#00466619: 213165 F0                  uv 40 20  1 1548      
    cmp esi,h4                            ;#0046661C: 201376 00000040            uv 00 40  1 1549 40   
    jl #0046662E                          ;#00466622: 174 0A                     v  00 00  1 1549      
    add dword[ebx+esi*4-8],1              ;#00466624: 203104263 F8 01            u  00 48  3 1550      
    cmp eax,1313                          ;#00466629: 075 21050000               vu 00 01  1 1552      
    push esi                              ;#0046662E: 126                        uv 00 40  1 1553      
    mov ecx,[ebp-12] (name)               ;#0046662F: 213115 F4                  vu 02 20  1 1553      
    cmp ecx,h4                            ;#00466632: 201371 00000040            uv 00 02  1 1554      
    jl #00466644                          ;#00466638: 174 0A                     v  00 00  1 1554      
    add dword[ebx+ecx*4-8],1              ;#0046663A: 203104213 F8 01            u  00 0A  3 1555      
    cmp eax,1312                          ;#0046663F: 075 20050000               vu 00 01  1 1557      
    push ecx                              ;#00466644: 121                        uv 00 02  1 1558      
    mov edi,[ebp-232] (symtab[1525])      ;#00466645: 213275 18FFFFFF            vu 80 20  1 1558      
    jmp #00460143 (:%pMkSq)               ;#0046664B: 351 F39AFFFF               v  00 00  1 1559      
    mov ecx,2                             ;#00466650: 271 02000000               uv 02 00  1 1560      
    mov edx,210                           ;#00466655: 272 D2000000               vu 04 00  1 1560      
    call #00462C02 (:%opFrame) (sprintf)  ;#0046665A: 350 A3C5FFFF               v  00 00  1 1561      
    mov edi,[ebp+20] (prevebp)            ;#0046665F: 213175 14                  uv 80 20  1 1562      
    mov eax,[edi-52]                      ;#00466662: 213107 CC                  uv 01 80  1 1565 80 *80*
    mov [edi-52], dword h4                ;#00466665: 307107 CC 00000040         vu 00 80  1 1565      
    cmp eax,h4                            ;#0046666C: 075 00000040               uv 00 01  1 1566      
    jne #0046667D                         ;#00466671: 165 0A                     v  00 00  1 1566      
    mov esi,1322                          ;#00466673: 276 2A050000               uv 40 00  1 1567      
    call #00462744 (:%pUnassigned)        ;#00466678: 350 C7C0FFFF               v  00 00  1 1567      
    mov [ebp] (fmt),eax                   ;#0046667D: 211105 00                  uv 00 21  1 1568      
    mov edi,[ebp+20] (prevebp)            ;#00466680: 213175 14                  vu 80 20  1 1568      
    mov eax,[edi-232]                     ;#00466683: 213207 18FFFFFF            uv 01 80  1 1571    *80*
    mov [edi-232], dword h4               ;#00466689: 307207 18FFFFFF 00000040   vu 00 80  1 1571      
    cmp eax,h4                            ;#00466693: 075 00000040               uv 00 01  1 1572      
    jne #004666A4                         ;#00466698: 165 0A                     v  00 00  1 1572      
    mov esi,1525                          ;#0046669A: 276 F5050000               uv 40 00  1 1573      
    call #00462744 (:%pUnassigned)        ;#0046669F: 350 A0C0FFFF               v  00 00  1 1573      
    mov [ebp-4] (args),eax                ;#004666A4: 211105 FC                  uv 00 21  1 1574      
    mov [ebp+28] (retaddr),#004666B3      ;#004666A7: 307105 1C B3664600         vu 00 20  1 1574      
    jmp #00454E9A (code:sprintf)          ;#004666AE: 351 E7E7FEFF               v  00 00  1 1575      
    push eax                              ;#004666B3: 120                        uv 00 01  1 1576      
    mov esi,[ebp-52] (msg)                ;#004666B4: 213165 CC                  vu 40 20  1 1576      
    cmp esi,h4                            ;#004666B7: 201376 00000040            uv 00 40  1 1577      
    jle #004666CD                         ;#004666BD: 176 0E                     v  00 00  1 1577      
    sub dword[ebx+esi*4-8],1              ;#004666BF: 203154263 F8 01            u  00 48  3 1578      
    jne #004666CD                         ;#004666C4: 165 07                     v  00 00  1 1580      
    mov edx,esi                           ;#004666C6: 213326                     uv 04 40  1 1581      
    call #004639A8 (:%pDealloc)           ;#004666C8: 350 DBD2FFFF               v  00 00  1 1581      
    pop dword[ebp-52] (msg)               ;#004666CD: 217105 CC                  np 00 20  3 1582      
    jmp #0046813B                         ;#004666D0: 351 661A0000               v  00 00  1 1585      
;  2862     elsif msg_id=91         -- e92vhnbaav(ecx)
;  2863        or msg_id=92         -- e92vhnbaav(esi)
;  2864        or msg_id=93         -- e93vhnbaav(edi)
;  2865        or msg_id=94 then    -- e94vhnbaav(edx,esi)
;  2866 --      -- varno in or_edx
;  2867 --      if or_edx<1 or or_edx>length(symtab) then
;  2868 --          si = sprintf("???(varno=%d)",or_edx)
;  2869 --      else
;  2870 --          si = symtab[or_edx]
;  2871 --          if atom(si) then
;  2872 --              si = sprintf("???(atom(symtab[%d]))",or_edx)
;  2873 --          else
;  2874 --              si = symtab[or_edx][S_Name]
;  2875 --              if atom(si) then
;  2876 --                  si = sprintf("???(symtab[%d][S_name]=%d)",{or_edx,si})
;  2877 --              end if
;  2878 --          end if
;  2879 --      end if
;  2880         if msg_id=94 then
    cmp esi,94                            ;#004666D5: 203376 5E                  uv 00 40  1 1586      
    jne #00466731                         ;#004666D8: 165 57                     v  00 00  1 1586      
;  2881 --DEV if integer(esi) ain't it supposed to become e04atsaa? (done in AddressMapping for one of them...)
;  2882 --          if integer(or_esi) then
;  2883 --!             msg_id = 4
;  2884 --          end if
;  2885             or_esi = or_edx
    mov ecx,[#00402614] (or_edx)          ;#004666DA: 213015 14264000            uv 02 00  1 1587      
    cmp ecx,h4                            ;#004666E0: 201371 00000040            uv 00 02  1 1588 02   
    jne #004666F2                         ;#004666E6: 165 0A                     v  00 00  1 1588      
    mov esi,1245                          ;#004666E8: 276 DD040000               uv 40 00  1 1589      
    call #00462744 (:%pUnassigned)        ;#004666ED: 350 52C0FFFF               v  00 00  1 1589      
    mov edx,[#00402618] (or_esi)          ;#004666F2: 213025 18264000            uv 04 00  1 1590      
    cmp ecx,h4                            ;#004666F8: 201371 00000040            vu 00 02  1 1590      
    jl #0046670A                          ;#004666FE: 174 0A                     v  00 00  1 1591      
    add dword[ebx+ecx*4-8],1              ;#00466700: 203104213 F8 01            u  00 0A  3 1592      
    cmp eax,1245                          ;#00466705: 075 DD040000               vu 00 01  1 1594      
    mov [#00402618] (or_esi),ecx          ;#0046670A: 211015 18264000            uv 00 02  1 1595      
    cmp edx,h4                            ;#00466710: 201372 00000040            vu 00 04  1 1595      
    jle #00466824                         ;#00466716: 017216 08010000            v  00 00  1 1596      
    sub dword[ebx+edx*4-8],1              ;#0046671C: 203154223 F8 01            u  00 0C  3 1597      
    jne #00466824                         ;#00466721: 017205 FD000000            v  00 00  1 1599      
    call #004639A8 (:%pDealloc)           ;#00466727: 350 7CD2FFFF               v  00 00  1 1600      
;  2886 --?{65,or_esi}
    jmp #00466824                         ;#0046672C: 351 F3000000               v  00 00  1 1601      
;  2887         elsif msg_id=91 then
    cmp esi,91                            ;#00466731: 203376 5B                  uv 00 40  1 1602      
    jne #0046678D                         ;#00466734: 165 57                     v  00 00  1 1602      
;  2888             or_esi = or_ecx
    mov edi,[#0040260C] (or_ecx)          ;#00466736: 213075 0C264000            uv 80 00  1 1603      
    cmp edi,h4                            ;#0046673C: 201377 00000040            uv 00 80  1 1604 80   
    jne #0046674E                         ;#00466742: 165 0A                     v  00 00  1 1604      
    mov esi,1243                          ;#00466744: 276 DB040000               uv 40 00  1 1605      
    call #00462744 (:%pUnassigned)        ;#00466749: 350 F6BFFFFF               v  00 00  1 1605      
    mov edx,[#00402618] (or_esi)          ;#0046674E: 213025 18264000            uv 04 00  1 1606      
    cmp edi,h4                            ;#00466754: 201377 00000040            vu 00 80  1 1606      
    jl #00466766                          ;#0046675A: 174 0A                     v  00 00  1 1607      
    add dword[ebx+edi*4-8],1              ;#0046675C: 203104273 F8 01            u  00 88  3 1608      
    cmp eax,1243                          ;#00466761: 075 DB040000               vu 00 01  1 1610      
    mov [#00402618] (or_esi),edi          ;#00466766: 211075 18264000            uv 00 80  1 1611      
    cmp edx,h4                            ;#0046676C: 201372 00000040            vu 00 04  1 1611      
    jle #00466824                         ;#00466772: 017216 AC000000            v  00 00  1 1612      
    sub dword[ebx+edx*4-8],1              ;#00466778: 203154223 F8 01            u  00 0C  3 1613      
    jne #00466824                         ;#0046677D: 017205 A1000000            v  00 00  1 1615      
    call #004639A8 (:%pDealloc)           ;#00466783: 350 20D2FFFF               v  00 00  1 1616      
    jmp #00466824                         ;#00466788: 351 97000000               v  00 00  1 1617      
;  2889         elsif msg_id=93 then
    cmp esi,93                            ;#0046678D: 203376 5D                  uv 00 40  1 1618      
    jne #00466824                         ;#00466790: 017205 8E000000            v  00 00  1 1618      
;  2890             or_esi = varIdx(or_edi,rid,symtab)
    mov ecx,14                            ;#00466796: 271 0E000000               uv 02 00  1 1619      
    mov edx,1264                          ;#0046679B: 272 F0040000               vu 04 00  1 1619      
    call #00462C02 (:%opFrame) (varIdx)   ;#004667A0: 350 5DC4FFFF               v  00 00  1 1620      
    mov eax,[#0040261C] (or_edi)          ;#004667A5: 241 1C264000               uv 01 00  1 1621      
    mov [ebp] (addr),eax                  ;#004667AA: 211105 00                  uv 00 21  1 1622 01   
    cmp eax,h4                            ;#004667AD: 075 00000040               vu 00 01  1 1622      
    jl #004667BE                          ;#004667B2: 174 0A                     v  00 00  1 1623      
    add dword[ebx+eax*4-8],1              ;#004667B4: 203104203 F8 01            u  00 09  3 1624      
    cmp eax,1247                          ;#004667B9: 075 DF040000               vu 00 01  1 1626      
    mov edi,[ebp+20] (prevebp)            ;#004667BE: 213175 14                  uv 80 20  1 1627      
    mov eax,[edi-84]                      ;#004667C1: 213107 AC                  uv 01 80  1 1630 80 *80*
    xor ebx,ebx                           ;#004667C4: 061333                     vu 08 08  1 1630      
    cmp eax,h4                            ;#004667C6: 075 00000040               uv 00 01  1 1631      
    jl #004667D7                          ;#004667CB: 174 0A                     v  00 00  1 1631      
    add dword[ebx+eax*4-8],1              ;#004667CD: 203104203 F8 01            u  00 09  3 1632      
    cmp eax,1330                          ;#004667D2: 075 32050000               vu 00 01  1 1634      
    mov [ebp-4] (rid),eax                 ;#004667D7: 211105 FC                  uv 00 21  1 1635      
    mov edi,[ebp+20] (prevebp)            ;#004667DA: 213175 14                  vu 80 20  1 1635      
    mov eax,[edi]                         ;#004667DD: 213007                     uv 01 80  1 1638    *80*
    xor ebx,ebx                           ;#004667DF: 061333                     vu 08 08  1 1638      
    cmp eax,h4                            ;#004667E1: 075 00000040               uv 00 01  1 1639      
    jl #004667F2                          ;#004667E6: 174 0A                     v  00 00  1 1639      
    add dword[ebx+eax*4-8],1              ;#004667E8: 203104203 F8 01            u  00 09  3 1640      
    cmp eax,1309                          ;#004667ED: 075 1D050000               vu 00 01  1 1642      
    mov [ebp-8] (symtab),eax              ;#004667F2: 211105 F8                  uv 00 21  1 1643      
    mov [ebp+28] (retaddr),#00466801      ;#004667F5: 307105 1C 01684600         vu 00 20  1 1643      
    jmp #0046C837 (code:varIdx)           ;#004667FC: 351 36600000               v  00 00  1 1644      
    push eax                              ;#00466801: 120                        uv 00 01  1 1645      
    mov ecx,[#00402618] (or_esi)          ;#00466802: 213015 18264000            vu 02 00  1 1645      
    cmp ecx,h4                            ;#00466808: 201371 00000040            uv 00 02  1 1646      
    jle #0046681E                         ;#0046680E: 176 0E                     v  00 00  1 1646      
    sub dword[ebx+ecx*4-8],1              ;#00466810: 203154213 F8 01            u  00 0A  3 1647      
    jne #0046681E                         ;#00466815: 165 07                     v  00 00  1 1649      
    mov edx,ecx                           ;#00466817: 213321                     uv 04 02  1 1650      
    call #004639A8 (:%pDealloc)           ;#00466819: 350 8AD1FFFF               v  00 00  1 1650      
    pop [#00402618] (or_esi)              ;#0046681E: 217005 18264000            np 00 00  3 1651      
;  2891         end if
;  2892         -- varno in or_esi
;  2893         if or_esi<1 or or_esi>length(symtab) then
    mov edi,1                             ;#00466824: 277 01000000               uv 80 00  1 1654      
    mov eax,[#00402618] (or_esi)          ;#00466829: 241 18264000               vu 01 00  1 1654      
    mov esi,26                            ;#0046682E: 276 1A000000               uv 40 00  1 1655      
    mov edx,1246                          ;#00466833: 272 DE040000               vu 04 00  1 1655      
    call #0045F8B0 (:%opJcc)              ;#00466838: 350 7390FFFF               v  00 00  1 1656      
    jl #0046686A                          ;#0046683D: 174 2B                     v  00 00  1 1657      
    lea edi,[ebp-224] (symtab[1509])      ;#0046683F: 215275 20FFFFFF            uv 80 20  1 1658      
    mov esi,[ebp] (symtab)                ;#00466845: 213165 00                  vu 40 20  1 1658      
    mov edx,1309                          ;#00466848: 272 1D050000               uv 04 00  1 1659      
    call #0045EFEC (:%opLen)              ;#0046684D: 350 9A87FFFF               v  00 00  1 1659      
    mov edi,ecx                           ;#00466852: 211317                     uv 80 02  1 1660      
    mov eax,[#00402618] (or_esi)          ;#00466854: 241 18264000               vu 01 00  1 1660      
    mov esi,1509                          ;#00466859: 276 E5050000               uv 40 00  1 1661      
    mov edx,1246                          ;#0046685E: 272 DE040000               vu 04 00  1 1661      
    call #0045F8B0 (:%opJcc)              ;#00466863: 350 4890FFFF               v  00 00  1 1662      
    jle #004668CB                         ;#00466868: 176 61                     v  00 00  1 1663      
;  2894             si = sprintf("???(varno=%d)",or_esi)
    mov ecx,2                             ;#0046686A: 271 02000000               uv 02 00  1 1664      
    mov edx,210                           ;#0046686F: 272 D2000000               vu 04 00  1 1664      
    call #00462C02 (:%opFrame) (sprintf)  ;#00466874: 350 89C3FFFF               v  00 00  1 1665      
    mov edi,[#004028E4]                   ;#00466879: 213075 E4284000            uv 80 00  1 1666      
    mov [ebp] (fmt),edi                   ;#0046687F: 211175 00                  uv 00 A0  1 1667 80   
    add dword[ebx+edi*4-8],1              ;#00466882: 203104273 F8 01            u  00 88  3 1669    *80*
    mov esi,[#00402618] (or_esi)          ;#00466887: 213065 18264000            vu 40 00  1 1671      
    mov [ebp-4] (args),esi                ;#0046688D: 211165 FC                  uv 00 60  1 1672      
    cmp esi,h4                            ;#00466890: 201376 00000040            vu 00 40  1 1672      
    jl #0046689D                          ;#00466896: 174 05                     v  00 00  1 1673      
    add dword[ebx+esi*4-8],1              ;#00466898: 203104263 F8 01            u  00 48  3 1674      
    mov [ebp+28] (retaddr),#004668A9      ;#0046689D: 307105 1C A9684600         vu 00 20  1 1676      
    jmp #00454E9A (code:sprintf)          ;#004668A4: 351 F1E5FEFF               v  00 00  1 1677      
    push eax                              ;#004668A9: 120                        uv 00 01  1 1678      
    mov ecx,[ebp-4] (si)                  ;#004668AA: 213115 FC                  vu 02 20  1 1678      
    cmp ecx,h4                            ;#004668AD: 201371 00000040            uv 00 02  1 1679      
    jle #004668C3                         ;#004668B3: 176 0E                     v  00 00  1 1679      
    sub dword[ebx+ecx*4-8],1              ;#004668B5: 203154213 F8 01            u  00 0A  3 1680      
    jne #004668C3                         ;#004668BA: 165 07                     v  00 00  1 1682      
    mov edx,ecx                           ;#004668BC: 213321                     uv 04 02  1 1683      
    call #004639A8 (:%pDealloc)           ;#004668BE: 350 E5D0FFFF               v  00 00  1 1683      
    pop dword[ebp-4] (si)                 ;#004668C3: 217105 FC                  np 00 20  3 1684      
    jmp #00466A5D                         ;#004668C6: 351 92010000               v  00 00  1 1687      
;  2895         else
;  2896             si = symtab[or_esi]
    mov eax,[ebp] (symtab)                ;#004668CB: 213105 00                  uv 01 20  1 1688      
    cmp eax,h4                            ;#004668CE: 075 00000040               uv 00 01  1 1689 01   
    jne #004668DF                         ;#004668D3: 165 0A                     v  00 00  1 1689      
    mov esi,1309                          ;#004668D5: 276 1D050000               uv 40 00  1 1690      
    call #00462744 (:%pUnassigned)        ;#004668DA: 350 65BEFFFF               v  00 00  1 1690      
    mov edi,[#00402618] (or_esi)          ;#004668DF: 213075 18264000            uv 80 00  1 1691      
    cmp edi,h4                            ;#004668E5: 201377 00000040            uv 00 80  1 1692 80   
    jne #004668F7                         ;#004668EB: 165 0A                     v  00 00  1 1692      
    mov esi,1246                          ;#004668ED: 276 DE040000               uv 40 00  1 1693      
    call #00462744 (:%pUnassigned)        ;#004668F2: 350 4DBEFFFF               v  00 00  1 1693      
    lea ecx,[ebp-4] (si)                  ;#004668F7: 215115 FC                  uv 02 20  1 1694      
    mov esi,eax                           ;#004668FA: 211306                     vu 40 01  1 1694      
    mov edx,1309                          ;#004668FC: 272 1D050000               uv 04 00  1 1695      
    mov al,0                              ;#00466901: 260 00                     vu 01 00  1 1695      
    call #00460FE5 (:%pSubse1)            ;#00466903: 350 DDA6FFFF               v  00 00  1 1696      
;  2897             if atom(si) then
    mov esi,[ebp-4] (si)                  ;#00466908: 213165 FC                  uv 40 20  1 1697      
    cmp esi,h4                            ;#0046690B: 201376 00000040            uv 00 40  1 1698 40   
    jl #0046691A                          ;#00466911: 174 07                     v  00 00  1 1698      
    cmp byte[ebx+esi*4-1],#12             ;#00466913: 200174263 FF 12            u  00 48  2 1699      
    jne #0046697F                         ;#00466918: 165 65                     v  00 00  1 1700      
;  2898                 si = sprintf("???(atom(symtab[%d]))",or_esi)
    mov ecx,2                             ;#0046691A: 271 02000000               uv 02 00  1 1701      
    mov edx,210                           ;#0046691F: 272 D2000000               vu 04 00  1 1701      
    call #00462C02 (:%opFrame) (sprintf)  ;#00466924: 350 D9C2FFFF               v  00 00  1 1702      
    mov ecx,[#004028D0]                   ;#00466929: 213015 D0284000            uv 02 00  1 1703      
    mov [ebp] (fmt),ecx                   ;#0046692F: 211115 00                  uv 00 22  1 1704 02   
    add dword[ebx+ecx*4-8],1              ;#00466932: 203104213 F8 01            u  00 0A  3 1706    *02*
    mov edi,[#00402618] (or_esi)          ;#00466937: 213075 18264000            vu 80 00  1 1708      
    mov [ebp-4] (args),edi                ;#0046693D: 211175 FC                  uv 00 A0  1 1709      
    cmp edi,h4                            ;#00466940: 201377 00000040            vu 00 80  1 1709      
    jl #00466952                          ;#00466946: 174 0A                     v  00 00  1 1710      
    add dword[ebx+edi*4-8],1              ;#00466948: 203104273 F8 01            u  00 88  3 1711      
    cmp eax,1246                          ;#0046694D: 075 DE040000               vu 00 01  1 1713      
    mov [ebp+28] (retaddr),#0046695E      ;#00466952: 307105 1C 5E694600         uv 00 20  1 1714      
    jmp #00454E9A (code:sprintf)          ;#00466959: 351 3CE5FEFF               v  00 00  1 1714      
    push eax                              ;#0046695E: 120                        uv 00 01  1 1715      
    mov eax,[ebp-4] (si)                  ;#0046695F: 213105 FC                  vu 01 20  1 1715      
    cmp eax,h4                            ;#00466962: 075 00000040               uv 00 01  1 1716      
    jle #00466977                         ;#00466967: 176 0E                     v  00 00  1 1716      
    sub dword[ebx+eax*4-8],1              ;#00466969: 203154203 F8 01            u  00 09  3 1717      
    jne #00466977                         ;#0046696E: 165 07                     v  00 00  1 1719      
    mov edx,eax                           ;#00466970: 213320                     uv 04 01  1 1720      
    call #004639A8 (:%pDealloc)           ;#00466972: 350 31D0FFFF               v  00 00  1 1720      
    pop dword[ebp-4] (si)                 ;#00466977: 217105 FC                  np 00 20  3 1721      
    jmp #00466A5D                         ;#0046697A: 351 DE000000               v  00 00  1 1724      
;  2899             else
;  2900                 si = si[S_Name]
    mov edi,1                             ;#0046697F: 277 01000000               uv 80 00  1 1725      
    lea ecx,[ebp-4] (si)                  ;#00466984: 215115 FC                  vu 02 20  1 1725      
    mov edx,1310                          ;#00466987: 272 1E050000               uv 04 00  1 1726      
    mov al,0                              ;#0046698C: 260 00                     vu 01 00  1 1726      
    call #00460FE5 (:%pSubse1)            ;#0046698E: 350 52A6FFFF               v  00 00  1 1727      
;  2901                 if atom(si) then
    mov ecx,[ebp-4] (si)                  ;#00466993: 213115 FC                  uv 02 20  1 1728      
    cmp ecx,h4                            ;#00466996: 201371 00000040            uv 00 02  1 1729 02   
    jl #004669A9                          ;#0046699C: 174 0B                     v  00 00  1 1729      
    cmp byte[ebx+ecx*4-1],#12             ;#0046699E: 200174213 FF 12            u  00 0A  2 1730      
    jne #00466A5D                         ;#004669A3: 017205 B4000000            v  00 00  1 1731      
;  2902                     si = sprintf("???(symtab[%d][S_name]=%d)",{or_esi,si})
    lea eax,[ebp-232] (symtab[1525])      ;#004669A9: 215205 18FFFFFF            uv 01 20  1 1732      
    mov edx,2                             ;#004669AF: 272 02000000               vu 04 00  1 1732      
    push #004669F1                        ;#004669B4: 150 F1694600               uv 00 00  1 1733      
    push eax                              ;#004669B9: 120                        vu 00 01  1 1733      
    cmp ecx,h4                            ;#004669BA: 201371 00000040            uv 00 02  1 1734      
    jl #004669CC                          ;#004669C0: 174 0A                     v  00 00  1 1734      
    add dword[ebx+ecx*4-8],1              ;#004669C2: 203104213 F8 01            u  00 0A  3 1735      
    cmp eax,1310                          ;#004669C7: 075 1E050000               vu 00 01  1 1737      
    push ecx                              ;#004669CC: 121                        uv 00 02  1 1738      
    mov edi,[#00402618] (or_esi)          ;#004669CD: 213075 18264000            vu 80 00  1 1738      
    cmp edi,h4                            ;#004669D3: 201377 00000040            uv 00 80  1 1739      
    jl #004669E5                          ;#004669D9: 174 0A                     v  00 00  1 1739      
    add dword[ebx+edi*4-8],1              ;#004669DB: 203104273 F8 01            u  00 88  3 1740      
    cmp eax,1246                          ;#004669E0: 075 DE040000               vu 00 01  1 1742      
    push edi                              ;#004669E5: 127                        uv 00 80  1 1743      
    mov edi,[ebp-232] (symtab[1525])      ;#004669E6: 213275 18FFFFFF            vu 80 20  1 1743      
    jmp #00460143 (:%pMkSq)               ;#004669EC: 351 5297FFFF               v  00 00  1 1744      
    mov ecx,2                             ;#004669F1: 271 02000000               uv 02 00  1 1745      
    mov edx,210                           ;#004669F6: 272 D2000000               vu 04 00  1 1745      
    call #00462C02 (:%opFrame) (sprintf)  ;#004669FB: 350 02C2FFFF               v  00 00  1 1746      
    mov eax,[#004028E8]                   ;#00466A00: 241 E8284000               uv 01 00  1 1747      
    mov [ebp] (fmt),eax                   ;#00466A05: 211105 00                  uv 00 21  1 1748 01   
    add dword[ebx+eax*4-8],1              ;#00466A08: 203104203 F8 01            u  00 09  3 1750    *01*
    mov edi,[ebp+20] (prevebp)            ;#00466A0D: 213175 14                  vu 80 20  1 1752      
    mov eax,[edi-232]                     ;#00466A10: 213207 18FFFFFF            uv 01 80  1 1755    *80*
    mov [edi-232], dword h4               ;#00466A16: 307207 18FFFFFF 00000040   vu 00 80  1 1755      
    cmp eax,h4                            ;#00466A20: 075 00000040               uv 00 01  1 1756      
    jne #00466A31                         ;#00466A25: 165 0A                     v  00 00  1 1756      
    mov esi,1525                          ;#00466A27: 276 F5050000               uv 40 00  1 1757      
    call #00462744 (:%pUnassigned)        ;#00466A2C: 350 13BDFFFF               v  00 00  1 1757      
    mov [ebp-4] (args),eax                ;#00466A31: 211105 FC                  uv 00 21  1 1758      
    mov [ebp+28] (retaddr),#00466A40      ;#00466A34: 307105 1C 406A4600         vu 00 20  1 1758      
    jmp #00454E9A (code:sprintf)          ;#00466A3B: 351 5AE4FEFF               v  00 00  1 1759      
    push eax                              ;#00466A40: 120                        uv 00 01  1 1760      
    mov esi,[ebp-4] (si)                  ;#00466A41: 213165 FC                  vu 40 20  1 1760      
    cmp esi,h4                            ;#00466A44: 201376 00000040            uv 00 40  1 1761      
    jle #00466A5A                         ;#00466A4A: 176 0E                     v  00 00  1 1761      
    sub dword[ebx+esi*4-8],1              ;#00466A4C: 203154263 F8 01            u  00 48  3 1762      
    jne #00466A5A                         ;#00466A51: 165 07                     v  00 00  1 1764      
    mov edx,esi                           ;#00466A53: 213326                     uv 04 40  1 1765      
    call #004639A8 (:%pDealloc)           ;#00466A55: 350 4ECFFFFF               v  00 00  1 1765      
    pop dword[ebp-4] (si)                 ;#00466A5A: 217105 FC                  np 00 20  3 1766      
;  2903                 end if
;  2904             end if
;  2905         end if
;  2906         msg = sprintf(msg,{si})
    lea eax,[ebp-232] (symtab[1525])      ;#00466A5D: 215205 18FFFFFF            uv 01 20  1 1769      
    mov edx,1                             ;#00466A63: 272 01000000               vu 04 00  1 1769      
    push #00466A8F                        ;#00466A68: 150 8F6A4600               uv 00 00  1 1770      
    push eax                              ;#00466A6D: 120                        vu 00 01  1 1770      
    mov ecx,[ebp-4] (si)                  ;#00466A6E: 213115 FC                  uv 02 20  1 1771      
    cmp ecx,h4                            ;#00466A71: 201371 00000040            uv 00 02  1 1772 02   
    jl #00466A83                          ;#00466A77: 174 0A                     v  00 00  1 1772      
    add dword[ebx+ecx*4-8],1              ;#00466A79: 203104213 F8 01            u  00 0A  3 1773      
    cmp eax,1310                          ;#00466A7E: 075 1E050000               vu 00 01  1 1775      
    push ecx                              ;#00466A83: 121                        uv 00 02  1 1776      
    mov edi,[ebp-232] (symtab[1525])      ;#00466A84: 213275 18FFFFFF            vu 80 20  1 1776      
    jmp #00460143 (:%pMkSq)               ;#00466A8A: 351 B496FFFF               v  00 00  1 1777      
    mov ecx,2                             ;#00466A8F: 271 02000000               uv 02 00  1 1778      
    mov edx,210                           ;#00466A94: 272 D2000000               vu 04 00  1 1778      
    call #00462C02 (:%opFrame) (sprintf)  ;#00466A99: 350 64C1FFFF               v  00 00  1 1779      
    mov edi,[ebp+20] (prevebp)            ;#00466A9E: 213175 14                  uv 80 20  1 1780      
    mov eax,[edi-52]                      ;#00466AA1: 213107 CC                  uv 01 80  1 1783 80 *80*
    mov [edi-52], dword h4                ;#00466AA4: 307107 CC 00000040         vu 00 80  1 1783      
    cmp eax,h4                            ;#00466AAB: 075 00000040               uv 00 01  1 1784      
    jne #00466ABC                         ;#00466AB0: 165 0A                     v  00 00  1 1784      
    mov esi,1322                          ;#00466AB2: 276 2A050000               uv 40 00  1 1785      
    call #00462744 (:%pUnassigned)        ;#00466AB7: 350 88BCFFFF               v  00 00  1 1785      
    mov [ebp] (fmt),eax                   ;#00466ABC: 211105 00                  uv 00 21  1 1786      
    mov edi,[ebp+20] (prevebp)            ;#00466ABF: 213175 14                  vu 80 20  1 1786      
    mov eax,[edi-232]                     ;#00466AC2: 213207 18FFFFFF            uv 01 80  1 1789    *80*
    mov [edi-232], dword h4               ;#00466AC8: 307207 18FFFFFF 00000040   vu 00 80  1 1789      
    cmp eax,h4                            ;#00466AD2: 075 00000040               uv 00 01  1 1790      
    jne #00466AE3                         ;#00466AD7: 165 0A                     v  00 00  1 1790      
    mov esi,1525                          ;#00466AD9: 276 F5050000               uv 40 00  1 1791      
    call #00462744 (:%pUnassigned)        ;#00466ADE: 350 61BCFFFF               v  00 00  1 1791      
    mov [ebp-4] (args),eax                ;#00466AE3: 211105 FC                  uv 00 21  1 1792      
    mov [ebp+28] (retaddr),#00466AF2      ;#00466AE6: 307105 1C F26A4600         vu 00 20  1 1792      
    jmp #00454E9A (code:sprintf)          ;#00466AED: 351 A8E3FEFF               v  00 00  1 1793      
    push eax                              ;#00466AF2: 120                        uv 00 01  1 1794      
    mov esi,[ebp-52] (msg)                ;#00466AF3: 213165 CC                  vu 40 20  1 1794      
    cmp esi,h4                            ;#00466AF6: 201376 00000040            uv 00 40  1 1795      
    jle #00466B0C                         ;#00466AFC: 176 0E                     v  00 00  1 1795      
    sub dword[ebx+esi*4-8],1              ;#00466AFE: 203154263 F8 01            u  00 48  3 1796      
    jne #00466B0C                         ;#00466B03: 165 07                     v  00 00  1 1798      
    mov edx,esi                           ;#00466B05: 213326                     uv 04 40  1 1799      
    call #004639A8 (:%pDealloc)           ;#00466B07: 350 9CCEFFFF               v  00 00  1 1799      
    pop dword[ebp-52] (msg)               ;#00466B0C: 217105 CC                  np 00 20  3 1800      
;  2907 --?msg
;  2908 --?1
    jmp #0046813B                         ;#00466B0F: 351 27160000               v  00 00  1 1803      
;  2909     elsif msg_id=32 then        -- e32hc(era,edi)
;  2910         msg = sprintf(msg,{or_era,or_edi})
    lea eax,[ebp-232] (symtab[1525])      ;#00466B14: 215205 18FFFFFF            uv 01 20  1 1804      
    mov edx,2                             ;#00466B1A: 272 02000000               vu 04 00  1 1804      
    push #00466B62                        ;#00466B1F: 150 626B4600               uv 00 00  1 1805      
    push eax                              ;#00466B24: 120                        vu 00 01  1 1805      
    mov ecx,[#0040261C] (or_edi)          ;#00466B25: 213015 1C264000            uv 02 00  1 1806      
    cmp ecx,h4                            ;#00466B2B: 201371 00000040            uv 00 02  1 1807 02   
    jl #00466B3D                          ;#00466B31: 174 0A                     v  00 00  1 1807      
    add dword[ebx+ecx*4-8],1              ;#00466B33: 203104213 F8 01            u  00 0A  3 1808      
    cmp eax,1247                          ;#00466B38: 075 DF040000               vu 00 01  1 1810      
    push ecx                              ;#00466B3D: 121                        uv 00 02  1 1811      
    mov edi,[#00402610] (or_era)          ;#00466B3E: 213075 10264000            vu 80 00  1 1811      
    cmp edi,h4                            ;#00466B44: 201377 00000040            uv 00 80  1 1812      
    jl #00466B56                          ;#00466B4A: 174 0A                     v  00 00  1 1812      
    add dword[ebx+edi*4-8],1              ;#00466B4C: 203104273 F8 01            u  00 88  3 1813      
    cmp eax,1244                          ;#00466B51: 075 DC040000               vu 00 01  1 1815      
    push edi                              ;#00466B56: 127                        uv 00 80  1 1816      
    mov edi,[ebp-232] (symtab[1525])      ;#00466B57: 213275 18FFFFFF            vu 80 20  1 1816      
    jmp #00460143 (:%pMkSq)               ;#00466B5D: 351 E195FFFF               v  00 00  1 1817      
    mov ecx,2                             ;#00466B62: 271 02000000               uv 02 00  1 1818      
    mov edx,210                           ;#00466B67: 272 D2000000               vu 04 00  1 1818      
    call #00462C02 (:%opFrame) (sprintf)  ;#00466B6C: 350 91C0FFFF               v  00 00  1 1819      
    mov edi,[ebp+20] (prevebp)            ;#00466B71: 213175 14                  uv 80 20  1 1820      
    mov eax,[edi-52]                      ;#00466B74: 213107 CC                  uv 01 80  1 1823 80 *80*
    mov [edi-52], dword h4                ;#00466B77: 307107 CC 00000040         vu 00 80  1 1823      
    cmp eax,h4                            ;#00466B7E: 075 00000040               uv 00 01  1 1824      
    jne #00466B8F                         ;#00466B83: 165 0A                     v  00 00  1 1824      
    mov esi,1322                          ;#00466B85: 276 2A050000               uv 40 00  1 1825      
    call #00462744 (:%pUnassigned)        ;#00466B8A: 350 B5BBFFFF               v  00 00  1 1825      
    mov [ebp] (fmt),eax                   ;#00466B8F: 211105 00                  uv 00 21  1 1826      
    mov edi,[ebp+20] (prevebp)            ;#00466B92: 213175 14                  vu 80 20  1 1826      
    mov eax,[edi-232]                     ;#00466B95: 213207 18FFFFFF            uv 01 80  1 1829    *80*
    mov [edi-232], dword h4               ;#00466B9B: 307207 18FFFFFF 00000040   vu 00 80  1 1829      
    cmp eax,h4                            ;#00466BA5: 075 00000040               uv 00 01  1 1830      
    jne #00466BB6                         ;#00466BAA: 165 0A                     v  00 00  1 1830      
    mov esi,1525                          ;#00466BAC: 276 F5050000               uv 40 00  1 1831      
    call #00462744 (:%pUnassigned)        ;#00466BB1: 350 8EBBFFFF               v  00 00  1 1831      
    mov [ebp-4] (args),eax                ;#00466BB6: 211105 FC                  uv 00 21  1 1832      
    mov [ebp+28] (retaddr),#00466BC5      ;#00466BB9: 307105 1C C56B4600         vu 00 20  1 1832      
    jmp #00454E9A (code:sprintf)          ;#00466BC0: 351 D5E2FEFF               v  00 00  1 1833      
    push eax                              ;#00466BC5: 120                        uv 00 01  1 1834      
    mov esi,[ebp-52] (msg)                ;#00466BC6: 213165 CC                  vu 40 20  1 1834      
    cmp esi,h4                            ;#00466BC9: 201376 00000040            uv 00 40  1 1835      
    jle #00466BDF                         ;#00466BCF: 176 0E                     v  00 00  1 1835      
    sub dword[ebx+esi*4-8],1              ;#00466BD1: 203154263 F8 01            u  00 48  3 1836      
    jne #00466BDF                         ;#00466BD6: 165 07                     v  00 00  1 1838      
    mov edx,esi                           ;#00466BD8: 213326                     uv 04 40  1 1839      
    call #004639A8 (:%pDealloc)           ;#00466BDA: 350 C9CDFFFF               v  00 00  1 1839      
    pop dword[ebp-52] (msg)               ;#00466BDF: 217105 CC                  np 00 20  3 1840      
;  2911         or_era = or_edi
    mov ecx,[#0040261C] (or_edi)          ;#00466BE2: 213015 1C264000            uv 02 00  1 1843      
    cmp ecx,h4                            ;#00466BE8: 201371 00000040            uv 00 02  1 1844 02   
    jne #00466BFA                         ;#00466BEE: 165 0A                     v  00 00  1 1844      
    mov esi,1247                          ;#00466BF0: 276 DF040000               uv 40 00  1 1845      
    call #00462744 (:%pUnassigned)        ;#00466BF5: 350 4ABBFFFF               v  00 00  1 1845      
    mov edx,[#00402610] (or_era)          ;#00466BFA: 213025 10264000            uv 04 00  1 1846      
    cmp ecx,h4                            ;#00466C00: 201371 00000040            vu 00 02  1 1846      
    jl #00466C12                          ;#00466C06: 174 0A                     v  00 00  1 1847      
    add dword[ebx+ecx*4-8],1              ;#00466C08: 203104213 F8 01            u  00 0A  3 1848      
    cmp eax,1247                          ;#00466C0D: 075 DF040000               vu 00 01  1 1850      
    mov [#00402610] (or_era),ecx          ;#00466C12: 211015 10264000            uv 00 02  1 1851      
    cmp edx,h4                            ;#00466C18: 201372 00000040            vu 00 04  1 1851      
    jle #0046813B                         ;#00466C1E: 017216 17150000            v  00 00  1 1852      
    sub dword[ebx+edx*4-8],1              ;#00466C24: 203154223 F8 01            u  00 0C  3 1853      
    jne #0046813B                         ;#00466C29: 017205 0C150000            v  00 00  1 1855      
    call #004639A8 (:%pDealloc)           ;#00466C2F: 350 74CDFFFF               v  00 00  1 1856      
    jmp #0046813B                         ;#00466C34: 351 02150000               v  00 00  1 1857      
;  2912     elsif msg_id=58 then        -- e58bfn(edi)
;  2913         msg = sprintf(msg,or_edi)
    mov ecx,2                             ;#00466C39: 271 02000000               uv 02 00  1 1858      
    mov edx,210                           ;#00466C3E: 272 D2000000               vu 04 00  1 1858      
    call #00462C02 (:%opFrame) (sprintf)  ;#00466C43: 350 BABFFFFF               v  00 00  1 1859      
    mov edi,[ebp+20] (prevebp)            ;#00466C48: 213175 14                  uv 80 20  1 1860      
    mov eax,[edi-52]                      ;#00466C4B: 213107 CC                  uv 01 80  1 1863 80 *80*
    mov [edi-52], dword h4                ;#00466C4E: 307107 CC 00000040         vu 00 80  1 1863      
    cmp eax,h4                            ;#00466C55: 075 00000040               uv 00 01  1 1864      
    jne #00466C66                         ;#00466C5A: 165 0A                     v  00 00  1 1864      
    mov esi,1322                          ;#00466C5C: 276 2A050000               uv 40 00  1 1865      
    call #00462744 (:%pUnassigned)        ;#00466C61: 350 DEBAFFFF               v  00 00  1 1865      
    mov [ebp] (fmt),eax                   ;#00466C66: 211105 00                  uv 00 21  1 1866      
    mov edi,[#0040261C] (or_edi)          ;#00466C69: 213075 1C264000            vu 80 00  1 1866      
    mov [ebp-4] (args),edi                ;#00466C6F: 211175 FC                  uv 00 A0  1 1867      
    cmp edi,h4                            ;#00466C72: 201377 00000040            vu 00 80  1 1867      
    jl #00466C84                          ;#00466C78: 174 0A                     v  00 00  1 1868      
    add dword[ebx+edi*4-8],1              ;#00466C7A: 203104273 F8 01            u  00 88  3 1869      
    cmp eax,1247                          ;#00466C7F: 075 DF040000               vu 00 01  1 1871      
    mov [ebp+28] (retaddr),#00466C90      ;#00466C84: 307105 1C 906C4600         uv 00 20  1 1872      
    jmp #00454E9A (code:sprintf)          ;#00466C8B: 351 0AE2FEFF               v  00 00  1 1872      
    push eax                              ;#00466C90: 120                        uv 00 01  1 1873      
    mov esi,[ebp-52] (msg)                ;#00466C91: 213165 CC                  vu 40 20  1 1873      
    cmp esi,h4                            ;#00466C94: 201376 00000040            uv 00 40  1 1874      
    jle #00466CAA                         ;#00466C9A: 176 0E                     v  00 00  1 1874      
    sub dword[ebx+esi*4-8],1              ;#00466C9C: 203154263 F8 01            u  00 48  3 1875      
    jne #00466CAA                         ;#00466CA1: 165 07                     v  00 00  1 1877      
    mov edx,esi                           ;#00466CA3: 213326                     uv 04 40  1 1878      
    call #004639A8 (:%pDealloc)           ;#00466CA5: 350 FECCFFFF               v  00 00  1 1878      
    pop dword[ebp-52] (msg)               ;#00466CAA: 217105 CC                  np 00 20  3 1879      
    jmp #0046813B                         ;#00466CAD: 351 89140000               v  00 00  1 1882      
;  2914     elsif msg_id=119 then       -- e119af(edi)
;  2915         #ilASM{
;  2916             -- recover (atom)ref ==> ref
;  2917             --  eg #40487620 ==> "oops"
;  2918             [32]
;  2919                 mov eax,[or_edi]
                        mov eax,[#0040261C] (or_edi)  ;#00466CB2: 241 1C264000               uv 01 00  1 1883      
;  2920                 call :%pLoadMint
                        call #0046393E (:%pLoadMint)  ;#00466CB7: 350 82CCFFFF               v  00 00  1 1883      
;  2921                 mov [msg2],eax
                        mov [ebp-144] (msg2),eax  ;#00466CBC: 211205 70FFFFFF            uv 00 21  1 1884      
;  2922             [64]
;  2923                 mov rax,[or_edi]
;  2924                 call :%pLoadMint
;  2925                 mov [msg2],rax
;  2926               }
;  2927         if length(msg2) then
    lea edi,[ebp-224] (symtab[1509])      ;#00466CC2: 215275 20FFFFFF            vu 80 20  1 1884      
    mov esi,[ebp-144] (msg2)              ;#00466CC8: 213265 70FFFFFF            uv 40 20  1 1885      
    mov edx,1345                          ;#00466CCE: 272 41050000               vu 04 00  1 1885      
    call #0045EFEC (:%opLen)              ;#00466CD3: 350 1483FFFF               v  00 00  1 1886      
    test ecx,ecx                          ;#00466CD8: 205311                     uv 00 02  1 1887      
    je #00466D27                          ;#00466CDA: 164 4B                     v  00 00  1 1887      
;  2928             msg2 &= ": "&msg2
    cmp esi,h4                            ;#00466CDC: 201376 00000040            uv 00 40  1 1888      
    jne #00466CEE                         ;#00466CE2: 165 0A                     v  00 00  1 1888      
    mov esi,1345                          ;#00466CE4: 276 41050000               uv 40 00  1 1889      
    call #00462744 (:%pUnassigned)        ;#00466CE9: 350 56BAFFFF               v  00 00  1 1889      
    cmp esi,h4                            ;#00466CEE: 201376 00000040            uv 00 40  1 1890      
    jne #00466D00                         ;#00466CF4: 165 0A                     v  00 00  1 1890      
    mov esi,1345                          ;#00466CF6: 276 41050000               uv 40 00  1 1891      
    call #00462744 (:%pUnassigned)        ;#00466CFB: 350 44BAFFFF               v  00 00  1 1891      
    mov ecx,3                             ;#00466D00: 271 03000000               uv 02 00  1 1892      
    push #00466D27                        ;#00466D05: 150 276D4600               vu 00 00  1 1892      
    push dword[ebp-144] (msg2)            ;#00466D0A: 377265 70FFFFFF            np 00 20  2 1893      
    push dword[#004028F0]                 ;#00466D10: 377065 F0284000            np 00 00  2 1895      
    push dword[ebp-144] (msg2)            ;#00466D16: 377265 70FFFFFF            np 00 20  2 1897      
    lea eax,[ebp-144] (msg2)              ;#00466D1C: 215205 70FFFFFF            uv 01 20  1 1899      
    jmp #0045FF95 (:%opConcatN)           ;#00466D22: 351 6E92FFFF               v  00 00  1 1899      
;  2929         end if
;  2930         msg = sprintf(msg,{msg2})
    lea eax,[ebp-232] (symtab[1525])      ;#00466D27: 215205 18FFFFFF            uv 01 20  1 1900      
    mov edx,1                             ;#00466D2D: 272 01000000               vu 04 00  1 1900      
    push #00466D5C                        ;#00466D32: 150 5C6D4600               uv 00 00  1 1901      
    push eax                              ;#00466D37: 120                        vu 00 01  1 1901      
    mov ecx,[ebp-144] (msg2)              ;#00466D38: 213215 70FFFFFF            uv 02 20  1 1902      
    cmp ecx,h4                            ;#00466D3E: 201371 00000040            uv 00 02  1 1903 02   
    jl #00466D50                          ;#00466D44: 174 0A                     v  00 00  1 1903      
    add dword[ebx+ecx*4-8],1              ;#00466D46: 203104213 F8 01            u  00 0A  3 1904      
    cmp eax,1345                          ;#00466D4B: 075 41050000               vu 00 01  1 1906      
    push ecx                              ;#00466D50: 121                        uv 00 02  1 1907      
    mov edi,[ebp-232] (symtab[1525])      ;#00466D51: 213275 18FFFFFF            vu 80 20  1 1907      
    jmp #00460143 (:%pMkSq)               ;#00466D57: 351 E793FFFF               v  00 00  1 1908      
    mov ecx,2                             ;#00466D5C: 271 02000000               uv 02 00  1 1909      
    mov edx,210                           ;#00466D61: 272 D2000000               vu 04 00  1 1909      
    call #00462C02 (:%opFrame) (sprintf)  ;#00466D66: 350 97BEFFFF               v  00 00  1 1910      
    mov edi,[ebp+20] (prevebp)            ;#00466D6B: 213175 14                  uv 80 20  1 1911      
    mov eax,[edi-52]                      ;#00466D6E: 213107 CC                  uv 01 80  1 1914 80 *80*
    mov [edi-52], dword h4                ;#00466D71: 307107 CC 00000040         vu 00 80  1 1914      
    cmp eax,h4                            ;#00466D78: 075 00000040               uv 00 01  1 1915      
    jne #00466D89                         ;#00466D7D: 165 0A                     v  00 00  1 1915      
    mov esi,1322                          ;#00466D7F: 276 2A050000               uv 40 00  1 1916      
    call #00462744 (:%pUnassigned)        ;#00466D84: 350 BBB9FFFF               v  00 00  1 1916      
    mov [ebp] (fmt),eax                   ;#00466D89: 211105 00                  uv 00 21  1 1917      
    mov edi,[ebp+20] (prevebp)            ;#00466D8C: 213175 14                  vu 80 20  1 1917      
    mov eax,[edi-232]                     ;#00466D8F: 213207 18FFFFFF            uv 01 80  1 1920    *80*
    mov [edi-232], dword h4               ;#00466D95: 307207 18FFFFFF 00000040   vu 00 80  1 1920      
    cmp eax,h4                            ;#00466D9F: 075 00000040               uv 00 01  1 1921      
    jne #00466DB0                         ;#00466DA4: 165 0A                     v  00 00  1 1921      
    mov esi,1525                          ;#00466DA6: 276 F5050000               uv 40 00  1 1922      
    call #00462744 (:%pUnassigned)        ;#00466DAB: 350 94B9FFFF               v  00 00  1 1922      
    mov [ebp-4] (args),eax                ;#00466DB0: 211105 FC                  uv 00 21  1 1923      
    mov [ebp+28] (retaddr),#00466DBF      ;#00466DB3: 307105 1C BF6D4600         vu 00 20  1 1923      
    jmp #00454E9A (code:sprintf)          ;#00466DBA: 351 DBE0FEFF               v  00 00  1 1924      
    push eax                              ;#00466DBF: 120                        uv 00 01  1 1925      
    mov esi,[ebp-52] (msg)                ;#00466DC0: 213165 CC                  vu 40 20  1 1925      
    cmp esi,h4                            ;#00466DC3: 201376 00000040            uv 00 40  1 1926      
    jle #00466DD9                         ;#00466DC9: 176 0E                     v  00 00  1 1926      
    sub dword[ebx+esi*4-8],1              ;#00466DCB: 203154263 F8 01            u  00 48  3 1927      
    jne #00466DD9                         ;#00466DD0: 165 07                     v  00 00  1 1929      
    mov edx,esi                           ;#00466DD2: 213326                     uv 04 40  1 1930      
    call #004639A8 (:%pDealloc)           ;#00466DD4: 350 CFCBFFFF               v  00 00  1 1930      
    pop dword[ebp-52] (msg)               ;#00466DD9: 217105 CC                  np 00 20  3 1931      
    jmp #0046813B                         ;#00466DDC: 351 5A130000               v  00 00  1 1934      
;  2931     elsif msg_id=120 then       -- e120fle
;  2932 --      c = varIdx(ep1)
;  2933         if or_esi=1 then
    mov edi,1                             ;#00466DE1: 277 01000000               uv 80 00  1 1935      
    mov eax,[#00402618] (or_esi)          ;#00466DE6: 241 18264000               vu 01 00  1 1935      
    mov esi,26                            ;#00466DEB: 276 1A000000               uv 40 00  1 1936      
    mov edx,1246                          ;#00466DF0: 272 DE040000               vu 04 00  1 1936      
    call #0045F91F (:%opJccE)             ;#00466DF5: 350 258BFFFF               v  00 00  1 1937      
    jne #00466E36                         ;#00466DFA: 165 3A                     v  00 00  1 1938      
;  2934             name = "init"
    mov ecx,[#004028F8]                   ;#00466DFC: 213015 F8284000            uv 02 00  1 1939      
    mov edx,[ebp-12] (name)               ;#00466E02: 213125 F4                  vu 04 20  1 1939      
    cmp ecx,h4                            ;#00466E05: 201371 00000040            uv 00 02  1 1940      
    jl #00466E12                          ;#00466E0B: 174 05                     v  00 00  1 1940      
    add dword[ebx+ecx*4-8],1              ;#00466E0D: 203104213 F8 01            u  00 0A  3 1941      
    mov [ebp-12] (name),ecx               ;#00466E12: 211115 F4                  vu 00 22  1 1943      
    cmp edx,h4                            ;#00466E15: 201372 00000040            uv 00 04  1 1944      
    jle #00466EFB                         ;#00466E1B: 017216 DA000000            v  00 00  1 1944      
    sub dword[ebx+edx*4-8],1              ;#00466E21: 203154223 F8 01            u  00 0C  3 1945      
    jne #00466EFB                         ;#00466E26: 017205 CF000000            v  00 00  1 1947      
    call #004639A8 (:%pDealloc)           ;#00466E2C: 350 77CBFFFF               v  00 00  1 1948      
    jmp #00466EFB                         ;#00466E31: 351 C5000000               v  00 00  1 1949      
;  2935         elsif or_esi=2 then
    mov edi,2                             ;#00466E36: 277 02000000               uv 80 00  1 1950      
    mov eax,[#00402618] (or_esi)          ;#00466E3B: 241 18264000               vu 01 00  1 1950      
    mov esi,35                            ;#00466E40: 276 23000000               uv 40 00  1 1951      
    mov edx,1246                          ;#00466E45: 272 DE040000               vu 04 00  1 1951      
    call #0045F91F (:%opJccE)             ;#00466E4A: 350 D08AFFFF               v  00 00  1 1952      
    jne #00466E84                         ;#00466E4F: 165 33                     v  00 00  1 1953      
;  2936             name = "limit"
    mov edi,[#004028FC]                   ;#00466E51: 213075 FC284000            uv 80 00  1 1954      
    mov edx,[ebp-12] (name)               ;#00466E57: 213125 F4                  vu 04 20  1 1954      
    cmp edi,h4                            ;#00466E5A: 201377 00000040            uv 00 80  1 1955      
    jl #00466E67                          ;#00466E60: 174 05                     v  00 00  1 1955      
    add dword[ebx+edi*4-8],1              ;#00466E62: 203104273 F8 01            u  00 88  3 1956      
    mov [ebp-12] (name),edi               ;#00466E67: 211175 F4                  vu 00 A0  1 1958      
    cmp edx,h4                            ;#00466E6A: 201372 00000040            uv 00 04  1 1959      
    jle #00466EFB                         ;#00466E70: 017216 85000000            v  00 00  1 1959      
    sub dword[ebx+edx*4-8],1              ;#00466E76: 203154223 F8 01            u  00 0C  3 1960      
    jne #00466EFB                         ;#00466E7B: 165 7E                     v  00 00  1 1962      
    call #004639A8 (:%pDealloc)           ;#00466E7D: 350 26CBFFFF               v  00 00  1 1963      
    jmp #00466EFB                         ;#00466E82: 353 77                     v  00 00  1 1964      
;  2937         elsif or_esi=4 then
    mov edi,4                             ;#00466E84: 277 04000000               uv 80 00  1 1965      
    mov eax,[#00402618] (or_esi)          ;#00466E89: 241 18264000               vu 01 00  1 1965      
    mov esi,42                            ;#00466E8E: 276 2A000000               uv 40 00  1 1966      
    mov edx,1246                          ;#00466E93: 272 DE040000               vu 04 00  1 1966      
    call #0045F91F (:%opJccE)             ;#00466E98: 350 828AFFFF               v  00 00  1 1967      
    jne #00466ECE                         ;#00466E9D: 165 2F                     v  00 00  1 1968      
;  2938             name = "step"
    mov esi,[#00402900]                   ;#00466E9F: 213065 00294000            uv 40 00  1 1969      
    mov edx,[ebp-12] (name)               ;#00466EA5: 213125 F4                  vu 04 20  1 1969      
    cmp esi,h4                            ;#00466EA8: 201376 00000040            uv 00 40  1 1970      
    jl #00466EB5                          ;#00466EAE: 174 05                     v  00 00  1 1970      
    add dword[ebx+esi*4-8],1              ;#00466EB0: 203104263 F8 01            u  00 48  3 1971      
    mov [ebp-12] (name),esi               ;#00466EB5: 211165 F4                  vu 00 60  1 1973      
    cmp edx,h4                            ;#00466EB8: 201372 00000040            uv 00 04  1 1974      
    jle #00466EFB                         ;#00466EBE: 176 3B                     v  00 00  1 1974      
    sub dword[ebx+edx*4-8],1              ;#00466EC0: 203154223 F8 01            u  00 0C  3 1975      
    jne #00466EFB                         ;#00466EC5: 165 34                     v  00 00  1 1977      
    call #004639A8 (:%pDealloc)           ;#00466EC7: 350 DCCAFFFF               v  00 00  1 1978      
    jmp #00466EFB                         ;#00466ECC: 353 2D                     v  00 00  1 1979      
;  2939         else
;  2940             name = "???"
    mov ecx,[#004028C8]                   ;#00466ECE: 213015 C8284000            uv 02 00  1 1980      
    mov edx,[ebp-12] (name)               ;#00466ED4: 213125 F4                  vu 04 20  1 1980      
    cmp ecx,h4                            ;#00466ED7: 201371 00000040            uv 00 02  1 1981      
    jl #00466EE4                          ;#00466EDD: 174 05                     v  00 00  1 1981      
    add dword[ebx+ecx*4-8],1              ;#00466EDF: 203104213 F8 01            u  00 0A  3 1982      
    mov [ebp-12] (name),ecx               ;#00466EE4: 211115 F4                  vu 00 22  1 1984      
    cmp edx,h4                            ;#00466EE7: 201372 00000040            uv 00 04  1 1985      
    jle #00466EFB                         ;#00466EED: 176 0C                     v  00 00  1 1985      
    sub dword[ebx+edx*4-8],1              ;#00466EEF: 203154223 F8 01            u  00 0C  3 1986      
    jne #00466EFB                         ;#00466EF4: 165 05                     v  00 00  1 1988      
    call #004639A8 (:%pDealloc)           ;#00466EF6: 350 ADCAFFFF               v  00 00  1 1989      
;  2941         end if
;  2942         if or_edi<1 or or_edi>length(symtab) then
    mov edi,1                             ;#00466EFB: 277 01000000               uv 80 00  1 1990      
    mov eax,[#0040261C] (or_edi)          ;#00466F00: 241 1C264000               vu 01 00  1 1990      
    mov esi,26                            ;#00466F05: 276 1A000000               uv 40 00  1 1991      
    mov edx,1247                          ;#00466F0A: 272 DF040000               vu 04 00  1 1991      
    call #0045F8B0 (:%opJcc)              ;#00466F0F: 350 9C89FFFF               v  00 00  1 1992      
    jl #00466F41                          ;#00466F14: 174 2B                     v  00 00  1 1993      
    lea edi,[ebp-236] (symtab[1535])      ;#00466F16: 215275 14FFFFFF            uv 80 20  1 1994      
    mov esi,[ebp] (symtab)                ;#00466F1C: 213165 00                  vu 40 20  1 1994      
    mov edx,1309                          ;#00466F1F: 272 1D050000               uv 04 00  1 1995      
    call #0045EFEC (:%opLen)              ;#00466F24: 350 C380FFFF               v  00 00  1 1995      
    mov edi,ecx                           ;#00466F29: 211317                     uv 80 02  1 1996      
    mov eax,[#0040261C] (or_edi)          ;#00466F2B: 241 1C264000               vu 01 00  1 1996      
    mov esi,1535                          ;#00466F30: 276 FF050000               uv 40 00  1 1997      
    mov edx,1247                          ;#00466F35: 272 DF040000               vu 04 00  1 1997      
    call #0045F8B0 (:%opJcc)              ;#00466F3A: 350 7189FFFF               v  00 00  1 1998      
    jle #00466FA2                         ;#00466F3F: 176 61                     v  00 00  1 1999      
;  2943             o = sprintf("???(varno=%d)",or_edi)
    mov ecx,2                             ;#00466F41: 271 02000000               uv 02 00  1 2000      
    mov edx,210                           ;#00466F46: 272 D2000000               vu 04 00  1 2000      
    call #00462C02 (:%opFrame) (sprintf)  ;#00466F4B: 350 B2BCFFFF               v  00 00  1 2001      
    mov edi,[#004028E4]                   ;#00466F50: 213075 E4284000            uv 80 00  1 2002      
    mov [ebp] (fmt),edi                   ;#00466F56: 211175 00                  uv 00 A0  1 2003 80   
    add dword[ebx+edi*4-8],1              ;#00466F59: 203104273 F8 01            u  00 88  3 2005    *80*
    mov esi,[#0040261C] (or_edi)          ;#00466F5E: 213065 1C264000            vu 40 00  1 2007      
    mov [ebp-4] (args),esi                ;#00466F64: 211165 FC                  uv 00 60  1 2008      
    cmp esi,h4                            ;#00466F67: 201376 00000040            vu 00 40  1 2008      
    jl #00466F74                          ;#00466F6D: 174 05                     v  00 00  1 2009      
    add dword[ebx+esi*4-8],1              ;#00466F6F: 203104263 F8 01            u  00 48  3 2010      
    mov [ebp+28] (retaddr),#00466F80      ;#00466F74: 307105 1C 806F4600         vu 00 20  1 2012      
    jmp #00454E9A (code:sprintf)          ;#00466F7B: 351 1ADFFEFF               v  00 00  1 2013      
    push eax                              ;#00466F80: 120                        uv 00 01  1 2014      
    mov ecx,[ebp-16] (o)                  ;#00466F81: 213115 F0                  vu 02 20  1 2014      
    cmp ecx,h4                            ;#00466F84: 201371 00000040            uv 00 02  1 2015      
    jle #00466F9A                         ;#00466F8A: 176 0E                     v  00 00  1 2015      
    sub dword[ebx+ecx*4-8],1              ;#00466F8C: 203154213 F8 01            u  00 0A  3 2016      
    jne #00466F9A                         ;#00466F91: 165 07                     v  00 00  1 2018      
    mov edx,ecx                           ;#00466F93: 213321                     uv 04 02  1 2019      
    call #004639A8 (:%pDealloc)           ;#00466F95: 350 0ECAFFFF               v  00 00  1 2019      
    pop dword[ebp-16] (o)                 ;#00466F9A: 217105 F0                  np 00 20  3 2020      
    jmp #0046743B                         ;#00466F9D: 351 99040000               v  00 00  1 2023      
;  2944         else
;  2945             si = symtab[or_edi]
    mov eax,[ebp] (symtab)                ;#00466FA2: 213105 00                  uv 01 20  1 2024      
    cmp eax,h4                            ;#00466FA5: 075 00000040               uv 00 01  1 2025 01   
    jne #00466FB6                         ;#00466FAA: 165 0A                     v  00 00  1 2025      
    mov esi,1309                          ;#00466FAC: 276 1D050000               uv 40 00  1 2026      
    call #00462744 (:%pUnassigned)        ;#00466FB1: 350 8EB7FFFF               v  00 00  1 2026      
    mov edi,[#0040261C] (or_edi)          ;#00466FB6: 213075 1C264000            uv 80 00  1 2027      
    cmp edi,h4                            ;#00466FBC: 201377 00000040            uv 00 80  1 2028 80   
    jne #00466FCE                         ;#00466FC2: 165 0A                     v  00 00  1 2028      
    mov esi,1247                          ;#00466FC4: 276 DF040000               uv 40 00  1 2029      
    call #00462744 (:%pUnassigned)        ;#00466FC9: 350 76B7FFFF               v  00 00  1 2029      
    lea ecx,[ebp-4] (si)                  ;#00466FCE: 215115 FC                  uv 02 20  1 2030      
    mov esi,eax                           ;#00466FD1: 211306                     vu 40 01  1 2030      
    mov edx,1309                          ;#00466FD3: 272 1D050000               uv 04 00  1 2031      
    mov al,0                              ;#00466FD8: 260 00                     vu 01 00  1 2031      
    call #00460FE5 (:%pSubse1)            ;#00466FDA: 350 06A0FFFF               v  00 00  1 2032      
;  2946             if atom(si) then
    mov esi,[ebp-4] (si)                  ;#00466FDF: 213165 FC                  uv 40 20  1 2033      
    cmp esi,h4                            ;#00466FE2: 201376 00000040            uv 00 40  1 2034 40   
    jl #00466FF1                          ;#00466FE8: 174 07                     v  00 00  1 2034      
    cmp byte[ebx+esi*4-1],#12             ;#00466FEA: 200174263 FF 12            u  00 48  2 2035      
    jne #00467056                         ;#00466FEF: 165 65                     v  00 00  1 2036      
;  2947                 o = sprintf("???(atom(symtab[%d]))",or_edi)
    mov ecx,2                             ;#00466FF1: 271 02000000               uv 02 00  1 2037      
    mov edx,210                           ;#00466FF6: 272 D2000000               vu 04 00  1 2037      
    call #00462C02 (:%opFrame) (sprintf)  ;#00466FFB: 350 02BCFFFF               v  00 00  1 2038      
    mov ecx,[#004028D0]                   ;#00467000: 213015 D0284000            uv 02 00  1 2039      
    mov [ebp] (fmt),ecx                   ;#00467006: 211115 00                  uv 00 22  1 2040 02   
    add dword[ebx+ecx*4-8],1              ;#00467009: 203104213 F8 01            u  00 0A  3 2042    *02*
    mov edi,[#0040261C] (or_edi)          ;#0046700E: 213075 1C264000            vu 80 00  1 2044      
    mov [ebp-4] (args),edi                ;#00467014: 211175 FC                  uv 00 A0  1 2045      
    cmp edi,h4                            ;#00467017: 201377 00000040            vu 00 80  1 2045      
    jl #00467029                          ;#0046701D: 174 0A                     v  00 00  1 2046      
    add dword[ebx+edi*4-8],1              ;#0046701F: 203104273 F8 01            u  00 88  3 2047      
    cmp eax,1247                          ;#00467024: 075 DF040000               vu 00 01  1 2049      
    mov [ebp+28] (retaddr),#00467035      ;#00467029: 307105 1C 35704600         uv 00 20  1 2050      
    jmp #00454E9A (code:sprintf)          ;#00467030: 351 65DEFEFF               v  00 00  1 2050      
    push eax                              ;#00467035: 120                        uv 00 01  1 2051      
    mov eax,[ebp-16] (o)                  ;#00467036: 213105 F0                  vu 01 20  1 2051      
    cmp eax,h4                            ;#00467039: 075 00000040               uv 00 01  1 2052      
    jle #0046704E                         ;#0046703E: 176 0E                     v  00 00  1 2052      
    sub dword[ebx+eax*4-8],1              ;#00467040: 203154203 F8 01            u  00 09  3 2053      
    jne #0046704E                         ;#00467045: 165 07                     v  00 00  1 2055      
    mov edx,eax                           ;#00467047: 213320                     uv 04 01  1 2056      
    call #004639A8 (:%pDealloc)           ;#00467049: 350 5AC9FFFF               v  00 00  1 2056      
    pop dword[ebp-16] (o)                 ;#0046704E: 217105 F0                  np 00 20  3 2057      
    jmp #0046743B                         ;#00467051: 351 E5030000               v  00 00  1 2060      
;  2948             else
;  2949                 sNTyp = si[S_NTyp]
    mov edi,2                             ;#00467056: 277 02000000               uv 80 00  1 2061      
    lea ecx,[ebp-32] (sNTyp)              ;#0046705B: 215115 E0                  vu 02 20  1 2061      
    mov edx,1310                          ;#0046705E: 272 1E050000               uv 04 00  1 2062      
    call #0046106B (:%pSubse1i)           ;#00467063: 350 03A0FFFF               v  00 00  1 2062      
;  2950                 if sNTyp!=S_GVar2
    cmp eax,2                             ;#00467068: 203370 02                  uv 00 01  1 2063      
    je #004670D8                          ;#0046706B: 164 6B                     v  00 00  1 2063      
;  2951                 and sNTyp!=S_TVar3 then
    cmp eax,3                             ;#0046706D: 203370 03                  uv 00 01  1 2064      
    je #004670D8                          ;#00467070: 164 66                     v  00 00  1 2064      
;  2952                     o = sprintf("???(symtab[%d] wrong type)",or_edi)
    mov ecx,2                             ;#00467072: 271 02000000               uv 02 00  1 2065      
    mov edx,210                           ;#00467077: 272 D2000000               vu 04 00  1 2065      
    call #00462C02 (:%opFrame) (sprintf)  ;#0046707C: 350 81BBFFFF               v  00 00  1 2066      
    mov ecx,[#004028D8]                   ;#00467081: 213015 D8284000            uv 02 00  1 2067      
    mov [ebp] (fmt),ecx                   ;#00467087: 211115 00                  uv 00 22  1 2068 02   
    add dword[ebx+ecx*4-8],1              ;#0046708A: 203104213 F8 01            u  00 0A  3 2070    *02*
    mov edi,[#0040261C] (or_edi)          ;#0046708F: 213075 1C264000            vu 80 00  1 2072      
    mov [ebp-4] (args),edi                ;#00467095: 211175 FC                  uv 00 A0  1 2073      
    cmp edi,h4                            ;#00467098: 201377 00000040            vu 00 80  1 2073      
    jl #004670AA                          ;#0046709E: 174 0A                     v  00 00  1 2074      
    add dword[ebx+edi*4-8],1              ;#004670A0: 203104273 F8 01            u  00 88  3 2075      
    cmp eax,1247                          ;#004670A5: 075 DF040000               vu 00 01  1 2077      
    mov [ebp+28] (retaddr),#004670B6      ;#004670AA: 307105 1C B6704600         uv 00 20  1 2078      
    jmp #00454E9A (code:sprintf)          ;#004670B1: 351 E4DDFEFF               v  00 00  1 2078      
    push eax                              ;#004670B6: 120                        uv 00 01  1 2079      
    mov esi,[ebp-16] (o)                  ;#004670B7: 213165 F0                  vu 40 20  1 2079      
    cmp esi,h4                            ;#004670BA: 201376 00000040            uv 00 40  1 2080      
    jle #004670D0                         ;#004670C0: 176 0E                     v  00 00  1 2080      
    sub dword[ebx+esi*4-8],1              ;#004670C2: 203154263 F8 01            u  00 48  3 2081      
    jne #004670D0                         ;#004670C7: 165 07                     v  00 00  1 2083      
    mov edx,esi                           ;#004670C9: 213326                     uv 04 40  1 2084      
    call #004639A8 (:%pDealloc)           ;#004670CB: 350 D8C8FFFF               v  00 00  1 2084      
    pop dword[ebp-16] (o)                 ;#004670D0: 217105 F0                  np 00 20  3 2085      
    jmp #0046743B                         ;#004670D3: 351 63030000               v  00 00  1 2088      
;  2953                 else
;  2954                     if sNTyp=S_GVar2 then
    cmp eax,2                             ;#004670D8: 203370 02                  uv 00 01  1 2089      
    jne #004671C2                         ;#004670DB: 017205 E1000000            v  00 00  1 2089      
;  2955                         {novalue,o} = getGvarValue(si[S_Slink])
    mov edi,6                             ;#004670E1: 277 06000000               uv 80 00  1 2090      
    lea ecx,[ebp-216] (symtab[1500])      ;#004670E6: 215215 28FFFFFF            vu 02 20  1 2090      
    mov esi,[ebp-4] (si)                  ;#004670EC: 213165 FC                  uv 40 20  1 2091      
    mov edx,1310                          ;#004670EF: 272 1E050000               vu 04 00  1 2091      
    mov al,0                              ;#004670F4: 260 00                     uv 01 00  1 2092      
    call #00460FE5 (:%pSubse1)            ;#004670F6: 350 EA9EFFFF               v  00 00  1 2092      
    mov ecx,4                             ;#004670FB: 271 04000000               uv 02 00  1 2093      
    mov edx,1250                          ;#00467100: 272 E2040000               vu 04 00  1 2093      
    call :%opFrame (getGvarValue)         ;#00467105: 350 F8BAFFFF               v  00 00  1 2094      
    mov edi,[ebp+20] (prevebp)            ;#0046710A: 213175 14                  uv 80 20  1 2095      
    mov eax,[edi-216]                     ;#0046710D: 213207 28FFFFFF            uv 01 80  1 2098 80 *80*
    mov [edi-216], dword h4               ;#00467113: 307207 28FFFFFF 00000040   vu 00 80  1 2098      
    cmp eax,h4                            ;#0046711D: 075 00000040               uv 00 01  1 2099      
    jne #0046712E                         ;#00467122: 165 0A                     v  00 00  1 2099      
    mov esi,1500                          ;#00467124: 276 DC050000               uv 40 00  1 2100      
    call #00462744 (:%pUnassigned)        ;#00467129: 350 16B6FFFF               v  00 00  1 2100      
    mov [ebp] (gidx),eax                  ;#0046712E: 211105 00                  uv 00 21  1 2101      
    mov [ebp+28] (retaddr),#0046713D      ;#00467131: 307105 1C 3D714600         vu 00 20  1 2101      
    jmp #0046C721 (code:getGvarValue)     ;#00467138: 351 E4550000               v  00 00  1 2102      
    push eax                              ;#0046713D: 120                        uv 00 01  1 2103      
    mov ecx,[ebp-232] (symtab[1525])      ;#0046713E: 213215 18FFFFFF            vu 02 20  1 2103      
    cmp ecx,h4                            ;#00467144: 201371 00000040            uv 00 02  1 2104      
    jle #0046715A                         ;#0046714A: 176 0E                     v  00 00  1 2104      
    sub dword[ebx+ecx*4-8],1              ;#0046714C: 203154213 F8 01            u  00 0A  3 2105      
    jne #0046715A                         ;#00467151: 165 07                     v  00 00  1 2107      
    mov edx,ecx                           ;#00467153: 213321                     uv 04 02  1 2108      
    call #004639A8 (:%pDealloc)           ;#00467155: 350 4EC8FFFF               v  00 00  1 2108      
    pop dword[ebp-232] (symtab[1525])     ;#0046715A: 217205 18FFFFFF            np 00 20  3 2109      
    mov edi,2                             ;#00467160: 277 02000000               uv 80 00  1 2112      
    lea ecx,[ebp-16] (o)                  ;#00467165: 215115 F0                  vu 02 20  1 2112      
    mov esi,[ebp-232] (symtab[1525])      ;#00467168: 213265 18FFFFFF            uv 40 20  1 2113      
    mov edx,1525                          ;#0046716E: 272 F5050000               vu 04 00  1 2113      
    mov al,0                              ;#00467173: 260 00                     uv 01 00  1 2114      
    call #00460FE5 (:%pSubse1)            ;#00467175: 350 6B9EFFFF               v  00 00  1 2114      
    mov edi,1                             ;#0046717A: 277 01000000               uv 80 00  1 2115      
    lea ecx,[ebp-140] (novalue)           ;#0046717F: 215215 74FFFFFF            vu 02 20  1 2115      
    mov esi,[ebp-232] (symtab[1525])      ;#00467185: 213265 18FFFFFF            uv 40 20  1 2116      
    mov edx,1525                          ;#0046718B: 272 F5050000               vu 04 00  1 2116      
    call #0046106B (:%pSubse1i)           ;#00467190: 350 D69EFFFF               v  00 00  1 2117      
    mov edx,[ebp-232] (symtab[1525])      ;#00467195: 213225 18FFFFFF            uv 04 20  1 2118      
    cmp edx,h4                            ;#0046719B: 201372 00000040            uv 00 04  1 2119 04   
    mov [ebp-232] (symtab[1525]),ebx      ;#004671A1: 211235 18FFFFFF            vu 00 28  1 2119      
    jle #0046729F                         ;#004671A7: 017216 F2000000            v  00 00  1 2120      
    sub dword[ebx+edx*4-8],1              ;#004671AD: 203154223 F8 01            u  00 0C  3 2121      
    jne #0046729F                         ;#004671B2: 017205 E7000000            v  00 00  1 2123      
    call #004639A8 (:%pDealloc)           ;#004671B8: 350 EBC7FFFF               v  00 00  1 2124      
    jmp #0046729F                         ;#004671BD: 351 DD000000               v  00 00  1 2125      
;  2956                     elsif sNTyp=S_TVar3 then
    cmp eax,3                             ;#004671C2: 203370 03                  uv 00 01  1 2126      
    jne #0046729F                         ;#004671C5: 017205 D4000000            v  00 00  1 2126      
;  2957                         {novalue,o} = getTvarValue(si[S_Tidx])
    mov edi,9                             ;#004671CB: 277 09000000               uv 80 00  1 2127      
    lea ecx,[ebp-216] (symtab[1500])      ;#004671D0: 215215 28FFFFFF            vu 02 20  1 2127      
    mov esi,[ebp-4] (si)                  ;#004671D6: 213165 FC                  uv 40 20  1 2128      
    mov edx,1310                          ;#004671D9: 272 1E050000               vu 04 00  1 2128      
    mov al,0                              ;#004671DE: 260 00                     uv 01 00  1 2129      
    call #00460FE5 (:%pSubse1)            ;#004671E0: 350 009EFFFF               v  00 00  1 2129      
    mov ecx,4                             ;#004671E5: 271 04000000               uv 02 00  1 2130      
    mov edx,1256                          ;#004671EA: 272 E8040000               vu 04 00  1 2130      
    call :%opFrame (getTvarValue)         ;#004671EF: 350 0EBAFFFF               v  00 00  1 2131      
    mov edi,[ebp+20] (prevebp)            ;#004671F4: 213175 14                  uv 80 20  1 2132      
    mov eax,[edi-216]                     ;#004671F7: 213207 28FFFFFF            uv 01 80  1 2135 80 *80*
    mov [edi-216], dword h4               ;#004671FD: 307207 28FFFFFF 00000040   vu 00 80  1 2135      
    cmp eax,h4                            ;#00467207: 075 00000040               uv 00 01  1 2136      
    jne #00467218                         ;#0046720C: 165 0A                     v  00 00  1 2136      
    mov esi,1500                          ;#0046720E: 276 DC050000               uv 40 00  1 2137      
    call #00462744 (:%pUnassigned)        ;#00467213: 350 2CB5FFFF               v  00 00  1 2137      
    mov [ebp] (tidx),eax                  ;#00467218: 211105 00                  uv 00 21  1 2138      
    mov [ebp+28] (retaddr),#00467227      ;#0046721B: 307105 1C 27724600         vu 00 20  1 2138      
    jmp #0046C60C (code:getTvarValue)     ;#00467222: 351 E5530000               v  00 00  1 2139      
    push eax                              ;#00467227: 120                        uv 00 01  1 2140      
    mov edi,[ebp-240] (symtab[1536])      ;#00467228: 213275 10FFFFFF            vu 80 20  1 2140      
    cmp edi,h4                            ;#0046722E: 201377 00000040            uv 00 80  1 2141      
    jle #00467244                         ;#00467234: 176 0E                     v  00 00  1 2141      
    sub dword[ebx+edi*4-8],1              ;#00467236: 203154273 F8 01            u  00 88  3 2142      
    jne #00467244                         ;#0046723B: 165 07                     v  00 00  1 2144      
    mov edx,edi                           ;#0046723D: 213327                     uv 04 80  1 2145      
    call #004639A8 (:%pDealloc)           ;#0046723F: 350 64C7FFFF               v  00 00  1 2145      
    pop dword[ebp-240] (symtab[1536])     ;#00467244: 217205 10FFFFFF            np 00 20  3 2146      
    mov edi,2                             ;#0046724A: 277 02000000               uv 80 00  1 2149      
    lea ecx,[ebp-16] (o)                  ;#0046724F: 215115 F0                  vu 02 20  1 2149      
    mov esi,[ebp-240] (symtab[1536])      ;#00467252: 213265 10FFFFFF            uv 40 20  1 2150      
    mov edx,1536                          ;#00467258: 272 00060000               vu 04 00  1 2150      
    mov al,0                              ;#0046725D: 260 00                     uv 01 00  1 2151      
    call #00460FE5 (:%pSubse1)            ;#0046725F: 350 819DFFFF               v  00 00  1 2151      
    mov edi,1                             ;#00467264: 277 01000000               uv 80 00  1 2152      
    lea ecx,[ebp-140] (novalue)           ;#00467269: 215215 74FFFFFF            vu 02 20  1 2152      
    mov esi,[ebp-240] (symtab[1536])      ;#0046726F: 213265 10FFFFFF            uv 40 20  1 2153      
    mov edx,1536                          ;#00467275: 272 00060000               vu 04 00  1 2153      
    call #0046106B (:%pSubse1i)           ;#0046727A: 350 EC9DFFFF               v  00 00  1 2154      
    mov edx,[ebp-240] (symtab[1536])      ;#0046727F: 213225 10FFFFFF            uv 04 20  1 2155      
    cmp edx,h4                            ;#00467285: 201372 00000040            uv 00 04  1 2156 04   
    mov [ebp-240] (symtab[1536]),ebx      ;#0046728B: 211235 10FFFFFF            vu 00 28  1 2156      
    jle #0046729F                         ;#00467291: 176 0C                     v  00 00  1 2157      
    sub dword[ebx+edx*4-8],1              ;#00467293: 203154223 F8 01            u  00 0C  3 2158      
    jne #0046729F                         ;#00467298: 165 05                     v  00 00  1 2160      
    call #004639A8 (:%pDealloc)           ;#0046729A: 350 09C7FFFF               v  00 00  1 2161      
;  2958                     end if
;  2959                     if novalue then
    mov eax,[ebp-140] (novalue)           ;#0046729F: 213205 74FFFFFF            uv 01 20  1 2162      
    mov edx,1344                          ;#004672A5: 272 40050000               vu 04 00  1 2162      
    call #0045F94C (:%opJif)              ;#004672AA: 350 9D86FFFF               v  00 00  1 2163      
    je #004673AC                          ;#004672AF: 017204 F7000000            v  00 00  1 2164      
;  2960                         if novalue=1 then
    cmp eax,1                             ;#004672B5: 203370 01                  uv 00 01  1 2165      
    jne #004672F4                         ;#004672B8: 165 3A                     v  00 00  1 2165      
;  2961                             o = "<novalue>"
    mov ecx,[#0040256C]                   ;#004672BA: 213015 6C254000            uv 02 00  1 2166      
    mov edx,[ebp-16] (o)                  ;#004672C0: 213125 F0                  vu 04 20  1 2166      
    cmp ecx,h4                            ;#004672C3: 201371 00000040            uv 00 02  1 2167      
    jl #004672D0                          ;#004672C9: 174 05                     v  00 00  1 2167      
    add dword[ebx+ecx*4-8],1              ;#004672CB: 203104213 F8 01            u  00 0A  3 2168      
    mov [ebp-16] (o),ecx                  ;#004672D0: 211115 F0                  vu 00 22  1 2170      
    cmp edx,h4                            ;#004672D3: 201372 00000040            uv 00 04  1 2171      
    jle #0046743B                         ;#004672D9: 017216 5C010000            v  00 00  1 2171      
    sub dword[ebx+edx*4-8],1              ;#004672DF: 203154223 F8 01            u  00 0C  3 2172      
    jne #0046743B                         ;#004672E4: 017205 51010000            v  00 00  1 2174      
    call #004639A8 (:%pDealloc)           ;#004672EA: 350 B9C6FFFF               v  00 00  1 2175      
    jmp #0046743B                         ;#004672EF: 351 47010000               v  00 00  1 2176      
;  2962                         elsif novalue=2 then
    cmp eax,2                             ;#004672F4: 203370 02                  uv 00 01  1 2177      
    jne #00467333                         ;#004672F7: 165 3A                     v  00 00  1 2177      
;  2963                             o = "*** INVALID REF ***"
    mov edi,[#00402570]                   ;#004672F9: 213075 70254000            uv 80 00  1 2178      
    mov edx,[ebp-16] (o)                  ;#004672FF: 213125 F0                  vu 04 20  1 2178      
    cmp edi,h4                            ;#00467302: 201377 00000040            uv 00 80  1 2179      
    jl #0046730F                          ;#00467308: 174 05                     v  00 00  1 2179      
    add dword[ebx+edi*4-8],1              ;#0046730A: 203104273 F8 01            u  00 88  3 2180      
    mov [ebp-16] (o),edi                  ;#0046730F: 211175 F0                  vu 00 A0  1 2182      
    cmp edx,h4                            ;#00467312: 201372 00000040            uv 00 04  1 2183      
    jle #0046743B                         ;#00467318: 017216 1D010000            v  00 00  1 2183      
    sub dword[ebx+edx*4-8],1              ;#0046731E: 203154223 F8 01            u  00 0C  3 2184      
    jne #0046743B                         ;#00467323: 017205 12010000            v  00 00  1 2186      
    call #004639A8 (:%pDealloc)           ;#00467329: 350 7AC6FFFF               v  00 00  1 2187      
    jmp #0046743B                         ;#0046732E: 351 08010000               v  00 00  1 2188      
;  2964                         elsif novalue=3 then
    cmp eax,3                             ;#00467333: 203370 03                  uv 00 01  1 2189      
    jne #00467372                         ;#00467336: 165 3A                     v  00 00  1 2189      
;  2965                             o = "*** CORRUPT TYPE BYTE ***"
    mov esi,[#00402574]                   ;#00467338: 213065 74254000            uv 40 00  1 2190      
    mov edx,[ebp-16] (o)                  ;#0046733E: 213125 F0                  vu 04 20  1 2190      
    cmp esi,h4                            ;#00467341: 201376 00000040            uv 00 40  1 2191      
    jl #0046734E                          ;#00467347: 174 05                     v  00 00  1 2191      
    add dword[ebx+esi*4-8],1              ;#00467349: 203104263 F8 01            u  00 48  3 2192      
    mov [ebp-16] (o),esi                  ;#0046734E: 211165 F0                  vu 00 60  1 2194      
    cmp edx,h4                            ;#00467351: 201372 00000040            uv 00 04  1 2195      
    jle #0046743B                         ;#00467357: 017216 DE000000            v  00 00  1 2195      
    sub dword[ebx+edx*4-8],1              ;#0046735D: 203154223 F8 01            u  00 0C  3 2196      
    jne #0046743B                         ;#00467362: 017205 D3000000            v  00 00  1 2198      
    call #004639A8 (:%pDealloc)           ;#00467368: 350 3BC6FFFF               v  00 00  1 2199      
    jmp #0046743B                         ;#0046736D: 351 C9000000               v  00 00  1 2200      
;  2966                         else
;  2967                             o = "*** INVALID ??? ***"
    mov ecx,[#00402578]                   ;#00467372: 213015 78254000            uv 02 00  1 2201      
    mov edx,[ebp-16] (o)                  ;#00467378: 213125 F0                  vu 04 20  1 2201      
    cmp ecx,h4                            ;#0046737B: 201371 00000040            uv 00 02  1 2202      
    jl #00467388                          ;#00467381: 174 05                     v  00 00  1 2202      
    add dword[ebx+ecx*4-8],1              ;#00467383: 203104213 F8 01            u  00 0A  3 2203      
    mov [ebp-16] (o),ecx                  ;#00467388: 211115 F0                  vu 00 22  1 2205      
    cmp edx,h4                            ;#0046738B: 201372 00000040            uv 00 04  1 2206      
    jle #0046743B                         ;#00467391: 017216 A4000000            v  00 00  1 2206      
    sub dword[ebx+edx*4-8],1              ;#00467397: 203154223 F8 01            u  00 0C  3 2207      
    jne #0046743B                         ;#0046739C: 017205 99000000            v  00 00  1 2209      
    call #004639A8 (:%pDealloc)           ;#004673A2: 350 01C6FFFF               v  00 00  1 2210      
;  2968                         end if
    jmp #0046743B                         ;#004673A7: 351 8F000000               v  00 00  1 2211      
;  2969                     else
;  2970 --8/2/24:
;  2971 --                      o = sprint(o,55-length(name))
;  2972                         o = sprint(o,maxlen:=55-length(name))
    lea edi,[ebp-236] (symtab[1535])      ;#004673AC: 215275 14FFFFFF            uv 80 20  1 2212      
    mov esi,[ebp-12] (name)               ;#004673B2: 213165 F4                  vu 40 20  1 2212      
    mov edx,1312                          ;#004673B5: 272 20050000               uv 04 00  1 2213      
    call #0045EFEC (:%opLen)              ;#004673BA: 350 2D7CFFFF               v  00 00  1 2213      
    lea edi,[ebp-180] (symtab[1490])      ;#004673BF: 215275 4CFFFFFF            uv 80 20  1 2214      
    mov ecx,[#00402904]                   ;#004673C5: 213015 04294000            vu 02 00  1 2214      
    mov eax,[ebp-236] (symtab[1535])      ;#004673CB: 213205 14FFFFFF            uv 01 20  1 2215      
    call #0045F299 (:%opSub)              ;#004673D1: 350 C37EFFFF               v  00 00  1 2215      
    mov ecx,13                            ;#004673D6: 271 0D000000               uv 02 00  1 2216      
    mov edx,212                           ;#004673DB: 272 D4000000               vu 04 00  1 2216      
    call #00462C02 (:%opFrame) (sprint)   ;#004673E0: 350 1DB8FFFF               v  00 00  1 2217      
    mov edi,[ebp+20] (prevebp)            ;#004673E5: 213175 14                  uv 80 20  1 2218      
    mov eax,[edi-16]                      ;#004673E8: 213107 F0                  uv 01 80  1 2221 80 *80*
    mov [edi-16], dword h4                ;#004673EB: 307107 F0 00000040         vu 00 80  1 2221      
    cmp eax,h4                            ;#004673F2: 075 00000040               uv 00 01  1 2222      
    jne #00467403                         ;#004673F7: 165 0A                     v  00 00  1 2222      
    mov esi,1313                          ;#004673F9: 276 21050000               uv 40 00  1 2223      
    call #00462744 (:%pUnassigned)        ;#004673FE: 350 41B3FFFF               v  00 00  1 2223      
    mov [ebp] (x),eax                     ;#00467403: 211105 00                  uv 00 21  1 2224      
    mov edi,[ebp+20] (prevebp)            ;#00467406: 213175 14                  vu 80 20  1 2224      
    mov eax,[edi-180]                     ;#00467409: 213207 4CFFFFFF            uv 01 80  1 2227    *80*
    mov [ebp-8] (maxlen),eax              ;#0046740F: 211105 F8                  uv 00 21  1 2228 01   
    mov [ebp+28] (retaddr),#0046741E      ;#00467412: 307105 1C 1E744600         vu 00 20  1 2228      
    jmp #0045471E (code:sprint)           ;#00467419: 351 00D3FEFF               v  00 00  1 2229      
    push eax                              ;#0046741E: 120                        uv 00 01  1 2230      
    mov edi,[ebp-16] (o)                  ;#0046741F: 213175 F0                  vu 80 20  1 2230      
    cmp edi,h4                            ;#00467422: 201377 00000040            uv 00 80  1 2231      
    jle #00467438                         ;#00467428: 176 0E                     v  00 00  1 2231      
    sub dword[ebx+edi*4-8],1              ;#0046742A: 203154273 F8 01            u  00 88  3 2232      
    jne #00467438                         ;#0046742F: 165 07                     v  00 00  1 2234      
    mov edx,edi                           ;#00467431: 213327                     uv 04 80  1 2235      
    call #004639A8 (:%pDealloc)           ;#00467433: 350 70C5FFFF               v  00 00  1 2235      
    pop dword[ebp-16] (o)                 ;#00467438: 217105 F0                  np 00 20  3 2236      
;  2973                     end if
;  2974                 end if
;  2975             end if
;  2976         end if
;  2977 --      o = "??"--getValue(or_edi, 5, 0, 1)
;  2978         msg = sprintf(msg,{name,o}) -- "for loop error, %s is %s\n"
    lea eax,[ebp-244] (symtab[1538])      ;#0046743B: 215205 0CFFFFFF            uv 01 20  1 2239      
    mov edx,2                             ;#00467441: 272 02000000               vu 04 00  1 2239      
    push #00467483                        ;#00467446: 150 83744600               uv 00 00  1 2240      
    push eax                              ;#0046744B: 120                        vu 00 01  1 2240      
    mov esi,[ebp-16] (o)                  ;#0046744C: 213165 F0                  uv 40 20  1 2241      
    cmp esi,h4                            ;#0046744F: 201376 00000040            uv 00 40  1 2242 40   
    jl #00467461                          ;#00467455: 174 0A                     v  00 00  1 2242      
    add dword[ebx+esi*4-8],1              ;#00467457: 203104263 F8 01            u  00 48  3 2243      
    cmp eax,1313                          ;#0046745C: 075 21050000               vu 00 01  1 2245      
    push esi                              ;#00467461: 126                        uv 00 40  1 2246      
    mov ecx,[ebp-12] (name)               ;#00467462: 213115 F4                  vu 02 20  1 2246      
    cmp ecx,h4                            ;#00467465: 201371 00000040            uv 00 02  1 2247      
    jl #00467477                          ;#0046746B: 174 0A                     v  00 00  1 2247      
    add dword[ebx+ecx*4-8],1              ;#0046746D: 203104213 F8 01            u  00 0A  3 2248      
    cmp eax,1312                          ;#00467472: 075 20050000               vu 00 01  1 2250      
    push ecx                              ;#00467477: 121                        uv 00 02  1 2251      
    mov edi,[ebp-244] (symtab[1538])      ;#00467478: 213275 0CFFFFFF            vu 80 20  1 2251      
    jmp #00460143 (:%pMkSq)               ;#0046747E: 351 C08CFFFF               v  00 00  1 2252      
    mov ecx,2                             ;#00467483: 271 02000000               uv 02 00  1 2253      
    mov edx,210                           ;#00467488: 272 D2000000               vu 04 00  1 2253      
    call #00462C02 (:%opFrame) (sprintf)  ;#0046748D: 350 70B7FFFF               v  00 00  1 2254      
    mov edi,[ebp+20] (prevebp)            ;#00467492: 213175 14                  uv 80 20  1 2255      
    mov eax,[edi-52]                      ;#00467495: 213107 CC                  uv 01 80  1 2258 80 *80*
    mov [edi-52], dword h4                ;#00467498: 307107 CC 00000040         vu 00 80  1 2258      
    cmp eax,h4                            ;#0046749F: 075 00000040               uv 00 01  1 2259      
    jne #004674B0                         ;#004674A4: 165 0A                     v  00 00  1 2259      
    mov esi,1322                          ;#004674A6: 276 2A050000               uv 40 00  1 2260      
    call #00462744 (:%pUnassigned)        ;#004674AB: 350 94B2FFFF               v  00 00  1 2260      
    mov [ebp] (fmt),eax                   ;#004674B0: 211105 00                  uv 00 21  1 2261      
    mov edi,[ebp+20] (prevebp)            ;#004674B3: 213175 14                  vu 80 20  1 2261      
    mov eax,[edi-244]                     ;#004674B6: 213207 0CFFFFFF            uv 01 80  1 2264    *80*
    mov [edi-244], dword h4               ;#004674BC: 307207 0CFFFFFF 00000040   vu 00 80  1 2264      
    cmp eax,h4                            ;#004674C6: 075 00000040               uv 00 01  1 2265      
    jne #004674D7                         ;#004674CB: 165 0A                     v  00 00  1 2265      
    mov esi,1538                          ;#004674CD: 276 02060000               uv 40 00  1 2266      
    call #00462744 (:%pUnassigned)        ;#004674D2: 350 6DB2FFFF               v  00 00  1 2266      
    mov [ebp-4] (args),eax                ;#004674D7: 211105 FC                  uv 00 21  1 2267      
    mov [ebp+28] (retaddr),#004674E6      ;#004674DA: 307105 1C E6744600         vu 00 20  1 2267      
    jmp #00454E9A (code:sprintf)          ;#004674E1: 351 B4D9FEFF               v  00 00  1 2268      
    push eax                              ;#004674E6: 120                        uv 00 01  1 2269      
    mov esi,[ebp-52] (msg)                ;#004674E7: 213165 CC                  vu 40 20  1 2269      
    cmp esi,h4                            ;#004674EA: 201376 00000040            uv 00 40  1 2270      
    jle #00467500                         ;#004674F0: 176 0E                     v  00 00  1 2270      
    sub dword[ebx+esi*4-8],1              ;#004674F2: 203154263 F8 01            u  00 48  3 2271      
    jne #00467500                         ;#004674F7: 165 07                     v  00 00  1 2273      
    mov edx,esi                           ;#004674F9: 213326                     uv 04 40  1 2274      
    call #004639A8 (:%pDealloc)           ;#004674FB: 350 A8C4FFFF               v  00 00  1 2274      
    pop dword[ebp-52] (msg)               ;#00467500: 217105 CC                  np 00 20  3 2275      
;  2979 --      msg = sprintf(msg,{ep1})
    jmp #0046813B                         ;#00467503: 351 330C0000               v  00 00  1 2278      
;  2980     elsif msg_id=9 then -- e09slin(edi,ecx)
;  2981         msg = sprintf(msg,{or_edi,or_ecx})  -- "slice length is negative [%d..%d]\n"
    lea eax,[ebp-244] (symtab[1538])      ;#00467508: 215205 0CFFFFFF            uv 01 20  1 2279      
    mov edx,2                             ;#0046750E: 272 02000000               vu 04 00  1 2279      
    push #00467556                        ;#00467513: 150 56754600               uv 00 00  1 2280      
    push eax                              ;#00467518: 120                        vu 00 01  1 2280      
    mov ecx,[#0040260C] (or_ecx)          ;#00467519: 213015 0C264000            uv 02 00  1 2281      
    cmp ecx,h4                            ;#0046751F: 201371 00000040            uv 00 02  1 2282 02   
    jl #00467531                          ;#00467525: 174 0A                     v  00 00  1 2282      
    add dword[ebx+ecx*4-8],1              ;#00467527: 203104213 F8 01            u  00 0A  3 2283      
    cmp eax,1243                          ;#0046752C: 075 DB040000               vu 00 01  1 2285      
    push ecx                              ;#00467531: 121                        uv 00 02  1 2286      
    mov edi,[#0040261C] (or_edi)          ;#00467532: 213075 1C264000            vu 80 00  1 2286      
    cmp edi,h4                            ;#00467538: 201377 00000040            uv 00 80  1 2287      
    jl #0046754A                          ;#0046753E: 174 0A                     v  00 00  1 2287      
    add dword[ebx+edi*4-8],1              ;#00467540: 203104273 F8 01            u  00 88  3 2288      
    cmp eax,1247                          ;#00467545: 075 DF040000               vu 00 01  1 2290      
    push edi                              ;#0046754A: 127                        uv 00 80  1 2291      
    mov edi,[ebp-244] (symtab[1538])      ;#0046754B: 213275 0CFFFFFF            vu 80 20  1 2291      
    jmp #00460143 (:%pMkSq)               ;#00467551: 351 ED8BFFFF               v  00 00  1 2292      
    mov ecx,2                             ;#00467556: 271 02000000               uv 02 00  1 2293      
    mov edx,210                           ;#0046755B: 272 D2000000               vu 04 00  1 2293      
    call #00462C02 (:%opFrame) (sprintf)  ;#00467560: 350 9DB6FFFF               v  00 00  1 2294      
    mov edi,[ebp+20] (prevebp)            ;#00467565: 213175 14                  uv 80 20  1 2295      
    mov eax,[edi-52]                      ;#00467568: 213107 CC                  uv 01 80  1 2298 80 *80*
    mov [edi-52], dword h4                ;#0046756B: 307107 CC 00000040         vu 00 80  1 2298      
    cmp eax,h4                            ;#00467572: 075 00000040               uv 00 01  1 2299      
    jne #00467583                         ;#00467577: 165 0A                     v  00 00  1 2299      
    mov esi,1322                          ;#00467579: 276 2A050000               uv 40 00  1 2300      
    call #00462744 (:%pUnassigned)        ;#0046757E: 350 C1B1FFFF               v  00 00  1 2300      
    mov [ebp] (fmt),eax                   ;#00467583: 211105 00                  uv 00 21  1 2301      
    mov edi,[ebp+20] (prevebp)            ;#00467586: 213175 14                  vu 80 20  1 2301      
    mov eax,[edi-244]                     ;#00467589: 213207 0CFFFFFF            uv 01 80  1 2304    *80*
    mov [edi-244], dword h4               ;#0046758F: 307207 0CFFFFFF 00000040   vu 00 80  1 2304      
    cmp eax,h4                            ;#00467599: 075 00000040               uv 00 01  1 2305      
    jne #004675AA                         ;#0046759E: 165 0A                     v  00 00  1 2305      
    mov esi,1538                          ;#004675A0: 276 02060000               uv 40 00  1 2306      
    call #00462744 (:%pUnassigned)        ;#004675A5: 350 9AB1FFFF               v  00 00  1 2306      
    mov [ebp-4] (args),eax                ;#004675AA: 211105 FC                  uv 00 21  1 2307      
    mov [ebp+28] (retaddr),#004675B9      ;#004675AD: 307105 1C B9754600         vu 00 20  1 2307      
    jmp #00454E9A (code:sprintf)          ;#004675B4: 351 E1D8FEFF               v  00 00  1 2308      
    push eax                              ;#004675B9: 120                        uv 00 01  1 2309      
    mov esi,[ebp-52] (msg)                ;#004675BA: 213165 CC                  vu 40 20  1 2309      
    cmp esi,h4                            ;#004675BD: 201376 00000040            uv 00 40  1 2310      
    jle #004675D3                         ;#004675C3: 176 0E                     v  00 00  1 2310      
    sub dword[ebx+esi*4-8],1              ;#004675C5: 203154263 F8 01            u  00 48  3 2311      
    jne #004675D3                         ;#004675CA: 165 07                     v  00 00  1 2313      
    mov edx,esi                           ;#004675CC: 213326                     uv 04 40  1 2314      
    call #004639A8 (:%pDealloc)           ;#004675CE: 350 D5C3FFFF               v  00 00  1 2314      
    pop dword[ebp-52] (msg)               ;#004675D3: 217105 CC                  np 00 20  3 2315      
    jmp #0046813B                         ;#004675D6: 351 600B0000               v  00 00  1 2318      
;  2982     elsif msg_id=11 then -- e11sepeos(edi,esi)
;  2983         if or_edi<0 then
    xor edi,edi                           ;#004675DB: 061377                     uv 80 80  1 2319      
    mov eax,[#0040261C] (or_edi)          ;#004675DD: 241 1C264000               vu 01 00  1 2319      
    mov esi,25                            ;#004675E2: 276 19000000               uv 40 00  1 2320      
    mov edx,1247                          ;#004675E7: 272 DF040000               vu 04 00  1 2320      
    call #0045F8B0 (:%opJcc)              ;#004675EC: 350 BF82FFFF               v  00 00  1 2321      
    jge #004676CD                         ;#004675F1: 017215 D6000000            v  00 00  1 2322      
;  2984             msg = sprintf("slice end(%d) less than negative length(%d)\n",{or_edi,-or_esi})
    mov ecx,[#00402618] (or_esi)          ;#004675F7: 213015 18264000            uv 02 00  1 2323      
    cmp ecx,h4                            ;#004675FD: 201371 00000040            uv 00 02  1 2324 02   
    jne #0046760F                         ;#00467603: 165 0A                     v  00 00  1 2324      
    mov esi,1246                          ;#00467605: 276 DE040000               uv 40 00  1 2325      
    call #00462744 (:%pUnassigned)        ;#0046760A: 350 35B1FFFF               v  00 00  1 2325      
    lea edi,[ebp-180] (symtab[1490])      ;#0046760F: 215275 4CFFFFFF            uv 80 20  1 2326      
    call #0045F51F (:%opUminus)           ;#00467615: 350 057FFFFF               v  00 00  1 2326      
    lea eax,[ebp-244] (symtab[1538])      ;#0046761A: 215205 0CFFFFFF            uv 01 20  1 2327      
    mov edx,2                             ;#00467620: 272 02000000               vu 04 00  1 2327      
    push #0046765B                        ;#00467625: 150 5B764600               uv 00 00  1 2328      
    push eax                              ;#0046762A: 120                        vu 00 01  1 2328      
    push dword[ebp-180] (symtab[1490])    ;#0046762B: 377265 4CFFFFFF            np 00 20  2 2329      
    mov [ebp-180] (symtab[1490]),ebx      ;#00467631: 211235 4CFFFFFF            uv 00 28  1 2331      
    mov edi,[#0040261C] (or_edi)          ;#00467637: 213075 1C264000            vu 80 00  1 2331      
    cmp edi,h4                            ;#0046763D: 201377 00000040            uv 00 80  1 2332      
    jl #0046764F                          ;#00467643: 174 0A                     v  00 00  1 2332      
    add dword[ebx+edi*4-8],1              ;#00467645: 203104273 F8 01            u  00 88  3 2333      
    cmp eax,1247                          ;#0046764A: 075 DF040000               vu 00 01  1 2335      
    push edi                              ;#0046764F: 127                        uv 00 80  1 2336      
    mov edi,[ebp-244] (symtab[1538])      ;#00467650: 213275 0CFFFFFF            vu 80 20  1 2336      
    jmp #00460143 (:%pMkSq)               ;#00467656: 351 E88AFFFF               v  00 00  1 2337      
    mov ecx,2                             ;#0046765B: 271 02000000               uv 02 00  1 2338      
    mov edx,210                           ;#00467660: 272 D2000000               vu 04 00  1 2338      
    call #00462C02 (:%opFrame) (sprintf)  ;#00467665: 350 98B5FFFF               v  00 00  1 2339      
    mov esi,[#00402908]                   ;#0046766A: 213065 08294000            uv 40 00  1 2340      
    mov [ebp] (fmt),esi                   ;#00467670: 211165 00                  uv 00 60  1 2341 40   
    add dword[ebx+esi*4-8],1              ;#00467673: 203104263 F8 01            u  00 48  3 2343    *40*
    mov edi,[ebp+20] (prevebp)            ;#00467678: 213175 14                  vu 80 20  1 2345      
    mov eax,[edi-244]                     ;#0046767B: 213207 0CFFFFFF            uv 01 80  1 2348    *80*
    mov [edi-244], dword h4               ;#00467681: 307207 0CFFFFFF 00000040   vu 00 80  1 2348      
    cmp eax,h4                            ;#0046768B: 075 00000040               uv 00 01  1 2349      
    jne #0046769C                         ;#00467690: 165 0A                     v  00 00  1 2349      
    mov esi,1538                          ;#00467692: 276 02060000               uv 40 00  1 2350      
    call #00462744 (:%pUnassigned)        ;#00467697: 350 A8B0FFFF               v  00 00  1 2350      
    mov [ebp-4] (args),eax                ;#0046769C: 211105 FC                  uv 00 21  1 2351      
    mov [ebp+28] (retaddr),#004676AB      ;#0046769F: 307105 1C AB764600         vu 00 20  1 2351      
    jmp #00454E9A (code:sprintf)          ;#004676A6: 351 EFD7FEFF               v  00 00  1 2352      
    push eax                              ;#004676AB: 120                        uv 00 01  1 2353      
    mov ecx,[ebp-52] (msg)                ;#004676AC: 213115 CC                  vu 02 20  1 2353      
    cmp ecx,h4                            ;#004676AF: 201371 00000040            uv 00 02  1 2354      
    jle #004676C5                         ;#004676B5: 176 0E                     v  00 00  1 2354      
    sub dword[ebx+ecx*4-8],1              ;#004676B7: 203154213 F8 01            u  00 0A  3 2355      
    jne #004676C5                         ;#004676BC: 165 07                     v  00 00  1 2357      
    mov edx,ecx                           ;#004676BE: 213321                     uv 04 02  1 2358      
    call #004639A8 (:%pDealloc)           ;#004676C0: 350 E3C2FFFF               v  00 00  1 2358      
    pop dword[ebp-52] (msg)               ;#004676C5: 217105 CC                  np 00 20  3 2359      
    jmp #0046813B                         ;#004676C8: 351 6E0A0000               v  00 00  1 2362      
;  2985         else
;  2986             msg = sprintf(msg,{or_edi,or_esi})  -- "slice ends past end of sequence (%d > %d)\n"
    lea eax,[ebp-244] (symtab[1538])      ;#004676CD: 215205 0CFFFFFF            uv 01 20  1 2363      
    mov edx,2                             ;#004676D3: 272 02000000               vu 04 00  1 2363      
    push #0046771B                        ;#004676D8: 150 1B774600               uv 00 00  1 2364      
    push eax                              ;#004676DD: 120                        vu 00 01  1 2364      
    mov edi,[#00402618] (or_esi)          ;#004676DE: 213075 18264000            uv 80 00  1 2365      
    cmp edi,h4                            ;#004676E4: 201377 00000040            uv 00 80  1 2366 80   
    jl #004676F6                          ;#004676EA: 174 0A                     v  00 00  1 2366      
    add dword[ebx+edi*4-8],1              ;#004676EC: 203104273 F8 01            u  00 88  3 2367      
    cmp eax,1246                          ;#004676F1: 075 DE040000               vu 00 01  1 2369      
    push edi                              ;#004676F6: 127                        uv 00 80  1 2370      
    mov esi,[#0040261C] (or_edi)          ;#004676F7: 213065 1C264000            vu 40 00  1 2370      
    cmp esi,h4                            ;#004676FD: 201376 00000040            uv 00 40  1 2371      
    jl #0046770F                          ;#00467703: 174 0A                     v  00 00  1 2371      
    add dword[ebx+esi*4-8],1              ;#00467705: 203104263 F8 01            u  00 48  3 2372      
    cmp eax,1247                          ;#0046770A: 075 DF040000               vu 00 01  1 2374      
    push esi                              ;#0046770F: 126                        uv 00 40  1 2375      
    mov edi,[ebp-244] (symtab[1538])      ;#00467710: 213275 0CFFFFFF            vu 80 20  1 2375      
    jmp #00460143 (:%pMkSq)               ;#00467716: 351 288AFFFF               v  00 00  1 2376      
    mov ecx,2                             ;#0046771B: 271 02000000               uv 02 00  1 2377      
    mov edx,210                           ;#00467720: 272 D2000000               vu 04 00  1 2377      
    call #00462C02 (:%opFrame) (sprintf)  ;#00467725: 350 D8B4FFFF               v  00 00  1 2378      
    mov edi,[ebp+20] (prevebp)            ;#0046772A: 213175 14                  uv 80 20  1 2379      
    mov eax,[edi-52]                      ;#0046772D: 213107 CC                  uv 01 80  1 2382 80 *80*
    mov [edi-52], dword h4                ;#00467730: 307107 CC 00000040         vu 00 80  1 2382      
    cmp eax,h4                            ;#00467737: 075 00000040               uv 00 01  1 2383      
    jne #00467748                         ;#0046773C: 165 0A                     v  00 00  1 2383      
    mov esi,1322                          ;#0046773E: 276 2A050000               uv 40 00  1 2384      
    call #00462744 (:%pUnassigned)        ;#00467743: 350 FCAFFFFF               v  00 00  1 2384      
    mov [ebp] (fmt),eax                   ;#00467748: 211105 00                  uv 00 21  1 2385      
    mov edi,[ebp+20] (prevebp)            ;#0046774B: 213175 14                  vu 80 20  1 2385      
    mov eax,[edi-244]                     ;#0046774E: 213207 0CFFFFFF            uv 01 80  1 2388    *80*
    mov [edi-244], dword h4               ;#00467754: 307207 0CFFFFFF 00000040   vu 00 80  1 2388      
    cmp eax,h4                            ;#0046775E: 075 00000040               uv 00 01  1 2389      
    jne #0046776F                         ;#00467763: 165 0A                     v  00 00  1 2389      
    mov esi,1538                          ;#00467765: 276 02060000               uv 40 00  1 2390      
    call #00462744 (:%pUnassigned)        ;#0046776A: 350 D5AFFFFF               v  00 00  1 2390      
    mov [ebp-4] (args),eax                ;#0046776F: 211105 FC                  uv 00 21  1 2391      
    mov [ebp+28] (retaddr),#0046777E      ;#00467772: 307105 1C 7E774600         vu 00 20  1 2391      
    jmp #00454E9A (code:sprintf)          ;#00467779: 351 1CD7FEFF               v  00 00  1 2392      
    push eax                              ;#0046777E: 120                        uv 00 01  1 2393      
    mov ecx,[ebp-52] (msg)                ;#0046777F: 213115 CC                  vu 02 20  1 2393      
    cmp ecx,h4                            ;#00467782: 201371 00000040            uv 00 02  1 2394      
    jle #00467798                         ;#00467788: 176 0E                     v  00 00  1 2394      
    sub dword[ebx+ecx*4-8],1              ;#0046778A: 203154213 F8 01            u  00 0A  3 2395      
    jne #00467798                         ;#0046778F: 165 07                     v  00 00  1 2397      
    mov edx,ecx                           ;#00467791: 213321                     uv 04 02  1 2398      
    call #004639A8 (:%pDealloc)           ;#00467793: 350 10C2FFFF               v  00 00  1 2398      
    pop dword[ebp-52] (msg)               ;#00467798: 217105 CC                  np 00 20  3 2399      
;  2987         end if
    jmp #0046813B                         ;#0046779B: 351 9B090000               v  00 00  1 2402      
;  2988     elsif msg_id=72 then        -- e72iri(edi)
;  2989         msg = sprintf(msg,or_edi)
    mov ecx,2                             ;#004677A0: 271 02000000               uv 02 00  1 2403      
    mov edx,210                           ;#004677A5: 272 D2000000               vu 04 00  1 2403      
    call #00462C02 (:%opFrame) (sprintf)  ;#004677AA: 350 53B4FFFF               v  00 00  1 2404      
    mov edi,[ebp+20] (prevebp)            ;#004677AF: 213175 14                  uv 80 20  1 2405      
    mov eax,[edi-52]                      ;#004677B2: 213107 CC                  uv 01 80  1 2408 80 *80*
    mov [edi-52], dword h4                ;#004677B5: 307107 CC 00000040         vu 00 80  1 2408      
    cmp eax,h4                            ;#004677BC: 075 00000040               uv 00 01  1 2409      
    jne #004677CD                         ;#004677C1: 165 0A                     v  00 00  1 2409      
    mov esi,1322                          ;#004677C3: 276 2A050000               uv 40 00  1 2410      
    call #00462744 (:%pUnassigned)        ;#004677C8: 350 77AFFFFF               v  00 00  1 2410      
    mov [ebp] (fmt),eax                   ;#004677CD: 211105 00                  uv 00 21  1 2411      
    mov esi,[#0040261C] (or_edi)          ;#004677D0: 213065 1C264000            vu 40 00  1 2411      
    mov [ebp-4] (args),esi                ;#004677D6: 211165 FC                  uv 00 60  1 2412      
    cmp esi,h4                            ;#004677D9: 201376 00000040            vu 00 40  1 2412      
    jl #004677EB                          ;#004677DF: 174 0A                     v  00 00  1 2413      
    add dword[ebx+esi*4-8],1              ;#004677E1: 203104263 F8 01            u  00 48  3 2414      
    cmp eax,1247                          ;#004677E6: 075 DF040000               vu 00 01  1 2416      
    mov [ebp+28] (retaddr),#004677F7      ;#004677EB: 307105 1C F7774600         uv 00 20  1 2417      
    jmp #00454E9A (code:sprintf)          ;#004677F2: 351 A3D6FEFF               v  00 00  1 2417      
    push eax                              ;#004677F7: 120                        uv 00 01  1 2418      
    mov edi,[ebp-52] (msg)                ;#004677F8: 213175 CC                  vu 80 20  1 2418      
    cmp edi,h4                            ;#004677FB: 201377 00000040            uv 00 80  1 2419      
    jle #00467811                         ;#00467801: 176 0E                     v  00 00  1 2419      
    sub dword[ebx+edi*4-8],1              ;#00467803: 203154273 F8 01            u  00 88  3 2420      
    jne #00467811                         ;#00467808: 165 07                     v  00 00  1 2422      
    mov edx,edi                           ;#0046780A: 213327                     uv 04 80  1 2423      
    call #004639A8 (:%pDealloc)           ;#0046780C: 350 97C1FFFF               v  00 00  1 2423      
    pop dword[ebp-52] (msg)               ;#00467811: 217105 CC                  np 00 20  3 2424      
    jmp #0046813B                         ;#00467814: 351 22090000               v  00 00  1 2427      
;  2990     elsif msg_id=6              -- e06ioob(edi,esi)
;  2991        or msg_id=116 then       -- e116rrnp(edi,esi)
;  2992         msg = sprintf(msg,{or_edi,or_esi})
    lea eax,[ebp-244] (symtab[1538])      ;#00467819: 215205 0CFFFFFF            uv 01 20  1 2428      
    mov edx,2                             ;#0046781F: 272 02000000               vu 04 00  1 2428      
    push #00467865                        ;#00467824: 150 65784600               uv 00 00  1 2429      
    push eax                              ;#00467829: 120                        vu 00 01  1 2429      
    mov ecx,[#00402618] (or_esi)          ;#0046782A: 213015 18264000            uv 02 00  1 2430      
    cmp ecx,h4                            ;#00467830: 201371 00000040            uv 00 02  1 2431 02   
    jl #00467842                          ;#00467836: 174 0A                     v  00 00  1 2431      
    add dword[ebx+ecx*4-8],1              ;#00467838: 203104213 F8 01            u  00 0A  3 2432      
    cmp eax,1246                          ;#0046783D: 075 DE040000               vu 00 01  1 2434      
    push ecx                              ;#00467842: 121                        uv 00 02  1 2435      
    mov eax,[#0040261C] (or_edi)          ;#00467843: 241 1C264000               vu 01 00  1 2435      
    cmp eax,h4                            ;#00467848: 075 00000040               uv 00 01  1 2436      
    jl #00467859                          ;#0046784D: 174 0A                     v  00 00  1 2436      
    add dword[ebx+eax*4-8],1              ;#0046784F: 203104203 F8 01            u  00 09  3 2437      
    cmp eax,1247                          ;#00467854: 075 DF040000               vu 00 01  1 2439      
    push eax                              ;#00467859: 120                        uv 00 01  1 2440      
    mov edi,[ebp-244] (symtab[1538])      ;#0046785A: 213275 0CFFFFFF            vu 80 20  1 2440      
    jmp #00460143 (:%pMkSq)               ;#00467860: 351 DE88FFFF               v  00 00  1 2441      
    mov ecx,2                             ;#00467865: 271 02000000               uv 02 00  1 2442      
    mov edx,210                           ;#0046786A: 272 D2000000               vu 04 00  1 2442      
    call #00462C02 (:%opFrame) (sprintf)  ;#0046786F: 350 8EB3FFFF               v  00 00  1 2443      
    mov edi,[ebp+20] (prevebp)            ;#00467874: 213175 14                  uv 80 20  1 2444      
    mov eax,[edi-52]                      ;#00467877: 213107 CC                  uv 01 80  1 2447 80 *80*
    mov [edi-52], dword h4                ;#0046787A: 307107 CC 00000040         vu 00 80  1 2447      
    cmp eax,h4                            ;#00467881: 075 00000040               uv 00 01  1 2448      
    jne #00467892                         ;#00467886: 165 0A                     v  00 00  1 2448      
    mov esi,1322                          ;#00467888: 276 2A050000               uv 40 00  1 2449      
    call #00462744 (:%pUnassigned)        ;#0046788D: 350 B2AEFFFF               v  00 00  1 2449      
    mov [ebp] (fmt),eax                   ;#00467892: 211105 00                  uv 00 21  1 2450      
    mov edi,[ebp+20] (prevebp)            ;#00467895: 213175 14                  vu 80 20  1 2450      
    mov eax,[edi-244]                     ;#00467898: 213207 0CFFFFFF            uv 01 80  1 2453    *80*
    mov [edi-244], dword h4               ;#0046789E: 307207 0CFFFFFF 00000040   vu 00 80  1 2453      
    cmp eax,h4                            ;#004678A8: 075 00000040               uv 00 01  1 2454      
    jne #004678B9                         ;#004678AD: 165 0A                     v  00 00  1 2454      
    mov esi,1538                          ;#004678AF: 276 02060000               uv 40 00  1 2455      
    call #00462744 (:%pUnassigned)        ;#004678B4: 350 8BAEFFFF               v  00 00  1 2455      
    mov [ebp-4] (args),eax                ;#004678B9: 211105 FC                  uv 00 21  1 2456      
    mov [ebp+28] (retaddr),#004678C8      ;#004678BC: 307105 1C C8784600         vu 00 20  1 2456      
    jmp #00454E9A (code:sprintf)          ;#004678C3: 351 D2D5FEFF               v  00 00  1 2457      
    push eax                              ;#004678C8: 120                        uv 00 01  1 2458      
    mov esi,[ebp-52] (msg)                ;#004678C9: 213165 CC                  vu 40 20  1 2458      
    cmp esi,h4                            ;#004678CC: 201376 00000040            uv 00 40  1 2459      
    jle #004678E2                         ;#004678D2: 176 0E                     v  00 00  1 2459      
    sub dword[ebx+esi*4-8],1              ;#004678D4: 203154263 F8 01            u  00 48  3 2460      
    jne #004678E2                         ;#004678D9: 165 07                     v  00 00  1 2462      
    mov edx,esi                           ;#004678DB: 213326                     uv 04 40  1 2463      
    call #004639A8 (:%pDealloc)           ;#004678DD: 350 C6C0FFFF               v  00 00  1 2463      
    pop dword[ebp-52] (msg)               ;#004678E2: 217105 CC                  np 00 20  3 2464      
    jmp #0046813B                         ;#004678E5: 351 51080000               v  00 00  1 2467      
;  2993     elsif msg_id=14 then        -- e14soa(edi)
;  2994         if or_edi>=1 and or_edi<=length(e14ops) then
    mov edi,1                             ;#004678EA: 277 01000000               uv 80 00  1 2468      
    mov eax,[#0040261C] (or_edi)          ;#004678EF: 241 1C264000               vu 01 00  1 2468      
    mov esi,26                            ;#004678F4: 276 1A000000               uv 40 00  1 2469      
    mov edx,1247                          ;#004678F9: 272 DF040000               vu 04 00  1 2469      
    call #0045F8B0 (:%opJcc)              ;#004678FE: 350 AD7FFFFF               v  00 00  1 2470      
    jl #00467948                          ;#00467903: 174 43                     v  00 00  1 2471      
    mov [symtab[1535]], dword 14          ;#00467905: 307205 14FFFFFF 0E000000   uv 00 20  1 2472      
    mov edi,[ebp-236] (symtab[1535])      ;#0046790F: 213275 14FFFFFF            vu 80 20  1 2472      
    mov eax,[#0040261C] (or_edi)          ;#00467915: 241 1C264000               uv 01 00  1 2473      
    mov esi,1535                          ;#0046791A: 276 FF050000               vu 40 00  1 2473      
    mov edx,1247                          ;#0046791F: 272 DF040000               uv 04 00  1 2474      
    call #0045F8B0 (:%opJcc)              ;#00467924: 350 877FFFFF               v  00 00  1 2474      
    jg #00467948                          ;#00467929: 177 1D                     v  00 00  1 2475      
;  2995             o = e14ops[or_edi]
    mov edi,[#0040261C] (or_edi)          ;#0046792B: 213075 1C264000            uv 80 00  1 2476      
    lea ecx,[ebp-16] (o)                  ;#00467931: 215115 F0                  vu 02 20  1 2476      
    mov esi,[ebp-160] (e14ops)            ;#00467934: 213265 60FFFFFF            uv 40 20  1 2477      
    mov edx,1468                          ;#0046793A: 272 BC050000               vu 04 00  1 2477      
    mov al,0                              ;#0046793F: 260 00                     uv 01 00  1 2478      
    call #00460FE5 (:%pSubse1)            ;#00467941: 350 9F96FFFF               v  00 00  1 2478      
    jmp #004679A7                         ;#00467946: 353 5F                     v  00 00  1 2479      
;  2996         else
;  2997             o = sprintf("???(%d)",or_edi)
    mov ecx,2                             ;#00467948: 271 02000000               uv 02 00  1 2480      
    mov edx,210                           ;#0046794D: 272 D2000000               vu 04 00  1 2480      
    call #00462C02 (:%opFrame) (sprintf)  ;#00467952: 350 ABB2FFFF               v  00 00  1 2481      
    mov ecx,[#0040290C]                   ;#00467957: 213015 0C294000            uv 02 00  1 2482      
    mov [ebp] (fmt),ecx                   ;#0046795D: 211115 00                  uv 00 22  1 2483 02   
    add dword[ebx+ecx*4-8],1              ;#00467960: 203104213 F8 01            u  00 0A  3 2485    *02*
    mov eax,[#0040261C] (or_edi)          ;#00467965: 241 1C264000               vu 01 00  1 2487      
    mov [ebp-4] (args),eax                ;#0046796A: 211105 FC                  uv 00 21  1 2488      
    cmp eax,h4                            ;#0046796D: 075 00000040               vu 00 01  1 2488      
    jl #0046797E                          ;#00467972: 174 0A                     v  00 00  1 2489      
    add dword[ebx+eax*4-8],1              ;#00467974: 203104203 F8 01            u  00 09  3 2490      
    cmp eax,1247                          ;#00467979: 075 DF040000               vu 00 01  1 2492      
    mov [ebp+28] (retaddr),#0046798A      ;#0046797E: 307105 1C 8A794600         uv 00 20  1 2493      
    jmp #00454E9A (code:sprintf)          ;#00467985: 351 10D5FEFF               v  00 00  1 2493      
    push eax                              ;#0046798A: 120                        uv 00 01  1 2494      
    mov edi,[ebp-16] (o)                  ;#0046798B: 213175 F0                  vu 80 20  1 2494      
    cmp edi,h4                            ;#0046798E: 201377 00000040            uv 00 80  1 2495      
    jle #004679A4                         ;#00467994: 176 0E                     v  00 00  1 2495      
    sub dword[ebx+edi*4-8],1              ;#00467996: 203154273 F8 01            u  00 88  3 2496      
    jne #004679A4                         ;#0046799B: 165 07                     v  00 00  1 2498      
    mov edx,edi                           ;#0046799D: 213327                     uv 04 80  1 2499      
    call #004639A8 (:%pDealloc)           ;#0046799F: 350 04C0FFFF               v  00 00  1 2499      
    pop dword[ebp-16] (o)                 ;#004679A4: 217105 F0                  np 00 20  3 2500      
;  2998         end if
;  2999         msg = sprintf(msg,{o,o})
    lea eax,[ebp-244] (symtab[1538])      ;#004679A7: 215205 0CFFFFFF            uv 01 20  1 2503      
    mov edx,2                             ;#004679AD: 272 02000000               vu 04 00  1 2503      
    push #004679EC                        ;#004679B2: 150 EC794600               uv 00 00  1 2504      
    push eax                              ;#004679B7: 120                        vu 00 01  1 2504      
    mov esi,[ebp-16] (o)                  ;#004679B8: 213165 F0                  uv 40 20  1 2505      
    cmp esi,h4                            ;#004679BB: 201376 00000040            uv 00 40  1 2506 40   
    jl #004679CD                          ;#004679C1: 174 0A                     v  00 00  1 2506      
    add dword[ebx+esi*4-8],1              ;#004679C3: 203104263 F8 01            u  00 48  3 2507      
    cmp eax,1313                          ;#004679C8: 075 21050000               vu 00 01  1 2509      
    push esi                              ;#004679CD: 126                        uv 00 40  1 2510      
    cmp esi,h4                            ;#004679CE: 201376 00000040            vu 00 40  1 2510      
    jl #004679E0                          ;#004679D4: 174 0A                     v  00 00  1 2511      
    add dword[ebx+esi*4-8],1              ;#004679D6: 203104263 F8 01            u  00 48  3 2512      
    cmp eax,1313                          ;#004679DB: 075 21050000               vu 00 01  1 2514      
    push esi                              ;#004679E0: 126                        uv 00 40  1 2515      
    mov edi,[ebp-244] (symtab[1538])      ;#004679E1: 213275 0CFFFFFF            vu 80 20  1 2515      
    jmp #00460143 (:%pMkSq)               ;#004679E7: 351 5787FFFF               v  00 00  1 2516      
    mov ecx,2                             ;#004679EC: 271 02000000               uv 02 00  1 2517      
    mov edx,210                           ;#004679F1: 272 D2000000               vu 04 00  1 2517      
    call #00462C02 (:%opFrame) (sprintf)  ;#004679F6: 350 07B2FFFF               v  00 00  1 2518      
    mov edi,[ebp+20] (prevebp)            ;#004679FB: 213175 14                  uv 80 20  1 2519      
    mov eax,[edi-52]                      ;#004679FE: 213107 CC                  uv 01 80  1 2522 80 *80*
    mov [edi-52], dword h4                ;#00467A01: 307107 CC 00000040         vu 00 80  1 2522      
    cmp eax,h4                            ;#00467A08: 075 00000040               uv 00 01  1 2523      
    jne #00467A19                         ;#00467A0D: 165 0A                     v  00 00  1 2523      
    mov esi,1322                          ;#00467A0F: 276 2A050000               uv 40 00  1 2524      
    call #00462744 (:%pUnassigned)        ;#00467A14: 350 2BADFFFF               v  00 00  1 2524      
    mov [ebp] (fmt),eax                   ;#00467A19: 211105 00                  uv 00 21  1 2525      
    mov edi,[ebp+20] (prevebp)            ;#00467A1C: 213175 14                  vu 80 20  1 2525      
    mov eax,[edi-244]                     ;#00467A1F: 213207 0CFFFFFF            uv 01 80  1 2528    *80*
    mov [edi-244], dword h4               ;#00467A25: 307207 0CFFFFFF 00000040   vu 00 80  1 2528      
    cmp eax,h4                            ;#00467A2F: 075 00000040               uv 00 01  1 2529      
    jne #00467A40                         ;#00467A34: 165 0A                     v  00 00  1 2529      
    mov esi,1538                          ;#00467A36: 276 02060000               uv 40 00  1 2530      
    call #00462744 (:%pUnassigned)        ;#00467A3B: 350 04ADFFFF               v  00 00  1 2530      
    mov [ebp-4] (args),eax                ;#00467A40: 211105 FC                  uv 00 21  1 2531      
    mov [ebp+28] (retaddr),#00467A4F      ;#00467A43: 307105 1C 4F7A4600         vu 00 20  1 2531      
    jmp #00454E9A (code:sprintf)          ;#00467A4A: 351 4BD4FEFF               v  00 00  1 2532      
    push eax                              ;#00467A4F: 120                        uv 00 01  1 2533      
    mov ecx,[ebp-52] (msg)                ;#00467A50: 213115 CC                  vu 02 20  1 2533      
    cmp ecx,h4                            ;#00467A53: 201371 00000040            uv 00 02  1 2534      
    jle #00467A69                         ;#00467A59: 176 0E                     v  00 00  1 2534      
    sub dword[ebx+ecx*4-8],1              ;#00467A5B: 203154213 F8 01            u  00 0A  3 2535      
    jne #00467A69                         ;#00467A60: 165 07                     v  00 00  1 2537      
    mov edx,ecx                           ;#00467A62: 213321                     uv 04 02  1 2538      
    call #004639A8 (:%pDealloc)           ;#00467A64: 350 3FBFFFFF               v  00 00  1 2538      
    pop dword[ebp-52] (msg)               ;#00467A69: 217105 CC                  np 00 20  3 2539      
    jmp #0046813B                         ;#00467A6C: 351 CA060000               v  00 00  1 2542      
;  3000     elsif msg_id=108 then       -- e108pe(edi)
;  3001         msg = sprintf(msg,{or_edi})
    lea eax,[ebp-244] (symtab[1538])      ;#00467A71: 215205 0CFFFFFF            uv 01 20  1 2543      
    mov edx,1                             ;#00467A77: 272 01000000               vu 04 00  1 2543      
    push #00467AA6                        ;#00467A7C: 150 A67A4600               uv 00 00  1 2544      
    push eax                              ;#00467A81: 120                        vu 00 01  1 2544      
    mov esi,[#0040261C] (or_edi)          ;#00467A82: 213065 1C264000            uv 40 00  1 2545      
    cmp esi,h4                            ;#00467A88: 201376 00000040            uv 00 40  1 2546 40   
    jl #00467A9A                          ;#00467A8E: 174 0A                     v  00 00  1 2546      
    add dword[ebx+esi*4-8],1              ;#00467A90: 203104263 F8 01            u  00 48  3 2547      
    cmp eax,1247                          ;#00467A95: 075 DF040000               vu 00 01  1 2549      
    push esi                              ;#00467A9A: 126                        uv 00 40  1 2550      
    mov edi,[ebp-244] (symtab[1538])      ;#00467A9B: 213275 0CFFFFFF            vu 80 20  1 2550      
    jmp #00460143 (:%pMkSq)               ;#00467AA1: 351 9D86FFFF               v  00 00  1 2551      
    mov ecx,2                             ;#00467AA6: 271 02000000               uv 02 00  1 2552      
    mov edx,210                           ;#00467AAB: 272 D2000000               vu 04 00  1 2552      
    call #00462C02 (:%opFrame) (sprintf)  ;#00467AB0: 350 4DB1FFFF               v  00 00  1 2553      
    mov edi,[ebp+20] (prevebp)            ;#00467AB5: 213175 14                  uv 80 20  1 2554      
    mov eax,[edi-52]                      ;#00467AB8: 213107 CC                  uv 01 80  1 2557 80 *80*
    mov [edi-52], dword h4                ;#00467ABB: 307107 CC 00000040         vu 00 80  1 2557      
    cmp eax,h4                            ;#00467AC2: 075 00000040               uv 00 01  1 2558      
    jne #00467AD3                         ;#00467AC7: 165 0A                     v  00 00  1 2558      
    mov esi,1322                          ;#00467AC9: 276 2A050000               uv 40 00  1 2559      
    call #00462744 (:%pUnassigned)        ;#00467ACE: 350 71ACFFFF               v  00 00  1 2559      
    mov [ebp] (fmt),eax                   ;#00467AD3: 211105 00                  uv 00 21  1 2560      
    mov edi,[ebp+20] (prevebp)            ;#00467AD6: 213175 14                  vu 80 20  1 2560      
    mov eax,[edi-244]                     ;#00467AD9: 213207 0CFFFFFF            uv 01 80  1 2563    *80*
    mov [edi-244], dword h4               ;#00467ADF: 307207 0CFFFFFF 00000040   vu 00 80  1 2563      
    cmp eax,h4                            ;#00467AE9: 075 00000040               uv 00 01  1 2564      
    jne #00467AFA                         ;#00467AEE: 165 0A                     v  00 00  1 2564      
    mov esi,1538                          ;#00467AF0: 276 02060000               uv 40 00  1 2565      
    call #00462744 (:%pUnassigned)        ;#00467AF5: 350 4AACFFFF               v  00 00  1 2565      
    mov [ebp-4] (args),eax                ;#00467AFA: 211105 FC                  uv 00 21  1 2566      
    mov [ebp+28] (retaddr),#00467B09      ;#00467AFD: 307105 1C 097B4600         vu 00 20  1 2566      
    jmp #00454E9A (code:sprintf)          ;#00467B04: 351 91D3FEFF               v  00 00  1 2567      
    push eax                              ;#00467B09: 120                        uv 00 01  1 2568      
    mov ecx,[ebp-52] (msg)                ;#00467B0A: 213115 CC                  vu 02 20  1 2568      
    cmp ecx,h4                            ;#00467B0D: 201371 00000040            uv 00 02  1 2569      
    jle #00467B23                         ;#00467B13: 176 0E                     v  00 00  1 2569      
    sub dword[ebx+ecx*4-8],1              ;#00467B15: 203154213 F8 01            u  00 0A  3 2570      
    jne #00467B23                         ;#00467B1A: 165 07                     v  00 00  1 2572      
    mov edx,ecx                           ;#00467B1C: 213321                     uv 04 02  1 2573      
    call #004639A8 (:%pDealloc)           ;#00467B1E: 350 85BEFFFF               v  00 00  1 2573      
    pop dword[ebp-52] (msg)               ;#00467B23: 217105 CC                  np 00 20  3 2574      
    jmp #0046813B                         ;#00467B26: 351 10060000               v  00 00  1 2577      
;  3002     elsif msg_id=80 then        -- e80cbrna(esi)
;  3003         rid = or_esi    -- routine number
    mov esi,[#00402618] (or_esi)          ;#00467B2B: 213065 18264000            uv 40 00  1 2578      
    cmp esi,h4                            ;#00467B31: 201376 00000040            uv 00 40  1 2579 40   
    jne #00467B43                         ;#00467B37: 165 0A                     v  00 00  1 2579      
    mov esi,1246                          ;#00467B39: 276 DE040000               uv 40 00  1 2580      
    call #00462744 (:%pUnassigned)        ;#00467B3E: 350 01ACFFFF               v  00 00  1 2580      
    mov edx,[ebp-84] (rid)                ;#00467B43: 213125 AC                  uv 04 20  1 2581      
    cmp esi,h4                            ;#00467B46: 201376 00000040            vu 00 40  1 2581      
    jl #00467B58                          ;#00467B4C: 174 0A                     v  00 00  1 2582      
    add dword[ebx+esi*4-8],1              ;#00467B4E: 203104263 F8 01            u  00 48  3 2583      
    cmp eax,1246                          ;#00467B53: 075 DE040000               vu 00 01  1 2585      
    mov [ebp-84] (rid),esi                ;#00467B58: 211165 AC                  uv 00 60  1 2586      
    cmp edx,h4                            ;#00467B5B: 201372 00000040            vu 00 04  1 2586      
    jle #0046813B                         ;#00467B61: 017216 D4050000            v  00 00  1 2587      
    sub dword[ebx+edx*4-8],1              ;#00467B67: 203154223 F8 01            u  00 0C  3 2588      
    jne #0046813B                         ;#00467B6C: 017205 C9050000            v  00 00  1 2590      
    call #004639A8 (:%pDealloc)           ;#00467B72: 350 31BEFFFF               v  00 00  1 2591      
;  3004         -- (params/locals suppressed below, since they no longer exist)
    jmp #0046813B                         ;#00467B77: 351 BF050000               v  00 00  1 2592      
;  3005     elsif msg_id=53 then        -- e53mcat(esi,ecx)
;  3006         msg = sprintf(msg,{or_esi,or_ecx*4,or_ecx*4-or_esi})
    mov edi,[#0040260C] (or_ecx)          ;#00467B7C: 213075 0C264000            uv 80 00  1 2593      
    cmp edi,h4                            ;#00467B82: 201377 00000040            uv 00 80  1 2594 80   
    jne #00467B94                         ;#00467B88: 165 0A                     v  00 00  1 2594      
    mov esi,1243                          ;#00467B8A: 276 DB040000               uv 40 00  1 2595      
    call #00462744 (:%pUnassigned)        ;#00467B8F: 350 B0ABFFFF               v  00 00  1 2595      
    lea edi,[ebp-180] (symtab[1490])      ;#00467B94: 215275 4CFFFFFF            uv 80 20  1 2596      
    mov ecx,[#0040260C] (or_ecx)          ;#00467B9A: 213015 0C264000            vu 02 00  1 2596      
    mov eax,[#0040205C] (JS)              ;#00467BA0: 241 5C204000               uv 01 00  1 2597      
    call #0045F412 (:%opMul)              ;#00467BA5: 350 6878FFFF               v  00 00  1 2597      
    lea edi,[ebp-176] (symtab[1489])      ;#00467BAA: 215275 50FFFFFF            uv 80 20  1 2598      
    mov ecx,[#0040260C] (or_ecx)          ;#00467BB0: 213015 0C264000            vu 02 00  1 2598      
    mov eax,[#0040205C] (JS)              ;#00467BB6: 241 5C204000               uv 01 00  1 2599      
    call #0045F412 (:%opMul)              ;#00467BBB: 350 5278FFFF               v  00 00  1 2599      
    mov esi,[#00402618] (or_esi)          ;#00467BC0: 213065 18264000            uv 40 00  1 2600      
    cmp esi,h4                            ;#00467BC6: 201376 00000040            uv 00 40  1 2601 40   
    jne #00467BD8                         ;#00467BCC: 165 0A                     v  00 00  1 2601      
    mov esi,1246                          ;#00467BCE: 276 DE040000               uv 40 00  1 2602      
    call #00462744 (:%pUnassigned)        ;#00467BD3: 350 6CABFFFF               v  00 00  1 2602      
    lea edi,[ebp-248] (symtab[1543])      ;#00467BD8: 215275 08FFFFFF            uv 80 20  1 2603      
    mov ecx,[ebp-176] (symtab[1489])      ;#00467BDE: 213215 50FFFFFF            vu 02 20  1 2603      
    mov eax,esi                           ;#00467BE4: 211360                     uv 01 40  1 2604      
    call #0045F299 (:%opSub)              ;#00467BE6: 350 AE76FFFF               v  00 00  1 2604      
    lea eax,[ebp-244] (symtab[1538])      ;#00467BEB: 215205 0CFFFFFF            uv 01 20  1 2605      
    mov edx,3                             ;#00467BF1: 272 03000000               vu 04 00  1 2605      
    push #00467C38                        ;#00467BF6: 150 387C4600               uv 00 00  1 2606      
    push eax                              ;#00467BFB: 120                        vu 00 01  1 2606      
    push dword[ebp-248] (symtab[1543])    ;#00467BFC: 377265 08FFFFFF            np 00 20  2 2607      
    mov [ebp-248] (symtab[1543]),ebx      ;#00467C02: 211235 08FFFFFF            uv 00 28  1 2609      
    push dword[ebp-180] (symtab[1490])    ;#00467C08: 377265 4CFFFFFF            np 00 20  2 2610      
    mov [ebp-180] (symtab[1490]),ebx      ;#00467C0E: 211235 4CFFFFFF            uv 00 28  1 2612      
    mov edi,[#00402618] (or_esi)          ;#00467C14: 213075 18264000            vu 80 00  1 2612      
    cmp edi,h4                            ;#00467C1A: 201377 00000040            uv 00 80  1 2613      
    jl #00467C2C                          ;#00467C20: 174 0A                     v  00 00  1 2613      
    add dword[ebx+edi*4-8],1              ;#00467C22: 203104273 F8 01            u  00 88  3 2614      
    cmp eax,1246                          ;#00467C27: 075 DE040000               vu 00 01  1 2616      
    push edi                              ;#00467C2C: 127                        uv 00 80  1 2617      
    mov edi,[ebp-244] (symtab[1538])      ;#00467C2D: 213275 0CFFFFFF            vu 80 20  1 2617      
    jmp #00460143 (:%pMkSq)               ;#00467C33: 351 0B85FFFF               v  00 00  1 2618      
    mov ecx,2                             ;#00467C38: 271 02000000               uv 02 00  1 2619      
    mov edx,210                           ;#00467C3D: 272 D2000000               vu 04 00  1 2619      
    call #00462C02 (:%opFrame) (sprintf)  ;#00467C42: 350 BBAFFFFF               v  00 00  1 2620      
    mov edi,[ebp+20] (prevebp)            ;#00467C47: 213175 14                  uv 80 20  1 2621      
    mov eax,[edi-52]                      ;#00467C4A: 213107 CC                  uv 01 80  1 2624 80 *80*
    mov [edi-52], dword h4                ;#00467C4D: 307107 CC 00000040         vu 00 80  1 2624      
    cmp eax,h4                            ;#00467C54: 075 00000040               uv 00 01  1 2625      
    jne #00467C65                         ;#00467C59: 165 0A                     v  00 00  1 2625      
    mov esi,1322                          ;#00467C5B: 276 2A050000               uv 40 00  1 2626      
    call #00462744 (:%pUnassigned)        ;#00467C60: 350 DFAAFFFF               v  00 00  1 2626      
    mov [ebp] (fmt),eax                   ;#00467C65: 211105 00                  uv 00 21  1 2627      
    mov edi,[ebp+20] (prevebp)            ;#00467C68: 213175 14                  vu 80 20  1 2627      
    mov eax,[edi-244]                     ;#00467C6B: 213207 0CFFFFFF            uv 01 80  1 2630    *80*
    mov [edi-244], dword h4               ;#00467C71: 307207 0CFFFFFF 00000040   vu 00 80  1 2630      
    cmp eax,h4                            ;#00467C7B: 075 00000040               uv 00 01  1 2631      
    jne #00467C8C                         ;#00467C80: 165 0A                     v  00 00  1 2631      
    mov esi,1538                          ;#00467C82: 276 02060000               uv 40 00  1 2632      
    call #00462744 (:%pUnassigned)        ;#00467C87: 350 B8AAFFFF               v  00 00  1 2632      
    mov [ebp-4] (args),eax                ;#00467C8C: 211105 FC                  uv 00 21  1 2633      
    mov [ebp+28] (retaddr),#00467C9B      ;#00467C8F: 307105 1C 9B7C4600         vu 00 20  1 2633      
    jmp #00454E9A (code:sprintf)          ;#00467C96: 351 FFD1FEFF               v  00 00  1 2634      
    push eax                              ;#00467C9B: 120                        uv 00 01  1 2635      
    mov ecx,[ebp-52] (msg)                ;#00467C9C: 213115 CC                  vu 02 20  1 2635      
    cmp ecx,h4                            ;#00467C9F: 201371 00000040            uv 00 02  1 2636      
    jle #00467CB5                         ;#00467CA5: 176 0E                     v  00 00  1 2636      
    sub dword[ebx+ecx*4-8],1              ;#00467CA7: 203154213 F8 01            u  00 0A  3 2637      
    jne #00467CB5                         ;#00467CAC: 165 07                     v  00 00  1 2639      
    mov edx,ecx                           ;#00467CAE: 213321                     uv 04 02  1 2640      
    call #004639A8 (:%pDealloc)           ;#00467CB0: 350 F3BCFFFF               v  00 00  1 2640      
    pop dword[ebp-52] (msg)               ;#00467CB5: 217105 CC                  np 00 20  3 2641      
    jmp #0046813B                         ;#00467CB8: 351 7E040000               v  00 00  1 2644      
;  3007     elsif msg_id=88 then        -- e88atcfpmbaos(edi)
;  3008         msg = sprintf(msg,{iff(or_esi=1?"fun":"pro")})  -- c_func|c_proc
    mov edi,1                             ;#00467CBD: 277 01000000               uv 80 00  1 2645      
    mov eax,[#00402618] (or_esi)          ;#00467CC2: 241 18264000               vu 01 00  1 2645      
    mov esi,26                            ;#00467CC7: 276 1A000000               uv 40 00  1 2646      
    mov edx,1246                          ;#00467CCC: 272 DE040000               vu 04 00  1 2646      
    call #0045F91F (:%opJccE)             ;#00467CD1: 350 497CFFFF               v  00 00  1 2647      
    jne #00467D0D                         ;#00467CD6: 165 35                     v  00 00  1 2648      
    mov esi,[#00402918]                   ;#00467CD8: 213065 18294000            uv 40 00  1 2649      
    mov edx,[ebp-216] (symtab[1500])      ;#00467CDE: 213225 28FFFFFF            vu 04 20  1 2649      
    cmp esi,h4                            ;#00467CE4: 201376 00000040            uv 00 40  1 2650      
    jl #00467CF1                          ;#00467CEA: 174 05                     v  00 00  1 2650      
    add dword[ebx+esi*4-8],1              ;#00467CEC: 203104263 F8 01            u  00 48  3 2651      
    mov [ebp-216] (symtab[1500]),esi      ;#00467CF1: 211265 28FFFFFF            vu 00 60  1 2653      
    cmp edx,h4                            ;#00467CF7: 201372 00000040            uv 00 04  1 2654      
    jle #00467D40                         ;#00467CFD: 176 41                     v  00 00  1 2654      
    sub dword[ebx+edx*4-8],1              ;#00467CFF: 203154223 F8 01            u  00 0C  3 2655      
    jne #00467D40                         ;#00467D04: 165 3A                     v  00 00  1 2657      
    call #004639A8 (:%pDealloc)           ;#00467D06: 350 9DBCFFFF               v  00 00  1 2658      
    jmp #00467D40                         ;#00467D0B: 353 33                     v  00 00  1 2659      
    mov edi,[#0040291C]                   ;#00467D0D: 213075 1C294000            uv 80 00  1 2660      
    mov edx,[ebp-216] (symtab[1500])      ;#00467D13: 213225 28FFFFFF            vu 04 20  1 2660      
    cmp edi,h4                            ;#00467D19: 201377 00000040            uv 00 80  1 2661      
    jl #00467D26                          ;#00467D1F: 174 05                     v  00 00  1 2661      
    add dword[ebx+edi*4-8],1              ;#00467D21: 203104273 F8 01            u  00 88  3 2662      
    mov [ebp-216] (symtab[1500]),edi      ;#00467D26: 211275 28FFFFFF            vu 00 A0  1 2664      
    cmp edx,h4                            ;#00467D2C: 201372 00000040            uv 00 04  1 2665      
    jle #00467D40                         ;#00467D32: 176 0C                     v  00 00  1 2665      
    sub dword[ebx+edx*4-8],1              ;#00467D34: 203154223 F8 01            u  00 0C  3 2666      
    jne #00467D40                         ;#00467D39: 165 05                     v  00 00  1 2668      
    call #004639A8 (:%pDealloc)           ;#00467D3B: 350 68BCFFFF               v  00 00  1 2669      
    lea eax,[ebp-244] (symtab[1538])      ;#00467D40: 215205 0CFFFFFF            uv 01 20  1 2670      
    mov edx,1                             ;#00467D46: 272 01000000               vu 04 00  1 2670      
    push #00467D68                        ;#00467D4B: 150 687D4600               uv 00 00  1 2671      
    push eax                              ;#00467D50: 120                        vu 00 01  1 2671      
    push dword[ebp-216] (symtab[1500])    ;#00467D51: 377265 28FFFFFF            np 00 20  2 2672      
    mov [ebp-216] (symtab[1500]),ebx      ;#00467D57: 211235 28FFFFFF            uv 00 28  1 2674      
    mov edi,[ebp-244] (symtab[1538])      ;#00467D5D: 213275 0CFFFFFF            vu 80 20  1 2674      
    jmp #00460143 (:%pMkSq)               ;#00467D63: 351 DB83FFFF               v  00 00  1 2675      
    mov ecx,2                             ;#00467D68: 271 02000000               uv 02 00  1 2676      
    mov edx,210                           ;#00467D6D: 272 D2000000               vu 04 00  1 2676      
    call #00462C02 (:%opFrame) (sprintf)  ;#00467D72: 350 8BAEFFFF               v  00 00  1 2677      
    mov edi,[ebp+20] (prevebp)            ;#00467D77: 213175 14                  uv 80 20  1 2678      
    mov eax,[edi-52]                      ;#00467D7A: 213107 CC                  uv 01 80  1 2681 80 *80*
    mov [edi-52], dword h4                ;#00467D7D: 307107 CC 00000040         vu 00 80  1 2681      
    cmp eax,h4                            ;#00467D84: 075 00000040               uv 00 01  1 2682      
    jne #00467D95                         ;#00467D89: 165 0A                     v  00 00  1 2682      
    mov esi,1322                          ;#00467D8B: 276 2A050000               uv 40 00  1 2683      
    call #00462744 (:%pUnassigned)        ;#00467D90: 350 AFA9FFFF               v  00 00  1 2683      
    mov [ebp] (fmt),eax                   ;#00467D95: 211105 00                  uv 00 21  1 2684      
    mov edi,[ebp+20] (prevebp)            ;#00467D98: 213175 14                  vu 80 20  1 2684      
    mov eax,[edi-244]                     ;#00467D9B: 213207 0CFFFFFF            uv 01 80  1 2687    *80*
    mov [edi-244], dword h4               ;#00467DA1: 307207 0CFFFFFF 00000040   vu 00 80  1 2687      
    cmp eax,h4                            ;#00467DAB: 075 00000040               uv 00 01  1 2688      
    jne #00467DBC                         ;#00467DB0: 165 0A                     v  00 00  1 2688      
    mov esi,1538                          ;#00467DB2: 276 02060000               uv 40 00  1 2689      
    call #00462744 (:%pUnassigned)        ;#00467DB7: 350 88A9FFFF               v  00 00  1 2689      
    mov [ebp-4] (args),eax                ;#00467DBC: 211105 FC                  uv 00 21  1 2690      
    mov [ebp+28] (retaddr),#00467DCB      ;#00467DBF: 307105 1C CB7D4600         vu 00 20  1 2690      
    jmp #00454E9A (code:sprintf)          ;#00467DC6: 351 CFD0FEFF               v  00 00  1 2691      
    push eax                              ;#00467DCB: 120                        uv 00 01  1 2692      
    mov ecx,[ebp-52] (msg)                ;#00467DCC: 213115 CC                  vu 02 20  1 2692      
    cmp ecx,h4                            ;#00467DCF: 201371 00000040            uv 00 02  1 2693      
    jle #00467DE5                         ;#00467DD5: 176 0E                     v  00 00  1 2693      
    sub dword[ebx+ecx*4-8],1              ;#00467DD7: 203154213 F8 01            u  00 0A  3 2694      
    jne #00467DE5                         ;#00467DDC: 165 07                     v  00 00  1 2696      
    mov edx,ecx                           ;#00467DDE: 213321                     uv 04 02  1 2697      
    call #004639A8 (:%pDealloc)           ;#00467DE0: 350 C3BBFFFF               v  00 00  1 2697      
    pop dword[ebp-52] (msg)               ;#00467DE5: 217105 CC                  np 00 20  3 2698      
    jmp #0046813B                         ;#00467DE8: 351 4E030000               v  00 00  1 2701      
;  3009     elsif msg_id=68 then        -- e68crash
;  3010         msg = sprintf(msg,{crash_msg})  -- crash(xxxx)
    lea eax,[ebp-244] (symtab[1538])      ;#00467DED: 215205 0CFFFFFF            uv 01 20  1 2702      
    mov edx,1                             ;#00467DF3: 272 01000000               vu 04 00  1 2702      
    push #00467E22                        ;#00467DF8: 150 227E4600               uv 00 00  1 2703      
    push eax                              ;#00467DFD: 120                        vu 00 01  1 2703      
    mov esi,[#00402564] (crash_msg)       ;#00467DFE: 213065 64254000            uv 40 00  1 2704      
    cmp esi,h4                            ;#00467E04: 201376 00000040            uv 00 40  1 2705 40   
    jl #00467E16                          ;#00467E0A: 174 0A                     v  00 00  1 2705      
    add dword[ebx+esi*4-8],1              ;#00467E0C: 203104263 F8 01            u  00 48  3 2706      
    cmp eax,1150                          ;#00467E11: 075 7E040000               vu 00 01  1 2708      
    push esi                              ;#00467E16: 126                        uv 00 40  1 2709      
    mov edi,[ebp-244] (symtab[1538])      ;#00467E17: 213275 0CFFFFFF            vu 80 20  1 2709      
    jmp #00460143 (:%pMkSq)               ;#00467E1D: 351 2183FFFF               v  00 00  1 2710      
    mov ecx,2                             ;#00467E22: 271 02000000               uv 02 00  1 2711      
    mov edx,210                           ;#00467E27: 272 D2000000               vu 04 00  1 2711      
    call #00462C02 (:%opFrame) (sprintf)  ;#00467E2C: 350 D1ADFFFF               v  00 00  1 2712      
    mov edi,[ebp+20] (prevebp)            ;#00467E31: 213175 14                  uv 80 20  1 2713      
    mov eax,[edi-52]                      ;#00467E34: 213107 CC                  uv 01 80  1 2716 80 *80*
    mov [edi-52], dword h4                ;#00467E37: 307107 CC 00000040         vu 00 80  1 2716      
    cmp eax,h4                            ;#00467E3E: 075 00000040               uv 00 01  1 2717      
    jne #00467E4F                         ;#00467E43: 165 0A                     v  00 00  1 2717      
    mov esi,1322                          ;#00467E45: 276 2A050000               uv 40 00  1 2718      
    call #00462744 (:%pUnassigned)        ;#00467E4A: 350 F5A8FFFF               v  00 00  1 2718      
    mov [ebp] (fmt),eax                   ;#00467E4F: 211105 00                  uv 00 21  1 2719      
    mov edi,[ebp+20] (prevebp)            ;#00467E52: 213175 14                  vu 80 20  1 2719      
    mov eax,[edi-244]                     ;#00467E55: 213207 0CFFFFFF            uv 01 80  1 2722    *80*
    mov [edi-244], dword h4               ;#00467E5B: 307207 0CFFFFFF 00000040   vu 00 80  1 2722      
    cmp eax,h4                            ;#00467E65: 075 00000040               uv 00 01  1 2723      
    jne #00467E76                         ;#00467E6A: 165 0A                     v  00 00  1 2723      
    mov esi,1538                          ;#00467E6C: 276 02060000               uv 40 00  1 2724      
    call #00462744 (:%pUnassigned)        ;#00467E71: 350 CEA8FFFF               v  00 00  1 2724      
    mov [ebp-4] (args),eax                ;#00467E76: 211105 FC                  uv 00 21  1 2725      
    mov [ebp+28] (retaddr),#00467E85      ;#00467E79: 307105 1C 857E4600         vu 00 20  1 2725      
    jmp #00454E9A (code:sprintf)          ;#00467E80: 351 15D0FEFF               v  00 00  1 2726      
    push eax                              ;#00467E85: 120                        uv 00 01  1 2727      
    mov ecx,[ebp-52] (msg)                ;#00467E86: 213115 CC                  vu 02 20  1 2727      
    cmp ecx,h4                            ;#00467E89: 201371 00000040            uv 00 02  1 2728      
    jle #00467E9F                         ;#00467E8F: 176 0E                     v  00 00  1 2728      
    sub dword[ebx+ecx*4-8],1              ;#00467E91: 203154213 F8 01            u  00 0A  3 2729      
    jne #00467E9F                         ;#00467E96: 165 07                     v  00 00  1 2731      
    mov edx,ecx                           ;#00467E98: 213321                     uv 04 02  1 2732      
    call #004639A8 (:%pDealloc)           ;#00467E9A: 350 09BBFFFF               v  00 00  1 2732      
    pop dword[ebp-52] (msg)               ;#00467E9F: 217105 CC                  np 00 20  3 2733      
    jmp #0046813B                         ;#00467EA2: 351 94020000               v  00 00  1 2736      
;  3011     elsif msg_id=42 then        -- e42a(ecx)
;  3012         msg = sprintf(msg,{or_ecx})
    lea eax,[ebp-244] (symtab[1538])      ;#00467EA7: 215205 0CFFFFFF            uv 01 20  1 2737      
    mov edx,1                             ;#00467EAD: 272 01000000               vu 04 00  1 2737      
    push #00467EDC                        ;#00467EB2: 150 DC7E4600               uv 00 00  1 2738      
    push eax                              ;#00467EB7: 120                        vu 00 01  1 2738      
    mov esi,[#0040260C] (or_ecx)          ;#00467EB8: 213065 0C264000            uv 40 00  1 2739      
    cmp esi,h4                            ;#00467EBE: 201376 00000040            uv 00 40  1 2740 40   
    jl #00467ED0                          ;#00467EC4: 174 0A                     v  00 00  1 2740      
    add dword[ebx+esi*4-8],1              ;#00467EC6: 203104263 F8 01            u  00 48  3 2741      
    cmp eax,1243                          ;#00467ECB: 075 DB040000               vu 00 01  1 2743      
    push esi                              ;#00467ED0: 126                        uv 00 40  1 2744      
    mov edi,[ebp-244] (symtab[1538])      ;#00467ED1: 213275 0CFFFFFF            vu 80 20  1 2744      
    jmp #00460143 (:%pMkSq)               ;#00467ED7: 351 6782FFFF               v  00 00  1 2745      
    mov ecx,2                             ;#00467EDC: 271 02000000               uv 02 00  1 2746      
    mov edx,210                           ;#00467EE1: 272 D2000000               vu 04 00  1 2746      
    call #00462C02 (:%opFrame) (sprintf)  ;#00467EE6: 350 17ADFFFF               v  00 00  1 2747      
    mov edi,[ebp+20] (prevebp)            ;#00467EEB: 213175 14                  uv 80 20  1 2748      
    mov eax,[edi-52]                      ;#00467EEE: 213107 CC                  uv 01 80  1 2751 80 *80*
    mov [edi-52], dword h4                ;#00467EF1: 307107 CC 00000040         vu 00 80  1 2751      
    cmp eax,h4                            ;#00467EF8: 075 00000040               uv 00 01  1 2752      
    jne #00467F09                         ;#00467EFD: 165 0A                     v  00 00  1 2752      
    mov esi,1322                          ;#00467EFF: 276 2A050000               uv 40 00  1 2753      
    call #00462744 (:%pUnassigned)        ;#00467F04: 350 3BA8FFFF               v  00 00  1 2753      
    mov [ebp] (fmt),eax                   ;#00467F09: 211105 00                  uv 00 21  1 2754      
    mov edi,[ebp+20] (prevebp)            ;#00467F0C: 213175 14                  vu 80 20  1 2754      
    mov eax,[edi-244]                     ;#00467F0F: 213207 0CFFFFFF            uv 01 80  1 2757    *80*
    mov [edi-244], dword h4               ;#00467F15: 307207 0CFFFFFF 00000040   vu 00 80  1 2757      
    cmp eax,h4                            ;#00467F1F: 075 00000040               uv 00 01  1 2758      
    jne #00467F30                         ;#00467F24: 165 0A                     v  00 00  1 2758      
    mov esi,1538                          ;#00467F26: 276 02060000               uv 40 00  1 2759      
    call #00462744 (:%pUnassigned)        ;#00467F2B: 350 14A8FFFF               v  00 00  1 2759      
    mov [ebp-4] (args),eax                ;#00467F30: 211105 FC                  uv 00 21  1 2760      
    mov [ebp+28] (retaddr),#00467F3F      ;#00467F33: 307105 1C 3F7F4600         vu 00 20  1 2760      
    jmp #00454E9A (code:sprintf)          ;#00467F3A: 351 5BCFFEFF               v  00 00  1 2761      
    push eax                              ;#00467F3F: 120                        uv 00 01  1 2762      
    mov ecx,[ebp-52] (msg)                ;#00467F40: 213115 CC                  vu 02 20  1 2762      
    cmp ecx,h4                            ;#00467F43: 201371 00000040            uv 00 02  1 2763      
    jle #00467F59                         ;#00467F49: 176 0E                     v  00 00  1 2763      
    sub dword[ebx+ecx*4-8],1              ;#00467F4B: 203154213 F8 01            u  00 0A  3 2764      
    jne #00467F59                         ;#00467F50: 165 07                     v  00 00  1 2766      
    mov edx,ecx                           ;#00467F52: 213321                     uv 04 02  1 2767      
    call #004639A8 (:%pDealloc)           ;#00467F54: 350 4FBAFFFF               v  00 00  1 2767      
    pop dword[ebp-52] (msg)               ;#00467F59: 217105 CC                  np 00 20  3 2768      
    jmp #0046813B                         ;#00467F5C: 351 DA010000               v  00 00  1 2771      
;  3013     elsif msg_id=55 then
;  3014         integer lm = length(msg)
    lea edi,[ebp-252] (lm)                ;#00467F61: 215275 04FFFFFF            uv 80 20  1 2772      
    mov esi,[ebp-52] (msg)                ;#00467F67: 213165 CC                  vu 40 20  1 2772      
    mov edx,1322                          ;#00467F6A: 272 2A050000               uv 04 00  1 2773      
    call #0045EFEC (:%opLen)              ;#00467F6F: 350 7870FFFF               v  00 00  1 2773      
;  3015         if string(throwee) and lm<70 then
    mov edi,[#004025EC] (throwee)         ;#00467F74: 213075 EC254000            uv 80 00  1 2774      
    cmp edi,h4                            ;#00467F7A: 201377 00000040            uv 00 80  1 2775 80   
    jne #00467F8C                         ;#00467F80: 165 0A                     v  00 00  1 2775      
    mov esi,1220                          ;#00467F82: 276 C4040000               uv 40 00  1 2776      
    call #00462744 (:%pUnassigned)        ;#00467F87: 350 B8A7FFFF               v  00 00  1 2776      
    mov eax,edi                           ;#00467F8C: 211370                     uv 01 80  1 2777      
    mov ecx,1220                          ;#00467F8E: 271 C4040000               vu 02 00  1 2777      
    call #0045F9C4 (:%opStr0)             ;#00467F93: 350 2C7AFFFF               v  00 00  1 2778      
    test edx,edx                          ;#00467F98: 205322                     uv 00 04  1 2779      
    je #0046813B                          ;#00467F9A: 017204 9B010000            v  00 00  1 2779      
    mov esi,[ebp-252] (lm)                ;#00467FA0: 213265 04FFFFFF            uv 40 20  1 2780      
    cmp esi,70                            ;#00467FA6: 203376 46                  uv 00 40  1 2781 40   
    jge #0046813B                         ;#00467FA9: 017215 8C010000            v  00 00  1 2781      
;  3016             integer lt = length(throwee)
    lea edi,[ebp-256] (lt)                ;#00467FAF: 215275 00FFFFFF            uv 80 20  1 2782      
    mov esi,eax                           ;#00467FB5: 211306                     vu 40 01  1 2782      
    mov edx,1220                          ;#00467FB7: 272 C4040000               uv 04 00  1 2783      
    call #0045EFEC (:%opLen)              ;#00467FBC: 350 2B70FFFF               v  00 00  1 2783      
;  3017             if lt+lm>76 then
    lea edi,[ebp-180] (symtab[1490])      ;#00467FC1: 215275 4CFFFFFF            uv 80 20  1 2784      
    mov eax,[ebp-252] (lm)                ;#00467FC7: 213205 04FFFFFF            vu 01 20  1 2784      
    call #0045F261 (:%opAdd)              ;#00467FCD: 350 8F72FFFF               v  00 00  1 2785      
    mov edi,76                            ;#00467FD2: 277 4C000000               uv 80 00  1 2786      
    mov eax,[ebp-180] (symtab[1490])      ;#00467FD7: 213205 4CFFFFFF            vu 01 20  1 2786      
    mov esi,1549                          ;#00467FDD: 276 0D060000               uv 40 00  1 2787      
    mov edx,1490                          ;#00467FE2: 272 D2050000               vu 04 00  1 2787      
    call #0045F8B0 (:%opJcc)              ;#00467FE7: 350 C478FFFF               v  00 00  1 2788      
    jle #0046805A                         ;#00467FEC: 176 6C                     v  00 00  1 2789      
;  3018                 throwee[74-(lt+lm)..$] = "..."
    lea edi,[ebp-180] (symtab[1490])      ;#00467FEE: 215275 4CFFFFFF            uv 80 20  1 2790      
    mov ecx,[ebp-256] (lt)                ;#00467FF4: 213215 00FFFFFF            vu 02 20  1 2790      
    mov eax,[ebp-252] (lm)                ;#00467FFA: 213205 04FFFFFF            uv 01 20  1 2791      
    call #0045F261 (:%opAdd)              ;#00468000: 350 5C72FFFF               v  00 00  1 2791      
    lea edi,[ebp-248] (symtab[1543])      ;#00468005: 215275 08FFFFFF            uv 80 20  1 2792      
    mov ecx,[#00402928] (e74dcfpe)        ;#0046800B: 213015 28294000            vu 02 00  1 2792      
    mov eax,[ebp-180] (symtab[1490])      ;#00468011: 213205 4CFFFFFF            uv 01 20  1 2793      
    call #0045F299 (:%opSub)              ;#00468017: 350 7D72FFFF               v  00 00  1 2793      
    mov edi,[#004025EC] (throwee)         ;#0046801C: 213075 EC254000            uv 80 00  1 2794      
    cmp edi,h4                            ;#00468022: 201377 00000040            uv 00 80  1 2795 80   
    jne #00468034                         ;#00468028: 165 0A                     v  00 00  1 2795      
    mov esi,1220                          ;#0046802A: 276 C4040000               uv 40 00  1 2796      
    call #00462744 (:%pUnassigned)        ;#0046802F: 350 10A7FFFF               v  00 00  1 2796      
    mov ecx,1                             ;#00468034: 271 01000000               uv 02 00  1 2797      
    push #0046805A                        ;#00468039: 150 5A804600               vu 00 00  1 2797      
    push dword[#0040292C]                 ;#0046803E: 377065 2C294000            np 00 00  2 2798      
    push dword[#00402014]                 ;#00468044: 377065 14204000            np 00 00  2 2800      
    push dword[ebp-248] (symtab[1543])    ;#0046804A: 377265 08FFFFFF            np 00 20  2 2802      
    mov eax,#004025EC                     ;#00468050: 270 EC254000               uv 01 00  1 2804      
    jmp #0046019E (:%pReps)               ;#00468055: 351 4481FFFF               v  00 00  1 2804      
;  3019             end if
;  3020             msg = sprintf("%s (%s)\n",{msg[1..$-1],throwee})
    mov esi,[ebp-52] (msg)                ;#0046805A: 213165 CC                  uv 40 20  1 2805      
    cmp esi,h4                            ;#0046805D: 201376 00000040            uv 00 40  1 2806 40   
    jne #0046806F                         ;#00468063: 165 0A                     v  00 00  1 2806      
    mov esi,1322                          ;#00468065: 276 2A050000               uv 40 00  1 2807      
    call #00462744 (:%pUnassigned)        ;#0046806A: 350 D5A6FFFF               v  00 00  1 2807      
    lea edx,[ebp-220] (symtab[1501])      ;#0046806F: 215225 24FFFFFF            uv 04 20  1 2808      
    mov ecx,1                             ;#00468075: 271 01000000               vu 02 00  1 2808      
    push #0046808E                        ;#0046807A: 150 8E804600               uv 00 00  1 2809      
    push edx                              ;#0046807F: 122                        vu 00 04  1 2809      
    push -2                               ;#00468080: 152 FE                     uv 00 00  1 2810      
    push 1                                ;#00468082: 152 01                     vu 00 00  1 2810      
    mov edx,1322                          ;#00468084: 272 2A050000               uv 04 00  1 2811      
    jmp #00460A75 (:%pSubss)              ;#00468089: 351 E789FFFF               v  00 00  1 2811      
    lea eax,[ebp-244] (symtab[1538])      ;#0046808E: 215205 0CFFFFFF            uv 01 20  1 2812      
    mov edx,2                             ;#00468094: 272 02000000               vu 04 00  1 2812      
    push #004680CF                        ;#00468099: 150 CF804600               uv 00 00  1 2813      
    push eax                              ;#0046809E: 120                        vu 00 01  1 2813      
    mov ecx,[#004025EC] (throwee)         ;#0046809F: 213015 EC254000            uv 02 00  1 2814      
    cmp ecx,h4                            ;#004680A5: 201371 00000040            uv 00 02  1 2815 02   
    jl #004680B7                          ;#004680AB: 174 0A                     v  00 00  1 2815      
    add dword[ebx+ecx*4-8],1              ;#004680AD: 203104213 F8 01            u  00 0A  3 2816      
    cmp eax,1220                          ;#004680B2: 075 C4040000               vu 00 01  1 2818      
    push ecx                              ;#004680B7: 121                        uv 00 02  1 2819      
    push dword[ebp-220] (symtab[1501])    ;#004680B8: 377265 24FFFFFF            np 00 20  2 2820      
    mov [ebp-220] (symtab[1501]),ebx      ;#004680BE: 211235 24FFFFFF            uv 00 28  1 2822      
    mov edi,[ebp-244] (symtab[1538])      ;#004680C4: 213275 0CFFFFFF            vu 80 20  1 2822      
    jmp #00460143 (:%pMkSq)               ;#004680CA: 351 7480FFFF               v  00 00  1 2823      
    mov ecx,2                             ;#004680CF: 271 02000000               uv 02 00  1 2824      
    mov edx,210                           ;#004680D4: 272 D2000000               vu 04 00  1 2824      
    call #00462C02 (:%opFrame) (sprintf)  ;#004680D9: 350 24ABFFFF               v  00 00  1 2825      
    mov eax,[#00402930]                   ;#004680DE: 241 30294000               uv 01 00  1 2826      
    mov [ebp] (fmt),eax                   ;#004680E3: 211105 00                  uv 00 21  1 2827 01   
    add dword[ebx+eax*4-8],1              ;#004680E6: 203104203 F8 01            u  00 09  3 2829    *01*
    mov edi,[ebp+20] (prevebp)            ;#004680EB: 213175 14                  vu 80 20  1 2831      
    mov eax,[edi-244]                     ;#004680EE: 213207 0CFFFFFF            uv 01 80  1 2834    *80*
    mov [edi-244], dword h4               ;#004680F4: 307207 0CFFFFFF 00000040   vu 00 80  1 2834      
    cmp eax,h4                            ;#004680FE: 075 00000040               uv 00 01  1 2835      
    jne #0046810F                         ;#00468103: 165 0A                     v  00 00  1 2835      
    mov esi,1538                          ;#00468105: 276 02060000               uv 40 00  1 2836      
    call #00462744 (:%pUnassigned)        ;#0046810A: 350 35A6FFFF               v  00 00  1 2836      
    mov [ebp-4] (args),eax                ;#0046810F: 211105 FC                  uv 00 21  1 2837      
    mov [ebp+28] (retaddr),#0046811E      ;#00468112: 307105 1C 1E814600         vu 00 20  1 2837      
    jmp #00454E9A (code:sprintf)          ;#00468119: 351 7CCDFEFF               v  00 00  1 2838      
    push eax                              ;#0046811E: 120                        uv 00 01  1 2839      
    mov esi,[ebp-52] (msg)                ;#0046811F: 213165 CC                  vu 40 20  1 2839      
    cmp esi,h4                            ;#00468122: 201376 00000040            uv 00 40  1 2840      
    jle #00468138                         ;#00468128: 176 0E                     v  00 00  1 2840      
    sub dword[ebx+esi*4-8],1              ;#0046812A: 203154263 F8 01            u  00 48  3 2841      
    jne #00468138                         ;#0046812F: 165 07                     v  00 00  1 2843      
    mov edx,esi                           ;#00468131: 213326                     uv 04 40  1 2844      
    call #004639A8 (:%pDealloc)           ;#00468133: 350 70B8FFFF               v  00 00  1 2844      
    pop dword[ebp-52] (msg)               ;#00468138: 217105 CC                  np 00 20  3 2845      
;  3021         end if
;  3022     end if
;  3023 --?2
;  3024 --/*
;  3025 
;  3026     if msg_id=1         -- e01tcf (ep1 is var idx)
;  3027     or msg_id=110 then  -- e110tce (ep1 is var addr)
;  3028         if msg_id=110 then
;  3029             ep1 = varIdx(ep1)
;  3030         end if
;  3031         si = "???"
;  3032         if ep1>0 and ep1<=length(symtab) then
;  3033             si = symtab[ep1][S_Name]
;  3034             if atom(si) then
;  3035                 si = sprintf("???(name=%d)",si)
;  3036             end if
;  3037         end if
;  3038         o = getValue(ep1, 50, length(si)+17, 1)
;  3039         msg = sprintf(msg,{si,o})       -- "type check failure, %s is %s\n"
;  3040     elsif msg_id=10         -- e10sspeos
;  3041       and ep1<0 then
;  3042         msg = sprintf("slice start(%d) less than negative length(%d)\n",{ep1,-ep2})
;  3043     elsif msg_id=11         -- e11sepeos
;  3044       and ep1<0 then
;  3045         msg = sprintf("slice end(%d) less than negative length(%d)\n",{ep1,-ep2})
;  3046     elsif msg_id=6          -- e06ioob
;  3047        or msg_id=9          -- e09slin
;  3048        or msg_id=10         -- e10sspeos
;  3049        or msg_id=11         -- e11sepeos
;  3050        or msg_id=31         -- e31mce
;  3051        or msg_id=116 then   -- e116rrnp
;  3052         msg = sprintf(msg,{ep1,ep2})
;  3053 --  elsif msg_id=120 then   -- e120fle
;  3054 ----        c = varIdx(ep1)
;  3055 --      o = getValue(ep1, 5, 0, 1)
;  3056 --      if ep2=1 then
;  3057 --          si = "init"
;  3058 --      elsif ep2=2 then
;  3059 --          si = "limit"
;  3060 --      elsif ep2=4 then
;  3061 --          si = "step"
;  3062 --      else
;  3063 --          si = "???"
;  3064 --      end if
;  3065 --      msg = sprintf(msg,{si,o})
;  3066 ----        msg = sprintf(msg,{ep1})
;  3067     elsif msg_id=121 then   -- e121flelimstep
;  3068         c = varIdx(ep1)
;  3069         o = getValue(c, 5, 0, 1)
;  3070         c = varIdx(ep2)
;  3071         o2 = getValue(c, 5, 0, 1)
;  3072         msg = sprintf(msg,{o,o2})
;  3073     elsif msg_id=28 then    -- e28NNatXmbausq
;  3074         if ep1>=1 and ep1<=length(e28ops) then
;  3075             o = e28ops[ep1]
;  3076         else
;  3077             o = "???"
;  3078         end if
;  3079         msg = sprintf(msg,{o,o})
;  3080     elsif msg_id=30 then    -- e30ume
;  3081         -- Map any machine exceptions that occur on inc/add1 (refcount) 
;  3082         --  followed by a "helper" cmp eax,<varno>; ==> to e92:
;  3083         x6 = peek({era,6})
;  3084         --  inc dword[ebx+src*4-8]      377104 2s3 F8
;  3085         --  add dword[ebx+src*4-8],1    203104 2s3 F8 01
;  3086         if x6[2]=0o104
;  3087         and and_bits(x6[3],0o307)=0o203         -- sib(maybe!) of 0o2s3,
;  3088         and x6[4]=#F8 then                      -- displacement is -8
;  3089 --DEV 64-bit
;  3090             if x6[1]=0o377 -- inc
;  3091             and x6[5]=cmp_eax_imm32 then
;  3092                 ep1 = peek4u(era+5)
;  3093                 msg_id = 92
;  3094             elsif x6[1]=0o203 -- add
;  3095               and x6[5]=#01                     -- ie [ebx+idx*4-8],1
;  3096               and x6[6]=cmp_eax_imm32 then
;  3097                 ep1 = peek4u(era+6)
;  3098                 msg_id = 92
;  3099             end if
;  3100         end if
;  3101         if msg_id=92 then -- ie e92vhnbaav, aka "variable %s has not been assigned a value"
;  3102             msg = msgs[92]
;  3103             if ep1>0 and ep1<=length(symtab) then
;  3104                 si = symtab[ep1]
;  3105                 msg = sprintf(msg,si[S_Name..S_Name])
;  3106             else
;  3107                 printf(1,"diag.e: oops(4), var no[=%d] out of range\n",ep1) -- See note at top
;  3108             end if
;  3109         else
;  3110             if ep1=#C0000005-#100000000 then
;  3111                 wmsg = "[MEMORY VIOLATION]"
;  3112             elsif ep1=#C00000FD-#100000000 then
;  3113                 wmsg = "[STACK OVERFLOW]"
;  3114             else
;  3115                 wmsg = sprintf("#%08x",ep1)
;  3116             end if
;  3117             msg = sprintf(msg,{wmsg,era})
;  3118         end if
;  3119     elsif msg_id=92 then    -- e92vhnbaav
;  3120         c = varIdx(ep1)
;  3121         si = symtab[c][S_Name]
;  3122         if atom(si) then
;  3123             si = sprintf("???(name=%d)",si)
;  3124         end if
;  3125         msg = sprintf(msg,{si})
;  3126     elsif msg_id=97 then    -- e97he
;  3127 --      if ep1=112 then
;  3128 --          o = {"112(ERROR_DISK_FULL)"}
;  3129 --      else
;  3130             o = {sprintf("%d",ep1)}
;  3131 --      end if
;  3132         msg = sprintf(msg,o)
;  3133     elsif msg_id=98 then    -- e98fiofe
;  3134         if ep1=112 then
;  3135             o = {"112(ERROR_DISK_FULL)"}
;  3136         else
;  3137             o = {sprintf("%d",ep1)}
;  3138         end if
;  3139         msg = sprintf(msg,o)
;  3140         crashfile = "NUL"
;  3141     elsif msg_id>=120 and msg_id<=122 then  -- for loop errors:
;  3142         c = varIdx(ep1)
;  3143         o = getValue(c, 50, 18, 1)
;  3144         msg = sprintf(msg,{o})
;  3145     elsif msg_id=108 then       -- e108pe
;  3146         if ep1=87 then
;  3147             wmsg = "ERROR_INVALID_PARAMETER"
;  3148         else
;  3149             wmsg = sprintf("#%08x",ep1)
;  3150         end if
;  3151         msg = sprintf(msg,{wmsg})
;  3152     end if
;  3153 --puts(1,"d4\n")
;  3154 --*/
;  3155 --?3
;  3156 --?msg
;  3157 --?4
;  3158 
;  3159 --EXCEPT
;  3160 --(need to get the int3 tests done first!) [DONE]
;  3161 bool error_handler
;  3162     #ilASM{
;  3163         [32]
;  3164             xor eax,eax
                    xor eax,eax           ;#0046813B: 061300                     uv 01 01  1 2848      
;  3165             cmp [ebp+16],ebx
                    cmp [ebp+16],ebx      ;#0046813D: 071135 10                  vu 00 28  2 2848      
;  3166             setne al
                    setne al              ;#00468140: 017225300                  np 01 00  2 2849      
;  3167             mov [error_handler],eax
                    mov [ebp-260] (error_handler),eax  ;#00468143: 211205 FCFEFFFF            uv 00 21  1 2851      
;  3168         [64]
;  3169             xor rax,rax
;  3170             cmp [rbp+32],rbx
;  3171             setne al
;  3172             mov [error_handler],rax
;  3173           }
;  3174     if error_handler 
    mov eax,[ebp-260] (error_handler)     ;#00468149: 213205 FCFEFFFF            vu 01 20  1 2851      
    mov edx,1553                          ;#0046814F: 272 11060000               uv 04 00  1 2852      
    call #0045F94C (:%opJif)              ;#00468154: 350 F377FFFF               v  00 00  1 2852      
    je #0046844F                          ;#00468159: 017204 F0020000            v  00 00  1 2853      
;  3175 --  and msg_id!=12 then -- not e12pa ('!' keyed in trace window)
;  3176     and msg_id!=12      -- not e12pa ('!' keyed in trace window)
    mov ecx,[#00402658] (msg_id)          ;#0046815F: 213015 58264000            uv 02 00  1 2854      
    cmp ecx,12                            ;#00468165: 203371 0C                  uv 00 02  1 2855 02   
    je #0046844F                          ;#00468168: 017204 E1020000            v  00 00  1 2855      
;  3177     and msg_id!=56 then -- not e56rocow (also non-catchable)
    cmp ecx,56                            ;#0046816E: 203371 38                  uv 00 02  1 2856      
    je #0046844F                          ;#00468171: 017204 D8020000            v  00 00  1 2856      
;  3178         msg = trim(msg)
    mov ecx,8                             ;#00468177: 271 08000000               uv 02 00  1 2857      
    mov edx,384                           ;#0046817C: 272 80010000               vu 04 00  1 2857      
    call #00462C02 (:%opFrame) (trim)     ;#00468181: 350 7CAAFFFF               v  00 00  1 2858      
    mov edi,[ebp+20] (prevebp)            ;#00468186: 213175 14                  uv 80 20  1 2859      
    mov eax,[edi-52]                      ;#00468189: 213107 CC                  uv 01 80  1 2862 80 *80*
    mov [edi-52], dword h4                ;#0046818C: 307107 CC 00000040         vu 00 80  1 2862      
    cmp eax,h4                            ;#00468193: 075 00000040               uv 00 01  1 2863      
    jne #004681A4                         ;#00468198: 165 0A                     v  00 00  1 2863      
    mov esi,1322                          ;#0046819A: 276 2A050000               uv 40 00  1 2864      
    call #00462744 (:%pUnassigned)        ;#0046819F: 350 A0A5FFFF               v  00 00  1 2864      
    mov [ebp] (source),eax                ;#004681A4: 211105 00                  uv 00 21  1 2865      
    mov [ebp+28] (retaddr),#004681B3      ;#004681A7: 307105 1C B3814600         vu 00 20  1 2865      
    jmp #0044C995 (code:trim)             ;#004681AE: 351 E247FEFF               v  00 00  1 2866      
    push eax                              ;#004681B3: 120                        uv 00 01  1 2867      
    mov edi,[ebp-52] (msg)                ;#004681B4: 213175 CC                  vu 80 20  1 2867      
    cmp edi,h4                            ;#004681B7: 201377 00000040            uv 00 80  1 2868      
    jle #004681CD                         ;#004681BD: 176 0E                     v  00 00  1 2868      
    sub dword[ebx+edi*4-8],1              ;#004681BF: 203154273 F8 01            u  00 88  3 2869      
    jne #004681CD                         ;#004681C4: 165 07                     v  00 00  1 2871      
    mov edx,edi                           ;#004681C6: 213327                     uv 04 80  1 2872      
    call #004639A8 (:%pDealloc)           ;#004681C8: 350 DBB7FFFF               v  00 00  1 2872      
    pop dword[ebp-52] (msg)               ;#004681CD: 217105 CC                  np 00 20  3 2873      
;  3179 if rid<1 or rid>length(symtab) then
    mov edi,1                             ;#004681D0: 277 01000000               uv 80 00  1 2876      
    mov eax,[ebp-84] (rid)                ;#004681D5: 213105 AC                  vu 01 20  1 2876      
    mov esi,26                            ;#004681D8: 276 1A000000               uv 40 00  1 2877      
    mov edx,1330                          ;#004681DD: 272 32050000               vu 04 00  1 2877      
    call #0045F8B0 (:%opJcc)              ;#004681E2: 350 C976FFFF               v  00 00  1 2878      
    jl #00468216                          ;#004681E7: 174 2D                     v  00 00  1 2879      
    lea edi,[ebp-236] (symtab[1535])      ;#004681E9: 215275 14FFFFFF            uv 80 20  1 2880      
    mov esi,[ebp] (symtab)                ;#004681EF: 213165 00                  vu 40 20  1 2880      
    mov edx,1309                          ;#004681F2: 272 1D050000               uv 04 00  1 2881      
    call #0045EFEC (:%opLen)              ;#004681F7: 350 F06DFFFF               v  00 00  1 2881      
    mov edi,ecx                           ;#004681FC: 211317                     uv 80 02  1 2882      
    mov eax,[ebp-84] (rid)                ;#004681FE: 213105 AC                  vu 01 20  1 2882      
    mov esi,1535                          ;#00468201: 276 FF050000               uv 40 00  1 2883      
    mov edx,1330                          ;#00468206: 272 32050000               vu 04 00  1 2883      
    call #0045F8B0 (:%opJcc)              ;#0046820B: 350 A076FFFF               v  00 00  1 2884      
    jle #004682ED                         ;#00468210: 017216 D7000000            v  00 00  1 2885      
;  3180     ?{"oops, pDiagN.e line 3170: rid is",rid,length(symtab),msg_id,msg}
    lea edi,[ebp-236] (symtab[1535])      ;#00468216: 215275 14FFFFFF            uv 80 20  1 2886      
    mov esi,[ebp] (symtab)                ;#0046821C: 213165 00                  vu 40 20  1 2886      
    mov edx,1309                          ;#0046821F: 272 1D050000               uv 04 00  1 2887      
    call #0045EFEC (:%opLen)              ;#00468224: 350 C36DFFFF               v  00 00  1 2887      
    lea eax,[ebp-244] (symtab[1538])      ;#00468229: 215205 0CFFFFFF            uv 01 20  1 2888      
    mov edx,5                             ;#0046822F: 272 05000000               vu 04 00  1 2888      
    push #00468290                        ;#00468234: 150 90824600               uv 00 00  1 2889      
    push eax                              ;#00468239: 120                        vu 00 01  1 2889      
    mov edi,[ebp-52] (msg)                ;#0046823A: 213175 CC                  uv 80 20  1 2890      
    cmp edi,h4                            ;#0046823D: 201377 00000040            uv 00 80  1 2891 80   
    jl #0046824F                          ;#00468243: 174 0A                     v  00 00  1 2891      
    add dword[ebx+edi*4-8],1              ;#00468245: 203104273 F8 01            u  00 88  3 2892      
    cmp eax,1322                          ;#0046824A: 075 2A050000               vu 00 01  1 2894      
    push edi                              ;#0046824F: 127                        uv 00 80  1 2895      
    push dword[#00402658] (msg_id)        ;#00468250: 377065 58264000            np 00 00  2 2896      
    push ecx                              ;#00468256: 121                        uv 00 02  1 2898      
    mov eax,[ebp-84] (rid)                ;#00468257: 213105 AC                  vu 01 20  1 2898      
    cmp eax,h4                            ;#0046825A: 075 00000040               uv 00 01  1 2899      
    jl #0046826B                          ;#0046825F: 174 0A                     v  00 00  1 2899      
    add dword[ebx+eax*4-8],1              ;#00468261: 203104203 F8 01            u  00 09  3 2900      
    cmp eax,1330                          ;#00468266: 075 32050000               vu 00 01  1 2902      
    push eax                              ;#0046826B: 120                        uv 00 01  1 2903      
    mov esi,[#00402938]                   ;#0046826C: 213065 38294000            vu 40 00  1 2903      
    cmp esi,h4                            ;#00468272: 201376 00000040            uv 00 40  1 2904      
    jl #00468284                          ;#00468278: 174 0A                     v  00 00  1 2904      
    add dword[ebx+esi*4-8],1              ;#0046827A: 203104263 F8 01            u  00 48  3 2905      
    cmp eax,1555                          ;#0046827F: 075 13060000               vu 00 01  1 2907      
    push esi                              ;#00468284: 126                        uv 00 40  1 2908      
    mov edi,[ebp-244] (symtab[1538])      ;#00468285: 213275 0CFFFFFF            vu 80 20  1 2908      
    jmp #00460143 (:%pMkSq)               ;#0046828B: 351 B37EFFFF               v  00 00  1 2909      
    mov ecx,5                             ;#00468290: 271 05000000               uv 02 00  1 2910      
    mov edx,401                           ;#00468295: 272 91010000               vu 04 00  1 2910      
    call #00462C02 (:%opFrame) (print)    ;#0046829A: 350 63A9FFFF               v  00 00  1 2911      
    mov [ebp] (fn), dword 1               ;#0046829F: 307105 00 01000000         uv 00 20  1 2912      
    mov edi,[ebp+20] (prevebp)            ;#004682A6: 213175 14                  vu 80 20  1 2912      
    mov eax,[edi-244]                     ;#004682A9: 213207 0CFFFFFF            uv 01 80  1 2915    *80*
    mov [edi-244], dword h4               ;#004682AF: 307207 0CFFFFFF 00000040   vu 00 80  1 2915      
    cmp eax,h4                            ;#004682B9: 075 00000040               uv 00 01  1 2916      
    jne #004682CA                         ;#004682BE: 165 0A                     v  00 00  1 2916      
    mov esi,1538                          ;#004682C0: 276 02060000               uv 40 00  1 2917      
    call #00462744 (:%pUnassigned)        ;#004682C5: 350 7AA4FFFF               v  00 00  1 2917      
    mov [ebp-4] (x),eax                   ;#004682CA: 211105 FC                  uv 00 21  1 2918      
    mov [ebp+28] (retaddr),#004682D9      ;#004682CD: 307105 1C D9824600         vu 00 20  1 2918      
    jmp #00444EF7 (code:print)            ;#004682D4: 351 1ECCFDFF               v  00 00  1 2919      
    mov eax,1                             ;#004682D9: 270 01000000               uv 01 00  1 2920      
    mov edx,10                            ;#004682DE: 272 0A000000               vu 04 00  1 2920      
    call #0045E072 (:%opPuts)             ;#004682E3: 350 8A5DFFFF               v  00 00  1 2921      
    jmp #0046844F                         ;#004682E8: 351 62010000               v  00 00  1 2922      
;  3181 else
;  3182         sr = symtab[rid]
    mov ecx,[ebp] (symtab)                ;#004682ED: 213115 00                  uv 02 20  1 2923      
    cmp ecx,h4                            ;#004682F0: 201371 00000040            uv 00 02  1 2924 02   
    jne #00468302                         ;#004682F6: 165 0A                     v  00 00  1 2924      
    mov esi,1309                          ;#004682F8: 276 1D050000               uv 40 00  1 2925      
    call #00462744 (:%pUnassigned)        ;#004682FD: 350 42A4FFFF               v  00 00  1 2925      
    mov esi,[ebp-84] (rid)                ;#00468302: 213165 AC                  uv 40 20  1 2926      
    cmp esi,h4                            ;#00468305: 201376 00000040            uv 00 40  1 2927 40   
    jne #00468317                         ;#0046830B: 165 0A                     v  00 00  1 2927      
    mov esi,1330                          ;#0046830D: 276 32050000               uv 40 00  1 2928      
    call #00462744 (:%pUnassigned)        ;#00468312: 350 2DA4FFFF               v  00 00  1 2928      
    mov edi,esi                           ;#00468317: 211367                     uv 80 40  1 2929      
    lea ecx,[ebp-60] (sr)                 ;#00468319: 215115 C4                  vu 02 20  1 2929      
    mov esi,[ebp] (symtab)                ;#0046831C: 213165 00                  uv 40 20  1 2930      
    mov edx,1309                          ;#0046831F: 272 1D050000               vu 04 00  1 2930      
    mov al,0                              ;#00468324: 260 00                     uv 01 00  1 2931      
    call #00460FE5 (:%pSubse1)            ;#00468326: 350 BA8CFFFF               v  00 00  1 2931      
;  3183         lineno = convert_offset(or_era,sr)
    mov ecx,20                            ;#0046832B: 271 14000000               uv 02 00  1 2932      
    mov edx,1195                          ;#00468330: 272 AB040000               vu 04 00  1 2932      
    call :%opFrame (convert_offset)       ;#00468335: 350 C8A8FFFF               v  00 00  1 2933      
    mov edi,[#00402610] (or_era)          ;#0046833A: 213075 10264000            uv 80 00  1 2934      
    mov [ebp] (era),edi                   ;#00468340: 211175 00                  uv 00 A0  1 2935 80   
    cmp edi,h4                            ;#00468343: 201377 00000040            vu 00 80  1 2935      
    jl #00468355                          ;#00468349: 174 0A                     v  00 00  1 2936      
    add dword[ebx+edi*4-8],1              ;#0046834B: 203104273 F8 01            u  00 88  3 2937      
    cmp eax,1244                          ;#00468350: 075 DC040000               vu 00 01  1 2939      
    mov edi,[ebp+20] (prevebp)            ;#00468355: 213175 14                  uv 80 20  1 2940      
    mov eax,[edi-60]                      ;#00468358: 213107 C4                  uv 01 80  1 2943 80 *80*
    xor ebx,ebx                           ;#0046835B: 061333                     vu 08 08  1 2943      
    cmp eax,h4                            ;#0046835D: 075 00000040               uv 00 01  1 2944      
    jl #0046836E                          ;#00468362: 174 0A                     v  00 00  1 2944      
    add dword[ebx+eax*4-8],1              ;#00468364: 203104203 F8 01            u  00 09  3 2945      
    cmp eax,1324                          ;#00468369: 075 2C050000               vu 00 01  1 2947      
    mov [ebp-4] (sr),eax                  ;#0046836E: 211105 FC                  uv 00 21  1 2948      
    mov [ebp+28] (retaddr),#0046837D      ;#00468371: 307105 1C 7D834600         vu 00 20  1 2948      
    jmp #00461C7F (code:convert_offset)   ;#00468378: 351 0299FFFF               v  00 00  1 2949      
    mov [ebp-20] (lineno),eax             ;#0046837D: 211105 EC                  uv 00 21  1 2950      
;  3184         diaglooping -= 1
    mov ecx,[#0040264C] (diaglooping)     ;#00468380: 213015 4C264000            vu 02 00  1 2950      
    sub ecx,1                             ;#00468386: 203351 01                  uv 02 02  1 2951      
    mov edx,ecx                           ;#00468389: 213321                     uv 04 02  1 2952 02   
    mov [#0040264C] (diaglooping),ecx     ;#0046838B: 211015 4C264000            vu 00 02  1 2952      
    shl edx,1                             ;#00468391: 321342                     u  04 04  1 2953      
    jno #0046839F                         ;#00468393: 161 0A                     v  00 00  1 2953      
    mov edi,#0040264C                     ;#00468395: 277 4C264000               uv 80 00  1 2954      
    call #00462764 (:%e01tcfAddiii)       ;#0046839A: 350 C5A3FFFF               v  00 00  1 2954      
;  3185         throw({msg_id,or_era,lineno,rid,-1,-1,-1,msg})
    lea eax,[ebp-244] (symtab[1538])      ;#0046839F: 215205 0CFFFFFF            uv 01 20  1 2955      
    mov edx,8                             ;#004683A5: 272 08000000               vu 04 00  1 2955      
    push #0046840D                        ;#004683AA: 150 0D844600               uv 00 00  1 2956      
    push eax                              ;#004683AF: 120                        vu 00 01  1 2956      
    mov esi,[ebp-52] (msg)                ;#004683B0: 213165 CC                  uv 40 20  1 2957      
    cmp esi,h4                            ;#004683B3: 201376 00000040            uv 00 40  1 2958 40   
    jl #004683C5                          ;#004683B9: 174 0A                     v  00 00  1 2958      
    add dword[ebx+esi*4-8],1              ;#004683BB: 203104263 F8 01            u  00 48  3 2959      
    cmp eax,1322                          ;#004683C0: 075 2A050000               vu 00 01  1 2961      
    push esi                              ;#004683C5: 126                        uv 00 40  1 2962      
    push -1                               ;#004683C6: 152 FF                     vu 00 00  1 2962      
    push -1                               ;#004683C8: 152 FF                     uv 00 00  1 2963      
    push -1                               ;#004683CA: 152 FF                     vu 00 00  1 2963      
    mov edi,[ebp-84] (rid)                ;#004683CC: 213175 AC                  uv 80 20  1 2964      
    cmp edi,h4                            ;#004683CF: 201377 00000040            uv 00 80  1 2965 80   
    jl #004683E1                          ;#004683D5: 174 0A                     v  00 00  1 2965      
    add dword[ebx+edi*4-8],1              ;#004683D7: 203104273 F8 01            u  00 88  3 2966      
    cmp eax,1330                          ;#004683DC: 075 32050000               vu 00 01  1 2968      
    push edi                              ;#004683E1: 127                        uv 00 80  1 2969      
    push dword[ebp-20] (lineno)           ;#004683E2: 377165 EC                  np 00 20  2 2970      
    mov eax,[#00402610] (or_era)          ;#004683E5: 241 10264000               uv 01 00  1 2972      
    cmp eax,h4                            ;#004683EA: 075 00000040               uv 00 01  1 2973 01   
    jl #004683FB                          ;#004683EF: 174 0A                     v  00 00  1 2973      
    add dword[ebx+eax*4-8],1              ;#004683F1: 203104203 F8 01            u  00 09  3 2974      
    cmp eax,1244                          ;#004683F6: 075 DC040000               vu 00 01  1 2976      
    push eax                              ;#004683FB: 120                        uv 00 01  1 2977      
    push dword[#00402658] (msg_id)        ;#004683FC: 377065 58264000            np 00 00  2 2978      
    mov edi,[ebp-244] (symtab[1538])      ;#00468402: 213275 0CFFFFFF            uv 80 20  1 2980      
    jmp #00460143 (:%pMkSq)               ;#00468408: 351 367DFFFF               v  00 00  1 2980      
    mov ecx,14                            ;#0046840D: 271 0E000000               uv 02 00  1 2981      
    mov edx,1221                          ;#00468412: 272 C5040000               vu 04 00  1 2981      
    call #00462C02 (:%opFrame) (throw)    ;#00468417: 350 E6A7FFFF               v  00 00  1 2982      
    mov edi,[ebp+20] (prevebp)            ;#0046841C: 213175 14                  uv 80 20  1 2983      
    mov eax,[edi-244]                     ;#0046841F: 213207 0CFFFFFF            uv 01 80  1 2986 80 *80*
    mov [edi-244], dword h4               ;#00468425: 307207 0CFFFFFF 00000040   vu 00 80  1 2986      
    cmp eax,h4                            ;#0046842F: 075 00000040               uv 00 01  1 2987      
    jne #00468440                         ;#00468434: 165 0A                     v  00 00  1 2987      
    mov esi,1538                          ;#00468436: 276 02060000               uv 40 00  1 2988      
    call #00462744 (:%pUnassigned)        ;#0046843B: 350 04A3FFFF               v  00 00  1 2988      
    mov [ebp] (e),eax                     ;#00468440: 211105 00                  uv 00 21  1 2989      
    mov [ebp+28] (retaddr),#0046844F      ;#00468443: 307105 1C 4F844600         vu 00 20  1 2989      
    jmp #0046116B (code:throw)            ;#0046844A: 351 1C8DFFFF               v  00 00  1 2990      
;  3186 end if
;  3187     end if
;  3188 
;  3189     if not batchmode then
    mov ecx,[#00402568] (batchmode)       ;#0046844F: 213015 68254000            uv 02 00  1 2991      
    test ecx,ecx                          ;#00468455: 205311                     uv 00 02  1 2992 02   
    jne #00468469                         ;#00468457: 165 10                     v  00 00  1 2992      
;  3190         puts(1,"\n")
    mov eax,1                             ;#00468459: 270 01000000               uv 01 00  1 2993      
    mov edx,[#00402330]                   ;#0046845E: 213025 30234000            vu 04 00  1 2993      
    call #0045E072 (:%opPuts)             ;#00468464: 350 095CFFFF               v  00 00  1 2994      
;  3191     end if
;  3192 
;  3193 --  if equal(crashfile,"") then return batchmode end if
;  3194     if equal(crashfile,"") then return end if
    mov edi,[#004022A4]                   ;#00468469: 213075 A4224000            uv 80 00  1 2995      
    mov eax,[#00402648] (crashfile)       ;#0046846F: 241 48264000               vu 01 00  1 2995      
    mov esi,628                           ;#00468474: 276 74020000               uv 40 00  1 2996      
    mov edx,1286                          ;#00468479: 272 06050000               vu 04 00  1 2996      
    call #0045F91F (:%opJccE)             ;#0046847E: 350 9C74FFFF               v  00 00  1 2997      
    je #00462C8F (:%opRetf)               ;#00468483: 017204 06A8FFFF            v  00 00  1 2998      
;  3195     if find(crashfile,{"NUL","NULL","/dev/null"}) then
    lea eax,[ebp-244] (symtab[1538])      ;#00468489: 215205 0CFFFFFF            uv 01 20  1 2999      
    mov edx,3                             ;#0046848F: 272 03000000               vu 04 00  1 2999      
    push #004684F0                        ;#00468494: 150 F0844600               uv 00 00  1 3000      
    push eax                              ;#00468499: 120                        vu 00 01  1 3000      
    mov esi,[#00402944]                   ;#0046849A: 213065 44294000            uv 40 00  1 3001      
    cmp esi,h4                            ;#004684A0: 201376 00000040            uv 00 40  1 3002 40   
    jl #004684B2                          ;#004684A6: 174 0A                     v  00 00  1 3002      
    add dword[ebx+esi*4-8],1              ;#004684A8: 203104263 F8 01            u  00 48  3 3003      
    cmp eax,1558                          ;#004684AD: 075 16060000               vu 00 01  1 3005      
    push esi                              ;#004684B2: 126                        uv 00 40  1 3006      
    mov ecx,[#00402940]                   ;#004684B3: 213015 40294000            vu 02 00  1 3006      
    cmp ecx,h4                            ;#004684B9: 201371 00000040            uv 00 02  1 3007      
    jl #004684CB                          ;#004684BF: 174 0A                     v  00 00  1 3007      
    add dword[ebx+ecx*4-8],1              ;#004684C1: 203104213 F8 01            u  00 0A  3 3008      
    cmp eax,1557                          ;#004684C6: 075 15060000               vu 00 01  1 3010      
    push ecx                              ;#004684CB: 121                        uv 00 02  1 3011      
    mov edi,[#0040293C]                   ;#004684CC: 213075 3C294000            vu 80 00  1 3011      
    cmp edi,h4                            ;#004684D2: 201377 00000040            uv 00 80  1 3012      
    jl #004684E4                          ;#004684D8: 174 0A                     v  00 00  1 3012      
    add dword[ebx+edi*4-8],1              ;#004684DA: 203104273 F8 01            u  00 88  3 3013      
    cmp eax,1556                          ;#004684DF: 075 14060000               vu 00 01  1 3015      
    push edi                              ;#004684E4: 127                        uv 00 80  1 3016      
    mov edi,[ebp-244] (symtab[1538])      ;#004684E5: 213275 0CFFFFFF            vu 80 20  1 3016      
    jmp #00460143 (:%pMkSq)               ;#004684EB: 351 537CFFFF               v  00 00  1 3017      
    mov ecx,8                             ;#004684F0: 271 08000000               uv 02 00  1 3018      
    mov edx,110                           ;#004684F5: 272 6E000000               vu 04 00  1 3018      
    call #00462C02 (:%opFrame) (find)     ;#004684FA: 350 03A7FFFF               v  00 00  1 3019      
    mov eax,[#00402648] (crashfile)       ;#004684FF: 241 48264000               uv 01 00  1 3020      
    mov [ebp] (needle),eax                ;#00468504: 211105 00                  uv 00 21  1 3021 01   
    cmp eax,h4                            ;#00468507: 075 00000040               vu 00 01  1 3021      
    jl #00468513                          ;#0046850C: 174 05                     v  00 00  1 3022      
    add dword[ebx+eax*4-8],1              ;#0046850E: 203104203 F8 01            u  00 09  3 3023      
    mov edi,[ebp+20] (prevebp)            ;#00468513: 213175 14                  vu 80 20  1 3025      
    mov eax,[edi-244]                     ;#00468516: 213207 0CFFFFFF            uv 01 80  1 3028    *80*
    mov [edi-244], dword h4               ;#0046851C: 307207 0CFFFFFF 00000040   vu 00 80  1 3028      
    cmp eax,h4                            ;#00468526: 075 00000040               uv 00 01  1 3029      
    jne #00468537                         ;#0046852B: 165 0A                     v  00 00  1 3029      
    mov esi,1538                          ;#0046852D: 276 02060000               uv 40 00  1 3030      
    call #00462744 (:%pUnassigned)        ;#00468532: 350 0DA2FFFF               v  00 00  1 3030      
    mov [ebp-4] (haystack),eax            ;#00468537: 211105 FC                  uv 00 21  1 3031      
    mov [ebp+28] (retaddr),#00468546      ;#0046853A: 307105 1C 46854600         vu 00 20  1 3031      
    jmp #0045AADB (code:find)             ;#00468541: 351 9525FFFF               v  00 00  1 3032      
    test eax,eax                          ;#00468546: 205300                     uv 00 01  1 3033      
    je #00468556                          ;#00468548: 164 0C                     v  00 00  1 3033      
;  3196         fn = -1
    mov [#00402510] (fn), dword -1        ;#0046854A: 307005 10254000 FFFFFFFF   uv 00 00  1 3034      
    jmp #00468594                         ;#00468554: 353 3E                     v  00 00  1 3034      
;  3197     elsif not atom(crashfile) then
    mov esi,[#00402648] (crashfile)       ;#00468556: 213065 48264000            uv 40 00  1 3035      
    cmp esi,h4                            ;#0046855C: 201376 00000040            uv 00 40  1 3036 40   
    jl #0046857F                          ;#00468562: 174 1B                     v  00 00  1 3036      
    cmp byte[ebx+esi*4-1],#12             ;#00468564: 200174263 FF 12            u  00 48  2 3037      
    je #0046857F                          ;#00468569: 164 14                     v  00 00  1 3038      
;  3198         fn = open(crashfile,"w")
    mov edi,#00402510                     ;#0046856B: 277 10254000               uv 80 00  1 3039      
    mov eax,esi                           ;#00468570: 211360                     vu 01 40  1 3039      
    mov ecx,[#00402948]                   ;#00468572: 213015 48294000            uv 02 00  1 3040      
    call #0045E51D (:%opOpen)             ;#00468578: 350 A05FFFFF               v  00 00  1 3040      
    jmp #00468594                         ;#0046857D: 353 15                     v  00 00  1 3041      
;  3199     else
;  3200         fn = open("ex.err","w")
    mov edi,#00402510                     ;#0046857F: 277 10254000               uv 80 00  1 3042      
    mov eax,[#0040294C]                   ;#00468584: 241 4C294000               vu 01 00  1 3042      
    mov ecx,[#00402948]                   ;#00468589: 213015 48294000            uv 02 00  1 3043      
    call #0045E51D (:%opOpen)             ;#0046858F: 350 895FFFFF               v  00 00  1 3043      
;  3201     end if
;  3202 --puts(1,"ex.err open\n")
;  3203 --?{"rid",rid}
;  3204     msg2 = ""
    mov edi,[#004022A4]                   ;#00468594: 213075 A4224000            uv 80 00  1 3044      
    mov edx,[ebp-144] (msg2)              ;#0046859A: 213225 70FFFFFF            vu 04 20  1 3044      
    cmp edi,h4                            ;#004685A0: 201377 00000040            uv 00 80  1 3045      
    jl #004685AD                          ;#004685A6: 174 05                     v  00 00  1 3045      
    add dword[ebx+edi*4-8],1              ;#004685A8: 203104273 F8 01            u  00 88  3 3046      
    mov [ebp-144] (msg2),edi              ;#004685AD: 211275 70FFFFFF            vu 00 A0  1 3048      
    cmp edx,h4                            ;#004685B3: 201372 00000040            uv 00 04  1 3049      
    jle #004685C7                         ;#004685B9: 176 0C                     v  00 00  1 3049      
    sub dword[ebx+edx*4-8],1              ;#004685BB: 203154223 F8 01            u  00 0C  3 3050      
    jne #004685C7                         ;#004685C0: 165 05                     v  00 00  1 3052      
    call #004639A8 (:%pDealloc)           ;#004685C2: 350 E1B3FFFF               v  00 00  1 3053      
;  3205     while 1 do
;  3206 --?rid
;  3207         if rid<1 or rid>length(symtab) then -- See note at top
    mov edi,1                             ;#004685C7: 277 01000000               uv 80 00  1 3054      
    mov eax,[ebp-84] (rid)                ;#004685CC: 213105 AC                  vu 01 20  1 3054      
    mov esi,26                            ;#004685CF: 276 1A000000               uv 40 00  1 3055      
    mov edx,1330                          ;#004685D4: 272 32050000               vu 04 00  1 3055      
    call #0045F8B0 (:%opJcc)              ;#004685D9: 350 D272FFFF               v  00 00  1 3056      
    jl #0046860D                          ;#004685DE: 174 2D                     v  00 00  1 3057      
    lea edi,[ebp-236] (symtab[1535])      ;#004685E0: 215275 14FFFFFF            uv 80 20  1 3058      
    mov esi,[ebp] (symtab)                ;#004685E6: 213165 00                  vu 40 20  1 3058      
    mov edx,1309                          ;#004685E9: 272 1D050000               uv 04 00  1 3059      
    call #0045EFEC (:%opLen)              ;#004685EE: 350 F969FFFF               v  00 00  1 3059      
    mov edi,ecx                           ;#004685F3: 211317                     uv 80 02  1 3060      
    mov eax,[ebp-84] (rid)                ;#004685F5: 213105 AC                  vu 01 20  1 3060      
    mov esi,1535                          ;#004685F8: 276 FF050000               uv 40 00  1 3061      
    mov edx,1330                          ;#004685FD: 272 32050000               vu 04 00  1 3061      
    call #0045F8B0 (:%opJcc)              ;#00468602: 350 A972FFFF               v  00 00  1 3062      
    jle #004686B1                         ;#00468607: 017216 A4000000            v  00 00  1 3063      
;  3208             printf(1,"pDiagN.e line 398: oops, rid[=%d] out of range[1..%d]\n",{rid,length(symtab)})
    lea edi,[ebp-236] (symtab[1535])      ;#0046860D: 215275 14FFFFFF            uv 80 20  1 3064      
    mov esi,[ebp] (symtab)                ;#00468613: 213165 00                  vu 40 20  1 3064      
    mov edx,1309                          ;#00468616: 272 1D050000               uv 04 00  1 3065      
    call #0045EFEC (:%opLen)              ;#0046861B: 350 CC69FFFF               v  00 00  1 3065      
    lea eax,[ebp-244] (symtab[1538])      ;#00468620: 215205 0CFFFFFF            uv 01 20  1 3066      
    mov edx,2                             ;#00468626: 272 02000000               vu 04 00  1 3066      
    push #00468653                        ;#0046862B: 150 53864600               uv 00 00  1 3067      
    push eax                              ;#00468630: 120                        vu 00 01  1 3067      
    push ecx                              ;#00468631: 121                        uv 00 02  1 3068      
    mov edi,[ebp-84] (rid)                ;#00468632: 213175 AC                  vu 80 20  1 3068      
    cmp edi,h4                            ;#00468635: 201377 00000040            uv 00 80  1 3069      
    jl #00468647                          ;#0046863B: 174 0A                     v  00 00  1 3069      
    add dword[ebx+edi*4-8],1              ;#0046863D: 203104273 F8 01            u  00 88  3 3070      
    cmp eax,1330                          ;#00468642: 075 32050000               vu 00 01  1 3072      
    push edi                              ;#00468647: 127                        uv 00 80  1 3073      
    mov edi,[ebp-244] (symtab[1538])      ;#00468648: 213275 0CFFFFFF            vu 80 20  1 3073      
    jmp #00460143 (:%pMkSq)               ;#0046864E: 351 F07AFFFF               v  00 00  1 3074      
    mov ecx,9                             ;#00468653: 271 09000000               uv 02 00  1 3075      
    mov edx,400                           ;#00468658: 272 90010000               vu 04 00  1 3075      
    call #00462C02 (:%opFrame) (printf)   ;#0046865D: 350 A0A5FFFF               v  00 00  1 3076      
    mov [ebp] (fn), dword 1               ;#00468662: 307105 00 01000000         uv 00 20  1 3077      
    mov eax,[#00402950]                   ;#00468669: 241 50294000               vu 01 00  1 3077      
    mov [ebp-4] (fmt),eax                 ;#0046866E: 211105 FC                  uv 00 21  1 3078      
    add dword[ebx+eax*4-8],1              ;#00468671: 203104203 F8 01            u  00 09  3 3080    *01*
    mov edi,[ebp+20] (prevebp)            ;#00468676: 213175 14                  vu 80 20  1 3082      
    mov eax,[edi-244]                     ;#00468679: 213207 0CFFFFFF            uv 01 80  1 3085    *80*
    mov [edi-244], dword h4               ;#0046867F: 307207 0CFFFFFF 00000040   vu 00 80  1 3085      
    cmp eax,h4                            ;#00468689: 075 00000040               uv 00 01  1 3086      
    jne #0046869A                         ;#0046868E: 165 0A                     v  00 00  1 3086      
    mov esi,1538                          ;#00468690: 276 02060000               uv 40 00  1 3087      
    call #00462744 (:%pUnassigned)        ;#00468695: 350 AAA0FFFF               v  00 00  1 3087      
    mov [ebp-8] (args),eax                ;#0046869A: 211105 F8                  uv 00 21  1 3088      
    mov [ebp+28] (retaddr),#004686A9      ;#0046869D: 307105 1C A9864600         vu 00 20  1 3088      
    jmp #00444FC4 (code:printf)           ;#004686A4: 351 1BC9FDFF               v  00 00  1 3089      
;  3209 --          exit
;  3210 --      end if
;  3211             rtype = 0   -- (added 15/4/16, at the time we had the wrong symtab... then again it was a bug in pTrace.e)
    mov [ebp-128] (rtype),ebx             ;#004686A9: 211135 80                  uv 00 28  1 3090      
    jmp #00469559                         ;#004686AC: 351 A80E0000               v  00 00  1 3090      
;  3212 else
;  3213         sr = symtab[rid]
    mov esi,[ebp] (symtab)                ;#004686B1: 213165 00                  uv 40 20  1 3091      
    cmp esi,h4                            ;#004686B4: 201376 00000040            uv 00 40  1 3092 40   
    jne #004686C6                         ;#004686BA: 165 0A                     v  00 00  1 3092      
    mov esi,1309                          ;#004686BC: 276 1D050000               uv 40 00  1 3093      
    call #00462744 (:%pUnassigned)        ;#004686C1: 350 7EA0FFFF               v  00 00  1 3093      
    mov ecx,[ebp-84] (rid)                ;#004686C6: 213115 AC                  uv 02 20  1 3094      
    cmp ecx,h4                            ;#004686C9: 201371 00000040            uv 00 02  1 3095 02   
    jne #004686DB                         ;#004686CF: 165 0A                     v  00 00  1 3095      
    mov esi,1330                          ;#004686D1: 276 32050000               uv 40 00  1 3096      
    call #00462744 (:%pUnassigned)        ;#004686D6: 350 69A0FFFF               v  00 00  1 3096      
    mov edi,ecx                           ;#004686DB: 211317                     uv 80 02  1 3097      
    lea ecx,[ebp-60] (sr)                 ;#004686DD: 215115 C4                  vu 02 20  1 3097      
    mov edx,1309                          ;#004686E0: 272 1D050000               uv 04 00  1 3098      
    mov al,0                              ;#004686E5: 260 00                     vu 01 00  1 3098      
    call #00460FE5 (:%pSubse1)            ;#004686E7: 350 F988FFFF               v  00 00  1 3099      
;  3214 --?sr
;  3215         sNTyp = sr[S_NTyp]
    mov edi,2                             ;#004686EC: 277 02000000               uv 80 00  1 3100      
    lea ecx,[ebp-32] (sNTyp)              ;#004686F1: 215115 E0                  vu 02 20  1 3100      
    mov esi,[ebp-60] (sr)                 ;#004686F4: 213165 C4                  uv 40 20  1 3101      
    mov edx,1324                          ;#004686F7: 272 2C050000               vu 04 00  1 3101      
    call #0046106B (:%pSubse1i)           ;#004686FC: 350 6A89FFFF               v  00 00  1 3102      
;  3216         if sNTyp>=S_Type
    cmp eax,6                             ;#00468701: 203370 06                  uv 00 01  1 3103      
    jl #0046954C                          ;#00468704: 017214 420E0000            v  00 00  1 3103      
;  3217         and (swod or and_bits(sr[S_State],K_wdb)) then -- skip without debug items
    mov edi,4                             ;#0046870A: 277 04000000               uv 80 00  1 3104      
    lea ecx,[ebp-264] (symtab[1562])      ;#0046870F: 215215 F8FEFFFF            vu 02 20  1 3104      
    mov esi,[ebp-60] (sr)                 ;#00468715: 213165 C4                  uv 40 20  1 3105      
    mov edx,1324                          ;#00468718: 272 2C050000               vu 04 00  1 3105      
    mov al,0                              ;#0046871D: 260 00                     uv 01 00  1 3106      
    call #00460FE5 (:%pSubse1)            ;#0046871F: 350 C188FFFF               v  00 00  1 3106      
    lea edi,[ebp-236] (symtab[1535])      ;#00468724: 215275 14FFFFFF            uv 80 20  1 3107      
    mov ecx,[ebp-264] (symtab[1562])      ;#0046872A: 213215 F8FEFFFF            vu 02 20  1 3107      
    mov eax,[#004025C0] (K_wdb)           ;#00468730: 241 C0254000               uv 01 00  1 3108      
    call #0045F45E (:%opAndBits)          ;#00468735: 350 246DFFFF               v  00 00  1 3108      
    mov edi,[ebp-236] (symtab[1535])      ;#0046873A: 213275 14FFFFFF            uv 80 20  1 3109      
    test edi,edi                          ;#00468740: 205377                     uv 00 80  1 3110 80   
    je #0046954C                          ;#00468742: 017204 040E0000            v  00 00  1 3110      
;  3218 --          sequence sr = symtab[rid]
;  3219             lineno = convert_offset(or_era,sr)
    mov ecx,20                            ;#00468748: 271 14000000               uv 02 00  1 3111      
    mov edx,1195                          ;#0046874D: 272 AB040000               vu 04 00  1 3111      
    call :%opFrame (convert_offset)       ;#00468752: 350 ABA4FFFF               v  00 00  1 3112      
    mov esi,[#00402610] (or_era)          ;#00468757: 213065 10264000            uv 40 00  1 3113      
    mov [ebp] (era),esi                   ;#0046875D: 211165 00                  uv 00 60  1 3114 40   
    cmp esi,h4                            ;#00468760: 201376 00000040            vu 00 40  1 3114      
    jl #00468772                          ;#00468766: 174 0A                     v  00 00  1 3115      
    add dword[ebx+esi*4-8],1              ;#00468768: 203104263 F8 01            u  00 48  3 3116      
    cmp eax,1244                          ;#0046876D: 075 DC040000               vu 00 01  1 3118      
    mov edi,[ebp+20] (prevebp)            ;#00468772: 213175 14                  uv 80 20  1 3119      
    mov eax,[edi-60]                      ;#00468775: 213107 C4                  uv 01 80  1 3122 80 *80*
    xor ebx,ebx                           ;#00468778: 061333                     vu 08 08  1 3122      
    cmp eax,h4                            ;#0046877A: 075 00000040               uv 00 01  1 3123      
    jl #0046878B                          ;#0046877F: 174 0A                     v  00 00  1 3123      
    add dword[ebx+eax*4-8],1              ;#00468781: 203104203 F8 01            u  00 09  3 3124      
    cmp eax,1324                          ;#00468786: 075 2C050000               vu 00 01  1 3126      
    mov [ebp-4] (sr),eax                  ;#0046878B: 211105 FC                  uv 00 21  1 3127      
    mov [ebp+28] (retaddr),#0046879A      ;#0046878E: 307105 1C 9A874600         vu 00 20  1 3127      
    jmp #00461C7F (code:convert_offset)   ;#00468795: 351 E594FFFF               v  00 00  1 3128      
    mov [ebp-20] (lineno),eax             ;#0046879A: 211105 EC                  uv 00 21  1 3129      
;  3220 --/*
;  3221             lineno = sr[S_1stl]     -- line no of "procedure"/"function"/"type" keyword
;  3222             linetab = sr[S_ltab]
;  3223             lastline = linetab[$]
;  3224 
;  3225 --          returnoffset = era-sr[S_il]
;  3226             returnoffset = or_era-sr[S_il]
;  3227             --
;  3228             -- Convert the offset to a line number.
;  3229             -- A raw line table, as built in pilx86.e, is {skip|offset} where
;  3230             --  skip is <0, meaning -n lines emitted no code, and
;  3231             --  offset is >=0, a start offset of the next code-emitting line.
;  3232             --  There is also a dummy max entry added at the end of ilxlate().
;  3233             --  A line table should never have two (or more) skips in a row.
;  3234             -- When interpreting, we can just use the raw table directly: skip down the
;  3235             --  table until the offset is (b)reached, though we only know that when we 
;  3236             --  hit the next entry, as detailed in the following.
;  3237             --  Example1: a raw linetab of {-2,0,24,36} means offsets 0..23 are S_1st+2,
;  3238             --            24..35 are S_1st+3, and <0 or >=36 are out-of-bounds (so leave 
;  3239             --            lineno as -1). We only know that we should have stopped for an 
;  3240             --            offset of 17 when we hit the 24, and the lineno we want is that 
;  3241             --            before the +1 triggered by the 0 (or whatever line adjustment 
;  3242             --            we made on [2] when we decide to stop on [3]).
;  3243             --  Example2: for a linetab of {-14,#14,-3,#47...} and offset of #22, we only 
;  3244             --            know that #14 (S_1st+14) is the right entry when we hit the #47
;  3245             --            (S_1st+18), so there is a +1 and -(-3) that we must ignore.
;  3246             --            Note that while an exception at offset #47 means S_1st+18, a 
;  3247             --            return address of #47 would be the last call made by S_1st+14;
;  3248             --            hence add -1 when using a return address to report an error.
;  3249             -- When compiled, the linetab is packed: the offsets are converted to deltas
;  3250             --  (so most will be <=127) with #81,#80 used as lead-ins for word,dword to
;  3251             --  hold values that will not fit in a byte, and lastly stored as a "string"
;  3252             --  of binary (#00..#FF) bytes, making it just over 25% of the size, on 32
;  3253             --  bit systems, and just over 12.5% on 64 bit systems (ie worth having).
;  3254             --  A fairly straightforward decode of the next raw value (into lti) is
;  3255             --  followed by the same logic as above, except that when we start with a
;  3256             --  raw table we can test lastline directly, but not when unpacking it.
;  3257             -- Lastly note that [era] is incredibly fiddly to set, especially for
;  3258             --  low-level routines isolated several calls deep from user code. If
;  3259             --  the following yields -1, first suspect [era] rather than this code,
;  3260             --  except for e30ume, in which case suspect that "Address Mapping" in
;  3261             --  :!fehDiag (below) is missing a test/label.
;  3262             --
;  3263             if string(linetab) then -- compiled (deltas packed to string)
;  3264                 lineno = -1
;  3265                 if returnoffset>=0 then
;  3266                     thisline = sr[S_1stl]
;  3267                     linenxt = thisline
;  3268                     skip = 0
;  3269                     base = 0
;  3270                     for i=1 to length(linetab) do
;  3271                         if skip then
;  3272                             skip -= 1
;  3273                         else
;  3274                             lti = linetab[i]
;  3275                             if lti>#7F then
;  3276                                 if lti>#81 then
;  3277                                     lti = lti-#100
;  3278                                 elsif lti=#81 then
;  3279                                     lti = linetab[i+1]*#100+linetab[i+2]
;  3280                                     if lti>#7FFF then
;  3281                                         lti -= #10000   -- (skip < -128)
;  3282                                     end if
;  3283                                     skip = 2
;  3284                                 elsif lti=#80 then
;  3285                                     lti = linetab[i+1]*#1000000+linetab[i+2]*#10000+linetab[i+3]*#100+linetab[i+4]
;  3286                                     if lti>#7FFFFFFF then
;  3287                                         lti -= #100000000 -- (skip < -32,768?? [very rare, if ever])
;  3288                                     end if
;  3289                                     skip = 4
;  3290                                 else
;  3291                                     ?9/0    -- (sanity check, should never happen)
;  3292                                 end if
;  3293                             end if
;  3294                             if lti<0 then       -- -n lines emitted no code
;  3295                                 linenxt -= lti
;  3296                             else                -- start offset of next line
;  3297                                 tmp = base
;  3298                                 base += lti
;  3299                                 lti = tmp
;  3300 --                              if returnoffset<=lti then exit end if   -- all done
;  3301                                 if returnoffset<lti then
;  3302                                     lineno = thisline
;  3303                                     exit
;  3304                                 end if  -- all done
;  3305                                 thisline = linenxt
;  3306                                 linenxt += 1
;  3307                             end if
;  3308                         end if
;  3309                     end for
;  3310                 end if
;  3311             else -- interpreted (raw linetab, a dword-sequence, not converted to deltas/packed)
;  3312                 lineno = sr[S_1stl]
;  3313                 lastline = linetab[$]
;  3314                 if returnoffset<0 or returnoffset>=lastline then
;  3315                     lineno = -1
;  3316                 else
;  3317                     linenxt = lineno
;  3318                     for i=1 to length(linetab) do
;  3319                         lti = linetab[i]
;  3320                         if lti<0 then       -- -n lines emitted no code
;  3321                             linenxt -= lti
;  3322                         else                -- start offset of next line
;  3323 --                          if returnoffset<=lti then exit end if   -- all done
;  3324                             if returnoffset<lti then exit end if    -- all done
;  3325                             lineno = linenxt
;  3326                             linenxt += 1
;  3327                         end if
;  3328                     end for
;  3329                 end if
;  3330             end if
;  3331 --*/
;  3332 --          if lineno=-1 and find(msg_id,{92,30}) then
;  3333             if lineno=-1 and find(msg_id,{92,30}) and length(msg) and length(msg2)=0 then
    cmp eax,-1                            ;#0046879D: 203370 FF                  vu 00 01  1 3129      
    jne #004688F9                         ;#004687A0: 017205 53010000            v  00 00  1 3130      
    lea eax,[ebp-244] (symtab[1538])      ;#004687A6: 215205 0CFFFFFF            uv 01 20  1 3131      
    mov edx,2                             ;#004687AC: 272 02000000               vu 04 00  1 3131      
    push #004687C6                        ;#004687B1: 150 C6874600               uv 00 00  1 3132      
    push eax                              ;#004687B6: 120                        vu 00 01  1 3132      
    push 30                               ;#004687B7: 152 1E                     uv 00 00  1 3133      
    push 92                               ;#004687B9: 152 5C                     vu 00 00  1 3133      
    mov edi,[ebp-244] (symtab[1538])      ;#004687BB: 213275 0CFFFFFF            uv 80 20  1 3134      
    jmp #00460143 (:%pMkSq)               ;#004687C1: 351 7D79FFFF               v  00 00  1 3134      
    mov ecx,8                             ;#004687C6: 271 08000000               uv 02 00  1 3135      
    mov edx,110                           ;#004687CB: 272 6E000000               vu 04 00  1 3135      
    call #00462C02 (:%opFrame) (find)     ;#004687D0: 350 2DA4FFFF               v  00 00  1 3136      
    mov ecx,[#00402658] (msg_id)          ;#004687D5: 213015 58264000            uv 02 00  1 3137      
    mov [ebp] (needle),ecx                ;#004687DB: 211115 00                  uv 00 22  1 3138 02   
    mov edi,[ebp+20] (prevebp)            ;#004687DE: 213175 14                  vu 80 20  1 3138      
    mov eax,[edi-244]                     ;#004687E1: 213207 0CFFFFFF            uv 01 80  1 3141    *80*
    mov [edi-244], dword h4               ;#004687E7: 307207 0CFFFFFF 00000040   vu 00 80  1 3141      
    cmp eax,h4                            ;#004687F1: 075 00000040               uv 00 01  1 3142      
    jne #00468802                         ;#004687F6: 165 0A                     v  00 00  1 3142      
    mov esi,1538                          ;#004687F8: 276 02060000               uv 40 00  1 3143      
    call #00462744 (:%pUnassigned)        ;#004687FD: 350 429FFFFF               v  00 00  1 3143      
    mov [ebp-4] (haystack),eax            ;#00468802: 211105 FC                  uv 00 21  1 3144      
    mov [ebp+28] (retaddr),#00468811      ;#00468805: 307105 1C 11884600         vu 00 20  1 3144      
    jmp #0045AADB (code:find)             ;#0046880C: 351 CA22FFFF               v  00 00  1 3145      
    test eax,eax                          ;#00468811: 205300                     uv 00 01  1 3146      
    je #004688F9                          ;#00468813: 017204 E0000000            v  00 00  1 3146      
    lea edi,[ebp-236] (symtab[1535])      ;#00468819: 215275 14FFFFFF            uv 80 20  1 3147      
    mov esi,[ebp-52] (msg)                ;#0046881F: 213165 CC                  vu 40 20  1 3147      
    mov edx,1322                          ;#00468822: 272 2A050000               uv 04 00  1 3148      
    call #0045EFEC (:%opLen)              ;#00468827: 350 C067FFFF               v  00 00  1 3148      
    test ecx,ecx                          ;#0046882C: 205311                     uv 00 02  1 3149      
    je #004688F9                          ;#0046882E: 017204 C5000000            v  00 00  1 3149      
    mov edi,[ebp-144] (msg2)              ;#00468834: 213275 70FFFFFF            uv 80 20  1 3150      
    mov ecx,[ebx+edi*4-12]                ;#0046883A: 213114273 F4               uv 02 88  1 3153 80 *80*
    cmp ecx,0                             ;#0046883E: 203371 00                  uv 00 02  1 3154 02   
    jne #004688F9                         ;#00468841: 017205 B2000000            v  00 00  1 3154      
;  3334 --?-1
;  3335 --              --
;  3336 --              -- If you have opFrame / mov a,b / mov c,d / opCall, where b or d is
;  3337 --              --  unassigned (a,c are parameters of the routine about to be called),
;  3338 --              --  then the e92 will try to locate the failure address within the 
;  3339 --              --  routine about to be called; pop (at most one not yet active) frame 
;  3340 --              --  and try again:
;  3341 --              --
;  3342 --DEV done above, I think: [needs testing in terror.exw!]
;  3343 --              if msg_id=30 then
;  3344 ----DEV:
;  3345 ----                    if c_func(xIsBadReadPtr,{era,1}) then
;  3346 ----                        printf(1,"diag.e: oops, invalid <era>[%08x]\n",era)
;  3347 ----                    els
;  3348 --                  if peek({era,2})=incd_sib then
;  3349 ----DEV:
;  3350 ----                        if c_func(xIsBadReadPtr,{era-5,1}) then
;  3351 ----                            printf(1,"diag.e: oops, invalid <era-5>[%08x]\n",era)
;  3352 ----                        els
;  3353 --                      if peek(era-5)=cmp_eax_imm32 then
;  3354 --                          msg = msgs[92]  -- ie e92vhnbaav, aka
;  3355 --                                  -- "variable %s has not been assigned a value"
;  3356 --                          ep1 = peek4u(era-4)
;  3357 --                          if ep1>0 and ep1<=length(symtab) then
;  3358 --                              si = symtab[ep1]
;  3359 --                              msg = sprintf(msg,si[S_Name..S_Name])
;  3360 --                          else
;  3361 --                              printf(1,"diag.e: oops(2), var no[=%d] out of range\n",ep1) -- See note at top
;  3362 --                          end if
;  3363 --                      end if
;  3364 --                  end if
;  3365 --              end if
;  3366 --              msg_id = 0
;  3367 --              if not retN() then  -- See note at top
;  3368 --                  printf(1,"diag.e: oops, lineno=-1/e92/not retD(), era=#%08x\n",era)
;  3369 --                  exit
;  3370 --              end if
;  3371 --DEV removed 13/5/15 (for test/terror...)
;  3372                 if show_bad_era then
;  3373                     msg2 = sprintf("  (warning: lineno of -1 for era of #%08x)\n",{or_era})
    lea eax,[ebp-244] (symtab[1538])      ;#00468847: 215205 0CFFFFFF            uv 01 20  1 3155      
    mov edx,1                             ;#0046884D: 272 01000000               vu 04 00  1 3155      
    push #0046887A                        ;#00468852: 150 7A884600               uv 00 00  1 3156      
    push eax                              ;#00468857: 120                        vu 00 01  1 3156      
    mov eax,[#00402610] (or_era)          ;#00468858: 241 10264000               uv 01 00  1 3157      
    cmp eax,h4                            ;#0046885D: 075 00000040               uv 00 01  1 3158 01   
    jl #0046886E                          ;#00468862: 174 0A                     v  00 00  1 3158      
    add dword[ebx+eax*4-8],1              ;#00468864: 203104203 F8 01            u  00 09  3 3159      
    cmp eax,1244                          ;#00468869: 075 DC040000               vu 00 01  1 3161      
    push eax                              ;#0046886E: 120                        uv 00 01  1 3162      
    mov edi,[ebp-244] (symtab[1538])      ;#0046886F: 213275 0CFFFFFF            vu 80 20  1 3162      
    jmp #00460143 (:%pMkSq)               ;#00468875: 351 C978FFFF               v  00 00  1 3163      
    mov ecx,2                             ;#0046887A: 271 02000000               uv 02 00  1 3164      
    mov edx,210                           ;#0046887F: 272 D2000000               vu 04 00  1 3164      
    call #00462C02 (:%opFrame) (sprintf)  ;#00468884: 350 79A3FFFF               v  00 00  1 3165      
    mov esi,[#00402954]                   ;#00468889: 213065 54294000            uv 40 00  1 3166      
    mov [ebp] (fmt),esi                   ;#0046888F: 211165 00                  uv 00 60  1 3167 40   
    add dword[ebx+esi*4-8],1              ;#00468892: 203104263 F8 01            u  00 48  3 3169    *40*
    mov edi,[ebp+20] (prevebp)            ;#00468897: 213175 14                  vu 80 20  1 3171      
    mov eax,[edi-244]                     ;#0046889A: 213207 0CFFFFFF            uv 01 80  1 3174    *80*
    mov [edi-244], dword h4               ;#004688A0: 307207 0CFFFFFF 00000040   vu 00 80  1 3174      
    cmp eax,h4                            ;#004688AA: 075 00000040               uv 00 01  1 3175      
    jne #004688BB                         ;#004688AF: 165 0A                     v  00 00  1 3175      
    mov esi,1538                          ;#004688B1: 276 02060000               uv 40 00  1 3176      
    call #00462744 (:%pUnassigned)        ;#004688B6: 350 899EFFFF               v  00 00  1 3176      
    mov [ebp-4] (args),eax                ;#004688BB: 211105 FC                  uv 00 21  1 3177      
    mov [ebp+28] (retaddr),#004688CA      ;#004688BE: 307105 1C CA884600         vu 00 20  1 3177      
    jmp #00454E9A (code:sprintf)          ;#004688C5: 351 D0C5FEFF               v  00 00  1 3178      
    push eax                              ;#004688CA: 120                        uv 00 01  1 3179      
    mov ecx,[ebp-144] (msg2)              ;#004688CB: 213215 70FFFFFF            vu 02 20  1 3179      
    cmp ecx,h4                            ;#004688D1: 201371 00000040            uv 00 02  1 3180      
    jle #004688E7                         ;#004688D7: 176 0E                     v  00 00  1 3180      
    sub dword[ebx+ecx*4-8],1              ;#004688D9: 203154213 F8 01            u  00 0A  3 3181      
    jne #004688E7                         ;#004688DE: 165 07                     v  00 00  1 3183      
    mov edx,ecx                           ;#004688E0: 213321                     uv 04 02  1 3184      
    call #004639A8 (:%pDealloc)           ;#004688E2: 350 C1B0FFFF               v  00 00  1 3184      
    pop dword[ebp-144] (msg2)             ;#004688E7: 217205 70FFFFFF            np 00 20  3 3185      
;  3374                 end if
;  3375                 rtype = 1   -- 1 skip (lineno=-1)
    mov [ebp-128] (rtype), dword 1        ;#004688ED: 307105 80 01000000         uv 00 20  1 3188      
    jmp #00469553                         ;#004688F4: 351 5A0C0000               v  00 00  1 3188      
;  3376             else
;  3377 --?lineno
;  3378 --?sr
;  3379 --?sr[S_FPno]
;  3380 --?9997
;  3381 --?symtab[T_fileset]
;  3382 --?9998
;  3383 --if 0 then
;  3384 --              filename = symtab[T_fileset][sr[S_FPno]][1..2]&lineno
;  3385 ----?filename
;  3386 --              filename[1] = pathset[filename[1]]
;  3387 ----?filename
;  3388 --              put2(sprintf("%s%s:%d",filename))
;  3389 --else -- new code
;  3390 --20/12/19:
;  3391 --              filename = symtab[T_fileset][sr[S_FPno]][1..2]
;  3392                 sequence sfs = symtab[T_fileset]
    mov edi,[ebp] (symtab)                ;#004688F9: 213175 00                  uv 80 20  1 3189      
    cmp edi,h4                            ;#004688FC: 201377 00000040            uv 00 80  1 3190 80   
    jne #0046890E                         ;#00468902: 165 0A                     v  00 00  1 3190      
    mov esi,1309                          ;#00468904: 276 1D050000               uv 40 00  1 3191      
    call #00462744 (:%pUnassigned)        ;#00468909: 350 369EFFFF               v  00 00  1 3191      
    mov edi,17                            ;#0046890E: 277 11000000               uv 80 00  1 3192      
    lea ecx,[ebp-272] (sfs)               ;#00468913: 215215 F0FEFFFF            vu 02 20  1 3192      
    mov esi,[ebp] (symtab)                ;#00468919: 213165 00                  uv 40 20  1 3193      
    mov edx,1309                          ;#0046891C: 272 1D050000               vu 04 00  1 3193      
    mov al,0                              ;#00468921: 260 00                     uv 01 00  1 3194      
    call #00460FE5 (:%pSubse1)            ;#00468923: 350 BD86FFFF               v  00 00  1 3194      
;  3393                 integer srfn = sr[S_FPno]
    mov edi,3                             ;#00468928: 277 03000000               uv 80 00  1 3195      
    lea ecx,[ebp-276] (srfn)              ;#0046892D: 215215 ECFEFFFF            vu 02 20  1 3195      
    mov esi,[ebp-60] (sr)                 ;#00468933: 213165 C4                  uv 40 20  1 3196      
    mov edx,1324                          ;#00468936: 272 2C050000               vu 04 00  1 3196      
    call #0046106B (:%pSubse1i)           ;#0046893B: 350 2B87FFFF               v  00 00  1 3197      
;  3394 --printf(1,"pDiagN.e line 3294, srfn=%d, length(symtab[T_fileset])=%d\n",{srfn,length(sfs)})
;  3395                 if srfn>length(sfs) then
    mov ecx,[ebp-272] (sfs)               ;#00468940: 213215 F0FEFFFF            uv 02 20  1 3198      
    mov edi,[ebx+ecx*4-12]                ;#00468946: 213174213 F4               uv 80 0A  1 3201 02 *02*
    cmp eax,edi                           ;#0046894A: 071370                     uv 00 81  1 3202 80   
    jle #00468A00                         ;#0046894C: 017216 AE000000            v  00 00  1 3202      
;  3396 --DEV triggered on ::retaddr in pcallfunc.e line 251 - needs something akin to AddressMapping (see below)...[??]
;  3397 --?pathset
;  3398 --printf(1,"cc_ret:%08x\n",{cc_ret_addr})
;  3399                     filename = {"<unknown file>",sprintf("(%d)",srfn)}
    mov ecx,2                             ;#00468952: 271 02000000               uv 02 00  1 3203      
    mov edx,210                           ;#00468957: 272 D2000000               vu 04 00  1 3203      
    call #00462C02 (:%opFrame) (sprintf)  ;#0046895C: 350 A1A2FFFF               v  00 00  1 3204      
    mov esi,[#0040295C]                   ;#00468961: 213065 5C294000            uv 40 00  1 3205      
    mov [ebp] (fmt),esi                   ;#00468967: 211165 00                  uv 00 60  1 3206 40   
    add dword[ebx+esi*4-8],1              ;#0046896A: 203104263 F8 01            u  00 48  3 3208    *40*
    mov edi,[ebp+20] (prevebp)            ;#0046896F: 213175 14                  vu 80 20  1 3210      
    mov eax,[edi-276]                     ;#00468972: 213207 ECFEFFFF            uv 01 80  1 3213    *80*
    mov [ebp-4] (args),eax                ;#00468978: 211105 FC                  uv 00 21  1 3214 01   
    mov [ebp+28] (retaddr),#00468987      ;#0046897B: 307105 1C 87894600         vu 00 20  1 3214      
    jmp #00454E9A (code:sprintf)          ;#00468982: 351 13C5FEFF               v  00 00  1 3215      
    push eax                              ;#00468987: 120                        uv 00 01  1 3216      
    mov ecx,[ebp-192] (symtab[1493])      ;#00468988: 213215 40FFFFFF            vu 02 20  1 3216      
    cmp ecx,h4                            ;#0046898E: 201371 00000040            uv 00 02  1 3217      
    jle #004689A4                         ;#00468994: 176 0E                     v  00 00  1 3217      
    sub dword[ebx+ecx*4-8],1              ;#00468996: 203154213 F8 01            u  00 0A  3 3218      
    jne #004689A4                         ;#0046899B: 165 07                     v  00 00  1 3220      
    mov edx,ecx                           ;#0046899D: 213321                     uv 04 02  1 3221      
    call #004639A8 (:%pDealloc)           ;#0046899F: 350 04B0FFFF               v  00 00  1 3221      
    pop dword[ebp-192] (symtab[1493])     ;#004689A4: 217205 40FFFFFF            np 00 20  3 3222      
    lea eax,[ebp-64] (filename)           ;#004689AA: 215105 C0                  uv 01 20  1 3225      
    mov edx,2                             ;#004689AD: 272 02000000               vu 04 00  1 3225      
    push #004689E5                        ;#004689B2: 150 E5894600               uv 00 00  1 3226      
    push eax                              ;#004689B7: 120                        vu 00 01  1 3226      
    push dword[ebp-192] (symtab[1493])    ;#004689B8: 377265 40FFFFFF            np 00 20  2 3227      
    mov [ebp-192] (symtab[1493]),ebx      ;#004689BE: 211235 40FFFFFF            uv 00 28  1 3229      
    mov edi,[#00402958]                   ;#004689C4: 213075 58294000            vu 80 00  1 3229      
    cmp edi,h4                            ;#004689CA: 201377 00000040            uv 00 80  1 3230      
    jl #004689DC                          ;#004689D0: 174 0A                     v  00 00  1 3230      
    add dword[ebx+edi*4-8],1              ;#004689D2: 203104273 F8 01            u  00 88  3 3231      
    cmp eax,1567                          ;#004689D7: 075 1F060000               vu 00 01  1 3233      
    push edi                              ;#004689DC: 127                        uv 00 80  1 3234      
    mov edi,[ebp-64] (filename)           ;#004689DD: 213175 C0                  vu 80 20  1 3234      
    jmp #00460143 (:%pMkSq)               ;#004689E0: 351 5E77FFFF               v  00 00  1 3235      
;  3400                     -- (drat, cannot be sure, so just take a leap of faith...)
;  3401 --                  filename = {pathset[2],"pcallfunc.e",":cc_retaddr"}
;  3402                     sr[S_Name] = -1
    mov edi,[#0040258C] (S_Name)          ;#004689E5: 213075 8C254000            uv 80 00  1 3236      
    mov ecx,-1                            ;#004689EB: 271 FFFFFFFF               vu 02 00  1 3236      
    mov esi,[ebp-60] (sr)                 ;#004689F0: 213165 C4                  uv 40 20  1 3237      
    lea eax,[ebp-60] (sr)                 ;#004689F3: 215105 C4                  vu 01 20  1 3237      
    call #004607F3 (:%pRepe1)             ;#004689F6: 350 F87DFFFF               v  00 00  1 3238      
    jmp #00468AF1                         ;#004689FB: 351 F1000000               v  00 00  1 3239      
;  3403                 else
;  3404 --                  filename = sfs[srfn][1..2]
;  3405                     filename = deep_copy(sfs[srfn][1..2])
    lea edx,[ebp-220] (symtab[1501])      ;#00468A00: 215225 24FFFFFF            uv 04 20  1 3240      
    mov ecx,2                             ;#00468A06: 271 02000000               vu 02 00  1 3240      
    push #00468A26                        ;#00468A0B: 150 268A4600               uv 00 00  1 3241      
    push edx                              ;#00468A10: 122                        vu 00 04  1 3241      
    push 2                                ;#00468A11: 152 02                     uv 00 00  1 3242      
    push 1                                ;#00468A13: 152 01                     vu 00 00  1 3242      
    push eax                              ;#00468A15: 120                        uv 00 01  1 3243      
    mov esi,[ebp-272] (sfs)               ;#00468A16: 213265 F0FEFFFF            vu 40 20  1 3243      
    mov edx,1565                          ;#00468A1C: 272 1D060000               uv 04 00  1 3244      
    jmp #00460A75 (:%pSubss)              ;#00468A21: 351 4F80FFFF               v  00 00  1 3244      
    mov ecx,8                             ;#00468A26: 271 08000000               uv 02 00  1 3245      
    mov edx,266                           ;#00468A2B: 272 0A010000               vu 04 00  1 3245      
    call :%opFrame (deep_copy)            ;#00468A30: 350 CDA1FFFF               v  00 00  1 3246      
    mov edi,[ebp+20] (prevebp)            ;#00468A35: 213175 14                  uv 80 20  1 3247      
    mov eax,[edi-220]                     ;#00468A38: 213207 24FFFFFF            uv 01 80  1 3250 80 *80*
    mov [edi-220], dword h4               ;#00468A3E: 307207 24FFFFFF 00000040   vu 00 80  1 3250      
    cmp eax,h4                            ;#00468A48: 075 00000040               uv 00 01  1 3251      
    jne #00468A59                         ;#00468A4D: 165 0A                     v  00 00  1 3251      
    mov esi,1501                          ;#00468A4F: 276 DD050000               uv 40 00  1 3252      
    call #00462744 (:%pUnassigned)        ;#00468A54: 350 EB9CFFFF               v  00 00  1 3252      
    mov [ebp] (o),eax                     ;#00468A59: 211105 00                  uv 00 21  1 3253      
    mov [ebp+28] (retaddr),#00468A68      ;#00468A5C: 307105 1C 688A4600         vu 00 20  1 3253      
    jmp #0044FA59 (code:deep_copy)        ;#00468A63: 351 F16FFEFF               v  00 00  1 3254      
    push eax                              ;#00468A68: 120                        uv 00 01  1 3255      
    mov ecx,[ebp-64] (filename)           ;#00468A69: 213115 C0                  vu 02 20  1 3255      
    cmp ecx,h4                            ;#00468A6C: 201371 00000040            uv 00 02  1 3256      
    jle #00468A82                         ;#00468A72: 176 0E                     v  00 00  1 3256      
    sub dword[ebx+ecx*4-8],1              ;#00468A74: 203154213 F8 01            u  00 0A  3 3257      
    jne #00468A82                         ;#00468A79: 165 07                     v  00 00  1 3259      
    mov edx,ecx                           ;#00468A7B: 213321                     uv 04 02  1 3260      
    call #004639A8 (:%pDealloc)           ;#00468A7D: 350 26AFFFFF               v  00 00  1 3260      
    pop dword[ebp-64] (filename)          ;#00468A82: 217105 C0                  np 00 20  3 3261      
;  3406                     filename[1] = pathset[filename[1]]
    mov edi,1                             ;#00468A85: 277 01000000               uv 80 00  1 3264      
    lea ecx,[ebp-264] (symtab[1562])      ;#00468A8A: 215215 F8FEFFFF            vu 02 20  1 3264      
    mov esi,[ebp-64] (filename)           ;#00468A90: 213165 C0                  uv 40 20  1 3265      
    mov edx,1325                          ;#00468A93: 272 2D050000               vu 04 00  1 3265      
    mov al,0                              ;#00468A98: 260 00                     uv 01 00  1 3266      
    call #00460FE5 (:%pSubse1)            ;#00468A9A: 350 4685FFFF               v  00 00  1 3266      
    mov edi,[ebp-264] (symtab[1562])      ;#00468A9F: 213275 F8FEFFFF            uv 80 20  1 3267      
    lea ecx,[ebp-280] (symtab[1569])      ;#00468AA5: 215215 E8FEFFFF            vu 02 20  1 3267      
    mov esi,[ebp-68] (pathset)            ;#00468AAB: 213165 BC                  uv 40 20  1 3268      
    mov edx,1326                          ;#00468AAE: 272 2E050000               vu 04 00  1 3268      
    mov al,0                              ;#00468AB3: 260 00                     uv 01 00  1 3269      
    call #00460FE5 (:%pSubse1)            ;#00468AB5: 350 2B85FFFF               v  00 00  1 3269      
    mov edi,[#0040201C]                   ;#00468ABA: 213075 1C204000            uv 80 00  1 3270      
    mov ecx,[ebp-280] (symtab[1569])      ;#00468AC0: 213215 E8FEFFFF            vu 02 20  1 3270      
    mov esi,[ebp-64] (filename)           ;#00468AC6: 213165 C0                  uv 40 20  1 3271      
    lea eax,[ebp-64] (filename)           ;#00468AC9: 215105 C0                  vu 01 20  1 3271      
    call #004607F3 (:%pRepe1)             ;#00468ACC: 350 227DFFFF               v  00 00  1 3272      
    mov edx,[ebp-280] (symtab[1569])      ;#00468AD1: 213225 E8FEFFFF            uv 04 20  1 3273      
    cmp edx,h4                            ;#00468AD7: 201372 00000040            uv 00 04  1 3274 04   
    mov [ebp-280] (symtab[1569]),ebx      ;#00468ADD: 211235 E8FEFFFF            vu 00 28  1 3274      
    jle #00468AF1                         ;#00468AE3: 176 0C                     v  00 00  1 3275      
    sub dword[ebx+edx*4-8],1              ;#00468AE5: 203154223 F8 01            u  00 0C  3 3276      
    jne #00468AF1                         ;#00468AEA: 165 05                     v  00 00  1 3278      
    call #004639A8 (:%pDealloc)           ;#00468AEC: 350 B7AEFFFF               v  00 00  1 3279      
;  3407                 end if
;  3408                 if lineno=-1 then
    mov eax,[ebp-20] (lineno)             ;#00468AF1: 213105 EC                  uv 01 20  1 3280      
    cmp eax,-1                            ;#00468AF4: 203370 FF                  uv 00 01  1 3281 01   
    jne #00468D0D                         ;#00468AF7: 017205 10020000            v  00 00  1 3281      
;  3409                     filename = append(filename,sprintf("-1 (era=#%s, from_addr=#%s, ret_addr=#%s)",
;  3410                                                        {addrS(or_era),addrS(from_addr),addrS(ret_addr)}))
    mov ecx,1                             ;#00468AFD: 271 01000000               uv 02 00  1 3282      
    mov edx,1292                          ;#00468B02: 272 0C050000               vu 04 00  1 3282      
    call #00462C02 (:%opFrame) (addrS)    ;#00468B07: 350 F6A0FFFF               v  00 00  1 3283      
    mov edi,[#00402610] (or_era)          ;#00468B0C: 213075 10264000            uv 80 00  1 3284      
    mov [ebp] (a),edi                     ;#00468B12: 211175 00                  uv 00 A0  1 3285 80   
    cmp edi,h4                            ;#00468B15: 201377 00000040            vu 00 80  1 3285      
    jl #00468B22                          ;#00468B1B: 174 05                     v  00 00  1 3286      
    add dword[ebx+edi*4-8],1              ;#00468B1D: 203104273 F8 01            u  00 88  3 3287      
    mov [ebp+28] (retaddr),#00468B2E      ;#00468B22: 307105 1C 2E8B4600         vu 00 20  1 3289      
    jmp #0046C5AC (code:addrS)            ;#00468B29: 351 7E3A0000               v  00 00  1 3290      
    push eax                              ;#00468B2E: 120                        uv 00 01  1 3291      
    mov ecx,[ebp-192] (symtab[1493])      ;#00468B2F: 213215 40FFFFFF            vu 02 20  1 3291      
    cmp ecx,h4                            ;#00468B35: 201371 00000040            uv 00 02  1 3292      
    jle #00468B4B                         ;#00468B3B: 176 0E                     v  00 00  1 3292      
    sub dword[ebx+ecx*4-8],1              ;#00468B3D: 203154213 F8 01            u  00 0A  3 3293      
    jne #00468B4B                         ;#00468B42: 165 07                     v  00 00  1 3295      
    mov edx,ecx                           ;#00468B44: 213321                     uv 04 02  1 3296      
    call #004639A8 (:%pDealloc)           ;#00468B46: 350 5DAEFFFF               v  00 00  1 3296      
    pop dword[ebp-192] (symtab[1493])     ;#00468B4B: 217205 40FFFFFF            np 00 20  3 3297      
    mov ecx,1                             ;#00468B51: 271 01000000               uv 02 00  1 3300      
    mov edx,1292                          ;#00468B56: 272 0C050000               vu 04 00  1 3300      
    call #00462C02 (:%opFrame) (addrS)    ;#00468B5B: 350 A2A0FFFF               v  00 00  1 3301      
    mov edi,[ebp+20] (prevebp)            ;#00468B60: 213175 14                  uv 80 20  1 3302      
    mov eax,[edi-88]                      ;#00468B63: 213107 A8                  uv 01 80  1 3305 80 *80*
    xor ebx,ebx                           ;#00468B66: 061333                     vu 08 08  1 3305      
    cmp eax,h4                            ;#00468B68: 075 00000040               uv 00 01  1 3306      
    jl #00468B79                          ;#00468B6D: 174 0A                     v  00 00  1 3306      
    add dword[ebx+eax*4-8],1              ;#00468B6F: 203104203 F8 01            u  00 09  3 3307      
    cmp eax,1331                          ;#00468B74: 075 33050000               vu 00 01  1 3309      
    mov [ebp] (a),eax                     ;#00468B79: 211105 00                  uv 00 21  1 3310      
    mov [ebp+28] (retaddr),#00468B88      ;#00468B7C: 307105 1C 888B4600         vu 00 20  1 3310      
    jmp #0046C5AC (code:addrS)            ;#00468B83: 351 243A0000               v  00 00  1 3311      
    push eax                              ;#00468B88: 120                        uv 00 01  1 3312      
    mov esi,[ebp-196] (symtab[1494])      ;#00468B89: 213265 3CFFFFFF            vu 40 20  1 3312      
    cmp esi,h4                            ;#00468B8F: 201376 00000040            uv 00 40  1 3313      
    jle #00468BA5                         ;#00468B95: 176 0E                     v  00 00  1 3313      
    sub dword[ebx+esi*4-8],1              ;#00468B97: 203154263 F8 01            u  00 48  3 3314      
    jne #00468BA5                         ;#00468B9C: 165 07                     v  00 00  1 3316      
    mov edx,esi                           ;#00468B9E: 213326                     uv 04 40  1 3317      
    call #004639A8 (:%pDealloc)           ;#00468BA0: 350 03AEFFFF               v  00 00  1 3317      
    pop dword[ebp-196] (symtab[1494])     ;#00468BA5: 217205 3CFFFFFF            np 00 20  3 3318      
    mov ecx,1                             ;#00468BAB: 271 01000000               uv 02 00  1 3321      
    mov edx,1292                          ;#00468BB0: 272 0C050000               vu 04 00  1 3321      
    call #00462C02 (:%opFrame) (addrS)    ;#00468BB5: 350 48A0FFFF               v  00 00  1 3322      
    mov edi,[ebp+20] (prevebp)            ;#00468BBA: 213175 14                  uv 80 20  1 3323      
    mov eax,[edi-96]                      ;#00468BBD: 213107 A0                  uv 01 80  1 3326 80 *80*
    xor ebx,ebx                           ;#00468BC0: 061333                     vu 08 08  1 3326      
    cmp eax,h4                            ;#00468BC2: 075 00000040               uv 00 01  1 3327      
    jl #00468BD3                          ;#00468BC7: 174 0A                     v  00 00  1 3327      
    add dword[ebx+eax*4-8],1              ;#00468BC9: 203104203 F8 01            u  00 09  3 3328      
    cmp eax,1333                          ;#00468BCE: 075 35050000               vu 00 01  1 3330      
    mov [ebp] (a),eax                     ;#00468BD3: 211105 00                  uv 00 21  1 3331      
    mov [ebp+28] (retaddr),#00468BE2      ;#00468BD6: 307105 1C E28B4600         vu 00 20  1 3331      
    jmp #0046C5AC (code:addrS)            ;#00468BDD: 351 CA390000               v  00 00  1 3332      
    push eax                              ;#00468BE2: 120                        uv 00 01  1 3333      
    mov edi,[ebp-200] (symtab[1495])      ;#00468BE3: 213275 38FFFFFF            vu 80 20  1 3333      
    cmp edi,h4                            ;#00468BE9: 201377 00000040            uv 00 80  1 3334      
    jle #00468BFF                         ;#00468BEF: 176 0E                     v  00 00  1 3334      
    sub dword[ebx+edi*4-8],1              ;#00468BF1: 203154273 F8 01            u  00 88  3 3335      
    jne #00468BFF                         ;#00468BF6: 165 07                     v  00 00  1 3337      
    mov edx,edi                           ;#00468BF8: 213327                     uv 04 80  1 3338      
    call #004639A8 (:%pDealloc)           ;#00468BFA: 350 A9ADFFFF               v  00 00  1 3338      
    pop dword[ebp-200] (symtab[1495])     ;#00468BFF: 217205 38FFFFFF            np 00 20  3 3339      
    lea eax,[ebp-244] (symtab[1538])      ;#00468C05: 215205 0CFFFFFF            uv 01 20  1 3342      
    mov edx,3                             ;#00468C0B: 272 03000000               vu 04 00  1 3342      
    push #00468C45                        ;#00468C10: 150 458C4600               uv 00 00  1 3343      
    push eax                              ;#00468C15: 120                        vu 00 01  1 3343      
    push dword[ebp-200] (symtab[1495])    ;#00468C16: 377265 38FFFFFF            np 00 20  2 3344      
    mov [ebp-200] (symtab[1495]),ebx      ;#00468C1C: 211235 38FFFFFF            uv 00 28  1 3346      
    push dword[ebp-196] (symtab[1494])    ;#00468C22: 377265 3CFFFFFF            np 00 20  2 3347      
    mov [ebp-196] (symtab[1494]),ebx      ;#00468C28: 211235 3CFFFFFF            uv 00 28  1 3349      
    push dword[ebp-192] (symtab[1493])    ;#00468C2E: 377265 40FFFFFF            np 00 20  2 3350      
    mov [ebp-192] (symtab[1493]),ebx      ;#00468C34: 211235 40FFFFFF            uv 00 28  1 3352      
    mov edi,[ebp-244] (symtab[1538])      ;#00468C3A: 213275 0CFFFFFF            vu 80 20  1 3352      
    jmp #00460143 (:%pMkSq)               ;#00468C40: 351 FE74FFFF               v  00 00  1 3353      
    mov ecx,2                             ;#00468C45: 271 02000000               uv 02 00  1 3354      
    mov edx,210                           ;#00468C4A: 272 D2000000               vu 04 00  1 3354      
    call #00462C02 (:%opFrame) (sprintf)  ;#00468C4F: 350 AE9FFFFF               v  00 00  1 3355      
    mov ecx,[#00402960]                   ;#00468C54: 213015 60294000            uv 02 00  1 3356      
    mov [ebp] (fmt),ecx                   ;#00468C5A: 211115 00                  uv 00 22  1 3357 02   
    add dword[ebx+ecx*4-8],1              ;#00468C5D: 203104213 F8 01            u  00 0A  3 3359    *02*
    mov edi,[ebp+20] (prevebp)            ;#00468C62: 213175 14                  vu 80 20  1 3361      
    mov eax,[edi-244]                     ;#00468C65: 213207 0CFFFFFF            uv 01 80  1 3364    *80*
    mov [edi-244], dword h4               ;#00468C6B: 307207 0CFFFFFF 00000040   vu 00 80  1 3364      
    cmp eax,h4                            ;#00468C75: 075 00000040               uv 00 01  1 3365      
    jne #00468C86                         ;#00468C7A: 165 0A                     v  00 00  1 3365      
    mov esi,1538                          ;#00468C7C: 276 02060000               uv 40 00  1 3366      
    call #00462744 (:%pUnassigned)        ;#00468C81: 350 BE9AFFFF               v  00 00  1 3366      
    mov [ebp-4] (args),eax                ;#00468C86: 211105 FC                  uv 00 21  1 3367      
    mov [ebp+28] (retaddr),#00468C95      ;#00468C89: 307105 1C 958C4600         vu 00 20  1 3367      
    jmp #00454E9A (code:sprintf)          ;#00468C90: 351 05C2FEFF               v  00 00  1 3368      
    push eax                              ;#00468C95: 120                        uv 00 01  1 3369      
    mov esi,[ebp-192] (symtab[1493])      ;#00468C96: 213265 40FFFFFF            vu 40 20  1 3369      
    cmp esi,h4                            ;#00468C9C: 201376 00000040            uv 00 40  1 3370      
    jle #00468CB2                         ;#00468CA2: 176 0E                     v  00 00  1 3370      
    sub dword[ebx+esi*4-8],1              ;#00468CA4: 203154263 F8 01            u  00 48  3 3371      
    jne #00468CB2                         ;#00468CA9: 165 07                     v  00 00  1 3373      
    mov edx,esi                           ;#00468CAB: 213326                     uv 04 40  1 3374      
    call #004639A8 (:%pDealloc)           ;#00468CAD: 350 F6ACFFFF               v  00 00  1 3374      
    pop dword[ebp-192] (symtab[1493])     ;#00468CB2: 217205 40FFFFFF            np 00 20  3 3375      
    mov edi,[ebp-64] (filename)           ;#00468CB8: 213175 C0                  uv 80 20  1 3378      
    cmp edi,h4                            ;#00468CBB: 201377 00000040            uv 00 80  1 3379 80   
    jne #00468CCD                         ;#00468CC1: 165 0A                     v  00 00  1 3379      
    mov esi,1325                          ;#00468CC3: 276 2D050000               uv 40 00  1 3380      
    call #00462744 (:%pUnassigned)        ;#00468CC8: 350 779AFFFF               v  00 00  1 3380      
    lea edx,[ebp-64] (filename)           ;#00468CCD: 215125 C0                  uv 04 20  1 3381      
    lea edi,[ebp-64] (filename)           ;#00468CD0: 215175 C0                  vu 80 20  1 3381      
    lea ecx,[ebp-192] (symtab[1493])      ;#00468CD3: 215215 40FFFFFF            uv 02 20  1 3382      
    xor eax,eax                           ;#00468CD9: 061300                     vu 01 01  1 3382      
    call #0045F9F7 (:%opApnd)             ;#00468CDB: 350 176DFFFF               v  00 00  1 3383      
    mov edx,[ebp-192] (symtab[1493])      ;#00468CE0: 213225 40FFFFFF            uv 04 20  1 3384      
    cmp edx,h4                            ;#00468CE6: 201372 00000040            uv 00 04  1 3385 04   
    mov [ebp-192] (symtab[1493]),ebx      ;#00468CEC: 211235 40FFFFFF            vu 00 28  1 3385      
    jle #00468DAA                         ;#00468CF2: 017216 B2000000            v  00 00  1 3386      
    sub dword[ebx+edx*4-8],1              ;#00468CF8: 203154223 F8 01            u  00 0C  3 3387      
    jne #00468DAA                         ;#00468CFD: 017205 A7000000            v  00 00  1 3389      
    call #004639A8 (:%pDealloc)           ;#00468D03: 350 A0ACFFFF               v  00 00  1 3390      
    jmp #00468DAA                         ;#00468D08: 351 9D000000               v  00 00  1 3391      
;  3411                 else
;  3412                     filename = append(filename,sprintf("%d",lineno))
    mov ecx,2                             ;#00468D0D: 271 02000000               uv 02 00  1 3392      
    mov edx,210                           ;#00468D12: 272 D2000000               vu 04 00  1 3392      
    call #00462C02 (:%opFrame) (sprintf)  ;#00468D17: 350 E69EFFFF               v  00 00  1 3393      
    mov ecx,[#004024E4]                   ;#00468D1C: 213015 E4244000            uv 02 00  1 3394      
    mov [ebp] (fmt),ecx                   ;#00468D22: 211115 00                  uv 00 22  1 3395 02   
    add dword[ebx+ecx*4-8],1              ;#00468D25: 203104213 F8 01            u  00 0A  3 3397    *02*
    mov edi,[ebp+20] (prevebp)            ;#00468D2A: 213175 14                  vu 80 20  1 3399      
    mov eax,[edi-20]                      ;#00468D2D: 213107 EC                  uv 01 80  1 3402    *80*
    mov [ebp-4] (args),eax                ;#00468D30: 211105 FC                  uv 00 21  1 3403 01   
    mov [ebp+28] (retaddr),#00468D3F      ;#00468D33: 307105 1C 3F8D4600         vu 00 20  1 3403      
    jmp #00454E9A (code:sprintf)          ;#00468D3A: 351 5BC1FEFF               v  00 00  1 3404      
    push eax                              ;#00468D3F: 120                        uv 00 01  1 3405      
    mov esi,[ebp-192] (symtab[1493])      ;#00468D40: 213265 40FFFFFF            vu 40 20  1 3405      
    cmp esi,h4                            ;#00468D46: 201376 00000040            uv 00 40  1 3406      
    jle #00468D5C                         ;#00468D4C: 176 0E                     v  00 00  1 3406      
    sub dword[ebx+esi*4-8],1              ;#00468D4E: 203154263 F8 01            u  00 48  3 3407      
    jne #00468D5C                         ;#00468D53: 165 07                     v  00 00  1 3409      
    mov edx,esi                           ;#00468D55: 213326                     uv 04 40  1 3410      
    call #004639A8 (:%pDealloc)           ;#00468D57: 350 4CACFFFF               v  00 00  1 3410      
    pop dword[ebp-192] (symtab[1493])     ;#00468D5C: 217205 40FFFFFF            np 00 20  3 3411      
    mov edi,[ebp-64] (filename)           ;#00468D62: 213175 C0                  uv 80 20  1 3414      
    cmp edi,h4                            ;#00468D65: 201377 00000040            uv 00 80  1 3415 80   
    jne #00468D77                         ;#00468D6B: 165 0A                     v  00 00  1 3415      
    mov esi,1325                          ;#00468D6D: 276 2D050000               uv 40 00  1 3416      
    call #00462744 (:%pUnassigned)        ;#00468D72: 350 CD99FFFF               v  00 00  1 3416      
    lea edx,[ebp-64] (filename)           ;#00468D77: 215125 C0                  uv 04 20  1 3417      
    lea edi,[ebp-64] (filename)           ;#00468D7A: 215175 C0                  vu 80 20  1 3417      
    lea ecx,[ebp-192] (symtab[1493])      ;#00468D7D: 215215 40FFFFFF            uv 02 20  1 3418      
    xor eax,eax                           ;#00468D83: 061300                     vu 01 01  1 3418      
    call #0045F9F7 (:%opApnd)             ;#00468D85: 350 6D6CFFFF               v  00 00  1 3419      
    mov edx,[ebp-192] (symtab[1493])      ;#00468D8A: 213225 40FFFFFF            uv 04 20  1 3420      
    cmp edx,h4                            ;#00468D90: 201372 00000040            uv 00 04  1 3421 04   
    mov [ebp-192] (symtab[1493]),ebx      ;#00468D96: 211235 40FFFFFF            vu 00 28  1 3421      
    jle #00468DAA                         ;#00468D9C: 176 0C                     v  00 00  1 3422      
    sub dword[ebx+edx*4-8],1              ;#00468D9E: 203154223 F8 01            u  00 0C  3 3423      
    jne #00468DAA                         ;#00468DA3: 165 05                     v  00 00  1 3425      
    call #004639A8 (:%pDealloc)           ;#00468DA5: 350 FEABFFFF               v  00 00  1 3426      
;  3413                 end if
;  3414                 put2(sprintf("%s%s:%s",filename))
    mov ecx,2                             ;#00468DAA: 271 02000000               uv 02 00  1 3427      
    mov edx,210                           ;#00468DAF: 272 D2000000               vu 04 00  1 3427      
    call #00462C02 (:%opFrame) (sprintf)  ;#00468DB4: 350 499EFFFF               v  00 00  1 3428      
    mov ecx,[#00402964]                   ;#00468DB9: 213015 64294000            uv 02 00  1 3429      
    mov [ebp] (fmt),ecx                   ;#00468DBF: 211115 00                  uv 00 22  1 3430 02   
    add dword[ebx+ecx*4-8],1              ;#00468DC2: 203104213 F8 01            u  00 0A  3 3432    *02*
    mov edi,[ebp+20] (prevebp)            ;#00468DC7: 213175 14                  vu 80 20  1 3434      
    mov eax,[edi-64]                      ;#00468DCA: 213107 C0                  uv 01 80  1 3437    *80*
    xor ebx,ebx                           ;#00468DCD: 061333                     vu 08 08  1 3437      
    cmp eax,h4                            ;#00468DCF: 075 00000040               uv 00 01  1 3438      
    jl #00468DE0                          ;#00468DD4: 174 0A                     v  00 00  1 3438      
    add dword[ebx+eax*4-8],1              ;#00468DD6: 203104203 F8 01            u  00 09  3 3439      
    cmp eax,1325                          ;#00468DDB: 075 2D050000               vu 00 01  1 3441      
    mov [ebp-4] (args),eax                ;#00468DE0: 211105 FC                  uv 00 21  1 3442      
    mov [ebp+28] (retaddr),#00468DEF      ;#00468DE3: 307105 1C EF8D4600         vu 00 20  1 3442      
    jmp #00454E9A (code:sprintf)          ;#00468DEA: 351 ABC0FEFF               v  00 00  1 3443      
    push eax                              ;#00468DEF: 120                        uv 00 01  1 3444      
    mov esi,[ebp-192] (symtab[1493])      ;#00468DF0: 213265 40FFFFFF            vu 40 20  1 3444      
    cmp esi,h4                            ;#00468DF6: 201376 00000040            uv 00 40  1 3445      
    jle #00468E0C                         ;#00468DFC: 176 0E                     v  00 00  1 3445      
    sub dword[ebx+esi*4-8],1              ;#00468DFE: 203154263 F8 01            u  00 48  3 3446      
    jne #00468E0C                         ;#00468E03: 165 07                     v  00 00  1 3448      
    mov edx,esi                           ;#00468E05: 213326                     uv 04 40  1 3449      
    call #004639A8 (:%pDealloc)           ;#00468E07: 350 9CABFFFF               v  00 00  1 3449      
    pop dword[ebp-192] (symtab[1493])     ;#00468E0C: 217205 40FFFFFF            np 00 20  3 3450      
    mov ecx,4                             ;#00468E12: 271 04000000               uv 02 00  1 3453      
    mov edx,1165                          ;#00468E17: 272 8D040000               vu 04 00  1 3453      
    call #00462C02 (:%opFrame) (put2)     ;#00468E1C: 350 E19DFFFF               v  00 00  1 3454      
    mov edi,[ebp+20] (prevebp)            ;#00468E21: 213175 14                  uv 80 20  1 3455      
    mov eax,[edi-192]                     ;#00468E24: 213207 40FFFFFF            uv 01 80  1 3458 80 *80*
    mov [edi-192], dword h4               ;#00468E2A: 307207 40FFFFFF 00000040   vu 00 80  1 3458      
    cmp eax,h4                            ;#00468E34: 075 00000040               uv 00 01  1 3459      
    jne #00468E45                         ;#00468E39: 165 0A                     v  00 00  1 3459      
    mov esi,1493                          ;#00468E3B: 276 D5050000               uv 40 00  1 3460      
    call #00462744 (:%pUnassigned)        ;#00468E40: 350 FF98FFFF               v  00 00  1 3460      
    mov [ebp] (emsg),eax                  ;#00468E45: 211105 00                  uv 00 21  1 3461      
    mov [ebp+28] (retaddr),#00468E54      ;#00468E48: 307105 1C 548E4600         vu 00 20  1 3461      
    jmp #0046C44A (code:put2)             ;#00468E4F: 351 F6350000               v  00 00  1 3462      
;  3415 --4/2/21
;  3416 cdi_filename = filename[2]
    mov edi,[ebp-64] (filename)           ;#00468E54: 213175 C0                  uv 80 20  1 3463      
    cmp edi,h4                            ;#00468E57: 201377 00000040            uv 00 80  1 3464 80   
    jne #00468E69                         ;#00468E5D: 165 0A                     v  00 00  1 3464      
    mov esi,1325                          ;#00468E5F: 276 2D050000               uv 40 00  1 3465      
    call #00462744 (:%pUnassigned)        ;#00468E64: 350 DB98FFFF               v  00 00  1 3465      
    mov edi,2                             ;#00468E69: 277 02000000               uv 80 00  1 3466      
    mov ecx,#00402540                     ;#00468E6E: 271 40254000               vu 02 00  1 3466      
    mov esi,[ebp-64] (filename)           ;#00468E73: 213165 C0                  uv 40 20  1 3467      
    mov edx,1325                          ;#00468E76: 272 2D050000               vu 04 00  1 3467      
    mov al,0                              ;#00468E7B: 260 00                     uv 01 00  1 3468      
    call #00460FE5 (:%pSubse1)            ;#00468E7D: 350 6381FFFF               v  00 00  1 3468      
;  3417 --end if
;  3418                 if sr[S_Name]=-1 then
    mov edi,1                             ;#00468E82: 277 01000000               uv 80 00  1 3469      
    lea ecx,[ebp-280] (symtab[1569])      ;#00468E87: 215215 E8FEFFFF            vu 02 20  1 3469      
    mov esi,[ebp-60] (sr)                 ;#00468E8D: 213165 C4                  uv 40 20  1 3470      
    mov edx,1324                          ;#00468E90: 272 2C050000               vu 04 00  1 3470      
    mov al,0                              ;#00468E95: 260 00                     uv 01 00  1 3471      
    call #00460FE5 (:%pSubse1)            ;#00468E97: 350 4981FFFF               v  00 00  1 3471      
    mov ecx,[ebp-280] (symtab[1569])      ;#00468E9C: 213215 E8FEFFFF            uv 02 20  1 3472      
    cmp ecx,-1                            ;#00468EA2: 203371 FF                  uv 00 02  1 3473 02   
    jne #00468ED4                         ;#00468EA5: 165 2D                     v  00 00  1 3473      
;  3419 --              if sr[S_Name]=-1 or sr[S_NTyp]=S_Rsvd then
;  3420                     put2("\n")
    mov ecx,4                             ;#00468EA7: 271 04000000               uv 02 00  1 3474      
    mov edx,1165                          ;#00468EAC: 272 8D040000               vu 04 00  1 3474      
    call #00462C02 (:%opFrame) (put2)     ;#00468EB1: 350 4C9DFFFF               v  00 00  1 3475      
    mov eax,[#00402330]                   ;#00468EB6: 241 30234000               uv 01 00  1 3476      
    mov [ebp] (emsg),eax                  ;#00468EBB: 211105 00                  uv 00 21  1 3477 01   
    add dword[ebx+eax*4-8],1              ;#00468EBE: 203104203 F8 01            u  00 09  3 3479    *01*
    mov [ebp+28] (retaddr),#00468ECF      ;#00468EC3: 307105 1C CF8E4600         vu 00 20  1 3481      
    jmp #0046C44A (code:put2)             ;#00468ECA: 351 7B350000               v  00 00  1 3482      
    jmp #0046903B                         ;#00468ECF: 351 67010000               v  00 00  1 3483      
;  3421                 else
;  3422                     put2(sprintf(" in %s %s()\n",{rtndescs[sr[S_NTyp]-S_Type+1],sr[S_Name]}))
    mov edi,2                             ;#00468ED4: 277 02000000               uv 80 00  1 3484      
    lea ecx,[ebp-280] (symtab[1569])      ;#00468ED9: 215215 E8FEFFFF            vu 02 20  1 3484      
    mov esi,[ebp-60] (sr)                 ;#00468EDF: 213165 C4                  uv 40 20  1 3485      
    mov edx,1324                          ;#00468EE2: 272 2C050000               vu 04 00  1 3485      
    mov al,0                              ;#00468EE7: 260 00                     uv 01 00  1 3486      
    call #00460FE5 (:%pSubse1)            ;#00468EE9: 350 F780FFFF               v  00 00  1 3486      
    lea edi,[ebp-248] (symtab[1543])      ;#00468EEE: 215275 08FFFFFF            uv 80 20  1 3487      
    mov ecx,[ebp-280] (symtab[1569])      ;#00468EF4: 213215 E8FEFFFF            vu 02 20  1 3487      
    mov eax,[#004025BC] (S_Type)          ;#00468EFA: 241 BC254000               uv 01 00  1 3488      
    call #0045F299 (:%opSub)              ;#00468EFF: 350 9563FFFF               v  00 00  1 3488      
    lea edi,[ebp-180] (symtab[1490])      ;#00468F04: 215275 4CFFFFFF            uv 80 20  1 3489      
    mov ecx,[ebp-248] (symtab[1543])      ;#00468F0A: 213215 08FFFFFF            vu 02 20  1 3489      
    mov eax,[#0040201C]                   ;#00468F10: 241 1C204000               uv 01 00  1 3490      
    call #0045F261 (:%opAdd)              ;#00468F15: 350 4763FFFF               v  00 00  1 3490      
    mov edi,[ebp-180] (symtab[1490])      ;#00468F1A: 213275 4CFFFFFF            uv 80 20  1 3491      
    lea ecx,[ebp-280] (symtab[1569])      ;#00468F20: 215215 E8FEFFFF            vu 02 20  1 3491      
    mov esi,[ebp-164] (rtndescs)          ;#00468F26: 213265 5CFFFFFF            uv 40 20  1 3492      
    mov edx,1483                          ;#00468F2C: 272 CB050000               vu 04 00  1 3492      
    mov al,0                              ;#00468F31: 260 00                     uv 01 00  1 3493      
    call #00460FE5 (:%pSubse1)            ;#00468F33: 350 AD80FFFF               v  00 00  1 3493      
    mov edi,1                             ;#00468F38: 277 01000000               uv 80 00  1 3494      
    lea ecx,[ebp-264] (symtab[1562])      ;#00468F3D: 215215 F8FEFFFF            vu 02 20  1 3494      
    mov esi,[ebp-60] (sr)                 ;#00468F43: 213165 C4                  uv 40 20  1 3495      
    mov edx,1324                          ;#00468F46: 272 2C050000               vu 04 00  1 3495      
    mov al,0                              ;#00468F4B: 260 00                     uv 01 00  1 3496      
    call #00460FE5 (:%pSubse1)            ;#00468F4D: 350 9380FFFF               v  00 00  1 3496      
    lea eax,[ebp-244] (symtab[1538])      ;#00468F52: 215205 0CFFFFFF            uv 01 20  1 3497      
    mov edx,2                             ;#00468F58: 272 02000000               vu 04 00  1 3497      
    push #00468F86                        ;#00468F5D: 150 868F4600               uv 00 00  1 3498      
    push eax                              ;#00468F62: 120                        vu 00 01  1 3498      
    push dword[ebp-264] (symtab[1562])    ;#00468F63: 377265 F8FEFFFF            np 00 20  2 3499      
    mov [ebp-264] (symtab[1562]),ebx      ;#00468F69: 211235 F8FEFFFF            uv 00 28  1 3501      
    push dword[ebp-280] (symtab[1569])    ;#00468F6F: 377265 E8FEFFFF            np 00 20  2 3502      
    mov [ebp-280] (symtab[1569]),ebx      ;#00468F75: 211235 E8FEFFFF            uv 00 28  1 3504      
    mov edi,[ebp-244] (symtab[1538])      ;#00468F7B: 213275 0CFFFFFF            vu 80 20  1 3504      
    jmp #00460143 (:%pMkSq)               ;#00468F81: 351 BD71FFFF               v  00 00  1 3505      
    mov ecx,2                             ;#00468F86: 271 02000000               uv 02 00  1 3506      
    mov edx,210                           ;#00468F8B: 272 D2000000               vu 04 00  1 3506      
    call #00462C02 (:%opFrame) (sprintf)  ;#00468F90: 350 6D9CFFFF               v  00 00  1 3507      
    mov ecx,[#00402968]                   ;#00468F95: 213015 68294000            uv 02 00  1 3508      
    mov [ebp] (fmt),ecx                   ;#00468F9B: 211115 00                  uv 00 22  1 3509 02   
    add dword[ebx+ecx*4-8],1              ;#00468F9E: 203104213 F8 01            u  00 0A  3 3511    *02*
    mov edi,[ebp+20] (prevebp)            ;#00468FA3: 213175 14                  vu 80 20  1 3513      
    mov eax,[edi-244]                     ;#00468FA6: 213207 0CFFFFFF            uv 01 80  1 3516    *80*
    mov [edi-244], dword h4               ;#00468FAC: 307207 0CFFFFFF 00000040   vu 00 80  1 3516      
    cmp eax,h4                            ;#00468FB6: 075 00000040               uv 00 01  1 3517      
    jne #00468FC7                         ;#00468FBB: 165 0A                     v  00 00  1 3517      
    mov esi,1538                          ;#00468FBD: 276 02060000               uv 40 00  1 3518      
    call #00462744 (:%pUnassigned)        ;#00468FC2: 350 7D97FFFF               v  00 00  1 3518      
    mov [ebp-4] (args),eax                ;#00468FC7: 211105 FC                  uv 00 21  1 3519      
    mov [ebp+28] (retaddr),#00468FD6      ;#00468FCA: 307105 1C D68F4600         vu 00 20  1 3519      
    jmp #00454E9A (code:sprintf)          ;#00468FD1: 351 C4BEFEFF               v  00 00  1 3520      
    push eax                              ;#00468FD6: 120                        uv 00 01  1 3521      
    mov esi,[ebp-192] (symtab[1493])      ;#00468FD7: 213265 40FFFFFF            vu 40 20  1 3521      
    cmp esi,h4                            ;#00468FDD: 201376 00000040            uv 00 40  1 3522      
    jle #00468FF3                         ;#00468FE3: 176 0E                     v  00 00  1 3522      
    sub dword[ebx+esi*4-8],1              ;#00468FE5: 203154263 F8 01            u  00 48  3 3523      
    jne #00468FF3                         ;#00468FEA: 165 07                     v  00 00  1 3525      
    mov edx,esi                           ;#00468FEC: 213326                     uv 04 40  1 3526      
    call #004639A8 (:%pDealloc)           ;#00468FEE: 350 B5A9FFFF               v  00 00  1 3526      
    pop dword[ebp-192] (symtab[1493])     ;#00468FF3: 217205 40FFFFFF            np 00 20  3 3527      
    mov ecx,4                             ;#00468FF9: 271 04000000               uv 02 00  1 3530      
    mov edx,1165                          ;#00468FFE: 272 8D040000               vu 04 00  1 3530      
    call #00462C02 (:%opFrame) (put2)     ;#00469003: 350 FA9BFFFF               v  00 00  1 3531      
    mov edi,[ebp+20] (prevebp)            ;#00469008: 213175 14                  uv 80 20  1 3532      
    mov eax,[edi-192]                     ;#0046900B: 213207 40FFFFFF            uv 01 80  1 3535 80 *80*
    mov [edi-192], dword h4               ;#00469011: 307207 40FFFFFF 00000040   vu 00 80  1 3535      
    cmp eax,h4                            ;#0046901B: 075 00000040               uv 00 01  1 3536      
    jne #0046902C                         ;#00469020: 165 0A                     v  00 00  1 3536      
    mov esi,1493                          ;#00469022: 276 D5050000               uv 40 00  1 3537      
    call #00462744 (:%pUnassigned)        ;#00469027: 350 1897FFFF               v  00 00  1 3537      
    mov [ebp] (emsg),eax                  ;#0046902C: 211105 00                  uv 00 21  1 3538      
    mov [ebp+28] (retaddr),#0046903B      ;#0046902F: 307105 1C 3B904600         vu 00 20  1 3538      
    jmp #0046C44A (code:put2)             ;#00469036: 351 0F340000               v  00 00  1 3539      
;  3423 --?3
;  3424                 end if
;  3425                 if length(msg) then     -- first time only
    lea edi,[ebp-268] (symtab[1563])      ;#0046903B: 215275 F4FEFFFF            uv 80 20  1 3540      
    mov esi,[ebp-52] (msg)                ;#00469041: 213165 CC                  vu 40 20  1 3540      
    mov edx,1322                          ;#00469044: 272 2A050000               uv 04 00  1 3541      
    call #0045EFEC (:%opLen)              ;#00469049: 350 9E5FFFFF               v  00 00  1 3541      
    test ecx,ecx                          ;#0046904E: 205311                     uv 00 02  1 3542      
    je #00469105                          ;#00469050: 017204 AF000000            v  00 00  1 3542      
;  3426                     if length(msg2) then
    mov edi,[ebp-144] (msg2)              ;#00469056: 213275 70FFFFFF            uv 80 20  1 3543      
    mov ecx,[ebx+edi*4-12]                ;#0046905C: 213114273 F4               uv 02 88  1 3546 80 *80*
    test ecx,ecx                          ;#00469060: 205311                     uv 00 02  1 3547 02   
    je #004690A1                          ;#00469062: 164 3D                     v  00 00  1 3547      
;  3427 --                      put2(msg2)
;  3428                         puts(1,msg2)
    mov eax,1                             ;#00469064: 270 01000000               uv 01 00  1 3548      
    mov edx,edi                           ;#00469069: 211372                     vu 04 80  1 3548      
    call #0045E072 (:%opPuts)             ;#0046906B: 350 0250FFFF               v  00 00  1 3549      
;  3429                         msg2 = ""
    mov eax,[#004022A4]                   ;#00469070: 241 A4224000               uv 01 00  1 3550      
    mov edx,[ebp-144] (msg2)              ;#00469075: 213225 70FFFFFF            vu 04 20  1 3550      
    cmp eax,h4                            ;#0046907B: 075 00000040               uv 00 01  1 3551      
    jl #00469087                          ;#00469080: 174 05                     v  00 00  1 3551      
    add dword[ebx+eax*4-8],1              ;#00469082: 203104203 F8 01            u  00 09  3 3552      
    mov [ebp-144] (msg2),eax              ;#00469087: 211205 70FFFFFF            vu 00 21  1 3554      
    cmp edx,h4                            ;#0046908D: 201372 00000040            uv 00 04  1 3555      
    jle #004690A1                         ;#00469093: 176 0C                     v  00 00  1 3555      
    sub dword[ebx+edx*4-8],1              ;#00469095: 203154223 F8 01            u  00 0C  3 3556      
    jne #004690A1                         ;#0046909A: 165 05                     v  00 00  1 3558      
    call #004639A8 (:%pDealloc)           ;#0046909C: 350 07A9FFFF               v  00 00  1 3559      
;  3430                     end if
;  3431                     put2(msg)
    mov ecx,4                             ;#004690A1: 271 04000000               uv 02 00  1 3560      
    mov edx,1165                          ;#004690A6: 272 8D040000               vu 04 00  1 3560      
    call #00462C02 (:%opFrame) (put2)     ;#004690AB: 350 529BFFFF               v  00 00  1 3561      
    mov edi,[ebp+20] (prevebp)            ;#004690B0: 213175 14                  uv 80 20  1 3562      
    mov eax,[edi-52]                      ;#004690B3: 213107 CC                  uv 01 80  1 3565 80 *80*
    xor ebx,ebx                           ;#004690B6: 061333                     vu 08 08  1 3565      
    cmp eax,h4                            ;#004690B8: 075 00000040               uv 00 01  1 3566      
    jl #004690C9                          ;#004690BD: 174 0A                     v  00 00  1 3566      
    add dword[ebx+eax*4-8],1              ;#004690BF: 203104203 F8 01            u  00 09  3 3567      
    cmp eax,1322                          ;#004690C4: 075 2A050000               vu 00 01  1 3569      
    mov [ebp] (emsg),eax                  ;#004690C9: 211105 00                  uv 00 21  1 3570      
    mov [ebp+28] (retaddr),#004690D8      ;#004690CC: 307105 1C D8904600         vu 00 20  1 3570      
    jmp #0046C44A (code:put2)             ;#004690D3: 351 72330000               v  00 00  1 3571      
;  3432                     msg = ""
    mov esi,[#004022A4]                   ;#004690D8: 213065 A4224000            uv 40 00  1 3572      
    mov edx,[ebp-52] (msg)                ;#004690DE: 213125 CC                  vu 04 20  1 3572      
    cmp esi,h4                            ;#004690E1: 201376 00000040            uv 00 40  1 3573      
    jl #004690EE                          ;#004690E7: 174 05                     v  00 00  1 3573      
    add dword[ebx+esi*4-8],1              ;#004690E9: 203104263 F8 01            u  00 48  3 3574      
    mov [ebp-52] (msg),esi                ;#004690EE: 211165 CC                  vu 00 60  1 3576      
    cmp edx,h4                            ;#004690F1: 201372 00000040            uv 00 04  1 3577      
    jle #00469105                         ;#004690F7: 176 0C                     v  00 00  1 3577      
    sub dword[ebx+edx*4-8],1              ;#004690F9: 203154223 F8 01            u  00 0C  3 3578      
    jne #00469105                         ;#004690FE: 165 05                     v  00 00  1 3580      
    call #004639A8 (:%pDealloc)           ;#00469100: 350 A3A8FFFF               v  00 00  1 3581      
;  3433                 end if
;  3434 if msg_id=80 then   -- e80cbrna
    mov ecx,[#00402658] (msg_id)          ;#00469105: 213015 58264000            uv 02 00  1 3582      
    cmp ecx,80                            ;#0046910B: 203371 50                  uv 00 02  1 3583 02   
    jne #0046911B                         ;#0046910E: 165 0B                     v  00 00  1 3583      
;  3435     -- "call_back returned non-atom",
;  3436     -- note this occurs after the callback has returned, hence
;  3437     -- parameters/locals suppressed, since they no longer exist
;  3438     msg_id = 0
    mov [#00402658] (msg_id),ebx          ;#00469110: 211035 58264000            uv 00 08  1 3584      
    jmp #00469543                         ;#00469116: 351 28040000               v  00 00  1 3584      
;  3439 else
;  3440 --?sr
;  3441                 p = sr[S_Parm1]         -- (0 for all top-level subs)
    mov edi,8                             ;#0046911B: 277 08000000               uv 80 00  1 3585      
    lea ecx,[ebp-76] (p)                  ;#00469120: 215115 B4                  vu 02 20  1 3585      
    mov esi,[ebp-60] (sr)                 ;#00469123: 213165 C4                  uv 40 20  1 3586      
    mov edx,1324                          ;#00469126: 272 2C050000               vu 04 00  1 3586      
    call #0046106B (:%pSubse1i)           ;#0046912B: 350 3B7FFFFF               v  00 00  1 3587      
;  3442 --?sr
;  3443                 tidx = 0    --DEV can we not use [S_Tidx]??
    mov [ebp-132] (tidx),ebx              ;#00469130: 211235 7CFFFFFF            uv 00 28  1 3588      
;  3444                 while p do
    mov edi,[ebp-76] (p)                  ;#00469136: 213175 B4                  vu 80 20  1 3588      
    test edi,edi                          ;#00469139: 205377                     uv 00 80  1 3589      
    je #00469543                          ;#0046913B: 017204 02040000            v  00 00  1 3589      
;  3445                     if p<1 or p>length(symtab) then
    cmp edi,1                             ;#00469141: 203377 01                  uv 00 80  1 3590      
    jl #00469164                          ;#00469144: 174 1E                     v  00 00  1 3590      
    lea edi,[ebp-284] (symtab[1573])      ;#00469146: 215275 E4FEFFFF            uv 80 20  1 3591      
    mov esi,[ebp] (symtab)                ;#0046914C: 213165 00                  vu 40 20  1 3591      
    mov edx,1309                          ;#0046914F: 272 1D050000               uv 04 00  1 3592      
    call #0045EFEC (:%opLen)              ;#00469154: 350 935EFFFF               v  00 00  1 3592      
    mov eax,[ebp-76] (p)                  ;#00469159: 213105 B4                  uv 01 20  1 3593      
    cmp eax,ecx                           ;#0046915C: 071310                     uv 00 03  1 3594 01   
    jle #004691F2                         ;#0046915E: 017216 8E000000            v  00 00  1 3594      
;  3446                         printf(1,"oops, p(%d) out of bounds(1..%d), pDiagN.e line 3281\n",{p,length(symtab)})
    lea edi,[ebp-284] (symtab[1573])      ;#00469164: 215275 E4FEFFFF            uv 80 20  1 3595      
    mov esi,[ebp] (symtab)                ;#0046916A: 213165 00                  vu 40 20  1 3595      
    mov edx,1309                          ;#0046916D: 272 1D050000               uv 04 00  1 3596      
    call #0045EFEC (:%opLen)              ;#00469172: 350 755EFFFF               v  00 00  1 3596      
    lea eax,[ebp-244] (symtab[1538])      ;#00469177: 215205 0CFFFFFF            uv 01 20  1 3597      
    mov edx,2                             ;#0046917D: 272 02000000               vu 04 00  1 3597      
    push #00469197                        ;#00469182: 150 97914600               uv 00 00  1 3598      
    push eax                              ;#00469187: 120                        vu 00 01  1 3598      
    push ecx                              ;#00469188: 121                        uv 00 02  1 3599      
    push dword[ebp-76] (p)                ;#00469189: 377165 B4                  np 00 20  2 3600      
    mov edi,[ebp-244] (symtab[1538])      ;#0046918C: 213275 0CFFFFFF            uv 80 20  1 3602      
    jmp #00460143 (:%pMkSq)               ;#00469192: 351 AC6FFFFF               v  00 00  1 3602      
    mov ecx,9                             ;#00469197: 271 09000000               uv 02 00  1 3603      
    mov edx,400                           ;#0046919C: 272 90010000               vu 04 00  1 3603      
    call #00462C02 (:%opFrame) (printf)   ;#004691A1: 350 5C9AFFFF               v  00 00  1 3604      
    mov [ebp] (fn), dword 1               ;#004691A6: 307105 00 01000000         uv 00 20  1 3605      
    mov eax,[#0040296C]                   ;#004691AD: 241 6C294000               vu 01 00  1 3605      
    mov [ebp-4] (fmt),eax                 ;#004691B2: 211105 FC                  uv 00 21  1 3606      
    add dword[ebx+eax*4-8],1              ;#004691B5: 203104203 F8 01            u  00 09  3 3608    *01*
    mov edi,[ebp+20] (prevebp)            ;#004691BA: 213175 14                  vu 80 20  1 3610      
    mov eax,[edi-244]                     ;#004691BD: 213207 0CFFFFFF            uv 01 80  1 3613    *80*
    mov [edi-244], dword h4               ;#004691C3: 307207 0CFFFFFF 00000040   vu 00 80  1 3613      
    cmp eax,h4                            ;#004691CD: 075 00000040               uv 00 01  1 3614      
    jne #004691DE                         ;#004691D2: 165 0A                     v  00 00  1 3614      
    mov esi,1538                          ;#004691D4: 276 02060000               uv 40 00  1 3615      
    call #00462744 (:%pUnassigned)        ;#004691D9: 350 6695FFFF               v  00 00  1 3615      
    mov [ebp-8] (args),eax                ;#004691DE: 211105 F8                  uv 00 21  1 3616      
    mov [ebp+28] (retaddr),#004691ED      ;#004691E1: 307105 1C ED914600         vu 00 20  1 3616      
    jmp #00444FC4 (code:printf)           ;#004691E8: 351 D7BDFDFF               v  00 00  1 3617      
;  3447                         exit
    jmp #00469543                         ;#004691ED: 351 51030000               v  00 00  1 3618      
;  3448                     end if
;  3449                     sp = symtab[p]
    cmp esi,h4                            ;#004691F2: 201376 00000040            uv 00 40  1 3619      
    jne #00469204                         ;#004691F8: 165 0A                     v  00 00  1 3619      
    mov esi,1309                          ;#004691FA: 276 1D050000               uv 40 00  1 3620      
    call #00462744 (:%pUnassigned)        ;#004691FF: 350 4095FFFF               v  00 00  1 3620      
    mov edi,eax                           ;#00469204: 211307                     uv 80 01  1 3621      
    lea ecx,[ebp-8] (sp)                  ;#00469206: 215115 F8                  vu 02 20  1 3621      
    mov edx,1309                          ;#00469209: 272 1D050000               uv 04 00  1 3622      
    mov al,0                              ;#0046920E: 260 00                     vu 01 00  1 3622      
    call #00460FE5 (:%pSubse1)            ;#00469210: 350 D07DFFFF               v  00 00  1 3623      
;  3450 --?{sp}
;  3451 --SUG: or si[S_NTyp]!=S_TVar3
;  3452                     if atom(sp) then
    mov ecx,[ebp-8] (sp)                  ;#00469215: 213115 F8                  uv 02 20  1 3624      
    cmp ecx,h4                            ;#00469218: 201371 00000040            uv 00 02  1 3625 02   
    jl #00469227                          ;#0046921E: 174 07                     v  00 00  1 3625      
    cmp byte[ebx+ecx*4-1],#12             ;#00469220: 200174213 FF 12            u  00 0A  2 3626      
    jne #00469265                         ;#00469225: 165 3E                     v  00 00  1 3627      
;  3453                         printf(1,"oops, atom(symtab[%d]), pDiagN.e line 3288\n",p)
    mov ecx,9                             ;#00469227: 271 09000000               uv 02 00  1 3628      
    mov edx,400                           ;#0046922C: 272 90010000               vu 04 00  1 3628      
    call #00462C02 (:%opFrame) (printf)   ;#00469231: 350 CC99FFFF               v  00 00  1 3629      
    mov [ebp] (fn), dword 1               ;#00469236: 307105 00 01000000         uv 00 20  1 3630      
    mov edi,[#00402970]                   ;#0046923D: 213075 70294000            vu 80 00  1 3630      
    mov [ebp-4] (fmt),edi                 ;#00469243: 211175 FC                  uv 00 A0  1 3631      
    add dword[ebx+edi*4-8],1              ;#00469246: 203104273 F8 01            u  00 88  3 3633    *80*
    mov edi,[ebp+20] (prevebp)            ;#0046924B: 213175 14                  vu 80 20  1 3635      
    mov eax,[edi-76]                      ;#0046924E: 213107 B4                  uv 01 80  1 3638    *80*
    mov [ebp-8] (args),eax                ;#00469251: 211105 F8                  uv 00 21  1 3639 01   
    mov [ebp+28] (retaddr),#00469260      ;#00469254: 307105 1C 60924600         vu 00 20  1 3639      
    jmp #00444FC4 (code:printf)           ;#0046925B: 351 64BDFDFF               v  00 00  1 3640      
;  3454                         exit
    jmp #00469543                         ;#00469260: 351 DE020000               v  00 00  1 3641      
;  3455                     end if
;  3456                     name = sp[S_Name]
    mov edi,1                             ;#00469265: 277 01000000               uv 80 00  1 3642      
    lea ecx,[ebp-12] (name)               ;#0046926A: 215115 F4                  vu 02 20  1 3642      
    mov esi,[ebp-8] (sp)                  ;#0046926D: 213165 F8                  uv 40 20  1 3643      
    mov edx,1311                          ;#00469270: 272 1F050000               vu 04 00  1 3643      
    mov al,0                              ;#00469275: 260 00                     uv 01 00  1 3644      
    call #00460FE5 (:%pSubse1)            ;#00469277: 350 697DFFFF               v  00 00  1 3644      
;  3457                     if sequence(name) then
    mov ecx,[ebp-12] (name)               ;#0046927C: 213115 F4                  uv 02 20  1 3645      
    cmp ecx,h4                            ;#0046927F: 201371 00000040            uv 00 02  1 3646 02   
    jl #00469399                          ;#00469285: 017214 0E010000            v  00 00  1 3646      
    test byte[ebx+ecx*4-1],#80            ;#0046928B: 366104213 FF 80            u  00 0A  2 3647      
    je #00469399                          ;#00469290: 017204 03010000            v  00 00  1 3648      
;  3458 --                      o = "??"--getValue(p, maxlen, length(name), 0)
;  3459                         {novalue,o} = getTvarValue(tidx)
    mov ecx,4                             ;#00469296: 271 04000000               uv 02 00  1 3649      
    mov edx,1256                          ;#0046929B: 272 E8040000               vu 04 00  1 3649      
    call :%opFrame (getTvarValue)         ;#004692A0: 350 5D99FFFF               v  00 00  1 3650      
    mov edi,[ebp+20] (prevebp)            ;#004692A5: 213175 14                  uv 80 20  1 3651      
    mov eax,[edi-132]                     ;#004692A8: 213207 7CFFFFFF            uv 01 80  1 3654 80 *80*
    mov [ebp] (tidx),eax                  ;#004692AE: 211105 00                  uv 00 21  1 3655 01   
    mov [ebp+28] (retaddr),#004692BD      ;#004692B1: 307105 1C BD924600         vu 00 20  1 3655      
    jmp #0046C60C (code:getTvarValue)     ;#004692B8: 351 4F330000               v  00 00  1 3656      
    push eax                              ;#004692BD: 120                        uv 00 01  1 3657      
    mov edi,[ebp-244] (symtab[1538])      ;#004692BE: 213275 0CFFFFFF            vu 80 20  1 3657      
    cmp edi,h4                            ;#004692C4: 201377 00000040            uv 00 80  1 3658      
    jle #004692DA                         ;#004692CA: 176 0E                     v  00 00  1 3658      
    sub dword[ebx+edi*4-8],1              ;#004692CC: 203154273 F8 01            u  00 88  3 3659      
    jne #004692DA                         ;#004692D1: 165 07                     v  00 00  1 3661      
    mov edx,edi                           ;#004692D3: 213327                     uv 04 80  1 3662      
    call #004639A8 (:%pDealloc)           ;#004692D5: 350 CEA6FFFF               v  00 00  1 3662      
    pop dword[ebp-244] (symtab[1538])     ;#004692DA: 217205 0CFFFFFF            np 00 20  3 3663      
    mov edi,2                             ;#004692E0: 277 02000000               uv 80 00  1 3666      
    lea ecx,[ebp-16] (o)                  ;#004692E5: 215115 F0                  vu 02 20  1 3666      
    mov esi,[ebp-244] (symtab[1538])      ;#004692E8: 213265 0CFFFFFF            uv 40 20  1 3667      
    mov edx,1538                          ;#004692EE: 272 02060000               vu 04 00  1 3667      
    mov al,0                              ;#004692F3: 260 00                     uv 01 00  1 3668      
    call #00460FE5 (:%pSubse1)            ;#004692F5: 350 EB7CFFFF               v  00 00  1 3668      
    mov edi,1                             ;#004692FA: 277 01000000               uv 80 00  1 3669      
    lea ecx,[ebp-140] (novalue)           ;#004692FF: 215215 74FFFFFF            vu 02 20  1 3669      
    mov esi,[ebp-244] (symtab[1538])      ;#00469305: 213265 0CFFFFFF            uv 40 20  1 3670      
    mov edx,1538                          ;#0046930B: 272 02060000               vu 04 00  1 3670      
    call #0046106B (:%pSubse1i)           ;#00469310: 350 567DFFFF               v  00 00  1 3671      
    mov edx,[ebp-244] (symtab[1538])      ;#00469315: 213225 0CFFFFFF            uv 04 20  1 3672      
    cmp edx,h4                            ;#0046931B: 201372 00000040            uv 00 04  1 3673 04   
    mov [ebp-244] (symtab[1538]),ebx      ;#00469321: 211235 0CFFFFFF            vu 00 28  1 3673      
    jle #00469335                         ;#00469327: 176 0C                     v  00 00  1 3674      
    sub dword[ebx+edx*4-8],1              ;#00469329: 203154223 F8 01            u  00 0C  3 3675      
    jne #00469335                         ;#0046932E: 165 05                     v  00 00  1 3677      
    call #004639A8 (:%pDealloc)           ;#00469330: 350 73A6FFFF               v  00 00  1 3678      
;  3460 --                      if showellipse or lc<maxlen-50 then
;  3461 --                          -- we need a (much) shorter version for on-screen display:
;  3462 --                          o2 = getValue(p,50,length(name), 1)
;  3463 --                          o = sprintf("    %s = %s\n",{name,o})
;  3464 --                          o2 = sprintf("    %s = %s\n",{name,o2})
;  3465 --                          put2x(o2,o)
;  3466 --                      else
;  3467 --                          put2(sprintf("    %s = %s\n",{name,o}))
;  3468 --                      end if
;  3469                         putz(name,o,novalue)
    mov ecx,7                             ;#00469335: 271 07000000               uv 02 00  1 3679      
    mov edx,1152                          ;#0046933A: 272 80040000               vu 04 00  1 3679      
    call #00462C02 (:%opFrame) (putz)     ;#0046933F: 350 BE98FFFF               v  00 00  1 3680      
    mov edi,[ebp+20] (prevebp)            ;#00469344: 213175 14                  uv 80 20  1 3681      
    mov eax,[edi-12]                      ;#00469347: 213107 F4                  uv 01 80  1 3684 80 *80*
    xor ebx,ebx                           ;#0046934A: 061333                     vu 08 08  1 3684      
    cmp eax,h4                            ;#0046934C: 075 00000040               uv 00 01  1 3685      
    jl #0046935D                          ;#00469351: 174 0A                     v  00 00  1 3685      
    add dword[ebx+eax*4-8],1              ;#00469353: 203104203 F8 01            u  00 09  3 3686      
    cmp eax,1312                          ;#00469358: 075 20050000               vu 00 01  1 3688      
    mov [ebp] (name),eax                  ;#0046935D: 211105 00                  uv 00 21  1 3689      
    mov edi,[ebp+20] (prevebp)            ;#00469360: 213175 14                  vu 80 20  1 3689      
    mov eax,[edi-16]                      ;#00469363: 213107 F0                  uv 01 80  1 3692    *80*
    xor ebx,ebx                           ;#00469366: 061333                     vu 08 08  1 3692      
    cmp eax,h4                            ;#00469368: 075 00000040               uv 00 01  1 3693      
    jl #00469379                          ;#0046936D: 174 0A                     v  00 00  1 3693      
    add dword[ebx+eax*4-8],1              ;#0046936F: 203104203 F8 01            u  00 09  3 3694      
    cmp eax,1313                          ;#00469374: 075 21050000               vu 00 01  1 3696      
    mov [ebp-4] (o),eax                   ;#00469379: 211105 FC                  uv 00 21  1 3697      
    mov edi,[ebp+20] (prevebp)            ;#0046937C: 213175 14                  vu 80 20  1 3697      
    mov eax,[edi-140]                     ;#0046937F: 213207 74FFFFFF            uv 01 80  1 3700    *80*
    mov [ebp-8] (novalue),eax             ;#00469385: 211105 F8                  uv 00 21  1 3701 01   
    mov [ebp+28] (retaddr),#00469394      ;#00469388: 307105 1C 94934600         vu 00 20  1 3701      
    jmp #0046C0EC (code:putz)             ;#0046938F: 351 582D0000               v  00 00  1 3702      
    jmp #00469507                         ;#00469394: 351 6E010000               v  00 00  1 3703      
;  3470                     elsif name!=-1 then -- should not happen!
    cmp ecx,-1                            ;#00469399: 203371 FF                  uv 00 02  1 3704      
    je #00469507                          ;#0046939C: 017204 65010000            v  00 00  1 3704      
;  3471 --                      put2(sprintf("    %d[!!] = ???\n",name))
;  3472                         name = sprintf("%d[!!]",name)
    mov ecx,2                             ;#004693A2: 271 02000000               uv 02 00  1 3705      
    mov edx,210                           ;#004693A7: 272 D2000000               vu 04 00  1 3705      
    call #00462C02 (:%opFrame) (sprintf)  ;#004693AC: 350 5198FFFF               v  00 00  1 3706      
    mov edi,[#00402974]                   ;#004693B1: 213075 74294000            uv 80 00  1 3707      
    mov [ebp] (fmt),edi                   ;#004693B7: 211175 00                  uv 00 A0  1 3708 80   
    add dword[ebx+edi*4-8],1              ;#004693BA: 203104273 F8 01            u  00 88  3 3710    *80*
    mov edi,[ebp+20] (prevebp)            ;#004693BF: 213175 14                  vu 80 20  1 3712      
    mov eax,[edi-12]                      ;#004693C2: 213107 F4                  uv 01 80  1 3715    *80*
    mov [edi-12], dword h4                ;#004693C5: 307107 F4 00000040         vu 00 80  1 3715      
    cmp eax,h4                            ;#004693CC: 075 00000040               uv 00 01  1 3716      
    jne #004693DD                         ;#004693D1: 165 0A                     v  00 00  1 3716      
    mov esi,1312                          ;#004693D3: 276 20050000               uv 40 00  1 3717      
    call #00462744 (:%pUnassigned)        ;#004693D8: 350 6793FFFF               v  00 00  1 3717      
    mov [ebp-4] (args),eax                ;#004693DD: 211105 FC                  uv 00 21  1 3718      
    mov [ebp+28] (retaddr),#004693EC      ;#004693E0: 307105 1C EC934600         vu 00 20  1 3718      
    jmp #00454E9A (code:sprintf)          ;#004693E7: 351 AEBAFEFF               v  00 00  1 3719      
    push eax                              ;#004693EC: 120                        uv 00 01  1 3720      
    mov esi,[ebp-12] (name)               ;#004693ED: 213165 F4                  vu 40 20  1 3720      
    cmp esi,h4                            ;#004693F0: 201376 00000040            uv 00 40  1 3721      
    jle #00469406                         ;#004693F6: 176 0E                     v  00 00  1 3721      
    sub dword[ebx+esi*4-8],1              ;#004693F8: 203154263 F8 01            u  00 48  3 3722      
    jne #00469406                         ;#004693FD: 165 07                     v  00 00  1 3724      
    mov edx,esi                           ;#004693FF: 213326                     uv 04 40  1 3725      
    call #004639A8 (:%pDealloc)           ;#00469401: 350 A2A5FFFF               v  00 00  1 3725      
    pop dword[ebp-12] (name)              ;#00469406: 217105 F4                  np 00 20  3 3726      
;  3473 --                      o = "??"--getValue(p, maxlen, length(name), 0)
;  3474                         {novalue,o} = getTvarValue(tidx)
    mov ecx,4                             ;#00469409: 271 04000000               uv 02 00  1 3729      
    mov edx,1256                          ;#0046940E: 272 E8040000               vu 04 00  1 3729      
    call :%opFrame (getTvarValue)         ;#00469413: 350 EA97FFFF               v  00 00  1 3730      
    mov edi,[ebp+20] (prevebp)            ;#00469418: 213175 14                  uv 80 20  1 3731      
    mov eax,[edi-132]                     ;#0046941B: 213207 7CFFFFFF            uv 01 80  1 3734 80 *80*
    mov [ebp] (tidx),eax                  ;#00469421: 211105 00                  uv 00 21  1 3735 01   
    mov [ebp+28] (retaddr),#00469430      ;#00469424: 307105 1C 30944600         vu 00 20  1 3735      
    jmp #0046C60C (code:getTvarValue)     ;#0046942B: 351 DC310000               v  00 00  1 3736      
    push eax                              ;#00469430: 120                        uv 00 01  1 3737      
    mov ecx,[ebp-288] (symtab[1577])      ;#00469431: 213215 E0FEFFFF            vu 02 20  1 3737      
    cmp ecx,h4                            ;#00469437: 201371 00000040            uv 00 02  1 3738      
    jle #0046944D                         ;#0046943D: 176 0E                     v  00 00  1 3738      
    sub dword[ebx+ecx*4-8],1              ;#0046943F: 203154213 F8 01            u  00 0A  3 3739      
    jne #0046944D                         ;#00469444: 165 07                     v  00 00  1 3741      
    mov edx,ecx                           ;#00469446: 213321                     uv 04 02  1 3742      
    call #004639A8 (:%pDealloc)           ;#00469448: 350 5BA5FFFF               v  00 00  1 3742      
    pop dword[ebp-288] (symtab[1577])     ;#0046944D: 217205 E0FEFFFF            np 00 20  3 3743      
    mov edi,2                             ;#00469453: 277 02000000               uv 80 00  1 3746      
    lea ecx,[ebp-16] (o)                  ;#00469458: 215115 F0                  vu 02 20  1 3746      
    mov esi,[ebp-288] (symtab[1577])      ;#0046945B: 213265 E0FEFFFF            uv 40 20  1 3747      
    mov edx,1577                          ;#00469461: 272 29060000               vu 04 00  1 3747      
    mov al,0                              ;#00469466: 260 00                     uv 01 00  1 3748      
    call #00460FE5 (:%pSubse1)            ;#00469468: 350 787BFFFF               v  00 00  1 3748      
    mov edi,1                             ;#0046946D: 277 01000000               uv 80 00  1 3749      
    lea ecx,[ebp-140] (novalue)           ;#00469472: 215215 74FFFFFF            vu 02 20  1 3749      
    mov esi,[ebp-288] (symtab[1577])      ;#00469478: 213265 E0FEFFFF            uv 40 20  1 3750      
    mov edx,1577                          ;#0046947E: 272 29060000               vu 04 00  1 3750      
    call #0046106B (:%pSubse1i)           ;#00469483: 350 E37BFFFF               v  00 00  1 3751      
    mov edx,[ebp-288] (symtab[1577])      ;#00469488: 213225 E0FEFFFF            uv 04 20  1 3752      
    cmp edx,h4                            ;#0046948E: 201372 00000040            uv 00 04  1 3753 04   
    mov [ebp-288] (symtab[1577]),ebx      ;#00469494: 211235 E0FEFFFF            vu 00 28  1 3753      
    jle #004694A8                         ;#0046949A: 176 0C                     v  00 00  1 3754      
    sub dword[ebx+edx*4-8],1              ;#0046949C: 203154223 F8 01            u  00 0C  3 3755      
    jne #004694A8                         ;#004694A1: 165 05                     v  00 00  1 3757      
    call #004639A8 (:%pDealloc)           ;#004694A3: 350 00A5FFFF               v  00 00  1 3758      
;  3475 --                      put2(sprintf("    %s = %s\n",{name,o}))
;  3476                         putz(name,o,novalue)
    mov ecx,7                             ;#004694A8: 271 07000000               uv 02 00  1 3759      
    mov edx,1152                          ;#004694AD: 272 80040000               vu 04 00  1 3759      
    call #00462C02 (:%opFrame) (putz)     ;#004694B2: 350 4B97FFFF               v  00 00  1 3760      
    mov edi,[ebp+20] (prevebp)            ;#004694B7: 213175 14                  uv 80 20  1 3761      
    mov eax,[edi-12]                      ;#004694BA: 213107 F4                  uv 01 80  1 3764 80 *80*
    xor ebx,ebx                           ;#004694BD: 061333                     vu 08 08  1 3764      
    cmp eax,h4                            ;#004694BF: 075 00000040               uv 00 01  1 3765      
    jl #004694D0                          ;#004694C4: 174 0A                     v  00 00  1 3765      
    add dword[ebx+eax*4-8],1              ;#004694C6: 203104203 F8 01            u  00 09  3 3766      
    cmp eax,1312                          ;#004694CB: 075 20050000               vu 00 01  1 3768      
    mov [ebp] (name),eax                  ;#004694D0: 211105 00                  uv 00 21  1 3769      
    mov edi,[ebp+20] (prevebp)            ;#004694D3: 213175 14                  vu 80 20  1 3769      
    mov eax,[edi-16]                      ;#004694D6: 213107 F0                  uv 01 80  1 3772    *80*
    xor ebx,ebx                           ;#004694D9: 061333                     vu 08 08  1 3772      
    cmp eax,h4                            ;#004694DB: 075 00000040               uv 00 01  1 3773      
    jl #004694EC                          ;#004694E0: 174 0A                     v  00 00  1 3773      
    add dword[ebx+eax*4-8],1              ;#004694E2: 203104203 F8 01            u  00 09  3 3774      
    cmp eax,1313                          ;#004694E7: 075 21050000               vu 00 01  1 3776      
    mov [ebp-4] (o),eax                   ;#004694EC: 211105 FC                  uv 00 21  1 3777      
    mov edi,[ebp+20] (prevebp)            ;#004694EF: 213175 14                  vu 80 20  1 3777      
    mov eax,[edi-140]                     ;#004694F2: 213207 74FFFFFF            uv 01 80  1 3780    *80*
    mov [ebp-8] (novalue),eax             ;#004694F8: 211105 F8                  uv 00 21  1 3781 01   
    mov [ebp+28] (retaddr),#00469507      ;#004694FB: 307105 1C 07954600         vu 00 20  1 3781      
    jmp #0046C0EC (code:putz)             ;#00469502: 351 E52B0000               v  00 00  1 3782      
;  3477                     end if
;  3478                     tidx -= 1
    mov edi,[ebp-132] (tidx)              ;#00469507: 213275 7CFFFFFF            uv 80 20  1 3783      
    sub edi,1                             ;#0046950D: 203357 01                  uv 80 80  1 3784 80   
    mov edx,edi                           ;#00469510: 213327                     uv 04 80  1 3785 80   
    mov [ebp-132] (tidx),edi              ;#00469512: 211275 7CFFFFFF            vu 00 A0  1 3785      
    shl edx,1                             ;#00469518: 321342                     u  04 04  1 3786      
    jno #00469527                         ;#0046951A: 161 0B                     v  00 00  1 3786      
    lea edi,[ebp-132] (tidx)              ;#0046951C: 215275 7CFFFFFF            uv 80 20  1 3787      
    call #00462764 (:%e01tcfAddiii)       ;#00469522: 350 3D92FFFF               v  00 00  1 3787      
;  3479                     p = sp[S_Slink]
    mov edi,6                             ;#00469527: 277 06000000               uv 80 00  1 3788      
    lea ecx,[ebp-76] (p)                  ;#0046952C: 215115 B4                  vu 02 20  1 3788      
    mov esi,[ebp-8] (sp)                  ;#0046952F: 213165 F8                  uv 40 20  1 3789      
    mov edx,1311                          ;#00469532: 272 1F050000               vu 04 00  1 3789      
    mov al,0                              ;#00469537: 260 00                     uv 01 00  1 3790      
    call #00460FE5 (:%pSubse1)            ;#00469539: 350 A77AFFFF               v  00 00  1 3790      
;  3480                 end while
    jmp #00469136                         ;#0046953E: 351 F3FBFFFF               v  00 00  1 3791      
;  3481 end if
;  3482 --              if not retN() then exit end if
;  3483                 rtype = 2       -- 2 normal
    mov [ebp-128] (rtype), dword 2        ;#00469543: 307105 80 02000000         uv 00 20  1 3792      
;  3484             end if  -- lineno!=-1
    jmp #00469553                         ;#0046954A: 353 07                     v  00 00  1 3792      
;  3485         else -- K_wdb
;  3486 --removed 4/2/21...
;  3487 --          if sNTyp<S_Type then
;  3488 --              put2(sprintf("pDiagN.e line 3322: symtab[%d] bad S_NTyp[%d]\n",{rid,sNTyp}))
;  3489 --?sr
;  3490 --?"sleep(5)..."
;  3491 --sleep(5)
;  3492 ----            else
;  3493 ----                put2(sprintf("diag.e: symtab[%d] skipped (no debug)\n",{rid}))
;  3494 --          end if
;  3495 --          msg_id = 0
;  3496 --          if not retN() then exit end if
;  3497             rtype = 3           -- 3 without debug
    mov [ebp-128] (rtype), dword 3        ;#0046954C: 307105 80 03000000         uv 00 20  1 3793      
;  3498         end if  -- K_wdb
;  3499         msg_id = 0
    mov [#00402658] (msg_id),ebx          ;#00469553: 211035 58264000            vu 00 08  1 3793      
;  3500 end if
;  3501         while 1 do
;  3502             or_ebp = floor(prev_ebp/4)
    mov ecx,[ebp-100] (prev_ebp)          ;#00469559: 213115 9C                  uv 02 20  1 3794      
    cmp ecx,h4                            ;#0046955C: 201371 00000040            uv 00 02  1 3795 02   
    jne #0046956E                         ;#00469562: 165 0A                     v  00 00  1 3795      
    mov esi,1334                          ;#00469564: 276 36050000               uv 40 00  1 3796      
    call #00462744 (:%pUnassigned)        ;#00469569: 350 D691FFFF               v  00 00  1 3796      
    mov edi,#004025F8                     ;#0046956E: 277 F8254000               uv 80 00  1 3797      
    mov eax,[#0040205C] (JS)              ;#00469573: 241 5C204000               vu 01 00  1 3797      
    call #0045F39A (:%opDivf)             ;#00469578: 350 1D5EFFFF               v  00 00  1 3798      
;  3503 --11/12/15:
;  3504 --          if ret_addr=TchkRetAddr then
;  3505 --29/10/17:
;  3506             if ret_addr=TchkRetAddr
    mov edi,[ebp-40] (TchkRetAddr)        ;#0046957D: 213175 D8                  uv 80 20  1 3799      
    mov eax,[ebp-96] (ret_addr)           ;#00469580: 213105 A0                  vu 01 20  1 3799      
    mov esi,1319                          ;#00469583: 276 27050000               uv 40 00  1 3800      
    mov edx,1333                          ;#00469588: 272 35050000               vu 04 00  1 3800      
    call #0045F91F (:%opJccE)             ;#0046958D: 350 8D63FFFF               v  00 00  1 3801      
    je #00469602                          ;#00469592: 164 6E                     v  00 00  1 3802      
;  3507             or ret_addr=TchkRetAddr-1   -- 22/12/19
    lea edi,[ebp-180] (symtab[1490])      ;#00469594: 215275 4CFFFFFF            uv 80 20  1 3803      
    mov ecx,[ebp-40] (TchkRetAddr)        ;#0046959A: 213115 D8                  vu 02 20  1 3803      
    mov eax,[#0040201C]                   ;#0046959D: 241 1C204000               uv 01 00  1 3804      
    call #0045F299 (:%opSub)              ;#004695A2: 350 F25CFFFF               v  00 00  1 3804      
    mov edi,[ebp-180] (symtab[1490])      ;#004695A7: 213275 4CFFFFFF            uv 80 20  1 3805      
    mov eax,[ebp-96] (ret_addr)           ;#004695AD: 213105 A0                  vu 01 20  1 3805      
    mov esi,1490                          ;#004695B0: 276 D2050000               uv 40 00  1 3806      
    mov edx,1333                          ;#004695B5: 272 35050000               vu 04 00  1 3806      
    call #0045F91F (:%opJccE)             ;#004695BA: 350 6063FFFF               v  00 00  1 3807      
    je #00469602                          ;#004695BF: 164 41                     v  00 00  1 3808      
;  3508             or ret_addr=cf_ret_addr-1 then
    mov esi,[ebp-48] (cf_ret_addr)        ;#004695C1: 213165 D0                  uv 40 20  1 3809      
    cmp esi,h4                            ;#004695C4: 201376 00000040            uv 00 40  1 3810 40   
    jne #004695D6                         ;#004695CA: 165 0A                     v  00 00  1 3810      
    mov esi,1321                          ;#004695CC: 276 29050000               uv 40 00  1 3811      
    call #00462744 (:%pUnassigned)        ;#004695D1: 350 6E91FFFF               v  00 00  1 3811      
    lea edi,[ebp-180] (symtab[1490])      ;#004695D6: 215275 4CFFFFFF            uv 80 20  1 3812      
    mov ecx,esi                           ;#004695DC: 211361                     vu 02 40  1 3812      
    mov eax,[#0040201C]                   ;#004695DE: 241 1C204000               uv 01 00  1 3813      
    call #0045F299 (:%opSub)              ;#004695E3: 350 B15CFFFF               v  00 00  1 3813      
    mov edi,[ebp-180] (symtab[1490])      ;#004695E8: 213275 4CFFFFFF            uv 80 20  1 3814      
    mov eax,[ebp-96] (ret_addr)           ;#004695EE: 213105 A0                  vu 01 20  1 3814      
    mov esi,1490                          ;#004695F1: 276 D2050000               uv 40 00  1 3815      
    mov edx,1333                          ;#004695F6: 272 35050000               vu 04 00  1 3815      
    call #0045F91F (:%opJccE)             ;#004695FB: 350 1F63FFFF               v  00 00  1 3816      
    jne #00469628                         ;#00469600: 165 26                     v  00 00  1 3817      
;  3509                 or_era = from_addr-1
    mov ecx,[ebp-88] (from_addr)          ;#00469602: 213115 A8                  uv 02 20  1 3818      
    cmp ecx,h4                            ;#00469605: 201371 00000040            uv 00 02  1 3819 02   
    jne #00469617                         ;#0046960B: 165 0A                     v  00 00  1 3819      
    mov esi,1331                          ;#0046960D: 276 33050000               uv 40 00  1 3820      
    call #00462744 (:%pUnassigned)        ;#00469612: 350 2D91FFFF               v  00 00  1 3820      
    mov edi,#00402610                     ;#00469617: 277 10264000               uv 80 00  1 3821      
    mov eax,[#0040201C]                   ;#0046961C: 241 1C204000               vu 01 00  1 3821      
    call #0045F299 (:%opSub)              ;#00469621: 350 735CFFFF               v  00 00  1 3822      
    jmp #0046964E                         ;#00469626: 353 26                     v  00 00  1 3823      
;  3510             else
;  3511                 or_era = ret_addr-1
    mov esi,[ebp-96] (ret_addr)           ;#00469628: 213165 A0                  uv 40 20  1 3824      
    cmp esi,h4                            ;#0046962B: 201376 00000040            uv 00 40  1 3825 40   
    jne #0046963D                         ;#00469631: 165 0A                     v  00 00  1 3825      
    mov esi,1333                          ;#00469633: 276 35050000               uv 40 00  1 3826      
    call #00462744 (:%pUnassigned)        ;#00469638: 350 0791FFFF               v  00 00  1 3826      
    mov edi,#00402610                     ;#0046963D: 277 10264000               uv 80 00  1 3827      
    mov ecx,esi                           ;#00469642: 211361                     vu 02 40  1 3827      
    mov eax,[#0040201C]                   ;#00469644: 241 1C204000               uv 01 00  1 3828      
    call #0045F299 (:%opSub)              ;#00469649: 350 4B5CFFFF               v  00 00  1 3828      
;  3512             end if
;  3513 --?{ret_addr,cf_ret_addr,from_addr,or_era}
;  3514 --put2(sprint({ret_addr,cf_ret_addr,from_addr,or_era}))
;  3515 --put2(sprintf("ret_addr=#%s, cf_ret_addr=#%s, from_addr=%s, or_era=#%s\n",
;  3516 --  {addrS(ret_addr),addrS(cf_ret_addr),addrS(from_addr),addrS(or_era)}))
;  3517 
;  3518             if or_ebp=0 then exit end if
    mov edi,[#004025F8] (or_ebp)          ;#0046964E: 213075 F8254000            uv 80 00  1 3829      
    cmp edi,0                             ;#00469654: 203377 00                  uv 00 80  1 3830 80   
    je #0046982D                          ;#00469657: 017204 D0010000            v  00 00  1 3830      
;  3519 --DEV (untried)
;  3520 --constant W = machine_word()
;  3521 --  --      {N,rid,from_addr,ret_addr,prev_ebp,ebp_root} = peekNS({or_ebp*4+W,6},W,0)
;  3522 --          {N,rid,from_addr,?,prev_ebp,ebp_root,ret_addr} = peekNS({or_ebp*4+W,7},W,0)
;  3523             if machine_bits()=32 then
;  3524 --EXCEPT
;  3525 --              {N,rid,from_addr,ret_addr,prev_ebp,ebp_root} = peek4u({or_ebp*4+4,6})
;  3526                 {N,rid,from_addr,?,prev_ebp,ebp_root,ret_addr} = peek4u({or_ebp*4+4,7})
    lea edi,[ebp-180] (symtab[1490])      ;#0046965D: 215275 4CFFFFFF            uv 80 20  1 3831      
    mov ecx,[#004025F8] (or_ebp)          ;#00469663: 213015 F8254000            vu 02 00  1 3831      
    mov eax,[#0040205C] (JS)              ;#00469669: 241 5C204000               uv 01 00  1 3832      
    call #0045F412 (:%opMul)              ;#0046966E: 350 9F5DFFFF               v  00 00  1 3832      
    lea edi,[ebp-248] (symtab[1543])      ;#00469673: 215275 08FFFFFF            uv 80 20  1 3833      
    mov ecx,[ebp-180] (symtab[1490])      ;#00469679: 213215 4CFFFFFF            vu 02 20  1 3833      
    mov eax,[#0040205C] (JS)              ;#0046967F: 241 5C204000               uv 01 00  1 3834      
    call #0045F261 (:%opAdd)              ;#00469684: 350 D85BFFFF               v  00 00  1 3834      
    lea eax,[ebp-292] (symtab[1578])      ;#00469689: 215205 DCFEFFFF            uv 01 20  1 3835      
    mov edx,2                             ;#0046968F: 272 02000000               vu 04 00  1 3835      
    push #004696B3                        ;#00469694: 150 B3964600               uv 00 00  1 3836      
    push eax                              ;#00469699: 120                        vu 00 01  1 3836      
    push 7                                ;#0046969A: 152 07                     uv 00 00  1 3837      
    push dword[ebp-248] (symtab[1543])    ;#0046969C: 377265 08FFFFFF            np 00 20  2 3838      
    mov [ebp-248] (symtab[1543]),ebx      ;#004696A2: 211235 08FFFFFF            uv 00 28  1 3840      
    mov edi,[ebp-292] (symtab[1578])      ;#004696A8: 213275 DCFEFFFF            vu 80 20  1 3840      
    jmp #00460143 (:%pMkSq)               ;#004696AE: 351 906AFFFF               v  00 00  1 3841      
    lea edi,[ebp-280] (symtab[1569])      ;#004696B3: 215275 E8FEFFFF            uv 80 20  1 3842      
    mov esi,[ebp-292] (symtab[1578])      ;#004696B9: 213265 DCFEFFFF            vu 40 20  1 3842      
    xor ecx,ecx                           ;#004696BF: 061311                     uv 02 02  1 3843      
    mov edx,4                             ;#004696C1: 272 04000000               vu 04 00  1 3843      
    call #0045E945 (:%opPeekNx)           ;#004696C6: 350 7A52FFFF               v  00 00  1 3844      
    mov edi,7                             ;#004696CB: 277 07000000               uv 80 00  1 3845      
    lea ecx,[ebp-96] (ret_addr)           ;#004696D0: 215115 A0                  vu 02 20  1 3845      
    mov esi,[ebp-280] (symtab[1569])      ;#004696D3: 213265 E8FEFFFF            uv 40 20  1 3846      
    mov edx,1569                          ;#004696D9: 272 21060000               vu 04 00  1 3846      
    mov al,0                              ;#004696DE: 260 00                     uv 01 00  1 3847      
    call #00460FE5 (:%pSubse1)            ;#004696E0: 350 0079FFFF               v  00 00  1 3847      
    mov edi,6                             ;#004696E5: 277 06000000               uv 80 00  1 3848      
    lea ecx,[ebp-104] (ebp_root)          ;#004696EA: 215115 98                  vu 02 20  1 3848      
    mov esi,[ebp-280] (symtab[1569])      ;#004696ED: 213265 E8FEFFFF            uv 40 20  1 3849      
    mov edx,1569                          ;#004696F3: 272 21060000               vu 04 00  1 3849      
    mov al,0                              ;#004696F8: 260 00                     uv 01 00  1 3850      
    call #00460FE5 (:%pSubse1)            ;#004696FA: 350 E678FFFF               v  00 00  1 3850      
    mov edi,5                             ;#004696FF: 277 05000000               uv 80 00  1 3851      
    lea ecx,[ebp-100] (prev_ebp)          ;#00469704: 215115 9C                  vu 02 20  1 3851      
    mov esi,[ebp-280] (symtab[1569])      ;#00469707: 213265 E8FEFFFF            uv 40 20  1 3852      
    mov edx,1569                          ;#0046970D: 272 21060000               vu 04 00  1 3852      
    mov al,0                              ;#00469712: 260 00                     uv 01 00  1 3853      
    call #00460FE5 (:%pSubse1)            ;#00469714: 350 CC78FFFF               v  00 00  1 3853      
    mov edi,3                             ;#00469719: 277 03000000               uv 80 00  1 3854      
    lea ecx,[ebp-88] (from_addr)          ;#0046971E: 215115 A8                  vu 02 20  1 3854      
    mov esi,[ebp-280] (symtab[1569])      ;#00469721: 213265 E8FEFFFF            uv 40 20  1 3855      
    mov edx,1569                          ;#00469727: 272 21060000               vu 04 00  1 3855      
    mov al,0                              ;#0046972C: 260 00                     uv 01 00  1 3856      
    call #00460FE5 (:%pSubse1)            ;#0046972E: 350 B278FFFF               v  00 00  1 3856      
    mov edi,2                             ;#00469733: 277 02000000               uv 80 00  1 3857      
    lea ecx,[ebp-84] (rid)                ;#00469738: 215115 AC                  vu 02 20  1 3857      
    mov esi,[ebp-280] (symtab[1569])      ;#0046973B: 213265 E8FEFFFF            uv 40 20  1 3858      
    mov edx,1569                          ;#00469741: 272 21060000               vu 04 00  1 3858      
    mov al,0                              ;#00469746: 260 00                     uv 01 00  1 3859      
    call #00460FE5 (:%pSubse1)            ;#00469748: 350 9878FFFF               v  00 00  1 3859      
    mov edi,1                             ;#0046974D: 277 01000000               uv 80 00  1 3860      
    lea ecx,[ebp-80] (N)                  ;#00469752: 215115 B0                  vu 02 20  1 3860      
    mov esi,[ebp-280] (symtab[1569])      ;#00469755: 213265 E8FEFFFF            uv 40 20  1 3861      
    mov edx,1569                          ;#0046975B: 272 21060000               vu 04 00  1 3861      
    mov al,0                              ;#00469760: 260 00                     uv 01 00  1 3862      
    call #00460FE5 (:%pSubse1)            ;#00469762: 350 7E78FFFF               v  00 00  1 3862      
    mov edx,[ebp-280] (symtab[1569])      ;#00469767: 213225 E8FEFFFF            uv 04 20  1 3863      
    cmp edx,h4                            ;#0046976D: 201372 00000040            uv 00 04  1 3864 04   
    mov [ebp-280] (symtab[1569]),ebx      ;#00469773: 211235 E8FEFFFF            vu 00 28  1 3864      
    jle #00469787                         ;#00469779: 176 0C                     v  00 00  1 3865      
    sub dword[ebx+edx*4-8],1              ;#0046977B: 203154223 F8 01            u  00 0C  3 3866      
    jne #00469787                         ;#00469780: 165 05                     v  00 00  1 3868      
    call #004639A8 (:%pDealloc)           ;#00469782: 350 21A2FFFF               v  00 00  1 3869      
;  3527             else -- machine_bits()=64
;  3528 --              {N,rid,from_addr,ret_addr,prev_ebp,ebp_root} = peek8u({or_ebp*4+8,6})
;  3529                 {N,rid,from_addr,?,prev_ebp,ebp_root,ret_addr} = peek8u({or_ebp*4+8,7})
;  3530             end if
;  3531 if 0 then -- DEV 29/10/17/TEMP
;  3532     if show_low_level_diagnostics then
;  3533 --      if diagdiag>0 or (vsb_magic-#40565342) or msg_id<1 or msg_id>length(msgs) then
;  3534         if diagdiag>0 then
;  3535             put2(sprintf("N=%d, rid=%d, from=#%s, ret=#%s, ehand=%s, prevebp=#%s, ebproot=#%s\n",
;  3536                    {N,rid,addrS(from_addr),addrS(ret_addr),addrS(ehand),addrS(prev_ebp),addrS(ebp_root)}))
;  3537             put2(sprintf("or_eax=#%08x, or_ecx=#%08x, or_edx=#%08x,\nor_esi=#%08x, or_edi=#%08x\n",
;  3538                    {or_eax,or_ecx,or_edx,or_esi,or_edi}))
;  3539 --          magicok = "\"@VSB\""
;  3540             magicok = `"@VSB"`
;  3541 --DEV wrong on machine_bits()=64... (possibly one for docs) [I think it may be OK now...]
;  3542 --          if vsb_magic!=#40565342 then
;  3543             if (vsb_magic-#40565342) then
;  3544                 magicok = "**BAD MAGIC**"
;  3545             end if
;  3546             put2(sprintf("vSb_prev=#%s, vsb_next=#%s, vsb_magic=%s (%s)\n",
;  3547                    {addrS(vsb_prev),addrS(vsb_next),addrS(vsb_magic),magicok}))
;  3548         end if
;  3549     end if
;  3550 end if
;  3551 --if diagdiag then
;  3552 --          printf(1,"N=%d, rid=%d, from=#%s, ret=#%s, prevebp=#%s, ebproot=#%s\n",
;  3553 --                 {N,rid,addrS(from_addr),addrS(ret_addr),addrS(prev_ebp),addrS(ebp_root)})
;  3554 --end if
;  3555 -- (untried [might cause problems with test after loop, which might go away if moved (back) above??])
;  3556             if prev_ebp=0 then exit end if
    mov ecx,[ebp-100] (prev_ebp)          ;#00469787: 213115 9C                  uv 02 20  1 3870      
    cmp ecx,0                             ;#0046978A: 203371 00                  uv 00 02  1 3871 02   
    je #0046982D                          ;#0046978D: 017204 9A000000            v  00 00  1 3871      
;  3557 --          if prev_ebp=0 then put2("prev_ebp=0\n") exit end if
;  3558 --if ret_addr=cf_ret_addr-1 then ret_addr = ?? end if
;  3559             if ret_addr!=0 
    xor edi,edi                           ;#00469793: 061377                     uv 80 80  1 3872      
    mov eax,[ebp-96] (ret_addr)           ;#00469795: 213105 A0                  vu 01 20  1 3872      
    mov esi,25                            ;#00469798: 276 19000000               uv 40 00  1 3873      
    mov edx,1333                          ;#0046979D: 272 35050000               vu 04 00  1 3873      
    call #0045F91F (:%opJccE)             ;#004697A2: 350 7861FFFF               v  00 00  1 3874      
    je #004697FF                          ;#004697A7: 164 56                     v  00 00  1 3875      
;  3560 --          and ret_addr!=cb_ret_addr then
;  3561             and or_era!=cb_ret_addr-1 then
    mov edi,[ebp-44] (cb_ret_addr)        ;#004697A9: 213175 D4                  uv 80 20  1 3876      
    cmp edi,h4                            ;#004697AC: 201377 00000040            uv 00 80  1 3877 80   
    jne #004697BE                         ;#004697B2: 165 0A                     v  00 00  1 3877      
    mov esi,1320                          ;#004697B4: 276 28050000               uv 40 00  1 3878      
    call #00462744 (:%pUnassigned)        ;#004697B9: 350 868FFFFF               v  00 00  1 3878      
    lea edi,[ebp-248] (symtab[1543])      ;#004697BE: 215275 08FFFFFF            uv 80 20  1 3879      
    mov ecx,[ebp-44] (cb_ret_addr)        ;#004697C4: 213115 D4                  vu 02 20  1 3879      
    mov eax,[#0040201C]                   ;#004697C7: 241 1C204000               uv 01 00  1 3880      
    call #0045F299 (:%opSub)              ;#004697CC: 350 C85AFFFF               v  00 00  1 3880      
    mov edi,[ebp-248] (symtab[1543])      ;#004697D1: 213275 08FFFFFF            uv 80 20  1 3881      
    mov eax,[#00402610] (or_era)          ;#004697D7: 241 10264000               vu 01 00  1 3881      
    mov esi,1543                          ;#004697DC: 276 07060000               uv 40 00  1 3882      
    mov edx,1244                          ;#004697E1: 272 DC040000               vu 04 00  1 3882      
    call #0045F91F (:%opJccE)             ;#004697E6: 350 3461FFFF               v  00 00  1 3883      
    je #004697FF                          ;#004697EB: 164 12                     v  00 00  1 3884      
;  3562 --          and or_era!=cf_ret_addr-2 then
;  3563 --          and ret_addr!=cf_ret_addr-1 then
;  3564 --put2("QUIT\n")
;  3565                 ret_addr -= 1
    lea edi,[ebp-96] (ret_addr)           ;#004697ED: 215175 A0                  uv 80 20  1 3885      
    mov ecx,[ebp-96] (ret_addr)           ;#004697F0: 213115 A0                  vu 02 20  1 3885      
    mov eax,[#0040201C]                   ;#004697F3: 241 1C204000               uv 01 00  1 3886      
    call #0045F299 (:%opSub)              ;#004697F8: 350 9C5AFFFF               v  00 00  1 3886      
;  3566                 exit
    jmp #0046982D                         ;#004697FD: 353 2E                     v  00 00  1 3887      
;  3567             end if
;  3568 --if prev_ebp!=0 then
;  3569 --          if platform()=WINDOWS then
;  3570 --              put2("(^^^) call_back from Windows/dll/asm\n")
;  3571 --          else
;  3572             put2(" (^^^) call_back from OperatingSystem/sharedlib/asm\n")
    mov ecx,4                             ;#004697FF: 271 04000000               uv 02 00  1 3888      
    mov edx,1165                          ;#00469804: 272 8D040000               vu 04 00  1 3888      
    call #00462C02 (:%opFrame) (put2)     ;#00469809: 350 F493FFFF               v  00 00  1 3889      
    mov esi,[#00402978]                   ;#0046980E: 213065 78294000            uv 40 00  1 3890      
    mov [ebp] (emsg),esi                  ;#00469814: 211165 00                  uv 00 60  1 3891 40   
    add dword[ebx+esi*4-8],1              ;#00469817: 203104263 F8 01            u  00 48  3 3893    *40*
    mov [ebp+28] (retaddr),#00469828      ;#0046981C: 307105 1C 28984600         vu 00 20  1 3895      
    jmp #0046C44A (code:put2)             ;#00469823: 351 222C0000               v  00 00  1 3896      
;  3573 --          end if
;  3574 --end if
;  3575         end while
    jmp #00469559                         ;#00469828: 351 2CFDFFFF               v  00 00  1 3897      
;  3576         if or_ebp=0 then
    xor edi,edi                           ;#0046982D: 061377                     uv 80 80  1 3898      
    mov eax,[#004025F8] (or_ebp)          ;#0046982F: 241 F8254000               vu 01 00  1 3898      
    mov esi,25                            ;#00469834: 276 19000000               uv 40 00  1 3899      
    mov edx,1238                          ;#00469839: 272 D6040000               vu 04 00  1 3899      
    call #0045F91F (:%opJccE)             ;#0046983E: 350 DC60FFFF               v  00 00  1 3900      
    jne #0046992E                         ;#00469843: 017205 E5000000            v  00 00  1 3901      
;  3577             if length(msg2) then
    mov edi,[ebp-144] (msg2)              ;#00469849: 213275 70FFFFFF            uv 80 20  1 3902      
    mov ecx,[ebx+edi*4-12]                ;#0046984F: 213114273 F4               uv 02 88  1 3905 80 *80*
    test ecx,ecx                          ;#00469853: 205311                     uv 00 02  1 3906 02   
    je #004698C4                          ;#00469855: 164 6D                     v  00 00  1 3906      
;  3578                 put2(msg2)
    mov ecx,4                             ;#00469857: 271 04000000               uv 02 00  1 3907      
    mov edx,1165                          ;#0046985C: 272 8D040000               vu 04 00  1 3907      
    call #00462C02 (:%opFrame) (put2)     ;#00469861: 350 9C93FFFF               v  00 00  1 3908      
    mov edi,[ebp+20] (prevebp)            ;#00469866: 213175 14                  uv 80 20  1 3909      
    mov eax,[edi-144]                     ;#00469869: 213207 70FFFFFF            uv 01 80  1 3912 80 *80*
    xor ebx,ebx                           ;#0046986F: 061333                     vu 08 08  1 3912      
    cmp eax,h4                            ;#00469871: 075 00000040               uv 00 01  1 3913      
    jl #00469882                          ;#00469876: 174 0A                     v  00 00  1 3913      
    add dword[ebx+eax*4-8],1              ;#00469878: 203104203 F8 01            u  00 09  3 3914      
    cmp eax,1345                          ;#0046987D: 075 41050000               vu 00 01  1 3916      
    mov [ebp] (emsg),eax                  ;#00469882: 211105 00                  uv 00 21  1 3917      
    mov [ebp+28] (retaddr),#00469891      ;#00469885: 307105 1C 91984600         vu 00 20  1 3917      
    jmp #0046C44A (code:put2)             ;#0046988C: 351 B92B0000               v  00 00  1 3918      
;  3579                 msg2 = ""
    mov esi,[#004022A4]                   ;#00469891: 213065 A4224000            uv 40 00  1 3919      
    mov edx,[ebp-144] (msg2)              ;#00469897: 213225 70FFFFFF            vu 04 20  1 3919      
    cmp esi,h4                            ;#0046989D: 201376 00000040            uv 00 40  1 3920      
    jl #004698AA                          ;#004698A3: 174 05                     v  00 00  1 3920      
    add dword[ebx+esi*4-8],1              ;#004698A5: 203104263 F8 01            u  00 48  3 3921      
    mov [ebp-144] (msg2),esi              ;#004698AA: 211265 70FFFFFF            vu 00 60  1 3923      
    cmp edx,h4                            ;#004698B0: 201372 00000040            uv 00 04  1 3924      
    jle #004698C4                         ;#004698B6: 176 0C                     v  00 00  1 3924      
    sub dword[ebx+edx*4-8],1              ;#004698B8: 203154223 F8 01            u  00 0C  3 3925      
    jne #004698C4                         ;#004698BD: 165 05                     v  00 00  1 3927      
    call #004639A8 (:%pDealloc)           ;#004698BF: 350 E4A0FFFF               v  00 00  1 3928      
;  3580             end if
;  3581             if rtype=1 then -- skip (lineno=-1)
    mov edi,1                             ;#004698C4: 277 01000000               uv 80 00  1 3929      
    mov eax,[ebp-128] (rtype)             ;#004698C9: 213105 80                  vu 01 20  1 3929      
    mov esi,26                            ;#004698CC: 276 1A000000               uv 40 00  1 3930      
    mov edx,1341                          ;#004698D1: 272 3D050000               vu 04 00  1 3930      
    call #0045F91F (:%opJccE)             ;#004698D6: 350 4460FFFF               v  00 00  1 3931      
    jne #00469979                         ;#004698DB: 017205 98000000            v  00 00  1 3932      
;  3582                 printf(1,"pDiagN.e line 3413: oops, lineno=-1/e92/not retD(), era=#%08x\n",or_era)
    mov ecx,9                             ;#004698E1: 271 09000000               uv 02 00  1 3933      
    mov edx,400                           ;#004698E6: 272 90010000               vu 04 00  1 3933      
    call #00462C02 (:%opFrame) (printf)   ;#004698EB: 350 1293FFFF               v  00 00  1 3934      
    mov [ebp] (fn), dword 1               ;#004698F0: 307105 00 01000000         uv 00 20  1 3935      
    mov edi,[#0040297C]                   ;#004698F7: 213075 7C294000            vu 80 00  1 3935      
    mov [ebp-4] (fmt),edi                 ;#004698FD: 211175 FC                  uv 00 A0  1 3936      
    add dword[ebx+edi*4-8],1              ;#00469900: 203104273 F8 01            u  00 88  3 3938    *80*
    mov ecx,[#00402610] (or_era)          ;#00469905: 213015 10264000            vu 02 00  1 3940      
    mov [ebp-8] (args),ecx                ;#0046990B: 211115 F8                  uv 00 22  1 3941      
    cmp ecx,h4                            ;#0046990E: 201371 00000040            vu 00 02  1 3941      
    jl #00469920                          ;#00469914: 174 0A                     v  00 00  1 3942      
    add dword[ebx+ecx*4-8],1              ;#00469916: 203104213 F8 01            u  00 0A  3 3943      
    cmp eax,1244                          ;#0046991B: 075 DC040000               vu 00 01  1 3945      
    mov [ebp+28] (retaddr),#0046992C      ;#00469920: 307105 1C 2C994600         uv 00 20  1 3946      
    jmp #00444FC4 (code:printf)           ;#00469927: 351 98B6FDFF               v  00 00  1 3946      
;  3583             end if
;  3584             exit
    jmp #00469979                         ;#0046992C: 353 4B                     v  00 00  1 3947      
;  3585         end if
;  3586         if rtype = 2 then       -- 2 normal
    mov edi,2                             ;#0046992E: 277 02000000               uv 80 00  1 3948      
    mov eax,[ebp-128] (rtype)             ;#00469933: 213105 80                  vu 01 20  1 3948      
    mov esi,35                            ;#00469936: 276 23000000               uv 40 00  1 3949      
    mov edx,1341                          ;#0046993B: 272 3D050000               vu 04 00  1 3949      
    call #0045F91F (:%opJccE)             ;#00469940: 350 DA5FFFFF               v  00 00  1 3950      
    jne #004685C7                         ;#00469945: 017205 7CECFFFF            v  00 00  1 3951      
;  3587             put2("... called from ")
    mov ecx,4                             ;#0046994B: 271 04000000               uv 02 00  1 3952      
    mov edx,1165                          ;#00469950: 272 8D040000               vu 04 00  1 3952      
    call #00462C02 (:%opFrame) (put2)     ;#00469955: 350 A892FFFF               v  00 00  1 3953      
    mov esi,[#00402980]                   ;#0046995A: 213065 80294000            uv 40 00  1 3954      
    mov [ebp] (emsg),esi                  ;#00469960: 211165 00                  uv 00 60  1 3955 40   
    add dword[ebx+esi*4-8],1              ;#00469963: 203104263 F8 01            u  00 48  3 3957    *40*
    mov [ebp+28] (retaddr),#00469974      ;#00469968: 307105 1C 74994600         vu 00 20  1 3959      
    jmp #0046C44A (code:put2)             ;#0046996F: 351 D62A0000               v  00 00  1 3960      
;  3588         end if
;  3589     end while
    jmp #004685C7                         ;#00469974: 351 4EECFFFF               v  00 00  1 3961      
;  3590 --erm??
;  3591 --  if not batchmode then
;  3592     if not batchmode and atom(crash_msg) then
    mov edi,[#00402568] (batchmode)       ;#00469979: 213075 68254000            uv 80 00  1 3962      
    test edi,edi                          ;#0046997F: 205377                     uv 00 80  1 3963 80   
    jne #004699A8                         ;#00469981: 165 25                     v  00 00  1 3963      
    mov ecx,[#00402564] (crash_msg)       ;#00469983: 213015 64254000            uv 02 00  1 3964      
    cmp ecx,h4                            ;#00469989: 201371 00000040            uv 00 02  1 3965 02   
    jl #00469998                          ;#0046998F: 174 07                     v  00 00  1 3965      
    cmp byte[ebx+ecx*4-1],#12             ;#00469991: 200174213 FF 12            u  00 0A  2 3966      
    jne #004699A8                         ;#00469996: 165 10                     v  00 00  1 3967      
;  3593         puts(1,"\nGlobal & Local Variables\n")
    mov eax,1                             ;#00469998: 270 01000000               uv 01 00  1 3968      
    mov edx,[#00402984]                   ;#0046999D: 213025 84294000            vu 04 00  1 3968      
    call #0045E072 (:%opPuts)             ;#004699A3: 350 CA46FFFF               v  00 00  1 3969      
;  3594     end if
;  3595     if fn!=-1 then
    mov edi,-1                            ;#004699A8: 277 FFFFFFFF               uv 80 00  1 3970      
    mov eax,[#00402510] (fn)              ;#004699AD: 241 10254000               vu 01 00  1 3970      
    mov esi,24                            ;#004699B2: 276 18000000               uv 40 00  1 3971      
    mov edx,1063                          ;#004699B7: 272 27040000               vu 04 00  1 3971      
    call #0045F91F (:%opJccE)             ;#004699BC: 350 5E5FFFFF               v  00 00  1 3972      
    je #0046A03E                          ;#004699C1: 017204 77060000            v  00 00  1 3973      
;  3596         puts(fn,"\nGlobal & Local Variables\n")
    mov eax,[#00402510] (fn)              ;#004699C7: 241 10254000               uv 01 00  1 3974      
    mov edx,[#00402984]                   ;#004699CC: 213025 84294000            vu 04 00  1 3974      
    call #0045E072 (:%opPuts)             ;#004699D2: 350 9B46FFFF               v  00 00  1 3975      
;  3597         fileno = 0
    mov [ebp-24] (fileno),ebx             ;#004699D7: 211135 E8                  uv 00 28  1 3976      
;  3598 
;  3599         for i=T_const1+1 to length(symtab) do
    lea edi,[ebp-284] (symtab[1573])      ;#004699DA: 215275 E4FEFFFF            vu 80 20  1 3976      
    mov esi,[ebp] (symtab)                ;#004699E0: 213165 00                  uv 40 20  1 3977      
    mov edx,1309                          ;#004699E3: 272 1D050000               vu 04 00  1 3977      
    call #0045EFEC (:%opLen)              ;#004699E8: 350 FF55FFFF               v  00 00  1 3978      
    mov [ebp-212] (i), dword 27           ;#004699ED: 307205 2CFFFFFF 1B000000   uv 00 20  1 3979      
    cmp ecx,27                            ;#004699F7: 201371 1B000000            vu 00 02  1 3979      
    jl #00469E4B                          ;#004699FD: 017214 48040000            v  00 00  1 3980      
;  3600             si = symtab[i]
    mov edi,[ebp] (symtab)                ;#00469A03: 213175 00                  uv 80 20  1 3981      
    cmp edi,h4                            ;#00469A06: 201377 00000040            uv 00 80  1 3982 80   
    jne #00469A18                         ;#00469A0C: 165 0A                     v  00 00  1 3982      
    mov esi,1309                          ;#00469A0E: 276 1D050000               uv 40 00  1 3983      
    call #00462744 (:%pUnassigned)        ;#00469A13: 350 2C8DFFFF               v  00 00  1 3983      
    mov edi,[ebp-212] (i)                 ;#00469A18: 213275 2CFFFFFF            uv 80 20  1 3984      
    lea ecx,[ebp-4] (si)                  ;#00469A1E: 215115 FC                  vu 02 20  1 3984      
    mov esi,[ebp] (symtab)                ;#00469A21: 213165 00                  uv 40 20  1 3985      
    mov edx,1309                          ;#00469A24: 272 1D050000               vu 04 00  1 3985      
    mov al,0                              ;#00469A29: 260 00                     uv 01 00  1 3986      
    call #00460FE5 (:%pSubse1)            ;#00469A2B: 350 B575FFFF               v  00 00  1 3986      
;  3601             if sequence(si) then                            -- might not be dumped (unused)
    mov eax,[ebp-4] (si)                  ;#00469A30: 213105 FC                  uv 01 20  1 3987      
    cmp eax,h4                            ;#00469A33: 075 00000040               uv 00 01  1 3988 01   
    jl #00469E2E                          ;#00469A38: 017214 F0030000            v  00 00  1 3988      
    test byte[ebx+eax*4-1],#80            ;#00469A3E: 366104203 FF 80            u  00 09  2 3989      
    je #00469E2E                          ;#00469A43: 017204 E5030000            v  00 00  1 3990      
;  3602                 name = si[S_Name]
    mov edi,1                             ;#00469A49: 277 01000000               uv 80 00  1 3991      
    lea ecx,[ebp-12] (name)               ;#00469A4E: 215115 F4                  vu 02 20  1 3991      
    mov esi,eax                           ;#00469A51: 211306                     uv 40 01  1 3992      
    mov edx,1310                          ;#00469A53: 272 1E050000               vu 04 00  1 3992      
    mov al,0                              ;#00469A58: 260 00                     uv 01 00  1 3993      
    call #00460FE5 (:%pSubse1)            ;#00469A5A: 350 8675FFFF               v  00 00  1 3993      
;  3603 --SUG and consts?
;  3604                 if equal(si[S_NTyp],S_GVar2)
    mov edi,2                             ;#00469A5F: 277 02000000               uv 80 00  1 3994      
    lea ecx,[ebp-264] (symtab[1562])      ;#00469A64: 215215 F8FEFFFF            vu 02 20  1 3994      
    mov esi,[ebp-4] (si)                  ;#00469A6A: 213165 FC                  uv 40 20  1 3995      
    mov edx,1310                          ;#00469A6D: 272 1E050000               vu 04 00  1 3995      
    mov al,0                              ;#00469A72: 260 00                     uv 01 00  1 3996      
    call #00460FE5 (:%pSubse1)            ;#00469A74: 350 6C75FFFF               v  00 00  1 3996      
    mov ecx,[ebp-264] (symtab[1562])      ;#00469A79: 213215 F8FEFFFF            uv 02 20  1 3997      
    cmp ecx,2                             ;#00469A7F: 203371 02                  uv 00 02  1 3998 02   
    jne #00469E2E                         ;#00469A82: 017205 A6030000            v  00 00  1 3998      
;  3605                 and (swod or and_bits(si[S_State],K_wdb))   -- skip without debug items
    mov edi,4                             ;#00469A88: 277 04000000               uv 80 00  1 3999      
    lea ecx,[ebp-264] (symtab[1562])      ;#00469A8D: 215215 F8FEFFFF            vu 02 20  1 3999      
    mov esi,[ebp-4] (si)                  ;#00469A93: 213165 FC                  uv 40 20  1 4000      
    mov edx,1310                          ;#00469A96: 272 1E050000               vu 04 00  1 4000      
    mov al,0                              ;#00469A9B: 260 00                     uv 01 00  1 4001      
    call #00460FE5 (:%pSubse1)            ;#00469A9D: 350 4375FFFF               v  00 00  1 4001      
    lea edi,[ebp-296] (symtab[1583])      ;#00469AA2: 215275 D8FEFFFF            uv 80 20  1 4002      
    mov ecx,[ebp-264] (symtab[1562])      ;#00469AA8: 213215 F8FEFFFF            vu 02 20  1 4002      
    mov eax,[#004025C0] (K_wdb)           ;#00469AAE: 241 C0254000               uv 01 00  1 4003      
    call #0045F45E (:%opAndBits)          ;#00469AB3: 350 A659FFFF               v  00 00  1 4003      
    mov edi,[ebp-296] (symtab[1583])      ;#00469AB8: 213275 D8FEFFFF            uv 80 20  1 4004      
    test edi,edi                          ;#00469ABE: 205377                     uv 00 80  1 4005 80   
    je #00469E2E                          ;#00469AC0: 017204 68030000            v  00 00  1 4005      
;  3606                 and sequence(name) then                     -- skip unnamed items
    mov esi,[ebp-12] (name)               ;#00469AC6: 213165 F4                  uv 40 20  1 4006      
    cmp esi,h4                            ;#00469AC9: 201376 00000040            uv 00 40  1 4007 40   
    jl #00469E2E                          ;#00469ACF: 017214 59030000            v  00 00  1 4007      
    test byte[ebx+esi*4-1],#80            ;#00469AD5: 366104263 FF 80            u  00 48  2 4008      
    je #00469E2E                          ;#00469ADA: 017204 4E030000            v  00 00  1 4009      
;  3607                     fpno = si[S_FPno]
    mov edi,3                             ;#00469AE0: 277 03000000               uv 80 00  1 4010      
    lea ecx,[ebp-28] (fpno)               ;#00469AE5: 215115 E4                  vu 02 20  1 4010      
    mov esi,[ebp-4] (si)                  ;#00469AE8: 213165 FC                  uv 40 20  1 4011      
    mov edx,1310                          ;#00469AEB: 272 1E050000               vu 04 00  1 4011      
    call #0046106B (:%pSubse1i)           ;#00469AF0: 350 7675FFFF               v  00 00  1 4012      
;  3608                     if fileno!=fpno then
    mov ecx,[ebp-24] (fileno)             ;#00469AF5: 213115 E8                  uv 02 20  1 4013      
    cmp ecx,eax                           ;#00469AF8: 071301                     uv 00 03  1 4014 02   
    je #00469C6D                          ;#00469AFA: 017204 6D010000            v  00 00  1 4014      
;  3609                         fileno = fpno
    mov [ebp-24] (fileno),eax             ;#00469B00: 211105 E8                  uv 00 21  1 4015      
;  3610                         filename = deep_copy(symtab[T_fileset][fileno][1..2])
    mov edi,[ebp] (symtab)                ;#00469B03: 213175 00                  vu 80 20  1 4015      
    cmp edi,h4                            ;#00469B06: 201377 00000040            uv 00 80  1 4016      
    jne #00469B18                         ;#00469B0C: 165 0A                     v  00 00  1 4016      
    mov esi,1309                          ;#00469B0E: 276 1D050000               uv 40 00  1 4017      
    call #00462744 (:%pUnassigned)        ;#00469B13: 350 2C8CFFFF               v  00 00  1 4017      
    lea edx,[ebp-220] (symtab[1501])      ;#00469B18: 215225 24FFFFFF            uv 04 20  1 4018      
    mov ecx,3                             ;#00469B1E: 271 03000000               vu 02 00  1 4018      
    push #00469B3C                        ;#00469B23: 150 3C9B4600               uv 00 00  1 4019      
    push edx                              ;#00469B28: 122                        vu 00 04  1 4019      
    push 2                                ;#00469B29: 152 02                     uv 00 00  1 4020      
    push 1                                ;#00469B2B: 152 01                     vu 00 00  1 4020      
    push eax                              ;#00469B2D: 120                        uv 00 01  1 4021      
    push 17                               ;#00469B2E: 152 11                     vu 00 00  1 4021      
    mov esi,edi                           ;#00469B30: 211376                     uv 40 80  1 4022      
    mov edx,1309                          ;#00469B32: 272 1D050000               vu 04 00  1 4022      
    jmp #00460A75 (:%pSubss)              ;#00469B37: 351 396FFFFF               v  00 00  1 4023      
    mov ecx,8                             ;#00469B3C: 271 08000000               uv 02 00  1 4024      
    mov edx,266                           ;#00469B41: 272 0A010000               vu 04 00  1 4024      
    call :%opFrame (deep_copy)            ;#00469B46: 350 B790FFFF               v  00 00  1 4025      
    mov edi,[ebp+20] (prevebp)            ;#00469B4B: 213175 14                  uv 80 20  1 4026      
    mov eax,[edi-220]                     ;#00469B4E: 213207 24FFFFFF            uv 01 80  1 4029 80 *80*
    mov [edi-220], dword h4               ;#00469B54: 307207 24FFFFFF 00000040   vu 00 80  1 4029      
    cmp eax,h4                            ;#00469B5E: 075 00000040               uv 00 01  1 4030      
    jne #00469B6F                         ;#00469B63: 165 0A                     v  00 00  1 4030      
    mov esi,1501                          ;#00469B65: 276 DD050000               uv 40 00  1 4031      
    call #00462744 (:%pUnassigned)        ;#00469B6A: 350 D58BFFFF               v  00 00  1 4031      
    mov [ebp] (o),eax                     ;#00469B6F: 211105 00                  uv 00 21  1 4032      
    mov [ebp+28] (retaddr),#00469B7E      ;#00469B72: 307105 1C 7E9B4600         vu 00 20  1 4032      
    jmp #0044FA59 (code:deep_copy)        ;#00469B79: 351 DB5EFEFF               v  00 00  1 4033      
    push eax                              ;#00469B7E: 120                        uv 00 01  1 4034      
    mov esi,[ebp-64] (filename)           ;#00469B7F: 213165 C0                  vu 40 20  1 4034      
    cmp esi,h4                            ;#00469B82: 201376 00000040            uv 00 40  1 4035      
    jle #00469B98                         ;#00469B88: 176 0E                     v  00 00  1 4035      
    sub dword[ebx+esi*4-8],1              ;#00469B8A: 203154263 F8 01            u  00 48  3 4036      
    jne #00469B98                         ;#00469B8F: 165 07                     v  00 00  1 4038      
    mov edx,esi                           ;#00469B91: 213326                     uv 04 40  1 4039      
    call #004639A8 (:%pDealloc)           ;#00469B93: 350 109EFFFF               v  00 00  1 4039      
    pop dword[ebp-64] (filename)          ;#00469B98: 217105 C0                  np 00 20  3 4040      
;  3611                         filename[1] = pathset[filename[1]]
    mov edi,1                             ;#00469B9B: 277 01000000               uv 80 00  1 4043      
    lea ecx,[ebp-264] (symtab[1562])      ;#00469BA0: 215215 F8FEFFFF            vu 02 20  1 4043      
    mov esi,[ebp-64] (filename)           ;#00469BA6: 213165 C0                  uv 40 20  1 4044      
    mov edx,1325                          ;#00469BA9: 272 2D050000               vu 04 00  1 4044      
    mov al,0                              ;#00469BAE: 260 00                     uv 01 00  1 4045      
    call #00460FE5 (:%pSubse1)            ;#00469BB0: 350 3074FFFF               v  00 00  1 4045      
    mov edi,[ebp-264] (symtab[1562])      ;#00469BB5: 213275 F8FEFFFF            uv 80 20  1 4046      
    lea ecx,[ebp-300] (symtab[1584])      ;#00469BBB: 215215 D4FEFFFF            vu 02 20  1 4046      
    mov esi,[ebp-68] (pathset)            ;#00469BC1: 213165 BC                  uv 40 20  1 4047      
    mov edx,1326                          ;#00469BC4: 272 2E050000               vu 04 00  1 4047      
    mov al,0                              ;#00469BC9: 260 00                     uv 01 00  1 4048      
    call #00460FE5 (:%pSubse1)            ;#00469BCB: 350 1574FFFF               v  00 00  1 4048      
    mov edi,[#0040201C]                   ;#00469BD0: 213075 1C204000            uv 80 00  1 4049      
    mov ecx,[ebp-300] (symtab[1584])      ;#00469BD6: 213215 D4FEFFFF            vu 02 20  1 4049      
    mov esi,[ebp-64] (filename)           ;#00469BDC: 213165 C0                  uv 40 20  1 4050      
    lea eax,[ebp-64] (filename)           ;#00469BDF: 215105 C0                  vu 01 20  1 4050      
    call #004607F3 (:%pRepe1)             ;#00469BE2: 350 0C6CFFFF               v  00 00  1 4051      
    mov edx,[ebp-300] (symtab[1584])      ;#00469BE7: 213225 D4FEFFFF            uv 04 20  1 4052      
    cmp edx,h4                            ;#00469BED: 201372 00000040            uv 00 04  1 4053 04   
    mov [ebp-300] (symtab[1584]),ebx      ;#00469BF3: 211235 D4FEFFFF            vu 00 28  1 4053      
    jle #00469C07                         ;#00469BF9: 176 0C                     v  00 00  1 4054      
    sub dword[ebx+edx*4-8],1              ;#00469BFB: 203154223 F8 01            u  00 0C  3 4055      
    jne #00469C07                         ;#00469C00: 165 05                     v  00 00  1 4057      
    call #004639A8 (:%pDealloc)           ;#00469C02: 350 A19DFFFF               v  00 00  1 4058      
;  3612                         printf(fn,"\n %s%s:\n",filename)
    mov ecx,9                             ;#00469C07: 271 09000000               uv 02 00  1 4059      
    mov edx,400                           ;#00469C0C: 272 90010000               vu 04 00  1 4059      
    call #00462C02 (:%opFrame) (printf)   ;#00469C11: 350 EC8FFFFF               v  00 00  1 4060      
    mov eax,[#00402510] (fn)              ;#00469C16: 241 10254000               uv 01 00  1 4061      
    mov [ebp] (fn),eax                    ;#00469C1B: 211105 00                  uv 00 21  1 4062 01   
    mov edi,[#00402988]                   ;#00469C1E: 213075 88294000            vu 80 00  1 4062      
    mov [ebp-4] (fmt),edi                 ;#00469C24: 211175 FC                  uv 00 A0  1 4063      
    add dword[ebx+edi*4-8],1              ;#00469C27: 203104273 F8 01            u  00 88  3 4065    *80*
    mov edi,[ebp+20] (prevebp)            ;#00469C2C: 213175 14                  vu 80 20  1 4067      
    mov eax,[edi-64]                      ;#00469C2F: 213107 C0                  uv 01 80  1 4070    *80*
    xor ebx,ebx                           ;#00469C32: 061333                     vu 08 08  1 4070      
    cmp eax,h4                            ;#00469C34: 075 00000040               uv 00 01  1 4071      
    jl #00469C45                          ;#00469C39: 174 0A                     v  00 00  1 4071      
    add dword[ebx+eax*4-8],1              ;#00469C3B: 203104203 F8 01            u  00 09  3 4072      
    cmp eax,1325                          ;#00469C40: 075 2D050000               vu 00 01  1 4074      
    mov [ebp-8] (args),eax                ;#00469C45: 211105 F8                  uv 00 21  1 4075      
    mov [ebp+28] (retaddr),#00469C54      ;#00469C48: 307105 1C 549C4600         vu 00 20  1 4075      
    jmp #00444FC4 (code:printf)           ;#00469C4F: 351 70B3FDFF               v  00 00  1 4076      
;  3613 if diagdiag then
;  3614                         printf(1,"\n %s%s:\n",filename)
;  3615 end if
;  3616 --4/2/21:
;  3617 cdi_filename = filename[2]
    mov edi,2                             ;#00469C54: 277 02000000               uv 80 00  1 4077      
    mov ecx,#00402540                     ;#00469C59: 271 40254000               vu 02 00  1 4077      
    mov esi,[ebp-64] (filename)           ;#00469C5E: 213165 C0                  uv 40 20  1 4078      
    mov edx,1325                          ;#00469C61: 272 2D050000               vu 04 00  1 4078      
    mov al,0                              ;#00469C66: 260 00                     uv 01 00  1 4079      
    call #00460FE5 (:%pSubse1)            ;#00469C68: 350 7873FFFF               v  00 00  1 4079      
;  3618                     end if
;  3619                     {novalue,o} = getGvarValue(si[S_Slink])
    mov edi,6                             ;#00469C6D: 277 06000000               uv 80 00  1 4080      
    lea ecx,[ebp-300] (symtab[1584])      ;#00469C72: 215215 D4FEFFFF            vu 02 20  1 4080      
    mov esi,[ebp-4] (si)                  ;#00469C78: 213165 FC                  uv 40 20  1 4081      
    mov edx,1310                          ;#00469C7B: 272 1E050000               vu 04 00  1 4081      
    mov al,0                              ;#00469C80: 260 00                     uv 01 00  1 4082      
    call #00460FE5 (:%pSubse1)            ;#00469C82: 350 5E73FFFF               v  00 00  1 4082      
    mov ecx,4                             ;#00469C87: 271 04000000               uv 02 00  1 4083      
    mov edx,1250                          ;#00469C8C: 272 E2040000               vu 04 00  1 4083      
    call :%opFrame (getGvarValue)         ;#00469C91: 350 6C8FFFFF               v  00 00  1 4084      
    mov edi,[ebp+20] (prevebp)            ;#00469C96: 213175 14                  uv 80 20  1 4085      
    mov eax,[edi-300]                     ;#00469C99: 213207 D4FEFFFF            uv 01 80  1 4088 80 *80*
    mov [edi-300], dword h4               ;#00469C9F: 307207 D4FEFFFF 00000040   vu 00 80  1 4088      
    cmp eax,h4                            ;#00469CA9: 075 00000040               uv 00 01  1 4089      
    jne #00469CBA                         ;#00469CAE: 165 0A                     v  00 00  1 4089      
    mov esi,1584                          ;#00469CB0: 276 30060000               uv 40 00  1 4090      
    call #00462744 (:%pUnassigned)        ;#00469CB5: 350 8A8AFFFF               v  00 00  1 4090      
    mov [ebp] (gidx),eax                  ;#00469CBA: 211105 00                  uv 00 21  1 4091      
    mov [ebp+28] (retaddr),#00469CC9      ;#00469CBD: 307105 1C C99C4600         vu 00 20  1 4091      
    jmp #0046C721 (code:getGvarValue)     ;#00469CC4: 351 582A0000               v  00 00  1 4092      
    push eax                              ;#00469CC9: 120                        uv 00 01  1 4093      
    mov ecx,[ebp-292] (symtab[1578])      ;#00469CCA: 213215 DCFEFFFF            vu 02 20  1 4093      
    cmp ecx,h4                            ;#00469CD0: 201371 00000040            uv 00 02  1 4094      
    jle #00469CE6                         ;#00469CD6: 176 0E                     v  00 00  1 4094      
    sub dword[ebx+ecx*4-8],1              ;#00469CD8: 203154213 F8 01            u  00 0A  3 4095      
    jne #00469CE6                         ;#00469CDD: 165 07                     v  00 00  1 4097      
    mov edx,ecx                           ;#00469CDF: 213321                     uv 04 02  1 4098      
    call #004639A8 (:%pDealloc)           ;#00469CE1: 350 C29CFFFF               v  00 00  1 4098      
    pop dword[ebp-292] (symtab[1578])     ;#00469CE6: 217205 DCFEFFFF            np 00 20  3 4099      
    mov edi,2                             ;#00469CEC: 277 02000000               uv 80 00  1 4102      
    lea ecx,[ebp-16] (o)                  ;#00469CF1: 215115 F0                  vu 02 20  1 4102      
    mov esi,[ebp-292] (symtab[1578])      ;#00469CF4: 213265 DCFEFFFF            uv 40 20  1 4103      
    mov edx,1578                          ;#00469CFA: 272 2A060000               vu 04 00  1 4103      
    mov al,0                              ;#00469CFF: 260 00                     uv 01 00  1 4104      
    call #00460FE5 (:%pSubse1)            ;#00469D01: 350 DF72FFFF               v  00 00  1 4104      
    mov edi,1                             ;#00469D06: 277 01000000               uv 80 00  1 4105      
    lea ecx,[ebp-140] (novalue)           ;#00469D0B: 215215 74FFFFFF            vu 02 20  1 4105      
    mov esi,[ebp-292] (symtab[1578])      ;#00469D11: 213265 DCFEFFFF            uv 40 20  1 4106      
    mov edx,1578                          ;#00469D17: 272 2A060000               vu 04 00  1 4106      
    call #0046106B (:%pSubse1i)           ;#00469D1C: 350 4A73FFFF               v  00 00  1 4107      
    mov edx,[ebp-292] (symtab[1578])      ;#00469D21: 213225 DCFEFFFF            uv 04 20  1 4108      
    cmp edx,h4                            ;#00469D27: 201372 00000040            uv 00 04  1 4109 04   
    mov [ebp-292] (symtab[1578]),ebx      ;#00469D2D: 211235 DCFEFFFF            vu 00 28  1 4109      
    jle #00469D41                         ;#00469D33: 176 0C                     v  00 00  1 4110      
    sub dword[ebx+edx*4-8],1              ;#00469D35: 203154223 F8 01            u  00 0C  3 4111      
    jne #00469D41                         ;#00469D3A: 165 05                     v  00 00  1 4113      
    call #004639A8 (:%pDealloc)           ;#00469D3C: 350 679CFFFF               v  00 00  1 4114      
;  3620                     if novalue then
    mov edi,[ebp-140] (novalue)           ;#00469D41: 213275 74FFFFFF            uv 80 20  1 4115      
    test edi,edi                          ;#00469D47: 205377                     uv 00 80  1 4116 80   
    je #00469DDB                          ;#00469D49: 017204 8C000000            v  00 00  1 4116      
;  3621                         printf(fn,"    %s = <novalue>\n",{name})
    lea eax,[ebp-304] (symtab[1587])      ;#00469D4F: 215205 D0FEFFFF            uv 01 20  1 4117      
    mov edx,1                             ;#00469D55: 272 01000000               vu 04 00  1 4117      
    push #00469D81                        ;#00469D5A: 150 819D4600               uv 00 00  1 4118      
    push eax                              ;#00469D5F: 120                        vu 00 01  1 4118      
    mov ecx,[ebp-12] (name)               ;#00469D60: 213115 F4                  uv 02 20  1 4119      
    cmp ecx,h4                            ;#00469D63: 201371 00000040            uv 00 02  1 4120 02   
    jl #00469D75                          ;#00469D69: 174 0A                     v  00 00  1 4120      
    add dword[ebx+ecx*4-8],1              ;#00469D6B: 203104213 F8 01            u  00 0A  3 4121      
    cmp eax,1312                          ;#00469D70: 075 20050000               vu 00 01  1 4123      
    push ecx                              ;#00469D75: 121                        uv 00 02  1 4124      
    mov edi,[ebp-304] (symtab[1587])      ;#00469D76: 213275 D0FEFFFF            vu 80 20  1 4124      
    jmp #00460143 (:%pMkSq)               ;#00469D7C: 351 C263FFFF               v  00 00  1 4125      
    mov ecx,9                             ;#00469D81: 271 09000000               uv 02 00  1 4126      
    mov edx,400                           ;#00469D86: 272 90010000               vu 04 00  1 4126      
    call #00462C02 (:%opFrame) (printf)   ;#00469D8B: 350 728EFFFF               v  00 00  1 4127      
    mov esi,[#00402510] (fn)              ;#00469D90: 213065 10254000            uv 40 00  1 4128      
    mov [ebp] (fn),esi                    ;#00469D96: 211165 00                  uv 00 60  1 4129 40   
    mov eax,[#0040298C]                   ;#00469D99: 241 8C294000               vu 01 00  1 4129      
    mov [ebp-4] (fmt),eax                 ;#00469D9E: 211105 FC                  uv 00 21  1 4130      
    add dword[ebx+eax*4-8],1              ;#00469DA1: 203104203 F8 01            u  00 09  3 4132    *01*
    mov edi,[ebp+20] (prevebp)            ;#00469DA6: 213175 14                  vu 80 20  1 4134      
    mov eax,[edi-304]                     ;#00469DA9: 213207 D0FEFFFF            uv 01 80  1 4137    *80*
    mov [edi-304], dword h4               ;#00469DAF: 307207 D0FEFFFF 00000040   vu 00 80  1 4137      
    cmp eax,h4                            ;#00469DB9: 075 00000040               uv 00 01  1 4138      
    jne #00469DCA                         ;#00469DBE: 165 0A                     v  00 00  1 4138      
    mov esi,1587                          ;#00469DC0: 276 33060000               uv 40 00  1 4139      
    call #00462744 (:%pUnassigned)        ;#00469DC5: 350 7A89FFFF               v  00 00  1 4139      
    mov [ebp-8] (args),eax                ;#00469DCA: 211105 F8                  uv 00 21  1 4140      
    mov [ebp+28] (retaddr),#00469DD9      ;#00469DCD: 307105 1C D99D4600         vu 00 20  1 4140      
    jmp #00444FC4 (code:printf)           ;#00469DD4: 351 EBB1FDFF               v  00 00  1 4141      
;  3622 if diagdiag then
;  3623                         printf(1,"    %s = <novalue>\n",{name})
;  3624 end if
    jmp #00469E2E                         ;#00469DD9: 353 53                     v  00 00  1 4142      
;  3625                     else
;  3626                         clever_dump(name, o)
    mov ecx,10                            ;#00469DDB: 271 0A000000               uv 02 00  1 4143      
    mov edx,1137                          ;#00469DE0: 272 71040000               vu 04 00  1 4143      
    call :%opFrame (clever_dump)          ;#00469DE5: 350 188EFFFF               v  00 00  1 4144      
    mov edi,[ebp+20] (prevebp)            ;#00469DEA: 213175 14                  uv 80 20  1 4145      
    mov eax,[edi-12]                      ;#00469DED: 213107 F4                  uv 01 80  1 4148 80 *80*
    xor ebx,ebx                           ;#00469DF0: 061333                     vu 08 08  1 4148      
    cmp eax,h4                            ;#00469DF2: 075 00000040               uv 00 01  1 4149      
    jl #00469E03                          ;#00469DF7: 174 0A                     v  00 00  1 4149      
    add dword[ebx+eax*4-8],1              ;#00469DF9: 203104203 F8 01            u  00 09  3 4150      
    cmp eax,1312                          ;#00469DFE: 075 20050000               vu 00 01  1 4152      
    mov [ebp] (name),eax                  ;#00469E03: 211105 00                  uv 00 21  1 4153      
    mov edi,[ebp+20] (prevebp)            ;#00469E06: 213175 14                  vu 80 20  1 4153      
    mov eax,[edi-16]                      ;#00469E09: 213107 F0                  uv 01 80  1 4156    *80*
    xor ebx,ebx                           ;#00469E0C: 061333                     vu 08 08  1 4156      
    cmp eax,h4                            ;#00469E0E: 075 00000040               uv 00 01  1 4157      
    jl #00469E1F                          ;#00469E13: 174 0A                     v  00 00  1 4157      
    add dword[ebx+eax*4-8],1              ;#00469E15: 203104203 F8 01            u  00 09  3 4158      
    cmp eax,1313                          ;#00469E1A: 075 21050000               vu 00 01  1 4160      
    mov [ebp-4] (o),eax                   ;#00469E1F: 211105 FC                  uv 00 21  1 4161      
    mov [ebp+28] (retaddr),#00469E2E      ;#00469E22: 307105 1C 2E9E4600         vu 00 20  1 4161      
    jmp #0046A255 (code:clever_dump)      ;#00469E29: 351 27040000               v  00 00  1 4162      
;  3627                     end if
;  3628                 end if
;  3629             end if
;  3630         end for
    mov ecx,[ebp-212] (i)                 ;#00469E2E: 213215 2CFFFFFF            uv 02 20  1 4163      
    mov edi,[ebp-284] (symtab[1573])      ;#00469E34: 213275 E4FEFFFF            vu 80 20  1 4163      
    add ecx,1                             ;#00469E3A: 203301 01                  uv 02 02  1 4164      
    cmp ecx,edi                           ;#00469E3D: 073317                     uv 00 82  1 4165 02   
    mov [ebp-212] (i),ecx                 ;#00469E3F: 211215 2CFFFFFF            vu 00 22  1 4165      
    jle #00469A03                         ;#00469E45: 017216 B8FBFFFF            v  00 00  1 4166      
;  3631 
;  3632         if not batchmode then
    mov esi,[#00402568] (batchmode)       ;#00469E4B: 213065 68254000            uv 40 00  1 4167      
    test esi,esi                          ;#00469E51: 205366                     uv 00 40  1 4168 40   
    jne #0046A02C                         ;#00469E53: 017205 D3010000            v  00 00  1 4168      
;  3633             puts(1,"\n")
    mov eax,1                             ;#00469E59: 270 01000000               uv 01 00  1 4169      
    mov edx,[#00402330]                   ;#00469E5E: 213025 30234000            vu 04 00  1 4169      
    call #0045E072 (:%opPuts)             ;#00469E64: 350 0942FFFF               v  00 00  1 4170      
;  3634 --DEV
;  3635 --          #isginfo{crash_msg,0b1001,0,0,integer,0} -- (verify compiler is working properly)
;  3636 --          #isginfo{crash_msg,0b1001,0,0,integer,3} -- (verify compiler is working properly)
;  3637 --          if atom(crash_msg) and fn!=-1 then
;  3638             if fn!=-1 then
    mov eax,[#00402510] (fn)              ;#00469E69: 241 10254000               uv 01 00  1 4171      
    cmp eax,-1                            ;#00469E6E: 203370 FF                  uv 00 01  1 4172 01   
    je #0046A02C                          ;#00469E71: 017204 B5010000            v  00 00  1 4172      
;  3639                 if atom(crashfile) then
    mov edi,[#00402648] (crashfile)       ;#00469E77: 213075 48264000            uv 80 00  1 4173      
    cmp edi,h4                            ;#00469E7D: 201377 00000040            uv 00 80  1 4174 80   
    jl #00469E90                          ;#00469E83: 174 0B                     v  00 00  1 4174      
    cmp byte[ebx+edi*4-1],#12             ;#00469E85: 200174273 FF 12            u  00 88  2 4175      
    jne #00469FF5                         ;#00469E8A: 017205 65010000            v  00 00  1 4176      
;  3640 --                  puts(1,"--> see "&current_dir()&"\\ex.err\n")
;  3641                     printf(1,"--> see %s\n",{join_path({current_dir(),"ex.err"})})
    mov ecx,5                             ;#00469E90: 271 05000000               uv 02 00  1 4177      
    mov edx,192                           ;#00469E95: 272 C0000000               vu 04 00  1 4177      
    call :%opFrame (current_dir)          ;#00469E9A: 350 638DFFFF               v  00 00  1 4178      
    mov [ebp+28] (retaddr),#00469EAB      ;#00469E9F: 307105 1C AB9E4600         uv 00 20  1 4179      
    jmp #00456DCD (code:current_dir)      ;#00469EA6: 351 22CFFEFF               v  00 00  1 4179      
    push eax                              ;#00469EAB: 120                        uv 00 01  1 4180      
    mov ecx,[ebp-192] (symtab[1493])      ;#00469EAC: 213215 40FFFFFF            vu 02 20  1 4180      
    cmp ecx,h4                            ;#00469EB2: 201371 00000040            uv 00 02  1 4181      
    jle #00469EC8                         ;#00469EB8: 176 0E                     v  00 00  1 4181      
    sub dword[ebx+ecx*4-8],1              ;#00469EBA: 203154213 F8 01            u  00 0A  3 4182      
    jne #00469EC8                         ;#00469EBF: 165 07                     v  00 00  1 4184      
    mov edx,ecx                           ;#00469EC1: 213321                     uv 04 02  1 4185      
    call #004639A8 (:%pDealloc)           ;#00469EC3: 350 E09AFFFF               v  00 00  1 4185      
    pop dword[ebp-192] (symtab[1493])     ;#00469EC8: 217205 40FFFFFF            np 00 20  3 4186      
    lea eax,[ebp-304] (symtab[1587])      ;#00469ECE: 215205 D0FEFFFF            uv 01 20  1 4189      
    mov edx,2                             ;#00469ED4: 272 02000000               vu 04 00  1 4189      
    push #00469F0F                        ;#00469ED9: 150 0F9F4600               uv 00 00  1 4190      
    push eax                              ;#00469EDE: 120                        vu 00 01  1 4190      
    mov esi,[#0040294C]                   ;#00469EDF: 213065 4C294000            uv 40 00  1 4191      
    cmp esi,h4                            ;#00469EE5: 201376 00000040            uv 00 40  1 4192 40   
    jl #00469EF7                          ;#00469EEB: 174 0A                     v  00 00  1 4192      
    add dword[ebx+esi*4-8],1              ;#00469EED: 203104263 F8 01            u  00 48  3 4193      
    cmp eax,1560                          ;#00469EF2: 075 18060000               vu 00 01  1 4195      
    push esi                              ;#00469EF7: 126                        uv 00 40  1 4196      
    push dword[ebp-192] (symtab[1493])    ;#00469EF8: 377265 40FFFFFF            np 00 20  2 4197      
    mov [ebp-192] (symtab[1493]),ebx      ;#00469EFE: 211235 40FFFFFF            uv 00 28  1 4199      
    mov edi,[ebp-304] (symtab[1587])      ;#00469F04: 213275 D0FEFFFF            vu 80 20  1 4199      
    jmp #00460143 (:%pMkSq)               ;#00469F0A: 351 3462FFFF               v  00 00  1 4200      
    mov ecx,7                             ;#00469F0F: 271 07000000               uv 02 00  1 4201      
    mov edx,200                           ;#00469F14: 272 C8000000               vu 04 00  1 4201      
    call :%opFrame (join_path)            ;#00469F19: 350 E48CFFFF               v  00 00  1 4202      
    mov edi,[ebp+20] (prevebp)            ;#00469F1E: 213175 14                  uv 80 20  1 4203      
    mov eax,[edi-304]                     ;#00469F21: 213207 D0FEFFFF            uv 01 80  1 4206 80 *80*
    mov [edi-304], dword h4               ;#00469F27: 307207 D0FEFFFF 00000040   vu 00 80  1 4206      
    cmp eax,h4                            ;#00469F31: 075 00000040               uv 00 01  1 4207      
    jne #00469F42                         ;#00469F36: 165 0A                     v  00 00  1 4207      
    mov esi,1587                          ;#00469F38: 276 33060000               uv 40 00  1 4208      
    call #00462744 (:%pUnassigned)        ;#00469F3D: 350 0288FFFF               v  00 00  1 4208      
    mov [ebp] (path_elements),eax         ;#00469F42: 211105 00                  uv 00 21  1 4209      
    mov [ebp+28] (retaddr),#00469F51      ;#00469F45: 307105 1C 519F4600         vu 00 20  1 4209      
    jmp #00455EA5 (code:join_path)        ;#00469F4C: 351 54BFFEFF               v  00 00  1 4210      
    push eax                              ;#00469F51: 120                        uv 00 01  1 4211      
    mov ecx,[ebp-192] (symtab[1493])      ;#00469F52: 213215 40FFFFFF            vu 02 20  1 4211      
    cmp ecx,h4                            ;#00469F58: 201371 00000040            uv 00 02  1 4212      
    jle #00469F6E                         ;#00469F5E: 176 0E                     v  00 00  1 4212      
    sub dword[ebx+ecx*4-8],1              ;#00469F60: 203154213 F8 01            u  00 0A  3 4213      
    jne #00469F6E                         ;#00469F65: 165 07                     v  00 00  1 4215      
    mov edx,ecx                           ;#00469F67: 213321                     uv 04 02  1 4216      
    call #004639A8 (:%pDealloc)           ;#00469F69: 350 3A9AFFFF               v  00 00  1 4216      
    pop dword[ebp-192] (symtab[1493])     ;#00469F6E: 217205 40FFFFFF            np 00 20  3 4217      
    lea eax,[ebp-304] (symtab[1587])      ;#00469F74: 215205 D0FEFFFF            uv 01 20  1 4220      
    mov edx,1                             ;#00469F7A: 272 01000000               vu 04 00  1 4220      
    push #00469F9C                        ;#00469F7F: 150 9C9F4600               uv 00 00  1 4221      
    push eax                              ;#00469F84: 120                        vu 00 01  1 4221      
    push dword[ebp-192] (symtab[1493])    ;#00469F85: 377265 40FFFFFF            np 00 20  2 4222      
    mov [ebp-192] (symtab[1493]),ebx      ;#00469F8B: 211235 40FFFFFF            uv 00 28  1 4224      
    mov edi,[ebp-304] (symtab[1587])      ;#00469F91: 213275 D0FEFFFF            vu 80 20  1 4224      
    jmp #00460143 (:%pMkSq)               ;#00469F97: 351 A761FFFF               v  00 00  1 4225      
    mov ecx,9                             ;#00469F9C: 271 09000000               uv 02 00  1 4226      
    mov edx,400                           ;#00469FA1: 272 90010000               vu 04 00  1 4226      
    call #00462C02 (:%opFrame) (printf)   ;#00469FA6: 350 578CFFFF               v  00 00  1 4227      
    mov [ebp] (fn), dword 1               ;#00469FAB: 307105 00 01000000         uv 00 20  1 4228      
    mov esi,[#00402990]                   ;#00469FB2: 213065 90294000            vu 40 00  1 4228      
    mov [ebp-4] (fmt),esi                 ;#00469FB8: 211165 FC                  uv 00 60  1 4229      
    add dword[ebx+esi*4-8],1              ;#00469FBB: 203104263 F8 01            u  00 48  3 4231    *40*
    mov edi,[ebp+20] (prevebp)            ;#00469FC0: 213175 14                  vu 80 20  1 4233      
    mov eax,[edi-304]                     ;#00469FC3: 213207 D0FEFFFF            uv 01 80  1 4236    *80*
    mov [edi-304], dword h4               ;#00469FC9: 307207 D0FEFFFF 00000040   vu 00 80  1 4236      
    cmp eax,h4                            ;#00469FD3: 075 00000040               uv 00 01  1 4237      
    jne #00469FE4                         ;#00469FD8: 165 0A                     v  00 00  1 4237      
    mov esi,1587                          ;#00469FDA: 276 33060000               uv 40 00  1 4238      
    call #00462744 (:%pUnassigned)        ;#00469FDF: 350 6087FFFF               v  00 00  1 4238      
    mov [ebp-8] (args),eax                ;#00469FE4: 211105 F8                  uv 00 21  1 4239      
    mov [ebp+28] (retaddr),#00469FF3      ;#00469FE7: 307105 1C F39F4600         vu 00 20  1 4239      
    jmp #00444FC4 (code:printf)           ;#00469FEE: 351 D1AFFDFF               v  00 00  1 4240      
;  3642 --              elsif not find(crashfile,{"NUL","/dev/null"}) then
    jmp #0046A02C                         ;#00469FF3: 353 37                     v  00 00  1 4241      
;  3643                 else -- (above not necessary, fn would be -1)
;  3644                     puts(1,"--> see "&crashfile&"\n")
    mov ecx,3                             ;#00469FF5: 271 03000000               uv 02 00  1 4242      
    push #0046A01C                        ;#00469FFA: 150 1CA04600               vu 00 00  1 4242      
    push dword[#00402330]                 ;#00469FFF: 377065 30234000            np 00 00  2 4243      
    push dword[#00402648] (crashfile)     ;#0046A005: 377065 48264000            np 00 00  2 4245      
    push dword[#00402994]                 ;#0046A00B: 377065 94294000            np 00 00  2 4247      
    lea eax,[ebp-220] (symtab[1501])      ;#0046A011: 215205 24FFFFFF            uv 01 20  1 4249      
    jmp #0045FF95 (:%opConcatN)           ;#0046A017: 351 795FFFFF               v  00 00  1 4249      
    mov eax,1                             ;#0046A01C: 270 01000000               uv 01 00  1 4250      
    mov edx,[ebp-220] (symtab[1501])      ;#0046A021: 213225 24FFFFFF            vu 04 20  1 4250      
    call #0045E072 (:%opPuts)             ;#0046A027: 350 4640FFFF               v  00 00  1 4251      
;  3645                 end if
;  3646             end if
;  3647         end if
;  3648 --DEV if interperting, leave this open and have p.exw/main() dump Warnings() to it:
;  3649         if fn!=-1 then
    mov ecx,[#00402510] (fn)              ;#0046A02C: 213015 10254000            uv 02 00  1 4252      
    cmp ecx,-1                            ;#0046A032: 203371 FF                  uv 00 02  1 4253 02   
    je #0046A03E                          ;#0046A035: 164 07                     v  00 00  1 4253      
;  3650             close(fn)
    mov eax,ecx                           ;#0046A037: 211310                     uv 01 02  1 4254      
    call #0045E5B4 (:%opClose)            ;#0046A039: 350 7645FFFF               v  00 00  1 4254      
;  3651         end if
;  3652     end if
;  3653     close(-9)
    mov eax,[#00402998]                   ;#0046A03E: 241 98294000               uv 01 00  1 4255      
    call #0045E5B4 (:%opClose)            ;#0046A043: 350 6C45FFFF               v  00 00  1 4255      
;  3654     if crash_rtn!=-1 then
    mov edi,[#00402664] (crash_rtn)       ;#0046A048: 213075 64264000            uv 80 00  1 4256      
    cmp edi,-1                            ;#0046A04E: 203377 FF                  uv 00 80  1 4257 80   
    je #0046A122                          ;#0046A051: 017204 CB000000            v  00 00  1 4257      
;  3655 --  if 0 then
;  3656         for i=length(crash_rtn) to 1 by -1 do
    lea edi,[ebp-296] (symtab[1583])      ;#0046A057: 215275 D8FEFFFF            uv 80 20  1 4258      
    mov esi,[#00402664] (crash_rtn)       ;#0046A05D: 213065 64264000            vu 40 00  1 4258      
    mov edx,1305                          ;#0046A063: 272 19050000               uv 04 00  1 4259      
    call #0045EFEC (:%opLen)              ;#0046A068: 350 7F4FFFFF               v  00 00  1 4259      
    mov [ebp-212] (i),ecx                 ;#0046A06D: 211215 2CFFFFFF            uv 00 22  1 4260      
    cmp ecx,1                             ;#0046A073: 201371 01000000            vu 00 02  1 4260      
    jl #0046A248                          ;#0046A079: 017214 C9010000            v  00 00  1 4261      
;  3657             if call_func(crash_rtn[i],{0})!=0 then exit end if
    mov edi,[ebp-212] (i)                 ;#0046A07F: 213275 2CFFFFFF            uv 80 20  1 4262      
    lea ecx,[ebp-300] (symtab[1584])      ;#0046A085: 215215 D4FEFFFF            vu 02 20  1 4262      
    mov esi,[#00402664] (crash_rtn)       ;#0046A08B: 213065 64264000            uv 40 00  1 4263      
    mov edx,1305                          ;#0046A091: 272 19050000               vu 04 00  1 4263      
    mov al,0                              ;#0046A096: 260 00                     uv 01 00  1 4264      
    call #00460FE5 (:%pSubse1)            ;#0046A098: 350 486FFFFF               v  00 00  1 4264      
    lea eax,[ebp-304] (symtab[1587])      ;#0046A09D: 215205 D0FEFFFF            uv 01 20  1 4265      
    mov edx,1                             ;#0046A0A3: 272 01000000               vu 04 00  1 4265      
    push #0046A0BB                        ;#0046A0A8: 150 BBA04600               uv 00 00  1 4266      
    push eax                              ;#0046A0AD: 120                        vu 00 01  1 4266      
    push 0                                ;#0046A0AE: 152 00                     uv 00 00  1 4267      
    mov edi,[ebp-304] (symtab[1587])      ;#0046A0B0: 213275 D0FEFFFF            vu 80 20  1 4267      
    jmp #00460143 (:%pMkSq)               ;#0046A0B6: 351 8860FFFF               v  00 00  1 4268      
    lea edi,[ebp-264] (symtab[1562])      ;#0046A0BB: 215275 F8FEFFFF            uv 80 20  1 4269      
    mov eax,[ebp-300] (symtab[1584])      ;#0046A0C1: 213205 D4FEFFFF            vu 01 20  1 4269      
    mov esi,[ebp-304] (symtab[1587])      ;#0046A0C7: 213265 D0FEFFFF            uv 40 20  1 4270      
    call #00462EAE (:%opCallFunc)         ;#0046A0CD: 350 DC8DFFFF               v  00 00  1 4270      
    mov edx,[ebp-304] (symtab[1587])      ;#0046A0D2: 213225 D0FEFFFF            uv 04 20  1 4271      
    cmp edx,h4                            ;#0046A0D8: 201372 00000040            uv 00 04  1 4272 04   
    mov [ebp-304] (symtab[1587]),ebx      ;#0046A0DE: 211235 D0FEFFFF            vu 00 28  1 4272      
    jle #0046A0F2                         ;#0046A0E4: 176 0C                     v  00 00  1 4273      
    sub dword[ebx+edx*4-8],1              ;#0046A0E6: 203154223 F8 01            u  00 0C  3 4274      
    jne #0046A0F2                         ;#0046A0EB: 165 05                     v  00 00  1 4276      
    call #004639A8 (:%pDealloc)           ;#0046A0ED: 350 B698FFFF               v  00 00  1 4277      
    mov ecx,[ebp-264] (symtab[1562])      ;#0046A0F2: 213215 F8FEFFFF            uv 02 20  1 4278      
    cmp ecx,0                             ;#0046A0F8: 203371 00                  uv 00 02  1 4279 02   
    jne #0046A248                         ;#0046A0FB: 017205 47010000            v  00 00  1 4279      
;  3658         end for
    mov edi,[ebp-212] (i)                 ;#0046A101: 213275 2CFFFFFF            uv 80 20  1 4280      
    mov edx,1                             ;#0046A107: 272 01000000               vu 04 00  1 4280      
    add edi,-1                            ;#0046A10C: 203307 FF                  uv 80 80  1 4281      
    cmp edi,edx                           ;#0046A10F: 073372                     uv 00 84  1 4282 80   
    mov [ebp-212] (i),edi                 ;#0046A111: 211275 2CFFFFFF            vu 00 A0  1 4282      
    jge #0046A07F                         ;#0046A117: 017215 62FFFFFF            v  00 00  1 4283      
;  3659 --  end if
    jmp #0046A248                         ;#0046A11D: 351 26010000               v  00 00  1 4284      
;  3660     elsif not batchmode then
    mov eax,[#00402568] (batchmode)       ;#0046A122: 241 68254000               uv 01 00  1 4285      
    test eax,eax                          ;#0046A127: 205300                     uv 00 01  1 4286 01   
    jne #0046A248                         ;#0046A129: 017205 19010000            v  00 00  1 4286      
;  3661 --  if not batchmode then
;  3662 --?batchmode
;  3663         puts(1,"Press Enter...")
    mov eax,1                             ;#0046A12F: 270 01000000               uv 01 00  1 4287      
    mov edx,[#0040299C]                   ;#0046A134: 213025 9C294000            vu 04 00  1 4287      
    call #0045E072 (:%opPuts)             ;#0046A13A: 350 333FFFFF               v  00 00  1 4288      
;  3664         if not find("-nopause",lower(command_line(true))) then
    mov ecx,31                            ;#0046A13F: 271 1F000000               uv 02 00  1 4289      
    mov edx,218                           ;#0046A144: 272 DA000000               vu 04 00  1 4289      
    call :%opFrame (command_line)         ;#0046A149: 350 B48AFFFF               v  00 00  1 4290      
    mov [ebp] (bRaw), dword 1             ;#0046A14E: 307105 00 01000000         uv 00 20  1 4291      
    mov [ebp+28] (retaddr),#0046A161      ;#0046A155: 307105 1C 61A14600         vu 00 20  1 4291      
    jmp #00452F58 (code:command_line)     ;#0046A15C: 351 F78DFEFF               v  00 00  1 4292      
    push eax                              ;#0046A161: 120                        uv 00 01  1 4293      
    mov esi,[ebp-220] (symtab[1501])      ;#0046A162: 213265 24FFFFFF            vu 40 20  1 4293      
    cmp esi,h4                            ;#0046A168: 201376 00000040            uv 00 40  1 4294      
    jle #0046A17E                         ;#0046A16E: 176 0E                     v  00 00  1 4294      
    sub dword[ebx+esi*4-8],1              ;#0046A170: 203154263 F8 01            u  00 48  3 4295      
    jne #0046A17E                         ;#0046A175: 165 07                     v  00 00  1 4297      
    mov edx,esi                           ;#0046A177: 213326                     uv 04 40  1 4298      
    call #004639A8 (:%pDealloc)           ;#0046A179: 350 2A98FFFF               v  00 00  1 4298      
    pop dword[ebp-220] (symtab[1501])     ;#0046A17E: 217205 24FFFFFF            np 00 20  3 4299      
    mov ecx,6                             ;#0046A184: 271 06000000               uv 02 00  1 4302      
    mov edx,282                           ;#0046A189: 272 1A010000               vu 04 00  1 4302      
    call #00462C02 (:%opFrame) (lower)    ;#0046A18E: 350 6F8AFFFF               v  00 00  1 4303      
    mov edi,[ebp+20] (prevebp)            ;#0046A193: 213175 14                  uv 80 20  1 4304      
    mov eax,[edi-220]                     ;#0046A196: 213207 24FFFFFF            uv 01 80  1 4307 80 *80*
    mov [edi-220], dword h4               ;#0046A19C: 307207 24FFFFFF 00000040   vu 00 80  1 4307      
    cmp eax,h4                            ;#0046A1A6: 075 00000040               uv 00 01  1 4308      
    jne #0046A1B7                         ;#0046A1AB: 165 0A                     v  00 00  1 4308      
    mov esi,1501                          ;#0046A1AD: 276 DD050000               uv 40 00  1 4309      
    call #00462744 (:%pUnassigned)        ;#0046A1B2: 350 8D85FFFF               v  00 00  1 4309      
    mov [ebp] (x),eax                     ;#0046A1B7: 211105 00                  uv 00 21  1 4310      
    mov [ebp+28] (retaddr),#0046A1C6      ;#0046A1BA: 307105 1C C6A14600         vu 00 20  1 4310      
    jmp #0044ECDD (code:lower)            ;#0046A1C1: 351 174BFEFF               v  00 00  1 4311      
    push eax                              ;#0046A1C6: 120                        uv 00 01  1 4312      
    mov ecx,[ebp-264] (symtab[1562])      ;#0046A1C7: 213215 F8FEFFFF            vu 02 20  1 4312      
    cmp ecx,h4                            ;#0046A1CD: 201371 00000040            uv 00 02  1 4313      
    jle #0046A1E3                         ;#0046A1D3: 176 0E                     v  00 00  1 4313      
    sub dword[ebx+ecx*4-8],1              ;#0046A1D5: 203154213 F8 01            u  00 0A  3 4314      
    jne #0046A1E3                         ;#0046A1DA: 165 07                     v  00 00  1 4316      
    mov edx,ecx                           ;#0046A1DC: 213321                     uv 04 02  1 4317      
    call #004639A8 (:%pDealloc)           ;#0046A1DE: 350 C597FFFF               v  00 00  1 4317      
    pop dword[ebp-264] (symtab[1562])     ;#0046A1E3: 217205 F8FEFFFF            np 00 20  3 4318      
    mov ecx,8                             ;#0046A1E9: 271 08000000               uv 02 00  1 4321      
    mov edx,110                           ;#0046A1EE: 272 6E000000               vu 04 00  1 4321      
    call #00462C02 (:%opFrame) (find)     ;#0046A1F3: 350 0A8AFFFF               v  00 00  1 4322      
    mov edi,[#004029A0]                   ;#0046A1F8: 213075 A0294000            uv 80 00  1 4323      
    mov [ebp] (needle),edi                ;#0046A1FE: 211175 00                  uv 00 A0  1 4324 80   
    add dword[ebx+edi*4-8],1              ;#0046A201: 203104273 F8 01            u  00 88  3 4326    *80*
    mov edi,[ebp+20] (prevebp)            ;#0046A206: 213175 14                  vu 80 20  1 4328      
    mov eax,[edi-264]                     ;#0046A209: 213207 F8FEFFFF            uv 01 80  1 4331    *80*
    mov [edi-264], dword h4               ;#0046A20F: 307207 F8FEFFFF 00000040   vu 00 80  1 4331      
    cmp eax,h4                            ;#0046A219: 075 00000040               uv 00 01  1 4332      
    jne #0046A22A                         ;#0046A21E: 165 0A                     v  00 00  1 4332      
    mov esi,1562                          ;#0046A220: 276 1A060000               uv 40 00  1 4333      
    call #00462744 (:%pUnassigned)        ;#0046A225: 350 1A85FFFF               v  00 00  1 4333      
    mov [ebp-4] (haystack),eax            ;#0046A22A: 211105 FC                  uv 00 21  1 4334      
    mov [ebp+28] (retaddr),#0046A239      ;#0046A22D: 307105 1C 39A24600         vu 00 20  1 4334      
    jmp #0045AADB (code:find)             ;#0046A234: 351 A208FFFF               v  00 00  1 4335      
    test eax,eax                          ;#0046A239: 205300                     uv 00 01  1 4336      
    jne #0046A248                         ;#0046A23B: 165 0B                     v  00 00  1 4336      
;  3665 --?command_line(true)
;  3666             if wait_key() then end if
    lea edi,[ebp-308] (symtab[1593])      ;#0046A23D: 215275 CCFEFFFF            uv 80 20  1 4337      
    call #0045E4A7 (:%opWaitKey)          ;#0046A243: 350 5F42FFFF               v  00 00  1 4337      
;  3667         end if
;  3668 --      abort(abortcode)
;  3669     end if
;  3670     abort(abortcode)
    mov eax,[ebp-124] (abortcode)         ;#0046A248: 213105 84                  uv 01 20  1 4338      
    call #00462E43 (:%opAbort)            ;#0046A24B: 350 F38BFFFF               v  00 00  1 4338      
;  3671 --?batchmode
;  3672     --
;  3673     -- PS if you're looking for puts(1,"\nPress Enter[, or d for diagnostics]..."),
;  3674     --    it is not in here but in pmsgs.e
;  3675     --
    jmp #00462C8F (:%opRetf)              ;#0046A250: 351 3A8AFFFF               v  00 00  1 4339      
;  3676 end procedure
;  3677 
;  3678 --  return batchmode
;  3679 --end function
;  3680 
;  3681 --/*
;  3682 --atom diagcb
;  3683 --  diagcb = call_back(routine_id("diag"))
;  3684 --#ilASM{lea edi,[diagcb]
;  3685 --     call %opCrshRtn} -- save [edi]
;  3686 --*/
;  3687 
;  3688 --DEV./SUG:
;  3689 --/*
;  3690     #ilASM{ :%opErrf    -- use the called from address in the frame
;  3691                 mov esi,[or_ebp*4+12] (except esi is ep2)
;  3692             :%opErr     -- called from address in esi
;  3693           }
;  3694 --*/
;  3695 
;  3696 
;  3697  -- Low Level Integration
;  3698  ------------------------
;  3699 --
;  3700 --  1) Exceptions (via pFEH.e/:!fehDiag). For :!iDiag see next.
;  3701 --      Exceptions are often preferred for performance reasons, for example:
;  3702 --  --?     cmp esi,h4  -- (not always necessary)
;  3703 --  --?     jl :doInt   --   "    "        "
;  3704 --  --?     je :!iDiag  -- (branch misprediction likely!)
;  3705 --        :!opXXe94vhnbaavesi
;  3706 --          cmp byte[ebx+esi*4-1],#12   -- float
;  3707 --          jcc ???     -- (branch misprediction!!)
;  3708 --      Catching an exception at :!opXXe94vhnbaavesi (when esi==h4 aka unassigned) is 
;  3709 --       obviously faster (by which I mean when no exception/fatal error occurs) than
;  3710 --       always performing a conditional jump that is almost never taken, and in many 
;  3711 --       cases the test that it would otherwise need can also be omitted. Further, on
;  3712 --       some processors with limited branch prediction granularity, having jumps so
;  3713 --       close is something that should be avoided if at all possible. However (OTOH)
;  3714 --       it may need additional setup (eg var no in some other register) that negates 
;  3715 --       any such gains/omissions, in which case direct call may be better. While a
;  3716 --       heavily used opcode such as opMove or opJcc can show significant benefits
;  3717 --       from even a single clock saving, if it is easier on the lesser used opcodes
;  3718 --       to setup regs/era etc, take the hit for maintainability sake and go direct.
;  3719 --      Bang labels (:!) are used so that if a particular source (eg pSubse.e) is not
;  3720 --       loaded, a cmp edx,:!opSubse1ipRe92a just quietly resolves to cmp edx,0.
;  3721 --       Likewise we use :!fehDiag (and :!iDiag) so things will compile cleanly under 
;  3722 --       -nodiag (and resolve to jmp 0, ie continue at next instruction, eg an int3).
;  3723 --      It is up to the programmer to ensure all such label names are unique, with
;  3724 --       the compiler throwing errors for any possible clash (unlike hll globals,
;  3725 --       there is no way to use namespaces, so any clashes are always errors).
;  3726 --      Typically the code below (just above ::alset) converts exception addresses to
;  3727 --      exception codes, and diag() figures out ep1/2/era etc as needed for that code.
;  3728 --      However, just as long as it is consistent, it doesn't matter who does it.
;  3729 --
;  3730 --  2) Direct call (via :!iDiag)
;  3731 --      Other times you may as well just call the error handler directly, eg type
;  3732 --       check errors, divide by zero, badretf, etc. There may even be a small gain
;  3733 --       from test/extra-setup/jmp, over extra-setup/no-test-but-catch-exceptions.
;  3734 --       It is obviously easier to setup regs/era near the point of failure rather
;  3735 --       than in here, hidden amongst possibly hundreds of similar blobs of code.
;  3736 --      As above, diag() has to figure out ep1/2/era etc for that code, hence it is
;  3737 --       generally unwise to mix exception and direct handling for the same number.
;  3738 --       However, it is also perfectly reasonable to apply ad-hoc standards, such 
;  3739 --       as ep1 in or_ecx, ep2 in or_edi in direct/exception logic below, before
;  3740 --       invoking diag(), just as long as that also knows the score, and of course
;  3741 --       any such ad-hoc standards would be entirely exception-code-specific.
;  3742 --      Before invoking :!iDiag the exception code should be stored in al, and the
;  3743 --       effective return address in edx, so obviously move eax/edx to other regs 
;  3744 --       first, if they are going to be needed.
;  3745 --      A call :!iDiag should be followed by int3 to avoid confusion under -nodiag.
;  3746 --       (If you don't use -nodiag you can ignore that, if you do, you want an OS
;  3747 --        level fault rather than stumbling blindly on. Try/catch, if it is ever 
;  3748 --        implemented, will handle things before they get anywhere near here.)
;  3749 --
;  3750 --  3) Testing
;  3751 --      If should go without saying that there is absolutely nowhere else in Phix,
;  3752 --       by quite some margin, that needs such diligent and thorough testing as any
;  3753 --       modifications made here. I know there are hundreds of exception codes, and
;  3754 --       hundreds of bang labels, but they all need long and hard thought as to how
;  3755 --       each and every one of them could ever possibly trigger. Without any doubt,
;  3756 --       some of them will already have been missed, so don't make things worse.
;  3757 --      Anything that needs fixing should also get a new entry in test/terror.exw,
;  3758 --       assuming that completely missed the bug and passed with flying colours.
;  3759 --
;  3760 
;  3761 --DEV initD issues? (spotted in passing)
;  3762 constant a32h4 = #40000000,
;  3763          a64h4 = #4000000000000000
;  3764 
;  3765     #ilASM{ jmp :%opRetf
                    jmp #00462C8F (:%opRetf)  ;#00463D68: 351 22EFFFFF               v  00 00  1   1      
;  3766 
;  3767 --/*
;  3768 procedure :!diagFrame(:%)
;  3769 end procedure -- (for Edita/CtrlQ)
;  3770 --*/
;  3771     :!diagFrame
;  3772 ---------------
;  3773         -- stub provision for pemit2.e, see there for an explanation, which
;  3774         --  will also involve you looking over the :!rbidscb calls above,
;  3775         --  where you will also find the outermost save/restore of [ds+8].
;  3776         [32]
;  3777             mov eax,[ds+8]          -- symtab
                    mov eax,[#00402008]   ;#00463D6D: 213005 08204000            uv 01 00  1   2      
;  3778             mov esi,[eax+84]        -- symtab[T_EBP=22]
                    mov esi,[eax+84]      ;#00463D73: 213160 54                  uv 40 01  1   5 01 *01*
;  3779             test esi,esi
                    test esi,esi          ;#00463D76: 205366                     uv 00 40  1   6 40   
;  3780             jz @f   -- ?? (pemit2.e was setting rbldrqd too early)
                    jz #00463D87          ;#00463D78: 164 0D                     v  00 00  1   6      
;  3781             -- in case it helps, the next two lines should work just as well:
;  3782 --          mov eax,[symtab]
;  3783 --          mov edx,[ebp+eax*4+84]  -- symtab[T_EBP]
;  3784 --          mov eax,[ebx+edx*4]     -- symtab[T_EBP][1] = ebp4
;  3785 --          mov ecx,[ebx+edx*4+4]   -- symtab[T_EBP][2] = esp4
;  3786             mov esi,[ebx+esi*4+8]   -- symtab[T_EBP][3] = pst4
                    mov esi,[ebx+esi*4+8]  ;#00463D7A: 213164263 08               uv 40 48  1   7      
;  3787 --          shl eax,2
;  3788 --          shl ecx,2
;  3789             shl esi,2
                    shl esi,2             ;#00463D7E: 301346 02                  u  40 40  1   8      
;  3790 --          mov ebp,eax             -- restore ebp
;  3791 --          mov esp,ecx             -- restore esp
;  3792             mov [ds+8],esi          -- restore symtabptr
                    mov [#00402008],esi   ;#00463D81: 211065 08204000            uv 00 40  1   9 40   
;  3793           @@:
;  3794             push dword[esp]                         -- (leave the ret addr on stack)
                    push dword[esp]       ;#00463D87: 377064044                  np 00 10  2  10      
;  3795 --          mov [ds+8],eax
;  3796         [64]
;  3797             mov rax,[ds+8]          -- symtab
;  3798             mov rsi,[rax+168]       -- symtab[T_EBP=22]
;  3799             test rsi,rsi
;  3800             jz @f
;  3801             mov rsi,[rbx+rsi*4+16]  -- symtab[T_EBP][3] = pst4
;  3802             shl rsi,2
;  3803             mov [ds+8],rsi          -- restore symtabptr
;  3804           @@:
;  3805             push qword[rsp]                         -- (leave the ret addr on stack)
;  3806 --          mov [ds+8],rax
;  3807         []
;  3808             call :%opFrame
                    call #00462C02 (:%opFrame)  ;#00463D8A: 350 73EEFFFF               v  00 00  1  12      
;  3809             ret
                    ret                   ;#00463D8F: 303                        np 00 00  2  13      
;  3810 
;  3811 
;  3812 --/*
;  3813 procedure :%pCrashMsg(:%)
;  3814 end procedure -- (for Edita/CtrlQ)
;  3815 --*/
;  3816     :%pCrashMsg
;  3817 ---------------
;  3818         -- note there is a separate hll crash() routine,
;  3819         --  see builtins\pCrash.e for details
;  3820         [32]
;  3821             -- calling convention
;  3822             --  mov eax,[msg]       -- (should be a string, opUnassigned)
;  3823             --  call :%pCrashMsg    -- (save eax)
;  3824             mov edx,[crash_msg]
                    mov edx,[#00402564] (crash_msg)  ;#00463D90: 213025 64254000            uv 04 00  1  15      
;  3825             cmp eax,h4
                    cmp eax,h4            ;#00463D96: 075 00000040               vu 00 01  1  15      
;  3826             mov [crash_msg],eax
                    mov [#00402564] (crash_msg),eax  ;#00463D9B: 243 64254000               uv 00 01  1  16      
;  3827             jl @f
                    jl #00463DA7          ;#00463DA0: 174 05                     v  00 00  1  16      
;  3828                 add dword[ebx+eax*4-8],1
                        add dword[ebx+eax*4-8],1  ;#00463DA2: 203104203 F8 01            u  00 09  3  17      
;  3829           @@:
;  3830             cmp edx,h4
                    cmp edx,h4            ;#00463DA7: 201372 00000040            vu 00 04  1  19      
;  3831             jle @f
                    jle #00463DBE         ;#00463DAD: 176 0F                     v  00 00  1  20      
;  3832                 sub dword[ebx+edx*4-8],1
                        sub dword[ebx+edx*4-8],1  ;#00463DAF: 203154223 F8 01            u  00 0C  3  21      
;  3833                 jne @f
                        jne #00463DBE     ;#00463DB4: 165 08                     v  00 00  1  23      
;  3834                 push dword[esp]
                        push dword[esp]   ;#00463DB6: 377064044                  np 00 10  2  24      
;  3835                 call :%pDealloc0
                        call #004639AB (:%pDealloc0)  ;#00463DB9: 350 EDFBFFFF               v  00 00  1  26      
;  3836         [64]
;  3837             -- calling convention
;  3838             --  mov rax,[msg]       -- (opUnassigned)
;  3839             --  call :%pCrashMsg    -- (save eax)
;  3840             mov r15,h4
;  3841             mov rdx,[crash_msg]
;  3842             cmp rax,r15
;  3843             mov [crash_msg],rax
;  3844             jl @f
;  3845                 add qword[rbx+rax*4-16],1
;  3846           @@:
;  3847             cmp rdx,r15
;  3848             jle @f
;  3849                 sub qword[rbx+rdx*4-16],1
;  3850                 jne @f
;  3851                 push qword[rsp]
;  3852                 call :%pDealloc0
;  3853         []
;  3854           @@:
;  3855             ret
                    ret                   ;#00463DBE: 303                        np 00 00  2  27      
;  3856 
;  3857 --DEV dead
;  3858 ----/*
;  3859 --procedure :%pCrash(:%)
;  3860 --end procedure -- (for Edita/CtrlQ)
;  3861 ----*/
;  3862 --  :%pCrash
;  3863 --------------
;  3864 --      -- note there is a separate hll crash(fmt,data={}) routine,
;  3865 --      --  which is not part of the optable.
;  3866 --      [32]
;  3867 --          -- calling convention
;  3868 --          --  mov eax,[msg]           -- (opUnassigned)
;  3869 --          --  call :%pCrash           -- crash(msg)
;  3870 --          add dword[ebx+eax*4-8],1    -- incref
;  3871 --          mov edx,[??]
;  3872 --          mov [crash_msg],eax
;  3873 --          cmp edx,h4
;  3874 --          jle @f
;  3875 --              sub dword[ebx+edx*4-8],1
;  3876 --              jnz @f
;  3877 --              call :%pDealloc
;  3878 --        @@:
;  3879 --      [64]
;  3880 ----DEV
;  3881 ----            cmp eax,h4
;  3882 ----            jl @f
;  3883 ----            cmp dword[ebx+eax*4-12],0
;  3884 ----            je :%pCrash1
;  3885 --      []
;  3886 --          int3
;  3887 --          ret
;  3888 --
;  3889 ----/*
;  3890 --procedure :%pCrash1(:%)
;  3891 --end procedure -- (for Edita/CtrlQ)
;  3892 ----*/
;  3893 --  :%pCrash1   -- dead too
;  3894 ---------------
;  3895 --      [32]
;  3896 --          -- calling convention
;  3897 --          --  mov eax,[fmt]       -- (opUnassigned)
;  3898 --          --  call :%pCrash1      -- crash(eax)
;  3899 ----            call :%pCrashMsg
;  3900 --      []
;  3901 --          int3
;  3902 --          ret
;  3903 
;  3904 --/*
;  3905 procedure :%pCrashFile(:%)
;  3906 end procedure -- (for Edita/CtrlQ)
;  3907 --*/
;  3908     :%pCrashFile
;  3909 ----------------
;  3910         [32]
;  3911             -- calling convention
;  3912             --  mov eax,[file_path] -- (opUnassigned)
;  3913             --  call :%pCrashFile   -- crash_file(eax)
;  3914             mov edx,[crashfile]
                    mov edx,[#00402648] (crashfile)  ;#00463DBF: 213025 48264000            uv 04 00  1  29      
;  3915             cmp eax,h4
                    cmp eax,h4            ;#00463DC5: 075 00000040               vu 00 01  1  29      
;  3916             mov [crashfile],eax
                    mov [#00402648] (crashfile),eax  ;#00463DCA: 243 48264000               uv 00 01  1  30      
;  3917             jl @f
                    jl #00463DD6          ;#00463DCF: 174 05                     v  00 00  1  30      
;  3918                 add dword[ebx+eax*4-8],1
                        add dword[ebx+eax*4-8],1  ;#00463DD1: 203104203 F8 01            u  00 09  3  31      
;  3919           @@:
;  3920             cmp edx,h4
                    cmp edx,h4            ;#00463DD6: 201372 00000040            vu 00 04  1  33      
;  3921             jle @f
                    jle #00463DED         ;#00463DDC: 176 0F                     v  00 00  1  34      
;  3922                 sub dword[ebx+edx*4-8],1
                        sub dword[ebx+edx*4-8],1  ;#00463DDE: 203154223 F8 01            u  00 0C  3  35      
;  3923                 jne @f
                        jne #00463DED     ;#00463DE3: 165 08                     v  00 00  1  37      
;  3924                 push dword[esp]
                        push dword[esp]   ;#00463DE5: 377064044                  np 00 10  2  38      
;  3925                 call :%pDealloc0
                        call #004639AB (:%pDealloc0)  ;#00463DE8: 350 BEFBFFFF               v  00 00  1  40      
;  3926         [64]
;  3927             -- calling convention
;  3928             --  mov rax,[file_path] -- (opUnassigned)
;  3929             --  call :%pCrashFile   -- crash_file(rax)
;  3930             mov r15,h4
;  3931             mov rdx,[crashfile]
;  3932             cmp rax,r15
;  3933             mov [crashfile],rax
;  3934             jl @f
;  3935                 add qword[rbx+rax*4-16],1
;  3936           @@:
;  3937             cmp rdx,r15
;  3938             jle @f
;  3939                 sub qword[rbx+rdx*4-16],1
;  3940                 jne @f
;  3941                 push qword[rsp]
;  3942                 call :%pDealloc0
;  3943         []
;  3944           @@:
;  3945             ret
                    ret                   ;#00463DED: 303                        np 00 00  2  41      
;  3946 
;  3947 --global procedure crash_file(object file_path)
;  3948 ---- Specify a file path name in place of "ex.err" where you want
;  3949 ---- any diagnostic information to be written.
;  3950 ---- May be called multiple times, at the point of a crash the
;  3951 ---- last value passed to this routine is used.
;  3952 ---- A value of "" turns off diagnostics completely.
;  3953 ---- A value of "NUL" or "/dev/null" displays messages to screen
;  3954 ---- but does not create an ex.err file.
;  3955 ---- A value of 0 restores default handling.
;  3956 ---- 
;  3957 --  crashfile = file_path
;  3958 --end procedure
;  3959 
;  3960 --/*
;  3961 procedure :%pCrashRtn(:%)
;  3962 end procedure -- (for Edita/CtrlQ)
;  3963 --*/
;  3964     :%pCrashRtn
;  3965 ---------------
;  3966         [32]
;  3967             -- calling convention
;  3968             --  mov eax,[rid]
;  3969             --  call :%pCrashRtn    -- crash_routine(eax)
;  3970 --DEV
;  3971 --?         push dword[esp]                         -- (leave the ret addr on stack)
;  3972             push eax
                    push eax              ;#00463DEE: 120                        uv 00 01  1  43      
;  3973             mov edx,routine_id(set_crash_routine)   -- mov edx,imm32 (sets K_ridt)
                    mov edx,1306          ;#00463DEF: 272 1A050000               vu 04 00  1  43      
;  3974             mov ecx,$_Ltot                          -- mov ecx,imm32 (=symtab[set_crash_routine][S_Ltot])
                    mov ecx,1             ;#00463DF4: 271 01000000               uv 02 00  1  44      
;  3975             call :%opFrame
                    call :%opFrame (set_crash_routine)  ;#00463DF9: 350 04EEFFFF               v  00 00  1  44      
;  3976 --          call :!diagFrame
;  3977 --          add esp,4
;  3978             pop dword[ebp]                          -- rid
                    pop dword[ebp] (rid)  ;#00463DFE: 217105 00                  np 00 20  3  45      
;  3979 --EXCEPT
;  3980 --          mov dword[ebp+16],:crashrtnret
;  3981             mov dword[ebp+28],:crashrtnret
                    mov [ebp+28] (retaddr),#00463E0D  ;#00463E01: 307105 1C 0D3E4600         uv 00 20  1  48      
;  3982             jmp $_il                                -- jmp code:set_crash_routine
                    jmp code:set_crash_routine  ;#00463E08: 351 F3D2FFFF               v  00 00  1  48      
;  3983         [64]
;  3984 --?         push qword[rsp]                         -- (leave the ret addr on stack)
;  3985             push rax
;  3986             mov rdx,routine_id(set_crash_routine)   -- mov edx,imm32 (sets K_ridt)
;  3987             mov rcx,$_Ltot                          -- mov ecx,imm32 (=symtab[set_crash_routine][S_Ltot])
;  3988             call :%opFrame
;  3989 --          call :!diagFrame
;  3990 --          add rsp,8
;  3991             pop qword[rbp]                          -- rid
;  3992 --EXCEPT
;  3993 --          mov qword[rbp+32],:crashrtnret
;  3994             mov qword[rbp+56],:crashrtnret
;  3995             jmp $_il                                -- jmp code:set_crash_routine
;  3996         []
;  3997           ::crashrtnret
;  3998             ret
                    ret                   ;#00463E0D: 303                        np 00 00  2  49      
;  3999 
;  4000 --global procedure crash_routine(integer rid)
;  4001 --procedure set_crash_routine(integer rid)
;  4002 ---- specify the routine id of a function to call in the event
;  4003 ---- that your program must be shut down due to an error. The
;  4004 ---- function should accept one parameter (currently always 0)
;  4005 ---- and return 0 to allow any other crash routines to run.
;  4006 --  if rid=-1 then
;  4007 --      crash_rtn = -1
;  4008 --  elsif crash_rtn=-1 then
;  4009 --      crash_rtn = {rid}
;  4010 --  else
;  4011 --      crash_rtn = append(crash_rtn,rid)
;  4012 --  end if
;  4013 --end procedure
;  4014 
;  4015 --/*
;  4016 procedure :%pThrow(:%)
;  4017 end procedure -- (for Edita/CtrlQ)
;  4018 --*/
;  4019     :%pThrow
;  4020 --  :!pThrow
;  4021 ------------
;  4022         [32]
;  4023             -- calling convention
;  4024             --  mov eax,[e]         -- opUnassigned
;  4025             --  mov ecx,[user_data] -- (or h4)
;  4026             --  call :%pThrow       -- throw(e,user_data)
;  4027             --  int3
;  4028             cmp eax,h4
                    cmp eax,h4            ;#00463E0E: 075 00000040               uv 00 01  1  51      
;  4029             jl @f
                    jl #00463E1A          ;#00463E13: 174 05                     v  00 00  1  51      
;  4030                 add dword[ebx+eax*4-8],1
                        add dword[ebx+eax*4-8],1  ;#00463E15: 203104203 F8 01            u  00 09  3  52      
;  4031           @@:
;  4032             cmp ecx,h4
                    cmp ecx,h4            ;#00463E1A: 201371 00000040            vu 00 02  1  54      
;  4033             jle @f
                    jle #00463E27         ;#00463E20: 176 05                     v  00 00  1  55      
;  4034                 add dword[ebx+ecx*4-8],1
                        add dword[ebx+ecx*4-8],1  ;#00463E22: 203104213 F8 01            u  00 0A  3  56      
;  4035           @@:
;  4036             push ecx                            -- [1] ref user_data
                    push ecx              ;#00463E27: 121                        vu 00 02  1  58      
;  4037             push eax                            -- [2] ref e
                    push eax              ;#00463E28: 120                        uv 00 01  1  59      
;  4038             mov edx,routine_id(throw)           -- mov edx,imm32 (sets K_ridt)
                    mov edx,1221          ;#00463E29: 272 C5040000               vu 04 00  1  59      
;  4039             mov ecx,$_Ltot                      -- mov ecx,imm32 (=symtab[throw][S_Ltot])
                    mov ecx,14            ;#00463E2E: 271 0E000000               uv 02 00  1  60      
;  4040             call :%opFrame
                    call #00462C02 (:%opFrame) (throw)  ;#00463E33: 350 CAEDFFFF               v  00 00  1  60      
;  4041 --          mov edx,[esp+8]
;  4042             pop dword[ebp]                      -- [2] e
                    pop dword[ebp] (e)    ;#00463E38: 217105 00                  np 00 20  3  61      
;  4043             pop dword[ebp-4]                    -- [1] user_data
                    pop dword[ebp-4] (user_data)  ;#00463E3B: 217105 FC                  np 00 20  3  64      
;  4044 --EXCEPT
;  4045 --          mov dword[ebp+16],:throwret
;  4046 --          mov dword[ebp+28],:throwret         -- return address
;  4047             pop edx
                    pop edx               ;#00463E3E: 132                        uv 04 00  1  67      
;  4048             mov dword[ebp+28],edx               -- return address
                    mov [ebp+28] (retaddr),edx  ;#00463E3F: 211125 1C                  uv 00 24  1  68 04   
;  4049             mov dword[ebp+12],edx               -- called from address
                    mov [ebp+12],edx      ;#00463E42: 211125 0C                  vu 00 24  1  68      
;  4050 --          pop dword[ebp+12]                   -- called from address
;  4051             jmp $_il                            -- jmp code:convert_offset
                    jmp #0046116B (code:throw)  ;#00463E45: 351 21D3FFFF               v  00 00  1  69      
;  4052 --        ::throwret
;  4053 --          pop edi                             --[1] addr res (an integer)
;  4054 --          mov [edi],eax
;  4055         [64]
;  4056             mov r15,h4
;  4057             cmp rax,r15
;  4058             jl @f
;  4059                 add qword[rbx+rax*4-16],1
;  4060           @@:
;  4061             cmp rcx,r15
;  4062             jle @f
;  4063                 add qword[rbx+rcx*4-16],1
;  4064           @@:
;  4065             push rcx                            -- [1] ref user_data
;  4066             push rax                            -- [2] ref e
;  4067             mov rdx,routine_id(throw)           -- mov edx,imm32 (sets K_ridt)
;  4068             mov rcx,$_Ltot                      -- mov ecx,imm32 (=symtab[throw][S_Ltot])
;  4069             call :%opFrame
;  4070 --          mov rdx,[rsp+16]
;  4071             pop qword[rbp]                      -- [2] e
;  4072             pop qword[rbp-8]                    -- [2] user_data
;  4073 --EXCEPT
;  4074 --          mov qword[rbp+32],:throwret         -- return address
;  4075 --          mov qword[rbp+56],:throwret         -- return address
;  4076             pop rdx
;  4077             mov qword[rbp+56],rdx               -- return address
;  4078             mov qword[rbp+24],rdx               -- called from address
;  4079 --          pop qword[rbp+24]                   -- called from address
;  4080             jmp $_il                            -- jmp code:convert_offset
;  4081 --        ::throwret
;  4082 --          pop rdi                             --[1] addr res (an integer)
;  4083 --          mov [rdi],rax
;  4084         []
;  4085 --          ret
;  4086 
;  4087 --DEV DEAD
;  4088 --  --for throw.e: [DEV, needs to be put into the optable]
;  4089 --  --/*
;  4090 --  procedure :%pConvertOffset(:%)
;  4091 --  end procedure -- (for Edita/CtrlQ)
;  4092 --  --*/
;  4093 --  --/*
;  4094 --      :!ConvertOffset
;  4095 --  -------------------
;  4096 --          [32]
;  4097 --              -- calling convention
;  4098 --              --  mov eax,[era]
;  4099 --              --  mov esi,[sr]
;  4100 --              --  lea edi,[lineno]        -- result (integer)
;  4101 --              --  call :%pConvertOffset   -- [edi] := convert_offset(eax,ecx)
;  4102 --              cmp eax,h4
;  4103 --              jl @f
;  4104 --                  add dword[ebx+eax*4-8],1
;  4105 --            @@:
;  4106 --              cmp esi,h4
;  4107 --              jl @f
;  4108 --                  add dword[ebx+esi*4-8],1
;  4109 --            @@:
;  4110 --              push dword[esp]                     -- [0] duplicate return address
;  4111 --              push edi                            -- [1] addr res
;  4112 --              push esi                            -- [2] ref sr
;  4113 --              push eax                            -- [3] ref era
;  4114 --              mov edx,routine_id(convert_offset)  -- mov edx,imm32 (sets K_ridt)
;  4115 --              mov ecx,$_Ltot                      -- mov ecx,imm32 (=symtab[convert_offset][S_Ltot])
;  4116 --              call :%opFrame
;  4117 --              mov edx,[esp+12]
;  4118 --              pop dword[ebp]                      -- [3] era
;  4119 --              pop dword[ebp-4]                    -- [2] sr
;  4120 --  --EXCEPT
;  4121 --X             mov dword[ebp+16],:coret
;  4122 --              mov dword[ebp+28],:coret            -- return address
;  4123 --              mov dword[ebp+12],edx               -- called from address
;  4124 --              jmp $_il                            -- jmp code:convert_offset
;  4125 --            ::coret
;  4126 --              pop edi                             --[1] addr res (an integer)
;  4127 --              mov [edi],eax
;  4128 --          [64]
;  4129 --              mov r15,h4
;  4130 --              cmp rax,r15
;  4131 --              jl @f
;  4132 --                  add qword[rbx+rax*4-16],1
;  4133 --            @@:
;  4134 --              cmp rsi,r15
;  4135 --              jl @f
;  4136 --                  add qword[rbx+rsi*4-16],1
;  4137 --            @@:
;  4138 --              push qword[rsp]                     -- [0] duplicate return address
;  4139 --              push rdi                            -- [1] addr res
;  4140 --              push rsi                            -- [2] ref sr
;  4141 --              push rax                            -- [3] ref era
;  4142 --              mov rdx,routine_id(convert_offset)  -- mov edx,imm32 (sets K_ridt)
;  4143 --              mov rcx,$_Ltot                      -- mov ecx,imm32 (=symtab[convert_offset][S_Ltot])
;  4144 --              call :%opFrame
;  4145 --              mov rdx,[rsp+24]
;  4146 --              pop qword[rbp]                      -- [3] era
;  4147 --              pop qword[rbp-8]                    -- [2] sr
;  4148 --  --EXCEPT
;  4149 --X             mov qword[rbp+32],:coret            -- return address
;  4150 --              mov qword[rbp+56],:coret            -- return address
;  4151 --              mov qword[rbp+24],rdx               -- called from address
;  4152 --              jmp $_il                            -- jmp code:convert_offset
;  4153 --            ::coret
;  4154 --              pop rdi                             --[1] addr res (an integer)
;  4155 --              mov [rdi],rax
;  4156 --          []
;  4157 --              ret
;  4158 --  --*/
;  4159 
;  4160 --/*
;  4161 procedure :!SetBatchMode(:%)
;  4162 end procedure -- (for Edita/CtrlQ)
;  4163 --*/
;  4164     :!SetBatchMode
;  4165         [32]
;  4166             mov eax,[esp]
                    mov eax,[esp]         ;#00463E4A: 213004044                  uv 01 10  1  70      
;  4167             mov [batchmode],1
                    mov [#00402568] (batchmode), dword 1  ;#00463E4D: 307005 68254000 01000000   vu 00 00  1  70      
;  4168             jmp eax
                    jmp eax               ;#00463E57: 377340                     np 00 01  2  71      
;  4169         [64]
;  4170             mov rax,[rsp]
;  4171             mov [batchmode],1
;  4172             jmp rax
;  4173         []
;  4174 
;  4175 --DEV/SUG (in the optable). Do we want called from or era or both?: callfunc:cf, cfunc:era(?), fileio:cf, palloc:cf
;  4176       :!fatalN
;  4177         -- calling convention
;  4178         --  mov ecx,imm32       -- no of frames to pop to obtain an era (>=1)
;  4179         --  mov al,imm          -- error code [1..length(msgs)-1, currently 122]
;  4180         -- (note: 64bit **//can//** use ecx/al above, but needs rdi/rsi below)
;  4181         --  mov edi,ep1         -- [optional] (opUnassigned)
;  4182         --  mov esi,ep2         -- [optional] (opUnassigned) [used for 110/ecx]
;  4183         --  jmp :!fatalN        -- fatalN(level,errcode,ep1,ep2)
;  4184         [32]
;  4185           @@:
;  4186 --X         mov edx,[ebp+16]    -- era
;  4187 --          mov edx,[ebp+28]    -- era
;  4188             mov edx,[ebp+12]    -- called from address
                    mov edx,[ebp+12]      ;#00463E59: 213125 0C                  uv 04 20  1  73      
;  4189             mov ebp,[ebp+20]    -- (nb no local vars after this!)
                    mov ebp,[ebp+20] (prevebp)  ;#00463E5C: 213155 14                  vu 20 20  1  73      
;  4190             sub ecx,1
                    sub ecx,1             ;#00463E5F: 203351 01                  uv 02 02  1  74      
;  4191             jg @b
                    jg #00463E59 (:!fatalN)  ;#00463E62: 177 F5                     v  00 00  1  74      
;  4192             sub edx,1
                    sub edx,1             ;#00463E64: 203352 01                  uv 04 04  1  75      
;  4193             mov ecx,esi
                    mov ecx,esi           ;#00463E67: 213316                     vu 02 40  1  75      
;  4194 --          jmp :!iDiag         -- fatal error (see pdiagN.e)
;  4195 --          int3
;  4196         [64]
;  4197           @@:
;  4198 --X         mov rdx,[rbp+32]    -- era
;  4199 --          mov rdx,[rbp+56]    -- era
;  4200             mov rdx,[rbp+24]    -- called from address
;  4201             mov rbp,[rbp+40]    -- (nb no local vars after this!)
;  4202 --          sub rcx,1
;  4203             sub ecx,1
;  4204             jg @b
;  4205             sub rdx,1
;  4206             mov rcx,rsi
;  4207 --          jmp :!iDiag         -- fatal error (see pdiagN.e)
;  4208 --          int3
;  4209         []
;  4210 
;  4211 --/*
;  4212 procedure :!iDiag(:%)
;  4213 end procedure -- (for Edita/CtrlQ)
;  4214 --*/
;  4215     :!iDiag
;  4216 -----------
;  4217         -- Invoked directly from point of error, al set to msg_id. 
;  4218         -- Instead of ecx,edx being the exception code and address,
;  4219         -- edx contains the era (effective return address), and 
;  4220         -- ep1,ep2 (if used) are error code dependent, but will be 
;  4221         -- in the other registers (so save them all).
;  4222         [32]
;  4223             and eax,#FF         -- error code (1..255)
                    and eax,255           ;#00463E69: 045 FF000000               uv 01 01  1  76      
;  4224             mov [msg_id],eax
                    mov [#00402658] (msg_id),eax  ;#00463E6E: 243 58264000               uv 00 01  1  77 01   
;  4225             mov eax,edi         -- (store edi before we trash it!)
                    mov eax,edi           ;#00463E73: 213307                     vu 01 80  1  77      
;  4226             lea edi,[or_edi]
                    mov edi,#0040261C     ;#00463E75: 277 1C264000               uv 80 00  1  78      
;  4227             call :%pStoreMint   -- [or_edi]:=edi, as float if rqd
                    call #00463978 (:%pStoreMint)  ;#00463E7A: 350 F9FAFFFF               v  00 00  1  78      
;  4228             mov eax,[msg_id]
                    mov eax,[#00402658] (msg_id)  ;#00463E7F: 241 58264000               uv 01 00  1  79      
;  4229             lea edi,[or_eax]
                    mov edi,#00402608     ;#00463E84: 277 08264000               vu 80 00  1  79      
;  4230             call :%pStoreMint   -- [or_eax]:=eax (not useful here)
                    call #00463978 (:%pStoreMint)  ;#00463E89: 350 EAFAFFFF               v  00 00  1  80      
;  4231             mov eax,ecx
                    mov eax,ecx           ;#00463E8E: 213301                     uv 01 02  1  81      
;  4232             lea edi,[or_ecx]
                    mov edi,#0040260C     ;#00463E90: 277 0C264000               vu 80 00  1  81      
;  4233             call :%pStoreMint   -- [or_ecx]:=ecx
                    call #00463978 (:%pStoreMint)  ;#00463E95: 350 DEFAFFFF               v  00 00  1  82      
;  4234             xor eax,eax         -- edx is not available, unless first moved!
                    xor eax,eax           ;#00463E9A: 061300                     uv 01 01  1  83      
;  4235             lea edi,[or_edx]
                    mov edi,#00402614     ;#00463E9C: 277 14264000               vu 80 00  1  83      
;  4236             call :%pStoreMint   -- [or_edx]:=0
                    call #00463978 (:%pStoreMint)  ;#00463EA1: 350 D2FAFFFF               v  00 00  1  84      
;  4237             mov eax,edx         -- era
                    mov eax,edx           ;#00463EA6: 213302                     uv 01 04  1  85      
;  4238             lea edi,[or_era]
                    mov edi,#00402610     ;#00463EA8: 277 10264000               vu 80 00  1  85      
;  4239             call :%pStoreMint   -- [or_era]:=edx
                    call #00463978 (:%pStoreMint)  ;#00463EAD: 350 C6FAFFFF               v  00 00  1  86      
;  4240             mov eax,ebp
                    mov eax,ebp           ;#00463EB2: 213305                     uv 01 20  1  87      
;  4241             shr eax,2
                    shr eax,2             ;#00463EB4: 301350 02                  u  01 01  1  88      
;  4242             mov [or_ebp],eax    -- [or_ebp]:=ebp/4
                    mov [#004025F8] (or_ebp),eax  ;#00463EB7: 243 F8254000               uv 00 01  1  89 01   
;  4243             mov eax,esp
                    mov eax,esp           ;#00463EBC: 213304                     vu 01 10  1  89      
;  4244             lea edi,[or_esp]
                    mov edi,#004025FC     ;#00463EBE: 277 FC254000               uv 80 00  1  90      
;  4245             call :%pStoreMint   -- [or_esp]:=esp
                    call #00463978 (:%pStoreMint)  ;#00463EC3: 350 B0FAFFFF               v  00 00  1  90      
;  4246             mov eax,esi
                    mov eax,esi           ;#00463EC8: 213306                     uv 01 40  1  91      
;  4247             lea edi,[or_esi]
                    mov edi,#00402618     ;#00463ECA: 277 18264000               vu 80 00  1  91      
;  4248             call :%pStoreMint   -- [or_esi]:=esi
                    call #00463978 (:%pStoreMint)  ;#00463ECF: 350 A4FAFFFF               v  00 00  1  92      
;  4249 --?
;  4250             xor eax,eax
                    xor eax,eax           ;#00463ED4: 061300                     uv 01 01  1  93      
;  4251             lea edi,[xceptn]
                    mov edi,#00402600     ;#00463ED6: 277 00264000               vu 80 00  1  93      
;  4252             call :%pStoreMint   -- [xceptn]:=0
                    call #00463978 (:%pStoreMint)  ;#00463EDB: 350 98FAFFFF               v  00 00  1  94      
;  4253             lea edi,[xcepta]
                    mov edi,#00402604     ;#00463EE0: 277 04264000               uv 80 00  1  95      
;  4254             call :%pStoreMint   -- [xcepta]:=0
                    call #00463978 (:%pStoreMint)  ;#00463EE5: 350 8EFAFFFF               v  00 00  1  95      
;  4255         [64]
;  4256             and rax,#FF         -- error code (1..255)
;  4257             mov [msg_id],rax
;  4258             mov rax,rdi         -- (store rdi before we trash it!)
;  4259             lea rdi,[or_edi]
;  4260             call :%pStoreMint   -- [or_edi]:=rdi, as float if rqd
;  4261             mov rax,[msg_id]
;  4262             lea rdi,[or_eax]
;  4263             call :%pStoreMint   -- [or_eax]:=rax (not useful here)
;  4264             mov rax,rcx
;  4265             lea rdi,[or_ecx]
;  4266             call :%pStoreMint   -- [or_ecx]:=rcx
;  4267             xor rax,rax         -- rdx is not available, unless first moved!
;  4268             lea rdi,[or_edx]
;  4269             call :%pStoreMint   -- [or_edx]:=0
;  4270             mov rax,rdx         -- era
;  4271             lea rdi,[or_era]
;  4272             call :%pStoreMint   -- [or_era]:=rdx
;  4273             mov rax,rbp
;  4274             shr rax,2
;  4275             mov [or_ebp],rax    -- [or_ebp]:=rbp/4
;  4276             mov rax,rsp
;  4277             lea rdi,[or_esp]
;  4278             call :%pStoreMint   -- [or_esp]:=rsp
;  4279             mov rax,rsi
;  4280             lea rdi,[or_esi]
;  4281             call :%pStoreMint   -- [or_esi]:=rsi
;  4282 --?
;  4283             xor rax,rax
;  4284             lea rdi,[xceptn]
;  4285             call :%pStoreMint   -- [xceptn]:=0
;  4286             lea rdi,[xcepta]
;  4287             call :%pStoreMint   -- [xcepta]:=0
;  4288         []
;  4289             cmp [diaglooping],0
                    cmp dword[#0040264C] (diaglooping),0  ;#00463EEA: 203075 4C264000 00         u  00 00  2  96      
;  4290             je @f
                    je #004642DE          ;#00463EF1: 017204 E7030000            v  00 00  1  97      
;  4291                 [32]
;  4292                     mov edi,[ecode]             -- "diag looping, error code is "
                            mov edi,[#00402650] (ecode)  ;#00463EF7: 213075 50264000            uv 80 00  1  98      
;  4293                     call :%puts1
                            call #004627FE (:%puts1)  ;#00463EFD: 350 FCE8FFFF               v  00 00  1  98      
;  4294                     mov edx,[msg_id]
                            mov edx,[#00402658] (msg_id)  ;#00463F02: 213025 58264000            uv 04 00  1  99      
;  4295                     push 0
                            push 0        ;#00463F08: 152 00                     vu 00 00  1  99      
;  4296 --                  call :%puthex32a
;  4297                     call :%putsint
                            call #004628D1 (:%putsint)  ;#00463F0A: 350 C2E9FFFF               v  00 00  1 100      
;  4298                     mov edi,[erais]             -- ", erais #"
                            mov edi,[#00402654] (erais)  ;#00463F0F: 213075 54264000            uv 80 00  1 101      
;  4299                     call :%puts1
                            call #004627FE (:%puts1)  ;#00463F15: 350 E4E8FFFF               v  00 00  1 101      
;  4300                     mov edx,[or_era]
                            mov edx,[#00402610] (or_era)  ;#00463F1A: 213025 10264000            uv 04 00  1 102      
;  4301                     push 1
                            push 1        ;#00463F20: 152 01                     vu 00 00  1 102      
;  4302                     call :%puthex32
                            call #0046283B (:%puthex32)  ;#00463F22: 350 14E9FFFF               v  00 00  1 103      
;  4303                     mov eax,1
                            mov eax,1     ;#00463F27: 270 01000000               uv 01 00  1 104      
;  4304                 [64]
;  4305                     mov rdi,[ecode]             -- "diag looping, error code is "
;  4306                     call :%puts1
;  4307                     mov rdx,[msg_id]
;  4308                     push 0
;  4309 --                  call :%puthex32a
;  4310                     call :%putsint
;  4311                     mov rdi,[erais]             -- ", erais #"
;  4312                     call :%puts1
;  4313                     mov rdx,[or_era]
;  4314                     push 1
;  4315                     call :%puthex32
;  4316                     mov rax,1
;  4317                 []
;  4318 --                  add [diaglooping],1
;  4319 --                  cmp [diaglooping],2
;  4320                     mov ecx,[diaglooping]
                            mov ecx,[#0040264C] (diaglooping)  ;#00463F2C: 213015 4C264000            vu 02 00  1 104      
;  4321                     add ecx,1
                            add ecx,1     ;#00463F32: 203301 01                  uv 02 02  1 105      
;  4322                     mov [diaglooping],ecx
                            mov [#0040264C] (diaglooping),ecx  ;#00463F35: 211015 4C264000            uv 00 02  1 106 02   
;  4323                     cmp ecx,2
                            cmp ecx,2     ;#00463F3B: 203371 02                  vu 00 02  1 106      
;  4324                     je @f
                            je #004642DE  ;#00463F3E: 017204 9A030000            v  00 00  1 107      
;  4325                         jmp :%opAbort
                                jmp #00462E43 (:%opAbort)  ;#00463F44: 351 FAEEFFFF               v  00 00  1 108      
;  4326           @@:               
;  4327             jmp :alset
                    jmp #004642DE         ;#00463F49: 351 90030000               v  00 00  1 109      
;  4328 
;  4329 
;  4330     ::DiagLooping -- (because jne does not support memory operand)
;  4331         [32]
;  4332             jmp dword[esp]
                    jmp dword[esp]        ;#00463F4E: 377044044                  np 00 10  2 110      
;  4333         [64]
;  4334             jmp qword[rsp]
;  4335         []
;  4336 
;  4337 --/*
;  4338 procedure :!fehDiag(:%)
;  4339 end procedure -- (for Edita/CtrlQ)
;  4340 --*/
;  4341     :!fehDiag
;  4342 ----------
;  4343             -- from pFEH.e (and nowhere else), msg_id not yet known
;  4344             -- Aside: the context record offsets really belong in pFEH.e, but
;  4345             --        the (local hll variables) or_ecx, etc belong in here.
;  4346             cmp [diaglooping],2
                    cmp dword[#0040264C] (diaglooping),2  ;#00463F51: 203075 4C264000 02         u  00 00  2 112      
;  4347             jge :DiagLooping
                    jge #00463F4E         ;#00463F58: 175 F4                     v  00 00  1 113      
;  4348         [PE32]
;  4349             --  esi is context record (an annoted copy can be found in pFEH.e)
;  4350             --  edx is exception address
;  4351             --  ecx is exception code
;  4352             -- (ebp already reset, and ebx zeroed)
;  4353             mov eax,ecx         -- exception code
                    mov eax,ecx           ;#00463F5A: 213301                     uv 01 02  1 114      
;  4354             lea edi,[xceptn]
                    mov edi,#00402600     ;#00463F5C: 277 00264000               vu 80 00  1 114      
;  4355             call :%pStoreMint
                    call #00463978 (:%pStoreMint)  ;#00463F61: 350 12FAFFFF               v  00 00  1 115      
;  4356             mov eax,edx         -- exception address
                    mov eax,edx           ;#00463F66: 213302                     uv 01 04  1 116      
;  4357             lea edi,[xcepta]
                    mov edi,#00402604     ;#00463F68: 277 04264000               vu 80 00  1 116      
;  4358             call :%pStoreMint
                    call #00463978 (:%pStoreMint)  ;#00463F6D: 350 06FAFFFF               v  00 00  1 117      
;  4359             lea edi,[or_era]    -- (may get replaced)
                    mov edi,#00402610     ;#00463F72: 277 10264000               uv 80 00  1 118      
;  4360             call :%pStoreMint
                    call #00463978 (:%pStoreMint)  ;#00463F77: 350 FCF9FFFF               v  00 00  1 118      
;  4361             mov eax,[esi+176]   -- eax
                    mov eax,[esi+176]     ;#00463F7C: 213206 B0000000            uv 01 40  1 119      
;  4362             lea edi,[or_eax]
                    mov edi,#00402608     ;#00463F82: 277 08264000               vu 80 00  1 119      
;  4363             call :%pStoreMint
                    call #00463978 (:%pStoreMint)  ;#00463F87: 350 ECF9FFFF               v  00 00  1 120      
;  4364             mov eax,[esi+172]   -- ecx
                    mov eax,[esi+172]     ;#00463F8C: 213206 AC000000            uv 01 40  1 121      
;  4365             lea edi,[or_ecx]
                    mov edi,#0040260C     ;#00463F92: 277 0C264000               vu 80 00  1 121      
;  4366             call :%pStoreMint
                    call #00463978 (:%pStoreMint)  ;#00463F97: 350 DCF9FFFF               v  00 00  1 122      
;  4367             mov eax,[esi+168]   -- edx
                    mov eax,[esi+168]     ;#00463F9C: 213206 A8000000            uv 01 40  1 123      
;  4368             lea edi,[or_edx]
                    mov edi,#00402614     ;#00463FA2: 277 14264000               vu 80 00  1 123      
;  4369             call :%pStoreMint
                    call #00463978 (:%pStoreMint)  ;#00463FA7: 350 CCF9FFFF               v  00 00  1 124      
;  4370             mov eax,[esi+156]   -- edi
                    mov eax,[esi+156]     ;#00463FAC: 213206 9C000000            uv 01 40  1 125      
;  4371             lea edi,[or_edi]
                    mov edi,#0040261C     ;#00463FB2: 277 1C264000               vu 80 00  1 125      
;  4372             call :%pStoreMint
                    call #00463978 (:%pStoreMint)  ;#00463FB7: 350 BCF9FFFF               v  00 00  1 126      
;  4373             mov eax,[esi+180]   -- ebp
                    mov eax,[esi+180]     ;#00463FBC: 213206 B4000000            uv 01 40  1 127      
;  4374             shr eax,2
                    shr eax,2             ;#00463FC2: 301350 02                  u  01 01  1 128      
;  4375             mov [or_ebp],eax
                    mov [#004025F8] (or_ebp),eax  ;#00463FC5: 243 F8254000               uv 00 01  1 129 01   
;  4376             mov eax,[esi+196]   -- esp
                    mov eax,[esi+196]     ;#00463FCA: 213206 C4000000            vu 01 40  1 129      
;  4377             lea edi,[or_esp]
                    mov edi,#004025FC     ;#00463FD0: 277 FC254000               uv 80 00  1 130      
;  4378             call :%pStoreMint
                    call #00463978 (:%pStoreMint)  ;#00463FD5: 350 9EF9FFFF               v  00 00  1 130      
;  4379             mov eax,[esi+160]   -- esi
                    mov eax,[esi+160]     ;#00463FDA: 213206 A0000000            uv 01 40  1 131      
;  4380             lea edi,[or_esi]
                    mov edi,#00402618     ;#00463FE0: 277 18264000               vu 80 00  1 131      
;  4381             call :%pStoreMint
                    call #00463978 (:%pStoreMint)  ;#00463FE5: 350 8EF9FFFF               v  00 00  1 132      
;  4382 --156 or_edi            dd ?
;  4383 --160 or_esi            dd ?
;  4384 --164 or_ebx            dd ?
;  4385 --168 or_edx            dd ?
;  4386 --172 or_ecx            dd ?
;  4387 --176 or_eax            dd ?
;  4388 --180 or_ebp            dd ?
;  4389 --184 or_eip            dd ?
;  4390 --196 or_esp            dd ?
;  4391 --          mov esp,[esi+196]   -- (restore) [already done in pFEH.e]
;  4392 --          mov ebp,[esi+180]   -- (restore) [already done in pFEH.e]
;  4393             xor eax,eax
                    xor eax,eax           ;#00463FEA: 061300                     uv 01 01  1 133      
;  4394         [PE64]
;  4395             --  rsi is context record (an annoted copy can be found in pFEH.e)
;  4396             --  rdx is exception address
;  4397             --  rcx is exception code
;  4398             -- (rbp already reset, and rbx zeroed)
;  4399             mov rax,rcx         -- exception code
;  4400             lea rdi,[xceptn]
;  4401             call :%pStoreMint
;  4402             mov rax,rdx         -- exception address
;  4403             lea rdi,[xcepta]
;  4404             call :%pStoreMint
;  4405             lea rdi,[or_era]    -- (may get replaced)
;  4406             call :%pStoreMint
;  4407             mov rax,[rsi+120]   -- rax
;  4408             lea rdi,[or_eax]
;  4409             call :%pStoreMint
;  4410             mov rax,[rsi+128]   -- rcx
;  4411             lea rdi,[or_ecx]
;  4412             call :%pStoreMint
;  4413             mov rax,[rsi+136]   -- rdx
;  4414             lea rdi,[or_edx]
;  4415             call :%pStoreMint
;  4416 --/*
;  4417 120 DWORD64 Rax;
;  4418 128 DWORD64 Rcx;
;  4419 136 DWORD64 Rdx;
;  4420 144 DWORD64 Rbx;
;  4421 152 DWORD64 Rsp;
;  4422 160 DWORD64 Rbp;
;  4423 168 DWORD64 Rsi;
;  4424 176 DWORD64 Rdi;
;  4425 184 DWORD64 R8;
;  4426 192 DWORD64 R9;
;  4427 200 DWORD64 R10;
;  4428 208 DWORD64 R11;
;  4429 216 DWORD64 R12;
;  4430 224 DWORD64 R13;
;  4431 232 DWORD64 R14;
;  4432 240 DWORD64 R15;
;  4433 248 DWORD64 Rip;
;  4434 --*/
;  4435             mov rax,[rsi+176]   -- rdi
;  4436             lea rdi,[or_edi]
;  4437             call :%pStoreMint
;  4438             mov rax,[rsi+160]   -- rbp
;  4439             shr rax,2
;  4440             mov [or_ebp],rax
;  4441             mov rax,[rsi+152]   -- rsp
;  4442             lea rdi,[or_esp]
;  4443             call :%pStoreMint
;  4444             mov rax,[rsi+168]   -- rsi
;  4445             lea rdi,[or_esi]
;  4446             call :%pStoreMint
;  4447 --          mov rsp,[rsi+152]   -- (already done in pFEH.e)
;  4448 --          mov rbp,[rsi+160]   -- (already done in pFEH.e)
;  4449             xor rax,rax
;  4450             mov r15,h4
;  4451         [ELF32]
;  4452             --  esi is context record (an annoted copy can be found in pFEH.e)
;  4453             --  edx is exception address
;  4454 --          --  ecx is exception code (would always be SIGSEGV)
;  4455             -- (ebp already reset, and ebx zeroed)
;  4456 --          mov eax,ecx         -- exception code
;  4457             xor eax,eax
;  4458             lea edi,[xceptn]
;  4459             call :%pStoreMint
;  4460             mov eax,edx         -- exception address
;  4461             lea edi,[xcepta]
;  4462             call :%pStoreMint
;  4463             lea edi,[or_era]    -- (may get replaced)
;  4464             call :%pStoreMint
;  4465             mov eax,[esi+64]    -- eax
;  4466             lea edi,[or_eax]
;  4467             call :%pStoreMint
;  4468             mov eax,[esi+60]    -- ecx
;  4469             lea edi,[or_ecx]
;  4470             call :%pStoreMint
;  4471             mov eax,[esi+56]    -- edx
;  4472             lea edi,[or_edx]
;  4473             call :%pStoreMint
;  4474             mov eax,[esi+36]    -- edi
;  4475             lea edi,[or_edi]
;  4476             call :%pStoreMint
;  4477             mov eax,[esi+44]    -- ebp
;  4478             shr eax,2
;  4479             mov [or_ebp],eax
;  4480             mov eax,[esi+48]    -- esp
;  4481             lea edi,[or_esp]
;  4482             call :%pStoreMint
;  4483             mov eax,[esi+40]    -- esi
;  4484             lea edi,[or_esi]
;  4485             call :%pStoreMint
;  4486 --      .edi           rd 1     ;36
;  4487 --      .esi           rd 1     ;40
;  4488 --      .ebp           rd 1     ;44
;  4489 --      .esp           rd 1     ;48
;  4490 --      .ebx           rd 1     ;52
;  4491 --      .edx           rd 1     ;56
;  4492 --      .ecx           rd 1     ;60
;  4493 --      .eax           rd 1     ;64
;  4494 --      .trapno        rd 1     ;68
;  4495 --      .err           rd 1     ;72
;  4496 --      .eip           rd 1     ;76 (correct)
;  4497 --      .cs            rw 1     ;80
;  4498 --      .__csh         rw 1     ;82
;  4499 --      .eflags        rd 1     ;84
;  4500 --      .esp_at_signal rd 1     ;88
;  4501             xor eax,eax
;  4502 --          pop al
;  4503         [ELF64]
;  4504             --  rsi is context record (an annoted copy can be found in pFEH.e)
;  4505             --  rdx is exception address
;  4506 --          --  rcx is exception code (would always be SIGSEGV)
;  4507             -- (rbp already reset, and rbx zeroed)
;  4508 --          mov rax,rcx         -- exception code
;  4509             xor rax,rax
;  4510             lea rdi,[xceptn]
;  4511             call :%pStoreMint
;  4512             mov rax,rdx         -- exception address
;  4513             lea rdi,[xcepta]
;  4514             call :%pStoreMint
;  4515             lea rdi,[or_era]    -- (may get replaced)
;  4516             call :%pStoreMint
;  4517 
;  4518             mov rax,[rsi+0x90]  -- rax
;  4519             lea rdi,[or_eax]
;  4520             call :%pStoreMint
;  4521             mov rax,[rsi+0x98]  -- rcx
;  4522             lea rdi,[or_ecx]
;  4523             call :%pStoreMint
;  4524             mov rax,[rsi+0x88]  -- rdx
;  4525             lea rdi,[or_edx]
;  4526             call :%pStoreMint
;  4527             mov rax,[rsi+0x68]  -- rdi
;  4528             lea rdi,[or_edi]
;  4529             call :%pStoreMint
;  4530             mov rax,[rsi+0x78]  -- rbp
;  4531             shr rax,2
;  4532             mov [or_ebp],rax
;  4533             mov rax,[rsi+0xA0]  -- rsp
;  4534             lea rdi,[or_esp]
;  4535             call :%pStoreMint
;  4536             mov rax,[rsi+0x70]  -- rsi
;  4537             lea rdi,[or_esi]
;  4538             call :%pStoreMint
;  4539 --          mov rsp,[rsi+0xA0]  -- (already done in pFEH.e)
;  4540 --          mov rbp,[rsi+0x78]  -- (already done in pFEH.e)
;  4541             xor rax,rax
;  4542             mov r15,h4
;  4543         []
;  4544 
;  4545 --/*
;  4546 procedure AddressMapping()
;  4547 end procedure -- (for Edita/CtrlQ)
;  4548 --*/
;  4549  -- Address Mapping
;  4550  ------------------
;  4551             -- (all label addresses are expected to be <1G)
;  4552             -- (DEV factor out common code once it all works,
;  4553             --      and once terror.exw is up and running.)
;  4554             mov al,1
                    mov al,1              ;#00463FEC: 260 01                     uv 01 00  1 134 01   
;  4555 --          mov al,2    -- now via :!iDiag
;  4556 --          cmp edx,:%e02atdb0
;  4557 --          je :alset
;  4558             cmp edx,:!Jccp2Intp3Ref
                    cmp edx,#0045F8FE     ;#00463FEE: 201372 FEF84500            vu 00 04  1 134      
;  4559             jne @f
                    jne #0046400E         ;#00463FF4: 165 18                     v  00 00  1 135      
;  4560               [32]
;  4561                 mov eax,[esp+4]
                        mov eax,[esp+4]   ;#00463FF6: 213104044 04               uv 01 10  1 136      
;  4562                 lea edi,[or_era]
                        mov edi,#00402610  ;#00463FFA: 277 10264000               vu 80 00  1 136      
;  4563                 sub eax,1
                        sub eax,1         ;#00463FFF: 203350 01                  uv 01 01  1 137      
;  4564               [64]
;  4565                 mov rax,[rsp+8]
;  4566                 lea rdi,[or_era]
;  4567                 sub rax,1
;  4568               []
;  4569                 call :%pStoreMint
                        call #00463978 (:%pStoreMint)  ;#00464002: 350 71F9FFFF               v  00 00  1 137      
;  4570                 mov al,92           -- e92vhnbaav(esi)
                        mov al,92         ;#00464007: 260 5C                     uv 01 00  1 138      
;  4571                 jmp :setal
                        jmp #004642D4     ;#00464009: 351 C6020000               v  00 00  1 138      
;  4572           @@:
;  4573             cmp edx,:!opXore92a
                    cmp edx,#0045F045     ;#0046400E: 201372 45F04500            uv 00 04  1 139      
;  4574             jne @f
                    jne #0046402E         ;#00464014: 165 18                     v  00 00  1 139      
;  4575               [32]
;  4576                 mov eax,[esp+4]
                        mov eax,[esp+4]   ;#00464016: 213104044 04               uv 01 10  1 140      
;  4577                 lea edi,[or_era]
                        mov edi,#00402610  ;#0046401A: 277 10264000               vu 80 00  1 140      
;  4578                 sub eax,1
                        sub eax,1         ;#0046401F: 203350 01                  uv 01 01  1 141      
;  4579               [64]
;  4580                 mov rax,[rsp+8]
;  4581                 lea rdi,[or_era]
;  4582                 sub rax,1
;  4583               []
;  4584                 call :%pStoreMint
                        call #00463978 (:%pStoreMint)  ;#00464022: 350 51F9FFFF               v  00 00  1 141      
;  4585                 mov al,91           -- e91vhnbaav(ecx) (ecx is var no)
                        mov al,91         ;#00464027: 260 5B                     uv 01 00  1 142      
;  4586                 jmp :setal
                        jmp #004642D4     ;#00464029: 351 A6020000               v  00 00  1 142      
;  4587           @@:
;  4588             cmp edx,:%opPpndSA
                    cmp edx,#0045FA07     ;#0046402E: 201372 07FA4500            uv 00 04  1 143      
;  4589             jne @f
                    jne #0046404E         ;#00464034: 165 18                     v  00 00  1 143      
;  4590               [32]
;  4591                 mov eax,[esp+20]
                        mov eax,[esp+20]  ;#00464036: 213104044 14               uv 01 10  1 144      
;  4592                 lea edi,[or_era]
                        mov edi,#00402610  ;#0046403A: 277 10264000               vu 80 00  1 144      
;  4593                 sub eax,1
                        sub eax,1         ;#0046403F: 203350 01                  uv 01 01  1 145      
;  4594               [64]
;  4595                 mov rax,[rsp+40]
;  4596                 lea rdi,[or_era]
;  4597                 sub rax,1
;  4598               []
;  4599                 call :%pStoreMint
                        call #00463978 (:%pStoreMint)  ;#00464042: 350 31F9FFFF               v  00 00  1 145      
;  4600                 mov al,93           -- e93vhnbaav(edi) (edi is var no)
                        mov al,93         ;#00464047: 260 5D                     uv 01 00  1 146      
;  4601                 jmp :setal
                        jmp #004642D4     ;#00464049: 351 86020000               v  00 00  1 146      
;  4602           @@:
;  4603 
;  4604             cmp edx,:!opLene36or92
                    cmp edx,#0045F004     ;#0046404E: 201372 04F04500            uv 00 04  1 147      
;  4605             jne @f
                    jne #00464087         ;#00464054: 165 31                     v  00 00  1 147      
;  4606               [32]
;  4607                 mov edi,[a32h4]
                        mov edi,[#00402890] (a32h4)  ;#00464056: 213075 90284000            uv 80 00  1 148      
;  4608                 mov eax,[or_esi]
                        mov eax,[#00402618] (or_esi)  ;#0046405C: 241 18264000               vu 01 00  1 148      
;  4609               [64]
;  4610                 mov rdi,[a64h4]
;  4611                 mov rax,[or_esi]
;  4612               []
;  4613                 call :%opJccE
                        call #0045F91F (:%opJccE)  ;#00464061: 350 B9B8FFFF               v  00 00  1 149      
;  4614                 je :e94vhnbaavedx
                        je #00464110      ;#00464066: 017204 A4000000            v  00 00  1 150      
;  4615               [32]
;  4616                 mov eax,[esp+4]
                        mov eax,[esp+4]   ;#0046406C: 213104044 04               uv 01 10  1 151      
;  4617                 lea edi,[or_era]
                        mov edi,#00402610  ;#00464070: 277 10264000               vu 80 00  1 151      
;  4618                 sub eax,1
                        sub eax,1         ;#00464075: 203350 01                  uv 01 01  1 152      
;  4619                 add esp,8
                        add esp,8         ;#00464078: 203304 08                  vu 10 10  1 152      
;  4620               [64]
;  4621                 mov rax,[rsp+8]
;  4622                 lea rdi,[or_era]
;  4623                 sub rax,1
;  4624                 add rsp,16
;  4625               []
;  4626                 call :%pStoreMint
                        call #00463978 (:%pStoreMint)  ;#0046407B: 350 F8F8FFFF               v  00 00  1 153      
;  4627                 mov al,36           -- e36loaaind
                        mov al,36         ;#00464080: 260 24                     uv 01 00  1 154      
;  4628                 jmp :setal
                        jmp #004642D4     ;#00464082: 351 4D020000               v  00 00  1 154      
;  4629           @@:
;  4630             cmp edx,:!pSubsse94
                    cmp edx,#00460A76     ;#00464087: 201372 760A4600            uv 00 04  1 155      
;  4631             jne @f
                    jne #0046409B         ;#0046408D: 165 0C                     v  00 00  1 155      
;  4632               [32]
;  4633                 mov ecx,[or_ecx]
                        mov ecx,[#0040260C] (or_ecx)  ;#0046408F: 213015 0C264000            uv 02 00  1 156      
;  4634                 lea esp,[esp+ecx*4+4]
                        lea esp,[esp+ecx*4+4]  ;#00464095: 215144214 04               uv 10 12  1 159 02 *02*
;  4635               [64]
;  4636                 mov rcx,[or_ecx]
;  4637                 lea rsp,[rsp+rcx*8*8]
;  4638               []
;  4639                 jmp :e94vhnbaavedx
                        jmp #00464110     ;#00464099: 353 75                     v  00 00  1 159      
;  4640           @@:
;  4641             cmp edx,:!opSubse1e04or92
                    cmp edx,#00460FE8     ;#0046409B: 201372 E80F4600            uv 00 04  1 160      
;  4642             je :e94_or_e04
                    je #004640E3          ;#004640A1: 164 40                     v  00 00  1 160      
;  4643             cmp edx,:!opSubse1ipRe92a
                    cmp edx,#004610B8     ;#004640A3: 201372 B8104600            uv 00 04  1 161      
;  4644             je :e94vhnbaavedx
                    je #00464110          ;#004640A9: 164 65                     v  00 00  1 161      
;  4645             cmp edx,:!Jccp2NotInt
                    cmp edx,#0045F8CA     ;#004640AB: 201372 CAF84500            uv 00 04  1 162      
;  4646             je :e94vhnbaavedx
                    je #00464110          ;#004640B1: 164 5D                     v  00 00  1 162      
;  4647 --6/9/21 does not appear to be working:
;  4648             cmp edx,:!Jife92
                    cmp edx,#0045F957     ;#004640B3: 201372 57F94500            uv 00 04  1 163      
;  4649             je :e94vhnbaavedx
                    je #00464110          ;#004640B9: 164 55                     v  00 00  1 163      
;  4650             cmp edx,:!opJnotxe92a
                    cmp edx,#0045BDB8     ;#004640BB: 201372 B8BD4500            uv 00 04  1 164      
;  4651             je :e94vhnbaavedx
                    je #00464110          ;#004640C1: 164 4D                     v  00 00  1 164      
;  4652             cmp edx,:!opXore92b
                    cmp edx,#0045F06D     ;#004640C3: 201372 6DF04500            uv 00 04  1 165      
;  4653             je :e94vhnbaavedx
                    je #00464110          ;#004640C9: 164 45                     v  00 00  1 165      
;  4654             cmp edx,:%pSubsss
                    cmp edx,#00460C83     ;#004640CB: 201372 830C4600            uv 00 04  1 166      
;  4655             je :e94vhnbaavedx
                    je #00464110          ;#004640D1: 164 3D                     v  00 00  1 166      
;  4656             cmp edx,:!opSubse1iRe92a
                    cmp edx,#0046106E     ;#004640D3: 201372 6E104600            uv 00 04  1 167      
;  4657             je :e94_or_e04
                    je #004640E3          ;#004640D9: 164 08                     v  00 00  1 167      
;  4658             cmp edx,:!opSubse1isRe92a
                    cmp edx,#004610D3     ;#004640DB: 201372 D3104600            uv 00 04  1 168      
;  4659             jne @f
                    jne #0046412B         ;#004640E1: 165 48                     v  00 00  1 168      
;  4660               ::e94_or_e04
;  4661               [32]
;  4662                 mov edi,[a32h4]
                        mov edi,[#00402890] (a32h4)  ;#004640E3: 213075 90284000            uv 80 00  1 169      
;  4663                 mov eax,[or_esi]
                        mov eax,[#00402618] (or_esi)  ;#004640E9: 241 18264000               vu 01 00  1 169      
;  4664               [64]
;  4665                 mov rdi,[a64h4]
;  4666                 mov rax,[or_esi]
;  4667               []
;  4668                 call :%opJccE
                        call #0045F91F (:%opJccE)  ;#004640EE: 350 2CB8FFFF               v  00 00  1 170      
;  4669                 je :e94vhnbaavedx
                        je #00464110      ;#004640F3: 164 1B                     v  00 00  1 171      
;  4670               [32]
;  4671                 mov eax,[esp+4]
                        mov eax,[esp+4]   ;#004640F5: 213104044 04               uv 01 10  1 172      
;  4672                 lea edi,[or_era]
                        mov edi,#00402610  ;#004640F9: 277 10264000               vu 80 00  1 172      
;  4673                 sub eax,1
                        sub eax,1         ;#004640FE: 203350 01                  uv 01 01  1 173      
;  4674 --31/7/17 (*4)
;  4675                 add esp,8
                        add esp,8         ;#00464101: 203304 08                  vu 10 10  1 173      
;  4676               [64]
;  4677                 mov rax,[rsp+8]
;  4678                 lea rdi,[or_era]
;  4679                 sub rax,1
;  4680                 add rsp,16
;  4681               []
;  4682                 call :%pStoreMint
                        call #00463978 (:%pStoreMint)  ;#00464104: 350 6FF8FFFF               v  00 00  1 174      
;  4683                 mov al,04           -- e04atsaa
                        mov al,4          ;#00464109: 260 04                     uv 01 00  1 175      
;  4684                 jmp :setal
                        jmp #004642D4     ;#0046410B: 351 C4010000               v  00 00  1 175      
;  4685 
;  4686           ::e94vhnbaavedx
;  4687               [32]
;  4688                 mov eax,[esp+4]
                        mov eax,[esp+4]   ;#00464110: 213104044 04               uv 01 10  1 176      
;  4689                 lea edi,[or_era]
                        mov edi,#00402610  ;#00464114: 277 10264000               vu 80 00  1 176      
;  4690                 sub eax,1
                        sub eax,1         ;#00464119: 203350 01                  uv 01 01  1 177      
;  4691                 add esp,8
                        add esp,8         ;#0046411C: 203304 08                  vu 10 10  1 177      
;  4692               [64]
;  4693                 mov rax,[rsp+8]
;  4694                 lea rdi,[or_era]
;  4695                 sub rax,1
;  4696                 add rsp,16
;  4697               []
;  4698                 call :%pStoreMint
                        call #00463978 (:%pStoreMint)  ;#0046411F: 350 54F8FFFF               v  00 00  1 178      
;  4699                 mov al,94           -- e94vhnbaav(edx)
                        mov al,94         ;#00464124: 260 5E                     uv 01 00  1 179      
;  4700                 jmp :setal
                        jmp #004642D4     ;#00464126: 351 A9010000               v  00 00  1 179      
;  4701           @@:
;  4702 --/*
;  4703 --;  2352           mov ecx,[esp+8]         -- pTCB/4
;  4704 --                  mov [edi+ecx*4+20],esi  ;#004D2FEE: 211164217 14               uv 00 C2  1 651      
;  4705 --
;  4706 --;  2378           mov rcx,[rsp+64]        -- pTCB/4
;  4707 --;  2391           mov [rcx*4+rdi+32],rsi  -- pTCB[idx]:=this.pNext
;  4708 --
;  4709 --;  1876       mov eax,[esi*4+edi+20]  -- pTCB.pFree[idx]
;  4710 --;  1878       jnz :!blockfound
;  4711 --*/
;  4712             cmp edx,:!blockfound
                    cmp edx,#004635B9     ;#0046412B: 201372 B9354600            uv 00 04  1 180      
;  4713             je :e32hcblockfound
                    je #00464143          ;#00464131: 164 10                     v  00 00  1 180      
;  4714 --cmp edx,:!blockfound4
;  4715 --je :e32hcblockfound
;  4716             cmp edx,:!blockfoundC0000005
                    cmp edx,#004635CF     ;#00464133: 201372 CF354600            uv 00 04  1 181      
;  4717             je :e32hcblockfound
                    je #00464143          ;#00464139: 164 08                     v  00 00  1 181      
;  4718             cmp edx,:!bf_midchain
                    cmp edx,#004635E2     ;#0046413B: 201372 E2354600            uv 00 04  1 182      
;  4719             jne @f
                    jne #0046415B         ;#00464141: 165 18                     v  00 00  1 182      
;  4720           ::e32hcblockfound
;  4721                 -- memory corruption problem
;  4722               [32]
;  4723 --              mov eax,[esp+12]    -- return address (of :%pGetPool call)
;  4724 --              mov eax,[esp+12]
;  4725                 mov eax,[esp+16]
                        mov eax,[esp+16]  ;#00464143: 213104044 10               uv 01 10  1 183      
;  4726                 lea edi,[or_edi]
                        mov edi,#0040261C  ;#00464147: 277 1C264000               vu 80 00  1 183      
;  4727                 sub eax,1
                        sub eax,1         ;#0046414C: 203350 01                  uv 01 01  1 184      
;  4728               [64]
;  4729 --              mov rax,[rsp+8*11]  -- return address (of :%pGetPool call)
;  4730 --              mov rax,[rsp+80]
;  4731                 mov rax,[rsp+88]
;  4732                 lea rdi,[or_edi]
;  4733                 sub rax,1
;  4734               []
;  4735 --              cmp edx,
;  4736 --pAllocStr
;  4737 --pAllocSeq
;  4738 --pStoreFlt
;  4739 --pAlloc
;  4740 --newVSB
;  4741 --allocate()
;  4742                 call :%pStoreMint
                        call #00463978 (:%pStoreMint)  ;#0046414F: 350 24F8FFFF               v  00 00  1 184      
;  4743 --              mov [or_ecx],1
;  4744                 mov al,32           -- e32hc(era,edi)
                        mov al,32         ;#00464154: 260 20                     uv 01 00  1 185      
;  4745                 jmp :setal
                        jmp #004642D4     ;#00464156: 351 79010000               v  00 00  1 185      
;  4746           @@:
;  4747             cmp edx,:!GetPoolnotTCBa
                    cmp edx,#0046336D     ;#0046415B: 201372 6D334600            uv 00 04  1 186      
;  4748             jne @f
                    jne #0046417B         ;#00464161: 165 18                     v  00 00  1 186      
;  4749               [32]
;  4750 --              mov eax,[esp+8]
;  4751                 mov eax,[esp+12]
                        mov eax,[esp+12]  ;#00464163: 213104044 0C               uv 01 10  1 187      
;  4752                 lea edi,[or_edi]
                        mov edi,#0040261C  ;#00464167: 277 1C264000               vu 80 00  1 187      
;  4753                 sub eax,1
                        sub eax,1         ;#0046416C: 203350 01                  uv 01 01  1 188      
;  4754               [64]
;  4755 --              mov rax,[rsp+80]
;  4756                 mov rax,[rsp+88]
;  4757                 lea rdi,[or_edi]
;  4758                 sub rax,1
;  4759               []
;  4760                 call :%pStoreMint
                        call #00463978 (:%pStoreMint)  ;#0046416F: 350 04F8FFFF               v  00 00  1 188      
;  4761                 mov al,32           -- e32hc(era,edi)
                        mov al,32         ;#00464174: 260 20                     uv 01 00  1 189      
;  4762                 jmp :setal
                        jmp #004642D4     ;#00464176: 351 59010000               v  00 00  1 189      
;  4763           @@:
;  4764             cmp edx,:!FreePoole32a
                    cmp edx,#004636DF     ;#0046417B: 201372 DF364600            uv 00 04  1 190      
;  4765             jne @f
                    jne #0046419B         ;#00464181: 165 18                     v  00 00  1 190      
;  4766               [32]
;  4767                 mov eax,[esp+4]
                        mov eax,[esp+4]   ;#00464183: 213104044 04               uv 01 10  1 191      
;  4768                 lea edi,[or_edi]
                        mov edi,#0040261C  ;#00464187: 277 1C264000               vu 80 00  1 191      
;  4769                 sub eax,1
                        sub eax,1         ;#0046418C: 203350 01                  uv 01 01  1 192      
;  4770               [64]
;  4771                 mov rax,[rsp+8]
;  4772                 lea rdi,[or_edi]
;  4773                 sub rax,1
;  4774               []
;  4775                 call :%pStoreMint
                        call #00463978 (:%pStoreMint)  ;#0046418F: 350 E4F7FFFF               v  00 00  1 192      
;  4776                 mov al,32           -- e32hc(era,edi)
                        mov al,32         ;#00464194: 260 20                     uv 01 00  1 193      
;  4777                 jmp :setal
                        jmp #004642D4     ;#00464196: 351 39010000               v  00 00  1 193      
;  4778           @@:
;  4779             [32]
;  4780             cmp edx,:!opPeek1xMLE
                    cmp edx,#0045E97A     ;#0046419B: 201372 7AE94500            uv 00 04  1 194      
;  4781             je :e99atom
                    je #004641C3          ;#004641A1: 164 20                     v  00 00  1 194      
;  4782             cmp edx,:!opPeek2xMLE
                    cmp edx,#0045E993     ;#004641A3: 201372 93E94500            uv 00 04  1 195      
;  4783             je :e99atom
                    je #004641C3          ;#004641A9: 164 18                     v  00 00  1 195      
;  4784             cmp edx,:!opPeek4xMLE
                    cmp edx,#0045E9A7     ;#004641AB: 201372 A7E94500            uv 00 04  1 196      
;  4785             je :e99atom
                    je #004641C3          ;#004641B1: 164 10                     v  00 00  1 196      
;  4786             cmp edx,:!opPeek8xsMLE
                    cmp edx,#0045E9EC     ;#004641B3: 201372 ECE94500            uv 00 04  1 197      
;  4787             je :e99atom
                    je #004641C3          ;#004641B9: 164 08                     v  00 00  1 197      
;  4788             cmp edx,:!opPeek8xuMLE
                    cmp edx,#0045E9F0     ;#004641BB: 201372 F0E94500            uv 00 04  1 198      
;  4789             jne @f
                    jne #004641DB         ;#004641C1: 165 18                     v  00 00  1 198      
;  4790               ::e99atom
;  4791 --              mov eax,[esp+8]
;  4792                 mov eax,[esp+12]
                        mov eax,[esp+12]  ;#004641C3: 213104044 0C               uv 01 10  1 199      
;  4793                 lea edi,[or_era]
                        mov edi,#00402610  ;#004641C7: 277 10264000               vu 80 00  1 199      
;  4794                 sub eax,1
                        sub eax,1         ;#004641CC: 203350 01                  uv 01 01  1 200      
;  4795                 call :%pStoreMint
                        call #00463978 (:%pStoreMint)  ;#004641CF: 350 A4F7FFFF               v  00 00  1 200      
;  4796                 mov al,99           -- e99ipma
                        mov al,99         ;#004641D4: 260 63                     uv 01 00  1 201      
;  4797                 jmp :setal
                        jmp #004642D4     ;#004641D6: 351 F9000000               v  00 00  1 201      
;  4798           @@:
;  4799             cmp edx,:!opPeek1xsMLE
                    cmp edx,#0045EB1D     ;#004641DB: 201372 1DEB4500            uv 00 04  1 202      
;  4800             je :e99seq
                    je #00464203          ;#004641E1: 164 20                     v  00 00  1 202      
;  4801             cmp edx,:!opPeek2xsMLE
                    cmp edx,#0045EB39     ;#004641E3: 201372 39EB4500            uv 00 04  1 203      
;  4802             je :e99seq
                    je #00464203          ;#004641E9: 164 18                     v  00 00  1 203      
;  4803             cmp edx,:!opPeek4xsMLE
                    cmp edx,#0045EB53     ;#004641EB: 201372 53EB4500            uv 00 04  1 204      
;  4804             je :e99seq
                    je #00464203          ;#004641F1: 164 10                     v  00 00  1 204      
;  4805             cmp edx,:!opPeek8xsMLE2
                    cmp edx,#0045EBB7     ;#004641F3: 201372 B7EB4500            uv 00 04  1 205      
;  4806             je :e99seq
                    je #00464203          ;#004641F9: 164 08                     v  00 00  1 205      
;  4807             cmp edx,:!opPeek8xuMLE2
                    cmp edx,#0045EBBB     ;#004641FB: 201372 BBEB4500            uv 00 04  1 206      
;  4808             jne @f
                    jne #0046421B         ;#00464201: 165 18                     v  00 00  1 206      
;  4809               ::e99seq
;  4810 --              mov eax,[esp+16]
;  4811                 mov eax,[esp+20]
                        mov eax,[esp+20]  ;#00464203: 213104044 14               uv 01 10  1 207      
;  4812                 lea edi,[or_era]
                        mov edi,#00402610  ;#00464207: 277 10264000               vu 80 00  1 207      
;  4813                 sub eax,1
                        sub eax,1         ;#0046420C: 203350 01                  uv 01 01  1 208      
;  4814                 call :%pStoreMint
                        call #00463978 (:%pStoreMint)  ;#0046420F: 350 64F7FFFF               v  00 00  1 208      
;  4815                 mov al,99           -- e99ipma
                        mov al,99         ;#00464214: 260 63                     uv 01 00  1 209      
;  4816                 jmp :setal
                        jmp #004642D4     ;#00464216: 351 B9000000               v  00 00  1 209      
;  4817             [64]
;  4818             cmp edx,:!opPeek1xMLE64
;  4819             je :e99atom
;  4820             cmp edx,:!opPeek2xMLE64
;  4821             je :e99atom
;  4822             cmp edx,:!opPeek4xMLE64
;  4823             je :e99atom
;  4824             cmp edx,:!opPeek8xsMLE64
;  4825             je :e99atom
;  4826             cmp edx,:!opPeek8xuMLE64
;  4827             jne @f
;  4828               ::e99atom
;  4829 --              mov rax,[rsp+16]
;  4830                 mov rax,[rsp+24]
;  4831                 lea rdi,[or_era]
;  4832                 sub rax,1
;  4833                 call :%pStoreMint
;  4834                 mov al,99           -- e99ipma
;  4835                 jmp :setal
;  4836           @@:
;  4837             cmp edx,:!opPeek1xsMLE64
;  4838             je :e99seq
;  4839             cmp edx,:!opPeek2xsMLE64
;  4840             je :e99seq
;  4841             cmp edx,:!opPeek4xsMLE64
;  4842             je :e99seq
;  4843             cmp edx,:!opPeek8xsMLE264
;  4844             je :e99seq
;  4845             cmp edx,:!opPeek8xuMLE264
;  4846             jne @f
;  4847               ::e99seq
;  4848 --              mov rax,[rsp+32]
;  4849                 mov rax,[rsp+40]
;  4850                 lea rdi,[or_era]
;  4851                 sub rax,1
;  4852                 call :%pStoreMint
;  4853                 mov al,99           -- e99ipma
;  4854                 jmp :setal
;  4855             []
;  4856           @@:
;  4857             cmp edx,:!PokeN1E30
                    cmp edx,#0045ECD0     ;#0046421B: 201372 D0EC4500            uv 00 04  1 210      
;  4858             je :e100ipma
                    je #00464283          ;#00464221: 164 60                     v  00 00  1 210      
;  4859             cmp edx,:!PokeN2E30
                    cmp edx,#0045ECD8     ;#00464223: 201372 D8EC4500            uv 00 04  1 211      
;  4860             je :e100ipma
                    je #00464283          ;#00464229: 164 58                     v  00 00  1 211      
;  4861             cmp edx,:!PokeN4E30
                    cmp edx,#0045ECE1     ;#0046422B: 201372 E1EC4500            uv 00 04  1 212      
;  4862             je :e100ipma
                    je #00464283          ;#00464231: 164 50                     v  00 00  1 212      
;  4863             cmp edx,:!PokeN8E30
                    cmp edx,#0045ED1A     ;#00464233: 201372 1AED4500            uv 00 04  1 213      
;  4864             je :e100ipma
                    je #00464283          ;#00464239: 164 48                     v  00 00  1 213      
;  4865             cmp edx,:!Poke1SeqE30
                    cmp edx,#0045ED70     ;#0046423B: 201372 70ED4500            uv 00 04  1 214      
;  4866             je :e100ipma
                    je #00464283          ;#00464241: 164 40                     v  00 00  1 214      
;  4867             cmp edx,:!Poke2SeqE30
                    cmp edx,#0045ED78     ;#00464243: 201372 78ED4500            uv 00 04  1 215      
;  4868             je :e100ipma
                    je #00464283          ;#00464249: 164 38                     v  00 00  1 215      
;  4869             cmp edx,:!Poke3SeqE30
                    cmp edx,#0045ED85     ;#0046424B: 201372 85ED4500            uv 00 04  1 216      
;  4870             je :e100ipma
                    je #00464283          ;#00464251: 164 30                     v  00 00  1 216      
;  4871             cmp edx,:!Poke8SeqE30
                    cmp edx,#0045EDC4     ;#00464253: 201372 C4ED4500            uv 00 04  1 217      
;  4872             je :e100ipma
                    je #00464283          ;#00464259: 164 28                     v  00 00  1 217      
;  4873             [32]
;  4874             cmp edx,:!Poke1SeqE30a
                    cmp edx,#0045EDC6     ;#0046425B: 201372 C6ED4500            uv 00 04  1 218      
;  4875             je :e100ipma
                    je #00464283          ;#00464261: 164 20                     v  00 00  1 218      
;  4876             []
;  4877             cmp edx,:!PokeN1StrE30
                    cmp edx,#0045EDEE     ;#00464263: 201372 EEED4500            uv 00 04  1 219      
;  4878             je :e100ipma
                    je #00464283          ;#00464269: 164 18                     v  00 00  1 219      
;  4879             cmp edx,:!PokeN2StrE30
                    cmp edx,#0045EDF9     ;#0046426B: 201372 F9ED4500            uv 00 04  1 220      
;  4880             je :e100ipma
                    je #00464283          ;#00464271: 164 10                     v  00 00  1 220      
;  4881             cmp edx,:!PokeN4StrE30
                    cmp edx,#0045EE02     ;#00464273: 201372 02EE4500            uv 00 04  1 221      
;  4882             je :e100ipma
                    je #00464283          ;#00464279: 164 08                     v  00 00  1 221      
;  4883             cmp edx,:!PokeN8StrE30
                    cmp edx,#0045EE0E     ;#0046427B: 201372 0EEE4500            uv 00 04  1 222      
;  4884             jne @f
                    jne #00464298         ;#00464281: 165 15                     v  00 00  1 222      
;  4885               ::e100ipma
;  4886             [32]
;  4887                 mov eax,[esp+4]
                        mov eax,[esp+4]   ;#00464283: 213104044 04               uv 01 10  1 223      
;  4888                 lea edi,[or_era]
                        mov edi,#00402610  ;#00464287: 277 10264000               vu 80 00  1 223      
;  4889                 sub eax,1
                        sub eax,1         ;#0046428C: 203350 01                  uv 01 01  1 224      
;  4890             [64]
;  4891                 mov rax,[rsp+8]
;  4892                 lea rdi,[or_era]
;  4893                 sub rax,1
;  4894             []
;  4895                 call :%pStoreMint
                        call #00463978 (:%pStoreMint)  ;#0046428F: 350 E4F6FFFF               v  00 00  1 224      
;  4896                 mov al,100          -- e100ipma
                        mov al,100        ;#00464294: 260 64                     uv 01 00  1 225      
;  4897                 jmp :setal
                        jmp #004642D4     ;#00464296: 353 3C                     v  00 00  1 225      
;  4898           @@:
;  4899             cmp edx,:%pFree_e107ifma
                    cmp edx,#00463B2B     ;#00464298: 201372 2B3B4600            uv 00 04  1 226      
;  4900             jne @f
                    jne #004642B5         ;#0046429E: 165 15                     v  00 00  1 226      
;  4901             [32]
;  4902                 mov eax,[esp+4]
                        mov eax,[esp+4]   ;#004642A0: 213104044 04               uv 01 10  1 227      
;  4903                 lea edi,[or_era]
                        mov edi,#00402610  ;#004642A4: 277 10264000               vu 80 00  1 227      
;  4904                 sub eax,1
                        sub eax,1         ;#004642A9: 203350 01                  uv 01 01  1 228      
;  4905             [64]
;  4906                 mov rax,[rsp+8]
;  4907                 lea rdi,[or_era]
;  4908                 sub rax,1
;  4909             []
;  4910                 call :%pStoreMint
                        call #00463978 (:%pStoreMint)  ;#004642AC: 350 C7F6FFFF               v  00 00  1 228      
;  4911                 mov al,107          -- e107ifma
                        mov al,107        ;#004642B1: 260 6B                     uv 01 00  1 229      
;  4912                 jmp :setal
                        jmp #004642D4     ;#004642B3: 353 1F                     v  00 00  1 229      
;  4913           @@:
;  4914             cmp edx,:!MemCopyIMA
                    cmp edx,#0045EEA8     ;#004642B5: 201372 A8EE4500            uv 00 04  1 230      
;  4915             jne @f
                    jne #004642D2         ;#004642BB: 165 15                     v  00 00  1 230      
;  4916             [32]
;  4917                 mov eax,[esp+4]
                        mov eax,[esp+4]   ;#004642BD: 213104044 04               uv 01 10  1 231      
;  4918                 lea edi,[or_era]
                        mov edi,#00402610  ;#004642C1: 277 10264000               vu 80 00  1 231      
;  4919                 sub eax,1
                        sub eax,1         ;#004642C6: 203350 01                  uv 01 01  1 232      
;  4920             [64]
;  4921                 mov rax,[rsp+8]
;  4922                 lea rdi,[or_era]
;  4923                 sub rax,1
;  4924             []
;  4925                 call :%pStoreMint
                        call #00463978 (:%pStoreMint)  ;#004642C9: 350 AAF6FFFF               v  00 00  1 232      
;  4926                 mov al,24           -- e24imcma
                        mov al,24         ;#004642CE: 260 18                     uv 01 00  1 233      
;  4927                 jmp :setal
                        jmp #004642D4     ;#004642D0: 353 02                     v  00 00  1 233      
;  4928           @@:
;  4929             mov al,30
                    mov al,30             ;#004642D2: 260 1E                     uv 01 00  1 234      
;  4930     ::setal
;  4931         [32]
;  4932             and eax,#FF
                    and eax,255           ;#004642D4: 045 FF000000               uv 01 01  1 235 01   
;  4933             mov [msg_id],eax
                    mov [#00402658] (msg_id),eax  ;#004642D9: 243 58264000               uv 00 01  1 236 01   
;  4934         [64]
;  4935             and rax,#FF
;  4936             mov [msg_id],rax
;  4937         []
;  4938 
;  4939     ::alset
;  4940         call :%NoCleanup
                call #00462E38 (:%NoCleanup)  ;#004642DE: 350 55EBFFFF               v  00 00  1 236      
;  4941           }
;  4942 --puts(1,"uh0?\n")
;  4943     if diagdiag>0 
;  4944     and show_low_level_diagnostics then
;  4945         if xceptn=0 then
;  4946 --DEV Equivalent changes should probably be applied elsewhere (in this particular case 
;  4947 --      heap corruption meant it crashed in printf before it could display anything).
;  4948 --      A related idea could be that pHeap.e invokes :!diagHC (new) to set a flag to
;  4949 --      use low-level displays instead of (more readable) printfs, and/or displays the
;  4950 --      call stack without any (corrupted) variables that would make pDiagN.e crash.
;  4951 --      [or maybe "" if find(msg_id,{31,32,33,53,77})!=0...]
;  4952 --          printf(1,"error code %d, or_era=#%08x, or_ebp=#%08x, or_esp=#%08x\n",
;  4953 --                 {msg_id,or_era,or_ebp*4,or_esp})
;  4954             puts1("error code ")
;  4955             putsint(msg_id,0)
;  4956             puts1(", or_era=#")
;  4957             puthex32(or_era,0)
;  4958             puts1(", or_ebp=#")
;  4959             puthex32(or_ebp*4,0)
;  4960             puts1(", or_esp=#")
;  4961             puthex32(or_esp,1)
;  4962         else
;  4963 --          show_corruption(CTB)
;  4964             printf(1,"exception #%08x at #%08x, or_era=#%08x, or_ebp=#%08x, or_esp=#%08x\n",
;  4965                    {xceptn,xcepta,or_era,or_ebp*4,or_esp})
;  4966         end if
;  4967 -->++ (regs)
;  4968         printf(1,"stack(#%08x): %08x, %08x, %08x, %08x\n",or_esp&peek4u({or_esp,4}))
;  4969         printf(1,"stack(#%08x): %08x, %08x, %08x, %08x\n",or_esp+16&peek4u({or_esp+16,4}))
;  4970         printf(1,"stack(#%08x): %08x, %08x, %08x, %08x\n",or_esp+32&peek4u({or_esp+32,4}))
;  4971         printf(1,"stack(#%08x): %08x, %08x, %08x, %08x\n",or_esp+48&peek4u({or_esp+48,4}))
;  4972     end if
;  4973 
;  4974     diag()
    mov ecx,78                            ;#004642E3: 271 4E000000               uv 02 00  1 237      
    mov edx,1308                          ;#004642E8: 272 1C050000               vu 04 00  1 237      
    call #00462C02 (:%opFrame) (diag)     ;#004642ED: 350 10E9FFFF               v  00 00  1 238      
    mov [ebp+28] (retaddr),#004642FE      ;#004642F2: 307105 1C FE424600         uv 00 20  1 239      
    jmp #0046433C (code:diag)             ;#004642F9: 351 3E000000               v  00 00  1 239      
;  4975     -- control does not return... [DEV]
;  4976 puts(1,"uh? (pdiagN.e line 4791)\n")
    mov eax,1                             ;#004642FE: 270 01000000               uv 01 00  1 240      
    mov edx,[#00402A10]                   ;#00464303: 213025 102A4000            vu 04 00  1 240      
    call #0045E072 (:%opPuts)             ;#00464309: 350 649DFFFF               v  00 00  1 241      
;  4977 --DEV standard problem... must fix this one day...
;  4978     msg_id += 1
    mov edi,[#00402658] (msg_id)          ;#0046430E: 213075 58264000            uv 80 00  1 242      
    add edi,1                             ;#00464314: 203307 01                  uv 80 80  1 243 80   
    mov edx,edi                           ;#00464317: 213327                     uv 04 80  1 244 80   
    mov [#00402658] (msg_id),edi          ;#00464319: 211075 58264000            vu 00 80  1 244      
    shl edx,1                             ;#0046431F: 321342                     u  04 04  1 245      
    jno #0046432D                         ;#00464321: 161 0A                     v  00 00  1 245      
    mov edi,#00402658                     ;#00464323: 277 58264000               uv 80 00  1 246      
    call #00462764 (:%e01tcfAddiii)       ;#00464328: 350 37E4FFFF               v  00 00  1 246      
;  4979     batchmode = 1
    mov [#00402568] (batchmode), dword 1  ;#0046432D: 307005 68254000 01000000   uv 00 00  1 247      
;  4980 --  xceptn += 1
;  4981 --  #ilASM{
;  4982 --      [32]
;  4983 --          mov eax,[esp]
;  4984 ----            mov edx,[batchmode]
;  4985 --          jmp eax
;  4986 --      [64]
;  4987 --          mov rax,[rsp]
;  4988 ----            mov rdx,[batchmode]
;  4989 --          jmp rax
;  4990 --      []
;  4991 --        }
;  4992 
;  4993 
;  4994 --end of new code
;  4995 --===============
;  4996 ---- "without debug" stops the run-time update of line and file info, and
;  4997 ---- this program from dumping local vars, which in this case would be [DEV?]
;  4998 ---- just crash_rtn, crash_msg, crashfile, and stoploop. While it remains
;  4999 ---- quite sensible to specify this here, it should be perfectly OK to 
;  5000 ---- turn it back on for a while rather than play completely in the dark.
;  5001 ---- If you get any problems, comment this line out, suffer the 4 extra 
;  5002 ---- lines in your .err, some pretty wierd and wacky misleading line nos
;  5003 ---- (eg the line in this source rather than where the user app actually 
;  5004 ----  crashed), and hopefully/maybe get a better clue where it 
;  5005 ---- (this, ie pdiag.e) went wrong ;-)):
;  5006 --
;  5007 ----/**/without debug -- Phix: disables all debug/diagnostic stuff!
;  5008 --------/**/with debug
;  5009 --without type_check
;  5010 ------with trace
;  5011 --
;  5012 --
;  5013 ----without trace   -- NB no effect under "without debug"
;  5014 ----with trace      -- NB no effect under "without debug"
;  5015 --
;  5016 --
;  5017 ---- TODO: 
;  5018 ---- "Traced lines leading up to the failure:", eg:
;  5019 ----
;  5020 ----C:\Program Files\Phix\test.exw:6    procedure d(sequence s)
;  5021 ----C:\Program Files\Phix\test.exw:8        d(s[2..length(s)-1])
;  5022 ----C:\Program Files\Phix\test.exw:6    procedure d(sequence s)
;  5023 ----C:\Program Files\Phix\test.exw:8        d(s[2..length(s)-1])
;  5024 ----
;  5025 ---- (Personally, though, I've never found that much use)
;  5026 --
;  5027 --constant binderrs = {
;  5028 --"infile is not string",                   --1 --*
;  5029 --"error opening infile (p.exe)",           --2 -- in use? hard disk problems?
;  5030 --"error seeking to infile eof",                --3 --          ""
;  5031 --"error allocating sizeof(p.exe|new.exe)", --4 -- insufficient memory? (2MB should be plenty!)
;  5032 --"error reading p.exe",                        --5 -- as 2,3
;  5033 --"MZ header not found",                        --6 -- p.exe corrupt? hard disk problems?
;  5034 --"PE header not found",                        --7 -- ""               ""
;  5035 --"subvers not atom",                       --8 --*
;  5036 --"length(optable)!=length(opNames)",       --9 -- [details already shown]
;  5037 --"calcsize!=dumpsize",                     --10 -- serious! will need soure to reproduce
;  5038 --"incorrect image size",                   --11    ""
;  5039 --"outfile not string",                     --12 --*
;  5040 --"error writing new.exe",                  --13 -- in use? hard disk problems?
;  5041 --"sig not sequence"}                       --14 --*
;  5042 ---- items marked --* should not happen (unless p.exw sources badly hacked)
;  5043 --
;  5044 --
;  5045 --constant rtndescs = {"type","function", "procedure"}
;  5046 --
;  5047 --object crashfile crashfile = -1
;  5048 --
;  5049 --integer stoploop      -- this is independently tested for in the backend...
;  5050 --      stoploop = 0        --  (but it does not hurt any to re-test it here)
;  5051 --
;  5052 --function diag(integer msg_id)
;  5053 -- removed from e01:
;  5054     -- Note: since the diag routine uses some of the builtins,
;  5055     --  then eg object o o="fred" getc(o) will not generate 
;  5056     -- 'type check error, fn is "fred"', but instead
;  5057     -- 'type check error, getc parameter fn is wrong'. [?DEV I may have fixed this since?]
;  5058     --  [as opposed to getc("fred"), which causes compile-time error]
;  5059     -- When you see "builtin parameter", look up the routine
;  5060     --  in the documentation to find out exactly which 
;  5061     --  parameter it is referring to.
;  5062     -- For more details, also see variable builtinparamwrong.
;  5063 --integer builtinparamwrong
;  5064 --integer k, rid, callee, fileno, pathno, noofparams, i2, i3, i4, km1, km2, km3, kp1
;  5065 --integer lineno
;  5066 --object si, codeseg, o, o2, name
;  5067 --integer tidx, idx
;  5068 --integer pn
;  5069 --object linetab
;  5070 --integer line
;  5071 --object ugh --DEV!
;  5072 --
;  5073 ------  puts(1,"diag called...\n")
;  5074 --------/**/if getc(0) then end if
;  5075 --  if stoploop then
;  5076 --      -- this is independently tested for in the backend...
;  5077 --      --  (flag is intended to catch errors in pdiag.e itself)
;  5078 ----        puts(1,"diag looping!\n")
;  5079 --      puts(1,"diag looping!\n")
;  5080 ----        stoploop = 2
;  5081 ----    elsif stoploop=2 then
;  5082 ----        puts(1,"diag re-looping!\n")
;  5083 --      return 0
;  5084 ----        if getc(0) then end if
;  5085 ----        abort(0)
;  5086 ----    else
;  5087 --  end if
;  5088 --  stoploop=1
;  5089 --
;  5090 ------  puts(1,"diag called2...\n")
;  5091 --
;  5092 --  if equal(crashfile,"") then return 0 end if
;  5093 ----    if equal(crashfile,"") then abort(1) end if
;  5094 --
;  5095 --  builtinparamwrong = 0
;  5096 --  callcount = 0
;  5097 --  if find(crashfile,{"NUL","/dev/null"}) then
;  5098 --      pn = -1
;  5099 ----DEV: if we can't open .err, display to screen anyway...
;  5100 ----        [I think we're OK, but not tested, let me know if it works as it should]
;  5101 --  elsif crashfile!=-1 then
;  5102 --      pn = open(crashfile,"w")
;  5103 --  else
;  5104 --      pn = open("p.err","w")
;  5105 --  end if
;  5106 --
;  5107 --  while 1 do
;  5108 --      while 1 do
;  5109 --              callcount += 1
;  5110 --                  if msg_id<=length(msgs) then
;  5111 --                      i2 = ep1  i3 = ep2
;  5112 --                      elsif msg_id = 108 then
;  5113 --                          -- position error [%08x]
;  5114 --                          o = {i2}
;  5115 --                      elsif msg_id = 98 then
;  5116 --                          -- flush error [%08x]
;  5117 --                          -- add human-readables for common ones as follows:
;  5118 --                          -- (see eg arwen/Constants.ew, ERROR_INVALID_HANDLE etc)
;  5119 ----                            if i2=? then
;  5120 ----                                o = {i2," desc"}
;  5121 ----                            elsif i2=? then
;  5122 ----                                o = {i2," desc"}
;  5123 ----                            else
;  5124 --                              o = {i2,""}
;  5125 ----                            end if
;  5126 --                      elsif msg_id = 62
;  5127 --                         or msg_id = 58
;  5128 --                         or msg_id = 7 then
;  5129 --                          -- file number %d is not open
;  5130 --                          -- invalid file number (%d)
;  5131 --                          -- slice start is less than 1 (%d)
;  5132 --                          o = {i2}
;  5133 --                      elsif msg_id = 6
;  5134 --                         or msg_id = 106 then
;  5135 --                          -- index %d out of bounds, assigning to sequence length %d
;  5136 --                          -- index %d out of bounds, reading from sequence length %d
;  5137 --                          o = {i2,i3}
;  5138 --                      elsif msg_id >= 9 
;  5139 --                        and msg_id <= 11 then
;  5140 --                          -- slice length is negative (%d..%d)
;  5141 --                          -- slice starts past end of sequence (%d > %d)
;  5142 --                          -- slice ends past end of sequence (%d > %d)
;  5143 --                          o = {i2,i3}
;  5144 --                      elsif msg_id = 116 then
;  5145 --                          -- routine requires %d parameters, not %d
;  5146 --                          o = {i2,i3}
;  5147 --                      elsif msg_id = 1
;  5148 --                      or msg_id = 110 then
;  5149 --                          if symtab[i2][S_NTyp] = S_TVar3 then
;  5150 --                              i4 = -symtab[i2][S_Tidx]
;  5151 --                          else
;  5152 --                              o = symtab[i2][S_value] (DEV)
;  5153 --                          end if
;  5154 --                          if i3=0 then
;  5155 --                              o = {"<diag.e: oops, i3 is zero>",o}
;  5156 --                          elsif builtinparamwrong then
;  5157 --                              o = {symtab[builtinparamwrong][S_Name]&" parameter "&
;  5158 ----DEV: (testme!)
;  5159 ----                                     symtab[i3][S_Name],"wrong"}
;  5160 --                                   symtab[i3][S_Name],o}
;  5161 --                          else
;  5162 --                              o = {symtab[i3][S_Name],o}
;  5163 --                          end if
;  5164 --
;  5165 --                      elsif msg_id = 93 then
;  5166 --                          -- bind error %d (%s)
;  5167 --                          o = {i2,binderrs[i2]}
;  5168 --                      else
;  5169 --                          o = 0
;  5170 --                      end if
;  5171 --                      put2(pn,msgs[msg_id],o)
;  5172 --                  else
;  5173 --                      put2(pn,"unknown error code %d\n",{msg_id})
;  5174 --                  end if
;  5175 --
;  5176 --          elsif msg_id=1 then
;  5177 --              -- Instead of 'type check error, fn is "fred"', for
;  5178 --              -- the builtins, which we are likely to use all the
;  5179 --              -- time and hence trash any "current value", output
;  5180 --              -- 'type check error, builtin parameter fn is wrong'
;  5181 --              --  (user is expected to lookup "fn" in the docs)
;  5182 --              -- FWIW, RDS Eu tends to output routine-specific
;  5183 --              -- messages, eg "first parameter to match must be 
;  5184 --              -- a sequence", "file number is not an integer",
;  5185 --              -- and likwise not show any "current value".
;  5186 --              builtinparamwrong=rid
;  5187 --          end if
;  5188 --
;  5189 --flush(pn)
;  5190 --      end while
;  5191 --  end while
;  5192 --flush(pn)
;  5193 --
;  5194 --  if pn!=-1 and callcount>100 then
;  5195 --      printf(pn,"  (skipping %d levels)\n",callcount-100)
;  5196 --  end if
;  5197 ------  puts(1,"hey7!\n")
;  5198 --
;  5199 --  fileno = 0
;  5200 --
;  5201 --  if pn!=-1 then
;  5202 --      puts(pn,"\nGlobal & Local Variables\n")
;  5203 --
;  5204 --      for i=1 to length(symtab) do
;  5205 --      end for
;  5206 --      puts(1,"\n")
;  5207 --      close(pn)
;  5208 --  end if
;  5209 --  if crash_rtn!=-1 then
;  5210 --      for i=length(crash_rtn) to 1 by -1 do
;  5211 --          if call_func(crash_rtn[i],{0})!=0 then exit end if
;  5212 --      end for
;  5213 --  end if
;  5214 ----puts(1,"done!\n")
;  5215 ----abort(1)
;  5216 ----if getc(0) then end if
;  5217 ----if stoploop then abort(1) end if
;  5218 --  stoploop = 0
;  5219 --  return 0
;  5220 --end function
;  5221 --
;  5222 --
;  5223 --
;  5224 --procedure setup()
;  5225 --  diagcb = routine_id("diag") --  if diagcb <= 0 then puts(1,"diagcb <= 0\n") abort(1) end if
;  5226 ----?diagcb
;  5227 --  diagcb = call_back(diagcb)  --  if diagcb = -1 then puts(1,"callback = -1\n") abort(1) end if
;  5228 ----?diagcb
;  5229 --
;  5230 --  #ilASM{mov edi,[diagcb]
;  5231 --         call %opCrshRtn}
;  5232 --end procedure
;  5233 --if 01 then
;  5234 --setup()
;  5235 --end if
;  5236 --
;  5237 
;  5238 --          #ilASM{ jmp :%pRetf     -- (there's one of these at every eof)
;  5239 --                  :%somelabel
;  5240 --                }
;  5241 --          puts(1,"hello from somelabel\n")  -- [keep this short/simple]
;  5242 --          #ilASM{ ret }
;  5243 --          <EOF>
;  5244 
;  5245 
;  5246 --  #ilASM{ jmp :fin
;  5247 ----        [32]
;  5248 ----DEV:
;  5249 --          :%e01tcfAddiii
;  5250 ----            :%e02atdb0  -- (DEV moved to pUnassigned for now)
;  5251 ----            :%pUnassigned   -- aka e92vhnbaavesiesp
;  5252 --              -- var no(?) in esi
;  5253 ----            :%pRTErn
;  5254 ----?       :%pRTErf
;  5255 --              -- errorcode in al
;  5256 --              -- ep1 in e/rdi
;  5257 --              -- ep2 in e/rsi
;  5258 ----?           -- use the called from address ([e/rbp+12/24])[? just let without debug take care of it... ?]
;  5259 ----?           -- note that e/rbp may need to be specially set by the callee (eg to ebp_prev),
;  5260 ----?           --  since there is no point in say pfileioN.e reporting errors in iofatal().
;  5261 ----                mov e??,[ebp+12]    -- called from address
;  5262 ----                mov r??,[rbp+24]    -- called from address
;  5263 --          int3
;  5264 ----        [64]
;  5265 ----            pop al
;  5266 ----        []
;  5267 --          ::fin
;  5268 --        }
;C:\Phix\builtins\VM\pprntfN.e:
;==============================
;     1 --
;     2 -- pprntfN.e
;     3 -- =========
;     4 --
;     5 -- The Phix sprintf() function.
;     6 -- This file is automatically included by the compiler if (and only if) needed.
;     7 -- Compared to the C version, this is just over twice as slow, which is rather
;     8 -- surprising (I expected it would be around 8 to 10 times slower). I suspect
;     9 -- the biggest overhead is allocating space for the result (string), which is
;    10 -- pretty much going to be the same for the C and Phix routines. This may be
;    11 -- converted to asm at a later date, but not until it has been completely
;    12 -- bug- and enhancement- free for at least six months.
;    13 --
;    14 --
;    15 -- **************************************
;    16 -- **** WARNING: FRAGILE CODE AHEAD! ****
;    17 -- **************************************
;    18 --  Test changes exhaustively before rebuilding p.exe!
;    19 --  In particular, take care with type string; subtle changes (such as a
;    20 --  missing floor()) can make the back-end expand a string to a sequence
;    21 --  (which is something prepend, as opposed to append, /always/ does)
;    22 --  which causes a fatal error, eg see 'elsif fmt[i]='s' then'.
;    23 
;    24 --!/**/without debug -- remove to debug (just keeps ex.err clutter-free)
;    25 --!/**/with debug
;    26 --  NB the "without debug" in both pdiag.e and ppp.e overshadow the one
;    27 --      here; use "with debug" and/or "-nodiag" to get a listing.
;    28 
;    29 --without trace -- ditto, plus important this be off when running trace(3)
;    30 --with trace
;    31 
;    32 -- Bugfix history:
;    33 --  14/01/06. Did not handle negative numbers ("sgn" added).
;    34 --  09/03/06. printed 2700000000 as "27".
;    35 --  22/05/06. precision errors on big numbers.
;    36 --  19/08/07. nzdigitprinted flag added. [ummm?]
;    37 --  19/06/08. bug with trailing 0s in 'g'.
;    38 --  20/03/09. moved exp to end for K_noclr reasons.
;    39 --  05/03/12. made thread-safe (no file-level vars) [DEV multiple returns rqd?]
;    40 
;    41 --include builtins\VM\pUnassigned.e -- :%pRTErn (DEV/temp)
;    42 include builtins\VM\pPower.e
;    43 
;    44 --/* Not required for Phix (string is builtin):
;    45 type string(object o) return sequence(o) end type
;    46 --*/
;    47 
;    48 function round_str(string result, atom f, integer exponent, integer charflag, integer digit)--, integer minfieldwidth)
    mov esi,[ebp] (result)                ;#00449366: 213165 00                  uv 40 20  1   1      
    cmp esi,h4                            ;#00449369: 201376 00000040            uv 00 40  1   2 40   
    jl #00449378                          ;#0044936F: 174 07                     v  00 00  1   2      
    cmp byte[ebx+esi*4-1],#82             ;#00449371: 200174263 FF 82            u  00 48  2   3      
    je #00449382                          ;#00449376: 164 0A                     v  00 00  1   4      
    mov ecx,496                           ;#00449378: 271 F0010000               uv 02 00  1   5      
    call #00462D8D (:%opTcFail)           ;#0044937D: 350 0B9A0100               v  00 00  1   5      
;    49 --
;    50 -- Apply rounding to partially printed float, if required
;    51 --
;    52 integer tmp
;    53 integer dot, dotm1
;    54 --?result   --DOH, infinite loop! (use puts(1,<string>) instead!)
;    55 --1/11/22:
;    56 --integer one = iff(result[1]='-'?2:1)
;    57 integer one = iff(find(result[1],"-+")?2:1)
    mov edi,1                             ;#00449382: 277 01000000               uv 80 00  1   6      
    mov edx,496                           ;#00449387: 272 F0010000               vu 04 00  1   6      
    call #004610CE (:%pSubse1is)          ;#0044938C: 350 3D7D0100               v  00 00  1   7      
    mov [ebp-36] (symtab[505]),eax        ;#00449391: 211105 DC                  uv 00 21  1   8      
    mov ecx,8                             ;#00449394: 271 08000000               vu 02 00  1   8      
    mov edx,110                           ;#00449399: 272 6E000000               uv 04 00  1   9      
    call #00462C02 (:%opFrame) (find)     ;#0044939E: 350 5F980100               v  00 00  1   9      
    mov edi,[ebp+20] (prevebp)            ;#004493A3: 213175 14                  uv 80 20  1  10      
    mov eax,[edi-36]                      ;#004493A6: 213107 DC                  uv 01 80  1  13 80 *80*
    mov [ebp] (needle),eax                ;#004493A9: 211105 00                  uv 00 21  1  14 01   
    mov edi,[#00402200]                   ;#004493AC: 213075 00224000            vu 80 00  1  14      
    mov [ebp-4] (haystack),edi            ;#004493B2: 211175 FC                  uv 00 A0  1  15      
    add dword[ebx+edi*4-8],1              ;#004493B5: 203104273 F8 01            u  00 88  3  17    *80*
    mov [ebp+28] (retaddr),#004493C6      ;#004493BA: 307105 1C C6934400         vu 00 20  1  19      
    jmp #0045AADB (code:find)             ;#004493C1: 351 15170100               v  00 00  1  20      
    test eax,eax                          ;#004493C6: 205300                     uv 00 01  1  21      
    je #004493D3                          ;#004493C8: 164 09                     v  00 00  1  21      
    mov [ebp-40] (symtab[507]), dword 2   ;#004493CA: 307105 D8 02000000         uv 00 20  1  22      
    jmp #004493DA                         ;#004493D1: 353 07                     v  00 00  1  22      
    mov [ebp-40] (symtab[507]), dword 1   ;#004493D3: 307105 D8 01000000         uv 00 20  1  23      
    mov ecx,[ebp-40] (symtab[507])        ;#004493DA: 213115 D8                  vu 02 20  1  23      
    mov [ebp-32] (one),ecx                ;#004493DD: 211115 E0                  uv 00 22  1  24      
;    58     if exponent>=1 then
    mov esi,[ebp-8] (exponent)            ;#004493E0: 213165 F8                  vu 40 20  1  24      
    cmp esi,1                             ;#004493E3: 203376 01                  uv 00 40  1  25      
    jl #00449405                          ;#004493E6: 174 1D                     v  00 00  1  25      
;    59         f /= power(10,exponent)
    mov ecx,esi                           ;#004493E8: 211361                     uv 02 40  1  26      
    mov eax,10                            ;#004493EA: 270 0A000000               vu 01 00  1  26      
    lea edi,[ebp-44] (symtab[508])        ;#004493EF: 215175 D4                  uv 80 20  1  27      
    call #00463BFA (:%opPow)              ;#004493F2: 350 03A80100               v  00 00  1  27      
    lea edi,[ebp-4] (f)                   ;#004493F7: 215175 FC                  uv 80 20  1  28      
    mov ecx,[ebp-4] (f)                   ;#004493FA: 213115 FC                  vu 02 20  1  28      
    mov eax,[ebp-44] (symtab[508])        ;#004493FD: 213105 D4                  uv 01 20  1  29      
    call #0045F31D (:%opDiv)              ;#00449400: 350 185F0100               v  00 00  1  29      
;    60     end if
;    61 --2/12/18:
;    62 --  if f>5 or (f=5 and remainder(digit,2)=1) then
;    63     if f>5 or (f=5 and remainder(digit,2)=1) or digit=10 then
    mov edi,5                             ;#00449405: 277 05000000               uv 80 00  1  30      
    mov eax,[ebp-4] (f)                   ;#0044940A: 213105 FC                  vu 01 20  1  30      
    mov esi,46                            ;#0044940D: 276 2E000000               uv 40 00  1  31      
    mov edx,497                           ;#00449412: 272 F1010000               vu 04 00  1  31      
    call #0045F8B0 (:%opJcc)              ;#00449417: 350 94640100               v  00 00  1  32      
    jg #0044944B                          ;#0044941C: 177 2D                     v  00 00  1  33      
    mov edi,[ebp-4] (f)                   ;#0044941E: 213175 FC                  uv 80 20  1  34      
    cmp edi,5                             ;#00449421: 203377 05                  uv 00 80  1  35 80   
    jne #0044943F                         ;#00449424: 165 19                     v  00 00  1  35      
    lea edi,[ebp-44] (symtab[508])        ;#00449426: 215175 D4                  uv 80 20  1  36      
    mov eax,[ebp-16] (digit)              ;#00449429: 213105 F0                  vu 01 20  1  36      
    mov ecx,[DLL_THREAD_ATTACH]           ;#0044942C: 213015 40204000            uv 02 00  1  37      
    call #0045EF61 (:%opRmdr)             ;#00449432: 350 2A5B0100               v  00 00  1  37      
    mov esi,[ebp-44] (symtab[508])        ;#00449437: 213165 D4                  uv 40 20  1  38      
    cmp esi,1                             ;#0044943A: 203376 01                  uv 00 40  1  39 40   
    je #0044944B                          ;#0044943D: 164 0C                     v  00 00  1  39      
    mov edi,[ebp-16] (digit)              ;#0044943F: 213175 F0                  uv 80 20  1  40      
    cmp edi,10                            ;#00449442: 203377 0A                  uv 00 80  1  41 80   
    jne #00449636                         ;#00449445: 017205 EB010000            v  00 00  1  41      
;    64         for i=length(result) to one by -1 do
    mov eax,[ebp] (result)                ;#0044944B: 213105 00                  uv 01 20  1  42      
    mov ecx,[ebx+eax*4-12]                ;#0044944E: 213114203 F4               uv 02 09  1  45 01 *01*
    mov [ebp-36] (symtab[505]),ecx        ;#00449452: 211115 DC                  uv 00 22  1  46 02   
    mov esi,[ebp-32] (one)                ;#00449455: 213165 E0                  vu 40 20  1  46      
    mov [ebp-48] (symtab[509]),esi        ;#00449458: 211165 D0                  uv 00 60  1  47      
    mov [ebp-52] (i),ecx                  ;#0044945B: 211115 CC                  vu 00 22  1  47      
    cmp ecx,esi                           ;#0044945E: 073316                     uv 00 42  1  48      
    jl #00449636                          ;#00449460: 017214 D0010000            v  00 00  1  48      
;    65             dot = result[i]
    mov edi,[ebp-52] (i)                  ;#00449466: 213175 CC                  uv 80 20  1  49      
    mov esi,[ebp] (result)                ;#00449469: 213165 00                  vu 40 20  1  49      
    mov edx,496                           ;#0044946C: 272 F0010000               uv 04 00  1  50      
    call #004610CE (:%pSubse1is)          ;#00449471: 350 587C0100               v  00 00  1  50      
    mov [ebp-24] (dot),eax                ;#00449476: 211105 E8                  uv 00 21  1  51      
;    66             if dot='9' then
    cmp eax,57                            ;#00449479: 203370 39                  vu 00 01  1  51      
    jne #00449492                         ;#0044947C: 165 14                     v  00 00  1  52      
;    67                 result[i] = '0'
    mov edi,[ebp-52] (i)                  ;#0044947E: 213175 CC                  uv 80 20  1  53      
    mov ecx,48                            ;#00449481: 271 30000000               vu 02 00  1  53      
    mov esi,[ebp] (result)                ;#00449486: 213165 00                  uv 40 20  1  54      
    mov eax,ebp                           ;#00449489: 213305                     vu 01 20  1  54      
    call #004609EC (:%pRepe1is)           ;#0044948B: 350 5C750100               v  00 00  1  55      
    jmp #004494D0                         ;#00449490: 353 3E                     v  00 00  1  56      
;    68             elsif dot!='.' then
    cmp eax,46                            ;#00449492: 203370 2E                  uv 00 01  1  57      
    je #004494D0                          ;#00449495: 164 39                     v  00 00  1  57      
;    69 --              result[i] += 1      --DEV 26/9/9: try dot += 1 result[i] = dot... (better type info)
;    70                 dot += 1
    add eax,1                             ;#00449497: 203300 01                  uv 01 01  1  58      
    mov [ebp-24] (dot),eax                ;#0044949A: 211105 E8                  uv 00 21  1  59 01   
;    71                 result[i] = dot
    mov ecx,eax                           ;#0044949D: 211301                     vu 02 01  1  59      
    mov edi,[ebp-52] (i)                  ;#0044949F: 213175 CC                  uv 80 20  1  60      
    mov esi,[ebp] (result)                ;#004494A2: 213165 00                  vu 40 20  1  60      
    mov eax,ebp                           ;#004494A5: 213305                     uv 01 20  1  61      
    call #004607F3 (:%pRepe1)             ;#004494A7: 350 47730100               v  00 00  1  61      
    mov eax,[ebp] (result)                ;#004494AC: 213105 00                  uv 01 20  1  62      
    cmp eax,h4                            ;#004494AF: 075 00000040               uv 00 01  1  63 01   
    jl #004494C1                          ;#004494B4: 174 0B                     v  00 00  1  63      
    cmp byte[ebx+eax*4-1],#82             ;#004494B6: 200174203 FF 82            u  00 09  2  64      
    je #00449636                          ;#004494BB: 017204 75010000            v  00 00  1  65      
    mov ecx,496                           ;#004494C1: 271 F0010000               uv 02 00  1  66      
    call #00462D8D (:%opTcFail)           ;#004494C6: 350 C2980100               v  00 00  1  66      
;    72                 exit
    jmp #00449636                         ;#004494CB: 351 66010000               v  00 00  1  67      
;    73             end if
;    74             if i=one then
    mov ecx,[ebp-52] (i)                  ;#004494D0: 213115 CC                  uv 02 20  1  68      
    mov edi,[ebp-32] (one)                ;#004494D3: 213175 E0                  vu 80 20  1  68      
    cmp ecx,edi                           ;#004494D6: 071371                     uv 00 82  1  69      
    jne #00449622                         ;#004494D8: 017205 44010000            v  00 00  1  69      
;    75 --DEV: (oldschool, from when prepend string did not work) [prepend always yields T_Seq now anyways] [DEV: lies, 28/3/2014]
;    76 --              result = prepend(result,'1')
;    77                 if one=1 then
    cmp edi,1                             ;#004494DE: 203377 01                  uv 00 80  1  70      
    jne #00449514                         ;#004494E1: 165 31                     v  00 00  1  70      
;    78 --                  result = "1"&result
;    79                     result = '1'&result
    mov edx,ebp                           ;#004494E3: 213325                     uv 04 20  1  71      
    mov edi,ebp                           ;#004494E5: 213375                     vu 80 20  1  71      
    mov ecx,#0040220C                     ;#004494E7: 271 0C224000               uv 02 00  1  72      
    mov eax,1                             ;#004494EC: 270 01000000               vu 01 00  1  72      
    call #0045F9F7 (:%opApnd)             ;#004494F1: 350 01650100               v  00 00  1  73      
    mov esi,[ebp] (result)                ;#004494F6: 213165 00                  uv 40 20  1  74      
    cmp esi,h4                            ;#004494F9: 201376 00000040            uv 00 40  1  75 40   
    jl #00449508                          ;#004494FF: 174 07                     v  00 00  1  75      
    cmp byte[ebx+esi*4-1],#82             ;#00449501: 200174263 FF 82            u  00 48  2  76      
    je #0044954E                          ;#00449506: 164 46                     v  00 00  1  77      
    mov ecx,496                           ;#00449508: 271 F0010000               uv 02 00  1  78      
    call #00462D8D (:%opTcFail)           ;#0044950D: 350 7B980100               v  00 00  1  78      
    jmp #0044954E                         ;#00449512: 353 3A                     v  00 00  1  79      
;    80                 else
;    81 --                  result = "-1"&result[2..$]
;    82                     result = '-'&'1'&result[2..$]
    lea eax,[ebp-56] (symtab[515])        ;#00449514: 215105 C8                  uv 01 20  1  80      
    mov edi,2                             ;#00449517: 277 02000000               vu 80 00  1  80      
    mov ecx,-1                            ;#0044951C: 271 FFFFFFFF               uv 02 00  1  81      
    mov esi,[ebp] (result)                ;#00449521: 213165 00                  vu 40 20  1  81      
    mov edx,496                           ;#00449524: 272 F0010000               uv 04 00  1  82      
    call #00460C83 (:%pSubsss)            ;#00449529: 350 55770100               v  00 00  1  82      
    mov ecx,3                             ;#0044952E: 271 03000000               uv 02 00  1  83      
    push #0044954E                        ;#00449533: 150 4E954400               vu 00 00  1  83      
    push dword[ebp-56] (symtab[515])      ;#00449538: 377165 C8                  np 00 20  2  84      
    push dword[#0040220C]                 ;#0044953B: 377065 0C224000            np 00 00  2  86      
    push dword[#00402210]                 ;#00449541: 377065 10224000            np 00 00  2  88      
    mov eax,ebp                           ;#00449547: 213305                     uv 01 20  1  90      
    jmp #0045FF95 (:%opConcatN)           ;#00449549: 351 476A0100               v  00 00  1  90      
;    83                 end if
;    84                 if charflag!='f' then
    mov eax,[ebp-12] (charflag)           ;#0044954E: 213105 F4                  uv 01 20  1  91      
    cmp eax,102                           ;#00449551: 203370 66                  uv 00 01  1  92 01   
    je #00449622                          ;#00449554: 017204 C8000000            v  00 00  1  92      
;    85                     dot = find('.',result)
    mov ecx,8                             ;#0044955A: 271 08000000               uv 02 00  1  93      
    mov edx,110                           ;#0044955F: 272 6E000000               vu 04 00  1  93      
    call #00462C02 (:%opFrame) (find)     ;#00449564: 350 99960100               v  00 00  1  94      
    mov [ebp] (needle), dword 46          ;#00449569: 307105 00 2E000000         uv 00 20  1  95      
    mov edi,[ebp+20] (prevebp)            ;#00449570: 213175 14                  vu 80 20  1  95      
    mov eax,[edi]                         ;#00449573: 213007                     uv 01 80  1  98    *80*
    xor ebx,ebx                           ;#00449575: 061333                     vu 08 08  1  98      
    cmp eax,h4                            ;#00449577: 075 00000040               uv 00 01  1  99      
    jl #00449588                          ;#0044957C: 174 0A                     v  00 00  1  99      
    add dword[ebx+eax*4-8],1              ;#0044957E: 203104203 F8 01            u  00 09  3 100      
    cmp eax,496                           ;#00449583: 075 F0010000               vu 00 01  1 102      
    mov [ebp-4] (haystack),eax            ;#00449588: 211105 FC                  uv 00 21  1 103      
    mov [ebp+28] (retaddr),#00449597      ;#0044958B: 307105 1C 97954400         vu 00 20  1 103      
    jmp #0045AADB (code:find)             ;#00449592: 351 44150100               v  00 00  1 104      
    mov [ebp-24] (dot),eax                ;#00449597: 211105 E8                  uv 00 21  1 105      
;    86                     if dot then
    test eax,eax                          ;#0044959A: 205300                     vu 00 01  1 105      
    je #00449622                          ;#0044959C: 017204 80000000            v  00 00  1 106      
;    87                         dotm1 = dot-1
    sub eax,1                             ;#004495A2: 203350 01                  uv 01 01  1 107      
    mov edx,eax                           ;#004495A5: 213320                     uv 04 01  1 108 01   
    mov [ebp-28] (dotm1),eax              ;#004495A7: 211105 E4                  vu 00 21  1 108      
    shl edx,1                             ;#004495AA: 321342                     u  04 04  1 109      
    jno #004495B6                         ;#004495AC: 161 08                     v  00 00  1 109      
    lea edi,[ebp-28] (dotm1)              ;#004495AE: 215175 E4                  uv 80 20  1 110      
    call #00462764 (:%e01tcfAddiii)       ;#004495B1: 350 AE910100               v  00 00  1 110      
;    88                         result[dot] = result[dotm1]
    mov edi,eax                           ;#004495B6: 211307                     uv 80 01  1 111      
    mov esi,[ebp] (result)                ;#004495B8: 213165 00                  vu 40 20  1 111      
    mov edx,496                           ;#004495BB: 272 F0010000               uv 04 00  1 112      
    call #004610CE (:%pSubse1is)          ;#004495C0: 350 097B0100               v  00 00  1 112      
    mov [ebp-60] (symtab[517]),eax        ;#004495C5: 211105 C4                  uv 00 21  1 113      
    mov ecx,eax                           ;#004495C8: 211301                     vu 02 01  1 113      
    mov edi,[ebp-24] (dot)                ;#004495CA: 213175 E8                  uv 80 20  1 114      
    mov esi,[ebp] (result)                ;#004495CD: 213165 00                  vu 40 20  1 114      
    mov eax,ebp                           ;#004495D0: 213305                     uv 01 20  1 115      
    call #004607F3 (:%pRepe1)             ;#004495D2: 350 1C720100               v  00 00  1 115      
    mov [ebp-60] (symtab[517]),ebx        ;#004495D7: 211135 C4                  uv 00 28  1 116      
    mov eax,[ebp] (result)                ;#004495DA: 213105 00                  vu 01 20  1 116      
    cmp eax,h4                            ;#004495DD: 075 00000040               uv 00 01  1 117      
    jl #004495EB                          ;#004495E2: 174 07                     v  00 00  1 117      
    cmp byte[ebx+eax*4-1],#82             ;#004495E4: 200174203 FF 82            u  00 09  2 118      
    je #004495F5                          ;#004495E9: 164 0A                     v  00 00  1 119      
    mov ecx,496                           ;#004495EB: 271 F0010000               uv 02 00  1 120      
    call #00462D8D (:%opTcFail)           ;#004495F0: 350 98970100               v  00 00  1 120      
;    89 --                      result[dotm1] = '.'
;    90                         result[dotm1] = '!'
    mov esi,eax                           ;#004495F5: 211306                     uv 40 01  1 121      
    mov edi,[ebp-28] (dotm1)              ;#004495F7: 213175 E4                  vu 80 20  1 121      
    mov ecx,33                            ;#004495FA: 271 21000000               uv 02 00  1 122      
    mov eax,ebp                           ;#004495FF: 213305                     vu 01 20  1 122      
    call #004607F3 (:%pRepe1)             ;#00449601: 350 ED710100               v  00 00  1 123      
    mov ecx,[ebp] (result)                ;#00449606: 213115 00                  uv 02 20  1 124      
    cmp ecx,h4                            ;#00449609: 201371 00000040            uv 00 02  1 125 02   
    jl #00449618                          ;#0044960F: 174 07                     v  00 00  1 125      
    cmp byte[ebx+ecx*4-1],#82             ;#00449611: 200174213 FF 82            u  00 0A  2 126      
    je #00449622                          ;#00449616: 164 0A                     v  00 00  1 127      
    mov ecx,496                           ;#00449618: 271 F0010000               uv 02 00  1 128      
    call #00462D8D (:%opTcFail)           ;#0044961D: 350 6B970100               v  00 00  1 128      
;    91 --DEV gives bounds error...
;    92 --DEV I suppose we should check it is a '0' as well.
;    93 --                      result = result[1..length(result)-1]
;    94 --                      exponent += 1
;    95                     end if
;    96                 end if
;    97             end if
;    98         end for
    mov eax,[ebp-52] (i)                  ;#00449622: 213105 CC                  uv 01 20  1 129      
    mov esi,[ebp-48] (symtab[509])        ;#00449625: 213165 D0                  vu 40 20  1 129      
    add eax,-1                            ;#00449628: 203300 FF                  uv 01 01  1 130      
    cmp eax,esi                           ;#0044962B: 073306                     uv 00 41  1 131 01   
    mov [ebp-52] (i),eax                  ;#0044962D: 211105 CC                  vu 00 21  1 131      
    jge #00449466                         ;#00449630: 017215 30FEFFFF            v  00 00  1 132      
;    99     end if
;   100 --  if charflag='g' then
;   101 --  if charflag='g' and find('.',result) then   -- find '.' added 9/3/6
;   102     if charflag='g' 
    mov edi,[ebp-12] (charflag)           ;#00449636: 213175 F4                  uv 80 20  1 133      
    cmp edi,103                           ;#00449639: 203377 67                  uv 00 80  1 134 80   
    jne #0044974A                         ;#0044963C: 017205 08010000            v  00 00  1 134      
;   103     and (find('.',result) or find('!',result)) then
    mov ecx,8                             ;#00449642: 271 08000000               uv 02 00  1 135      
    mov edx,110                           ;#00449647: 272 6E000000               vu 04 00  1 135      
    call #00462C02 (:%opFrame) (find)     ;#0044964C: 350 B1950100               v  00 00  1 136      
    mov [ebp] (needle), dword 46          ;#00449651: 307105 00 2E000000         uv 00 20  1 137      
    mov edi,[ebp+20] (prevebp)            ;#00449658: 213175 14                  vu 80 20  1 137      
    mov eax,[edi]                         ;#0044965B: 213007                     uv 01 80  1 140    *80*
    xor ebx,ebx                           ;#0044965D: 061333                     vu 08 08  1 140      
    cmp eax,h4                            ;#0044965F: 075 00000040               uv 00 01  1 141      
    jl #00449670                          ;#00449664: 174 0A                     v  00 00  1 141      
    add dword[ebx+eax*4-8],1              ;#00449666: 203104203 F8 01            u  00 09  3 142      
    cmp eax,496                           ;#0044966B: 075 F0010000               vu 00 01  1 144      
    mov [ebp-4] (haystack),eax            ;#00449670: 211105 FC                  uv 00 21  1 145      
    mov [ebp+28] (retaddr),#0044967F      ;#00449673: 307105 1C 7F964400         vu 00 20  1 145      
    jmp #0045AADB (code:find)             ;#0044967A: 351 5C140100               v  00 00  1 146      
    test eax,eax                          ;#0044967F: 205300                     uv 00 01  1 147      
    jne #004496C8                         ;#00449681: 165 45                     v  00 00  1 147      
    mov ecx,8                             ;#00449683: 271 08000000               uv 02 00  1 148      
    mov edx,110                           ;#00449688: 272 6E000000               vu 04 00  1 148      
    call #00462C02 (:%opFrame) (find)     ;#0044968D: 350 70950100               v  00 00  1 149      
    mov [ebp] (needle), dword 33          ;#00449692: 307105 00 21000000         uv 00 20  1 150      
    mov edi,[ebp+20] (prevebp)            ;#00449699: 213175 14                  vu 80 20  1 150      
    mov eax,[edi]                         ;#0044969C: 213007                     uv 01 80  1 153    *80*
    xor ebx,ebx                           ;#0044969E: 061333                     vu 08 08  1 153      
    cmp eax,h4                            ;#004496A0: 075 00000040               uv 00 01  1 154      
    jl #004496B1                          ;#004496A5: 174 0A                     v  00 00  1 154      
    add dword[ebx+eax*4-8],1              ;#004496A7: 203104203 F8 01            u  00 09  3 155      
    cmp eax,496                           ;#004496AC: 075 F0010000               vu 00 01  1 157      
    mov [ebp-4] (haystack),eax            ;#004496B1: 211105 FC                  uv 00 21  1 158      
    mov [ebp+28] (retaddr),#004496C0      ;#004496B4: 307105 1C C0964400         vu 00 20  1 158      
    jmp #0045AADB (code:find)             ;#004496BB: 351 1B140100               v  00 00  1 159      
    test eax,eax                          ;#004496C0: 205300                     uv 00 01  1 160      
    je #0044974A                          ;#004496C2: 017204 82000000            v  00 00  1 160      
;   104         tmp = length(result)
    mov ecx,[ebp] (result)                ;#004496C8: 213115 00                  uv 02 20  1 161      
    mov esi,[ebx+ecx*4-12]                ;#004496CB: 213164213 F4               uv 40 0A  1 164 02 *02*
    mov [ebp-20] (tmp),esi                ;#004496CF: 211165 EC                  uv 00 60  1 165 40   
;   105 --14/1/15:
;   106 --      while tmp>1 and tmp>minfieldwidth do
;   107         while tmp>1 do
    mov edi,[ebp-20] (tmp)                ;#004496D2: 213175 EC                  vu 80 20  1 165      
    cmp edi,1                             ;#004496D5: 203377 01                  uv 00 80  1 166      
    jle #0044972B                         ;#004496D8: 176 51                     v  00 00  1 166      
;   108             dot = result[tmp]
    mov esi,[ebp] (result)                ;#004496DA: 213165 00                  uv 40 20  1 167      
    mov edx,496                           ;#004496DD: 272 F0010000               vu 04 00  1 167      
    call #004610CE (:%pSubse1is)          ;#004496E2: 350 E7790100               v  00 00  1 168      
    mov [ebp-24] (dot),eax                ;#004496E7: 211105 E8                  uv 00 21  1 169      
;   109 -- 20/10/15: sprintf("%g",1e-14) was yielding "1e-15"!! It now keeps the the trailing '!' to adjust exponent.
;   110 --          if dot='.' 
;   111 --          or dot='!' then
;   112             if dot='!' then exit end if
    cmp eax,33                            ;#004496EA: 203370 21                  vu 00 01  1 169      
    je #0044972B                          ;#004496ED: 164 3C                     v  00 00  1 170      
;   113             if dot='.' then
    cmp eax,46                            ;#004496EF: 203370 2E                  uv 00 01  1 171      
    jne #0044970D                         ;#004496F2: 165 19                     v  00 00  1 171      
;   114                 tmp -= 1
    mov ecx,[ebp-20] (tmp)                ;#004496F4: 213115 EC                  uv 02 20  1 172      
    sub ecx,1                             ;#004496F7: 203351 01                  uv 02 02  1 173 02   
    mov edx,ecx                           ;#004496FA: 213321                     uv 04 02  1 174 02   
    mov [ebp-20] (tmp),ecx                ;#004496FC: 211115 EC                  vu 00 22  1 174      
    shl edx,1                             ;#004496FF: 321342                     u  04 04  1 175      
    jno #0044972B                         ;#00449701: 161 28                     v  00 00  1 175      
    lea edi,[ebp-20] (tmp)                ;#00449703: 215175 EC                  uv 80 20  1 176      
    call #00462764 (:%e01tcfAddiii)       ;#00449706: 350 59900100               v  00 00  1 176      
;   115                 exit
    jmp #0044972B                         ;#0044970B: 353 1E                     v  00 00  1 177      
;   116             end if
;   117             if dot!='0' then exit end if
    cmp eax,48                            ;#0044970D: 203370 30                  uv 00 01  1 178      
    jne #0044972B                         ;#00449710: 165 19                     v  00 00  1 178      
;   118             tmp -= 1
    mov edi,[ebp-20] (tmp)                ;#00449712: 213175 EC                  uv 80 20  1 179      
    sub edi,1                             ;#00449715: 203357 01                  uv 80 80  1 180 80   
    mov edx,edi                           ;#00449718: 213327                     uv 04 80  1 181 80   
    mov [ebp-20] (tmp),edi                ;#0044971A: 211175 EC                  vu 00 A0  1 181      
    shl edx,1                             ;#0044971D: 321342                     u  04 04  1 182      
    jno #004496D2                         ;#0044971F: 161 B1                     v  00 00  1 182      
    lea edi,[ebp-20] (tmp)                ;#00449721: 215175 EC                  uv 80 20  1 183      
    call #00462764 (:%e01tcfAddiii)       ;#00449724: 350 3B900100               v  00 00  1 183      
;   119         end while
    jmp #004496D2                         ;#00449729: 353 A7                     v  00 00  1 184      
;   120         result = result[1..tmp]
    mov edx,ebp                           ;#0044972B: 213325                     uv 04 20  1 185      
    mov ecx,1                             ;#0044972D: 271 01000000               vu 02 00  1 185      
    push #0044974A                        ;#00449732: 150 4A974400               uv 00 00  1 186      
    push edx                              ;#00449737: 122                        vu 00 04  1 186      
    push dword[ebp-20] (tmp)              ;#00449738: 377165 EC                  np 00 20  2 187      
    push 1                                ;#0044973B: 152 01                     uv 00 00  1 189      
    mov esi,[ebp] (result)                ;#0044973D: 213165 00                  vu 40 20  1 189      
    mov edx,496                           ;#00449740: 272 F0010000               uv 04 00  1 190      
    jmp #00460A75 (:%pSubss)              ;#00449745: 351 2B730100               v  00 00  1 190      
;   121     end if
;   122     return result
    mov eax,[ebp] (result)                ;#0044974A: 213105 00                  uv 01 20  1 191      
    mov [ebp] (result),ebx                ;#0044974D: 211135 00                  vu 00 28  1 191      
    jmp #00462C8F (:%opRetf)              ;#00449750: 351 3A950100               v  00 00  1 192      
;   123 end function
;   124 
;   125 integer init2
;   126         init2 = 0
;   127 
;   128 atom inf,nan
;   129 
;   130 -- do we still need these?? (yes)
;   131 function Nan() -- thread-safe alternative to "nan"
;   132     string res = repeat('n',3)
    mov ecx,6                             ;#00449E7F: 271 06000000               uv 02 00  1   1      
    mov edx,206                           ;#00449E84: 272 CE000000               vu 04 00  1   1      
    call :%opFrame (repeatch)             ;#00449E89: 350 748D0100               v  00 00  1   2      
    mov [ebp] (ch), dword 110             ;#00449E8E: 307105 00 6E000000         uv 00 20  1   3      
    mov [ebp-4] (n), dword 3              ;#00449E95: 307105 FC 03000000         vu 00 20  1   3      
    mov [ebp+28] (retaddr),#00449EA8      ;#00449E9C: 307105 1C A89E4400         uv 00 20  1   4      
    jmp #0045581E (code:repeatch)         ;#00449EA3: 351 76B90000               v  00 00  1   4      
    mov [ebp] (res),eax                   ;#00449EA8: 211105 00                  uv 00 21  1   5      
;   133     res[2] = 'a'
    mov esi,eax                           ;#00449EAB: 211306                     vu 40 01  1   5      
    mov edi,[DLL_THREAD_ATTACH]           ;#00449EAD: 213075 40204000            uv 80 00  1   6      
    mov ecx,97                            ;#00449EB3: 271 61000000               vu 02 00  1   6      
    mov eax,ebp                           ;#00449EB8: 213305                     uv 01 20  1   7      
    call #004609EC (:%pRepe1is)           ;#00449EBA: 350 2D6B0100               v  00 00  1   7      
;   134     return res
    mov eax,[ebp] (res)                   ;#00449EBF: 213105 00                  uv 01 20  1   8      
    mov [ebp] (res),ebx                   ;#00449EC2: 211135 00                  vu 00 28  1   8      
    jmp #00462C8F (:%opRetf)              ;#00449EC5: 351 C58D0100               v  00 00  1   9      
;   135 end function
;   136 
;   137 function Inf() -- thread-safe alternative to "inf"
;   138     string res = repeat('i',3)
    mov ecx,6                             ;#00449E1F: 271 06000000               uv 02 00  1   1      
    mov edx,206                           ;#00449E24: 272 CE000000               vu 04 00  1   1      
    call :%opFrame (repeatch)             ;#00449E29: 350 D48D0100               v  00 00  1   2      
    mov [ebp] (ch), dword 105             ;#00449E2E: 307105 00 69000000         uv 00 20  1   3      
    mov [ebp-4] (n), dword 3              ;#00449E35: 307105 FC 03000000         vu 00 20  1   3      
    mov [ebp+28] (retaddr),#00449E48      ;#00449E3C: 307105 1C 489E4400         uv 00 20  1   4      
    jmp #0045581E (code:repeatch)         ;#00449E43: 351 D6B90000               v  00 00  1   4      
    mov [ebp] (res),eax                   ;#00449E48: 211105 00                  uv 00 21  1   5      
;   139     res[2] = 'n'
    mov esi,eax                           ;#00449E4B: 211306                     vu 40 01  1   5      
    mov edi,[DLL_THREAD_ATTACH]           ;#00449E4D: 213075 40204000            uv 80 00  1   6      
    mov ecx,110                           ;#00449E53: 271 6E000000               vu 02 00  1   6      
    mov eax,ebp                           ;#00449E58: 213305                     uv 01 20  1   7      
    call #004609EC (:%pRepe1is)           ;#00449E5A: 350 8D6B0100               v  00 00  1   7      
;   140     res[3] = 'f'
    mov edi,[DLL_THREAD_DETACH]           ;#00449E5F: 213075 44204000            uv 80 00  1   8      
    mov ecx,102                           ;#00449E65: 271 66000000               vu 02 00  1   8      
    mov esi,[ebp] (res)                   ;#00449E6A: 213165 00                  uv 40 20  1   9      
    mov eax,ebp                           ;#00449E6D: 213305                     vu 01 20  1   9      
    call #004609EC (:%pRepe1is)           ;#00449E6F: 350 786B0100               v  00 00  1  10      
;   141     return res
    mov eax,[ebp] (res)                   ;#00449E74: 213105 00                  uv 01 20  1  11      
    mov [ebp] (res),ebx                   ;#00449E77: 211135 00                  vu 00 28  1  11      
    jmp #00462C8F (:%opRetf)              ;#00449E7A: 351 108E0100               v  00 00  1  12      
;   142 end function
;   143 
;   144 function sprintf2(atom pf, integer charflag, integer showplus, integer minfieldwidth, integer precision)
    mov ecx,[ebp] (pf)                    ;#00448102: 213115 00                  uv 02 20  1   1      
    cmp ecx,h4                            ;#00448105: 201371 00000040            uv 00 02  1   2 02   
    jl #0044811E                          ;#0044810B: 174 11                     v  00 00  1   2      
    cmp byte[ebx+ecx*4-1],#12             ;#0044810D: 200174213 FF 12            u  00 0A  2   3      
    je #0044811E                          ;#00448112: 164 0A                     v  00 00  1   4      
    mov ecx,534                           ;#00448114: 271 16020000               uv 02 00  1   5      
    call #00462D8D (:%opTcFail)           ;#00448119: 350 6FAC0100               v  00 00  1   5      
    mov esi,[ebp-4] (charflag)            ;#0044811E: 213165 FC                  uv 40 20  1   6      
    cmp esi,h4                            ;#00448121: 201376 00000040            uv 00 40  1   7 40   
    jl #00448133                          ;#00448127: 174 0A                     v  00 00  1   7      
    mov ecx,535                           ;#00448129: 271 17020000               uv 02 00  1   8      
    call #00462D8D (:%opTcFail)           ;#0044812E: 350 5AAC0100               v  00 00  1   8      
    mov edi,[ebp-16] (precision)          ;#00448133: 213175 F0                  uv 80 20  1   9      
    cmp edi,h4                            ;#00448136: 201377 00000040            uv 00 80  1  10 80   
    jl #00448148                          ;#0044813C: 174 0A                     v  00 00  1  10      
    mov ecx,538                           ;#0044813E: 271 1A020000               uv 02 00  1  11      
    call #00462D8D (:%opTcFail)           ;#00448143: 350 45AC0100               v  00 00  1  11      
;   145 integer dotdone, nzdigitprinted
;   146 string reve
;   147 integer revelen
;   148 integer expadj
;   149 integer capE    -- 'e' or 'E'
;   150 integer ewk
;   151 integer tmp
;   152 integer digit
;   153 atom f, fwk, epwr
;   154 string result
;   155 integer exponent, k
;   156 
;   157 --?result   --DOH, infinite loop! (use puts(1,<string>) instead!)
;   158     f = pf
    mov [ebp-56] (f),ecx                  ;#00448148: 211115 C8                  uv 00 22  1  12      
    cmp ecx,h4                            ;#0044814B: 201371 00000040            vu 00 02  1  12      
    jl #00448158                          ;#00448151: 174 05                     v  00 00  1  13      
    add dword[ebx+ecx*4-8],1              ;#00448153: 203104213 F8 01            u  00 0A  3  14      
;   159 --  result = ""
;   160     result = repeat(' ',0)
    mov ecx,6                             ;#00448158: 271 06000000               vu 02 00  1  16      
    mov edx,206                           ;#0044815D: 272 CE000000               uv 04 00  1  17      
    call :%opFrame (repeatch)             ;#00448162: 350 9BAA0100               v  00 00  1  17      
    mov [ebp] (ch), dword 32              ;#00448167: 307105 00 20000000         uv 00 20  1  18      
    mov [ebp-4] (n),ebx                   ;#0044816E: 211135 FC                  vu 00 28  1  18      
    mov [ebp+28] (retaddr),#0044817D      ;#00448171: 307105 1C 7D814400         uv 00 20  1  19      
    jmp #0045581E (code:repeatch)         ;#00448178: 351 A1D60000               v  00 00  1  19      
    mov [ebp-68] (result),eax             ;#0044817D: 211105 BC                  uv 00 21  1  20      
;   161     dotdone = 0
    mov [ebp-20] (dotdone),ebx            ;#00448180: 211135 EC                  vu 00 28  1  20      
;   162     nzdigitprinted = 0
    mov [ebp-24] (nzdigitprinted),ebx     ;#00448183: 211135 E8                  uv 00 28  1  21      
;   163     if f=nan then
    mov edi,[#00402228] (nan)             ;#00448186: 213075 28224000            vu 80 00  1  21      
    mov eax,[ebp-56] (f)                  ;#0044818C: 213105 C8                  uv 01 20  1  22      
    mov esi,522                           ;#0044818F: 276 0A020000               vu 40 00  1  22      
    mov edx,548                           ;#00448194: 272 24020000               uv 04 00  1  23      
    call #0045F91F (:%opJccE)             ;#00448199: 350 81770100               v  00 00  1  23      
    jne #004481C0                         ;#0044819E: 165 20                     v  00 00  1  24      
;   164 --DEV not thread safe
;   165 --      return "nan"
;   166         return Nan()
    mov ecx,1                             ;#004481A0: 271 01000000               uv 02 00  1  25      
    mov edx,524                           ;#004481A5: 272 0C020000               vu 04 00  1  25      
    call #00462C02 (:%opFrame) (Nan)      ;#004481AA: 350 53AA0100               v  00 00  1  26      
    mov [ebp+28] (retaddr),#004481BB      ;#004481AF: 307105 1C BB814400         uv 00 20  1  27      
    jmp #00449E7F (code:Nan)              ;#004481B6: 351 C41C0000               v  00 00  1  27      
    jmp #00462C8F (:%opRetf)              ;#004481BB: 351 CFAA0100               v  00 00  1  28      
;   167     end if
;   168     if f<0 then
    xor edi,edi                           ;#004481C0: 061377                     uv 80 80  1  29      
    mov eax,[ebp-56] (f)                  ;#004481C2: 213105 C8                  vu 01 20  1  29      
    mov esi,25                            ;#004481C5: 276 19000000               uv 40 00  1  30      
    mov edx,548                           ;#004481CA: 272 24020000               vu 04 00  1  30      
    call #0045F8B0 (:%opJcc)              ;#004481CF: 350 DC760100               v  00 00  1  31      
    jge #00448229                         ;#004481D4: 175 53                     v  00 00  1  32      
;   169 --      result = "-"
;   170         result = repeat('-',1)
    mov ecx,6                             ;#004481D6: 271 06000000               uv 02 00  1  33      
    mov edx,206                           ;#004481DB: 272 CE000000               vu 04 00  1  33      
    call :%opFrame (repeatch)             ;#004481E0: 350 1DAA0100               v  00 00  1  34      
    mov [ebp] (ch), dword 45              ;#004481E5: 307105 00 2D000000         uv 00 20  1  35      
    mov [ebp-4] (n), dword 1              ;#004481EC: 307105 FC 01000000         vu 00 20  1  35      
    mov [ebp+28] (retaddr),#004481FF      ;#004481F3: 307105 1C FF814400         uv 00 20  1  36      
    jmp #0045581E (code:repeatch)         ;#004481FA: 351 1FD60000               v  00 00  1  36      
    push eax                              ;#004481FF: 120                        uv 00 01  1  37      
    mov esi,[ebp-68] (result)             ;#00448200: 213165 BC                  vu 40 20  1  37      
    cmp esi,h4                            ;#00448203: 201376 00000040            uv 00 40  1  38      
    jle #00448219                         ;#00448209: 176 0E                     v  00 00  1  38      
    sub dword[ebx+esi*4-8],1              ;#0044820B: 203154263 F8 01            u  00 48  3  39      
    jne #00448219                         ;#00448210: 165 07                     v  00 00  1  41      
    mov edx,esi                           ;#00448212: 213326                     uv 04 40  1  42      
    call #004639A8 (:%pDealloc)           ;#00448214: 350 8FB70100               v  00 00  1  42      
    pop dword[ebp-68] (result)            ;#00448219: 217105 BC                  np 00 20  3  43      
;   171         f = -f
    lea edi,[ebp-56] (f)                  ;#0044821C: 215175 C8                  uv 80 20  1  46      
    mov ecx,[ebp-56] (f)                  ;#0044821F: 213115 C8                  vu 02 20  1  46      
    call #0045F51F (:%opUminus)           ;#00448222: 350 F8720100               v  00 00  1  47      
    jmp #00448294                         ;#00448227: 353 6B                     v  00 00  1  48      
;   172     elsif showplus then
    mov edi,[ebp-8] (showplus)            ;#00448229: 213175 F8                  uv 80 20  1  49      
    test edi,edi                          ;#0044822C: 205377                     uv 00 80  1  50 80   
    je #00448294                          ;#0044822E: 164 64                     v  00 00  1  50      
;   173 --      result = "+"
;   174 --      result = repeat('+',1)
;   175         result = repeat(showplus,1) -- '+' or ' '
    mov ecx,12                            ;#00448230: 271 0C000000               uv 02 00  1  51      
    mov edx,240                           ;#00448235: 272 F0000000               vu 04 00  1  51      
    call #00462C02 (:%opFrame) (repeat)   ;#0044823A: 350 C3A90100               v  00 00  1  52      
    mov edi,[ebp+20] (prevebp)            ;#0044823F: 213175 14                  uv 80 20  1  53      
    mov eax,[edi-8]                       ;#00448242: 213107 F8                  uv 01 80  1  56 80 *80*
    mov [ebp] (x),eax                     ;#00448245: 211105 00                  uv 00 21  1  57 01   
    mov [ebp-4] (n), dword 1              ;#00448248: 307105 FC 01000000         vu 00 20  1  57      
    mov [ebp+28] (retaddr),#0044825B      ;#0044824F: 307105 1C 5B824400         uv 00 20  1  58      
    jmp #00451195 (code:repeat)           ;#00448256: 351 3A8F0000               v  00 00  1  58      
    push eax                              ;#0044825B: 120                        uv 00 01  1  59      
    mov esi,[ebp-68] (result)             ;#0044825C: 213165 BC                  vu 40 20  1  59      
    cmp esi,h4                            ;#0044825F: 201376 00000040            uv 00 40  1  60      
    jle #00448275                         ;#00448265: 176 0E                     v  00 00  1  60      
    sub dword[ebx+esi*4-8],1              ;#00448267: 203154263 F8 01            u  00 48  3  61      
    jne #00448275                         ;#0044826C: 165 07                     v  00 00  1  63      
    mov edx,esi                           ;#0044826E: 213326                     uv 04 40  1  64      
    call #004639A8 (:%pDealloc)           ;#00448270: 350 33B70100               v  00 00  1  64      
    pop dword[ebp-68] (result)            ;#00448275: 217105 BC                  np 00 20  3  65      
    mov ecx,[ebp-68] (result)             ;#00448278: 213115 BC                  uv 02 20  1  68      
    cmp ecx,h4                            ;#0044827B: 201371 00000040            uv 00 02  1  69 02   
    jl #0044828A                          ;#00448281: 174 07                     v  00 00  1  69      
    cmp byte[ebx+ecx*4-1],#82             ;#00448283: 200174213 FF 82            u  00 0A  2  70      
    je #00448294                          ;#00448288: 164 0A                     v  00 00  1  71      
    mov ecx,551                           ;#0044828A: 271 27020000               uv 02 00  1  72      
    call #00462D8D (:%opTcFail)           ;#0044828F: 350 F9AA0100               v  00 00  1  72      
;   176     end if
;   177     exponent = 0
    mov [ebp-72] (exponent),ebx           ;#00448294: 211135 B8                  uv 00 28  1  73      
;   178     if f=nan then
    mov edi,[#00402228] (nan)             ;#00448297: 213075 28224000            vu 80 00  1  73      
    mov eax,[ebp-56] (f)                  ;#0044829D: 213105 C8                  uv 01 20  1  74      
    mov esi,522                           ;#004482A0: 276 0A020000               vu 40 00  1  74      
    mov edx,548                           ;#004482A5: 272 24020000               uv 04 00  1  75      
    call #0045F91F (:%opJccE)             ;#004482AA: 350 70760100               v  00 00  1  75      
    jne #00448302                         ;#004482AF: 165 51                     v  00 00  1  76      
;   179 --      return result&"nan"
;   180         return result&Nan()
    mov ecx,1                             ;#004482B1: 271 01000000               uv 02 00  1  77      
    mov edx,524                           ;#004482B6: 272 0C020000               vu 04 00  1  77      
    call #00462C02 (:%opFrame) (Nan)      ;#004482BB: 350 42A90100               v  00 00  1  78      
    mov [ebp+28] (retaddr),#004482CC      ;#004482C0: 307105 1C CC824400         uv 00 20  1  79      
    jmp #00449E7F (code:Nan)              ;#004482C7: 351 B31B0000               v  00 00  1  79      
    push eax                              ;#004482CC: 120                        uv 00 01  1  80      
    mov esi,[ebp-80] (symtab[554])        ;#004482CD: 213165 B0                  vu 40 20  1  80      
    cmp esi,h4                            ;#004482D0: 201376 00000040            uv 00 40  1  81      
    jle #004482E6                         ;#004482D6: 176 0E                     v  00 00  1  81      
    sub dword[ebx+esi*4-8],1              ;#004482D8: 203154263 F8 01            u  00 48  3  82      
    jne #004482E6                         ;#004482DD: 165 07                     v  00 00  1  84      
    mov edx,esi                           ;#004482DF: 213326                     uv 04 40  1  85      
    call #004639A8 (:%pDealloc)           ;#004482E1: 350 C2B60100               v  00 00  1  85      
    pop dword[ebp-80] (symtab[554])       ;#004482E6: 217105 B0                  np 00 20  3  86      
    lea edx,[ebp-84] (symtab[555])        ;#004482E9: 215125 AC                  uv 04 20  1  89      
    lea edi,[ebp-68] (result)             ;#004482EC: 215175 BC                  vu 80 20  1  89      
    lea ecx,[ebp-80] (symtab[554])        ;#004482EF: 215115 B0                  uv 02 20  1  90      
    call #0045FD65 (:%opConcat)           ;#004482F2: 350 6E7A0100               v  00 00  1  90      
    mov eax,[ebp-84] (symtab[555])        ;#004482F7: 213105 AC                  uv 01 20  1  91      
    mov [ebp-84] (symtab[555]),ebx        ;#004482FA: 211135 AC                  vu 00 28  1  91      
    jmp #00462C8F (:%opRetf)              ;#004482FD: 351 8DA90100               v  00 00  1  92      
;   181     end if
;   182     if f=inf then
    mov edi,[#00402224] (inf)             ;#00448302: 213075 24224000            uv 80 00  1  93      
    mov eax,[ebp-56] (f)                  ;#00448308: 213105 C8                  vu 01 20  1  93      
    mov esi,521                           ;#0044830B: 276 09020000               uv 40 00  1  94      
    mov edx,548                           ;#00448310: 272 24020000               vu 04 00  1  94      
    call #0045F91F (:%opJccE)             ;#00448315: 350 05760100               v  00 00  1  95      
    jne #0044836D                         ;#0044831A: 165 51                     v  00 00  1  96      
;   183 --      return result&"inf"
;   184         return result&Inf()
    mov ecx,1                             ;#0044831C: 271 01000000               uv 02 00  1  97      
    mov edx,529                           ;#00448321: 272 11020000               vu 04 00  1  97      
    call #00462C02 (:%opFrame) (Inf)      ;#00448326: 350 D7A80100               v  00 00  1  98      
    mov [ebp+28] (retaddr),#00448337      ;#0044832B: 307105 1C 37834400         uv 00 20  1  99      
    jmp #00449E1F (code:Inf)              ;#00448332: 351 E81A0000               v  00 00  1  99      
    push eax                              ;#00448337: 120                        uv 00 01  1 100      
    mov ecx,[ebp-84] (symtab[555])        ;#00448338: 213115 AC                  vu 02 20  1 100      
    cmp ecx,h4                            ;#0044833B: 201371 00000040            uv 00 02  1 101      
    jle #00448351                         ;#00448341: 176 0E                     v  00 00  1 101      
    sub dword[ebx+ecx*4-8],1              ;#00448343: 203154213 F8 01            u  00 0A  3 102      
    jne #00448351                         ;#00448348: 165 07                     v  00 00  1 104      
    mov edx,ecx                           ;#0044834A: 213321                     uv 04 02  1 105      
    call #004639A8 (:%pDealloc)           ;#0044834C: 350 57B60100               v  00 00  1 105      
    pop dword[ebp-84] (symtab[555])       ;#00448351: 217105 AC                  np 00 20  3 106      
    lea edx,[ebp-80] (symtab[554])        ;#00448354: 215125 B0                  uv 04 20  1 109      
    lea edi,[ebp-68] (result)             ;#00448357: 215175 BC                  vu 80 20  1 109      
    lea ecx,[ebp-84] (symtab[555])        ;#0044835A: 215115 AC                  uv 02 20  1 110      
    call #0045FD65 (:%opConcat)           ;#0044835D: 350 037A0100               v  00 00  1 110      
    mov eax,[ebp-80] (symtab[554])        ;#00448362: 213105 B0                  uv 01 20  1 111      
    mov [ebp-80] (symtab[554]),ebx        ;#00448365: 211135 B0                  vu 00 28  1 111      
    jmp #00462C8F (:%opRetf)              ;#00448368: 351 22A90100               v  00 00  1 112      
;   185     end if
;   186     if f>=10 then
    mov edi,10                            ;#0044836D: 277 0A000000               uv 80 00  1 113      
    mov eax,[ebp-56] (f)                  ;#00448372: 213105 C8                  vu 01 20  1 113      
    mov esi,55                            ;#00448375: 276 37000000               uv 40 00  1 114      
    mov edx,548                           ;#0044837A: 272 24020000               vu 04 00  1 114      
    call #0045F8B0 (:%opJcc)              ;#0044837F: 350 2C750100               v  00 00  1 115      
    jl #004483DD                          ;#00448384: 174 57                     v  00 00  1 116      
;   187         fwk = f
    mov esi,[ebp-56] (f)                  ;#00448386: 213165 C8                  uv 40 20  1 117      
    mov [ebp-60] (fwk),esi                ;#00448389: 211165 C4                  uv 00 60  1 118 40   
    cmp esi,h4                            ;#0044838C: 201376 00000040            vu 00 40  1 118      
    jl #00448399                          ;#00448392: 174 05                     v  00 00  1 119      
    add dword[ebx+esi*4-8],1              ;#00448394: 203104263 F8 01            u  00 48  3 120      
;   188         while fwk>=10 do
    mov edi,10                            ;#00448399: 277 0A000000               vu 80 00  1 122      
    mov eax,[ebp-60] (fwk)                ;#0044839E: 213105 C4                  uv 01 20  1 123      
    mov esi,55                            ;#004483A1: 276 37000000               vu 40 00  1 123      
    mov edx,549                           ;#004483A6: 272 25020000               uv 04 00  1 124      
    call #0045F8B0 (:%opJcc)              ;#004483AB: 350 00750100               v  00 00  1 124      
    jl #00448426                          ;#004483B0: 174 74                     v  00 00  1 125      
;   189             exponent += 1
    mov edi,[ebp-72] (exponent)           ;#004483B2: 213175 B8                  uv 80 20  1 126      
    add edi,1                             ;#004483B5: 203307 01                  uv 80 80  1 127 80   
    mov edx,edi                           ;#004483B8: 213327                     uv 04 80  1 128 80   
    mov [ebp-72] (exponent),edi           ;#004483BA: 211175 B8                  vu 00 A0  1 128      
    shl edx,1                             ;#004483BD: 321342                     u  04 04  1 129      
    jno #004483C9                         ;#004483BF: 161 08                     v  00 00  1 129      
    lea edi,[ebp-72] (exponent)           ;#004483C1: 215175 B8                  uv 80 20  1 130      
    call #00462764 (:%e01tcfAddiii)       ;#004483C4: 350 9BA30100               v  00 00  1 130      
;   190             fwk /= 10
    lea edi,[ebp-60] (fwk)                ;#004483C9: 215175 C4                  uv 80 20  1 131      
    mov ecx,[ebp-60] (fwk)                ;#004483CC: 213115 C4                  vu 02 20  1 131      
    mov eax,[#00402090] (BRIGHT_GREEN)    ;#004483CF: 241 90204000               uv 01 00  1 132      
    call #0045F31D (:%opDiv)              ;#004483D4: 350 446F0100               v  00 00  1 132      
;   191         end while
    jmp #00448399                         ;#004483D9: 353 BE                     v  00 00  1 133      
    jmp #00448426                         ;#004483DB: 353 49                     v  00 00  1 134      
;   192     else
;   193         while f<1 and f!=0 do
    mov edi,1                             ;#004483DD: 277 01000000               uv 80 00  1 135      
    mov eax,[ebp-56] (f)                  ;#004483E2: 213105 C8                  vu 01 20  1 135      
    mov esi,26                            ;#004483E5: 276 1A000000               uv 40 00  1 136      
    mov edx,548                           ;#004483EA: 272 24020000               vu 04 00  1 136      
    call #0045F8B0 (:%opJcc)              ;#004483EF: 350 BC740100               v  00 00  1 137      
    jge #00448426                         ;#004483F4: 175 30                     v  00 00  1 138      
    mov esi,[ebp-56] (f)                  ;#004483F6: 213165 C8                  uv 40 20  1 139      
    cmp esi,0                             ;#004483F9: 203376 00                  uv 00 40  1 140 40   
    je #00448426                          ;#004483FC: 164 28                     v  00 00  1 140      
;   194             exponent -= 1
    mov edi,[ebp-72] (exponent)           ;#004483FE: 213175 B8                  uv 80 20  1 141      
    sub edi,1                             ;#00448401: 203357 01                  uv 80 80  1 142 80   
    mov edx,edi                           ;#00448404: 213327                     uv 04 80  1 143 80   
    mov [ebp-72] (exponent),edi           ;#00448406: 211175 B8                  vu 00 A0  1 143      
    shl edx,1                             ;#00448409: 321342                     u  04 04  1 144      
    jno #00448415                         ;#0044840B: 161 08                     v  00 00  1 144      
    lea edi,[ebp-72] (exponent)           ;#0044840D: 215175 B8                  uv 80 20  1 145      
    call #00462764 (:%e01tcfAddiii)       ;#00448410: 350 4FA30100               v  00 00  1 145      
;   195             f *= 10
    lea edi,[ebp-56] (f)                  ;#00448415: 215175 C8                  uv 80 20  1 146      
    mov ecx,esi                           ;#00448418: 211361                     vu 02 40  1 146      
    mov eax,[#00402090] (BRIGHT_GREEN)    ;#0044841A: 241 90204000               uv 01 00  1 147      
    call #0045F412 (:%opMul)              ;#0044841F: 350 EE6F0100               v  00 00  1 147      
;   196         end while
    jmp #004483DD                         ;#00448424: 353 B7                     v  00 00  1 148      
;   197     end if
;   198     capE = 'e'
    mov [ebp-40] (capE), dword 101        ;#00448426: 307105 D8 65000000         uv 00 20  1 149      
;   199     if charflag<'a' then
    mov ecx,[ebp-4] (charflag)            ;#0044842D: 213115 FC                  vu 02 20  1 149      
    cmp ecx,97                            ;#00448430: 203371 61                  uv 00 02  1 150      
    jge #00448450                         ;#00448433: 175 1B                     v  00 00  1 150      
;   200         charflag += 32
    add ecx,32                            ;#00448435: 203301 20                  uv 02 02  1 151      
    mov edx,ecx                           ;#00448438: 213321                     uv 04 02  1 152 02   
    mov [ebp-4] (charflag),ecx            ;#0044843A: 211115 FC                  vu 00 22  1 152      
    shl edx,1                             ;#0044843D: 321342                     u  04 04  1 153      
    jno #00448449                         ;#0044843F: 161 08                     v  00 00  1 153      
    lea edi,[ebp-4] (charflag)            ;#00448441: 215175 FC                  uv 80 20  1 154      
    call #00462764 (:%e01tcfAddiii)       ;#00448444: 350 1BA30100               v  00 00  1 154      
;   201         capE = 'E'
    mov [ebp-40] (capE), dword 69         ;#00448449: 307105 D8 45000000         uv 00 20  1 155      
;   202     end if
;   203 --  if charflag='e' or (charflag='g' and (exponent>9 or exponent<-4)) then
;   204 --1/11/15:
;   205 --  if charflag='e' or (charflag='g' and (exponent>precision or exponent<-4)) then
;   206     if charflag='e' or (charflag='g' and (exponent>=precision or exponent<-4)) then
    cmp ecx,101                           ;#00448450: 203371 65                  vu 00 02  1 155      
    je #00448471                          ;#00448453: 164 1C                     v  00 00  1 156      
    cmp ecx,103                           ;#00448455: 203371 67                  uv 00 02  1 157      
    jne #00448C68                         ;#00448458: 017205 0A080000            v  00 00  1 157      
    mov edi,[ebp-72] (exponent)           ;#0044845E: 213175 B8                  uv 80 20  1 158      
    mov esi,[ebp-16] (precision)          ;#00448461: 213165 F0                  vu 40 20  1 158      
    cmp edi,esi                           ;#00448464: 071367                     uv 00 C0  1 159      
    jge #00448471                         ;#00448466: 175 09                     v  00 00  1 159      
    cmp edi,-4                            ;#00448468: 203377 FC                  uv 00 80  1 160      
    jge #00448C68                         ;#0044846B: 017215 F7070000            v  00 00  1 160      
;   207         ewk = exponent
    mov eax,[ebp-72] (exponent)           ;#00448471: 213105 B8                  uv 01 20  1 161      
    mov [ebp-44] (ewk),eax                ;#00448474: 211105 D4                  uv 00 21  1 162 01   
;   208         if exponent>0 then
    cmp eax,0                             ;#00448477: 203370 00                  vu 00 01  1 162      
    jle #00448549                         ;#0044847A: 017216 C9000000            v  00 00  1 163      
;   209 --DEV problems on 64bit: (opPow needs improvement!)
;   210 --          epwr = power(10,exponent)
;   211 epwr = 10
    mov [ebp-64] (epwr), dword 10         ;#00448480: 307105 C0 0A000000         uv 00 20  1 164      
;   212 for i=2 to exponent do
    mov [ebp-88] (symtab[558]),eax        ;#00448487: 211105 A8                  vu 00 21  1 164      
    mov [ebp-92] (i), dword 2             ;#0044848A: 307105 A4 02000000         uv 00 20  1 165      
    lea edx,[eax+1]                       ;#00448491: 215120 01                  vu 04 01  1 165      
    shl edx,1                             ;#00448494: 321342                     u  04 04  1 166      
    jno #004484A9                         ;#00448496: 161 11                     v  00 00  1 166      
    mov al,121                            ;#00448498: 260 79                     uv 01 00  1 167      
    mov edi,558                           ;#0044849A: 277 2E020000               vu 80 00  1 167      
    mov esi,26                            ;#0044849F: 276 1A000000               uv 40 00  1 168      
    call #004627AC (:%pRTErn)             ;#004484A4: 350 03A30100               v  00 00  1 168      
    cmp eax,2                             ;#004484A9: 075 02000000               uv 00 01  1 169      
    jl #004484D0                          ;#004484AE: 174 20                     v  00 00  1 169      
;   213     epwr *= 10
    lea edi,[ebp-64] (epwr)               ;#004484B0: 215175 C0                  uv 80 20  1 170      
    mov ecx,[ebp-64] (epwr)               ;#004484B3: 213115 C0                  vu 02 20  1 170      
    mov eax,[#00402090] (BRIGHT_GREEN)    ;#004484B6: 241 90204000               uv 01 00  1 171      
    call #0045F412 (:%opMul)              ;#004484BB: 350 526F0100               v  00 00  1 171      
;   214 end for
    mov esi,[ebp-92] (i)                  ;#004484C0: 213165 A4                  uv 40 20  1 172      
    mov edi,[ebp-88] (symtab[558])        ;#004484C3: 213175 A8                  vu 80 20  1 172      
    add esi,1                             ;#004484C6: 203306 01                  uv 40 40  1 173      
    cmp esi,edi                           ;#004484C9: 073367                     uv 00 C0  1 174 40   
    mov [ebp-92] (i),esi                  ;#004484CB: 211165 A4                  vu 00 60  1 174      
    jle #004484B0                         ;#004484CE: 176 E0                     v  00 00  1 175      
;   215             fwk = 0--epwr
    mov edx,[ebp-60] (fwk)                ;#004484D0: 213125 C4                  uv 04 20  1 176      
    cmp edx,h4                            ;#004484D3: 201372 00000040            uv 00 04  1 177 04   
    mov [ebp-60] (fwk),ebx                ;#004484D9: 211135 C4                  vu 00 28  1 177      
    jle #004484EA                         ;#004484DC: 176 0C                     v  00 00  1 178      
    sub dword[ebx+edx*4-8],1              ;#004484DE: 203154223 F8 01            u  00 0C  3 179      
    jne #004484EA                         ;#004484E3: 165 05                     v  00 00  1 181      
    call #004639A8 (:%pDealloc)           ;#004484E5: 350 BEB40100               v  00 00  1 182      
;   216             digit = 0
    mov [ebp-52] (digit),ebx              ;#004484EA: 211135 CC                  uv 00 28  1 183      
;   217             while f>=fwk+epwr do
    lea edi,[ebp-96] (symtab[560])        ;#004484ED: 215175 A0                  vu 80 20  1 183      
    mov ecx,[ebp-60] (fwk)                ;#004484F0: 213115 C4                  uv 02 20  1 184      
    mov eax,[ebp-64] (epwr)               ;#004484F3: 213105 C0                  vu 01 20  1 184      
    call #0045F261 (:%opAdd)              ;#004484F6: 350 666D0100               v  00 00  1 185      
    mov edi,[ebp-96] (symtab[560])        ;#004484FB: 213175 A0                  uv 80 20  1 186      
    mov eax,[ebp-56] (f)                  ;#004484FE: 213105 C8                  vu 01 20  1 186      
    mov esi,560                           ;#00448501: 276 30020000               uv 40 00  1 187      
    mov edx,548                           ;#00448506: 272 24020000               vu 04 00  1 187      
    call #0045F8B0 (:%opJcc)              ;#0044850B: 350 A0730100               v  00 00  1 188      
    jl #00448539                          ;#00448510: 174 27                     v  00 00  1 189      
;   218                 fwk += epwr
    lea edi,[ebp-60] (fwk)                ;#00448512: 215175 C4                  uv 80 20  1 190      
    mov ecx,[ebp-60] (fwk)                ;#00448515: 213115 C4                  vu 02 20  1 190      
    mov eax,[ebp-64] (epwr)               ;#00448518: 213105 C0                  uv 01 20  1 191      
    call #0045F261 (:%opAdd)              ;#0044851B: 350 416D0100               v  00 00  1 191      
;   219                 digit += 1
    mov esi,[ebp-52] (digit)              ;#00448520: 213165 CC                  uv 40 20  1 192      
    add esi,1                             ;#00448523: 203306 01                  uv 40 40  1 193 40   
    mov edx,esi                           ;#00448526: 213326                     uv 04 40  1 194 40   
    mov [ebp-52] (digit),esi              ;#00448528: 211165 CC                  vu 00 60  1 194      
    shl edx,1                             ;#0044852B: 321342                     u  04 04  1 195      
    jno #004484ED                         ;#0044852D: 161 BE                     v  00 00  1 195      
    lea edi,[ebp-52] (digit)              ;#0044852F: 215175 CC                  uv 80 20  1 196      
    call #00462764 (:%e01tcfAddiii)       ;#00448532: 350 2DA20100               v  00 00  1 196      
;   220             end while
    jmp #004484ED                         ;#00448537: 353 B4                     v  00 00  1 197      
;   221 --24/2/24:
;   222             f -= fwk
    lea edi,[ebp-56] (f)                  ;#00448539: 215175 C8                  uv 80 20  1 198      
    mov ecx,[ebp-56] (f)                  ;#0044853C: 213115 C8                  vu 02 20  1 198      
    mov eax,[ebp-60] (fwk)                ;#0044853F: 213105 C4                  uv 01 20  1 199      
    call #0045F299 (:%opSub)              ;#00448542: 350 526D0100               v  00 00  1 199      
    jmp #00448580                         ;#00448547: 353 37                     v  00 00  1 200      
;   223         else
;   224             digit = floor(f)
    lea edi,[ebp-52] (digit)              ;#00448549: 215175 CC                  uv 80 20  1 201      
    mov eax,[ebp-56] (f)                  ;#0044854C: 213105 C8                  vu 01 20  1 201      
    call #0045F5DE (:%opFloor)            ;#0044854F: 350 8A700100               v  00 00  1 202      
    cmp eax,h4                            ;#00448554: 075 00000040               uv 00 01  1 203      
    jl #00448565                          ;#00448559: 174 0A                     v  00 00  1 203      
    mov ecx,547                           ;#0044855B: 271 23020000               uv 02 00  1 204      
    call #00462D8D (:%opTcFail)           ;#00448560: 350 28A80100               v  00 00  1 204      
;   225 --21/2/24:
;   226             f = (f-digit)*10
    lea edi,[ebp-96] (symtab[560])        ;#00448565: 215175 A0                  uv 80 20  1 205      
    mov ecx,[ebp-56] (f)                  ;#00448568: 213115 C8                  vu 02 20  1 205      
    call #0045F299 (:%opSub)              ;#0044856B: 350 296D0100               v  00 00  1 206      
    lea edi,[ebp-56] (f)                  ;#00448570: 215175 C8                  uv 80 20  1 207      
    mov ecx,[ebp-96] (symtab[560])        ;#00448573: 213115 A0                  vu 02 20  1 207      
    mov eax,[#00402090] (BRIGHT_GREEN)    ;#00448576: 241 90204000               uv 01 00  1 208      
    call #0045F412 (:%opMul)              ;#0044857B: 350 926E0100               v  00 00  1 208      
;   227         end if
;   228         result &= digit+'0'
    mov edi,[ebp-52] (digit)              ;#00448580: 213175 CC                  uv 80 20  1 209      
    cmp edi,h4                            ;#00448583: 201377 00000040            uv 00 80  1 210 80   
    jne #00448595                         ;#00448589: 165 0A                     v  00 00  1 210      
    mov esi,547                           ;#0044858B: 276 23020000               uv 40 00  1 211      
    call #00462744 (:%pUnassigned)        ;#00448590: 350 AFA10100               v  00 00  1 211      
    lea edi,[ebp-96] (symtab[560])        ;#00448595: 215175 A0                  uv 80 20  1 212      
    mov ecx,[ebp-52] (digit)              ;#00448598: 213115 CC                  vu 02 20  1 212      
    mov eax,[MB_ICONEXCLAMATION]          ;#0044859B: 241 D8204000               uv 01 00  1 213      
    call #0045F261 (:%opAdd)              ;#004485A0: 350 BC6C0100               v  00 00  1 213      
    lea edx,[ebp-68] (result)             ;#004485A5: 215125 BC                  uv 04 20  1 214      
    lea edi,[ebp-68] (result)             ;#004485A8: 215175 BC                  vu 80 20  1 214      
    lea ecx,[ebp-96] (symtab[560])        ;#004485AB: 215115 A0                  uv 02 20  1 215      
    xor eax,eax                           ;#004485AE: 061300                     vu 01 01  1 215      
    call #0045F9F7 (:%opApnd)             ;#004485B0: 350 42740100               v  00 00  1 216      
    mov esi,[ebp-68] (result)             ;#004485B5: 213165 BC                  uv 40 20  1 217      
    cmp esi,h4                            ;#004485B8: 201376 00000040            uv 00 40  1 218 40   
    jl #004485C7                          ;#004485BE: 174 07                     v  00 00  1 218      
    cmp byte[ebx+esi*4-1],#82             ;#004485C0: 200174263 FF 82            u  00 48  2 219      
    je #004485D1                          ;#004485C5: 164 0A                     v  00 00  1 220      
    mov ecx,551                           ;#004485C7: 271 27020000               uv 02 00  1 221      
    call #00462D8D (:%opTcFail)           ;#004485CC: 350 BCA70100               v  00 00  1 221      
;   229         expadj = 1
    mov [ebp-36] (expadj), dword 1        ;#004485D1: 307105 DC 01000000         uv 00 20  1 222      
;   230         if precision>0 then
    mov edi,[ebp-16] (precision)          ;#004485D8: 213175 F0                  vu 80 20  1 222      
    cmp edi,0                             ;#004485DB: 203377 00                  uv 00 80  1 223      
    jle #004487FF                         ;#004485DE: 017216 1B020000            v  00 00  1 223      
;   231             result &= '.'
    lea edx,[ebp-68] (result)             ;#004485E4: 215125 BC                  uv 04 20  1 224      
    lea edi,[ebp-68] (result)             ;#004485E7: 215175 BC                  vu 80 20  1 224      
    mov ecx,#00402208                     ;#004485EA: 271 08224000               uv 02 00  1 225      
    xor eax,eax                           ;#004485EF: 061300                     vu 01 01  1 225      
    call #0045F9F7 (:%opApnd)             ;#004485F1: 350 01740100               v  00 00  1 226      
    mov ecx,[ebp-68] (result)             ;#004485F6: 213115 BC                  uv 02 20  1 227      
    cmp ecx,h4                            ;#004485F9: 201371 00000040            uv 00 02  1 228 02   
    jl #00448608                          ;#004485FF: 174 07                     v  00 00  1 228      
    cmp byte[ebx+ecx*4-1],#82             ;#00448601: 200174213 FF 82            u  00 0A  2 229      
    je #00448612                          ;#00448606: 164 0A                     v  00 00  1 230      
    mov ecx,551                           ;#00448608: 271 27020000               uv 02 00  1 231      
    call #00462D8D (:%opTcFail)           ;#0044860D: 350 7BA70100               v  00 00  1 231      
;   232             dotdone = 1
    mov [ebp-20] (dotdone), dword 1       ;#00448612: 307105 EC 01000000         uv 00 20  1 232      
;   233 --24/2/24:
;   234 --          atom fadj = 0
;   235 --1/11/15
;   236 --          for i=1 to precision do
;   237             for i=1 to precision-(charflag='g') do
    mov eax,[ebp-4] (charflag)            ;#00448619: 213105 FC                  vu 01 20  1 232      
    xor ecx,ecx                           ;#0044861C: 061311                     uv 02 02  1 233      
    cmp eax,103                           ;#0044861E: 203370 67                  vu 00 01  1 233      
    sete cl                               ;#00448621: 017224301                  np 02 00  2 234      
    mov [ebp-100] (symtab[561]),ecx       ;#00448624: 211115 9C                  uv 00 22  1 236      
    lea edi,[ebp-96] (symtab[560])        ;#00448627: 215175 A0                  vu 80 20  1 236      
    mov ecx,[ebp-16] (precision)          ;#0044862A: 213115 F0                  uv 02 20  1 237      
    mov eax,[ebp-100] (symtab[561])       ;#0044862D: 213105 9C                  vu 01 20  1 237      
    call #0045F299 (:%opSub)              ;#00448630: 350 646C0100               v  00 00  1 238      
    mov edx,[ebp-92] (i)                  ;#00448635: 213125 A4                  uv 04 20  1 239      
    cmp edx,h4                            ;#00448638: 201372 00000040            uv 00 04  1 240 04   
    jle #0044864C                         ;#0044863E: 176 0C                     v  00 00  1 240      
    sub dword[ebx+edx*4-8],1              ;#00448640: 203154223 F8 01            u  00 0C  3 241      
    jne #0044864C                         ;#00448645: 165 05                     v  00 00  1 243      
    call #004639A8 (:%pDealloc)           ;#00448647: 350 5CB30100               v  00 00  1 244      
    mov [ebp-92] (i), dword 1             ;#0044864C: 307105 A4 01000000         uv 00 20  1 245      
    mov esi,[ebp-96] (symtab[560])        ;#00448653: 213165 A0                  vu 40 20  1 245      
    cmp esi,h4                            ;#00448656: 201376 00000040            uv 00 40  1 246      
    jl #0044866F                          ;#0044865C: 174 11                     v  00 00  1 246      
    mov al,120                            ;#0044865E: 260 78                     uv 01 00  1 247      
    mov edi,560                           ;#00448660: 277 30020000               vu 80 00  1 247      
    mov esi,2                             ;#00448665: 276 02000000               uv 40 00  1 248      
    call #004627AC (:%pRTErn)             ;#0044866A: 350 3DA10100               v  00 00  1 248      
    lea edx,[esi+1]                       ;#0044866F: 215126 01                  uv 04 40  1 251    *40*
    shl edx,1                             ;#00448672: 321342                     u  04 04  1 252      
    jno #00448687                         ;#00448674: 161 11                     v  00 00  1 252      
    mov al,121                            ;#00448676: 260 79                     uv 01 00  1 253      
    mov edi,560                           ;#00448678: 277 30020000               vu 80 00  1 253      
    mov esi,26                            ;#0044867D: 276 1A000000               uv 40 00  1 254      
    call #004627AC (:%pRTErn)             ;#00448682: 350 25A10100               v  00 00  1 254      
    cmp esi,1                             ;#00448687: 201376 01000000            uv 00 40  1 255      
    jl #0044884A                          ;#0044868D: 017214 B7010000            v  00 00  1 255      
;   238                 if ewk>0 then
    mov edi,[ebp-44] (ewk)                ;#00448693: 213175 D4                  uv 80 20  1 256      
    cmp edi,0                             ;#00448696: 203377 00                  uv 00 80  1 257 80   
    jle #00448754                         ;#00448699: 017216 B5000000            v  00 00  1 257      
;   239 --24/2/24:
;   240 --                  f -= fwk
;   241                     ewk -= 1
    sub edi,1                             ;#0044869F: 203357 01                  uv 80 80  1 258      
    mov edx,edi                           ;#004486A2: 213327                     uv 04 80  1 259 80   
    mov [ebp-44] (ewk),edi                ;#004486A4: 211175 D4                  vu 00 A0  1 259      
    shl edx,1                             ;#004486A7: 321342                     u  04 04  1 260      
    jno #004486B3                         ;#004486A9: 161 08                     v  00 00  1 260      
    lea edi,[ebp-44] (ewk)                ;#004486AB: 215175 D4                  uv 80 20  1 261      
    call #00462764 (:%e01tcfAddiii)       ;#004486AE: 350 B1A00100               v  00 00  1 261      
;   242                     epwr = power(10,ewk)
    mov ecx,[ebp-44] (ewk)                ;#004486B3: 213115 D4                  uv 02 20  1 262      
    mov eax,10                            ;#004486B6: 270 0A000000               vu 01 00  1 262      
    lea edi,[ebp-64] (epwr)               ;#004486BB: 215175 C0                  uv 80 20  1 263      
    call #00463BFA (:%opPow)              ;#004486BE: 350 37B50100               v  00 00  1 263      
;   243                     fwk = 0--epwr
    mov edx,[ebp-60] (fwk)                ;#004486C3: 213125 C4                  uv 04 20  1 264      
    cmp edx,h4                            ;#004486C6: 201372 00000040            uv 00 04  1 265 04   
    mov [ebp-60] (fwk),ebx                ;#004486CC: 211135 C4                  vu 00 28  1 265      
    jle #004486DD                         ;#004486CF: 176 0C                     v  00 00  1 266      
    sub dword[ebx+edx*4-8],1              ;#004486D1: 203154223 F8 01            u  00 0C  3 267      
    jne #004486DD                         ;#004486D6: 165 05                     v  00 00  1 269      
    call #004639A8 (:%pDealloc)           ;#004486D8: 350 CBB20100               v  00 00  1 270      
;   244                     digit = 0
    mov [ebp-52] (digit),ebx              ;#004486DD: 211135 CC                  uv 00 28  1 271      
;   245                     while f>=fwk+epwr do
    lea edi,[ebp-104] (symtab[562])       ;#004486E0: 215175 98                  vu 80 20  1 271      
    mov ecx,[ebp-60] (fwk)                ;#004486E3: 213115 C4                  uv 02 20  1 272      
    mov eax,[ebp-64] (epwr)               ;#004486E6: 213105 C0                  vu 01 20  1 272      
    call #0045F261 (:%opAdd)              ;#004486E9: 350 736B0100               v  00 00  1 273      
    mov edi,[ebp-104] (symtab[562])       ;#004486EE: 213175 98                  uv 80 20  1 274      
    mov eax,[ebp-56] (f)                  ;#004486F1: 213105 C8                  vu 01 20  1 274      
    mov esi,562                           ;#004486F4: 276 32020000               uv 40 00  1 275      
    mov edx,548                           ;#004486F9: 272 24020000               vu 04 00  1 275      
    call #0045F8B0 (:%opJcc)              ;#004486FE: 350 AD710100               v  00 00  1 276      
    jl #0044872C                          ;#00448703: 174 27                     v  00 00  1 277      
;   246                         fwk += epwr
    lea edi,[ebp-60] (fwk)                ;#00448705: 215175 C4                  uv 80 20  1 278      
    mov ecx,[ebp-60] (fwk)                ;#00448708: 213115 C4                  vu 02 20  1 278      
    mov eax,[ebp-64] (epwr)               ;#0044870B: 213105 C0                  uv 01 20  1 279      
    call #0045F261 (:%opAdd)              ;#0044870E: 350 4E6B0100               v  00 00  1 279      
;   247                         digit += 1
    mov esi,[ebp-52] (digit)              ;#00448713: 213165 CC                  uv 40 20  1 280      
    add esi,1                             ;#00448716: 203306 01                  uv 40 40  1 281 40   
    mov edx,esi                           ;#00448719: 213326                     uv 04 40  1 282 40   
    mov [ebp-52] (digit),esi              ;#0044871B: 211165 CC                  vu 00 60  1 282      
    shl edx,1                             ;#0044871E: 321342                     u  04 04  1 283      
    jno #004486E0                         ;#00448720: 161 BE                     v  00 00  1 283      
    lea edi,[ebp-52] (digit)              ;#00448722: 215175 CC                  uv 80 20  1 284      
    call #00462764 (:%e01tcfAddiii)       ;#00448725: 350 3AA00100               v  00 00  1 284      
;   248                     end while
    jmp #004486E0                         ;#0044872A: 353 B4                     v  00 00  1 285      
;   249 --24/2/24:
;   250 --30/10/21
;   251 --                  fadj = fwk
;   252                     f -= fwk
    lea edi,[ebp-56] (f)                  ;#0044872C: 215175 C8                  uv 80 20  1 286      
    mov ecx,[ebp-56] (f)                  ;#0044872F: 213115 C8                  vu 02 20  1 286      
    mov eax,[ebp-60] (fwk)                ;#00448732: 213105 C4                  uv 01 20  1 287      
    call #0045F299 (:%opSub)              ;#00448735: 350 5F6B0100               v  00 00  1 287      
;   253 --26/2/24:
;   254                     if ewk=0 then f *= 10 end if
    mov edi,[ebp-44] (ewk)                ;#0044873A: 213175 D4                  uv 80 20  1 288      
    cmp edi,0                             ;#0044873D: 203377 00                  uv 00 80  1 289 80   
    jne #0044878B                         ;#00448740: 165 49                     v  00 00  1 289      
    lea edi,[ebp-56] (f)                  ;#00448742: 215175 C8                  uv 80 20  1 290      
    mov ecx,[ebp-56] (f)                  ;#00448745: 213115 C8                  vu 02 20  1 290      
    mov eax,[#00402090] (BRIGHT_GREEN)    ;#00448748: 241 90204000               uv 01 00  1 291      
    call #0045F412 (:%opMul)              ;#0044874D: 350 C06C0100               v  00 00  1 291      
    jmp #0044878B                         ;#00448752: 353 37                     v  00 00  1 292      
;   255                 else
;   256 --21/2/24
;   257 --                  f = (f-digit)*10
;   258                     digit = floor(f)
    lea edi,[ebp-52] (digit)              ;#00448754: 215175 CC                  uv 80 20  1 293      
    mov eax,[ebp-56] (f)                  ;#00448757: 213105 C8                  vu 01 20  1 293      
    call #0045F5DE (:%opFloor)            ;#0044875A: 350 7F6E0100               v  00 00  1 294      
    cmp eax,h4                            ;#0044875F: 075 00000040               uv 00 01  1 295      
    jl #00448770                          ;#00448764: 174 0A                     v  00 00  1 295      
    mov ecx,547                           ;#00448766: 271 23020000               uv 02 00  1 296      
    call #00462D8D (:%opTcFail)           ;#0044876B: 350 1DA60100               v  00 00  1 296      
;   259                     f = (f-digit)*10
    lea edi,[ebp-104] (symtab[562])       ;#00448770: 215175 98                  uv 80 20  1 297      
    mov ecx,[ebp-56] (f)                  ;#00448773: 213115 C8                  vu 02 20  1 297      
    call #0045F299 (:%opSub)              ;#00448776: 350 1E6B0100               v  00 00  1 298      
    lea edi,[ebp-56] (f)                  ;#0044877B: 215175 C8                  uv 80 20  1 299      
    mov ecx,[ebp-104] (symtab[562])       ;#0044877E: 213115 98                  vu 02 20  1 299      
    mov eax,[#00402090] (BRIGHT_GREEN)    ;#00448781: 241 90204000               uv 01 00  1 300      
    call #0045F412 (:%opMul)              ;#00448786: 350 876C0100               v  00 00  1 300      
;   260 --24/2/24:
;   261 --                  fadj = 0
;   262                 end if
;   263 --12/7/16:
;   264                 if digit=10 then exit end if
    mov esi,[ebp-52] (digit)              ;#0044878B: 213165 CC                  uv 40 20  1 301      
    cmp esi,10                            ;#0044878E: 203376 0A                  uv 00 40  1 302 40   
    je #0044884A                          ;#00448791: 017204 B3000000            v  00 00  1 302      
;   265                 result &= digit+'0'
    lea edi,[ebp-104] (symtab[562])       ;#00448797: 215175 98                  uv 80 20  1 303      
    mov ecx,esi                           ;#0044879A: 211361                     vu 02 40  1 303      
    mov eax,[MB_ICONEXCLAMATION]          ;#0044879C: 241 D8204000               uv 01 00  1 304      
    call #0045F261 (:%opAdd)              ;#004487A1: 350 BB6A0100               v  00 00  1 304      
    lea edx,[ebp-68] (result)             ;#004487A6: 215125 BC                  uv 04 20  1 305      
    lea edi,[ebp-68] (result)             ;#004487A9: 215175 BC                  vu 80 20  1 305      
    lea ecx,[ebp-104] (symtab[562])       ;#004487AC: 215115 98                  uv 02 20  1 306      
    xor eax,eax                           ;#004487AF: 061300                     vu 01 01  1 306      
    call #0045F9F7 (:%opApnd)             ;#004487B1: 350 41720100               v  00 00  1 307      
    mov edi,[ebp-68] (result)             ;#004487B6: 213175 BC                  uv 80 20  1 308      
    cmp edi,h4                            ;#004487B9: 201377 00000040            uv 00 80  1 309 80   
    jl #004487C8                          ;#004487BF: 174 07                     v  00 00  1 309      
    cmp byte[ebx+edi*4-1],#82             ;#004487C1: 200174273 FF 82            u  00 88  2 310      
    je #004487D2                          ;#004487C6: 164 0A                     v  00 00  1 311      
    mov ecx,551                           ;#004487C8: 271 27020000               uv 02 00  1 312      
    call #00462D8D (:%opTcFail)           ;#004487CD: 350 BBA50100               v  00 00  1 312      
;   266                 expadj += 1
    mov ecx,[ebp-36] (expadj)             ;#004487D2: 213115 DC                  uv 02 20  1 313      
    add ecx,1                             ;#004487D5: 203301 01                  uv 02 02  1 314 02   
    mov edx,ecx                           ;#004487D8: 213321                     uv 04 02  1 315 02   
    mov [ebp-36] (expadj),ecx             ;#004487DA: 211115 DC                  vu 00 22  1 315      
    shl edx,1                             ;#004487DD: 321342                     u  04 04  1 316      
    jno #004487E9                         ;#004487DF: 161 08                     v  00 00  1 316      
    lea edi,[ebp-36] (expadj)             ;#004487E1: 215175 DC                  uv 80 20  1 317      
    call #00462764 (:%e01tcfAddiii)       ;#004487E4: 350 7B9F0100               v  00 00  1 317      
;   267             end for
    mov esi,[ebp-92] (i)                  ;#004487E9: 213165 A4                  uv 40 20  1 318      
    mov eax,[ebp-96] (symtab[560])        ;#004487EC: 213105 A0                  vu 01 20  1 318      
    add esi,1                             ;#004487EF: 203306 01                  uv 40 40  1 319      
    cmp esi,eax                           ;#004487F2: 073360                     uv 00 41  1 320 40   
    mov [ebp-92] (i),esi                  ;#004487F4: 211165 A4                  vu 00 60  1 320      
    jle #00448693                         ;#004487F7: 017216 96FEFFFF            v  00 00  1 321      
;   268 --24/2/24:
;   269 --          f -= fadj
    jmp #0044884A                         ;#004487FD: 353 4B                     v  00 00  1 322      
;   270         else
;   271             if ewk>0 then
    mov edi,[ebp-44] (ewk)                ;#004487FF: 213175 D4                  uv 80 20  1 323      
    cmp edi,0                             ;#00448802: 203377 00                  uv 00 80  1 324 80   
    jle #0044882C                         ;#00448805: 176 25                     v  00 00  1 324      
;   272                 f -= fwk
    mov ecx,[ebp-60] (fwk)                ;#00448807: 213115 C4                  uv 02 20  1 325      
    cmp ecx,h4                            ;#0044880A: 201371 00000040            uv 00 02  1 326 02   
    jne #0044881C                         ;#00448810: 165 0A                     v  00 00  1 326      
    mov esi,549                           ;#00448812: 276 25020000               uv 40 00  1 327      
    call #00462744 (:%pUnassigned)        ;#00448817: 350 289F0100               v  00 00  1 327      
    lea edi,[ebp-56] (f)                  ;#0044881C: 215175 C8                  uv 80 20  1 328      
    mov ecx,[ebp-56] (f)                  ;#0044881F: 213115 C8                  vu 02 20  1 328      
    mov eax,[ebp-60] (fwk)                ;#00448822: 213105 C4                  uv 01 20  1 329      
    call #0045F299 (:%opSub)              ;#00448825: 350 6F6A0100               v  00 00  1 329      
    jmp #0044884A                         ;#0044882A: 353 1E                     v  00 00  1 330      
;   273             else
;   274                 f = (f-digit)*10
    lea edi,[ebp-104] (symtab[562])       ;#0044882C: 215175 98                  uv 80 20  1 331      
    mov ecx,[ebp-56] (f)                  ;#0044882F: 213115 C8                  vu 02 20  1 331      
    mov eax,[ebp-52] (digit)              ;#00448832: 213105 CC                  uv 01 20  1 332      
    call #0045F299 (:%opSub)              ;#00448835: 350 5F6A0100               v  00 00  1 332      
    lea edi,[ebp-56] (f)                  ;#0044883A: 215175 C8                  uv 80 20  1 333      
    mov ecx,[ebp-104] (symtab[562])       ;#0044883D: 213115 98                  vu 02 20  1 333      
    mov eax,[#00402090] (BRIGHT_GREEN)    ;#00448840: 241 90204000               uv 01 00  1 334      
    call #0045F412 (:%opMul)              ;#00448845: 350 C86B0100               v  00 00  1 334      
;   275             end if
;   276         end if
;   277         exponent -= expadj
    mov esi,[ebp-72] (exponent)           ;#0044884A: 213165 B8                  uv 40 20  1 335      
    mov edi,[ebp-36] (expadj)             ;#0044884D: 213175 DC                  vu 80 20  1 335      
    sub esi,edi                           ;#00448850: 051376                     uv 40 C0  1 336      
    mov edx,esi                           ;#00448852: 213326                     uv 04 40  1 337 40   
    mov [ebp-72] (exponent),esi           ;#00448854: 211165 B8                  vu 00 60  1 337      
    shl edx,1                             ;#00448857: 321342                     u  04 04  1 338      
    jno #00448863                         ;#00448859: 161 08                     v  00 00  1 338      
    lea edi,[ebp-72] (exponent)           ;#0044885B: 215175 B8                  uv 80 20  1 339      
    call #00462764 (:%e01tcfAddiii)       ;#0044885E: 350 019F0100               v  00 00  1 339      
;   278         result = round_str(result,f,exponent,charflag,digit)--,minfieldwidth)
    mov ecx,16                            ;#00448863: 271 10000000               uv 02 00  1 340      
    mov edx,495                           ;#00448868: 272 EF010000               vu 04 00  1 340      
    call :%opFrame (round_str)            ;#0044886D: 350 90A30100               v  00 00  1 341      
    mov edi,[ebp+20] (prevebp)            ;#00448872: 213175 14                  uv 80 20  1 342      
    mov eax,[edi-68]                      ;#00448875: 213107 BC                  uv 01 80  1 345 80 *80*
    mov [edi-68], dword h4                ;#00448878: 307107 BC 00000040         vu 00 80  1 345      
    cmp eax,h4                            ;#0044887F: 075 00000040               uv 00 01  1 346      
    jne #00448890                         ;#00448884: 165 0A                     v  00 00  1 346      
    mov esi,551                           ;#00448886: 276 27020000               uv 40 00  1 347      
    call #00462744 (:%pUnassigned)        ;#0044888B: 350 B49E0100               v  00 00  1 347      
    mov [ebp] (result),eax                ;#00448890: 211105 00                  uv 00 21  1 348      
    mov edi,[ebp+20] (prevebp)            ;#00448893: 213175 14                  vu 80 20  1 348      
    mov eax,[edi-56]                      ;#00448896: 213107 C8                  uv 01 80  1 351    *80*
    xor ebx,ebx                           ;#00448899: 061333                     vu 08 08  1 351      
    cmp eax,h4                            ;#0044889B: 075 00000040               uv 00 01  1 352      
    jl #004488AC                          ;#004488A0: 174 0A                     v  00 00  1 352      
    add dword[ebx+eax*4-8],1              ;#004488A2: 203104203 F8 01            u  00 09  3 353      
    cmp eax,548                           ;#004488A7: 075 24020000               vu 00 01  1 355      
    mov [ebp-4] (f),eax                   ;#004488AC: 211105 FC                  uv 00 21  1 356      
    mov edi,[ebp+20] (prevebp)            ;#004488AF: 213175 14                  vu 80 20  1 356      
    mov eax,[edi-72]                      ;#004488B2: 213107 B8                  uv 01 80  1 359    *80*
    mov [ebp-8] (exponent),eax            ;#004488B5: 211105 F8                  uv 00 21  1 360 01   
    mov edi,[ebp+20] (prevebp)            ;#004488B8: 213175 14                  vu 80 20  1 360      
    mov eax,[edi-4]                       ;#004488BB: 213107 FC                  uv 01 80  1 363    *80*
    mov [ebp-12] (charflag),eax           ;#004488BE: 211105 F4                  uv 00 21  1 364 01   
    mov edi,[ebp+20] (prevebp)            ;#004488C1: 213175 14                  vu 80 20  1 364      
    mov eax,[edi-52]                      ;#004488C4: 213107 CC                  uv 01 80  1 367    *80*
    mov [ebp-16] (digit),eax              ;#004488C7: 211105 F0                  uv 00 21  1 368 01   
    mov [ebp+28] (retaddr),#004488D6      ;#004488CA: 307105 1C D6884400         vu 00 20  1 368      
    jmp #00449366 (code:round_str)        ;#004488D1: 351 900A0000               v  00 00  1 369      
    push eax                              ;#004488D6: 120                        uv 00 01  1 370      
    mov ecx,[ebp-68] (result)             ;#004488D7: 213115 BC                  vu 02 20  1 370      
    cmp ecx,h4                            ;#004488DA: 201371 00000040            uv 00 02  1 371      
    jle #004488F0                         ;#004488E0: 176 0E                     v  00 00  1 371      
    sub dword[ebx+ecx*4-8],1              ;#004488E2: 203154213 F8 01            u  00 0A  3 372      
    jne #004488F0                         ;#004488E7: 165 07                     v  00 00  1 374      
    mov edx,ecx                           ;#004488E9: 213321                     uv 04 02  1 375      
    call #004639A8 (:%pDealloc)           ;#004488EB: 350 B8B00100               v  00 00  1 375      
    pop dword[ebp-68] (result)            ;#004488F0: 217105 BC                  np 00 20  3 376      
;   279         k = find('!',result)
    mov ecx,8                             ;#004488F3: 271 08000000               uv 02 00  1 379      
    mov edx,110                           ;#004488F8: 272 6E000000               vu 04 00  1 379      
    call #00462C02 (:%opFrame) (find)     ;#004488FD: 350 00A30100               v  00 00  1 380      
    mov [ebp] (needle), dword 33          ;#00448902: 307105 00 21000000         uv 00 20  1 381      
    mov edi,[ebp+20] (prevebp)            ;#00448909: 213175 14                  vu 80 20  1 381      
    mov eax,[edi-68]                      ;#0044890C: 213107 BC                  uv 01 80  1 384    *80*
    xor ebx,ebx                           ;#0044890F: 061333                     vu 08 08  1 384      
    cmp eax,h4                            ;#00448911: 075 00000040               uv 00 01  1 385      
    jl #00448922                          ;#00448916: 174 0A                     v  00 00  1 385      
    add dword[ebx+eax*4-8],1              ;#00448918: 203104203 F8 01            u  00 09  3 386      
    cmp eax,551                           ;#0044891D: 075 27020000               vu 00 01  1 388      
    mov [ebp-4] (haystack),eax            ;#00448922: 211105 FC                  uv 00 21  1 389      
    mov [ebp+28] (retaddr),#00448931      ;#00448925: 307105 1C 31894400         vu 00 20  1 389      
    jmp #0045AADB (code:find)             ;#0044892C: 351 AA210100               v  00 00  1 390      
    mov [ebp-76] (k),eax                  ;#00448931: 211105 B4                  uv 00 21  1 391      
;   280         if k then
    test eax,eax                          ;#00448934: 205300                     vu 00 01  1 391      
    je #0044899C                          ;#00448936: 164 64                     v  00 00  1 392      
;   281 --          if k=length(result) then
;   282 --              result = result[1..-2]
;   283 --          else
;   284                 result[k] = '.'
    mov edi,eax                           ;#00448938: 211307                     uv 80 01  1 393      
    mov ecx,46                            ;#0044893A: 271 2E000000               vu 02 00  1 393      
    mov esi,[ebp-68] (result)             ;#0044893F: 213165 BC                  uv 40 20  1 394      
    lea eax,[ebp-68] (result)             ;#00448942: 215105 BC                  vu 01 20  1 394      
    call #004607F3 (:%pRepe1)             ;#00448945: 350 A97E0100               v  00 00  1 395      
    mov ecx,[ebp-68] (result)             ;#0044894A: 213115 BC                  uv 02 20  1 396      
    cmp ecx,h4                            ;#0044894D: 201371 00000040            uv 00 02  1 397 02   
    jl #0044895C                          ;#00448953: 174 07                     v  00 00  1 397      
    cmp byte[ebx+ecx*4-1],#82             ;#00448955: 200174213 FF 82            u  00 0A  2 398      
    je #00448966                          ;#0044895A: 164 0A                     v  00 00  1 399      
    mov ecx,551                           ;#0044895C: 271 27020000               uv 02 00  1 400      
    call #00462D8D (:%opTcFail)           ;#00448961: 350 27A40100               v  00 00  1 400      
;   285 --24/3/23!
;   286                 result = result[1..-2]
    lea edx,[ebp-68] (result)             ;#00448966: 215125 BC                  uv 04 20  1 401      
    mov ecx,1                             ;#00448969: 271 01000000               vu 02 00  1 401      
    push #00448985                        ;#0044896E: 150 85894400               uv 00 00  1 402      
    push edx                              ;#00448973: 122                        vu 00 04  1 402      
    push -2                               ;#00448974: 152 FE                     uv 00 00  1 403      
    push 1                                ;#00448976: 152 01                     vu 00 00  1 403      
    mov esi,[ebp-68] (result)             ;#00448978: 213165 BC                  uv 40 20  1 404      
    mov edx,551                           ;#0044897B: 272 27020000               vu 04 00  1 404      
    jmp #00460A75 (:%pSubss)              ;#00448980: 351 F0800100               v  00 00  1 405      
;   287 --          end if
;   288             exponent += 1
    mov eax,[ebp-72] (exponent)           ;#00448985: 213105 B8                  uv 01 20  1 406      
    add eax,1                             ;#00448988: 203300 01                  uv 01 01  1 407 01   
    mov edx,eax                           ;#0044898B: 213320                     uv 04 01  1 408 01   
    mov [ebp-72] (exponent),eax           ;#0044898D: 211105 B8                  vu 00 21  1 408      
    shl edx,1                             ;#00448990: 321342                     u  04 04  1 409      
    jno #0044899C                         ;#00448992: 161 08                     v  00 00  1 409      
    lea edi,[ebp-72] (exponent)           ;#00448994: 215175 B8                  uv 80 20  1 410      
    call #00462764 (:%e01tcfAddiii)       ;#00448997: 350 C89D0100               v  00 00  1 410      
;   289         end if
;   290         exponent += expadj
    mov edi,[ebp-72] (exponent)           ;#0044899C: 213175 B8                  uv 80 20  1 411      
    mov ecx,[ebp-36] (expadj)             ;#0044899F: 213115 DC                  vu 02 20  1 411      
    add edi,ecx                           ;#004489A2: 001317                     uv 80 82  1 412      
    mov edx,edi                           ;#004489A4: 213327                     uv 04 80  1 413 80   
    mov [ebp-72] (exponent),edi           ;#004489A6: 211175 B8                  vu 00 A0  1 413      
    shl edx,1                             ;#004489A9: 321342                     u  04 04  1 414      
    jno #004489B5                         ;#004489AB: 161 08                     v  00 00  1 414      
    lea edi,[ebp-72] (exponent)           ;#004489AD: 215175 B8                  uv 80 20  1 415      
    call #00462764 (:%e01tcfAddiii)       ;#004489B0: 350 AF9D0100               v  00 00  1 415      
;   291         result &= capE
    lea edx,[ebp-68] (result)             ;#004489B5: 215125 BC                  uv 04 20  1 416      
    lea edi,[ebp-68] (result)             ;#004489B8: 215175 BC                  vu 80 20  1 416      
    lea ecx,[ebp-40] (capE)               ;#004489BB: 215115 D8                  uv 02 20  1 417      
    xor eax,eax                           ;#004489BE: 061300                     vu 01 01  1 417      
    call #0045F9F7 (:%opApnd)             ;#004489C0: 350 32700100               v  00 00  1 418      
    mov esi,[ebp-68] (result)             ;#004489C5: 213165 BC                  uv 40 20  1 419      
    cmp esi,h4                            ;#004489C8: 201376 00000040            uv 00 40  1 420 40   
    jl #004489D7                          ;#004489CE: 174 07                     v  00 00  1 420      
    cmp byte[ebx+esi*4-1],#82             ;#004489D0: 200174263 FF 82            u  00 48  2 421      
    je #004489E1                          ;#004489D5: 164 0A                     v  00 00  1 422      
    mov ecx,551                           ;#004489D7: 271 27020000               uv 02 00  1 423      
    call #00462D8D (:%opTcFail)           ;#004489DC: 350 ACA30100               v  00 00  1 423      
;   292         if exponent<0 then
    mov eax,[ebp-72] (exponent)           ;#004489E1: 213105 B8                  uv 01 20  1 424      
    cmp eax,0                             ;#004489E4: 203370 00                  uv 00 01  1 425 01   
    jge #00448A2F                         ;#004489E7: 175 46                     v  00 00  1 425      
;   293             result &= '-'
    lea edx,[ebp-68] (result)             ;#004489E9: 215125 BC                  uv 04 20  1 426      
    lea edi,[ebp-68] (result)             ;#004489EC: 215175 BC                  vu 80 20  1 426      
    mov ecx,#00402210                     ;#004489EF: 271 10224000               uv 02 00  1 427      
    xor eax,eax                           ;#004489F4: 061300                     vu 01 01  1 427      
    call #0045F9F7 (:%opApnd)             ;#004489F6: 350 FC6F0100               v  00 00  1 428      
    mov ecx,[ebp-68] (result)             ;#004489FB: 213115 BC                  uv 02 20  1 429      
    cmp ecx,h4                            ;#004489FE: 201371 00000040            uv 00 02  1 430 02   
    jl #00448A0D                          ;#00448A04: 174 07                     v  00 00  1 430      
    cmp byte[ebx+ecx*4-1],#82             ;#00448A06: 200174213 FF 82            u  00 0A  2 431      
    je #00448A17                          ;#00448A0B: 164 0A                     v  00 00  1 432      
    mov ecx,551                           ;#00448A0D: 271 27020000               uv 02 00  1 433      
    call #00462D8D (:%opTcFail)           ;#00448A12: 350 76A30100               v  00 00  1 433      
;   294             exponent = 0-exponent
    mov edi,[ebp-72] (exponent)           ;#00448A17: 213175 B8                  uv 80 20  1 434      
    xor edx,edx                           ;#00448A1A: 061322                     vu 04 04  1 434      
    sub edx,edi                           ;#00448A1C: 051372                     uv 04 84  1 435      
    mov [ebp-72] (exponent),edx           ;#00448A1E: 211125 B8                  uv 00 24  1 436 04   
    shl edx,1                             ;#00448A21: 321342                     u  04 04  1 437      
    jno #00448A5D                         ;#00448A23: 161 38                     v  00 00  1 437      
    lea edi,[ebp-72] (exponent)           ;#00448A25: 215175 B8                  uv 80 20  1 438      
    call #00462764 (:%e01tcfAddiii)       ;#00448A28: 350 379D0100               v  00 00  1 438      
    jmp #00448A5D                         ;#00448A2D: 353 2E                     v  00 00  1 439      
;   295         else
;   296             result &= '+'
    lea edx,[ebp-68] (result)             ;#00448A2F: 215125 BC                  uv 04 20  1 440      
    lea edi,[ebp-68] (result)             ;#00448A32: 215175 BC                  vu 80 20  1 440      
    mov ecx,#00402240                     ;#00448A35: 271 40224000               uv 02 00  1 441      
    xor eax,eax                           ;#00448A3A: 061300                     vu 01 01  1 441      
    call #0045F9F7 (:%opApnd)             ;#00448A3C: 350 B66F0100               v  00 00  1 442      
    mov esi,[ebp-68] (result)             ;#00448A41: 213165 BC                  uv 40 20  1 443      
    cmp esi,h4                            ;#00448A44: 201376 00000040            uv 00 40  1 444 40   
    jl #00448A53                          ;#00448A4A: 174 07                     v  00 00  1 444      
    cmp byte[ebx+esi*4-1],#82             ;#00448A4C: 200174263 FF 82            u  00 48  2 445      
    je #00448A5D                          ;#00448A51: 164 0A                     v  00 00  1 446      
    mov ecx,551                           ;#00448A53: 271 27020000               uv 02 00  1 447      
    call #00462D8D (:%opTcFail)           ;#00448A58: 350 30A30100               v  00 00  1 447      
;   297         end if
;   298         if exponent=0 then
    mov eax,[ebp-72] (exponent)           ;#00448A5D: 213105 B8                  uv 01 20  1 448      
    cmp eax,0                             ;#00448A60: 203370 00                  uv 00 01  1 449 01   
    jne #00448A96                         ;#00448A63: 165 31                     v  00 00  1 449      
;   299 --          reve = "0"
;   300             reve = repeat('0',1)
    mov ecx,6                             ;#00448A65: 271 06000000               uv 02 00  1 450      
    mov edx,206                           ;#00448A6A: 272 CE000000               vu 04 00  1 450      
    call :%opFrame (repeatch)             ;#00448A6F: 350 8EA10100               v  00 00  1 451      
    mov [ebp] (ch), dword 48              ;#00448A74: 307105 00 30000000         uv 00 20  1 452      
    mov [ebp-4] (n), dword 1              ;#00448A7B: 307105 FC 01000000         vu 00 20  1 452      
    mov [ebp+28] (retaddr),#00448A8E      ;#00448A82: 307105 1C 8E8A4400         uv 00 20  1 453      
    jmp #0045581E (code:repeatch)         ;#00448A89: 351 90CD0000               v  00 00  1 453      
    mov [ebp-28] (reve),eax               ;#00448A8E: 211105 E4                  uv 00 21  1 454      
    jmp #00448C41                         ;#00448A91: 351 AB010000               v  00 00  1 454      
;   301         else
;   302 --          reve = ""
;   303             reve = repeat(' ',0)
    mov ecx,6                             ;#00448A96: 271 06000000               uv 02 00  1 455      
    mov edx,206                           ;#00448A9B: 272 CE000000               vu 04 00  1 455      
    call :%opFrame (repeatch)             ;#00448AA0: 350 5DA10100               v  00 00  1 456      
    mov [ebp] (ch), dword 32              ;#00448AA5: 307105 00 20000000         uv 00 20  1 457      
    mov [ebp-4] (n),ebx                   ;#00448AAC: 211135 FC                  vu 00 28  1 457      
    mov [ebp+28] (retaddr),#00448ABB      ;#00448AAF: 307105 1C BB8A4400         uv 00 20  1 458      
    jmp #0045581E (code:repeatch)         ;#00448AB6: 351 63CD0000               v  00 00  1 458      
    push eax                              ;#00448ABB: 120                        uv 00 01  1 459      
    mov ecx,[ebp-28] (reve)               ;#00448ABC: 213115 E4                  vu 02 20  1 459      
    cmp ecx,h4                            ;#00448ABF: 201371 00000040            uv 00 02  1 460      
    jle #00448AD5                         ;#00448AC5: 176 0E                     v  00 00  1 460      
    sub dword[ebx+ecx*4-8],1              ;#00448AC7: 203154213 F8 01            u  00 0A  3 461      
    jne #00448AD5                         ;#00448ACC: 165 07                     v  00 00  1 463      
    mov edx,ecx                           ;#00448ACE: 213321                     uv 04 02  1 464      
    call #004639A8 (:%pDealloc)           ;#00448AD0: 350 D3AE0100               v  00 00  1 464      
    pop dword[ebp-28] (reve)              ;#00448AD5: 217105 E4                  np 00 20  3 465      
;   304             while exponent do
    mov edi,[ebp-72] (exponent)           ;#00448AD8: 213175 B8                  uv 80 20  1 468      
    test edi,edi                          ;#00448ADB: 205377                     uv 00 80  1 469 80   
    je #00448B6A                          ;#00448ADD: 017204 87000000            v  00 00  1 469      
;   305                 reve = append(reve,floor(remainder(exponent,10)+'0'))
    lea edi,[ebp-104] (symtab[562])       ;#00448AE3: 215175 98                  uv 80 20  1 470      
    mov eax,[ebp-72] (exponent)           ;#00448AE6: 213105 B8                  vu 01 20  1 470      
    mov ecx,[#00402090] (BRIGHT_GREEN)    ;#00448AE9: 213015 90204000            uv 02 00  1 471      
    call #0045EF61 (:%opRmdr)             ;#00448AEF: 350 6D640100               v  00 00  1 471      
    lea edi,[ebp-108] (symtab[564])       ;#00448AF4: 215175 94                  uv 80 20  1 472      
    mov ecx,[ebp-104] (symtab[562])       ;#00448AF7: 213115 98                  vu 02 20  1 472      
    mov eax,[MB_ICONEXCLAMATION]          ;#00448AFA: 241 D8204000               uv 01 00  1 473      
    call #0045F261 (:%opAdd)              ;#00448AFF: 350 5D670100               v  00 00  1 473      
    lea edi,[ebp-104] (symtab[562])       ;#00448B04: 215175 98                  uv 80 20  1 474      
    mov eax,[ebp-108] (symtab[564])       ;#00448B07: 213105 94                  vu 01 20  1 474      
    call #0045F5DE (:%opFloor)            ;#00448B0A: 350 CF6A0100               v  00 00  1 475      
    lea edx,[ebp-28] (reve)               ;#00448B0F: 215125 E4                  uv 04 20  1 476      
    lea edi,[ebp-28] (reve)               ;#00448B12: 215175 E4                  vu 80 20  1 476      
    lea ecx,[ebp-104] (symtab[562])       ;#00448B15: 215115 98                  uv 02 20  1 477      
    xor eax,eax                           ;#00448B18: 061300                     vu 01 01  1 477      
    call #0045F9F7 (:%opApnd)             ;#00448B1A: 350 D86E0100               v  00 00  1 478      
    mov edx,[ebp-104] (symtab[562])       ;#00448B1F: 213125 98                  uv 04 20  1 479      
    cmp edx,h4                            ;#00448B22: 201372 00000040            uv 00 04  1 480 04   
    mov [ebp-104] (symtab[562]),ebx       ;#00448B28: 211135 98                  vu 00 28  1 480      
    jle #00448B39                         ;#00448B2B: 176 0C                     v  00 00  1 481      
    sub dword[ebx+edx*4-8],1              ;#00448B2D: 203154223 F8 01            u  00 0C  3 482      
    jne #00448B39                         ;#00448B32: 165 05                     v  00 00  1 484      
    call #004639A8 (:%pDealloc)           ;#00448B34: 350 6FAE0100               v  00 00  1 485      
    mov esi,[ebp-28] (reve)               ;#00448B39: 213165 E4                  uv 40 20  1 486      
    cmp esi,h4                            ;#00448B3C: 201376 00000040            uv 00 40  1 487 40   
    jl #00448B4B                          ;#00448B42: 174 07                     v  00 00  1 487      
    cmp byte[ebx+esi*4-1],#82             ;#00448B44: 200174263 FF 82            u  00 48  2 488      
    je #00448B55                          ;#00448B49: 164 0A                     v  00 00  1 489      
    mov ecx,541                           ;#00448B4B: 271 1D020000               uv 02 00  1 490      
    call #00462D8D (:%opTcFail)           ;#00448B50: 350 38A20100               v  00 00  1 490      
;   306                 exponent = floor(exponent/10)
    lea edi,[ebp-72] (exponent)           ;#00448B55: 215175 B8                  uv 80 20  1 491      
    mov ecx,[ebp-72] (exponent)           ;#00448B58: 213115 B8                  vu 02 20  1 491      
    mov eax,[#00402090] (BRIGHT_GREEN)    ;#00448B5B: 241 90204000               uv 01 00  1 492      
    call #0045F39A (:%opDivf)             ;#00448B60: 350 35680100               v  00 00  1 492      
;   307             end while
    jmp #00448AD8                         ;#00448B65: 351 6EFFFFFF               v  00 00  1 493      
;   308             revelen = length(reve)
    mov edi,[ebp-28] (reve)               ;#00448B6A: 213175 E4                  uv 80 20  1 494      
    mov esi,[ebx+edi*4-12]                ;#00448B6D: 213164273 F4               uv 40 88  1 497 80 *80*
    mov [ebp-32] (revelen),esi            ;#00448B71: 211165 E0                  uv 00 60  1 498 40   
;   309             for j=1 to revelen do
    mov [ebp-112] (symtab[565]),esi       ;#00448B74: 211165 90                  vu 00 60  1 498      
    mov [ebp-116] (j), dword 1            ;#00448B77: 307105 8C 01000000         uv 00 20  1 499      
    cmp esi,1                             ;#00448B7E: 201376 01000000            vu 00 40  1 499      
    jl #00448C41                          ;#00448B84: 017214 B7000000            v  00 00  1 500      
;   310                 if j>=revelen then exit end if
    mov ecx,[ebp-116] (j)                 ;#00448B8A: 213115 8C                  uv 02 20  1 501      
    mov eax,[ebp-32] (revelen)            ;#00448B8D: 213105 E0                  vu 01 20  1 501      
    cmp ecx,eax                           ;#00448B90: 071301                     uv 00 03  1 502      
    jge #00448C41                         ;#00448B92: 017215 A9000000            v  00 00  1 502      
;   311                 tmp = reve[j]
    mov edi,ecx                           ;#00448B98: 211317                     uv 80 02  1 503      
    mov esi,[ebp-28] (reve)               ;#00448B9A: 213165 E4                  vu 40 20  1 503      
    mov edx,541                           ;#00448B9D: 272 1D020000               uv 04 00  1 504      
    call #004610CE (:%pSubse1is)          ;#00448BA2: 350 27850100               v  00 00  1 504      
    mov [ebp-48] (tmp),eax                ;#00448BA7: 211105 D0                  uv 00 21  1 505      
;   312                 reve[j] = reve[revelen]
    mov edi,[ebp-32] (revelen)            ;#00448BAA: 213175 E0                  vu 80 20  1 505      
    mov esi,[ebp-28] (reve)               ;#00448BAD: 213165 E4                  uv 40 20  1 506      
    mov edx,541                           ;#00448BB0: 272 1D020000               vu 04 00  1 506      
    call #004610CE (:%pSubse1is)          ;#00448BB5: 350 14850100               v  00 00  1 507      
    mov [ebp-100] (symtab[561]),eax       ;#00448BBA: 211105 9C                  uv 00 21  1 508      
    mov ecx,eax                           ;#00448BBD: 211301                     vu 02 01  1 508      
    mov edi,[ebp-116] (j)                 ;#00448BBF: 213175 8C                  uv 80 20  1 509      
    mov esi,[ebp-28] (reve)               ;#00448BC2: 213165 E4                  vu 40 20  1 509      
    lea eax,[ebp-28] (reve)               ;#00448BC5: 215105 E4                  uv 01 20  1 510      
    call #004607F3 (:%pRepe1)             ;#00448BC8: 350 267C0100               v  00 00  1 510      
    mov [ebp-100] (symtab[561]),ebx       ;#00448BCD: 211135 9C                  uv 00 28  1 511      
    mov eax,[ebp-28] (reve)               ;#00448BD0: 213105 E4                  vu 01 20  1 511      
    cmp eax,h4                            ;#00448BD3: 075 00000040               uv 00 01  1 512      
    jl #00448BE1                          ;#00448BD8: 174 07                     v  00 00  1 512      
    cmp byte[ebx+eax*4-1],#82             ;#00448BDA: 200174203 FF 82            u  00 09  2 513      
    je #00448BEB                          ;#00448BDF: 164 0A                     v  00 00  1 514      
    mov ecx,541                           ;#00448BE1: 271 1D020000               uv 02 00  1 515      
    call #00462D8D (:%opTcFail)           ;#00448BE6: 350 A2A10100               v  00 00  1 515      
;   313                 reve[revelen] = tmp
    mov esi,eax                           ;#00448BEB: 211306                     uv 40 01  1 516      
    mov edi,[ebp-32] (revelen)            ;#00448BED: 213175 E0                  vu 80 20  1 516      
    mov ecx,[ebp-48] (tmp)                ;#00448BF0: 213115 D0                  uv 02 20  1 517      
    lea eax,[ebp-28] (reve)               ;#00448BF3: 215105 E4                  vu 01 20  1 517      
    call #004607F3 (:%pRepe1)             ;#00448BF6: 350 F87B0100               v  00 00  1 518      
    mov eax,[ebp-28] (reve)               ;#00448BFB: 213105 E4                  uv 01 20  1 519      
    cmp eax,h4                            ;#00448BFE: 075 00000040               uv 00 01  1 520 01   
    jl #00448C0C                          ;#00448C03: 174 07                     v  00 00  1 520      
    cmp byte[ebx+eax*4-1],#82             ;#00448C05: 200174203 FF 82            u  00 09  2 521      
    je #00448C16                          ;#00448C0A: 164 0A                     v  00 00  1 522      
    mov ecx,541                           ;#00448C0C: 271 1D020000               uv 02 00  1 523      
    call #00462D8D (:%opTcFail)           ;#00448C11: 350 77A10100               v  00 00  1 523      
;   314                 revelen -= 1
    mov esi,[ebp-32] (revelen)            ;#00448C16: 213165 E0                  uv 40 20  1 524      
    sub esi,1                             ;#00448C19: 203356 01                  uv 40 40  1 525 40   
    mov edx,esi                           ;#00448C1C: 213326                     uv 04 40  1 526 40   
    mov [ebp-32] (revelen),esi            ;#00448C1E: 211165 E0                  vu 00 60  1 526      
    shl edx,1                             ;#00448C21: 321342                     u  04 04  1 527      
    jno #00448C2D                         ;#00448C23: 161 08                     v  00 00  1 527      
    lea edi,[ebp-32] (revelen)            ;#00448C25: 215175 E0                  uv 80 20  1 528      
    call #00462764 (:%e01tcfAddiii)       ;#00448C28: 350 379B0100               v  00 00  1 528      
;   315             end for
    mov edi,[ebp-116] (j)                 ;#00448C2D: 213175 8C                  uv 80 20  1 529      
    mov ecx,[ebp-112] (symtab[565])       ;#00448C30: 213115 90                  vu 02 20  1 529      
    add edi,1                             ;#00448C33: 203307 01                  uv 80 80  1 530      
    cmp edi,ecx                           ;#00448C36: 073371                     uv 00 82  1 531 80   
    mov [ebp-116] (j),edi                 ;#00448C38: 211175 8C                  vu 00 A0  1 531      
    jle #00448B8A                         ;#00448C3B: 017216 49FFFFFF            v  00 00  1 532      
;   316         end if
;   317         result &= reve
    mov eax,[ebp-28] (reve)               ;#00448C41: 213105 E4                  uv 01 20  1 533      
    cmp eax,h4                            ;#00448C44: 075 00000040               uv 00 01  1 534 01   
    jne #00448C55                         ;#00448C49: 165 0A                     v  00 00  1 534      
    mov esi,541                           ;#00448C4B: 276 1D020000               uv 40 00  1 535      
    call #00462744 (:%pUnassigned)        ;#00448C50: 350 EF9A0100               v  00 00  1 535      
    lea edx,[ebp-68] (result)             ;#00448C55: 215125 BC                  uv 04 20  1 536      
    lea edi,[ebp-68] (result)             ;#00448C58: 215175 BC                  vu 80 20  1 536      
    lea ecx,[ebp-28] (reve)               ;#00448C5B: 215115 E4                  uv 02 20  1 537      
    call #0045FD65 (:%opConcat)           ;#00448C5E: 350 02710100               v  00 00  1 537      
    jmp #0044935B                         ;#00448C63: 351 F3060000               v  00 00  1 538      
;   318     else
;   319         digit = 0
    mov [ebp-52] (digit),ebx              ;#00448C68: 211135 CC                  uv 00 28  1 539      
;   320         if exponent<-1 then
    mov esi,[ebp-72] (exponent)           ;#00448C6B: 213165 B8                  vu 40 20  1 539      
    cmp esi,-1                            ;#00448C6E: 203376 FF                  uv 00 40  1 540      
    jge #00448D81                         ;#00448C71: 017215 0A010000            v  00 00  1 540      
;   321 --DEV not thread safe
;   322 --          result &= "0."
;   323             result &= '0'
    lea edx,[ebp-68] (result)             ;#00448C77: 215125 BC                  uv 04 20  1 541      
    lea edi,[ebp-68] (result)             ;#00448C7A: 215175 BC                  vu 80 20  1 541      
    mov ecx,#004020D8                     ;#00448C7D: 271 D8204000               uv 02 00  1 542      
    xor eax,eax                           ;#00448C82: 061300                     vu 01 01  1 542      
    call #0045F9F7 (:%opApnd)             ;#00448C84: 350 6E6D0100               v  00 00  1 543      
    mov ecx,[ebp-68] (result)             ;#00448C89: 213115 BC                  uv 02 20  1 544      
    cmp ecx,h4                            ;#00448C8C: 201371 00000040            uv 00 02  1 545 02   
    jl #00448C9B                          ;#00448C92: 174 07                     v  00 00  1 545      
    cmp byte[ebx+ecx*4-1],#82             ;#00448C94: 200174213 FF 82            u  00 0A  2 546      
    je #00448CA5                          ;#00448C99: 164 0A                     v  00 00  1 547      
    mov ecx,551                           ;#00448C9B: 271 27020000               uv 02 00  1 548      
    call #00462D8D (:%opTcFail)           ;#00448CA0: 350 E8A00100               v  00 00  1 548      
;   324             if charflag!='g' or f!=0 then
    mov edi,[ebp-4] (charflag)            ;#00448CA5: 213175 FC                  uv 80 20  1 549      
    cmp edi,103                           ;#00448CA8: 203377 67                  uv 00 80  1 550 80   
    jne #00448CB9                         ;#00448CAB: 165 0C                     v  00 00  1 550      
    mov eax,[ebp-56] (f)                  ;#00448CAD: 213105 C8                  uv 01 20  1 551      
    cmp eax,0                             ;#00448CB0: 203370 00                  uv 00 01  1 552 01   
    je #00448D81                          ;#00448CB3: 017204 C8000000            v  00 00  1 552      
;   325                 result &= '.'
    lea edx,[ebp-68] (result)             ;#00448CB9: 215125 BC                  uv 04 20  1 553      
    lea edi,[ebp-68] (result)             ;#00448CBC: 215175 BC                  vu 80 20  1 553      
    mov ecx,#00402208                     ;#00448CBF: 271 08224000               uv 02 00  1 554      
    xor eax,eax                           ;#00448CC4: 061300                     vu 01 01  1 554      
    call #0045F9F7 (:%opApnd)             ;#00448CC6: 350 2C6D0100               v  00 00  1 555      
    mov esi,[ebp-68] (result)             ;#00448CCB: 213165 BC                  uv 40 20  1 556      
    cmp esi,h4                            ;#00448CCE: 201376 00000040            uv 00 40  1 557 40   
    jl #00448CDD                          ;#00448CD4: 174 07                     v  00 00  1 557      
    cmp byte[ebx+esi*4-1],#82             ;#00448CD6: 200174263 FF 82            u  00 48  2 558      
    je #00448CE7                          ;#00448CDB: 164 0A                     v  00 00  1 559      
    mov ecx,551                           ;#00448CDD: 271 27020000               uv 02 00  1 560      
    call #00462D8D (:%opTcFail)           ;#00448CE2: 350 A6A00100               v  00 00  1 560      
;   326                 dotdone = 1
    mov [ebp-20] (dotdone), dword 1       ;#00448CE7: 307105 EC 01000000         uv 00 20  1 561      
;   327                 while exponent<-1
    mov ecx,[ebp-72] (exponent)           ;#00448CEE: 213115 B8                  vu 02 20  1 561      
    cmp ecx,-1                            ;#00448CF1: 203371 FF                  uv 00 02  1 562      
    jge #00448D81                         ;#00448CF4: 017215 87000000            v  00 00  1 562      
;   328                   and (charflag!='g' or f!=0) do
    mov edi,[ebp-4] (charflag)            ;#00448CFA: 213175 FC                  uv 80 20  1 563      
    cmp edi,103                           ;#00448CFD: 203377 67                  uv 00 80  1 564 80   
    jne #00448D0A                         ;#00448D00: 165 08                     v  00 00  1 564      
    mov eax,[ebp-56] (f)                  ;#00448D02: 213105 C8                  uv 01 20  1 565      
    cmp eax,0                             ;#00448D05: 203370 00                  uv 00 01  1 566 01   
    je #00448D81                          ;#00448D08: 164 77                     v  00 00  1 566      
;   329                     exponent += 1
    add ecx,1                             ;#00448D0A: 203301 01                  uv 02 02  1 567      
    mov edx,ecx                           ;#00448D0D: 213321                     uv 04 02  1 568 02   
    mov [ebp-72] (exponent),ecx           ;#00448D0F: 211115 B8                  vu 00 22  1 568      
    shl edx,1                             ;#00448D12: 321342                     u  04 04  1 569      
    jno #00448D1E                         ;#00448D14: 161 08                     v  00 00  1 569      
    lea edi,[ebp-72] (exponent)           ;#00448D16: 215175 B8                  uv 80 20  1 570      
    call #00462764 (:%e01tcfAddiii)       ;#00448D19: 350 469A0100               v  00 00  1 570      
;   330                     if precision then
    mov esi,[ebp-16] (precision)          ;#00448D1E: 213165 F0                  uv 40 20  1 571      
    test esi,esi                          ;#00448D21: 205366                     uv 00 40  1 572 40   
    je #00448D6C                          ;#00448D23: 164 47                     v  00 00  1 572      
;   331                         result &= '0'
    lea edx,[ebp-68] (result)             ;#00448D25: 215125 BC                  uv 04 20  1 573      
    lea edi,[ebp-68] (result)             ;#00448D28: 215175 BC                  vu 80 20  1 573      
    mov ecx,#004020D8                     ;#00448D2B: 271 D8204000               uv 02 00  1 574      
    xor eax,eax                           ;#00448D30: 061300                     vu 01 01  1 574      
    call #0045F9F7 (:%opApnd)             ;#00448D32: 350 C06C0100               v  00 00  1 575      
    mov edi,[ebp-68] (result)             ;#00448D37: 213175 BC                  uv 80 20  1 576      
    cmp edi,h4                            ;#00448D3A: 201377 00000040            uv 00 80  1 577 80   
    jl #00448D49                          ;#00448D40: 174 07                     v  00 00  1 577      
    cmp byte[ebx+edi*4-1],#82             ;#00448D42: 200174273 FF 82            u  00 88  2 578      
    je #00448D53                          ;#00448D47: 164 0A                     v  00 00  1 579      
    mov ecx,551                           ;#00448D49: 271 27020000               uv 02 00  1 580      
    call #00462D8D (:%opTcFail)           ;#00448D4E: 350 3AA00100               v  00 00  1 580      
;   332 --24/5/20 (check removed)
;   333 --28/12/21 (check restored... [can no longer remember why it was removed, nowt in the release notes...])
;   334 --06/02/22 (removed again, for demo/pGUI/graph1.exw ["%.1f", -5.55e-17 printing as "-0.00000000000000006"])
;   335 --         (can't be absolutely sure, but I probably made that change for the approximate equality task..)
;   336 --                      if minfieldwidth>0 then
;   337                             precision -= 1
    mov eax,[ebp-16] (precision)          ;#00448D53: 213105 F0                  uv 01 20  1 581      
    sub eax,1                             ;#00448D56: 203350 01                  uv 01 01  1 582 01   
    mov edx,eax                           ;#00448D59: 213320                     uv 04 01  1 583 01   
    mov [ebp-16] (precision),eax          ;#00448D5B: 211105 F0                  vu 00 21  1 583      
    shl edx,1                             ;#00448D5E: 321342                     u  04 04  1 584      
    jno #00448CEE                         ;#00448D60: 161 8C                     v  00 00  1 584      
    lea edi,[ebp-16] (precision)          ;#00448D62: 215175 F0                  uv 80 20  1 585      
    call #00462764 (:%e01tcfAddiii)       ;#00448D65: 350 FA990100               v  00 00  1 585      
;   338 --                      end if
    jmp #00448CEE                         ;#00448D6A: 353 82                     v  00 00  1 586      
;   339                     else
;   340                         f /= 10
    lea edi,[ebp-56] (f)                  ;#00448D6C: 215175 C8                  uv 80 20  1 587      
    mov ecx,[ebp-56] (f)                  ;#00448D6F: 213115 C8                  vu 02 20  1 587      
    mov eax,[#00402090] (BRIGHT_GREEN)    ;#00448D72: 241 90204000               uv 01 00  1 588      
    call #0045F31D (:%opDiv)              ;#00448D77: 350 A1650100               v  00 00  1 588      
;   341                     end if
;   342                 end while
    jmp #00448CEE                         ;#00448D7C: 351 6DFFFFFF               v  00 00  1 589      
;   343             end if
;   344         end if
;   345 
;   346         while true do
;   347             if exponent=-1 then
    mov esi,[ebp-72] (exponent)           ;#00448D81: 213165 B8                  uv 40 20  1 590      
    cmp esi,-1                            ;#00448D84: 203376 FF                  uv 00 40  1 591 40   
    jne #00448F47                         ;#00448D87: 017205 BA010000            v  00 00  1 591      
;   348                 if precision>0 then
    mov edi,[ebp-16] (precision)          ;#00448D8D: 213175 F0                  uv 80 20  1 592      
    cmp edi,0                             ;#00448D90: 203377 00                  uv 00 80  1 593 80   
    jle #004490C6                         ;#00448D93: 017216 2D030000            v  00 00  1 593      
;   349                     if not dotdone then
    mov ecx,[ebp-20] (dotdone)            ;#00448D99: 213115 EC                  uv 02 20  1 594      
    test ecx,ecx                          ;#00448D9C: 205311                     uv 00 02  1 595 02   
    jne #00448E74                         ;#00448D9E: 017205 D0000000            v  00 00  1 595      
;   350                         if charflag='g' then
    mov eax,[ebp-4] (charflag)            ;#00448DA4: 213105 FC                  uv 01 20  1 596      
    cmp eax,103                           ;#00448DA7: 203370 67                  uv 00 01  1 597 01   
    jne #00448DB8                         ;#00448DAA: 165 0C                     v  00 00  1 597      
;   351                             if f=0 then exit end if
    mov esi,[ebp-56] (f)                  ;#00448DAC: 213165 C8                  uv 40 20  1 598      
    cmp esi,0                             ;#00448DAF: 203376 00                  uv 00 40  1 599 40   
    je #004490C6                          ;#00448DB2: 017204 0E030000            v  00 00  1 599      
;   352                         end if
;   353 --                      if find(result,{"","-","+"}) then
;   354                         if length(result)=0
    mov edi,[ebp-68] (result)             ;#00448DB8: 213175 BC                  uv 80 20  1 600      
    mov ecx,[ebx+edi*4-12]                ;#00448DBB: 213114273 F4               uv 02 88  1 603 80 *80*
    cmp ecx,0                             ;#00448DBF: 203371 00                  uv 00 02  1 604 02   
    je #00448E18                          ;#00448DC2: 164 54                     v  00 00  1 604      
;   355 --                      or (length(result)=1 and (result[1]='-' or result[1]='+')) then
;   356                         or (length(result)=1 and find(result[1],"-+ ")) then
    mov eax,[ebx+edi*4-12]                ;#00448DC4: 213104273 F4               uv 01 88  1 605      
    cmp eax,1                             ;#00448DC8: 203370 01                  uv 00 01  1 606 01   
    jne #00448E46                         ;#00448DCB: 165 79                     v  00 00  1 606      
    mov edi,1                             ;#00448DCD: 277 01000000               uv 80 00  1 607      
    mov esi,[ebp-68] (result)             ;#00448DD2: 213165 BC                  vu 40 20  1 607      
    mov edx,551                           ;#00448DD5: 272 27020000               uv 04 00  1 608      
    call #004610CE (:%pSubse1is)          ;#00448DDA: 350 EF820100               v  00 00  1 608      
    mov [ebp-100] (symtab[561]),eax       ;#00448DDF: 211105 9C                  uv 00 21  1 609      
    mov ecx,8                             ;#00448DE2: 271 08000000               vu 02 00  1 609      
    mov edx,110                           ;#00448DE7: 272 6E000000               uv 04 00  1 610      
    call #00462C02 (:%opFrame) (find)     ;#00448DEC: 350 119E0100               v  00 00  1 610      
    mov edi,[ebp+20] (prevebp)            ;#00448DF1: 213175 14                  uv 80 20  1 611      
    mov eax,[edi-100]                     ;#00448DF4: 213107 9C                  uv 01 80  1 614 80 *80*
    mov [ebp] (needle),eax                ;#00448DF7: 211105 00                  uv 00 21  1 615 01   
    mov ecx,[#00402244]                   ;#00448DFA: 213015 44224000            vu 02 00  1 615      
    mov [ebp-4] (haystack),ecx            ;#00448E00: 211115 FC                  uv 00 22  1 616      
    add dword[ebx+ecx*4-8],1              ;#00448E03: 203104213 F8 01            u  00 0A  3 618    *02*
    mov [ebp+28] (retaddr),#00448E14      ;#00448E08: 307105 1C 148E4400         vu 00 20  1 620      
    jmp #0045AADB (code:find)             ;#00448E0F: 351 C71C0100               v  00 00  1 621      
    test eax,eax                          ;#00448E14: 205300                     uv 00 01  1 622      
    je #00448E46                          ;#00448E16: 164 2E                     v  00 00  1 622      
;   357                             result &= '0'
    lea edx,[ebp-68] (result)             ;#00448E18: 215125 BC                  uv 04 20  1 623      
    lea edi,[ebp-68] (result)             ;#00448E1B: 215175 BC                  vu 80 20  1 623      
    mov ecx,#004020D8                     ;#00448E1E: 271 D8204000               uv 02 00  1 624      
    xor eax,eax                           ;#00448E23: 061300                     vu 01 01  1 624      
    call #0045F9F7 (:%opApnd)             ;#00448E25: 350 CD6B0100               v  00 00  1 625      
    mov edi,[ebp-68] (result)             ;#00448E2A: 213175 BC                  uv 80 20  1 626      
    cmp edi,h4                            ;#00448E2D: 201377 00000040            uv 00 80  1 627 80   
    jl #00448E3C                          ;#00448E33: 174 07                     v  00 00  1 627      
    cmp byte[ebx+edi*4-1],#82             ;#00448E35: 200174273 FF 82            u  00 88  2 628      
    je #00448E46                          ;#00448E3A: 164 0A                     v  00 00  1 629      
    mov ecx,551                           ;#00448E3C: 271 27020000               uv 02 00  1 630      
    call #00462D8D (:%opTcFail)           ;#00448E41: 350 479F0100               v  00 00  1 630      
;   358                         end if
;   359                         result &= '.'
    lea edx,[ebp-68] (result)             ;#00448E46: 215125 BC                  uv 04 20  1 631      
    lea edi,[ebp-68] (result)             ;#00448E49: 215175 BC                  vu 80 20  1 631      
    mov ecx,#00402208                     ;#00448E4C: 271 08224000               uv 02 00  1 632      
    xor eax,eax                           ;#00448E51: 061300                     vu 01 01  1 632      
    call #0045F9F7 (:%opApnd)             ;#00448E53: 350 9F6B0100               v  00 00  1 633      
    mov esi,[ebp-68] (result)             ;#00448E58: 213165 BC                  uv 40 20  1 634      
    cmp esi,h4                            ;#00448E5B: 201376 00000040            uv 00 40  1 635 40   
    jl #00448E6A                          ;#00448E61: 174 07                     v  00 00  1 635      
    cmp byte[ebx+esi*4-1],#82             ;#00448E63: 200174263 FF 82            u  00 48  2 636      
    je #00448E74                          ;#00448E68: 164 0A                     v  00 00  1 637      
    mov ecx,551                           ;#00448E6A: 271 27020000               uv 02 00  1 638      
    call #00462D8D (:%opTcFail)           ;#00448E6F: 350 199F0100               v  00 00  1 638      
;   360                     end if
;   361                     for j=1 to precision do
    mov ecx,[ebp-16] (precision)          ;#00448E74: 213115 F0                  uv 02 20  1 639      
    mov [ebp-120] (symtab[568]),ecx       ;#00448E77: 211115 88                  uv 00 22  1 640 02   
    mov [ebp-116] (j), dword 1            ;#00448E7A: 307105 8C 01000000         vu 00 20  1 640      
    lea edx,[ecx+1]                       ;#00448E81: 215121 01                  uv 04 02  1 641      
    shl edx,1                             ;#00448E84: 321342                     u  04 04  1 642      
    jno #00448E99                         ;#00448E86: 161 11                     v  00 00  1 642      
    mov al,121                            ;#00448E88: 260 79                     uv 01 00  1 643      
    mov edi,568                           ;#00448E8A: 277 38020000               vu 80 00  1 643      
    mov esi,26                            ;#00448E8F: 276 1A000000               uv 40 00  1 644      
    call #004627AC (:%pRTErn)             ;#00448E94: 350 13990100               v  00 00  1 644      
    cmp ecx,1                             ;#00448E99: 201371 01000000            uv 00 02  1 645      
    jl #004490C6                          ;#00448E9F: 017214 21020000            v  00 00  1 645      
;   362                         digit = floor(f)
    lea edi,[ebp-52] (digit)              ;#00448EA5: 215175 CC                  uv 80 20  1 646      
    mov eax,[ebp-56] (f)                  ;#00448EA8: 213105 C8                  vu 01 20  1 646      
    call #0045F5DE (:%opFloor)            ;#00448EAB: 350 2E670100               v  00 00  1 647      
    cmp eax,h4                            ;#00448EB0: 075 00000040               uv 00 01  1 648      
    jl #00448EC1                          ;#00448EB5: 174 0A                     v  00 00  1 648      
    mov ecx,547                           ;#00448EB7: 271 23020000               uv 02 00  1 649      
    call #00462D8D (:%opTcFail)           ;#00448EBC: 350 CC9E0100               v  00 00  1 649      
;   363                         result &= digit+'0'
    lea edi,[ebp-104] (symtab[562])       ;#00448EC1: 215175 98                  uv 80 20  1 650      
    mov ecx,eax                           ;#00448EC4: 211301                     vu 02 01  1 650      
    mov eax,[MB_ICONEXCLAMATION]          ;#00448EC6: 241 D8204000               uv 01 00  1 651      
    call #0045F261 (:%opAdd)              ;#00448ECB: 350 91630100               v  00 00  1 651      
    lea edx,[ebp-68] (result)             ;#00448ED0: 215125 BC                  uv 04 20  1 652      
    lea edi,[ebp-68] (result)             ;#00448ED3: 215175 BC                  vu 80 20  1 652      
    lea ecx,[ebp-104] (symtab[562])       ;#00448ED6: 215115 98                  uv 02 20  1 653      
    xor eax,eax                           ;#00448ED9: 061300                     vu 01 01  1 653      
    call #0045F9F7 (:%opApnd)             ;#00448EDB: 350 176B0100               v  00 00  1 654      
    mov edi,[ebp-68] (result)             ;#00448EE0: 213175 BC                  uv 80 20  1 655      
    cmp edi,h4                            ;#00448EE3: 201377 00000040            uv 00 80  1 656 80   
    jl #00448EF2                          ;#00448EE9: 174 07                     v  00 00  1 656      
    cmp byte[ebx+edi*4-1],#82             ;#00448EEB: 200174273 FF 82            u  00 88  2 657      
    je #00448EFC                          ;#00448EF0: 164 0A                     v  00 00  1 658      
    mov ecx,551                           ;#00448EF2: 271 27020000               uv 02 00  1 659      
    call #00462D8D (:%opTcFail)           ;#00448EF7: 350 919E0100               v  00 00  1 659      
;   364                         f = (f-digit)*10
    lea edi,[ebp-104] (symtab[562])       ;#00448EFC: 215175 98                  uv 80 20  1 660      
    mov ecx,[ebp-56] (f)                  ;#00448EFF: 213115 C8                  vu 02 20  1 660      
    mov eax,[ebp-52] (digit)              ;#00448F02: 213105 CC                  uv 01 20  1 661      
    call #0045F299 (:%opSub)              ;#00448F05: 350 8F630100               v  00 00  1 661      
    lea edi,[ebp-56] (f)                  ;#00448F0A: 215175 C8                  uv 80 20  1 662      
    mov ecx,[ebp-104] (symtab[562])       ;#00448F0D: 213115 98                  vu 02 20  1 662      
    mov eax,[#00402090] (BRIGHT_GREEN)    ;#00448F10: 241 90204000               uv 01 00  1 663      
    call #0045F412 (:%opMul)              ;#00448F15: 350 F8640100               v  00 00  1 663      
;   365                         if charflag='g' then
    mov esi,[ebp-4] (charflag)            ;#00448F1A: 213165 FC                  uv 40 20  1 664      
    cmp esi,103                           ;#00448F1D: 203376 67                  uv 00 40  1 665 40   
    jne #00448F2E                         ;#00448F20: 165 0C                     v  00 00  1 665      
;   366                             if f=0 then exit end if
    mov edi,[ebp-56] (f)                  ;#00448F22: 213175 C8                  uv 80 20  1 666      
    cmp edi,0                             ;#00448F25: 203377 00                  uv 00 80  1 667 80   
    je #004490C6                          ;#00448F28: 017204 98010000            v  00 00  1 667      
;   367                         end if
;   368                     end for
    mov ecx,[ebp-116] (j)                 ;#00448F2E: 213115 8C                  uv 02 20  1 668      
    mov eax,[ebp-120] (symtab[568])       ;#00448F31: 213105 88                  vu 01 20  1 668      
    add ecx,1                             ;#00448F34: 203301 01                  uv 02 02  1 669      
    cmp ecx,eax                           ;#00448F37: 073310                     uv 00 03  1 670 02   
    mov [ebp-116] (j),ecx                 ;#00448F39: 211115 8C                  vu 00 22  1 670      
    jle #00448EA5                         ;#00448F3C: 017216 63FFFFFF            v  00 00  1 671      
;   369                 end if
;   370                 exit
    jmp #004490C6                         ;#00448F42: 351 7F010000               v  00 00  1 672      
;   371             end if
;   372             if exponent>=1 then
    cmp esi,1                             ;#00448F47: 203376 01                  uv 00 40  1 673      
    jl #00448FD8                          ;#00448F4A: 017214 88000000            v  00 00  1 673      
;   373                 epwr = power(10,exponent)
    mov ecx,esi                           ;#00448F50: 211361                     uv 02 40  1 674      
    mov eax,10                            ;#00448F52: 270 0A000000               vu 01 00  1 674      
    lea edi,[ebp-64] (epwr)               ;#00448F57: 215175 C0                  uv 80 20  1 675      
    call #00463BFA (:%opPow)              ;#00448F5A: 350 9BAC0100               v  00 00  1 675      
;   374                 fwk = 0--epwr
    mov edx,[ebp-60] (fwk)                ;#00448F5F: 213125 C4                  uv 04 20  1 676      
    cmp edx,h4                            ;#00448F62: 201372 00000040            uv 00 04  1 677 04   
    mov [ebp-60] (fwk),ebx                ;#00448F68: 211135 C4                  vu 00 28  1 677      
    jle #00448F79                         ;#00448F6B: 176 0C                     v  00 00  1 678      
    sub dword[ebx+edx*4-8],1              ;#00448F6D: 203154223 F8 01            u  00 0C  3 679      
    jne #00448F79                         ;#00448F72: 165 05                     v  00 00  1 681      
    call #004639A8 (:%pDealloc)           ;#00448F74: 350 2FAA0100               v  00 00  1 682      
;   375                 digit = 0
    mov [ebp-52] (digit),ebx              ;#00448F79: 211135 CC                  uv 00 28  1 683      
;   376                 while f>=fwk+epwr do
    lea edi,[ebp-104] (symtab[562])       ;#00448F7C: 215175 98                  vu 80 20  1 683      
    mov ecx,[ebp-60] (fwk)                ;#00448F7F: 213115 C4                  uv 02 20  1 684      
    mov eax,[ebp-64] (epwr)               ;#00448F82: 213105 C0                  vu 01 20  1 684      
    call #0045F261 (:%opAdd)              ;#00448F85: 350 D7620100               v  00 00  1 685      
    mov edi,[ebp-104] (symtab[562])       ;#00448F8A: 213175 98                  uv 80 20  1 686      
    mov eax,[ebp-56] (f)                  ;#00448F8D: 213105 C8                  vu 01 20  1 686      
    mov esi,562                           ;#00448F90: 276 32020000               uv 40 00  1 687      
    mov edx,548                           ;#00448F95: 272 24020000               vu 04 00  1 687      
    call #0045F8B0 (:%opJcc)              ;#00448F9A: 350 11690100               v  00 00  1 688      
    jl #00448FC8                          ;#00448F9F: 174 27                     v  00 00  1 689      
;   377                     fwk += epwr
    lea edi,[ebp-60] (fwk)                ;#00448FA1: 215175 C4                  uv 80 20  1 690      
    mov ecx,[ebp-60] (fwk)                ;#00448FA4: 213115 C4                  vu 02 20  1 690      
    mov eax,[ebp-64] (epwr)               ;#00448FA7: 213105 C0                  uv 01 20  1 691      
    call #0045F261 (:%opAdd)              ;#00448FAA: 350 B2620100               v  00 00  1 691      
;   378                     digit += 1
    mov esi,[ebp-52] (digit)              ;#00448FAF: 213165 CC                  uv 40 20  1 692      
    add esi,1                             ;#00448FB2: 203306 01                  uv 40 40  1 693 40   
    mov edx,esi                           ;#00448FB5: 213326                     uv 04 40  1 694 40   
    mov [ebp-52] (digit),esi              ;#00448FB7: 211165 CC                  vu 00 60  1 694      
    shl edx,1                             ;#00448FBA: 321342                     u  04 04  1 695      
    jno #00448F7C                         ;#00448FBC: 161 BE                     v  00 00  1 695      
    lea edi,[ebp-52] (digit)              ;#00448FBE: 215175 CC                  uv 80 20  1 696      
    call #00462764 (:%e01tcfAddiii)       ;#00448FC1: 350 9E970100               v  00 00  1 696      
;   379                 end while
    jmp #00448F7C                         ;#00448FC6: 353 B4                     v  00 00  1 697      
;   380                 f -= fwk    --epwr
    lea edi,[ebp-56] (f)                  ;#00448FC8: 215175 C8                  uv 80 20  1 698      
    mov ecx,[ebp-56] (f)                  ;#00448FCB: 213115 C8                  vu 02 20  1 698      
    mov eax,[ebp-60] (fwk)                ;#00448FCE: 213105 C4                  uv 01 20  1 699      
    call #0045F299 (:%opSub)              ;#00448FD1: 350 C3620100               v  00 00  1 699      
    jmp #0044900F                         ;#00448FD6: 353 37                     v  00 00  1 700      
;   381             else
;   382                 digit = floor(f)
    lea edi,[ebp-52] (digit)              ;#00448FD8: 215175 CC                  uv 80 20  1 701      
    mov eax,[ebp-56] (f)                  ;#00448FDB: 213105 C8                  vu 01 20  1 701      
    call #0045F5DE (:%opFloor)            ;#00448FDE: 350 FB650100               v  00 00  1 702      
    cmp eax,h4                            ;#00448FE3: 075 00000040               uv 00 01  1 703      
    jl #00448FF4                          ;#00448FE8: 174 0A                     v  00 00  1 703      
    mov ecx,547                           ;#00448FEA: 271 23020000               uv 02 00  1 704      
    call #00462D8D (:%opTcFail)           ;#00448FEF: 350 999D0100               v  00 00  1 704      
;   383                 f = (f-digit)*10
    lea edi,[ebp-104] (symtab[562])       ;#00448FF4: 215175 98                  uv 80 20  1 705      
    mov ecx,[ebp-56] (f)                  ;#00448FF7: 213115 C8                  vu 02 20  1 705      
    call #0045F299 (:%opSub)              ;#00448FFA: 350 9A620100               v  00 00  1 706      
    lea edi,[ebp-56] (f)                  ;#00448FFF: 215175 C8                  uv 80 20  1 707      
    mov ecx,[ebp-104] (symtab[562])       ;#00449002: 213115 98                  vu 02 20  1 707      
    mov eax,[#00402090] (BRIGHT_GREEN)    ;#00449005: 241 90204000               uv 01 00  1 708      
    call #0045F412 (:%opMul)              ;#0044900A: 350 03640100               v  00 00  1 708      
;   384             end if
;   385 --2/12/18!
;   386 if digit=10 then exit end if
    mov edi,[ebp-52] (digit)              ;#0044900F: 213175 CC                  uv 80 20  1 709      
    cmp edi,10                            ;#00449012: 203377 0A                  uv 00 80  1 710 80   
    je #004490C6                          ;#00449015: 017204 AB000000            v  00 00  1 710      
;   387             result &= digit+'0'
    lea edi,[ebp-104] (symtab[562])       ;#0044901B: 215175 98                  uv 80 20  1 711      
    mov ecx,[ebp-52] (digit)              ;#0044901E: 213115 CC                  vu 02 20  1 711      
    mov eax,[MB_ICONEXCLAMATION]          ;#00449021: 241 D8204000               uv 01 00  1 712      
    call #0045F261 (:%opAdd)              ;#00449026: 350 36620100               v  00 00  1 712      
    lea edx,[ebp-68] (result)             ;#0044902B: 215125 BC                  uv 04 20  1 713      
    lea edi,[ebp-68] (result)             ;#0044902E: 215175 BC                  vu 80 20  1 713      
    lea ecx,[ebp-104] (symtab[562])       ;#00449031: 215115 98                  uv 02 20  1 714      
    xor eax,eax                           ;#00449034: 061300                     vu 01 01  1 714      
    call #0045F9F7 (:%opApnd)             ;#00449036: 350 BC690100               v  00 00  1 715      
    mov esi,[ebp-68] (result)             ;#0044903B: 213165 BC                  uv 40 20  1 716      
    cmp esi,h4                            ;#0044903E: 201376 00000040            uv 00 40  1 717 40   
    jl #0044904D                          ;#00449044: 174 07                     v  00 00  1 717      
    cmp byte[ebx+esi*4-1],#82             ;#00449046: 200174263 FF 82            u  00 48  2 718      
    je #00449057                          ;#0044904B: 164 0A                     v  00 00  1 719      
    mov ecx,551                           ;#0044904D: 271 27020000               uv 02 00  1 720      
    call #00462D8D (:%opTcFail)           ;#00449052: 350 369D0100               v  00 00  1 720      
;   388             if digit then
    mov edi,[ebp-52] (digit)              ;#00449057: 213175 CC                  uv 80 20  1 721      
    test edi,edi                          ;#0044905A: 205377                     uv 00 80  1 722 80   
    je #00449065                          ;#0044905C: 164 07                     v  00 00  1 722      
;   389                 nzdigitprinted = 1
    mov [nzdigitprinted], dword 1         ;#0044905E: 307105 E8 01000000         uv 00 20  1 723      
;   390             end if
;   391             exponent -= 1
    mov ecx,[ebp-72] (exponent)           ;#00449065: 213115 B8                  vu 02 20  1 723      
    sub ecx,1                             ;#00449068: 203351 01                  uv 02 02  1 724      
    mov edx,ecx                           ;#0044906B: 213321                     uv 04 02  1 725 02   
    mov [ebp-72] (exponent),ecx           ;#0044906D: 211115 B8                  vu 00 22  1 725      
    shl edx,1                             ;#00449070: 321342                     u  04 04  1 726      
    jno #0044907C                         ;#00449072: 161 08                     v  00 00  1 726      
    lea edi,[ebp-72] (exponent)           ;#00449074: 215175 B8                  uv 80 20  1 727      
    call #00462764 (:%e01tcfAddiii)       ;#00449077: 350 E8960100               v  00 00  1 727      
;   392             if charflag='g' then
    mov eax,[ebp-4] (charflag)            ;#0044907C: 213105 FC                  uv 01 20  1 728      
    cmp eax,103                           ;#0044907F: 203370 67                  uv 00 01  1 729 01   
    jne #00448D81                         ;#00449082: 017205 F9FCFFFF            v  00 00  1 729      
;   393                 if length(result)>=minfieldwidth and f=0 then exit end if
    mov edi,[ebx+esi*4-12]                ;#00449088: 213174263 F4               uv 80 48  1 730      
    mov ecx,[ebp-12] (minfieldwidth)      ;#0044908C: 213115 F4                  vu 02 20  1 730      
    cmp edi,ecx                           ;#0044908F: 071317                     uv 00 82  1 731      
    jl #0044909B                          ;#00449091: 174 08                     v  00 00  1 731      
    mov eax,[ebp-56] (f)                  ;#00449093: 213105 C8                  uv 01 20  1 732      
    cmp eax,0                             ;#00449096: 203370 00                  uv 00 01  1 733 01   
    je #004490C6                          ;#00449099: 164 2B                     v  00 00  1 733      
;   394 --DEV: try printf(1,"%6.2f\n%6.2g\n",96.5)
;   395 -- (same results as RDS Eu, but that does not necessarily make it right!)
;   396 -- Possible fix is to remove this line...(19/8 put the new flag test round it instead)
;   397                 if nzdigitprinted then
    mov esi,[ebp-24] (nzdigitprinted)     ;#0044909B: 213165 E8                  uv 40 20  1 734      
    test esi,esi                          ;#0044909E: 205366                     uv 00 40  1 735 40   
    je #00448D81                          ;#004490A0: 017204 DBFCFFFF            v  00 00  1 735      
;   398                     precision -= 1
    mov edi,[ebp-16] (precision)          ;#004490A6: 213175 F0                  uv 80 20  1 736      
    sub edi,1                             ;#004490A9: 203357 01                  uv 80 80  1 737 80   
    mov edx,edi                           ;#004490AC: 213327                     uv 04 80  1 738 80   
    mov [ebp-16] (precision),edi          ;#004490AE: 211175 F0                  vu 00 A0  1 738      
    shl edx,1                             ;#004490B1: 321342                     u  04 04  1 739      
    jno #00448D81                         ;#004490B3: 017201 C8FCFFFF            v  00 00  1 739      
    lea edi,[ebp-16] (precision)          ;#004490B9: 215175 F0                  uv 80 20  1 740      
    call #00462764 (:%e01tcfAddiii)       ;#004490BC: 350 A3960100               v  00 00  1 740      
;   399                 end if
;   400             end if
;   401         end while
    jmp #00448D81                         ;#004490C1: 351 BBFCFFFF               v  00 00  1 741      
;   402         if length(result)=0 then
    mov ecx,[ebp-68] (result)             ;#004490C6: 213115 BC                  uv 02 20  1 742      
    mov eax,[ebx+ecx*4-12]                ;#004490C9: 213104213 F4               uv 01 0A  1 745 02 *02*
    cmp eax,0                             ;#004490CD: 203370 00                  uv 00 01  1 746 01   
    jne #00449118                         ;#004490D0: 165 46                     v  00 00  1 746      
;   403 --          result = "0"
;   404             result = repeat('0',1)
    mov ecx,6                             ;#004490D2: 271 06000000               uv 02 00  1 747      
    mov edx,206                           ;#004490D7: 272 CE000000               vu 04 00  1 747      
    call :%opFrame (repeatch)             ;#004490DC: 350 219B0100               v  00 00  1 748      
    mov [ebp] (ch), dword 48              ;#004490E1: 307105 00 30000000         uv 00 20  1 749      
    mov [ebp-4] (n), dword 1              ;#004490E8: 307105 FC 01000000         vu 00 20  1 749      
    mov [ebp+28] (retaddr),#004490FB      ;#004490EF: 307105 1C FB904400         uv 00 20  1 750      
    jmp #0045581E (code:repeatch)         ;#004490F6: 351 23C70000               v  00 00  1 750      
    push eax                              ;#004490FB: 120                        uv 00 01  1 751      
    mov esi,[ebp-68] (result)             ;#004490FC: 213165 BC                  vu 40 20  1 751      
    cmp esi,h4                            ;#004490FF: 201376 00000040            uv 00 40  1 752      
    jle #00449115                         ;#00449105: 176 0E                     v  00 00  1 752      
    sub dword[ebx+esi*4-8],1              ;#00449107: 203154263 F8 01            u  00 48  3 753      
    jne #00449115                         ;#0044910C: 165 07                     v  00 00  1 755      
    mov edx,esi                           ;#0044910E: 213326                     uv 04 40  1 756      
    call #004639A8 (:%pDealloc)           ;#00449110: 350 93A80100               v  00 00  1 756      
    pop dword[ebp-68] (result)            ;#00449115: 217105 BC                  np 00 20  3 757      
;   405         end if
;   406         result = round_str(result,f,exponent,charflag,digit)--,minfieldwidth)
    mov ecx,16                            ;#00449118: 271 10000000               uv 02 00  1 760      
    mov edx,495                           ;#0044911D: 272 EF010000               vu 04 00  1 760      
    call :%opFrame (round_str)            ;#00449122: 350 DB9A0100               v  00 00  1 761      
    mov edi,[ebp+20] (prevebp)            ;#00449127: 213175 14                  uv 80 20  1 762      
    mov eax,[edi-68]                      ;#0044912A: 213107 BC                  uv 01 80  1 765 80 *80*
    mov [edi-68], dword h4                ;#0044912D: 307107 BC 00000040         vu 00 80  1 765      
    cmp eax,h4                            ;#00449134: 075 00000040               uv 00 01  1 766      
    jne #00449145                         ;#00449139: 165 0A                     v  00 00  1 766      
    mov esi,551                           ;#0044913B: 276 27020000               uv 40 00  1 767      
    call #00462744 (:%pUnassigned)        ;#00449140: 350 FF950100               v  00 00  1 767      
    mov [ebp] (result),eax                ;#00449145: 211105 00                  uv 00 21  1 768      
    mov edi,[ebp+20] (prevebp)            ;#00449148: 213175 14                  vu 80 20  1 768      
    mov eax,[edi-56]                      ;#0044914B: 213107 C8                  uv 01 80  1 771    *80*
    xor ebx,ebx                           ;#0044914E: 061333                     vu 08 08  1 771      
    cmp eax,h4                            ;#00449150: 075 00000040               uv 00 01  1 772      
    jl #00449161                          ;#00449155: 174 0A                     v  00 00  1 772      
    add dword[ebx+eax*4-8],1              ;#00449157: 203104203 F8 01            u  00 09  3 773      
    cmp eax,548                           ;#0044915C: 075 24020000               vu 00 01  1 775      
    mov [ebp-4] (f),eax                   ;#00449161: 211105 FC                  uv 00 21  1 776      
    mov edi,[ebp+20] (prevebp)            ;#00449164: 213175 14                  vu 80 20  1 776      
    mov eax,[edi-72]                      ;#00449167: 213107 B8                  uv 01 80  1 779    *80*
    mov [ebp-8] (exponent),eax            ;#0044916A: 211105 F8                  uv 00 21  1 780 01   
    mov edi,[ebp+20] (prevebp)            ;#0044916D: 213175 14                  vu 80 20  1 780      
    mov eax,[edi-4]                       ;#00449170: 213107 FC                  uv 01 80  1 783    *80*
    mov [ebp-12] (charflag),eax           ;#00449173: 211105 F4                  uv 00 21  1 784 01   
    mov edi,[ebp+20] (prevebp)            ;#00449176: 213175 14                  vu 80 20  1 784      
    mov eax,[edi-52]                      ;#00449179: 213107 CC                  uv 01 80  1 787    *80*
    mov [ebp-16] (digit),eax              ;#0044917C: 211105 F0                  uv 00 21  1 788 01   
    mov [ebp+28] (retaddr),#0044918B      ;#0044917F: 307105 1C 8B914400         vu 00 20  1 788      
    jmp #00449366 (code:round_str)        ;#00449186: 351 DB010000               v  00 00  1 789      
    push eax                              ;#0044918B: 120                        uv 00 01  1 790      
    mov edi,[ebp-68] (result)             ;#0044918C: 213175 BC                  vu 80 20  1 790      
    cmp edi,h4                            ;#0044918F: 201377 00000040            uv 00 80  1 791      
    jle #004491A5                         ;#00449195: 176 0E                     v  00 00  1 791      
    sub dword[ebx+edi*4-8],1              ;#00449197: 203154273 F8 01            u  00 88  3 792      
    jne #004491A5                         ;#0044919C: 165 07                     v  00 00  1 794      
    mov edx,edi                           ;#0044919E: 213327                     uv 04 80  1 795      
    call #004639A8 (:%pDealloc)           ;#004491A0: 350 03A80100               v  00 00  1 795      
    pop dword[ebp-68] (result)            ;#004491A5: 217105 BC                  np 00 20  3 796      
;   407         k = find('!',result)
    mov ecx,8                             ;#004491A8: 271 08000000               uv 02 00  1 799      
    mov edx,110                           ;#004491AD: 272 6E000000               vu 04 00  1 799      
    call #00462C02 (:%opFrame) (find)     ;#004491B2: 350 4B9A0100               v  00 00  1 800      
    mov [ebp] (needle), dword 33          ;#004491B7: 307105 00 21000000         uv 00 20  1 801      
    mov edi,[ebp+20] (prevebp)            ;#004491BE: 213175 14                  vu 80 20  1 801      
    mov eax,[edi-68]                      ;#004491C1: 213107 BC                  uv 01 80  1 804    *80*
    xor ebx,ebx                           ;#004491C4: 061333                     vu 08 08  1 804      
    cmp eax,h4                            ;#004491C6: 075 00000040               uv 00 01  1 805      
    jl #004491D7                          ;#004491CB: 174 0A                     v  00 00  1 805      
    add dword[ebx+eax*4-8],1              ;#004491CD: 203104203 F8 01            u  00 09  3 806      
    cmp eax,551                           ;#004491D2: 075 27020000               vu 00 01  1 808      
    mov [ebp-4] (haystack),eax            ;#004491D7: 211105 FC                  uv 00 21  1 809      
    mov [ebp+28] (retaddr),#004491E6      ;#004491DA: 307105 1C E6914400         vu 00 20  1 809      
    jmp #0045AADB (code:find)             ;#004491E1: 351 F5180100               v  00 00  1 810      
    mov [ebp-76] (k),eax                  ;#004491E6: 211105 B4                  uv 00 21  1 811      
;   408         if k then
    test eax,eax                          ;#004491E9: 205300                     vu 00 01  1 811      
    je #0044925D                          ;#004491EB: 164 70                     v  00 00  1 812      
;   409             if k=length(result) then
    mov ecx,[ebp-68] (result)             ;#004491ED: 213115 BC                  uv 02 20  1 813      
    mov esi,[ebx+ecx*4-12]                ;#004491F0: 213164213 F4               uv 40 0A  1 816 02 *02*
    cmp eax,esi                           ;#004491F4: 071360                     uv 00 41  1 817 40   
    jne #00449219                         ;#004491F6: 165 21                     v  00 00  1 817      
;   410                 result = result[1..-2]
    lea edx,[ebp-68] (result)             ;#004491F8: 215125 BC                  uv 04 20  1 818      
    mov ecx,1                             ;#004491FB: 271 01000000               vu 02 00  1 818      
    push #00449217                        ;#00449200: 150 17924400               uv 00 00  1 819      
    push edx                              ;#00449205: 122                        vu 00 04  1 819      
    push -2                               ;#00449206: 152 FE                     uv 00 00  1 820      
    push 1                                ;#00449208: 152 01                     vu 00 00  1 820      
    mov esi,[ebp-68] (result)             ;#0044920A: 213165 BC                  uv 40 20  1 821      
    mov edx,551                           ;#0044920D: 272 27020000               vu 04 00  1 821      
    jmp #00460A75 (:%pSubss)              ;#00449212: 351 5E780100               v  00 00  1 822      
    jmp #00449246                         ;#00449217: 353 2D                     v  00 00  1 823      
;   411             else
;   412                 result[k] = '.'
    mov esi,ecx                           ;#00449219: 211316                     uv 40 02  1 824      
    mov edi,eax                           ;#0044921B: 211307                     vu 80 01  1 824      
    mov ecx,46                            ;#0044921D: 271 2E000000               uv 02 00  1 825      
    lea eax,[ebp-68] (result)             ;#00449222: 215105 BC                  vu 01 20  1 825      
    call #004607F3 (:%pRepe1)             ;#00449225: 350 C9750100               v  00 00  1 826      
    mov ecx,[ebp-68] (result)             ;#0044922A: 213115 BC                  uv 02 20  1 827      
    cmp ecx,h4                            ;#0044922D: 201371 00000040            uv 00 02  1 828 02   
    jl #0044923C                          ;#00449233: 174 07                     v  00 00  1 828      
    cmp byte[ebx+ecx*4-1],#82             ;#00449235: 200174213 FF 82            u  00 0A  2 829      
    je #00449246                          ;#0044923A: 164 0A                     v  00 00  1 830      
    mov ecx,551                           ;#0044923C: 271 27020000               uv 02 00  1 831      
    call #00462D8D (:%opTcFail)           ;#00449241: 350 479B0100               v  00 00  1 831      
;   413             end if
;   414             exponent += 1
    mov eax,[ebp-72] (exponent)           ;#00449246: 213105 B8                  uv 01 20  1 832      
    add eax,1                             ;#00449249: 203300 01                  uv 01 01  1 833 01   
    mov edx,eax                           ;#0044924C: 213320                     uv 04 01  1 834 01   
    mov [ebp-72] (exponent),eax           ;#0044924E: 211105 B8                  vu 00 21  1 834      
    shl edx,1                             ;#00449251: 321342                     u  04 04  1 835      
    jno #0044925D                         ;#00449253: 161 08                     v  00 00  1 835      
    lea edi,[ebp-72] (exponent)           ;#00449255: 215175 B8                  uv 80 20  1 836      
    call #00462764 (:%e01tcfAddiii)       ;#00449258: 350 07950100               v  00 00  1 836      
;   415         end if
;   416         if exponent>-1 then
    mov esi,[ebp-72] (exponent)           ;#0044925D: 213165 B8                  uv 40 20  1 837      
    cmp esi,-1                            ;#00449260: 203376 FF                  uv 00 40  1 838 40   
    jle #004492BA                         ;#00449263: 176 55                     v  00 00  1 838      
;   417             while exponent>-1 do
    mov edi,[ebp-72] (exponent)           ;#00449265: 213175 B8                  uv 80 20  1 839      
    cmp edi,-1                            ;#00449268: 203377 FF                  uv 00 80  1 840 80   
    jle #004492FA                         ;#0044926B: 017216 89000000            v  00 00  1 840      
;   418                 result &= '0'
    lea edx,[ebp-68] (result)             ;#00449271: 215125 BC                  uv 04 20  1 841      
    lea edi,[ebp-68] (result)             ;#00449274: 215175 BC                  vu 80 20  1 841      
    mov ecx,#004020D8                     ;#00449277: 271 D8204000               uv 02 00  1 842      
    xor eax,eax                           ;#0044927C: 061300                     vu 01 01  1 842      
    call #0045F9F7 (:%opApnd)             ;#0044927E: 350 74670100               v  00 00  1 843      
    mov ecx,[ebp-68] (result)             ;#00449283: 213115 BC                  uv 02 20  1 844      
    cmp ecx,h4                            ;#00449286: 201371 00000040            uv 00 02  1 845 02   
    jl #00449295                          ;#0044928C: 174 07                     v  00 00  1 845      
    cmp byte[ebx+ecx*4-1],#82             ;#0044928E: 200174213 FF 82            u  00 0A  2 846      
    je #0044929F                          ;#00449293: 164 0A                     v  00 00  1 847      
    mov ecx,551                           ;#00449295: 271 27020000               uv 02 00  1 848      
    call #00462D8D (:%opTcFail)           ;#0044929A: 350 EE9A0100               v  00 00  1 848      
;   419                 exponent -= 1
    mov eax,[ebp-72] (exponent)           ;#0044929F: 213105 B8                  uv 01 20  1 849      
    sub eax,1                             ;#004492A2: 203350 01                  uv 01 01  1 850 01   
    mov edx,eax                           ;#004492A5: 213320                     uv 04 01  1 851 01   
    mov [ebp-72] (exponent),eax           ;#004492A7: 211105 B8                  vu 00 21  1 851      
    shl edx,1                             ;#004492AA: 321342                     u  04 04  1 852      
    jno #00449265                         ;#004492AC: 161 B7                     v  00 00  1 852      
    lea edi,[ebp-72] (exponent)           ;#004492AE: 215175 B8                  uv 80 20  1 853      
    call #00462764 (:%e01tcfAddiii)       ;#004492B1: 350 AE940100               v  00 00  1 853      
;   420             end while
    jmp #00449265                         ;#004492B6: 353 AD                     v  00 00  1 854      
;   421 -- kludge 24/9/2020:
    jmp #004492FA                         ;#004492B8: 353 40                     v  00 00  1 855      
;   422         elsif dotdone and result[$]='.' then
    mov esi,[ebp-20] (dotdone)            ;#004492BA: 213165 EC                  uv 40 20  1 856      
    test esi,esi                          ;#004492BD: 205366                     uv 00 40  1 857 40   
    je #004492FA                          ;#004492BF: 164 39                     v  00 00  1 857      
    mov edi,-1                            ;#004492C1: 277 FFFFFFFF               uv 80 00  1 858      
    mov esi,[ebp-68] (result)             ;#004492C6: 213165 BC                  vu 40 20  1 858      
    mov edx,551                           ;#004492C9: 272 27020000               uv 04 00  1 859      
    call #004610CE (:%pSubse1is)          ;#004492CE: 350 FB7D0100               v  00 00  1 859      
    mov [ebp-100] (symtab[561]),eax       ;#004492D3: 211105 9C                  uv 00 21  1 860      
    cmp eax,46                            ;#004492D6: 203370 2E                  vu 00 01  1 860      
    jne #004492FA                         ;#004492D9: 165 1F                     v  00 00  1 861      
;   423             result = result[1..$-1]
    lea edx,[ebp-68] (result)             ;#004492DB: 215125 BC                  uv 04 20  1 862      
    mov ecx,1                             ;#004492DE: 271 01000000               vu 02 00  1 862      
    push #004492FA                        ;#004492E3: 150 FA924400               uv 00 00  1 863      
    push edx                              ;#004492E8: 122                        vu 00 04  1 863      
    push -2                               ;#004492E9: 152 FE                     uv 00 00  1 864      
    push 1                                ;#004492EB: 152 01                     vu 00 00  1 864      
    mov esi,[ebp-68] (result)             ;#004492ED: 213165 BC                  uv 40 20  1 865      
    mov edx,551                           ;#004492F0: 272 27020000               vu 04 00  1 865      
    jmp #00460A75 (:%pSubss)              ;#004492F5: 351 7B770100               v  00 00  1 866      
;   424         end if
;   425         if result="-0"
    mov edi,[#00402248]                   ;#004492FA: 213075 48224000            uv 80 00  1 867      
    mov eax,[ebp-68] (result)             ;#00449300: 213105 BC                  vu 01 20  1 867      
    mov esi,569                           ;#00449303: 276 39020000               uv 40 00  1 868      
    mov edx,551                           ;#00449308: 272 27020000               vu 04 00  1 868      
    call #0045F91F (:%opJccE)             ;#0044930D: 350 0D660100               v  00 00  1 869      
    je #0044932E                          ;#00449312: 164 1A                     v  00 00  1 870      
;   426         or result="-" then
    mov edi,[#0040224C]                   ;#00449314: 213075 4C224000            uv 80 00  1 871      
    mov eax,[ebp-68] (result)             ;#0044931A: 213105 BC                  vu 01 20  1 871      
    mov esi,570                           ;#0044931D: 276 3A020000               uv 40 00  1 872      
    mov edx,551                           ;#00449322: 272 27020000               vu 04 00  1 872      
    call #0045F91F (:%opJccE)             ;#00449327: 350 F3650100               v  00 00  1 873      
    jne #0044935B                         ;#0044932C: 165 2D                     v  00 00  1 874      
;   427             result = "0"
    mov ecx,[#00402250]                   ;#0044932E: 213015 50224000            uv 02 00  1 875      
    mov edx,[ebp-68] (result)             ;#00449334: 213125 BC                  vu 04 20  1 875      
    cmp ecx,h4                            ;#00449337: 201371 00000040            uv 00 02  1 876      
    jl #00449344                          ;#0044933D: 174 05                     v  00 00  1 876      
    add dword[ebx+ecx*4-8],1              ;#0044933F: 203104213 F8 01            u  00 0A  3 877      
    mov [ebp-68] (result),ecx             ;#00449344: 211115 BC                  vu 00 22  1 879      
    cmp edx,h4                            ;#00449347: 201372 00000040            uv 00 04  1 880      
    jle #0044935B                         ;#0044934D: 176 0C                     v  00 00  1 880      
    sub dword[ebx+edx*4-8],1              ;#0044934F: 203154223 F8 01            u  00 0C  3 881      
    jne #0044935B                         ;#00449354: 165 05                     v  00 00  1 883      
    call #004639A8 (:%pDealloc)           ;#00449356: 350 4DA60100               v  00 00  1 884      
;   428         end if
;   429     end if
;   430     return result
    mov eax,[ebp-68] (result)             ;#0044935B: 213105 BC                  uv 01 20  1 885      
    mov [ebp-68] (result),ebx             ;#0044935E: 211135 BC                  vu 00 28  1 885      
    jmp #00462C8F (:%opRetf)              ;#00449361: 351 29990100               v  00 00  1 886      
;   431 end function
;   432 
;   433 procedure ueofmt()
;   434     crash("unexpected end of format string",{},4)
    mov eax,ebp                           ;#00449ECA: 213305                     uv 01 20  1   1      
    mov edx,0                             ;#00449ECC: 272 00000000               vu 04 00  1   1      
    push #00449EDF                        ;#00449ED1: 150 DF9E4400               uv 00 00  1   2      
    push eax                              ;#00449ED6: 120                        vu 00 01  1   2      
    mov edi,[ebp] (symtab[574])           ;#00449ED7: 213175 00                  uv 80 20  1   3      
    jmp #00460143 (:%pMkSq)               ;#00449EDA: 351 64620100               v  00 00  1   3      
    mov ecx,4                             ;#00449EDF: 271 04000000               uv 02 00  1   4      
    mov edx,397                           ;#00449EE4: 272 8D010000               vu 04 00  1   4      
    call #00462C02 (:%opFrame) (crash)    ;#00449EE9: 350 148D0100               v  00 00  1   5      
    mov ecx,[#00402254]                   ;#00449EEE: 213015 54224000            uv 02 00  1   6      
    mov [ebp] (msg),ecx                   ;#00449EF4: 211115 00                  uv 00 22  1   7 02   
    add dword[ebx+ecx*4-8],1              ;#00449EF7: 203104213 F8 01            u  00 0A  3   9    *02*
    mov edi,[ebp+20] (prevebp)            ;#00449EFC: 213175 14                  vu 80 20  1  11      
    mov eax,[edi]                         ;#00449EFF: 213007                     uv 01 80  1  14    *80*
    mov [edi], dword h4                   ;#00449F01: 307007 00000040            vu 00 80  1  14      
    cmp eax,h4                            ;#00449F07: 075 00000040               uv 00 01  1  15      
    jne #00449F18                         ;#00449F0C: 165 0A                     v  00 00  1  15      
    mov esi,574                           ;#00449F0E: 276 3E020000               uv 40 00  1  16      
    call #00462744 (:%pUnassigned)        ;#00449F13: 350 2C880100               v  00 00  1  16      
    mov [ebp-4] (args),eax                ;#00449F18: 211105 FC                  uv 00 21  1  17      
    mov [ebp-8] (nFrames), dword 4        ;#00449F1B: 307105 F8 04000000         vu 00 20  1  17      
    mov [ebp+28] (retaddr),#00449F2E      ;#00449F22: 307105 1C 2E9F4400         uv 00 20  1  18      
    jmp #0044AB92 (code:crash)            ;#00449F29: 351 640C0000               v  00 00  1  18      
    jmp #00462C8F (:%opRetf)              ;#00449F2E: 351 5C8D0100               v  00 00  1  19      
;   435 end procedure
;   436 
;   437 function useFlatString(sequence args, integer nxt, sequence fmt, integer i)
;   438 -- permit printf(1,"%s","Hello") to work as {"Hello"} - but only if:
;   439 -- 1) this is the first % (nxt=1)
;   440 -- 2) there are no more %'s in the fmt, except for %%
;   441 -- 3) args is a flat string
;   442 object o
;   443     if nxt!=1 then return 0 end if
    mov edi,[ebp-4] (nxt)                 ;#00449CB0: 213175 FC                  uv 80 20  1   1      
    cmp edi,1                             ;#00449CB3: 203377 01                  uv 00 80  1   2 80   
    je #00449CBF                          ;#00449CB6: 164 07                     v  00 00  1   2      
    xor eax,eax                           ;#00449CB8: 061300                     uv 01 01  1   3      
    jmp #00462C8F (:%opRetf)              ;#00449CBA: 351 D08F0100               v  00 00  1   3      
;   444     for j=i+1 to length(fmt) do
    lea edi,[ebp-20] (symtab[582])        ;#00449CBF: 215175 EC                  uv 80 20  1   4      
    mov ecx,[ebp-12] (i)                  ;#00449CC2: 213115 F4                  vu 02 20  1   4      
    mov eax,[#0040201C]                   ;#00449CC5: 241 1C204000               uv 01 00  1   5      
    call #0045F261 (:%opAdd)              ;#00449CCA: 350 92550100               v  00 00  1   5      
    mov esi,[ebp-8] (fmt)                 ;#00449CCF: 213165 F8                  uv 40 20  1   6      
    mov edi,[ebx+esi*4-12]                ;#00449CD2: 213174263 F4               uv 80 48  1   9 40 *40*
    mov [ebp-24] (symtab[583]),edi        ;#00449CD6: 211175 E8                  uv 00 A0  1  10 80   
    mov edx,[ebp-28] (j)                  ;#00449CD9: 213125 E4                  vu 04 20  1  10      
    cmp edx,h4                            ;#00449CDC: 201372 00000040            uv 00 04  1  11      
    jle #00449CF0                         ;#00449CE2: 176 0C                     v  00 00  1  11      
    sub dword[ebx+edx*4-8],1              ;#00449CE4: 203154223 F8 01            u  00 0C  3  12      
    jne #00449CF0                         ;#00449CE9: 165 05                     v  00 00  1  14      
    call #004639A8 (:%pDealloc)           ;#00449CEB: 350 B89C0100               v  00 00  1  15      
    mov ecx,[ebp-20] (symtab[582])        ;#00449CF0: 213115 EC                  uv 02 20  1  16      
    cmp ecx,h4                            ;#00449CF3: 201371 00000040            uv 00 02  1  17 02   
    jl #00449D0C                          ;#00449CF9: 174 11                     v  00 00  1  17      
    mov al,120                            ;#00449CFB: 260 78                     uv 01 00  1  18      
    mov edi,582                           ;#00449CFD: 277 46020000               vu 80 00  1  18      
    mov esi,1                             ;#00449D02: 276 01000000               uv 40 00  1  19      
    call #004627AC (:%pRTErn)             ;#00449D07: 350 A08A0100               v  00 00  1  19      
    mov [ebp-28] (j),ecx                  ;#00449D0C: 211115 E4                  uv 00 22  1  20      
    cmp ecx,edi                           ;#00449D0F: 073317                     vu 00 82  1  20      
    jg #00449D85                          ;#00449D11: 177 72                     v  00 00  1  21      
;   445         if fmt[j]='%' then
    mov edi,[ebp-28] (j)                  ;#00449D13: 213175 E4                  uv 80 20  1  22      
    lea ecx,[ebp-32] (symtab[586])        ;#00449D16: 215115 E0                  vu 02 20  1  22      
    mov esi,[ebp-8] (fmt)                 ;#00449D19: 213165 F8                  uv 40 20  1  23      
    mov edx,579                           ;#00449D1C: 272 43020000               vu 04 00  1  23      
    mov al,0                              ;#00449D21: 260 00                     uv 01 00  1  24      
    call #00460FE5 (:%pSubse1)            ;#00449D23: 350 BD720100               v  00 00  1  24      
    mov eax,[ebp-32] (symtab[586])        ;#00449D28: 213105 E0                  uv 01 20  1  25      
    cmp eax,37                            ;#00449D2B: 203370 25                  uv 00 01  1  26 01   
    jne #00449D75                         ;#00449D2E: 165 45                     v  00 00  1  26      
;   446             if j=length(fmt) or fmt[j+1]!='%' then return 0 end if
    mov ecx,[ebp-8] (fmt)                 ;#00449D30: 213115 F8                  uv 02 20  1  27      
    mov edi,[ebx+ecx*4-12]                ;#00449D33: 213174213 F4               uv 80 0A  1  30 02 *02*
    mov esi,[ebp-28] (j)                  ;#00449D37: 213165 E4                  vu 40 20  1  30      
    cmp esi,edi                           ;#00449D3A: 071376                     uv 00 C0  1  31      
    je #00449D6E                          ;#00449D3C: 164 30                     v  00 00  1  31      
    add esi,1                             ;#00449D3E: 203306 01                  uv 40 40  1  32      
    mov edx,esi                           ;#00449D41: 213326                     uv 04 40  1  33 40   
    mov [ebp-36] (symtab[587]),esi        ;#00449D43: 211165 DC                  vu 00 60  1  33      
    shl edx,1                             ;#00449D46: 321342                     u  04 04  1  34      
    jno #00449D52                         ;#00449D48: 161 08                     v  00 00  1  34      
    lea edi,[ebp-36] (symtab[587])        ;#00449D4A: 215175 DC                  uv 80 20  1  35      
    call #00462764 (:%e01tcfAddiii)       ;#00449D4D: 350 128A0100               v  00 00  1  35      
    mov edi,esi                           ;#00449D52: 211367                     uv 80 40  1  36      
    lea ecx,[ebp-32] (symtab[586])        ;#00449D54: 215115 E0                  vu 02 20  1  36      
    mov esi,[ebp-8] (fmt)                 ;#00449D57: 213165 F8                  uv 40 20  1  37      
    mov edx,579                           ;#00449D5A: 272 43020000               vu 04 00  1  37      
    mov al,0                              ;#00449D5F: 260 00                     uv 01 00  1  38      
    call #00460FE5 (:%pSubse1)            ;#00449D61: 350 7F720100               v  00 00  1  38      
    mov eax,[ebp-32] (symtab[586])        ;#00449D66: 213105 E0                  uv 01 20  1  39      
    cmp eax,37                            ;#00449D69: 203370 25                  uv 00 01  1  40 01   
    je #00449D75                          ;#00449D6C: 164 07                     v  00 00  1  40      
    xor eax,eax                           ;#00449D6E: 061300                     uv 01 01  1  41      
    jmp #00462C8F (:%opRetf)              ;#00449D70: 351 1A8F0100               v  00 00  1  41      
;   447         end if
;   448     end for
    mov ecx,[ebp-28] (j)                  ;#00449D75: 213115 E4                  uv 02 20  1  42      
    mov edi,[ebp-24] (symtab[583])        ;#00449D78: 213175 E8                  vu 80 20  1  42      
    add ecx,1                             ;#00449D7B: 203301 01                  uv 02 02  1  43      
    cmp ecx,edi                           ;#00449D7E: 073317                     uv 00 82  1  44 02   
    mov [ebp-28] (j),ecx                  ;#00449D80: 211115 E4                  vu 00 22  1  44      
    jle #00449D13                         ;#00449D83: 176 8E                     v  00 00  1  45      
;   449     for j=1 to length(args) do
    lea edi,[ebp-36] (symtab[587])        ;#00449D85: 215175 DC                  uv 80 20  1  46      
    mov esi,[ebp] (args)                  ;#00449D88: 213165 00                  vu 40 20  1  46      
    mov edx,577                           ;#00449D8B: 272 41020000               uv 04 00  1  47      
    call #0045EFEC (:%opLen)              ;#00449D90: 350 57520100               v  00 00  1  47      
    mov [ebp-28] (j), dword 1             ;#00449D95: 307105 E4 01000000         uv 00 20  1  48      
    mov eax,[ebp-36] (symtab[587])        ;#00449D9C: 213105 DC                  vu 01 20  1  48      
    cmp eax,1                             ;#00449D9F: 075 01000000               uv 00 01  1  49      
    jl #00449E15                          ;#00449DA4: 174 6F                     v  00 00  1  49      
;   450         o = args[j]
    mov edi,[ebp-28] (j)                  ;#00449DA6: 213175 E4                  uv 80 20  1  50      
    lea ecx,[ebp-16] (o)                  ;#00449DA9: 215115 F0                  vu 02 20  1  50      
    mov esi,[ebp] (args)                  ;#00449DAC: 213165 00                  uv 40 20  1  51      
    mov edx,577                           ;#00449DAF: 272 41020000               vu 04 00  1  51      
    mov al,0                              ;#00449DB4: 260 00                     uv 01 00  1  52      
    call #00460FE5 (:%pSubse1)            ;#00449DB6: 350 2A720100               v  00 00  1  52      
;   451         if not integer(o) then return 0 end if
    mov ecx,[ebp-16] (o)                  ;#00449DBB: 213115 F0                  uv 02 20  1  53      
    cmp ecx,h4                            ;#00449DBE: 201371 00000040            uv 00 02  1  54 02   
    jl #00449DCD                          ;#00449DC4: 174 07                     v  00 00  1  54      
    xor eax,eax                           ;#00449DC6: 061300                     uv 01 01  1  55      
    jmp #00462C8F (:%opRetf)              ;#00449DC8: 351 C28E0100               v  00 00  1  55      
;   452         if o<1 or o>255 then return 0 end if
    mov edi,1                             ;#00449DCD: 277 01000000               uv 80 00  1  56      
    mov eax,ecx                           ;#00449DD2: 211310                     vu 01 02  1  56      
    mov esi,26                            ;#00449DD4: 276 1A000000               uv 40 00  1  57      
    mov edx,581                           ;#00449DD9: 272 45020000               vu 04 00  1  57      
    call #0045F8B0 (:%opJcc)              ;#00449DDE: 350 CD5A0100               v  00 00  1  58      
    jl #00449DFE                          ;#00449DE3: 174 19                     v  00 00  1  59      
    mov edi,255                           ;#00449DE5: 277 FF000000               uv 80 00  1  60      
    mov eax,[ebp-16] (o)                  ;#00449DEA: 213105 F0                  vu 01 20  1  60      
    mov esi,588                           ;#00449DED: 276 4C020000               uv 40 00  1  61      
    mov edx,581                           ;#00449DF2: 272 45020000               vu 04 00  1  61      
    call #0045F8B0 (:%opJcc)              ;#00449DF7: 350 B45A0100               v  00 00  1  62      
    jle #00449E05                         ;#00449DFC: 176 07                     v  00 00  1  63      
    xor eax,eax                           ;#00449DFE: 061300                     uv 01 01  1  64      
    jmp #00462C8F (:%opRetf)              ;#00449E00: 351 8A8E0100               v  00 00  1  64      
;   453     end for
    mov edi,[ebp-28] (j)                  ;#00449E05: 213175 E4                  uv 80 20  1  65      
    mov esi,[ebp-36] (symtab[587])        ;#00449E08: 213165 DC                  vu 40 20  1  65      
    add edi,1                             ;#00449E0B: 203307 01                  uv 80 80  1  66      
    cmp edi,esi                           ;#00449E0E: 073376                     uv 00 C0  1  67 80   
    mov [ebp-28] (j),edi                  ;#00449E10: 211175 E4                  vu 00 A0  1  67      
    jle #00449DA6                         ;#00449E13: 176 91                     v  00 00  1  68      
;   454     return 1
    mov eax,1                             ;#00449E15: 270 01000000               uv 01 00  1  69      
    jmp #00462C8F (:%opRetf)              ;#00449E1A: 351 708E0100               v  00 00  1  69      
;   455 end function
;   456 
;   457 bool prefer_backtick = false
;   458 --constant tnr = "tnr"
;   459 --constant tnr = "tnr\\\"\'\0"
;   460 --constant tnr = "tnr\\\"\'0e"
;   461 
;   462 --function allascii(string x, bool withquotes)
;   463 function allascii(string x, integer enquote='q')
    mov ecx,[ebp] (x)                     ;#00449755: 213115 00                  uv 02 20  1   1      
    cmp ecx,h4                            ;#00449758: 201371 00000040            uv 00 02  1   2 02   
    jl #00449767                          ;#0044975E: 174 07                     v  00 00  1   2      
    cmp byte[ebx+ecx*4-1],#82             ;#00449760: 200174213 FF 82            u  00 0A  2   3      
    je #00449771                          ;#00449765: 164 0A                     v  00 00  1   4      
    mov ecx,593                           ;#00449767: 271 51020000               uv 02 00  1   5      
    call #00462D8D (:%opTcFail)           ;#0044976C: 350 1C960100               v  00 00  1   5      
    mov edi,[ebp-4] (enquote)             ;#00449771: 213175 FC                  uv 80 20  1   6      
    cmp edi,h4                            ;#00449774: 201377 00000040            uv 00 80  1   7 80   
    jne #00449783                         ;#0044977A: 165 07                     v  00 00  1   7      
    mov [ebp-4] (enquote), dword 113      ;#0044977C: 307105 FC 71000000         uv 00 20  1   8      
;   464 -- Phix allows "strings" to hold binary data, so double check 
;   465 -- before printing it as a string.
;   466 integer c
;   467 bool backtick = (enquote='q')
    mov esi,[ebp-4] (enquote)             ;#00449783: 213165 FC                  vu 40 20  1   8      
    xor eax,eax                           ;#00449786: 061300                     uv 01 01  1   9      
    cmp esi,113                           ;#00449788: 203376 71                  vu 00 40  1   9      
    sete al                               ;#0044978B: 017224300                  np 01 00  2  10      
    mov [ebp-12] (backtick),eax           ;#0044978E: 211105 F4                  uv 00 21  1  12      
;   468 --sequence bsi = {}
;   469 sequence bsi = repeat(0,0)
    mov ecx,12                            ;#00449791: 271 0C000000               vu 02 00  1  12      
    mov edx,240                           ;#00449796: 272 F0000000               uv 04 00  1  13      
    call #00462C02 (:%opFrame) (repeat)   ;#0044979B: 350 62940100               v  00 00  1  13      
    mov [ebp] (x),ebx                     ;#004497A0: 211135 00                  uv 00 28  1  14      
    mov [ebp-4] (n),ebx                   ;#004497A3: 211135 FC                  vu 00 28  1  14      
    mov [ebp+28] (retaddr),#004497B2      ;#004497A6: 307105 1C B2974400         uv 00 20  1  15      
    jmp #00451195 (code:repeat)           ;#004497AD: 351 E3790000               v  00 00  1  15      
    mov [ebp-16] (bsi),eax                ;#004497B2: 211105 F0                  uv 00 21  1  16      
;   470     for i=length(x) to 1 by -1 do
    mov ecx,[ebp] (x)                     ;#004497B5: 213115 00                  vu 02 20  1  16      
    mov edi,[ebx+ecx*4-12]                ;#004497B8: 213174213 F4               uv 80 0A  1  19    *02*
    mov [ebp-20] (symtab[598]),edi        ;#004497BC: 211175 EC                  uv 00 A0  1  20 80   
    mov [ebp-24] (i),edi                  ;#004497BF: 211175 E8                  vu 00 A0  1  20      
    cmp edi,1                             ;#004497C2: 201377 01000000            uv 00 80  1  21      
    jl #004499B2                          ;#004497C8: 017214 E4010000            v  00 00  1  21      
;   471         c = x[i]
    mov edi,[ebp-24] (i)                  ;#004497CE: 213175 E8                  uv 80 20  1  22      
    mov esi,[ebp] (x)                     ;#004497D1: 213165 00                  vu 40 20  1  22      
    mov edx,593                           ;#004497D4: 272 51020000               uv 04 00  1  23      
    call #004610CE (:%pSubse1is)          ;#004497D9: 350 F0780100               v  00 00  1  23      
    mov [ebp-8] (c),eax                   ;#004497DE: 211105 F8                  uv 00 21  1  24      
;   472 --31/1/15:
;   473 --      if c<' ' then
;   474 --      if c<' ' or c>#FF or find(c,"\\\"\'") then
;   475         if c='\\' or c='\"'or c='\'' then
    cmp eax,92                            ;#004497E1: 203370 5C                  vu 00 01  1  24      
    je #004497F0                          ;#004497E4: 164 0A                     v  00 00  1  25      
    cmp eax,34                            ;#004497E6: 203370 22                  uv 00 01  1  26      
    je #004497F0                          ;#004497E9: 164 05                     v  00 00  1  26      
    cmp eax,39                            ;#004497EB: 203370 27                  uv 00 01  1  27      
    jne #0044985B                         ;#004497EE: 165 6B                     v  00 00  1  27      
;   476             if backtick then
    mov ecx,[ebp-12] (backtick)           ;#004497F0: 213115 F4                  uv 02 20  1  28      
    test ecx,ecx                          ;#004497F3: 205311                     uv 00 02  1  29 02   
    je #0044980C                          ;#004497F5: 164 15                     v  00 00  1  29      
;   477                 bsi &= i
    lea edx,[ebp-16] (bsi)                ;#004497F7: 215125 F0                  uv 04 20  1  30      
    lea edi,[ebp-16] (bsi)                ;#004497FA: 215175 F0                  vu 80 20  1  30      
    lea ecx,[ebp-24] (i)                  ;#004497FD: 215115 E8                  uv 02 20  1  31      
    xor eax,eax                           ;#00449800: 061300                     vu 01 01  1  31      
    call #0045F9F7 (:%opApnd)             ;#00449802: 350 F0610100               v  00 00  1  32      
    jmp #0044999C                         ;#00449807: 351 90010000               v  00 00  1  33      
;   478             else
;   479                 x[i..i] = '\\'&c    -- NB does not work on RDS Eu/OpenEuphoria
    lea edx,[ebp-28] (symtab[603])        ;#0044980C: 215125 E4                  uv 04 20  1  34      
    mov edi,#00402268                     ;#0044980F: 277 68224000               vu 80 00  1  34      
    lea ecx,[ebp-8] (c)                   ;#00449814: 215115 F8                  uv 02 20  1  35      
    call #0045FD65 (:%opConcat)           ;#00449817: 350 49650100               v  00 00  1  35      
    mov ecx,1                             ;#0044981C: 271 01000000               uv 02 00  1  36      
    push #00449836                        ;#00449821: 150 36984400               vu 00 00  1  36      
    push dword[ebp-28] (symtab[603])      ;#00449826: 377165 E4                  np 00 20  2  37      
    push dword[ebp-24] (i)                ;#00449829: 377165 E8                  np 00 20  2  39      
    push dword[ebp-24] (i)                ;#0044982C: 377165 E8                  np 00 20  2  41      
    mov eax,ebp                           ;#0044982F: 213305                     uv 01 20  1  43      
    jmp #0046019E (:%pReps)               ;#00449831: 351 68690100               v  00 00  1  43      
    mov edi,[ebp] (x)                     ;#00449836: 213175 00                  uv 80 20  1  44      
    cmp edi,h4                            ;#00449839: 201377 00000040            uv 00 80  1  45 80   
    jl #0044984C                          ;#0044983F: 174 0B                     v  00 00  1  45      
    cmp byte[ebx+edi*4-1],#82             ;#00449841: 200174273 FF 82            u  00 88  2  46      
    je #0044999C                          ;#00449846: 017204 50010000            v  00 00  1  47      
    mov ecx,593                           ;#0044984C: 271 51020000               uv 02 00  1  48      
    call #00462D8D (:%opTcFail)           ;#00449851: 350 37950100               v  00 00  1  48      
;   480             end if
    jmp #0044999C                         ;#00449856: 351 41010000               v  00 00  1  49      
;   481         elsif c<' ' or c>#FF then
    cmp eax,32                            ;#0044985B: 203370 20                  uv 00 01  1  50      
    jl #00449865                          ;#0044985E: 174 05                     v  00 00  1  50      
    jmp #0044999C                         ;#00449860: 351 37010000               v  00 00  1  51      
;   482 --          c = find(c,"\t\n\r")
;   483 --          c = find(c,"\t\n\r\\\"\'\0\e")
;   484             if c='\t' then c='t'
    cmp eax,9                             ;#00449865: 203370 09                  uv 00 01  1  52      
    jne #00449873                         ;#00449868: 165 09                     v  00 00  1  52      
    mov [ebp-8] (c), dword 116            ;#0044986A: 307105 F8 74000000         uv 00 20  1  53      
    jmp #004498B5                         ;#00449871: 353 42                     v  00 00  1  53      
;   485             elsif c='\n' then c='n'
    cmp eax,10                            ;#00449873: 203370 0A                  uv 00 01  1  54      
    jne #00449881                         ;#00449876: 165 09                     v  00 00  1  54      
    mov [ebp-8] (c), dword 110            ;#00449878: 307105 F8 6E000000         uv 00 20  1  55      
    jmp #004498B5                         ;#0044987F: 353 34                     v  00 00  1  55      
;   486             elsif c='\r' then c='r'
    cmp eax,13                            ;#00449881: 203370 0D                  uv 00 01  1  56      
    jne #0044988F                         ;#00449884: 165 09                     v  00 00  1  56      
    mov [ebp-8] (c), dword 114            ;#00449886: 307105 F8 72000000         uv 00 20  1  57      
    jmp #004498B5                         ;#0044988D: 353 26                     v  00 00  1  57      
;   487             elsif c='\0' then c='0'
    cmp eax,0                             ;#0044988F: 203370 00                  uv 00 01  1  58      
    jne #0044989D                         ;#00449892: 165 09                     v  00 00  1  58      
    mov [ebp-8] (c), dword 48             ;#00449894: 307105 F8 30000000         uv 00 20  1  59      
    jmp #004498B5                         ;#0044989B: 353 18                     v  00 00  1  59      
;   488             elsif c='\e' then c='e'
    cmp eax,27                            ;#0044989D: 203370 1B                  uv 00 01  1  60      
    jne #004498AB                         ;#004498A0: 165 09                     v  00 00  1  60      
    mov [ebp-8] (c), dword 101            ;#004498A2: 307105 F8 65000000         uv 00 20  1  61      
    jmp #004498B5                         ;#004498A9: 353 0A                     v  00 00  1  61      
;   489             else
;   490 --DEV or crash?
;   491                 return 0
    mov eax,0                             ;#004498AB: 270 00000000               uv 01 00  1  62      
    jmp #00462C8F (:%opRetf)              ;#004498B0: 351 DA930100               v  00 00  1  62      
;   492             end if
;   493             if backtick then
    mov esi,[ebp-12] (backtick)           ;#004498B5: 213165 F4                  uv 40 20  1  63      
    test esi,esi                          ;#004498B8: 205366                     uv 00 40  1  64 40   
    je #00449957                          ;#004498BA: 017204 97000000            v  00 00  1  64      
;   494                 for j=1 to length(bsi) do   -- (still "last first", btw/iyswim)
    mov ecx,[ebp-16] (bsi)                ;#004498C0: 213115 F0                  uv 02 20  1  65      
    mov edi,[ebx+ecx*4-12]                ;#004498C3: 213174213 F4               uv 80 0A  1  68 02 *02*
    mov [ebp-32] (symtab[607]),edi        ;#004498C7: 211175 E0                  uv 00 A0  1  69 80   
    mov [ebp-36] (j), dword 1             ;#004498CA: 307105 DC 01000000         vu 00 20  1  69      
    cmp edi,1                             ;#004498D1: 201377 01000000            uv 00 80  1  70      
    jl #00449954                          ;#004498D7: 174 7B                     v  00 00  1  70      
;   495                     integer k = bsi[j]
    mov edi,[ebp-36] (j)                  ;#004498D9: 213175 DC                  uv 80 20  1  71      
    lea ecx,[ebp-40] (k)                  ;#004498DC: 215115 D8                  vu 02 20  1  71      
    mov esi,[ebp-16] (bsi)                ;#004498DF: 213165 F0                  uv 40 20  1  72      
    mov edx,597                           ;#004498E2: 272 55020000               vu 04 00  1  72      
    call #0046106B (:%pSubse1i)           ;#004498E7: 350 7F770100               v  00 00  1  73      
;   496                     x[k..k] = '\\'&x[k]
    mov edi,eax                           ;#004498EC: 211307                     uv 80 01  1  74      
    mov esi,[ebp] (x)                     ;#004498EE: 213165 00                  vu 40 20  1  74      
    mov edx,593                           ;#004498F1: 272 51020000               uv 04 00  1  75      
    call #004610CE (:%pSubse1is)          ;#004498F6: 350 D3770100               v  00 00  1  75      
    mov [ebp-44] (symtab[610]),eax        ;#004498FB: 211105 D4                  uv 00 21  1  76      
    lea edx,[ebp-28] (symtab[603])        ;#004498FE: 215125 E4                  vu 04 20  1  76      
    mov edi,#00402268                     ;#00449901: 277 68224000               uv 80 00  1  77      
    lea ecx,[ebp-44] (symtab[610])        ;#00449906: 215115 D4                  vu 02 20  1  77      
    call #0045FD65 (:%opConcat)           ;#00449909: 350 57640100               v  00 00  1  78      
    mov ecx,1                             ;#0044990E: 271 01000000               uv 02 00  1  79      
    push #00449928                        ;#00449913: 150 28994400               vu 00 00  1  79      
    push dword[ebp-28] (symtab[603])      ;#00449918: 377165 E4                  np 00 20  2  80      
    push dword[ebp-40] (k)                ;#0044991B: 377165 D8                  np 00 20  2  82      
    push dword[ebp-40] (k)                ;#0044991E: 377165 D8                  np 00 20  2  84      
    mov eax,ebp                           ;#00449921: 213305                     uv 01 20  1  86      
    jmp #0046019E (:%pReps)               ;#00449923: 351 76680100               v  00 00  1  86      
    mov ecx,[ebp] (x)                     ;#00449928: 213115 00                  uv 02 20  1  87      
    cmp ecx,h4                            ;#0044992B: 201371 00000040            uv 00 02  1  88 02   
    jl #0044993A                          ;#00449931: 174 07                     v  00 00  1  88      
    cmp byte[ebx+ecx*4-1],#82             ;#00449933: 200174213 FF 82            u  00 0A  2  89      
    je #00449944                          ;#00449938: 164 0A                     v  00 00  1  90      
    mov ecx,593                           ;#0044993A: 271 51020000               uv 02 00  1  91      
    call #00462D8D (:%opTcFail)           ;#0044993F: 350 49940100               v  00 00  1  91      
;   497                 end for
    mov edi,[ebp-36] (j)                  ;#00449944: 213175 DC                  uv 80 20  1  92      
    mov esi,[ebp-32] (symtab[607])        ;#00449947: 213165 E0                  vu 40 20  1  92      
    add edi,1                             ;#0044994A: 203307 01                  uv 80 80  1  93      
    cmp edi,esi                           ;#0044994D: 073376                     uv 00 C0  1  94 80   
    mov [ebp-36] (j),edi                  ;#0044994F: 211175 DC                  vu 00 A0  1  94      
    jle #004498D9                         ;#00449952: 176 85                     v  00 00  1  95      
;   498                 backtick = false
    mov [ebp-12] (backtick),ebx           ;#00449954: 211135 F4                  uv 00 28  1  96      
;   499             end if
;   500             x[i..i] = '\\'&c    -- NB does not work on RDS Eu/OpenEuphoria
    lea edx,[ebp-28] (symtab[603])        ;#00449957: 215125 E4                  vu 04 20  1  96      
    mov edi,#00402268                     ;#0044995A: 277 68224000               uv 80 00  1  97      
    lea ecx,[ebp-8] (c)                   ;#0044995F: 215115 F8                  vu 02 20  1  97      
    call #0045FD65 (:%opConcat)           ;#00449962: 350 FE630100               v  00 00  1  98      
    mov ecx,1                             ;#00449967: 271 01000000               uv 02 00  1  99      
    push #00449981                        ;#0044996C: 150 81994400               vu 00 00  1  99      
    push dword[ebp-28] (symtab[603])      ;#00449971: 377165 E4                  np 00 20  2 100      
    push dword[ebp-24] (i)                ;#00449974: 377165 E8                  np 00 20  2 102      
    push dword[ebp-24] (i)                ;#00449977: 377165 E8                  np 00 20  2 104      
    mov eax,ebp                           ;#0044997A: 213305                     uv 01 20  1 106      
    jmp #0046019E (:%pReps)               ;#0044997C: 351 1D680100               v  00 00  1 106      
    mov eax,[ebp] (x)                     ;#00449981: 213105 00                  uv 01 20  1 107      
    cmp eax,h4                            ;#00449984: 075 00000040               uv 00 01  1 108 01   
    jl #00449992                          ;#00449989: 174 07                     v  00 00  1 108      
    cmp byte[ebx+eax*4-1],#82             ;#0044998B: 200174203 FF 82            u  00 09  2 109      
    je #0044999C                          ;#00449990: 164 0A                     v  00 00  1 110      
    mov ecx,593                           ;#00449992: 271 51020000               uv 02 00  1 111      
    call #00462D8D (:%opTcFail)           ;#00449997: 350 F1930100               v  00 00  1 111      
;   501         end if
;   502     end for
    mov ecx,[ebp-24] (i)                  ;#0044999C: 213115 E8                  uv 02 20  1 112      
    mov edx,1                             ;#0044999F: 272 01000000               vu 04 00  1 112      
    add ecx,-1                            ;#004499A4: 203301 FF                  uv 02 02  1 113      
    cmp ecx,edx                           ;#004499A7: 073312                     uv 00 06  1 114 02   
    mov [ebp-24] (i),ecx                  ;#004499A9: 211115 E8                  vu 00 22  1 114      
    jge #004497CE                         ;#004499AC: 017215 1CFEFFFF            v  00 00  1 115      
;   503 --  if withquotes then
;   504 --  if backtick then
;   505 --  if backtick and enquote='q' and length(bsi)!=0 then
;   506     if backtick and (prefer_backtick or length(bsi)!=0) then
    mov esi,[ebp-12] (backtick)           ;#004499B2: 213165 F4                  uv 40 20  1 116      
    test esi,esi                          ;#004499B5: 205366                     uv 00 40  1 117 40   
    je #004499F1                          ;#004499B7: 164 38                     v  00 00  1 117      
    mov edi,[prefer_backtick]             ;#004499B9: 213075 60224000            uv 80 00  1 118      
    test edi,edi                          ;#004499BF: 205377                     uv 00 80  1 119 80   
    jne #004499CF                         ;#004499C1: 165 0C                     v  00 00  1 119      
    mov eax,[ebp-16] (bsi)                ;#004499C3: 213105 F0                  uv 01 20  1 120      
    mov ecx,[ebx+eax*4-12]                ;#004499C6: 213114203 F4               uv 02 09  1 123 01 *01*
    cmp ecx,0                             ;#004499CA: 203371 00                  uv 00 02  1 124 02   
    je #004499F1                          ;#004499CD: 164 22                     v  00 00  1 124      
;   507         x = '`'&x&'`'
    mov ecx,3                             ;#004499CF: 271 03000000               uv 02 00  1 125      
    push #004499EF                        ;#004499D4: 150 EF994400               vu 00 00  1 125      
    push dword[#00402280]                 ;#004499D9: 377065 80224000            np 00 00  2 126      
    push dword[ebp] (x)                   ;#004499DF: 377165 00                  np 00 20  2 128      
    push dword[#00402280]                 ;#004499E2: 377065 80224000            np 00 00  2 130      
    mov eax,ebp                           ;#004499E8: 213305                     uv 01 20  1 132      
    jmp #0045FF95 (:%opConcatN)           ;#004499EA: 351 A6650100               v  00 00  1 132      
    jmp #00449A11                         ;#004499EF: 353 20                     v  00 00  1 133      
;   508     else
;   509         x = '"'&x&'"'
    mov ecx,3                             ;#004499F1: 271 03000000               uv 02 00  1 134      
    push #00449A11                        ;#004499F6: 150 119A4400               vu 00 00  1 134      
    push dword[#0040226C]                 ;#004499FB: 377065 6C224000            np 00 00  2 135      
    push dword[ebp] (x)                   ;#00449A01: 377165 00                  np 00 20  2 137      
    push dword[#0040226C]                 ;#00449A04: 377065 6C224000            np 00 00  2 139      
    mov eax,ebp                           ;#00449A0A: 213305                     uv 01 20  1 141      
    jmp #0045FF95 (:%opConcatN)           ;#00449A0C: 351 84650100               v  00 00  1 141      
;   510     end if
;   511     return x
    mov eax,[ebp] (x)                     ;#00449A11: 213105 00                  uv 01 20  1 142      
    mov [ebp] (x),ebx                     ;#00449A14: 211135 00                  vu 00 28  1 142      
    jmp #00462C8F (:%opRetf)              ;#00449A17: 351 73920100               v  00 00  1 143      
;   512 end function
;   513 
;   514 string hexchar, dxoetc
;   515 sequence bases
;   516 
;   517 --integer r_len = 0
;   518 bool unicode_align = false
;   519 
;   520 --forward function sprint(object x, integer asCh=false, maxlen=-1, nest=0)
;   521 
;   522 procedure init_2()
;   523 -- [DEV] technically this isn't thread safe... (code shown commented out should be enough, once those routines work)
;   524     -- (uncommented 25/11/16)
;   525     enter_cs()
    xor ecx,ecx                           ;#00449F33: 061311                     uv 02 02  1   1      
    call #00463B80 (:%pEnterCS)           ;#00449F35: 350 469C0100               v  00 00  1   1      
;   526     if not init2 then
    mov esi,[#00402220] (init2)           ;#00449F3A: 213065 20224000            uv 40 00  1   2      
    test esi,esi                          ;#00449F40: 205366                     uv 00 40  1   3 40   
    jne #0044A02E                         ;#00449F42: 017205 E6000000            v  00 00  1   3      
;   527 --DEV make INF a builtin (like PI), ditto NAN:
;   528 --      inf = 1e300*1e300
;   529         #ilASM{ fld1
                        fld1              ;#00449F48: 331350                     np 00 00  2   4      
;   530                 fldz
                        fldz              ;#00449F4A: 331356                     np 00 00  2   6      
;   531                 fdivp
                        fdivp st1,st0     ;#00449F4C: 336371                     np 00 00 39   8      
;   532             [32]
;   533                 lea edi,[inf]
                        mov edi,#00402224  ;#00449F4E: 277 24224000               uv 80 00  1  47      
;   534             [64]
;   535                 lea rdi,[inf]
;   536             []
;   537                 call :%pStoreFlt }
                        call #0046388C (:%pStoreFlt)  ;#00449F53: 350 34990100               v  00 00  1  47      
;   538 
;   539         -- Erm, this one is a bit bizarre...
;   540         -- On the one hand it seems RDS Eu does not support nan properly, but then it somehow does...
;   541         -- If you try testing for nan, it seems to go all pear-shaped, but avoiding the tests
;   542         --  seems to make it happy again, and yet print "nan" and "inf" like a good little boy...
;   543         -- Of course, you shouldn't be using this code on RDS Eu anyway.
;   544         --
;   545 --/**/  nan = -(inf/inf)        --/* Phix
    mov edi,[#00402224] (inf)             ;#00449F58: 213075 24224000            uv 80 00  1  48      
    cmp edi,h4                            ;#00449F5E: 201377 00000040            uv 00 80  1  49 80   
    jne #00449F70                         ;#00449F64: 165 0A                     v  00 00  1  49      
    mov esi,521                           ;#00449F66: 276 09020000               uv 40 00  1  50      
    call #00462744 (:%pUnassigned)        ;#00449F6B: 350 D4870100               v  00 00  1  50      
    cmp edi,h4                            ;#00449F70: 201377 00000040            uv 00 80  1  51      
    jne #00449F82                         ;#00449F76: 165 0A                     v  00 00  1  51      
    mov esi,521                           ;#00449F78: 276 09020000               uv 40 00  1  52      
    call #00462744 (:%pUnassigned)        ;#00449F7D: 350 C2870100               v  00 00  1  52      
    mov edi,ebp                           ;#00449F82: 213375                     uv 80 20  1  53      
    mov ecx,[#00402224] (inf)             ;#00449F84: 213015 24224000            vu 02 00  1  53      
    mov eax,ecx                           ;#00449F8A: 211310                     uv 01 02  1  54      
    call #0045F31D (:%opDiv)              ;#00449F8C: 350 8C530100               v  00 00  1  54      
    mov edi,#00402228                     ;#00449F91: 277 28224000               uv 80 00  1  55      
    mov ecx,[ebp] (symtab[617])           ;#00449F96: 213115 00                  vu 02 20  1  55      
    call #0045F51F (:%opUminus)           ;#00449F99: 350 81550100               v  00 00  1  56      
;   546         nan = 3.245673689e243   --   RDS --*/
;   547 
;   548         bases = {10,16,8,2}
    mov eax,#0040228C                     ;#00449F9E: 270 8C224000               uv 01 00  1  57      
    mov edx,4                             ;#00449FA3: 272 04000000               vu 04 00  1  57      
    push #00449FC1                        ;#00449FA8: 150 C19F4400               uv 00 00  1  58      
    push eax                              ;#00449FAD: 120                        vu 00 01  1  58      
    push 2                                ;#00449FAE: 152 02                     uv 00 00  1  59      
    push 8                                ;#00449FB0: 152 08                     vu 00 00  1  59      
    push 16                               ;#00449FB2: 152 10                     uv 00 00  1  60      
    push 10                               ;#00449FB4: 152 0A                     vu 00 00  1  60      
    mov edi,[#0040228C] (bases)           ;#00449FB6: 213075 8C224000            uv 80 00  1  61      
    jmp #00460143 (:%pMkSq)               ;#00449FBC: 351 82610100               v  00 00  1  61      
;   549 --      hexchar = "0123456789ABCDEFabcdef"
;   550 --      hexchar = tagset('9','0') & tagset('Z','A') & tagset('z','a')
;   551         hexchar = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
    mov eax,[#00402294]                   ;#00449FC1: 241 94224000               uv 01 00  1  62      
    mov edx,[#00402284] (hexchar)         ;#00449FC6: 213025 84224000            vu 04 00  1  62      
    cmp eax,h4                            ;#00449FCC: 075 00000040               uv 00 01  1  63      
    jl #00449FD8                          ;#00449FD1: 174 05                     v  00 00  1  63      
    add dword[ebx+eax*4-8],1              ;#00449FD3: 203104203 F8 01            u  00 09  3  64      
    mov [#00402284] (hexchar),eax         ;#00449FD8: 243 84224000               vu 00 01  1  66      
    cmp edx,h4                            ;#00449FDD: 201372 00000040            uv 00 04  1  67      
    jle #00449FF1                         ;#00449FE3: 176 0C                     v  00 00  1  67      
    sub dword[ebx+edx*4-8],1              ;#00449FE5: 203154223 F8 01            u  00 0C  3  68      
    jne #00449FF1                         ;#00449FEA: 165 05                     v  00 00  1  70      
    call #004639A8 (:%pDealloc)           ;#00449FEC: 350 B7990100               v  00 00  1  71      
;   552 --  ?hexchar
;   553 --  ?hexchar[1+10]&""       -- 'A'
;   554 --  ?hexchar[1+10+26]&""    -- 'a'
;   555 
;   556 --      dxoetc = "dxobscvefgEXG"
;   557 --      dxoetc = "dxobstncvVefgEXG"
;   558         dxoetc = "dxobstncvVRefgEXG"
    mov esi,[#00402298]                   ;#00449FF1: 213065 98224000            uv 40 00  1  72      
    mov edx,[#00402288] (dxoetc)          ;#00449FF7: 213025 88224000            vu 04 00  1  72      
    cmp esi,h4                            ;#00449FFD: 201376 00000040            uv 00 40  1  73      
    jl #0044A00A                          ;#0044A003: 174 05                     v  00 00  1  73      
    add dword[ebx+esi*4-8],1              ;#0044A005: 203104263 F8 01            u  00 48  3  74      
    mov [#00402288] (dxoetc),esi          ;#0044A00A: 211065 88224000            vu 00 40  1  76      
    cmp edx,h4                            ;#0044A010: 201372 00000040            uv 00 04  1  77      
    jle #0044A024                         ;#0044A016: 176 0C                     v  00 00  1  77      
    sub dword[ebx+edx*4-8],1              ;#0044A018: 203154223 F8 01            u  00 0C  3  78      
    jne #0044A024                         ;#0044A01D: 165 05                     v  00 00  1  80      
    call #004639A8 (:%pDealloc)           ;#0044A01F: 350 84990100               v  00 00  1  81      
;   559         init2 = 1
    mov [#00402220] (init2), dword 1      ;#0044A024: 307005 20224000 01000000   uv 00 00  1  82      
;   560     end if
;   561     leave_cs()
    xor ecx,ecx                           ;#0044A02E: 061311                     vu 02 02  1  82      
    call #00463BCE (:%pLeaveCS)           ;#0044A030: 350 999B0100               v  00 00  1  83      
    jmp #00462C8F (:%opRetf)              ;#0044A035: 351 558C0100               v  00 00  1  84      
;   562 end procedure
;   563 
;   564 local function toRoman(integer n, bool lowercase)
    mov esi,[ebp] (n)                     ;#00449A1C: 213165 00                  uv 40 20  1   1      
    cmp esi,h4                            ;#00449A1F: 201376 00000040            uv 00 40  1   2 40   
    jl #00449A31                          ;#00449A25: 174 0A                     v  00 00  1   2      
    mov ecx,622                           ;#00449A27: 271 6E020000               uv 02 00  1   3      
    call #00462D8D (:%opTcFail)           ;#00449A2C: 350 5C930100               v  00 00  1   3      
;   565     assert(n>=1 and n<=3999,"roman numerals must be 1..3999",4)
    cmp esi,1                             ;#00449A31: 203376 01                  uv 00 40  1   4      
    jl #00449A3E                          ;#00449A34: 174 08                     v  00 00  1   4      
    cmp esi,3999                          ;#00449A36: 201376 9F0F0000            uv 00 40  1   5      
    jle #00449A43                         ;#00449A3C: 176 05                     v  00 00  1   5      
    mov [ebp-8] (symtab[625]),ebx         ;#00449A3E: 211135 F8                  uv 00 28  1   6      
    jmp #00449A4A                         ;#00449A41: 353 07                     v  00 00  1   6      
    mov [ebp-8] (symtab[625]), dword 1    ;#00449A43: 307105 F8 01000000         uv 00 20  1   7      
    mov ecx,8                             ;#00449A4A: 271 08000000               vu 02 00  1   7      
    mov edx,393                           ;#00449A4F: 272 89010000               uv 04 00  1   8      
    call #00462C02 (:%opFrame) (assert)   ;#00449A54: 350 A9910100               v  00 00  1   8      
    mov edi,[ebp+20] (prevebp)            ;#00449A59: 213175 14                  uv 80 20  1   9      
    mov eax,[edi-8]                       ;#00449A5C: 213107 F8                  uv 01 80  1  12 80 *80*
    mov [ebp] (condition),eax             ;#00449A5F: 211105 00                  uv 00 21  1  13 01   
    mov edi,[#004022A0]                   ;#00449A62: 213075 A0224000            vu 80 00  1  13      
    mov [ebp-4] (msg),edi                 ;#00449A68: 211175 FC                  uv 00 A0  1  14      
    add dword[ebx+edi*4-8],1              ;#00449A6B: 203104273 F8 01            u  00 88  3  16    *80*
    mov [ebp-8] (args), dword 4           ;#00449A70: 307105 F8 04000000         vu 00 20  1  18      
    mov [ebp+28] (retaddr),#00449A83      ;#00449A77: 307105 1C 839A4400         uv 00 20  1  19      
    jmp #0044BD38 (code:assert)           ;#00449A7E: 351 B5220000               v  00 00  1  19      
;   566     string res = ""
    mov ecx,[#004022A4]                   ;#00449A83: 213015 A4224000            uv 02 00  1  20      
    mov [ebp-12] (res),ecx                ;#00449A89: 211115 F4                  uv 00 22  1  21 02   
    add dword[ebx+ecx*4-8],1              ;#00449A8C: 203104213 F8 01            u  00 0A  3  23    *02*
;   567     integer idx = 1, -- (..7, to "MDCLXVI")
    mov [ebp-16] (idx), dword 1           ;#00449A91: 307105 F0 01000000         vu 00 20  1  25      
;   568              rn = 1000, -- 500,100,50,10,5,1
    mov [ebp-20] (rn), dword 1000         ;#00449A98: 307105 EC E8030000         uv 00 20  1  26      
;   569           tenth =  100  -- 100, 10,10, 1,1,0
    mov [ebp-24] (tenth), dword 100       ;#00449A9F: 307105 E8 64000000         vu 00 20  1  26      
;   570     while n>0 do
    mov esi,[ebp] (n)                     ;#00449AA6: 213165 00                  uv 40 20  1  27      
    cmp esi,0                             ;#00449AA9: 203376 00                  uv 00 40  1  28 40   
    jle #00449C29                         ;#00449AAC: 017216 77010000            v  00 00  1  28      
;   571         while n>=rn do
    mov eax,[ebp] (n)                     ;#00449AB2: 213105 00                  uv 01 20  1  29      
    mov edi,[ebp-20] (rn)                 ;#00449AB5: 213175 EC                  vu 80 20  1  29      
    cmp eax,edi                           ;#00449AB8: 071370                     uv 00 81  1  30      
    jl #00449B18                          ;#00449ABA: 174 5C                     v  00 00  1  30      
;   572             res &= "MDCLXVI"[idx];
    mov edi,[ebp-16] (idx)                ;#00449ABC: 213175 F0                  uv 80 20  1  31      
    mov esi,[#004022B0]                   ;#00449ABF: 213065 B0224000            vu 40 00  1  31      
    mov edx,634                           ;#00449AC5: 272 7A020000               uv 04 00  1  32      
    call #004610CE (:%pSubse1is)          ;#00449ACA: 350 FF750100               v  00 00  1  32      
    mov [ebp-28] (symtab[635]),eax        ;#00449ACF: 211105 E4                  uv 00 21  1  33      
    lea edx,[ebp-12] (res)                ;#00449AD2: 215125 F4                  vu 04 20  1  33      
    lea edi,[ebp-12] (res)                ;#00449AD5: 215175 F4                  uv 80 20  1  34      
    lea ecx,[ebp-28] (symtab[635])        ;#00449AD8: 215115 E4                  vu 02 20  1  34      
    xor eax,eax                           ;#00449ADB: 061300                     uv 01 01  1  35      
    call #0045F9F7 (:%opApnd)             ;#00449ADD: 350 155F0100               v  00 00  1  35      
    mov ecx,[ebp-12] (res)                ;#00449AE2: 213115 F4                  uv 02 20  1  36      
    cmp ecx,h4                            ;#00449AE5: 201371 00000040            uv 00 02  1  37 02   
    jl #00449AF4                          ;#00449AEB: 174 07                     v  00 00  1  37      
    cmp byte[ebx+ecx*4-1],#82             ;#00449AED: 200174213 FF 82            u  00 0A  2  38      
    je #00449AFE                          ;#00449AF2: 164 0A                     v  00 00  1  39      
    mov ecx,627                           ;#00449AF4: 271 73020000               uv 02 00  1  40      
    call #00462D8D (:%opTcFail)           ;#00449AF9: 350 8F920100               v  00 00  1  40      
;   573             n -= rn;
    mov edi,[ebp] (n)                     ;#00449AFE: 213175 00                  uv 80 20  1  41      
    mov esi,[ebp-20] (rn)                 ;#00449B01: 213165 EC                  vu 40 20  1  41      
    sub edi,esi                           ;#00449B04: 051367                     uv 80 C0  1  42      
    mov edx,edi                           ;#00449B06: 213327                     uv 04 80  1  43 80   
    mov [ebp] (n),edi                     ;#00449B08: 211175 00                  vu 00 A0  1  43      
    shl edx,1                             ;#00449B0B: 321342                     u  04 04  1  44      
    jno #00449AB2                         ;#00449B0D: 161 A3                     v  00 00  1  44      
    mov edi,ebp                           ;#00449B0F: 213375                     uv 80 20  1  45      
    call #00462764 (:%e01tcfAddiii)       ;#00449B11: 350 4E8C0100               v  00 00  1  45      
;   574         end while
    jmp #00449AB2                         ;#00449B16: 353 9A                     v  00 00  1  46      
;   575         if n+tenth>=rn then
    lea edi,[ebp-32] (symtab[636])        ;#00449B18: 215175 E0                  uv 80 20  1  47      
    mov ecx,eax                           ;#00449B1B: 211301                     vu 02 01  1  47      
    mov eax,[ebp-24] (tenth)              ;#00449B1D: 213105 E8                  uv 01 20  1  48      
    call #0045F261 (:%opAdd)              ;#00449B20: 350 3C570100               v  00 00  1  48      
    mov edi,[ebp-20] (rn)                 ;#00449B25: 213175 EC                  uv 80 20  1  49      
    mov eax,[ebp-32] (symtab[636])        ;#00449B28: 213105 E0                  vu 01 20  1  49      
    mov esi,630                           ;#00449B2B: 276 76020000               uv 40 00  1  50      
    mov edx,636                           ;#00449B30: 272 7C020000               vu 04 00  1  50      
    call #0045F8B0 (:%opJcc)              ;#00449B35: 350 765D0100               v  00 00  1  51      
    jl #00449BC3                          ;#00449B3A: 017214 83000000            v  00 00  1  52      
;   576             res &= "CXI"[floor((idx+1)/2)];
    lea edi,[ebp-32] (symtab[636])        ;#00449B40: 215175 E0                  uv 80 20  1  53      
    mov ecx,[ebp-16] (idx)                ;#00449B43: 213115 F0                  vu 02 20  1  53      
    mov eax,[#0040201C]                   ;#00449B46: 241 1C204000               uv 01 00  1  54      
    call #0045F261 (:%opAdd)              ;#00449B4B: 350 11570100               v  00 00  1  54      
    lea edi,[ebp-36] (symtab[638])        ;#00449B50: 215175 DC                  uv 80 20  1  55      
    mov ecx,[ebp-32] (symtab[636])        ;#00449B53: 213115 E0                  vu 02 20  1  55      
    mov eax,[DLL_THREAD_ATTACH]           ;#00449B56: 241 40204000               uv 01 00  1  56      
    call #0045F39A (:%opDivf)             ;#00449B5B: 350 3A580100               v  00 00  1  56      
    mov edi,[ebp-36] (symtab[638])        ;#00449B60: 213175 DC                  uv 80 20  1  57      
    mov esi,[#004022B4]                   ;#00449B63: 213065 B4224000            vu 40 00  1  57      
    mov edx,637                           ;#00449B69: 272 7D020000               uv 04 00  1  58      
    call #004610CE (:%pSubse1is)          ;#00449B6E: 350 5B750100               v  00 00  1  58      
    mov [ebp-28] (symtab[635]),eax        ;#00449B73: 211105 E4                  uv 00 21  1  59      
    lea edx,[ebp-12] (res)                ;#00449B76: 215125 F4                  vu 04 20  1  59      
    lea edi,[ebp-12] (res)                ;#00449B79: 215175 F4                  uv 80 20  1  60      
    lea ecx,[ebp-28] (symtab[635])        ;#00449B7C: 215115 E4                  vu 02 20  1  60      
    xor eax,eax                           ;#00449B7F: 061300                     uv 01 01  1  61      
    call #0045F9F7 (:%opApnd)             ;#00449B81: 350 715E0100               v  00 00  1  61      
    mov ecx,[ebp-12] (res)                ;#00449B86: 213115 F4                  uv 02 20  1  62      
    cmp ecx,h4                            ;#00449B89: 201371 00000040            uv 00 02  1  63 02   
    jl #00449B98                          ;#00449B8F: 174 07                     v  00 00  1  63      
    cmp byte[ebx+ecx*4-1],#82             ;#00449B91: 200174213 FF 82            u  00 0A  2  64      
    je #00449BA2                          ;#00449B96: 164 0A                     v  00 00  1  65      
    mov ecx,627                           ;#00449B98: 271 73020000               uv 02 00  1  66      
    call #00462D8D (:%opTcFail)           ;#00449B9D: 350 EB910100               v  00 00  1  66      
;   577             n += tenth -- above loop once more
    mov edi,[ebp] (n)                     ;#00449BA2: 213175 00                  uv 80 20  1  67      
    mov esi,[ebp-24] (tenth)              ;#00449BA5: 213165 E8                  vu 40 20  1  67      
    add edi,esi                           ;#00449BA8: 001367                     uv 80 C0  1  68      
    mov edx,edi                           ;#00449BAA: 213327                     uv 04 80  1  69 80   
    mov [ebp] (n),edi                     ;#00449BAC: 211175 00                  vu 00 A0  1  69      
    shl edx,1                             ;#00449BAF: 321342                     u  04 04  1  70      
    jno #00449AA6                         ;#00449BB1: 017201 EFFEFFFF            v  00 00  1  70      
    mov edi,ebp                           ;#00449BB7: 213375                     uv 80 20  1  71      
    call #00462764 (:%e01tcfAddiii)       ;#00449BB9: 350 A68B0100               v  00 00  1  71      
    jmp #00449AA6                         ;#00449BBE: 351 E3FEFFFF               v  00 00  1  72      
;   578         elsif n then
    mov eax,[ebp] (n)                     ;#00449BC3: 213105 00                  uv 01 20  1  73      
    test eax,eax                          ;#00449BC6: 205300                     uv 00 01  1  74 01   
    je #00449AA6                          ;#00449BC8: 017204 D8FEFFFF            v  00 00  1  74      
;   579             idx += 1;
    mov ecx,[ebp-16] (idx)                ;#00449BCE: 213115 F0                  uv 02 20  1  75      
    add ecx,1                             ;#00449BD1: 203301 01                  uv 02 02  1  76 02   
    mov edx,ecx                           ;#00449BD4: 213321                     uv 04 02  1  77 02   
    mov [ebp-16] (idx),ecx                ;#00449BD6: 211115 F0                  vu 00 22  1  77      
    shl edx,1                             ;#00449BD9: 321342                     u  04 04  1  78      
    jno #00449BE5                         ;#00449BDB: 161 08                     v  00 00  1  78      
    lea edi,[ebp-16] (idx)                ;#00449BDD: 215175 F0                  uv 80 20  1  79      
    call #00462764 (:%e01tcfAddiii)       ;#00449BE0: 350 7F8B0100               v  00 00  1  79      
;   580             rn /= iff(odd(idx)?5:2);
    and ecx,1                             ;#00449BE5: 203341 01                  uv 02 02  1  80      
    je #00449BF3                          ;#00449BE8: 164 09                     v  00 00  1  80      
    mov [ebp-40] (symtab[639]), dword 5   ;#00449BEA: 307105 D8 05000000         uv 00 20  1  81      
    jmp #00449BFA                         ;#00449BF1: 353 07                     v  00 00  1  81      
    mov [ebp-40] (symtab[639]), dword 2   ;#00449BF3: 307105 D8 02000000         uv 00 20  1  82      
    lea edi,[ebp-20] (rn)                 ;#00449BFA: 215175 EC                  vu 80 20  1  82      
    mov ecx,[ebp-20] (rn)                 ;#00449BFD: 213115 EC                  uv 02 20  1  83      
    mov eax,[ebp-40] (symtab[639])        ;#00449C00: 213105 D8                  vu 01 20  1  83      
    call #0045F336 (:%opDivi)             ;#00449C03: 350 2E570100               v  00 00  1  84      
;   581             -- (aside: floor rqd, 0.1 is not an integer!)
;   582             if odd(idx) then tenth = floor(rn/10) end if
    mov esi,[ebp-16] (idx)                ;#00449C08: 213165 F0                  uv 40 20  1  85      
    and esi,1                             ;#00449C0B: 203346 01                  uv 40 40  1  86 40   
    je #00449AA6                          ;#00449C0E: 017204 92FEFFFF            v  00 00  1  86      
    lea edi,[ebp-24] (tenth)              ;#00449C14: 215175 E8                  uv 80 20  1  87      
    mov ecx,[ebp-20] (rn)                 ;#00449C17: 213115 EC                  vu 02 20  1  87      
    mov eax,[#00402090] (BRIGHT_GREEN)    ;#00449C1A: 241 90204000               uv 01 00  1  88      
    call #0045F39A (:%opDivf)             ;#00449C1F: 350 76570100               v  00 00  1  88      
;   583         end if
;   584     end while
    jmp #00449AA6                         ;#00449C24: 351 7DFEFFFF               v  00 00  1  89      
;   585     if lowercase then res = lower(res) end if
    mov edi,[ebp-4] (lowercase)           ;#00449C29: 213175 FC                  uv 80 20  1  90      
    test edi,edi                          ;#00449C2C: 205377                     uv 00 80  1  91 80   
    je #00449CA5                          ;#00449C2E: 164 75                     v  00 00  1  91      
    mov ecx,6                             ;#00449C30: 271 06000000               uv 02 00  1  92      
    mov edx,282                           ;#00449C35: 272 1A010000               vu 04 00  1  92      
    call #00462C02 (:%opFrame) (lower)    ;#00449C3A: 350 C38F0100               v  00 00  1  93      
    mov edi,[ebp+20] (prevebp)            ;#00449C3F: 213175 14                  uv 80 20  1  94      
    mov eax,[edi-12]                      ;#00449C42: 213107 F4                  uv 01 80  1  97 80 *80*
    mov [edi-12], dword h4                ;#00449C45: 307107 F4 00000040         vu 00 80  1  97      
    cmp eax,h4                            ;#00449C4C: 075 00000040               uv 00 01  1  98      
    jne #00449C5D                         ;#00449C51: 165 0A                     v  00 00  1  98      
    mov esi,627                           ;#00449C53: 276 73020000               uv 40 00  1  99      
    call #00462744 (:%pUnassigned)        ;#00449C58: 350 E78A0100               v  00 00  1  99      
    mov [ebp] (x),eax                     ;#00449C5D: 211105 00                  uv 00 21  1 100      
    mov [ebp+28] (retaddr),#00449C6C      ;#00449C60: 307105 1C 6C9C4400         vu 00 20  1 100      
    jmp #0044ECDD (code:lower)            ;#00449C67: 351 71500000               v  00 00  1 101      
    push eax                              ;#00449C6C: 120                        uv 00 01  1 102      
    mov esi,[ebp-12] (res)                ;#00449C6D: 213165 F4                  vu 40 20  1 102      
    cmp esi,h4                            ;#00449C70: 201376 00000040            uv 00 40  1 103      
    jle #00449C86                         ;#00449C76: 176 0E                     v  00 00  1 103      
    sub dword[ebx+esi*4-8],1              ;#00449C78: 203154263 F8 01            u  00 48  3 104      
    jne #00449C86                         ;#00449C7D: 165 07                     v  00 00  1 106      
    mov edx,esi                           ;#00449C7F: 213326                     uv 04 40  1 107      
    call #004639A8 (:%pDealloc)           ;#00449C81: 350 229D0100               v  00 00  1 107      
    pop dword[ebp-12] (res)               ;#00449C86: 217105 F4                  np 00 20  3 108      
    mov ecx,[ebp-12] (res)                ;#00449C89: 213115 F4                  uv 02 20  1 111      
    cmp ecx,h4                            ;#00449C8C: 201371 00000040            uv 00 02  1 112 02   
    jl #00449C9B                          ;#00449C92: 174 07                     v  00 00  1 112      
    cmp byte[ebx+ecx*4-1],#82             ;#00449C94: 200174213 FF 82            u  00 0A  2 113      
    je #00449CA5                          ;#00449C99: 164 0A                     v  00 00  1 114      
    mov ecx,627                           ;#00449C9B: 271 73020000               uv 02 00  1 115      
    call #00462D8D (:%opTcFail)           ;#00449CA0: 350 E8900100               v  00 00  1 115      
;   586     return res
    mov eax,[ebp-12] (res)                ;#00449CA5: 213105 F4                  uv 01 20  1 116      
    mov [ebp-12] (res),ebx                ;#00449CA8: 211135 F4                  vu 00 28  1 116      
    jmp #00462C8F (:%opRetf)              ;#00449CAB: 351 DF8F0100               v  00 00  1 117      
;   587 end function
;   588 
;   589 --without trace
;   590 local function sprintf_(sequence fmt, object args)
;   591 integer i, fi, fidx
;   592 integer nxt
;   593 string result, r1
;   594 object o, oj
;   595 atom work
;   596 integer base, sgn, r1len, hc
;   597 bool lowerHex
;   598 --?result   --DOH, infinite loop! (use puts(1,<string>) instead!)
;   599 integer zerofill
;   600 integer leftjustify
;   601 integer centre
;   602 integer showplus
;   603 integer showcommas
;   604 integer enquote
;   605 integer blankTZ
;   606 integer minfieldwidth
;   607 --      minfieldwidth = 0
;   608 integer precision
;   609 --      precision = 0
;   610 integer tmp
;   611 
;   612     if not init2 then init_2() end if
    mov ecx,[#00402220] (init2)           ;#004451D9: 213015 20224000            uv 02 00  1   1      
    test ecx,ecx                          ;#004451DF: 205311                     uv 00 02  1   2 02   
    jne #004451FE                         ;#004451E1: 165 1B                     v  00 00  1   2      
    mov ecx,1                             ;#004451E3: 271 01000000               uv 02 00  1   3      
    mov edx,616                           ;#004451E8: 272 68020000               vu 04 00  1   3      
    call #00462C02 (:%opFrame) (init_2)   ;#004451ED: 350 10DA0100               v  00 00  1   4      
    mov [ebp+28] (retaddr),#004451FE      ;#004451F2: 307105 1C FE514400         uv 00 20  1   5      
    jmp #00449F33 (code:init_2)           ;#004451F9: 351 354D0000               v  00 00  1   5      
;   613     nxt = 1
    mov [ebp-20] (nxt), dword 1           ;#004451FE: 307105 EC 01000000         uv 00 20  1   6      
;   614 --  result = ""
;   615     result = repeat(' ',0)
    mov ecx,6                             ;#00445205: 271 06000000               vu 02 00  1   6      
    mov edx,206                           ;#0044520A: 272 CE000000               uv 04 00  1   7      
    call :%opFrame (repeatch)             ;#0044520F: 350 EED90100               v  00 00  1   7      
    mov [ebp] (ch), dword 32              ;#00445214: 307105 00 20000000         uv 00 20  1   8      
    mov [ebp-4] (n),ebx                   ;#0044521B: 211135 FC                  vu 00 28  1   8      
    mov [ebp+28] (retaddr),#0044522A      ;#0044521E: 307105 1C 2A524400         uv 00 20  1   9      
    jmp #0045581E (code:repeatch)         ;#00445225: 351 F4050100               v  00 00  1   9      
    mov [ebp-24] (result),eax             ;#0044522A: 211105 E8                  uv 00 21  1  10      
;   616     i = 1
    mov [ebp-8] (i), dword 1              ;#0044522D: 307105 F8 01000000         vu 00 20  1  10      
;   617     while i<=length(fmt) do
    mov edi,[ebp] (fmt)                   ;#00445234: 213175 00                  uv 80 20  1  11      
    mov esi,[ebx+edi*4-12]                ;#00445237: 213164273 F4               uv 40 88  1  14 80 *80*
    mov ecx,[ebp-8] (i)                   ;#0044523B: 213115 F8                  vu 02 20  1  14      
    cmp ecx,esi                           ;#0044523E: 071361                     uv 00 42  1  15      
    jg #004480F7                          ;#00445240: 017217 B12E0000            v  00 00  1  15      
;   618         fi = fmt[i]
    mov edi,ecx                           ;#00445246: 211317                     uv 80 02  1  16      
    lea ecx,[ebp-12] (fi)                 ;#00445248: 215115 F4                  vu 02 20  1  16      
    mov esi,[ebp] (fmt)                   ;#0044524B: 213165 00                  uv 40 20  1  17      
    mov edx,642                           ;#0044524E: 272 82020000               vu 04 00  1  17      
    call #0046106B (:%pSubse1i)           ;#00445253: 350 13BE0100               v  00 00  1  18      
;   619         if fi='%' then
    cmp eax,37                            ;#00445258: 203370 25                  uv 00 01  1  19      
    jne #004480AB                         ;#0044525B: 017205 4A2E0000            v  00 00  1  19      
;   620             i += 1
    mov edi,[ebp-8] (i)                   ;#00445261: 213175 F8                  uv 80 20  1  20      
    add edi,1                             ;#00445264: 203307 01                  uv 80 80  1  21 80   
    mov edx,edi                           ;#00445267: 213327                     uv 04 80  1  22 80   
    mov [ebp-8] (i),edi                   ;#00445269: 211175 F8                  vu 00 A0  1  22      
    shl edx,1                             ;#0044526C: 321342                     u  04 04  1  23      
    jno #00445278                         ;#0044526E: 161 08                     v  00 00  1  23      
    lea edi,[ebp-8] (i)                   ;#00445270: 215175 F8                  uv 80 20  1  24      
    call #00462764 (:%e01tcfAddiii)       ;#00445273: 350 ECD40100               v  00 00  1  24      
;   621             if i>length(fmt) then ueofmt() end if
    mov ecx,[ebp] (fmt)                   ;#00445278: 213115 00                  uv 02 20  1  25      
    mov esi,[ebx+ecx*4-12]                ;#0044527B: 213164213 F4               uv 40 0A  1  28 02 *02*
    mov eax,[ebp-8] (i)                   ;#0044527F: 213105 F8                  vu 01 20  1  28      
    cmp eax,esi                           ;#00445282: 071360                     uv 00 41  1  29      
    jle #004452A1                         ;#00445284: 176 1B                     v  00 00  1  29      
    mov ecx,1                             ;#00445286: 271 01000000               uv 02 00  1  30      
    mov edx,572                           ;#0044528B: 272 3C020000               vu 04 00  1  30      
    call #00462C02 (:%opFrame) (ueofmt)   ;#00445290: 350 6DD90100               v  00 00  1  31      
    mov [ebp+28] (retaddr),#004452A1      ;#00445295: 307105 1C A1524400         uv 00 20  1  32      
    jmp #00449ECA (code:ueofmt)           ;#0044529C: 351 294C0000               v  00 00  1  32      
;   622             fi = fmt[i]
    mov edi,[ebp-8] (i)                   ;#004452A1: 213175 F8                  uv 80 20  1  33      
    lea ecx,[ebp-12] (fi)                 ;#004452A4: 215115 F4                  vu 02 20  1  33      
    mov esi,[ebp] (fmt)                   ;#004452A7: 213165 00                  uv 40 20  1  34      
    mov edx,642                           ;#004452AA: 272 82020000               vu 04 00  1  34      
    call #0046106B (:%pSubse1i)           ;#004452AF: 350 B7BD0100               v  00 00  1  35      
;   623             if fi='%' then
    cmp eax,37                            ;#004452B4: 203370 25                  uv 00 01  1  36      
    jne #004452F0                         ;#004452B7: 165 37                     v  00 00  1  36      
;   624                 result &= '%'
    lea edx,[ebp-24] (result)             ;#004452B9: 215125 E8                  uv 04 20  1  37      
    lea edi,[ebp-24] (result)             ;#004452BC: 215175 E8                  vu 80 20  1  37      
    mov ecx,#00402258                     ;#004452BF: 271 58224000               uv 02 00  1  38      
    xor eax,eax                           ;#004452C4: 061300                     vu 01 01  1  38      
    call #0045F9F7 (:%opApnd)             ;#004452C6: 350 2CA70100               v  00 00  1  39      
    mov ecx,[ebp-24] (result)             ;#004452CB: 213115 E8                  uv 02 20  1  40      
    cmp ecx,h4                            ;#004452CE: 201371 00000040            uv 00 02  1  41 02   
    jl #004452E1                          ;#004452D4: 174 0B                     v  00 00  1  41      
    cmp byte[ebx+ecx*4-1],#82             ;#004452D6: 200174213 FF 82            u  00 0A  2  42      
    je #004480D7                          ;#004452DB: 017204 F62D0000            v  00 00  1  43      
    mov ecx,648                           ;#004452E1: 271 88020000               uv 02 00  1  44      
    call #00462D8D (:%opTcFail)           ;#004452E6: 350 A2DA0100               v  00 00  1  44      
    jmp #004480D7                         ;#004452EB: 351 E72D0000               v  00 00  1  45      
;   625             else
;   626                 zerofill = 0
    mov [ebp-64] (zerofill),ebx           ;#004452F0: 211135 C0                  uv 00 28  1  46      
;   627                 leftjustify = 0
    mov [ebp-68] (leftjustify),ebx        ;#004452F3: 211135 BC                  vu 00 28  1  46      
;   628                 centre = 0
    mov [ebp-72] (centre),ebx             ;#004452F6: 211135 B8                  uv 00 28  1  47      
;   629                 showplus = 0
    mov [ebp-76] (showplus),ebx           ;#004452F9: 211135 B4                  vu 00 28  1  47      
;   630                 showcommas = 0
    mov [ebp-80] (showcommas),ebx         ;#004452FC: 211135 B0                  uv 00 28  1  48      
;   631                 enquote = 0
    mov [ebp-84] (enquote),ebx            ;#004452FF: 211135 AC                  vu 00 28  1  48      
;   632                 if fi='[' then
    cmp eax,91                            ;#00445302: 203370 5B                  uv 00 01  1  49      
    jne #0044556F                         ;#00445305: 017205 64020000            v  00 00  1  49      
;   633                     integer e = find(']',fmt,i+1)
    lea edi,[ebp-112] (symtab[672])       ;#0044530B: 215175 90                  uv 80 20  1  50      
    mov ecx,[ebp-8] (i)                   ;#0044530E: 213115 F8                  vu 02 20  1  50      
    mov eax,[#0040201C]                   ;#00445311: 241 1C204000               uv 01 00  1  51      
    call #0045F261 (:%opAdd)              ;#00445316: 350 469F0100               v  00 00  1  51      
    mov ecx,8                             ;#0044531B: 271 08000000               uv 02 00  1  52      
    mov edx,110                           ;#00445320: 272 6E000000               vu 04 00  1  52      
    call #00462C02 (:%opFrame) (find)     ;#00445325: 350 D8D80100               v  00 00  1  53      
    mov [ebp] (needle), dword 93          ;#0044532A: 307105 00 5D000000         uv 00 20  1  54      
    mov edi,[ebp+20] (prevebp)            ;#00445331: 213175 14                  vu 80 20  1  54      
    mov eax,[edi]                         ;#00445334: 213007                     uv 01 80  1  57    *80*
    xor ebx,ebx                           ;#00445336: 061333                     vu 08 08  1  57      
    cmp eax,h4                            ;#00445338: 075 00000040               uv 00 01  1  58      
    jl #00445349                          ;#0044533D: 174 0A                     v  00 00  1  58      
    add dword[ebx+eax*4-8],1              ;#0044533F: 203104203 F8 01            u  00 09  3  59      
    cmp eax,642                           ;#00445344: 075 82020000               vu 00 01  1  61      
    mov [ebp-4] (haystack),eax            ;#00445349: 211105 FC                  uv 00 21  1  62      
    mov edi,[ebp+20] (prevebp)            ;#0044534C: 213175 14                  vu 80 20  1  62      
    mov eax,[edi-112]                     ;#0044534F: 213107 90                  uv 01 80  1  65    *80*
    mov [edi-112], dword h4               ;#00445352: 307107 90 00000040         vu 00 80  1  65      
    cmp eax,h4                            ;#00445359: 075 00000040               uv 00 01  1  66      
    jne #0044536A                         ;#0044535E: 165 0A                     v  00 00  1  66      
    mov esi,672                           ;#00445360: 276 A0020000               uv 40 00  1  67      
    call #00462744 (:%pUnassigned)        ;#00445365: 350 DAD30100               v  00 00  1  67      
    mov [ebp-8] (start),eax               ;#0044536A: 211105 F8                  uv 00 21  1  68      
    mov [ebp+28] (retaddr),#00445379      ;#0044536D: 307105 1C 79534400         vu 00 20  1  68      
    jmp #0045AADB (code:find)             ;#00445374: 351 62570100               v  00 00  1  69      
    mov [ebp-108] (e),eax                 ;#00445379: 211105 94                  uv 00 21  1  70      
;   634                     if e=0 then
    cmp eax,0                             ;#0044537C: 203370 00                  vu 00 01  1  70      
    jne #004453E8                         ;#0044537F: 165 67                     v  00 00  1  71      
;   635                         crash("missing ] in format string",{},3)
    lea eax,[ebp-116] (symtab[674])       ;#00445381: 215105 8C                  uv 01 20  1  72      
    mov edx,0                             ;#00445384: 272 00000000               vu 04 00  1  72      
    push #00445397                        ;#00445389: 150 97534400               uv 00 00  1  73      
    push eax                              ;#0044538E: 120                        vu 00 01  1  73      
    mov edi,[ebp-116] (symtab[674])       ;#0044538F: 213175 8C                  uv 80 20  1  74      
    jmp #00460143 (:%pMkSq)               ;#00445392: 351 ACAD0100               v  00 00  1  74      
    mov ecx,4                             ;#00445397: 271 04000000               uv 02 00  1  75      
    mov edx,397                           ;#0044539C: 272 8D010000               vu 04 00  1  75      
    call #00462C02 (:%opFrame) (crash)    ;#004453A1: 350 5CD80100               v  00 00  1  76      
    mov esi,[#004022C0]                   ;#004453A6: 213065 C0224000            uv 40 00  1  77      
    mov [ebp] (msg),esi                   ;#004453AC: 211165 00                  uv 00 60  1  78 40   
    add dword[ebx+esi*4-8],1              ;#004453AF: 203104263 F8 01            u  00 48  3  80    *40*
    mov edi,[ebp+20] (prevebp)            ;#004453B4: 213175 14                  vu 80 20  1  82      
    mov eax,[edi-116]                     ;#004453B7: 213107 8C                  uv 01 80  1  85    *80*
    mov [edi-116], dword h4               ;#004453BA: 307107 8C 00000040         vu 00 80  1  85      
    cmp eax,h4                            ;#004453C1: 075 00000040               uv 00 01  1  86      
    jne #004453D2                         ;#004453C6: 165 0A                     v  00 00  1  86      
    mov esi,674                           ;#004453C8: 276 A2020000               uv 40 00  1  87      
    call #00462744 (:%pUnassigned)        ;#004453CD: 350 72D30100               v  00 00  1  87      
    mov [ebp-4] (args),eax                ;#004453D2: 211105 FC                  uv 00 21  1  88      
    mov [ebp-8] (nFrames), dword 3        ;#004453D5: 307105 F8 03000000         vu 00 20  1  88      
    mov [ebp+28] (retaddr),#004453E8      ;#004453DC: 307105 1C E8534400         uv 00 20  1  89      
    jmp #0044AB92 (code:crash)            ;#004453E3: 351 AA570000               v  00 00  1  89      
;   636                     end if
;   637                     nxt = to_integer(fmt[i+1..e-1])
    lea edi,[ebp-112] (symtab[672])       ;#004453E8: 215175 90                  uv 80 20  1  90      
    mov ecx,[ebp-8] (i)                   ;#004453EB: 213115 F8                  vu 02 20  1  90      
    mov eax,[#0040201C]                   ;#004453EE: 241 1C204000               uv 01 00  1  91      
    call #0045F261 (:%opAdd)              ;#004453F3: 350 699E0100               v  00 00  1  91      
    lea edi,[ebp-120] (symtab[675])       ;#004453F8: 215175 88                  uv 80 20  1  92      
    mov ecx,[ebp-108] (e)                 ;#004453FB: 213115 94                  vu 02 20  1  92      
    mov eax,[#0040201C]                   ;#004453FE: 241 1C204000               uv 01 00  1  93      
    call #0045F299 (:%opSub)              ;#00445403: 350 919E0100               v  00 00  1  93      
    lea edx,[ebp-124] (symtab[676])       ;#00445408: 215125 84                  uv 04 20  1  94      
    mov ecx,1                             ;#0044540B: 271 01000000               vu 02 00  1  94      
    push #00445429                        ;#00445410: 150 29544400               uv 00 00  1  95      
    push edx                              ;#00445415: 122                        vu 00 04  1  95      
    push dword[ebp-120] (symtab[675])     ;#00445416: 377165 88                  np 00 20  2  96      
    push dword[ebp-112] (symtab[672])     ;#00445419: 377165 90                  np 00 20  2  98      
    mov esi,[ebp] (fmt)                   ;#0044541C: 213165 00                  uv 40 20  1 100      
    mov edx,642                           ;#0044541F: 272 82020000               vu 04 00  1 100      
    jmp #00460A75 (:%pSubss)              ;#00445424: 351 4CB60100               v  00 00  1 101      
    mov ecx,14                            ;#00445429: 271 0E000000               uv 02 00  1 102      
    mov edx,124                           ;#0044542E: 272 7C000000               vu 04 00  1 102      
    call :%opFrame (to_integer)           ;#00445433: 350 CAD70100               v  00 00  1 103      
    mov edi,[ebp+20] (prevebp)            ;#00445438: 213175 14                  uv 80 20  1 104      
    mov eax,[edi-124]                     ;#0044543B: 213107 84                  uv 01 80  1 107 80 *80*
    mov [edi-124], dword h4               ;#0044543E: 307107 84 00000040         vu 00 80  1 107      
    cmp eax,h4                            ;#00445445: 075 00000040               uv 00 01  1 108      
    jne #00445456                         ;#0044544A: 165 0A                     v  00 00  1 108      
    mov esi,676                           ;#0044544C: 276 A4020000               uv 40 00  1 109      
    call #00462744 (:%pUnassigned)        ;#00445451: 350 EED20100               v  00 00  1 109      
    mov [ebp] (s),eax                     ;#00445456: 211105 00                  uv 00 21  1 110      
    mov [ebp+28] (retaddr),#00445465      ;#00445459: 307105 1C 65544400         vu 00 20  1 110      
    jmp #00459ED2 (code:to_integer)       ;#00445460: 351 6D4A0100               v  00 00  1 111      
    mov [ebp-20] (nxt),eax                ;#00445465: 211105 EC                  uv 00 21  1 112      
;   638                     if nxt=0 then
    cmp eax,0                             ;#00445468: 203370 00                  vu 00 01  1 112      
    jne #0044551F                         ;#0044546B: 017205 AE000000            v  00 00  1 113      
;   639                         crash("[%s] is 0 or not a number",{fmt[i+1..e-1]},3)
    lea edi,[ebp-112] (symtab[672])       ;#00445471: 215175 90                  uv 80 20  1 114      
    mov ecx,[ebp-8] (i)                   ;#00445474: 213115 F8                  vu 02 20  1 114      
    mov eax,[#0040201C]                   ;#00445477: 241 1C204000               uv 01 00  1 115      
    call #0045F261 (:%opAdd)              ;#0044547C: 350 E09D0100               v  00 00  1 115      
    lea edi,[ebp-120] (symtab[675])       ;#00445481: 215175 88                  uv 80 20  1 116      
    mov ecx,[ebp-108] (e)                 ;#00445484: 213115 94                  vu 02 20  1 116      
    mov eax,[#0040201C]                   ;#00445487: 241 1C204000               uv 01 00  1 117      
    call #0045F299 (:%opSub)              ;#0044548C: 350 089E0100               v  00 00  1 117      
    lea edx,[ebp-124] (symtab[676])       ;#00445491: 215125 84                  uv 04 20  1 118      
    mov ecx,1                             ;#00445494: 271 01000000               vu 02 00  1 118      
    push #004454B2                        ;#00445499: 150 B2544400               uv 00 00  1 119      
    push edx                              ;#0044549E: 122                        vu 00 04  1 119      
    push dword[ebp-120] (symtab[675])     ;#0044549F: 377165 88                  np 00 20  2 120      
    push dword[ebp-112] (symtab[672])     ;#004454A2: 377165 90                  np 00 20  2 122      
    mov esi,[ebp] (fmt)                   ;#004454A5: 213165 00                  uv 40 20  1 124      
    mov edx,642                           ;#004454A8: 272 82020000               vu 04 00  1 124      
    jmp #00460A75 (:%pSubss)              ;#004454AD: 351 C3B50100               v  00 00  1 125      
    lea eax,[ebp-116] (symtab[674])       ;#004454B2: 215105 8C                  uv 01 20  1 126      
    mov edx,1                             ;#004454B5: 272 01000000               vu 04 00  1 126      
    push #004454CE                        ;#004454BA: 150 CE544400               uv 00 00  1 127      
    push eax                              ;#004454BF: 120                        vu 00 01  1 127      
    push dword[ebp-124] (symtab[676])     ;#004454C0: 377165 84                  np 00 20  2 128      
    mov [ebp-124] (symtab[676]),ebx       ;#004454C3: 211135 84                  uv 00 28  1 130      
    mov edi,[ebp-116] (symtab[674])       ;#004454C6: 213175 8C                  vu 80 20  1 130      
    jmp #00460143 (:%pMkSq)               ;#004454C9: 351 75AC0100               v  00 00  1 131      
    mov ecx,4                             ;#004454CE: 271 04000000               uv 02 00  1 132      
    mov edx,397                           ;#004454D3: 272 8D010000               vu 04 00  1 132      
    call #00462C02 (:%opFrame) (crash)    ;#004454D8: 350 25D70100               v  00 00  1 133      
    mov ecx,[#004022C4]                   ;#004454DD: 213015 C4224000            uv 02 00  1 134      
    mov [ebp] (msg),ecx                   ;#004454E3: 211115 00                  uv 00 22  1 135 02   
    add dword[ebx+ecx*4-8],1              ;#004454E6: 203104213 F8 01            u  00 0A  3 137    *02*
    mov edi,[ebp+20] (prevebp)            ;#004454EB: 213175 14                  vu 80 20  1 139      
    mov eax,[edi-116]                     ;#004454EE: 213107 8C                  uv 01 80  1 142    *80*
    mov [edi-116], dword h4               ;#004454F1: 307107 8C 00000040         vu 00 80  1 142      
    cmp eax,h4                            ;#004454F8: 075 00000040               uv 00 01  1 143      
    jne #00445509                         ;#004454FD: 165 0A                     v  00 00  1 143      
    mov esi,674                           ;#004454FF: 276 A2020000               uv 40 00  1 144      
    call #00462744 (:%pUnassigned)        ;#00445504: 350 3BD20100               v  00 00  1 144      
    mov [ebp-4] (args),eax                ;#00445509: 211105 FC                  uv 00 21  1 145      
    mov [ebp-8] (nFrames), dword 3        ;#0044550C: 307105 F8 03000000         vu 00 20  1 145      
    mov [ebp+28] (retaddr),#0044551F      ;#00445513: 307105 1C 1F554400         uv 00 20  1 146      
    jmp #0044AB92 (code:crash)            ;#0044551A: 351 73560000               v  00 00  1 146      
;   640                     end if
;   641                     i = e+1
    mov esi,[ebp-108] (e)                 ;#0044551F: 213165 94                  uv 40 20  1 147      
    add esi,1                             ;#00445522: 203306 01                  uv 40 40  1 148 40   
    mov edx,esi                           ;#00445525: 213326                     uv 04 40  1 149 40   
    mov [ebp-8] (i),esi                   ;#00445527: 211165 F8                  vu 00 60  1 149      
    shl edx,1                             ;#0044552A: 321342                     u  04 04  1 150      
    jno #00445536                         ;#0044552C: 161 08                     v  00 00  1 150      
    lea edi,[ebp-8] (i)                   ;#0044552E: 215175 F8                  uv 80 20  1 151      
    call #00462764 (:%e01tcfAddiii)       ;#00445531: 350 2ED20100               v  00 00  1 151      
;   642                     if i>length(fmt) then ueofmt() end if
    mov edi,[ebp] (fmt)                   ;#00445536: 213175 00                  uv 80 20  1 152      
    mov ecx,[ebx+edi*4-12]                ;#00445539: 213114273 F4               uv 02 88  1 155 80 *80*
    cmp esi,ecx                           ;#0044553D: 071316                     uv 00 42  1 156 02   
    jle #0044555C                         ;#0044553F: 176 1B                     v  00 00  1 156      
    mov ecx,1                             ;#00445541: 271 01000000               uv 02 00  1 157      
    mov edx,572                           ;#00445546: 272 3C020000               vu 04 00  1 157      
    call #00462C02 (:%opFrame) (ueofmt)   ;#0044554B: 350 B2D60100               v  00 00  1 158      
    mov [ebp+28] (retaddr),#0044555C      ;#00445550: 307105 1C 5C554400         uv 00 20  1 159      
    jmp #00449ECA (code:ueofmt)           ;#00445557: 351 6E490000               v  00 00  1 159      
;   643                     fi = fmt[i]
    mov edi,[ebp-8] (i)                   ;#0044555C: 213175 F8                  uv 80 20  1 160      
    lea ecx,[ebp-12] (fi)                 ;#0044555F: 215115 F4                  vu 02 20  1 160      
    mov esi,[ebp] (fmt)                   ;#00445562: 213165 00                  uv 40 20  1 161      
    mov edx,642                           ;#00445565: 272 82020000               vu 04 00  1 161      
    call #0046106B (:%pSubse1i)           ;#0044556A: 350 FCBA0100               v  00 00  1 162      
;   644                 end if
;   645                 -- Note that -=| are mutually exclusive, and cannot co-exist with 0. 
;   646                 -- Likewise 0 and + are also mutually exclusive, however a + can
;   647                 -- co-exist with -=| as long as it is specified first, and , can be
;   648                 -- used in combination with any, as long as it is specified last.
;   649                 if fi='0' then
    cmp eax,48                            ;#0044556F: 203370 30                  uv 00 01  1 163      
    jne #0044559B                         ;#00445572: 165 27                     v  00 00  1 163      
;   650                     zerofill = 1
    mov [ebp-64] (zerofill), dword 1      ;#00445574: 307105 C0 01000000         uv 00 20  1 164      
;   651                     i += 1
    mov ecx,[ebp-8] (i)                   ;#0044557B: 213115 F8                  vu 02 20  1 164      
    add ecx,1                             ;#0044557E: 203301 01                  uv 02 02  1 165      
    mov edx,ecx                           ;#00445581: 213321                     uv 04 02  1 166 02   
    mov [ebp-8] (i),ecx                   ;#00445583: 211115 F8                  vu 00 22  1 166      
    shl edx,1                             ;#00445586: 321342                     u  04 04  1 167      
    jno #0044567D                         ;#00445588: 017201 EF000000            v  00 00  1 167      
    lea edi,[ebp-8] (i)                   ;#0044558E: 215175 F8                  uv 80 20  1 168      
    call #00462764 (:%e01tcfAddiii)       ;#00445591: 350 CED10100               v  00 00  1 168      
    jmp #0044567D                         ;#00445596: 351 E2000000               v  00 00  1 169      
;   652                 else
;   653 --                  if fi='+' then
;   654                     if fi='+' or fi='_' then
    cmp eax,43                            ;#0044559B: 203370 2B                  uv 00 01  1 170      
    je #004455A5                          ;#0044559E: 164 05                     v  00 00  1 170      
    cmp eax,95                            ;#004455A0: 203370 5F                  uv 00 01  1 171      
    jne #00445610                         ;#004455A3: 165 6B                     v  00 00  1 171      
;   655 --                      showplus = 1
;   656                         showplus = iff(fi='+'?'+':' ')
    cmp eax,43                            ;#004455A5: 203370 2B                  uv 00 01  1 172      
    jne #004455B3                         ;#004455A8: 165 09                     v  00 00  1 172      
    mov [symtab[679]], dword 43           ;#004455AA: 307105 80 2B000000         uv 00 20  1 173      
    jmp #004455BA                         ;#004455B1: 353 07                     v  00 00  1 173      
    mov [symtab[679]], dword 32           ;#004455B3: 307105 80 20000000         uv 00 20  1 174      
    mov edi,[ebp-128] (symtab[679])       ;#004455BA: 213175 80                  vu 80 20  1 174      
    mov [ebp-76] (showplus),edi           ;#004455BD: 211175 B4                  uv 00 A0  1 175      
;   657                         i += 1
    mov esi,[ebp-8] (i)                   ;#004455C0: 213165 F8                  vu 40 20  1 175      
    add esi,1                             ;#004455C3: 203306 01                  uv 40 40  1 176      
    mov edx,esi                           ;#004455C6: 213326                     uv 04 40  1 177 40   
    mov [ebp-8] (i),esi                   ;#004455C8: 211165 F8                  vu 00 60  1 177      
    shl edx,1                             ;#004455CB: 321342                     u  04 04  1 178      
    jno #004455D7                         ;#004455CD: 161 08                     v  00 00  1 178      
    lea edi,[ebp-8] (i)                   ;#004455CF: 215175 F8                  uv 80 20  1 179      
    call #00462764 (:%e01tcfAddiii)       ;#004455D2: 350 8DD10100               v  00 00  1 179      
;   658                         if i>length(fmt) then ueofmt() end if
    mov ecx,[ebp] (fmt)                   ;#004455D7: 213115 00                  uv 02 20  1 180      
    mov eax,[ebx+ecx*4-12]                ;#004455DA: 213104213 F4               uv 01 0A  1 183 02 *02*
    cmp esi,eax                           ;#004455DE: 071306                     uv 00 41  1 184 01   
    jle #004455FD                         ;#004455E0: 176 1B                     v  00 00  1 184      
    mov ecx,1                             ;#004455E2: 271 01000000               uv 02 00  1 185      
    mov edx,572                           ;#004455E7: 272 3C020000               vu 04 00  1 185      
    call #00462C02 (:%opFrame) (ueofmt)   ;#004455EC: 350 11D60100               v  00 00  1 186      
    mov [ebp+28] (retaddr),#004455FD      ;#004455F1: 307105 1C FD554400         uv 00 20  1 187      
    jmp #00449ECA (code:ueofmt)           ;#004455F8: 351 CD480000               v  00 00  1 187      
;   659                         fi = fmt[i]
    mov edi,[ebp-8] (i)                   ;#004455FD: 213175 F8                  uv 80 20  1 188      
    lea ecx,[ebp-12] (fi)                 ;#00445600: 215115 F4                  vu 02 20  1 188      
    mov esi,[ebp] (fmt)                   ;#00445603: 213165 00                  uv 40 20  1 189      
    mov edx,642                           ;#00445606: 272 82020000               vu 04 00  1 189      
    call #0046106B (:%pSubse1i)           ;#0044560B: 350 5BBA0100               v  00 00  1 190      
;   660                     end if
;   661                     if fi='-' then
    cmp eax,45                            ;#00445610: 203370 2D                  uv 00 01  1 191      
    jne #00445635                         ;#00445613: 165 20                     v  00 00  1 191      
;   662                         leftjustify = 1
    mov [ebp-68] (leftjustify), dword 1   ;#00445615: 307105 BC 01000000         uv 00 20  1 192      
;   663                         i += 1
    mov ecx,[ebp-8] (i)                   ;#0044561C: 213115 F8                  vu 02 20  1 192      
    add ecx,1                             ;#0044561F: 203301 01                  uv 02 02  1 193      
    mov edx,ecx                           ;#00445622: 213321                     uv 04 02  1 194 02   
    mov [ebp-8] (i),ecx                   ;#00445624: 211115 F8                  vu 00 22  1 194      
    shl edx,1                             ;#00445627: 321342                     u  04 04  1 195      
    jno #0044567D                         ;#00445629: 161 52                     v  00 00  1 195      
    lea edi,[ebp-8] (i)                   ;#0044562B: 215175 F8                  uv 80 20  1 196      
    call #00462764 (:%e01tcfAddiii)       ;#0044562E: 350 31D10100               v  00 00  1 196      
    jmp #0044567D                         ;#00445633: 353 48                     v  00 00  1 197      
;   664                     elsif fi='=' then
    cmp eax,61                            ;#00445635: 203370 3D                  uv 00 01  1 198      
    jne #0044565A                         ;#00445638: 165 20                     v  00 00  1 198      
;   665                         centre = 1
    mov [ebp-72] (centre), dword 1        ;#0044563A: 307105 B8 01000000         uv 00 20  1 199      
;   666                         i += 1
    mov edi,[ebp-8] (i)                   ;#00445641: 213175 F8                  vu 80 20  1 199      
    add edi,1                             ;#00445644: 203307 01                  uv 80 80  1 200      
    mov edx,edi                           ;#00445647: 213327                     uv 04 80  1 201 80   
    mov [ebp-8] (i),edi                   ;#00445649: 211175 F8                  vu 00 A0  1 201      
    shl edx,1                             ;#0044564C: 321342                     u  04 04  1 202      
    jno #0044567D                         ;#0044564E: 161 2D                     v  00 00  1 202      
    lea edi,[ebp-8] (i)                   ;#00445650: 215175 F8                  uv 80 20  1 203      
    call #00462764 (:%e01tcfAddiii)       ;#00445653: 350 0CD10100               v  00 00  1 203      
    jmp #0044567D                         ;#00445658: 353 23                     v  00 00  1 204      
;   667                     elsif fi='|' then
    cmp eax,124                           ;#0044565A: 203370 7C                  uv 00 01  1 205      
    jne #0044567D                         ;#0044565D: 165 1E                     v  00 00  1 205      
;   668                         centre = 2
    mov [ebp-72] (centre), dword 2        ;#0044565F: 307105 B8 02000000         uv 00 20  1 206      
;   669                         i += 1
    mov esi,[ebp-8] (i)                   ;#00445666: 213165 F8                  vu 40 20  1 206      
    add esi,1                             ;#00445669: 203306 01                  uv 40 40  1 207      
    mov edx,esi                           ;#0044566C: 213326                     uv 04 40  1 208 40   
    mov [ebp-8] (i),esi                   ;#0044566E: 211165 F8                  vu 00 60  1 208      
    shl edx,1                             ;#00445671: 321342                     u  04 04  1 209      
    jno #0044567D                         ;#00445673: 161 08                     v  00 00  1 209      
    lea edi,[ebp-8] (i)                   ;#00445675: 215175 F8                  uv 80 20  1 210      
    call #00462764 (:%e01tcfAddiii)       ;#00445678: 350 E7D00100               v  00 00  1 210      
;   670                     end if
;   671                 end if
;   672                 if i>length(fmt) then ueofmt() end if
    mov ecx,[ebp] (fmt)                   ;#0044567D: 213115 00                  uv 02 20  1 211      
    mov edi,[ebx+ecx*4-12]                ;#00445680: 213174213 F4               uv 80 0A  1 214 02 *02*
    mov eax,[ebp-8] (i)                   ;#00445684: 213105 F8                  vu 01 20  1 214      
    cmp eax,edi                           ;#00445687: 071370                     uv 00 81  1 215      
    jle #004456A6                         ;#00445689: 176 1B                     v  00 00  1 215      
    mov ecx,1                             ;#0044568B: 271 01000000               uv 02 00  1 216      
    mov edx,572                           ;#00445690: 272 3C020000               vu 04 00  1 216      
    call #00462C02 (:%opFrame) (ueofmt)   ;#00445695: 350 68D50100               v  00 00  1 217      
    mov [ebp+28] (retaddr),#004456A6      ;#0044569A: 307105 1C A6564400         uv 00 20  1 218      
    jmp #00449ECA (code:ueofmt)           ;#004456A1: 351 24480000               v  00 00  1 218      
;   673                 fi = fmt[i]
    mov edi,[ebp-8] (i)                   ;#004456A6: 213175 F8                  uv 80 20  1 219      
    lea ecx,[ebp-12] (fi)                 ;#004456A9: 215115 F4                  vu 02 20  1 219      
    mov esi,[ebp] (fmt)                   ;#004456AC: 213165 00                  uv 40 20  1 220      
    mov edx,642                           ;#004456AF: 272 82020000               vu 04 00  1 220      
    call #0046106B (:%pSubse1i)           ;#004456B4: 350 B2B90100               v  00 00  1 221      
;   674                 if fi=',' then
    cmp eax,44                            ;#004456B9: 203370 2C                  uv 00 01  1 222      
    jne #004456DC                         ;#004456BC: 165 1E                     v  00 00  1 222      
;   675                     showcommas = 3
    mov [ebp-80] (showcommas), dword 3    ;#004456BE: 307105 B0 03000000         uv 00 20  1 223      
;   676                     i+=1
    mov ecx,[ebp-8] (i)                   ;#004456C5: 213115 F8                  vu 02 20  1 223      
    add ecx,1                             ;#004456C8: 203301 01                  uv 02 02  1 224      
    mov edx,ecx                           ;#004456CB: 213321                     uv 04 02  1 225 02   
    mov [ebp-8] (i),ecx                   ;#004456CD: 211115 F8                  vu 00 22  1 225      
    shl edx,1                             ;#004456D0: 321342                     u  04 04  1 226      
    jno #004456DC                         ;#004456D2: 161 08                     v  00 00  1 226      
    lea edi,[ebp-8] (i)                   ;#004456D4: 215175 F8                  uv 80 20  1 227      
    call #00462764 (:%e01tcfAddiii)       ;#004456D7: 350 88D00100               v  00 00  1 227      
;   677                 end if
;   678                 if i>length(fmt) then ueofmt() end if
    mov edi,[ebp] (fmt)                   ;#004456DC: 213175 00                  uv 80 20  1 228      
    mov esi,[ebx+edi*4-12]                ;#004456DF: 213164273 F4               uv 40 88  1 231 80 *80*
    mov eax,[ebp-8] (i)                   ;#004456E3: 213105 F8                  vu 01 20  1 231      
    cmp eax,esi                           ;#004456E6: 071360                     uv 00 41  1 232      
    jle #00445705                         ;#004456E8: 176 1B                     v  00 00  1 232      
    mov ecx,1                             ;#004456EA: 271 01000000               uv 02 00  1 233      
    mov edx,572                           ;#004456EF: 272 3C020000               vu 04 00  1 233      
    call #00462C02 (:%opFrame) (ueofmt)   ;#004456F4: 350 09D50100               v  00 00  1 234      
    mov [ebp+28] (retaddr),#00445705      ;#004456F9: 307105 1C 05574400         uv 00 20  1 235      
    jmp #00449ECA (code:ueofmt)           ;#00445700: 351 C5470000               v  00 00  1 235      
;   679                 minfieldwidth = 0
    mov [ebp-92] (minfieldwidth),ebx      ;#00445705: 211135 A4                  uv 00 28  1 236      
;   680                 while 1 do
;   681                     fi = fmt[i]
    mov edi,[ebp-8] (i)                   ;#00445708: 213175 F8                  vu 80 20  1 236      
    lea ecx,[ebp-12] (fi)                 ;#0044570B: 215115 F4                  uv 02 20  1 237      
    mov esi,[ebp] (fmt)                   ;#0044570E: 213165 00                  vu 40 20  1 237      
    mov edx,642                           ;#00445711: 272 82020000               uv 04 00  1 238      
    call #0046106B (:%pSubse1i)           ;#00445716: 350 50B90100               v  00 00  1 238      
;   682                     if fi<'0' or fi>'9' then exit end if
    cmp eax,48                            ;#0044571B: 203370 30                  uv 00 01  1 239      
    jl #00445798                          ;#0044571E: 174 78                     v  00 00  1 239      
    cmp eax,57                            ;#00445720: 203370 39                  uv 00 01  1 240      
    jg #00445798                          ;#00445723: 177 73                     v  00 00  1 240      
;   683                     minfieldwidth = minfieldwidth*10 + (fi-'0')
    lea edi,[ebp-112] (symtab[672])       ;#00445725: 215175 90                  uv 80 20  1 241      
    mov ecx,[ebp-92] (minfieldwidth)      ;#00445728: 213115 A4                  vu 02 20  1 241      
    mov eax,[#00402090] (BRIGHT_GREEN)    ;#0044572B: 241 90204000               uv 01 00  1 242      
    call #0045F412 (:%opMul)              ;#00445730: 350 DD9C0100               v  00 00  1 242      
    lea edi,[ebp-120] (symtab[675])       ;#00445735: 215175 88                  uv 80 20  1 243      
    mov ecx,[ebp-12] (fi)                 ;#00445738: 213115 F4                  vu 02 20  1 243      
    mov eax,[MB_ICONEXCLAMATION]          ;#0044573B: 241 D8204000               uv 01 00  1 244      
    call #0045F299 (:%opSub)              ;#00445740: 350 549B0100               v  00 00  1 244      
    lea edi,[ebp-92] (minfieldwidth)      ;#00445745: 215175 A4                  uv 80 20  1 245      
    mov ecx,[ebp-112] (symtab[672])       ;#00445748: 213115 90                  vu 02 20  1 245      
    mov eax,[ebp-120] (symtab[675])       ;#0044574B: 213105 88                  uv 01 20  1 246      
    call #0045F27A (:%opAddi)             ;#0044574E: 350 279B0100               v  00 00  1 246      
;   684                     i += 1
    mov edi,[ebp-8] (i)                   ;#00445753: 213175 F8                  uv 80 20  1 247      
    add edi,1                             ;#00445756: 203307 01                  uv 80 80  1 248 80   
    mov edx,edi                           ;#00445759: 213327                     uv 04 80  1 249 80   
    mov [ebp-8] (i),edi                   ;#0044575B: 211175 F8                  vu 00 A0  1 249      
    shl edx,1                             ;#0044575E: 321342                     u  04 04  1 250      
    jno #0044576A                         ;#00445760: 161 08                     v  00 00  1 250      
    lea edi,[ebp-8] (i)                   ;#00445762: 215175 F8                  uv 80 20  1 251      
    call #00462764 (:%e01tcfAddiii)       ;#00445765: 350 FACF0100               v  00 00  1 251      
;   685                     if i>length(fmt) then ueofmt() end if
    mov esi,[ebp] (fmt)                   ;#0044576A: 213165 00                  uv 40 20  1 252      
    mov ecx,[ebx+esi*4-12]                ;#0044576D: 213114263 F4               uv 02 48  1 255 40 *40*
    mov eax,[ebp-8] (i)                   ;#00445771: 213105 F8                  vu 01 20  1 255      
    cmp eax,ecx                           ;#00445774: 071310                     uv 00 03  1 256      
    jle #00445708                         ;#00445776: 176 90                     v  00 00  1 256      
    mov ecx,1                             ;#00445778: 271 01000000               uv 02 00  1 257      
    mov edx,572                           ;#0044577D: 272 3C020000               vu 04 00  1 257      
    call #00462C02 (:%opFrame) (ueofmt)   ;#00445782: 350 7BD40100               v  00 00  1 258      
    mov [ebp+28] (retaddr),#00445793      ;#00445787: 307105 1C 93574400         uv 00 20  1 259      
    jmp #00449ECA (code:ueofmt)           ;#0044578E: 351 37470000               v  00 00  1 259      
;   686                 end while
    jmp #00445708                         ;#00445793: 351 70FFFFFF               v  00 00  1 260      
;   687                 precision = -1
    mov [ebp-96] (precision), dword -1    ;#00445798: 307105 A0 FFFFFFFF         uv 00 20  1 261      
;   688                 if fi='.' then
    cmp eax,46                            ;#0044579F: 203370 2E                  vu 00 01  1 261      
    jne #0044587B                         ;#004457A2: 017205 D3000000            v  00 00  1 262      
;   689                     i += 1
    mov edi,[ebp-8] (i)                   ;#004457A8: 213175 F8                  uv 80 20  1 263      
    add edi,1                             ;#004457AB: 203307 01                  uv 80 80  1 264 80   
    mov edx,edi                           ;#004457AE: 213327                     uv 04 80  1 265 80   
    mov [ebp-8] (i),edi                   ;#004457B0: 211175 F8                  vu 00 A0  1 265      
    shl edx,1                             ;#004457B3: 321342                     u  04 04  1 266      
    jno #004457BF                         ;#004457B5: 161 08                     v  00 00  1 266      
    lea edi,[ebp-8] (i)                   ;#004457B7: 215175 F8                  uv 80 20  1 267      
    call #00462764 (:%e01tcfAddiii)       ;#004457BA: 350 A5CF0100               v  00 00  1 267      
;   690                     if i>length(fmt) then ueofmt() end if
    mov esi,[ebp] (fmt)                   ;#004457BF: 213165 00                  uv 40 20  1 268      
    mov ecx,[ebx+esi*4-12]                ;#004457C2: 213114263 F4               uv 02 48  1 271 40 *40*
    mov eax,[ebp-8] (i)                   ;#004457C6: 213105 F8                  vu 01 20  1 271      
    cmp eax,ecx                           ;#004457C9: 071310                     uv 00 03  1 272      
    jle #004457E8                         ;#004457CB: 176 1B                     v  00 00  1 272      
    mov ecx,1                             ;#004457CD: 271 01000000               uv 02 00  1 273      
    mov edx,572                           ;#004457D2: 272 3C020000               vu 04 00  1 273      
    call #00462C02 (:%opFrame) (ueofmt)   ;#004457D7: 350 26D40100               v  00 00  1 274      
    mov [ebp+28] (retaddr),#004457E8      ;#004457DC: 307105 1C E8574400         uv 00 20  1 275      
    jmp #00449ECA (code:ueofmt)           ;#004457E3: 351 E2460000               v  00 00  1 275      
;   691                     precision = 0
    mov [ebp-96] (precision),ebx          ;#004457E8: 211135 A0                  uv 00 28  1 276      
;   692                     while 1 do
;   693                         fi = fmt[i]
    mov edi,[ebp-8] (i)                   ;#004457EB: 213175 F8                  vu 80 20  1 276      
    lea ecx,[ebp-12] (fi)                 ;#004457EE: 215115 F4                  uv 02 20  1 277      
    mov esi,[ebp] (fmt)                   ;#004457F1: 213165 00                  vu 40 20  1 277      
    mov edx,642                           ;#004457F4: 272 82020000               uv 04 00  1 278      
    call #0046106B (:%pSubse1i)           ;#004457F9: 350 6DB80100               v  00 00  1 278      
;   694                         if fi<'0' or fi>'9' then exit end if
    cmp eax,48                            ;#004457FE: 203370 30                  uv 00 01  1 279      
    jl #0044587B                          ;#00445801: 174 78                     v  00 00  1 279      
    cmp eax,57                            ;#00445803: 203370 39                  uv 00 01  1 280      
    jg #0044587B                          ;#00445806: 177 73                     v  00 00  1 280      
;   695                         precision = precision*10 + (fi-'0')
    lea edi,[ebp-112] (symtab[672])       ;#00445808: 215175 90                  uv 80 20  1 281      
    mov ecx,[ebp-96] (precision)          ;#0044580B: 213115 A0                  vu 02 20  1 281      
    mov eax,[#00402090] (BRIGHT_GREEN)    ;#0044580E: 241 90204000               uv 01 00  1 282      
    call #0045F412 (:%opMul)              ;#00445813: 350 FA9B0100               v  00 00  1 282      
    lea edi,[ebp-120] (symtab[675])       ;#00445818: 215175 88                  uv 80 20  1 283      
    mov ecx,[ebp-12] (fi)                 ;#0044581B: 213115 F4                  vu 02 20  1 283      
    mov eax,[MB_ICONEXCLAMATION]          ;#0044581E: 241 D8204000               uv 01 00  1 284      
    call #0045F299 (:%opSub)              ;#00445823: 350 719A0100               v  00 00  1 284      
    lea edi,[ebp-96] (precision)          ;#00445828: 215175 A0                  uv 80 20  1 285      
    mov ecx,[ebp-112] (symtab[672])       ;#0044582B: 213115 90                  vu 02 20  1 285      
    mov eax,[ebp-120] (symtab[675])       ;#0044582E: 213105 88                  uv 01 20  1 286      
    call #0045F27A (:%opAddi)             ;#00445831: 350 449A0100               v  00 00  1 286      
;   696                         i += 1
    mov edi,[ebp-8] (i)                   ;#00445836: 213175 F8                  uv 80 20  1 287      
    add edi,1                             ;#00445839: 203307 01                  uv 80 80  1 288 80   
    mov edx,edi                           ;#0044583C: 213327                     uv 04 80  1 289 80   
    mov [ebp-8] (i),edi                   ;#0044583E: 211175 F8                  vu 00 A0  1 289      
    shl edx,1                             ;#00445841: 321342                     u  04 04  1 290      
    jno #0044584D                         ;#00445843: 161 08                     v  00 00  1 290      
    lea edi,[ebp-8] (i)                   ;#00445845: 215175 F8                  uv 80 20  1 291      
    call #00462764 (:%e01tcfAddiii)       ;#00445848: 350 17CF0100               v  00 00  1 291      
;   697                         if i>length(fmt) then ueofmt() end if
    mov esi,[ebp] (fmt)                   ;#0044584D: 213165 00                  uv 40 20  1 292      
    mov ecx,[ebx+esi*4-12]                ;#00445850: 213114263 F4               uv 02 48  1 295 40 *40*
    mov eax,[ebp-8] (i)                   ;#00445854: 213105 F8                  vu 01 20  1 295      
    cmp eax,ecx                           ;#00445857: 071310                     uv 00 03  1 296      
    jle #004457EB                         ;#00445859: 176 90                     v  00 00  1 296      
    mov ecx,1                             ;#0044585B: 271 01000000               uv 02 00  1 297      
    mov edx,572                           ;#00445860: 272 3C020000               vu 04 00  1 297      
    call #00462C02 (:%opFrame) (ueofmt)   ;#00445865: 350 98D30100               v  00 00  1 298      
    mov [ebp+28] (retaddr),#00445876      ;#0044586A: 307105 1C 76584400         uv 00 20  1 299      
    jmp #00449ECA (code:ueofmt)           ;#00445871: 351 54460000               v  00 00  1 299      
;   698                     end while
    jmp #004457EB                         ;#00445876: 351 70FFFFFF               v  00 00  1 300      
;   699                 end if
;   700 
;   701                 lowerHex = false
    mov [ebp-60] (lowerHex),ebx           ;#0044587B: 211135 C4                  uv 00 28  1 301      
;   702                 -- 23/2/10 'b' added
;   703                 -- 12/1/19 'v' added
;   704                 -- 11/12/19 't' added
;   705                 -- 16/11/20 'q' and 'Q' added
;   706                 -- 22/05/21 'a' and 'A' added
;   707                 -- 10/08/22 'F' added
;   708                 -- 08/02/24 'r', 'R' added
;   709                 -- 17/03/24 'O' added
;   710                 blankTZ = false
    mov [ebp-88] (blankTZ),ebx            ;#0044587E: 211135 A8                  vu 00 28  1 301      
;   711                 if fi='a' or fi='A' then
    cmp eax,97                            ;#00445881: 203370 61                  uv 00 01  1 302      
    je #0044588F                          ;#00445884: 164 09                     v  00 00  1 302      
    cmp eax,65                            ;#00445886: 203370 41                  uv 00 01  1 303      
    jne #00445AB4                         ;#00445889: 017205 25020000            v  00 00  1 303      
;   712                     lowerHex = fi='a'
    xor ecx,ecx                           ;#0044588F: 061311                     uv 02 02  1 304      
    cmp eax,97                            ;#00445891: 203370 61                  vu 00 01  1 304      
    sete cl                               ;#00445894: 017224301                  np 02 00  2 305      
    mov [ebp-60] (lowerHex),ecx           ;#00445897: 211115 C4                  uv 00 22  1 307      
;   713                     fidx = 0
    mov [ebp-16] (fidx),ebx               ;#0044589A: 211135 F0                  vu 00 28  1 307      
;   714                     bool bBad = atom(args) or nxt>length(args)
    mov edi,[ebp-4] (args)                ;#0044589D: 213175 FC                  uv 80 20  1 308      
    cmp edi,h4                            ;#004458A0: 201377 00000040            uv 00 80  1 309 80   
    jl #004458C2                          ;#004458A6: 174 1A                     v  00 00  1 309      
    cmp byte[ebx+edi*4-1],#12             ;#004458A8: 200174273 FF 12            u  00 88  2 310      
    je #004458C2                          ;#004458AD: 164 13                     v  00 00  1 311      
    mov esi,[ebx+edi*4-12]                ;#004458AF: 213164273 F4               uv 40 88  1 312      
    mov eax,[ebp-20] (nxt)                ;#004458B3: 213105 EC                  vu 01 20  1 312      
    cmp eax,esi                           ;#004458B6: 071360                     uv 00 41  1 313      
    jg #004458C2                          ;#004458B8: 177 08                     v  00 00  1 313      
    mov [ebp-132] (bBad),ebx              ;#004458BA: 211235 7CFFFFFF            uv 00 28  1 314      
    jmp #004458CC                         ;#004458C0: 353 0A                     v  00 00  1 314      
    mov [ebp-132] (bBad), dword 1         ;#004458C2: 307205 7CFFFFFF 01000000   uv 00 20  1 315      
;   715                     if not bBad then
    mov ecx,[ebp-132] (bBad)              ;#004458CC: 213215 7CFFFFFF            vu 02 20  1 315      
    test ecx,ecx                          ;#004458D2: 205311                     uv 00 02  1 316      
    jne #00445A68                         ;#004458D4: 017205 8E010000            v  00 00  1 316      
;   716                         o = args[nxt]
    mov edi,[ebp-20] (nxt)                ;#004458DA: 213175 EC                  uv 80 20  1 317      
    lea ecx,[ebp-32] (o)                  ;#004458DD: 215115 E0                  vu 02 20  1 317      
    mov esi,[ebp-4] (args)                ;#004458E0: 213165 FC                  uv 40 20  1 318      
    mov edx,643                           ;#004458E3: 272 83020000               vu 04 00  1 318      
    mov al,0                              ;#004458E8: 260 00                     uv 01 00  1 319      
    call #00460FE5 (:%pSubse1)            ;#004458EA: 350 F6B60100               v  00 00  1 319      
;   717                         bBad = atom(o) or length(o)!=2 or not integer(o[1]) or not atom(o[2])
    mov eax,[ebp-32] (o)                  ;#004458EF: 213105 E0                  uv 01 20  1 320      
    cmp eax,h4                            ;#004458F2: 075 00000040               uv 00 01  1 321 01   
    jl #00445973                          ;#004458F7: 174 7A                     v  00 00  1 321      
    cmp byte[ebx+eax*4-1],#12             ;#004458F9: 200174203 FF 12            u  00 09  2 322      
    je #00445973                          ;#004458FE: 164 73                     v  00 00  1 323      
    mov ecx,[ebx+eax*4-12]                ;#00445900: 213114203 F4               uv 02 09  1 324      
    cmp ecx,2                             ;#00445904: 203371 02                  uv 00 02  1 325 02   
    jne #00445973                         ;#00445907: 165 6A                     v  00 00  1 325      
    mov edi,1                             ;#00445909: 277 01000000               uv 80 00  1 326      
    lea ecx,[ebp-136] (symtab[685])       ;#0044590E: 215215 78FFFFFF            vu 02 20  1 326      
    mov esi,eax                           ;#00445914: 211306                     uv 40 01  1 327      
    mov edx,650                           ;#00445916: 272 8A020000               vu 04 00  1 327      
    mov al,0                              ;#0044591B: 260 00                     uv 01 00  1 328      
    call #00460FE5 (:%pSubse1)            ;#0044591D: 350 C3B60100               v  00 00  1 328      
    mov edi,[ebp-136] (symtab[685])       ;#00445922: 213275 78FFFFFF            uv 80 20  1 329      
    cmp edi,h4                            ;#00445928: 201377 00000040            uv 00 80  1 330 80   
    jg #00445973                          ;#0044592E: 177 43                     v  00 00  1 330      
    mov edi,2                             ;#00445930: 277 02000000               uv 80 00  1 331      
    lea ecx,[ebp-136] (symtab[685])       ;#00445935: 215215 78FFFFFF            vu 02 20  1 331      
    mov esi,[ebp-32] (o)                  ;#0044593B: 213165 E0                  uv 40 20  1 332      
    mov edx,650                           ;#0044593E: 272 8A020000               vu 04 00  1 332      
    mov al,0                              ;#00445943: 260 00                     uv 01 00  1 333      
    call #00460FE5 (:%pSubse1)            ;#00445945: 350 9BB60100               v  00 00  1 333      
    mov ecx,[ebp-136] (symtab[685])       ;#0044594A: 213215 78FFFFFF            uv 02 20  1 334      
    xor eax,eax                           ;#00445950: 061300                     vu 01 01  1 334      
    cmp ecx,h4                            ;#00445952: 201371 00000040            uv 00 02  1 335      
    jl #00445961                          ;#00445958: 174 07                     v  00 00  1 335      
    cmp byte[ebx+ecx*4-1],#12             ;#0044595A: 200174213 FF 12            u  00 0A  2 336      
    jne #00445964                         ;#0044595F: 165 03                     v  00 00  1 337      
    add eax,1                             ;#00445961: 203300 01                  uv 01 01  1 338      
    mov [ebp-104] (symtab[668]),eax       ;#00445964: 211105 98                  uv 00 21  1 339 01   
    test eax,eax                          ;#00445967: 205300                     vu 00 01  1 339      
    je #00445973                          ;#00445969: 164 08                     v  00 00  1 340      
    mov [ebp-132] (bBad),ebx              ;#0044596B: 211235 7CFFFFFF            uv 00 28  1 341      
    jmp #0044597D                         ;#00445971: 353 0A                     v  00 00  1 341      
    mov [ebp-132] (bBad), dword 1         ;#00445973: 307205 7CFFFFFF 01000000   uv 00 20  1 342      
;   718                         if not bBad then
    mov edi,[ebp-132] (bBad)              ;#0044597D: 213275 7CFFFFFF            vu 80 20  1 342      
    test edi,edi                          ;#00445983: 205377                     uv 00 80  1 343      
    jne #00445A68                         ;#00445985: 017205 DD000000            v  00 00  1 343      
;   719                             {base,work} = o
    mov edi,2                             ;#0044598B: 277 02000000               uv 80 00  1 344      
    lea ecx,[ebp-40] (work)               ;#00445990: 215115 D8                  vu 02 20  1 344      
    mov esi,[ebp-32] (o)                  ;#00445993: 213165 E0                  uv 40 20  1 345      
    mov edx,650                           ;#00445996: 272 8A020000               vu 04 00  1 345      
    mov al,0                              ;#0044599B: 260 00                     uv 01 00  1 346      
    call #00460FE5 (:%pSubse1)            ;#0044599D: 350 43B60100               v  00 00  1 346      
    mov ecx,[ebp-40] (work)               ;#004459A2: 213115 D8                  uv 02 20  1 347      
    cmp ecx,h4                            ;#004459A5: 201371 00000040            uv 00 02  1 348 02   
    jl #004459BE                          ;#004459AB: 174 11                     v  00 00  1 348      
    cmp byte[ebx+ecx*4-1],#12             ;#004459AD: 200174213 FF 12            u  00 0A  2 349      
    je #004459BE                          ;#004459B2: 164 0A                     v  00 00  1 350      
    mov ecx,652                           ;#004459B4: 271 8C020000               uv 02 00  1 351      
    call #00462D8D (:%opTcFail)           ;#004459B9: 350 CFD30100               v  00 00  1 351      
    mov edi,1                             ;#004459BE: 277 01000000               uv 80 00  1 352      
    lea ecx,[ebp-44] (base)               ;#004459C3: 215115 D4                  vu 02 20  1 352      
    mov esi,[ebp-32] (o)                  ;#004459C6: 213165 E0                  uv 40 20  1 353      
    mov edx,650                           ;#004459C9: 272 8A020000               vu 04 00  1 353      
    mov al,0                              ;#004459CE: 260 00                     uv 01 00  1 354      
    call #00460FE5 (:%pSubse1)            ;#004459D0: 350 10B60100               v  00 00  1 354      
    cmp eax,h4                            ;#004459D5: 075 00000040               uv 00 01  1 355      
    jl #004459E6                          ;#004459DA: 174 0A                     v  00 00  1 355      
    mov ecx,653                           ;#004459DC: 271 8D020000               uv 02 00  1 356      
    call #00462D8D (:%opTcFail)           ;#004459E1: 350 A7D30100               v  00 00  1 356      
;   720                             bBad = base<2 or base>iff(lowerHex?36:62)
    cmp eax,2                             ;#004459E6: 203370 02                  uv 00 01  1 357      
    jl #00445A5E                          ;#004459E9: 174 73                     v  00 00  1 357      
    mov edi,[ebp-60] (lowerHex)           ;#004459EB: 213175 C4                  uv 80 20  1 358      
    test edi,edi                          ;#004459EE: 205377                     uv 00 80  1 359 80   
    je #00445A18                          ;#004459F0: 164 26                     v  00 00  1 359      
    mov edx,[ebp-136] (symtab[685])       ;#004459F2: 213225 78FFFFFF            uv 04 20  1 360      
    cmp edx,h4                            ;#004459F8: 201372 00000040            uv 00 04  1 361 04   
    mov [symtab[685]], dword 36           ;#004459FE: 307205 78FFFFFF 24000000   vu 00 20  1 361      
    jle #00445A3C                         ;#00445A08: 176 32                     v  00 00  1 362      
    sub dword[ebx+edx*4-8],1              ;#00445A0A: 203154223 F8 01            u  00 0C  3 363      
    jne #00445A3C                         ;#00445A0F: 165 2B                     v  00 00  1 365      
    call #004639A8 (:%pDealloc)           ;#00445A11: 350 92DF0100               v  00 00  1 366      
    jmp #00445A3C                         ;#00445A16: 353 24                     v  00 00  1 367      
    mov edx,[ebp-136] (symtab[685])       ;#00445A18: 213225 78FFFFFF            uv 04 20  1 368      
    cmp edx,h4                            ;#00445A1E: 201372 00000040            uv 00 04  1 369 04   
    mov [symtab[685]], dword 62           ;#00445A24: 307205 78FFFFFF 3E000000   vu 00 20  1 369      
    jle #00445A3C                         ;#00445A2E: 176 0C                     v  00 00  1 370      
    sub dword[ebx+edx*4-8],1              ;#00445A30: 203154223 F8 01            u  00 0C  3 371      
    jne #00445A3C                         ;#00445A35: 165 05                     v  00 00  1 373      
    call #004639A8 (:%pDealloc)           ;#00445A37: 350 6CDF0100               v  00 00  1 374      
    mov edi,[ebp-136] (symtab[685])       ;#00445A3C: 213275 78FFFFFF            uv 80 20  1 375      
    mov eax,[ebp-44] (base)               ;#00445A42: 213105 D4                  vu 01 20  1 375      
    mov esi,685                           ;#00445A45: 276 AD020000               uv 40 00  1 376      
    mov edx,653                           ;#00445A4A: 272 8D020000               vu 04 00  1 376      
    call #0045F8B0 (:%opJcc)              ;#00445A4F: 350 5C9E0100               v  00 00  1 377      
    jg #00445A5E                          ;#00445A54: 177 08                     v  00 00  1 378      
    mov [ebp-132] (bBad),ebx              ;#00445A56: 211235 7CFFFFFF            uv 00 28  1 379      
    jmp #00445A68                         ;#00445A5C: 353 0A                     v  00 00  1 379      
    mov [ebp-132] (bBad), dword 1         ;#00445A5E: 307205 7CFFFFFF 01000000   uv 00 20  1 380      
;   721                         end if
;   722                     end if
;   723                     if bBad then
    mov ecx,[ebp-132] (bBad)              ;#00445A68: 213215 7CFFFFFF            vu 02 20  1 380      
    test ecx,ecx                          ;#00445A6E: 205311                     uv 00 02  1 381      
    je #00445C72                          ;#00445A70: 017204 FC010000            v  00 00  1 381      
;   724                         crash("%%%c requires {base,num}",fi,3)
    mov ecx,4                             ;#00445A76: 271 04000000               uv 02 00  1 382      
    mov edx,397                           ;#00445A7B: 272 8D010000               vu 04 00  1 382      
    call #00462C02 (:%opFrame) (crash)    ;#00445A80: 350 7DD10100               v  00 00  1 383      
    mov esi,[#004022E4]                   ;#00445A85: 213065 E4224000            uv 40 00  1 384      
    mov [ebp] (msg),esi                   ;#00445A8B: 211165 00                  uv 00 60  1 385 40   
    add dword[ebx+esi*4-8],1              ;#00445A8E: 203104263 F8 01            u  00 48  3 387    *40*
    mov edi,[ebp+20] (prevebp)            ;#00445A93: 213175 14                  vu 80 20  1 389      
    mov eax,[edi-12]                      ;#00445A96: 213107 F4                  uv 01 80  1 392    *80*
    mov [ebp-4] (args),eax                ;#00445A99: 211105 FC                  uv 00 21  1 393 01   
    mov [ebp-8] (nFrames), dword 3        ;#00445A9C: 307105 F8 03000000         vu 00 20  1 393      
    mov [ebp+28] (retaddr),#00445AAF      ;#00445AA3: 307105 1C AF5A4400         uv 00 20  1 394      
    jmp #0044AB92 (code:crash)            ;#00445AAA: 351 E3500000               v  00 00  1 394      
;   725                     end if
    jmp #00445C72                         ;#00445AAF: 351 BE010000               v  00 00  1 395      
;   726                 else
;   727 
;   728                     if fi='q' or fi='Q' then
    cmp eax,113                           ;#00445AB4: 203370 71                  uv 00 01  1 396      
    je #00445ABE                          ;#00445AB7: 164 05                     v  00 00  1 396      
    cmp eax,81                            ;#00445AB9: 203370 51                  uv 00 01  1 397      
    jne #00445ACA                         ;#00445ABC: 165 0C                     v  00 00  1 397      
;   729                         enquote = fi
    mov [ebp-84] (enquote),eax            ;#00445ABE: 211105 AC                  uv 00 21  1 398      
;   730                         fi = 's'
    mov [ebp-12] (fi), dword 115          ;#00445AC1: 307105 F4 73000000         vu 00 20  1 398      
    jmp #00445B07                         ;#00445AC8: 353 3D                     v  00 00  1 399      
;   731                     elsif fi='F' then
    cmp eax,70                            ;#00445ACA: 203370 46                  uv 00 01  1 400      
    jne #00445ADF                         ;#00445ACD: 165 10                     v  00 00  1 400      
;   732                         blankTZ = true
    mov [ebp-88] (blankTZ), dword 1       ;#00445ACF: 307105 A8 01000000         uv 00 20  1 401      
;   733                         fi = 'f'
    mov [ebp-12] (fi), dword 102          ;#00445AD6: 307105 F4 66000000         vu 00 20  1 401      
    jmp #00445B07                         ;#00445ADD: 353 28                     v  00 00  1 402      
;   734                     elsif fi='r' then
    cmp eax,114                           ;#00445ADF: 203370 72                  uv 00 01  1 403      
    jne #00445AF4                         ;#00445AE2: 165 10                     v  00 00  1 403      
;   735                         lowerHex = true -- (repurposed here)
    mov [ebp-60] (lowerHex), dword 1      ;#00445AE4: 307105 C4 01000000         uv 00 20  1 404      
;   736                         fi = 'R'
    mov [ebp-12] (fi), dword 82           ;#00445AEB: 307105 F4 52000000         vu 00 20  1 404      
    jmp #00445B07                         ;#00445AF2: 353 13                     v  00 00  1 405      
;   737                     elsif fi='O' then
    cmp eax,79                            ;#00445AF4: 203370 4F                  uv 00 01  1 406      
    jne #00445B07                         ;#00445AF7: 165 0E                     v  00 00  1 406      
;   738                         lowerHex = true -- (repurposed here)
    mov [ebp-60] (lowerHex), dword 1      ;#00445AF9: 307105 C4 01000000         uv 00 20  1 407      
;   739                         fi = 'o'
    mov [ebp-12] (fi), dword 111          ;#00445B00: 307105 F4 6F000000         vu 00 20  1 407      
;   740                     end if
;   741 --                  fidx = find(fi,"dxobstcvefgEXG")
;   742 --                  fidx = find(fi,"dxobstncvefgEXG")
;   743                     fidx = find(fi,dxoetc)
    mov ecx,8                             ;#00445B07: 271 08000000               uv 02 00  1 408      
    mov edx,110                           ;#00445B0C: 272 6E000000               vu 04 00  1 408      
    call #00462C02 (:%opFrame) (find)     ;#00445B11: 350 ECD00100               v  00 00  1 409      
    mov edi,[ebp+20] (prevebp)            ;#00445B16: 213175 14                  uv 80 20  1 410      
    mov eax,[edi-12]                      ;#00445B19: 213107 F4                  uv 01 80  1 413 80 *80*
    mov [ebp] (needle),eax                ;#00445B1C: 211105 00                  uv 00 21  1 414 01   
    mov edi,[#00402288] (dxoetc)          ;#00445B1F: 213075 88224000            vu 80 00  1 414      
    mov [ebp-4] (haystack),edi            ;#00445B25: 211175 FC                  uv 00 A0  1 415      
    cmp edi,h4                            ;#00445B28: 201377 00000040            vu 00 80  1 415      
    jl #00445B3A                          ;#00445B2E: 174 0A                     v  00 00  1 416      
    add dword[ebx+edi*4-8],1              ;#00445B30: 203104273 F8 01            u  00 88  3 417      
    cmp eax,613                           ;#00445B35: 075 65020000               vu 00 01  1 419      
    mov [ebp+28] (retaddr),#00445B46      ;#00445B3A: 307105 1C 465B4400         uv 00 20  1 420      
    jmp #0045AADB (code:find)             ;#00445B41: 351 954F0100               v  00 00  1 420      
    mov [ebp-16] (fidx),eax               ;#00445B46: 211105 F0                  uv 00 21  1 421      
;   744 --                  fidx = 0
;   745 --                  for dx=1 to length(dxoetc) do
;   746 --                      if fi=dxoetc[dx] then
;   747 --                          fidx = dx
;   748 --                          exit
;   749 --                      end if
;   750 --                  end for
;   751                     if fi='X' then
    mov ecx,[ebp-12] (fi)                 ;#00445B49: 213115 F4                  vu 02 20  1 421      
    cmp ecx,88                            ;#00445B4C: 203371 58                  uv 00 02  1 422      
    jne #00445B5F                         ;#00445B4F: 165 0E                     v  00 00  1 422      
;   752                         --
;   753                         -- Yup, I know it's a wee bit confusing, but for compatibility
;   754                         --  reasons, %x is upper case hex and %X is lower case hex!
;   755                         -- Assuming any objections from the backwards compatibility crowd 
;   756                         --  are drowned out by many more from the logical behaviour crowd,
;   757                         --  set lowerHex to 1/0 rather than the 0/1 it is now.
;   758                         --
;   759                         lowerHex = true
    mov [ebp-60] (lowerHex), dword 1      ;#00445B51: 307105 C4 01000000         uv 00 20  1 423      
;   760                         fidx = 2
    mov [ebp-16] (fidx), dword 2          ;#00445B58: 307105 F0 02000000         vu 00 20  1 423      
;   761                     end if
;   762 
;   763 --                  if fidx=0
;   764 ----                    or (showcommas and find(fi,"df")=0) then
;   765 --                  or (showcommas and fi!='d' and fi!='f') then
;   766 --                      badfmt()
;   767 --                  end if
;   768                     if fidx=0 then
    mov esi,[ebp-16] (fidx)               ;#00445B5F: 213165 F0                  uv 40 20  1 424      
    cmp esi,0                             ;#00445B62: 203376 00                  uv 00 40  1 425 40   
    jne #00445BA2                         ;#00445B65: 165 3B                     v  00 00  1 425      
;   769                         crash("unknown specifier:%c",fi,3)
    mov ecx,4                             ;#00445B67: 271 04000000               uv 02 00  1 426      
    mov edx,397                           ;#00445B6C: 272 8D010000               vu 04 00  1 426      
    call #00462C02 (:%opFrame) (crash)    ;#00445B71: 350 8CD00100               v  00 00  1 427      
    mov edi,[#00402300]                   ;#00445B76: 213075 00234000            uv 80 00  1 428      
    mov [ebp] (msg),edi                   ;#00445B7C: 211175 00                  uv 00 A0  1 429 80   
    add dword[ebx+edi*4-8],1              ;#00445B7F: 203104273 F8 01            u  00 88  3 431    *80*
    mov edi,[ebp+20] (prevebp)            ;#00445B84: 213175 14                  vu 80 20  1 433      
    mov eax,[edi-12]                      ;#00445B87: 213107 F4                  uv 01 80  1 436    *80*
    mov [ebp-4] (args),eax                ;#00445B8A: 211105 FC                  uv 00 21  1 437 01   
    mov [ebp-8] (nFrames), dword 3        ;#00445B8D: 307105 F8 03000000         vu 00 20  1 437      
    mov [ebp+28] (retaddr),#00445BA0      ;#00445B94: 307105 1C A05B4400         uv 00 20  1 438      
    jmp #0044AB92 (code:crash)            ;#00445B9B: 351 F24F0000               v  00 00  1 438      
    jmp #00445BEF                         ;#00445BA0: 353 4D                     v  00 00  1 439      
;   770                     elsif showcommas and fi!='d' and fi!='f' then
    mov ecx,[ebp-80] (showcommas)         ;#00445BA2: 213115 B0                  uv 02 20  1 440      
    test ecx,ecx                          ;#00445BA5: 205311                     uv 00 02  1 441 02   
    je #00445BEF                          ;#00445BA7: 164 46                     v  00 00  1 441      
    mov esi,[ebp-12] (fi)                 ;#00445BA9: 213165 F4                  uv 40 20  1 442      
    cmp esi,100                           ;#00445BAC: 203376 64                  uv 00 40  1 443 40   
    je #00445BEF                          ;#00445BAF: 164 3E                     v  00 00  1 443      
    cmp esi,102                           ;#00445BB1: 203376 66                  uv 00 40  1 444      
    je #00445BEF                          ;#00445BB4: 164 39                     v  00 00  1 444      
;   771                         crash("comma fill not supported on %c",fi,3)
    mov ecx,4                             ;#00445BB6: 271 04000000               uv 02 00  1 445      
    mov edx,397                           ;#00445BBB: 272 8D010000               vu 04 00  1 445      
    call #00462C02 (:%opFrame) (crash)    ;#00445BC0: 350 3DD00100               v  00 00  1 446      
    mov edi,[#00402304]                   ;#00445BC5: 213075 04234000            uv 80 00  1 447      
    mov [ebp] (msg),edi                   ;#00445BCB: 211175 00                  uv 00 A0  1 448 80   
    add dword[ebx+edi*4-8],1              ;#00445BCE: 203104273 F8 01            u  00 88  3 450    *80*
    mov edi,[ebp+20] (prevebp)            ;#00445BD3: 213175 14                  vu 80 20  1 452      
    mov eax,[edi-12]                      ;#00445BD6: 213107 F4                  uv 01 80  1 455    *80*
    mov [ebp-4] (args),eax                ;#00445BD9: 211105 FC                  uv 00 21  1 456 01   
    mov [ebp-8] (nFrames), dword 3        ;#00445BDC: 307105 F8 03000000         vu 00 20  1 456      
    mov [ebp+28] (retaddr),#00445BEF      ;#00445BE3: 307105 1C EF5B4400         uv 00 20  1 457      
    jmp #0044AB92 (code:crash)            ;#00445BEA: 351 A34F0000               v  00 00  1 457      
;   772                     end if
;   773 
;   774                     if not atom(args) and nxt>length(args) then
    mov ecx,[ebp-4] (args)                ;#00445BEF: 213115 FC                  uv 02 20  1 458      
    cmp ecx,h4                            ;#00445BF2: 201371 00000040            uv 00 02  1 459 02   
    jl #00445C72                          ;#00445BF8: 174 78                     v  00 00  1 459      
    cmp byte[ebx+ecx*4-1],#12             ;#00445BFA: 200174213 FF 12            u  00 0A  2 460      
    je #00445C72                          ;#00445BFF: 164 71                     v  00 00  1 461      
    mov esi,[ebx+ecx*4-12]                ;#00445C01: 213164213 F4               uv 40 0A  1 462      
    mov edi,[ebp-20] (nxt)                ;#00445C05: 213175 EC                  vu 80 20  1 462      
    cmp edi,esi                           ;#00445C08: 071367                     uv 00 C0  1 463      
    jle #00445C72                         ;#00445C0A: 176 66                     v  00 00  1 463      
;   775 ----/**/                    #ilASM{
;   776 ----!/**/                   [32]
;   777 ----/**/                            mov al,70                           -- Phix
;   778 ----!/**/                       xor edi,edi         -- ep1 unused   -- Phix
;   779 ----!/**/                       xor esi,esi         -- ep2 unused   -- Phix
;   780 ----!/**/                   [64]
;   781 ----!/**/                       call :%pRTErn }     -- fatal error  -- Phix
;   782 ----/**/                            mov ecx,2                           -- Phix
;   783 ----/**/                            jmp :!fatalN                        -- Phix
;   784 ----/**/                            int3 }                              -- Phix
;   785 ----/**/                                                    --/*    -- Phix
;   786 --                      puts(1,"insufficient values for sprintf\n") -- RDS
;   787 --                      if getc(0) then end if                      -- RDS
;   788 --                      abort(1)                                    -- RDS --*/
;   789                         crash("insufficient values for [s]printf",{},3)
    lea eax,[ebp-116] (symtab[674])       ;#00445C0C: 215105 8C                  uv 01 20  1 464      
    mov edx,0                             ;#00445C0F: 272 00000000               vu 04 00  1 464      
    push #00445C22                        ;#00445C14: 150 225C4400               uv 00 00  1 465      
    push eax                              ;#00445C19: 120                        vu 00 01  1 465      
    mov edi,[ebp-116] (symtab[674])       ;#00445C1A: 213175 8C                  uv 80 20  1 466      
    jmp #00460143 (:%pMkSq)               ;#00445C1D: 351 21A50100               v  00 00  1 466      
    mov ecx,4                             ;#00445C22: 271 04000000               uv 02 00  1 467      
    mov edx,397                           ;#00445C27: 272 8D010000               vu 04 00  1 467      
    call #00462C02 (:%opFrame) (crash)    ;#00445C2C: 350 D1CF0100               v  00 00  1 468      
    mov eax,[#00402308]                   ;#00445C31: 241 08234000               uv 01 00  1 469      
    mov [ebp] (msg),eax                   ;#00445C36: 211105 00                  uv 00 21  1 470 01   
    add dword[ebx+eax*4-8],1              ;#00445C39: 203104203 F8 01            u  00 09  3 472    *01*
    mov edi,[ebp+20] (prevebp)            ;#00445C3E: 213175 14                  vu 80 20  1 474      
    mov eax,[edi-116]                     ;#00445C41: 213107 8C                  uv 01 80  1 477    *80*
    mov [edi-116], dword h4               ;#00445C44: 307107 8C 00000040         vu 00 80  1 477      
    cmp eax,h4                            ;#00445C4B: 075 00000040               uv 00 01  1 478      
    jne #00445C5C                         ;#00445C50: 165 0A                     v  00 00  1 478      
    mov esi,674                           ;#00445C52: 276 A2020000               uv 40 00  1 479      
    call #00462744 (:%pUnassigned)        ;#00445C57: 350 E8CA0100               v  00 00  1 479      
    mov [ebp-4] (args),eax                ;#00445C5C: 211105 FC                  uv 00 21  1 480      
    mov [ebp-8] (nFrames), dword 3        ;#00445C5F: 307105 F8 03000000         vu 00 20  1 480      
    mov [ebp+28] (retaddr),#00445C72      ;#00445C66: 307105 1C 725C4400         uv 00 20  1 481      
    jmp #0044AB92 (code:crash)            ;#00445C6D: 351 204F0000               v  00 00  1 481      
;   790                     end if
;   791                 end if
;   792                 if fidx<=4 then -- aA(0, work set), dxob (1..4)
    mov edi,4                             ;#00445C72: 277 04000000               uv 80 00  1 482      
    mov eax,[ebp-16] (fidx)               ;#00445C77: 213105 F0                  vu 01 20  1 482      
    mov esi,42                            ;#00445C7A: 276 2A000000               uv 40 00  1 483      
    mov edx,646                           ;#00445C7F: 272 86020000               vu 04 00  1 483      
    call #0045F8B0 (:%opJcc)              ;#00445C84: 350 279C0100               v  00 00  1 484      
    jg #004469C5                          ;#00445C89: 017217 360D0000            v  00 00  1 485      
;   793                     if fidx!=0 then
    mov ecx,[ebp-16] (fidx)               ;#00445C8F: 213115 F0                  uv 02 20  1 486      
    cmp ecx,0                             ;#00445C92: 203371 00                  uv 00 02  1 487 02   
    je #00445EB4                          ;#00445C95: 017204 19020000            v  00 00  1 487      
;   794                         base = bases[fidx]  --{10,16,8,2}
    mov esi,[#0040228C] (bases)           ;#00445C9B: 213065 8C224000            uv 40 00  1 488      
    cmp esi,h4                            ;#00445CA1: 201376 00000040            uv 00 40  1 489 40   
    jne #00445CB3                         ;#00445CA7: 165 0A                     v  00 00  1 489      
    mov esi,614                           ;#00445CA9: 276 66020000               uv 40 00  1 490      
    call #00462744 (:%pUnassigned)        ;#00445CAE: 350 91CA0100               v  00 00  1 490      
    mov edi,ecx                           ;#00445CB3: 211317                     uv 80 02  1 491      
    mov edx,614                           ;#00445CB5: 272 66020000               vu 04 00  1 491      
    call #004610B5 (:%pSubse1ip)          ;#00445CBA: 350 F6B30100               v  00 00  1 492      
    mov [ebp-44] (base),eax               ;#00445CBF: 211105 D4                  uv 00 21  1 493      
;   795                         o = args
    mov edi,[ebp-4] (args)                ;#00445CC2: 213175 FC                  vu 80 20  1 493      
    mov edx,[ebp-32] (o)                  ;#00445CC5: 213125 E0                  uv 04 20  1 494      
    cmp edi,h4                            ;#00445CC8: 201377 00000040            vu 00 80  1 494      
    jl #00445CD5                          ;#00445CCE: 174 05                     v  00 00  1 495      
    add dword[ebx+edi*4-8],1              ;#00445CD0: 203104273 F8 01            u  00 88  3 496      
    mov [ebp-32] (o),edi                  ;#00445CD5: 211175 E0                  vu 00 A0  1 498      
    cmp edx,h4                            ;#00445CD8: 201372 00000040            uv 00 04  1 499      
    jle #00445CEC                         ;#00445CDE: 176 0C                     v  00 00  1 499      
    sub dword[ebx+edx*4-8],1              ;#00445CE0: 203154223 F8 01            u  00 0C  3 500      
    jne #00445CEC                         ;#00445CE5: 165 05                     v  00 00  1 502      
    call #004639A8 (:%pDealloc)           ;#00445CE7: 350 BCDC0100               v  00 00  1 503      
;   796                         work = 0
    mov edx,[ebp-40] (work)               ;#00445CEC: 213125 D8                  uv 04 20  1 504      
    cmp edx,h4                            ;#00445CEF: 201372 00000040            uv 00 04  1 505 04   
    mov [ebp-40] (work),ebx               ;#00445CF5: 211135 D8                  vu 00 28  1 505      
    jle #00445D06                         ;#00445CF8: 176 0C                     v  00 00  1 506      
    sub dword[ebx+edx*4-8],1              ;#00445CFA: 203154223 F8 01            u  00 0C  3 507      
    jne #00445D06                         ;#00445CFF: 165 05                     v  00 00  1 509      
    call #004639A8 (:%pDealloc)           ;#00445D01: 350 A2DC0100               v  00 00  1 510      
;   797                         if atom(o) then
    mov ecx,[ebp-32] (o)                  ;#00445D06: 213115 E0                  uv 02 20  1 511      
    cmp ecx,h4                            ;#00445D09: 201371 00000040            uv 00 02  1 512 02   
    jl #00445D1C                          ;#00445D0F: 174 0B                     v  00 00  1 512      
    cmp byte[ebx+ecx*4-1],#12             ;#00445D11: 200174213 FF 12            u  00 0A  2 513      
    jne #00445DCD                         ;#00445D16: 017205 B1000000            v  00 00  1 514      
;   798                             if o!=nan and o!=-nan and o!=inf and o!=-inf then
    mov edi,[#00402228] (nan)             ;#00445D1C: 213075 28224000            uv 80 00  1 515      
    mov eax,ecx                           ;#00445D22: 211310                     vu 01 02  1 515      
    mov esi,522                           ;#00445D24: 276 0A020000               uv 40 00  1 516      
    mov edx,650                           ;#00445D29: 272 8A020000               vu 04 00  1 516      
    call #0045F91F (:%opJccE)             ;#00445D2E: 350 EC9B0100               v  00 00  1 517      
    je #00445EB4                          ;#00445D33: 017204 7B010000            v  00 00  1 518      
    lea edi,[ebp-112] (symtab[672])       ;#00445D39: 215175 90                  uv 80 20  1 519      
    mov ecx,[#00402228] (nan)             ;#00445D3C: 213015 28224000            vu 02 00  1 519      
    call #0045F51F (:%opUminus)           ;#00445D42: 350 D8970100               v  00 00  1 520      
    mov edi,[ebp-112] (symtab[672])       ;#00445D47: 213175 90                  uv 80 20  1 521      
    mov eax,[ebp-32] (o)                  ;#00445D4A: 213105 E0                  vu 01 20  1 521      
    mov esi,672                           ;#00445D4D: 276 A0020000               uv 40 00  1 522      
    mov edx,650                           ;#00445D52: 272 8A020000               vu 04 00  1 522      
    call #0045F91F (:%opJccE)             ;#00445D57: 350 C39B0100               v  00 00  1 523      
    je #00445EB4                          ;#00445D5C: 017204 52010000            v  00 00  1 524      
    mov edi,[#00402224] (inf)             ;#00445D62: 213075 24224000            uv 80 00  1 525      
    mov eax,[ebp-32] (o)                  ;#00445D68: 213105 E0                  vu 01 20  1 525      
    mov esi,521                           ;#00445D6B: 276 09020000               uv 40 00  1 526      
    mov edx,650                           ;#00445D70: 272 8A020000               vu 04 00  1 526      
    call #0045F91F (:%opJccE)             ;#00445D75: 350 A59B0100               v  00 00  1 527      
    je #00445EB4                          ;#00445D7A: 017204 34010000            v  00 00  1 528      
    mov esi,[#00402224] (inf)             ;#00445D80: 213065 24224000            uv 40 00  1 529      
    cmp esi,h4                            ;#00445D86: 201376 00000040            uv 00 40  1 530 40   
    jne #00445D98                         ;#00445D8C: 165 0A                     v  00 00  1 530      
    mov esi,521                           ;#00445D8E: 276 09020000               uv 40 00  1 531      
    call #00462744 (:%pUnassigned)        ;#00445D93: 350 ACC90100               v  00 00  1 531      
    lea edi,[ebp-112] (symtab[672])       ;#00445D98: 215175 90                  uv 80 20  1 532      
    mov ecx,esi                           ;#00445D9B: 211361                     vu 02 40  1 532      
    call #0045F51F (:%opUminus)           ;#00445D9D: 350 7D970100               v  00 00  1 533      
    mov edi,[ebp-112] (symtab[672])       ;#00445DA2: 213175 90                  uv 80 20  1 534      
    mov eax,[ebp-32] (o)                  ;#00445DA5: 213105 E0                  vu 01 20  1 534      
    mov esi,672                           ;#00445DA8: 276 A0020000               uv 40 00  1 535      
    mov edx,650                           ;#00445DAD: 272 8A020000               vu 04 00  1 535      
    call #0045F91F (:%opJccE)             ;#00445DB2: 350 689B0100               v  00 00  1 536      
    je #00445EB4                          ;#00445DB7: 017204 F7000000            v  00 00  1 537      
;   799                                 work = floor(o)
    lea edi,[ebp-40] (work)               ;#00445DBD: 215175 D8                  uv 80 20  1 538      
    mov eax,[ebp-32] (o)                  ;#00445DC0: 213105 E0                  vu 01 20  1 538      
    call #0045F5DE (:%opFloor)            ;#00445DC3: 350 16980100               v  00 00  1 539      
;   800                             end if
    jmp #00445EB4                         ;#00445DC8: 351 E7000000               v  00 00  1 540      
;   801                         else
;   802                             o = args[nxt]
    mov edi,[ebp-20] (nxt)                ;#00445DCD: 213175 EC                  uv 80 20  1 541      
    lea ecx,[ebp-32] (o)                  ;#00445DD0: 215115 E0                  vu 02 20  1 541      
    mov esi,[ebp-4] (args)                ;#00445DD3: 213165 FC                  uv 40 20  1 542      
    mov edx,643                           ;#00445DD6: 272 83020000               vu 04 00  1 542      
    mov al,0                              ;#00445DDB: 260 00                     uv 01 00  1 543      
    call #00460FE5 (:%pSubse1)            ;#00445DDD: 350 03B20100               v  00 00  1 543      
;   803                             if atom(o) then
    mov ecx,[ebp-32] (o)                  ;#00445DE2: 213115 E0                  uv 02 20  1 544      
    cmp ecx,h4                            ;#00445DE5: 201371 00000040            uv 00 02  1 545 02   
    jl #00445DF8                          ;#00445DEB: 174 0B                     v  00 00  1 545      
    cmp byte[ebx+ecx*4-1],#12             ;#00445DED: 200174213 FF 12            u  00 0A  2 546      
    jne #00445E9A                         ;#00445DF2: 017205 A2000000            v  00 00  1 547      
;   804                                 if o!=nan and o!=-nan and o!=inf and o!=-inf then
    mov edi,[#00402228] (nan)             ;#00445DF8: 213075 28224000            uv 80 00  1 548      
    mov eax,ecx                           ;#00445DFE: 211310                     vu 01 02  1 548      
    mov esi,522                           ;#00445E00: 276 0A020000               uv 40 00  1 549      
    mov edx,650                           ;#00445E05: 272 8A020000               vu 04 00  1 549      
    call #0045F91F (:%opJccE)             ;#00445E0A: 350 109B0100               v  00 00  1 550      
    je #00445EB4                          ;#00445E0F: 017204 9F000000            v  00 00  1 551      
    lea edi,[ebp-112] (symtab[672])       ;#00445E15: 215175 90                  uv 80 20  1 552      
    mov ecx,[#00402228] (nan)             ;#00445E18: 213015 28224000            vu 02 00  1 552      
    call #0045F51F (:%opUminus)           ;#00445E1E: 350 FC960100               v  00 00  1 553      
    mov edi,[ebp-112] (symtab[672])       ;#00445E23: 213175 90                  uv 80 20  1 554      
    mov eax,[ebp-32] (o)                  ;#00445E26: 213105 E0                  vu 01 20  1 554      
    mov esi,672                           ;#00445E29: 276 A0020000               uv 40 00  1 555      
    mov edx,650                           ;#00445E2E: 272 8A020000               vu 04 00  1 555      
    call #0045F91F (:%opJccE)             ;#00445E33: 350 E79A0100               v  00 00  1 556      
    je #00445EB4                          ;#00445E38: 164 7A                     v  00 00  1 557      
    mov edi,[#00402224] (inf)             ;#00445E3A: 213075 24224000            uv 80 00  1 558      
    mov eax,[ebp-32] (o)                  ;#00445E40: 213105 E0                  vu 01 20  1 558      
    mov esi,521                           ;#00445E43: 276 09020000               uv 40 00  1 559      
    mov edx,650                           ;#00445E48: 272 8A020000               vu 04 00  1 559      
    call #0045F91F (:%opJccE)             ;#00445E4D: 350 CD9A0100               v  00 00  1 560      
    je #00445EB4                          ;#00445E52: 164 60                     v  00 00  1 561      
    mov esi,[#00402224] (inf)             ;#00445E54: 213065 24224000            uv 40 00  1 562      
    cmp esi,h4                            ;#00445E5A: 201376 00000040            uv 00 40  1 563 40   
    jne #00445E6C                         ;#00445E60: 165 0A                     v  00 00  1 563      
    mov esi,521                           ;#00445E62: 276 09020000               uv 40 00  1 564      
    call #00462744 (:%pUnassigned)        ;#00445E67: 350 D8C80100               v  00 00  1 564      
    lea edi,[ebp-112] (symtab[672])       ;#00445E6C: 215175 90                  uv 80 20  1 565      
    mov ecx,esi                           ;#00445E6F: 211361                     vu 02 40  1 565      
    call #0045F51F (:%opUminus)           ;#00445E71: 350 A9960100               v  00 00  1 566      
    mov edi,[ebp-112] (symtab[672])       ;#00445E76: 213175 90                  uv 80 20  1 567      
    mov eax,[ebp-32] (o)                  ;#00445E79: 213105 E0                  vu 01 20  1 567      
    mov esi,672                           ;#00445E7C: 276 A0020000               uv 40 00  1 568      
    mov edx,650                           ;#00445E81: 272 8A020000               vu 04 00  1 568      
    call #0045F91F (:%opJccE)             ;#00445E86: 350 949A0100               v  00 00  1 569      
    je #00445EB4                          ;#00445E8B: 164 27                     v  00 00  1 570      
;   805                                     work = floor(o)
    lea edi,[ebp-40] (work)               ;#00445E8D: 215175 D8                  uv 80 20  1 571      
    mov eax,[ebp-32] (o)                  ;#00445E90: 213105 E0                  vu 01 20  1 571      
    call #0045F5DE (:%opFloor)            ;#00445E93: 350 46970100               v  00 00  1 572      
;   806                                 end if
    jmp #00445EB4                         ;#00445E98: 353 1A                     v  00 00  1 573      
;   807                             else
;   808                                 o = 0
    mov edx,[ebp-32] (o)                  ;#00445E9A: 213125 E0                  uv 04 20  1 574      
    cmp edx,h4                            ;#00445E9D: 201372 00000040            uv 00 04  1 575 04   
    mov [ebp-32] (o),ebx                  ;#00445EA3: 211135 E0                  vu 00 28  1 575      
    jle #00445EB4                         ;#00445EA6: 176 0C                     v  00 00  1 576      
    sub dword[ebx+edx*4-8],1              ;#00445EA8: 203154223 F8 01            u  00 0C  3 577      
    jne #00445EB4                         ;#00445EAD: 165 05                     v  00 00  1 579      
    call #004639A8 (:%pDealloc)           ;#00445EAF: 350 F4DA0100               v  00 00  1 580      
;   809                             end if
;   810                         end if
;   811                     end if
;   812                     if work then
    mov eax,[ebp-40] (work)               ;#00445EB4: 213105 D8                  uv 01 20  1 581      
    mov edx,652                           ;#00445EB7: 272 8C020000               vu 04 00  1 581      
    call #0045F94C (:%opJif)              ;#00445EBC: 350 8B9A0100               v  00 00  1 582      
    je #004467DD                          ;#00445EC1: 017204 16090000            v  00 00  1 583      
;   813                         sgn = 0
    mov [ebp-48] (sgn),ebx                ;#00445EC7: 211135 D0                  uv 00 28  1 584      
;   814                         if work<0 then
    xor edi,edi                           ;#00445ECA: 061377                     vu 80 80  1 584      
    mov esi,25                            ;#00445ECC: 276 19000000               uv 40 00  1 585      
    mov edx,652                           ;#00445ED1: 272 8C020000               vu 04 00  1 585      
    call #0045F8B0 (:%opJcc)              ;#00445ED6: 350 D5990100               v  00 00  1 586      
    jge #00445F30                         ;#00445EDB: 175 53                     v  00 00  1 587      
;   815                             sgn = 1
    mov [ebp-48] (sgn), dword 1           ;#00445EDD: 307105 D0 01000000         uv 00 20  1 588      
;   816                             if base=10 then
    mov edi,10                            ;#00445EE4: 277 0A000000               vu 80 00  1 588      
    mov eax,[ebp-44] (base)               ;#00445EE9: 213105 D4                  uv 01 20  1 589      
    mov esi,55                            ;#00445EEC: 276 37000000               vu 40 00  1 589      
    mov edx,653                           ;#00445EF1: 272 8D020000               uv 04 00  1 590      
    call #0045F91F (:%opJccE)             ;#00445EF6: 350 249A0100               v  00 00  1 590      
    jne #00445F10                         ;#00445EFB: 165 13                     v  00 00  1 591      
;   817                                 work = 0-work
    lea edi,[ebp-40] (work)               ;#00445EFD: 215175 D8                  uv 80 20  1 592      
    mov ecx,[#00402018]                   ;#00445F00: 213015 18204000            vu 02 00  1 592      
    mov eax,[ebp-40] (work)               ;#00445F06: 213105 D8                  uv 01 20  1 593      
    call #0045F299 (:%opSub)              ;#00445F09: 350 8B930100               v  00 00  1 593      
    jmp #00445F30                         ;#00445F0E: 353 20                     v  00 00  1 594      
;   818                             else
;   819 --DEV (found this(/64-bit version) commented out 23/7/19, no idea why... putting it back fixed my issue)
;   820 if machine_bits()=64 then
;   821                                 work = and_bits(work,#7FFFFFFFFFFFFFFF)+#8000000000000000
;   822 else
;   823                                 work = and_bits(work,#7FFFFFFF)+#80000000
    lea edi,[ebp-112] (symtab[672])       ;#00445F10: 215175 90                  uv 80 20  1 595      
    mov ecx,[ebp-40] (work)               ;#00445F13: 213115 D8                  vu 02 20  1 595      
    mov eax,[#0040230C]                   ;#00445F16: 241 0C234000               uv 01 00  1 596      
    call #0045F45E (:%opAndBits)          ;#00445F1B: 350 3E950100               v  00 00  1 596      
    lea edi,[ebp-40] (work)               ;#00445F20: 215175 D8                  uv 80 20  1 597      
    mov ecx,[ebp-112] (symtab[672])       ;#00445F23: 213115 90                  vu 02 20  1 597      
    mov eax,[#00402310]                   ;#00445F26: 241 10234000               uv 01 00  1 598      
    call #0045F261 (:%opAdd)              ;#00445F2B: 350 31930100               v  00 00  1 598      
;   824 end if
;   825                             end if
;   826                         end if
;   827 --                      r1 = ""
;   828                         r1 = repeat(' ',0)
    mov ecx,6                             ;#00445F30: 271 06000000               uv 02 00  1 599      
    mov edx,206                           ;#00445F35: 272 CE000000               vu 04 00  1 599      
    call :%opFrame (repeatch)             ;#00445F3A: 350 C3CC0100               v  00 00  1 600      
    mov [ebp] (ch), dword 32              ;#00445F3F: 307105 00 20000000         uv 00 20  1 601      
    mov [ebp-4] (n),ebx                   ;#00445F46: 211135 FC                  vu 00 28  1 601      
    mov [ebp+28] (retaddr),#00445F55      ;#00445F49: 307105 1C 555F4400         uv 00 20  1 602      
    jmp #0045581E (code:repeatch)         ;#00445F50: 351 C9F80000               v  00 00  1 602      
    push eax                              ;#00445F55: 120                        uv 00 01  1 603      
    mov esi,[ebp-28] (r1)                 ;#00445F56: 213165 E4                  vu 40 20  1 603      
    cmp esi,h4                            ;#00445F59: 201376 00000040            uv 00 40  1 604      
    jle #00445F6F                         ;#00445F5F: 176 0E                     v  00 00  1 604      
    sub dword[ebx+esi*4-8],1              ;#00445F61: 203154263 F8 01            u  00 48  3 605      
    jne #00445F6F                         ;#00445F66: 165 07                     v  00 00  1 607      
    mov edx,esi                           ;#00445F68: 213326                     uv 04 40  1 608      
    call #004639A8 (:%pDealloc)           ;#00445F6A: 350 39DA0100               v  00 00  1 608      
    pop dword[ebp-28] (r1)                ;#00445F6F: 217105 E4                  np 00 20  3 609      
;   829 --1/11/22: (print powers of 2 exactly, by avoiding discrepancies that creep in for /10 when work>2^75, but don't for /2)
;   830                         bool bViaBase2 = (base=10 and 
    mov edi,10                            ;#00445F72: 277 0A000000               uv 80 00  1 612      
    mov eax,[ebp-44] (base)               ;#00445F77: 213105 D4                  vu 01 20  1 612      
    mov esi,55                            ;#00445F7A: 276 37000000               uv 40 00  1 613      
    mov edx,653                           ;#00445F7F: 272 8D020000               vu 04 00  1 613      
    call #0045F91F (:%opJccE)             ;#00445F84: 350 96990100               v  00 00  1 614      
    jne #00445FBF                         ;#00445F89: 165 34                     v  00 00  1 615      
;   831 --1/5/24 (grains tests, on 32 bit)
;   832 --                                        work>37778931862957161709568 and -- (power(2,75), btw)
;   833 --                                        count_bits(work)=1)
;   834                                           work>=power(2,iff(machine_bits()=32?53:75)))
    mov [symtab[701]], dword 53           ;#00445F8B: 307205 70FFFFFF 35000000   uv 00 20  1 616      
    mov ecx,[ebp-144] (symtab[701])       ;#00445F95: 213215 70FFFFFF            vu 02 20  1 616      
    mov eax,2                             ;#00445F9B: 270 02000000               uv 01 00  1 617      
    lea edi,[ebp-112] (symtab[672])       ;#00445FA0: 215175 90                  vu 80 20  1 617      
    call #00463BFA (:%opPow)              ;#00445FA3: 350 52DC0100               v  00 00  1 618      
    mov edi,[ebp-112] (symtab[672])       ;#00445FA8: 213175 90                  uv 80 20  1 619      
    mov eax,[ebp-40] (work)               ;#00445FAB: 213105 D8                  vu 01 20  1 619      
    mov esi,672                           ;#00445FAE: 276 A0020000               uv 40 00  1 620      
    mov edx,652                           ;#00445FB3: 272 8C020000               vu 04 00  1 620      
    call #0045F8B0 (:%opJcc)              ;#00445FB8: 350 F3980100               v  00 00  1 621      
    jge #00445FC4                         ;#00445FBD: 175 05                     v  00 00  1 622      
    mov [ebp-104] (symtab[668]),ebx       ;#00445FBF: 211135 98                  uv 00 28  1 623      
    jmp #00445FCB                         ;#00445FC2: 353 07                     v  00 00  1 623      
    mov [ebp-104] (symtab[668]), dword 1  ;#00445FC4: 307105 98 01000000         uv 00 20  1 624      
    mov esi,[ebp-104] (symtab[668])       ;#00445FCB: 213165 98                  vu 40 20  1 624      
    mov [ebp-140] (bViaBase2),esi         ;#00445FCE: 211265 74FFFFFF            uv 00 60  1 625      
;   835                         if bViaBase2 then base = 2 end if
    test esi,esi                          ;#00445FD4: 205366                     vu 00 40  1 625      
    je #00445FDF                          ;#00445FD6: 164 07                     v  00 00  1 626      
    mov [ebp-44] (base), dword 2          ;#00445FD8: 307105 D4 02000000         uv 00 20  1 627      
;   836                         while work do
    mov ecx,[ebp-40] (work)               ;#00445FDF: 213115 D8                  vu 02 20  1 627      
    test ecx,ecx                          ;#00445FE2: 205311                     uv 00 02  1 628      
    je #00446117                          ;#00445FE4: 017204 2D010000            v  00 00  1 628      
;   837                             -- NB: The result of prepend is always a sequence, 
;   838                             --      for performance reasons. Hence use append 
;   839                             --      to build it backwards, then reverse it.
;   840                             hc = floor(remainder(work,base)+1)
    lea edi,[ebp-112] (symtab[672])       ;#00445FEA: 215175 90                  uv 80 20  1 629      
    mov eax,ecx                           ;#00445FED: 211310                     vu 01 02  1 629      
    mov ecx,[ebp-44] (base)               ;#00445FEF: 213115 D4                  uv 02 20  1 630      
    call #0045EF61 (:%opRmdr)             ;#00445FF2: 350 6A8F0100               v  00 00  1 630      
    lea edi,[ebp-120] (symtab[675])       ;#00445FF7: 215175 88                  uv 80 20  1 631      
    mov ecx,[ebp-112] (symtab[672])       ;#00445FFA: 213115 90                  vu 02 20  1 631      
    mov eax,[#0040201C]                   ;#00445FFD: 241 1C204000               uv 01 00  1 632      
    call #0045F261 (:%opAdd)              ;#00446002: 350 5A920100               v  00 00  1 632      
    lea edi,[ebp-56] (hc)                 ;#00446007: 215175 C8                  uv 80 20  1 633      
    mov eax,[ebp-120] (symtab[675])       ;#0044600A: 213105 88                  vu 01 20  1 633      
    call #0045F5DE (:%opFloor)            ;#0044600D: 350 CC950100               v  00 00  1 634      
    cmp eax,h4                            ;#00446012: 075 00000040               uv 00 01  1 635      
    jl #00446023                          ;#00446017: 174 0A                     v  00 00  1 635      
    mov ecx,656                           ;#00446019: 271 90020000               uv 02 00  1 636      
    call #00462D8D (:%opTcFail)           ;#0044601E: 350 6ACD0100               v  00 00  1 636      
;   841 --20/3/2013:
;   842 --                          if hc=0 then exit end if
;   843                             if lowerHex and hc>10 then
    mov edi,[ebp-60] (lowerHex)           ;#00446023: 213175 C4                  uv 80 20  1 637      
    test edi,edi                          ;#00446026: 205377                     uv 00 80  1 638 80   
    je #00446043                          ;#00446028: 164 19                     v  00 00  1 638      
    cmp eax,10                            ;#0044602A: 203370 0A                  uv 00 01  1 639      
    jle #00446043                         ;#0044602D: 176 14                     v  00 00  1 639      
;   844 --                              hc += 6
;   845                                 hc += 26
    add eax,26                            ;#0044602F: 203300 1A                  uv 01 01  1 640      
    mov edx,eax                           ;#00446032: 213320                     uv 04 01  1 641 01   
    mov [ebp-56] (hc),eax                 ;#00446034: 211105 C8                  vu 00 21  1 641      
    shl edx,1                             ;#00446037: 321342                     u  04 04  1 642      
    jno #00446043                         ;#00446039: 161 08                     v  00 00  1 642      
    lea edi,[ebp-56] (hc)                 ;#0044603B: 215175 C8                  uv 80 20  1 643      
    call #00462764 (:%e01tcfAddiii)       ;#0044603E: 350 21C70100               v  00 00  1 643      
;   846                             end if
;   847                             if not bViaBase2 
    mov esi,[ebp-140] (bViaBase2)         ;#00446043: 213265 74FFFFFF            uv 40 20  1 644      
    test esi,esi                          ;#00446049: 205366                     uv 00 40  1 645 40   
    jne #004460A4                         ;#0044604B: 165 57                     v  00 00  1 645      
;   848                             and showcommas 
    mov ecx,[ebp-80] (showcommas)         ;#0044604D: 213115 B0                  uv 02 20  1 646      
    test ecx,ecx                          ;#00446050: 205311                     uv 00 02  1 647 02   
    je #004460A4                          ;#00446052: 164 50                     v  00 00  1 647      
;   849                             and showcommas=length(r1) then
    mov edi,[ebp-28] (r1)                 ;#00446054: 213175 E4                  uv 80 20  1 648      
    mov eax,[ebx+edi*4-12]                ;#00446057: 213104273 F4               uv 01 88  1 651 80 *80*
    cmp ecx,eax                           ;#0044605B: 071301                     uv 00 03  1 652 01   
    jne #004460A4                         ;#0044605D: 165 45                     v  00 00  1 652      
;   850                                 r1 = append(r1,',')
    lea edx,[ebp-28] (r1)                 ;#0044605F: 215125 E4                  uv 04 20  1 653      
    lea edi,[ebp-28] (r1)                 ;#00446062: 215175 E4                  vu 80 20  1 653      
    mov ecx,#004022D4                     ;#00446065: 271 D4224000               uv 02 00  1 654      
    xor eax,eax                           ;#0044606A: 061300                     vu 01 01  1 654      
    call #0045F9F7 (:%opApnd)             ;#0044606C: 350 86990100               v  00 00  1 655      
    mov esi,[ebp-28] (r1)                 ;#00446071: 213165 E4                  uv 40 20  1 656      
    cmp esi,h4                            ;#00446074: 201376 00000040            uv 00 40  1 657 40   
    jl #00446083                          ;#0044607A: 174 07                     v  00 00  1 657      
    cmp byte[ebx+esi*4-1],#82             ;#0044607C: 200174263 FF 82            u  00 48  2 658      
    je #0044608D                          ;#00446081: 164 0A                     v  00 00  1 659      
    mov ecx,649                           ;#00446083: 271 89020000               uv 02 00  1 660      
    call #00462D8D (:%opTcFail)           ;#00446088: 350 00CD0100               v  00 00  1 660      
;   851                                 showcommas += 4
    mov edi,[ebp-80] (showcommas)         ;#0044608D: 213175 B0                  uv 80 20  1 661      
    add edi,4                             ;#00446090: 203307 04                  uv 80 80  1 662 80   
    mov edx,edi                           ;#00446093: 213327                     uv 04 80  1 663 80   
    mov [ebp-80] (showcommas),edi         ;#00446095: 211175 B0                  vu 00 A0  1 663      
    shl edx,1                             ;#00446098: 321342                     u  04 04  1 664      
    jno #004460A4                         ;#0044609A: 161 08                     v  00 00  1 664      
    lea edi,[ebp-80] (showcommas)         ;#0044609C: 215175 B0                  uv 80 20  1 665      
    call #00462764 (:%e01tcfAddiii)       ;#0044609F: 350 C0C60100               v  00 00  1 665      
;   852                             end if
;   853                             r1 = append(r1,hexchar[hc])
    mov eax,[#00402284] (hexchar)         ;#004460A4: 241 84224000               uv 01 00  1 666      
    cmp eax,h4                            ;#004460A9: 075 00000040               uv 00 01  1 667 01   
    jne #004460BA                         ;#004460AE: 165 0A                     v  00 00  1 667      
    mov esi,612                           ;#004460B0: 276 64020000               uv 40 00  1 668      
    call #00462744 (:%pUnassigned)        ;#004460B5: 350 8AC60100               v  00 00  1 668      
    mov edi,[ebp-56] (hc)                 ;#004460BA: 213175 C8                  uv 80 20  1 669      
    mov esi,eax                           ;#004460BD: 211306                     vu 40 01  1 669      
    mov edx,612                           ;#004460BF: 272 64020000               uv 04 00  1 670      
    call #004610CE (:%pSubse1is)          ;#004460C4: 350 05B00100               v  00 00  1 670      
    mov [ebp-148] (symtab[704]),eax       ;#004460C9: 211205 6CFFFFFF            uv 00 21  1 671      
    lea edx,[ebp-28] (r1)                 ;#004460CF: 215125 E4                  vu 04 20  1 671      
    lea edi,[ebp-28] (r1)                 ;#004460D2: 215175 E4                  uv 80 20  1 672      
    lea ecx,[ebp-148] (symtab[704])       ;#004460D5: 215215 6CFFFFFF            vu 02 20  1 672      
    xor eax,eax                           ;#004460DB: 061300                     uv 01 01  1 673      
    call #0045F9F7 (:%opApnd)             ;#004460DD: 350 15990100               v  00 00  1 673      
    mov [ebp-148] (symtab[704]),ebx       ;#004460E2: 211235 6CFFFFFF            uv 00 28  1 674      
    mov ecx,[ebp-28] (r1)                 ;#004460E8: 213115 E4                  vu 02 20  1 674      
    cmp ecx,h4                            ;#004460EB: 201371 00000040            uv 00 02  1 675      
    jl #004460FA                          ;#004460F1: 174 07                     v  00 00  1 675      
    cmp byte[ebx+ecx*4-1],#82             ;#004460F3: 200174213 FF 82            u  00 0A  2 676      
    je #00446104                          ;#004460F8: 164 0A                     v  00 00  1 677      
    mov ecx,649                           ;#004460FA: 271 89020000               uv 02 00  1 678      
    call #00462D8D (:%opTcFail)           ;#004460FF: 350 89CC0100               v  00 00  1 678      
;   854                             -- this is ok, ^ , hexchar[] is equally valid for 
;   855                             --  base 16/10/8/2 (just less chars get used).
;   856                             work = floor(work/base)
    lea edi,[ebp-40] (work)               ;#00446104: 215175 D8                  uv 80 20  1 679      
    mov ecx,[ebp-40] (work)               ;#00446107: 213115 D8                  vu 02 20  1 679      
    mov eax,[ebp-44] (base)               ;#0044610A: 213105 D4                  uv 01 20  1 680      
    call #0045F39A (:%opDivf)             ;#0044610D: 350 88920100               v  00 00  1 680      
;   857                         end while
    jmp #00445FDF                         ;#00446112: 351 C8FEFFFF               v  00 00  1 681      
;   858                         if bViaBase2 then
    mov esi,[ebp-140] (bViaBase2)         ;#00446117: 213265 74FFFFFF            uv 40 20  1 682      
    test esi,esi                          ;#0044611D: 205366                     uv 00 40  1 683 40   
    je #0044646F                          ;#0044611F: 017204 4A030000            v  00 00  1 683      
;   859                             -- convert r1 to base 10, from base 2
;   860                             sequence d2 = sq_sub(reverse(r1),'0')
    mov ecx,8                             ;#00446125: 271 08000000               uv 02 00  1 684      
    mov edx,242                           ;#0044612A: 272 F2000000               vu 04 00  1 684      
    call #00462C02 (:%opFrame) (reverse)  ;#0044612F: 350 CECA0100               v  00 00  1 685      
    mov edi,[ebp+20] (prevebp)            ;#00446134: 213175 14                  uv 80 20  1 686      
    mov eax,[edi-28]                      ;#00446137: 213107 E4                  uv 01 80  1 689 80 *80*
    xor ebx,ebx                           ;#0044613A: 061333                     vu 08 08  1 689      
    cmp eax,h4                            ;#0044613C: 075 00000040               uv 00 01  1 690      
    jl #0044614D                          ;#00446141: 174 0A                     v  00 00  1 690      
    add dword[ebx+eax*4-8],1              ;#00446143: 203104203 F8 01            u  00 09  3 691      
    cmp eax,649                           ;#00446148: 075 89020000               vu 00 01  1 693      
    mov [ebp] (s),eax                     ;#0044614D: 211105 00                  uv 00 21  1 694      
    mov [ebp+28] (retaddr),#0044615C      ;#00446150: 307105 1C 5C614400         vu 00 20  1 694      
    jmp #00450FB8 (code:reverse)          ;#00446157: 351 5CAE0000               v  00 00  1 695      
    push eax                              ;#0044615C: 120                        uv 00 01  1 696      
    mov edi,[ebp-124] (symtab[676])       ;#0044615D: 213175 84                  vu 80 20  1 696      
    cmp edi,h4                            ;#00446160: 201377 00000040            uv 00 80  1 697      
    jle #00446176                         ;#00446166: 176 0E                     v  00 00  1 697      
    sub dword[ebx+edi*4-8],1              ;#00446168: 203154273 F8 01            u  00 88  3 698      
    jne #00446176                         ;#0044616D: 165 07                     v  00 00  1 700      
    mov edx,edi                           ;#0044616F: 213327                     uv 04 80  1 701      
    call #004639A8 (:%pDealloc)           ;#00446171: 350 32D80100               v  00 00  1 701      
    pop dword[ebp-124] (symtab[676])      ;#00446176: 217105 84                  np 00 20  3 702      
    mov ecx,2                             ;#00446179: 271 02000000               uv 02 00  1 705      
    mov edx,310                           ;#0044617E: 272 36010000               vu 04 00  1 705      
    call #00462C02 (:%opFrame) (sq_sub)   ;#00446183: 350 7ACA0100               v  00 00  1 706      
    mov edi,[ebp+20] (prevebp)            ;#00446188: 213175 14                  uv 80 20  1 707      
    mov eax,[edi-124]                     ;#0044618B: 213107 84                  uv 01 80  1 710 80 *80*
    mov [edi-124], dword h4               ;#0044618E: 307107 84 00000040         vu 00 80  1 710      
    cmp eax,h4                            ;#00446195: 075 00000040               uv 00 01  1 711      
    jne #004461A6                         ;#0044619A: 165 0A                     v  00 00  1 711      
    mov esi,676                           ;#0044619C: 276 A4020000               uv 40 00  1 712      
    call #00462744 (:%pUnassigned)        ;#004461A1: 350 9EC50100               v  00 00  1 712      
    mov [ebp] (a),eax                     ;#004461A6: 211105 00                  uv 00 21  1 713      
    mov [ebp-4] (b), dword 48             ;#004461A9: 307105 FC 30000000         vu 00 20  1 713      
    mov [ebp+28] (retaddr),#004461BC      ;#004461B0: 307105 1C BC614400         uv 00 20  1 714      
    jmp #0044E6C2 (code:sq_sub)           ;#004461B7: 351 06850000               v  00 00  1 714      
    push eax                              ;#004461BC: 120                        uv 00 01  1 715      
    mov ecx,[ebp-152] (d2)                ;#004461BD: 213215 68FFFFFF            vu 02 20  1 715      
    cmp ecx,h4                            ;#004461C3: 201371 00000040            uv 00 02  1 716      
    jle #004461D9                         ;#004461C9: 176 0E                     v  00 00  1 716      
    sub dword[ebx+ecx*4-8],1              ;#004461CB: 203154213 F8 01            u  00 0A  3 717      
    jne #004461D9                         ;#004461D0: 165 07                     v  00 00  1 719      
    mov edx,ecx                           ;#004461D2: 213321                     uv 04 02  1 720      
    call #004639A8 (:%pDealloc)           ;#004461D4: 350 CFD70100               v  00 00  1 720      
    pop dword[ebp-152] (d2)               ;#004461D9: 217205 68FFFFFF            np 00 20  3 721      
    mov esi,[ebp-152] (d2)                ;#004461DF: 213265 68FFFFFF            uv 40 20  1 724      
    cmp esi,h4                            ;#004461E5: 201376 00000040            uv 00 40  1 725 40   
    jl #004461F4                          ;#004461EB: 174 07                     v  00 00  1 725      
    test byte[ebx+esi*4-1],#80            ;#004461ED: 366104263 FF 80            u  00 48  2 726      
    jne #004461FE                         ;#004461F2: 165 0A                     v  00 00  1 727      
    mov ecx,705                           ;#004461F4: 271 C1020000               uv 02 00  1 728      
    call #00462D8D (:%opTcFail)           ;#004461F9: 350 8FCB0100               v  00 00  1 728      
;   861                             r1 = ""
    mov edi,[#004022A4]                   ;#004461FE: 213075 A4224000            uv 80 00  1 729      
    mov edx,[ebp-28] (r1)                 ;#00446204: 213125 E4                  vu 04 20  1 729      
    cmp edi,h4                            ;#00446207: 201377 00000040            uv 00 80  1 730      
    jl #00446214                          ;#0044620D: 174 05                     v  00 00  1 730      
    add dword[ebx+edi*4-8],1              ;#0044620F: 203104273 F8 01            u  00 88  3 731      
    mov [ebp-28] (r1),edi                 ;#00446214: 211175 E4                  vu 00 A0  1 733      
    cmp edx,h4                            ;#00446217: 201372 00000040            uv 00 04  1 734      
    jle #0044622B                         ;#0044621D: 176 0C                     v  00 00  1 734      
    sub dword[ebx+edx*4-8],1              ;#0044621F: 203154223 F8 01            u  00 0C  3 735      
    jne #0044622B                         ;#00446224: 165 05                     v  00 00  1 737      
    call #004639A8 (:%pDealloc)           ;#00446226: 350 7DD70100               v  00 00  1 738      
;   862                             while length(d2) do
    mov eax,[ebp-152] (d2)                ;#0044622B: 213205 68FFFFFF            uv 01 20  1 739      
    mov ecx,[ebx+eax*4-12]                ;#00446231: 213114203 F4               uv 02 09  1 742 01 *01*
    test ecx,ecx                          ;#00446235: 205311                     uv 00 02  1 743 02   
    je #00446468                          ;#00446237: 017204 2B020000            v  00 00  1 743      
;   863                                 integer d2r = 0
    mov [ebp-156] (d2r),ebx               ;#0044623D: 211235 64FFFFFF            uv 00 28  1 744      
;   864                                 for d2i,d2digit in d2 do
    mov esi,[ebx+eax*4-12]                ;#00446243: 213164203 F4               vu 40 09  1 744      
    mov [ebp-148] (symtab[704]),esi       ;#00446247: 211265 6CFFFFFF            uv 00 60  1 745      
    mov [ebp-160] (d2i), dword 1          ;#0044624D: 307205 60FFFFFF 01000000   vu 00 20  1 745      
    cmp esi,1                             ;#00446257: 201376 01000000            uv 00 40  1 746      
    jl #0044632D                          ;#0044625D: 017214 CA000000            v  00 00  1 746      
    mov edi,[ebp-160] (d2i)               ;#00446263: 213275 60FFFFFF            uv 80 20  1 747      
    lea ecx,[ebp-164] (d2digit)           ;#00446269: 215215 5CFFFFFF            vu 02 20  1 747      
    mov esi,[ebp-152] (d2)                ;#0044626F: 213265 68FFFFFF            uv 40 20  1 748      
    mov edx,705                           ;#00446275: 272 C1020000               vu 04 00  1 748      
    mov al,0                              ;#0044627A: 260 00                     uv 01 00  1 749      
    call #00460FE5 (:%pSubse1)            ;#0044627C: 350 64AD0100               v  00 00  1 749      
;   865                                     d2r = d2r*2+d2digit
    lea edi,[ebp-120] (symtab[675])       ;#00446281: 215175 88                  uv 80 20  1 750      
    mov ecx,[ebp-156] (d2r)               ;#00446284: 213215 64FFFFFF            vu 02 20  1 750      
    mov eax,[DLL_THREAD_ATTACH]           ;#0044628A: 241 40204000               uv 01 00  1 751      
    call #0045F412 (:%opMul)              ;#0044628F: 350 7E910100               v  00 00  1 751      
    lea edi,[ebp-156] (d2r)               ;#00446294: 215275 64FFFFFF            uv 80 20  1 752      
    mov ecx,[ebp-120] (symtab[675])       ;#0044629A: 213115 88                  vu 02 20  1 752      
    mov eax,[ebp-164] (d2digit)           ;#0044629D: 213205 5CFFFFFF            uv 01 20  1 753      
    call #0045F27A (:%opAddi)             ;#004462A3: 350 D28F0100               v  00 00  1 753      
;   866                                     d2[d2i] = floor(d2r/10)
    lea edi,[ebp-168] (symtab[709])       ;#004462A8: 215275 58FFFFFF            uv 80 20  1 754      
    mov ecx,[ebp-156] (d2r)               ;#004462AE: 213215 64FFFFFF            vu 02 20  1 754      
    mov eax,[#00402090] (BRIGHT_GREEN)    ;#004462B4: 241 90204000               uv 01 00  1 755      
    call #0045F39A (:%opDivf)             ;#004462B9: 350 DC900100               v  00 00  1 755      
    mov edi,[ebp-160] (d2i)               ;#004462BE: 213275 60FFFFFF            uv 80 20  1 756      
    mov ecx,[ebp-168] (symtab[709])       ;#004462C4: 213215 58FFFFFF            vu 02 20  1 756      
    mov esi,[ebp-152] (d2)                ;#004462CA: 213265 68FFFFFF            uv 40 20  1 757      
    lea eax,[ebp-152] (d2)                ;#004462D0: 215205 68FFFFFF            vu 01 20  1 757      
    call #004607F3 (:%pRepe1)             ;#004462D6: 350 18A50100               v  00 00  1 758      
    mov [ebp-168] (symtab[709]),ebx       ;#004462DB: 211235 58FFFFFF            uv 00 28  1 759      
;   867                                     d2r = rmdr(d2r,10)
    lea edi,[ebp-156] (d2r)               ;#004462E1: 215275 64FFFFFF            vu 80 20  1 759      
    mov eax,[ebp-156] (d2r)               ;#004462E7: 213205 64FFFFFF            uv 01 20  1 760      
    mov ecx,[#00402090] (BRIGHT_GREEN)    ;#004462ED: 213015 90204000            vu 02 00  1 760      
    call #0045EF61 (:%opRmdr)             ;#004462F3: 350 698C0100               v  00 00  1 761      
    mov edi,[ebp-156] (d2r)               ;#004462F8: 213275 64FFFFFF            uv 80 20  1 762      
    cmp edi,h4                            ;#004462FE: 201377 00000040            uv 00 80  1 763 80   
    jl #00446310                          ;#00446304: 174 0A                     v  00 00  1 763      
    mov ecx,706                           ;#00446306: 271 C2020000               uv 02 00  1 764      
    call #00462D8D (:%opTcFail)           ;#0044630B: 350 7DCA0100               v  00 00  1 764      
;   868                                 end for
    mov esi,[ebp-160] (d2i)               ;#00446310: 213265 60FFFFFF            uv 40 20  1 765      
    mov eax,[ebp-148] (symtab[704])       ;#00446316: 213205 6CFFFFFF            vu 01 20  1 765      
    add esi,1                             ;#0044631C: 203306 01                  uv 40 40  1 766      
    cmp esi,eax                           ;#0044631F: 073360                     uv 00 41  1 767 40   
    mov [ebp-160] (d2i),esi               ;#00446321: 211265 60FFFFFF            vu 00 60  1 767      
    jle #00446263                         ;#00446327: 017216 36FFFFFF            v  00 00  1 768      
;   869                                 r1 &= d2r+'0'
    lea edi,[ebp-120] (symtab[675])       ;#0044632D: 215175 88                  uv 80 20  1 769      
    mov ecx,[ebp-156] (d2r)               ;#00446330: 213215 64FFFFFF            vu 02 20  1 769      
    mov eax,[MB_ICONEXCLAMATION]          ;#00446336: 241 D8204000               uv 01 00  1 770      
    call #0045F261 (:%opAdd)              ;#0044633B: 350 218F0100               v  00 00  1 770      
    lea edx,[ebp-28] (r1)                 ;#00446340: 215125 E4                  uv 04 20  1 771      
    lea edi,[ebp-28] (r1)                 ;#00446343: 215175 E4                  vu 80 20  1 771      
    lea ecx,[ebp-120] (symtab[675])       ;#00446346: 215115 88                  uv 02 20  1 772      
    xor eax,eax                           ;#00446349: 061300                     vu 01 01  1 772      
    call #0045F9F7 (:%opApnd)             ;#0044634B: 350 A7960100               v  00 00  1 773      
    mov edi,[ebp-28] (r1)                 ;#00446350: 213175 E4                  uv 80 20  1 774      
    cmp edi,h4                            ;#00446353: 201377 00000040            uv 00 80  1 775 80   
    jl #00446362                          ;#00446359: 174 07                     v  00 00  1 775      
    cmp byte[ebx+edi*4-1],#82             ;#0044635B: 200174273 FF 82            u  00 88  2 776      
    je #0044636C                          ;#00446360: 164 0A                     v  00 00  1 777      
    mov ecx,649                           ;#00446362: 271 89020000               uv 02 00  1 778      
    call #00462D8D (:%opTcFail)           ;#00446367: 350 21CA0100               v  00 00  1 778      
;   870                                 if showcommas and showcommas=length(r1) then
    mov esi,[ebp-80] (showcommas)         ;#0044636C: 213165 B0                  uv 40 20  1 779      
    test esi,esi                          ;#0044636F: 205366                     uv 00 40  1 780 40   
    je #004463D8                          ;#00446371: 164 65                     v  00 00  1 780      
    lea edi,[ebp-168] (symtab[709])       ;#00446373: 215275 58FFFFFF            uv 80 20  1 781      
    mov esi,[ebp-28] (r1)                 ;#00446379: 213165 E4                  vu 40 20  1 781      
    mov edx,649                           ;#0044637C: 272 89020000               uv 04 00  1 782      
    call #0045EFEC (:%opLen)              ;#00446381: 350 668C0100               v  00 00  1 782      
    mov ecx,[ebp-80] (showcommas)         ;#00446386: 213115 B0                  uv 02 20  1 783      
    mov eax,[ebp-168] (symtab[709])       ;#00446389: 213205 58FFFFFF            vu 01 20  1 783      
    cmp ecx,eax                           ;#0044638F: 071301                     uv 00 03  1 784      
    jne #004463D8                         ;#00446391: 165 45                     v  00 00  1 784      
;   871                                     r1 = append(r1,',')
    lea edx,[ebp-28] (r1)                 ;#00446393: 215125 E4                  uv 04 20  1 785      
    lea edi,[ebp-28] (r1)                 ;#00446396: 215175 E4                  vu 80 20  1 785      
    mov ecx,#004022D4                     ;#00446399: 271 D4224000               uv 02 00  1 786      
    xor eax,eax                           ;#0044639E: 061300                     vu 01 01  1 786      
    call #0045F9F7 (:%opApnd)             ;#004463A0: 350 52960100               v  00 00  1 787      
    mov edi,[ebp-28] (r1)                 ;#004463A5: 213175 E4                  uv 80 20  1 788      
    cmp edi,h4                            ;#004463A8: 201377 00000040            uv 00 80  1 789 80   
    jl #004463B7                          ;#004463AE: 174 07                     v  00 00  1 789      
    cmp byte[ebx+edi*4-1],#82             ;#004463B0: 200174273 FF 82            u  00 88  2 790      
    je #004463C1                          ;#004463B5: 164 0A                     v  00 00  1 791      
    mov ecx,649                           ;#004463B7: 271 89020000               uv 02 00  1 792      
    call #00462D8D (:%opTcFail)           ;#004463BC: 350 CCC90100               v  00 00  1 792      
;   872                                     showcommas += 4
    mov esi,[ebp-80] (showcommas)         ;#004463C1: 213165 B0                  uv 40 20  1 793      
    add esi,4                             ;#004463C4: 203306 04                  uv 40 40  1 794 40   
    mov edx,esi                           ;#004463C7: 213326                     uv 04 40  1 795 40   
    mov [ebp-80] (showcommas),esi         ;#004463C9: 211165 B0                  vu 00 60  1 795      
    shl edx,1                             ;#004463CC: 321342                     u  04 04  1 796      
    jno #004463D8                         ;#004463CE: 161 08                     v  00 00  1 796      
    lea edi,[ebp-80] (showcommas)         ;#004463D0: 215175 B0                  uv 80 20  1 797      
    call #00462764 (:%e01tcfAddiii)       ;#004463D3: 350 8CC30100               v  00 00  1 797      
;   873                                 end if
;   874                                 d2 = trim_head(d2,0)
    mov ecx,5                             ;#004463D8: 271 05000000               uv 02 00  1 798      
    mov edx,386                           ;#004463DD: 272 82010000               vu 04 00  1 798      
    call :%opFrame (trim_head)            ;#004463E2: 350 1BC80100               v  00 00  1 799      
    mov edi,[ebp+20] (prevebp)            ;#004463E7: 213175 14                  uv 80 20  1 800      
    mov eax,[edi-152]                     ;#004463EA: 213207 68FFFFFF            uv 01 80  1 803 80 *80*
    mov [edi-152], dword h4               ;#004463F0: 307207 68FFFFFF 00000040   vu 00 80  1 803      
    cmp eax,h4                            ;#004463FA: 075 00000040               uv 00 01  1 804      
    jne #0044640B                         ;#004463FF: 165 0A                     v  00 00  1 804      
    mov esi,705                           ;#00446401: 276 C1020000               uv 40 00  1 805      
    call #00462744 (:%pUnassigned)        ;#00446406: 350 39C30100               v  00 00  1 805      
    mov [ebp] (source),eax                ;#0044640B: 211105 00                  uv 00 21  1 806      
    mov [ebp-4] (what),ebx                ;#0044640E: 211135 FC                  vu 00 28  1 806      
    mov [ebp+28] (retaddr),#0044641D      ;#00446411: 307105 1C 1D644400         uv 00 20  1 807      
    jmp #0044C87E (code:trim_head)        ;#00446418: 351 61640000               v  00 00  1 807      
    push eax                              ;#0044641D: 120                        uv 00 01  1 808      
    mov ecx,[ebp-152] (d2)                ;#0044641E: 213215 68FFFFFF            vu 02 20  1 808      
    cmp ecx,h4                            ;#00446424: 201371 00000040            uv 00 02  1 809      
    jle #0044643A                         ;#0044642A: 176 0E                     v  00 00  1 809      
    sub dword[ebx+ecx*4-8],1              ;#0044642C: 203154213 F8 01            u  00 0A  3 810      
    jne #0044643A                         ;#00446431: 165 07                     v  00 00  1 812      
    mov edx,ecx                           ;#00446433: 213321                     uv 04 02  1 813      
    call #004639A8 (:%pDealloc)           ;#00446435: 350 6ED50100               v  00 00  1 813      
    pop dword[ebp-152] (d2)               ;#0044643A: 217205 68FFFFFF            np 00 20  3 814      
    mov edi,[ebp-152] (d2)                ;#00446440: 213275 68FFFFFF            uv 80 20  1 817      
    cmp edi,h4                            ;#00446446: 201377 00000040            uv 00 80  1 818 80   
    jl #00446459                          ;#0044644C: 174 0B                     v  00 00  1 818      
    test byte[ebx+edi*4-1],#80            ;#0044644E: 366104273 FF 80            u  00 88  2 819      
    jne #0044622B                         ;#00446453: 017205 D2FDFFFF            v  00 00  1 820      
    mov ecx,705                           ;#00446459: 271 C1020000               uv 02 00  1 821      
    call #00462D8D (:%opTcFail)           ;#0044645E: 350 2AC90100               v  00 00  1 821      
;   875                             end while
    jmp #0044622B                         ;#00446463: 351 C3FDFFFF               v  00 00  1 822      
;   876                             base = 10
    mov [ebp-44] (base), dword 10         ;#00446468: 307105 D4 0A000000         uv 00 20  1 823      
;   877                         end if
;   878                         if sgn then
    mov esi,[ebp-48] (sgn)                ;#0044646F: 213165 D0                  vu 40 20  1 823      
    test esi,esi                          ;#00446472: 205366                     uv 00 40  1 824      
    je #004465C0                          ;#00446474: 017204 46010000            v  00 00  1 824      
;   879                             if base=10 then
    mov eax,[ebp-44] (base)               ;#0044647A: 213105 D4                  uv 01 20  1 825      
    cmp eax,10                            ;#0044647D: 203370 0A                  uv 00 01  1 826 01   
    jne #004464B9                         ;#00446480: 165 37                     v  00 00  1 826      
;   880                                 r1 = append(r1,'-')
    lea edx,[ebp-28] (r1)                 ;#00446482: 215125 E4                  uv 04 20  1 827      
    lea edi,[ebp-28] (r1)                 ;#00446485: 215175 E4                  vu 80 20  1 827      
    mov ecx,#00402210                     ;#00446488: 271 10224000               uv 02 00  1 828      
    xor eax,eax                           ;#0044648D: 061300                     vu 01 01  1 828      
    call #0045F9F7 (:%opApnd)             ;#0044648F: 350 63950100               v  00 00  1 829      
    mov ecx,[ebp-28] (r1)                 ;#00446494: 213115 E4                  uv 02 20  1 830      
    cmp ecx,h4                            ;#00446497: 201371 00000040            uv 00 02  1 831 02   
    jl #004464AA                          ;#0044649D: 174 0B                     v  00 00  1 831      
    cmp byte[ebx+ecx*4-1],#82             ;#0044649F: 200174213 FF 82            u  00 0A  2 832      
    je #004466C7                          ;#004464A4: 017204 1D020000            v  00 00  1 833      
    mov ecx,649                           ;#004464AA: 271 89020000               uv 02 00  1 834      
    call #00462D8D (:%opTcFail)           ;#004464AF: 350 D9C80100               v  00 00  1 834      
    jmp #004466C7                         ;#004464B4: 351 0E020000               v  00 00  1 835      
;   881                             elsif minfieldwidth>length(r1) then
    lea edi,[ebp-168] (symtab[709])       ;#004464B9: 215275 58FFFFFF            uv 80 20  1 836      
    mov esi,[ebp-28] (r1)                 ;#004464BF: 213165 E4                  vu 40 20  1 836      
    mov edx,649                           ;#004464C2: 272 89020000               uv 04 00  1 837      
    call #0045EFEC (:%opLen)              ;#004464C7: 350 208B0100               v  00 00  1 837      
    mov edi,[ebp-92] (minfieldwidth)      ;#004464CC: 213175 A4                  uv 80 20  1 838      
    mov eax,[ebp-168] (symtab[709])       ;#004464CF: 213205 58FFFFFF            vu 01 20  1 838      
    cmp edi,eax                           ;#004464D5: 071307                     uv 00 81  1 839      
    jle #004466C7                         ;#004464D7: 017216 EA010000            v  00 00  1 839      
;   882                                 r1 &= repeat(hexchar[base],minfieldwidth-length(r1))
    mov ecx,[#00402284] (hexchar)         ;#004464DD: 213015 84224000            uv 02 00  1 840      
    cmp ecx,h4                            ;#004464E3: 201371 00000040            uv 00 02  1 841 02   
    jne #004464F5                         ;#004464E9: 165 0A                     v  00 00  1 841      
    mov esi,612                           ;#004464EB: 276 64020000               uv 40 00  1 842      
    call #00462744 (:%pUnassigned)        ;#004464F0: 350 4FC20100               v  00 00  1 842      
    mov edi,[ebp-44] (base)               ;#004464F5: 213175 D4                  uv 80 20  1 843      
    mov esi,ecx                           ;#004464F8: 211316                     vu 40 02  1 843      
    mov edx,612                           ;#004464FA: 272 64020000               uv 04 00  1 844      
    call #004610CE (:%pSubse1is)          ;#004464FF: 350 CAAB0100               v  00 00  1 844      
    mov [ebp-168] (symtab[709]),eax       ;#00446504: 211205 58FFFFFF            uv 00 21  1 845      
    mov esi,[ebp-28] (r1)                 ;#0044650A: 213165 E4                  vu 40 20  1 845      
    mov edi,[ebx+esi*4-12]                ;#0044650D: 213174263 F4               uv 80 48  1 848    *40*
    mov [ebp-172] (symtab[710]),edi       ;#00446511: 211275 54FFFFFF            uv 00 A0  1 849 80   
    lea edi,[ebp-120] (symtab[675])       ;#00446517: 215175 88                  vu 80 20  1 849      
    mov ecx,[ebp-92] (minfieldwidth)      ;#0044651A: 213115 A4                  uv 02 20  1 850      
    mov eax,[ebp-172] (symtab[710])       ;#0044651D: 213205 54FFFFFF            vu 01 20  1 850      
    call #0045F299 (:%opSub)              ;#00446523: 350 718D0100               v  00 00  1 851      
    mov ecx,12                            ;#00446528: 271 0C000000               uv 02 00  1 852      
    mov edx,240                           ;#0044652D: 272 F0000000               vu 04 00  1 852      
    call #00462C02 (:%opFrame) (repeat)   ;#00446532: 350 CBC60100               v  00 00  1 853      
    mov edi,[ebp+20] (prevebp)            ;#00446537: 213175 14                  uv 80 20  1 854      
    mov eax,[edi-168]                     ;#0044653A: 213207 58FFFFFF            uv 01 80  1 857 80 *80*
    mov [ebp] (x),eax                     ;#00446540: 211105 00                  uv 00 21  1 858 01   
    mov edi,[ebp+20] (prevebp)            ;#00446543: 213175 14                  vu 80 20  1 858      
    mov eax,[edi-120]                     ;#00446546: 213107 88                  uv 01 80  1 861    *80*
    mov [edi-120], dword h4               ;#00446549: 307107 88 00000040         vu 00 80  1 861      
    cmp eax,h4                            ;#00446550: 075 00000040               uv 00 01  1 862      
    jne #00446561                         ;#00446555: 165 0A                     v  00 00  1 862      
    mov esi,675                           ;#00446557: 276 A3020000               uv 40 00  1 863      
    call #00462744 (:%pUnassigned)        ;#0044655C: 350 E3C10100               v  00 00  1 863      
    mov [ebp-4] (n),eax                   ;#00446561: 211105 FC                  uv 00 21  1 864      
    mov [ebp+28] (retaddr),#00446570      ;#00446564: 307105 1C 70654400         vu 00 20  1 864      
    jmp #00451195 (code:repeat)           ;#0044656B: 351 25AC0000               v  00 00  1 865      
    push eax                              ;#00446570: 120                        uv 00 01  1 866      
    mov esi,[ebp-124] (symtab[676])       ;#00446571: 213165 84                  vu 40 20  1 866      
    cmp esi,h4                            ;#00446574: 201376 00000040            uv 00 40  1 867      
    jle #0044658A                         ;#0044657A: 176 0E                     v  00 00  1 867      
    sub dword[ebx+esi*4-8],1              ;#0044657C: 203154263 F8 01            u  00 48  3 868      
    jne #0044658A                         ;#00446581: 165 07                     v  00 00  1 870      
    mov edx,esi                           ;#00446583: 213326                     uv 04 40  1 871      
    call #004639A8 (:%pDealloc)           ;#00446585: 350 1ED40100               v  00 00  1 871      
    pop dword[ebp-124] (symtab[676])      ;#0044658A: 217105 84                  np 00 20  3 872      
    lea edx,[ebp-28] (r1)                 ;#0044658D: 215125 E4                  uv 04 20  1 875      
    lea edi,[ebp-28] (r1)                 ;#00446590: 215175 E4                  vu 80 20  1 875      
    lea ecx,[ebp-124] (symtab[676])       ;#00446593: 215115 84                  uv 02 20  1 876      
    call #0045FD65 (:%opConcat)           ;#00446596: 350 CA970100               v  00 00  1 876      
    mov edi,[ebp-28] (r1)                 ;#0044659B: 213175 E4                  uv 80 20  1 877      
    cmp edi,h4                            ;#0044659E: 201377 00000040            uv 00 80  1 878 80   
    jl #004465B1                          ;#004465A4: 174 0B                     v  00 00  1 878      
    cmp byte[ebx+edi*4-1],#82             ;#004465A6: 200174273 FF 82            u  00 88  2 879      
    je #004466C7                          ;#004465AB: 017204 16010000            v  00 00  1 880      
    mov ecx,649                           ;#004465B1: 271 89020000               uv 02 00  1 881      
    call #00462D8D (:%opTcFail)           ;#004465B6: 350 D2C70100               v  00 00  1 881      
;   883                             end if
    jmp #004466C7                         ;#004465BB: 351 07010000               v  00 00  1 882      
;   884                         elsif showplus then
    mov ecx,[ebp-76] (showplus)           ;#004465C0: 213115 B4                  uv 02 20  1 883      
    test ecx,ecx                          ;#004465C3: 205311                     uv 00 02  1 884 02   
    je #004466C7                          ;#004465C5: 017204 FC000000            v  00 00  1 884      
;   885                             if base=10 then
    mov eax,[ebp-44] (base)               ;#004465CB: 213105 D4                  uv 01 20  1 885      
    cmp eax,10                            ;#004465CE: 203370 0A                  uv 00 01  1 886 01   
    jne #00446608                         ;#004465D1: 165 35                     v  00 00  1 886      
;   886 --                              r1 = append(r1,'+')
;   887                                 r1 = append(r1,showplus)
    lea edx,[ebp-28] (r1)                 ;#004465D3: 215125 E4                  uv 04 20  1 887      
    lea edi,[ebp-28] (r1)                 ;#004465D6: 215175 E4                  vu 80 20  1 887      
    lea ecx,[ebp-76] (showplus)           ;#004465D9: 215115 B4                  uv 02 20  1 888      
    xor eax,eax                           ;#004465DC: 061300                     vu 01 01  1 888      
    call #0045F9F7 (:%opApnd)             ;#004465DE: 350 14940100               v  00 00  1 889      
    mov esi,[ebp-28] (r1)                 ;#004465E3: 213165 E4                  uv 40 20  1 890      
    cmp esi,h4                            ;#004465E6: 201376 00000040            uv 00 40  1 891 40   
    jl #004465F9                          ;#004465EC: 174 0B                     v  00 00  1 891      
    cmp byte[ebx+esi*4-1],#82             ;#004465EE: 200174263 FF 82            u  00 48  2 892      
    je #004466C7                          ;#004465F3: 017204 CE000000            v  00 00  1 893      
    mov ecx,649                           ;#004465F9: 271 89020000               uv 02 00  1 894      
    call #00462D8D (:%opTcFail)           ;#004465FE: 350 8AC70100               v  00 00  1 894      
    jmp #004466C7                         ;#00446603: 351 BF000000               v  00 00  1 895      
;   888                             elsif minfieldwidth>length(r1) then
    lea edi,[ebp-168] (symtab[709])       ;#00446608: 215275 58FFFFFF            uv 80 20  1 896      
    mov esi,[ebp-28] (r1)                 ;#0044660E: 213165 E4                  vu 40 20  1 896      
    mov edx,649                           ;#00446611: 272 89020000               uv 04 00  1 897      
    call #0045EFEC (:%opLen)              ;#00446616: 350 D1890100               v  00 00  1 897      
    mov edi,[ebp-92] (minfieldwidth)      ;#0044661B: 213175 A4                  uv 80 20  1 898      
    mov ecx,[ebp-168] (symtab[709])       ;#0044661E: 213215 58FFFFFF            vu 02 20  1 898      
    cmp edi,ecx                           ;#00446624: 071317                     uv 00 82  1 899      
    jle #004466C7                         ;#00446626: 017216 9B000000            v  00 00  1 899      
;   889                                 r1 &= repeat('0',minfieldwidth-length(r1))
    lea edi,[ebp-168] (symtab[709])       ;#0044662C: 215275 58FFFFFF            uv 80 20  1 900      
    mov esi,[ebp-28] (r1)                 ;#00446632: 213165 E4                  vu 40 20  1 900      
    mov edx,649                           ;#00446635: 272 89020000               uv 04 00  1 901      
    call #0045EFEC (:%opLen)              ;#0044663A: 350 AD890100               v  00 00  1 901      
    lea edi,[ebp-120] (symtab[675])       ;#0044663F: 215175 88                  uv 80 20  1 902      
    mov ecx,[ebp-92] (minfieldwidth)      ;#00446642: 213115 A4                  vu 02 20  1 902      
    mov eax,[ebp-168] (symtab[709])       ;#00446645: 213205 58FFFFFF            uv 01 20  1 903      
    call #0045F299 (:%opSub)              ;#0044664B: 350 498C0100               v  00 00  1 903      
    mov ecx,6                             ;#00446650: 271 06000000               uv 02 00  1 904      
    mov edx,206                           ;#00446655: 272 CE000000               vu 04 00  1 904      
    call :%opFrame (repeatch)             ;#0044665A: 350 A3C50100               v  00 00  1 905      
    mov [ebp] (ch), dword 48              ;#0044665F: 307105 00 30000000         uv 00 20  1 906      
    mov edi,[ebp+20] (prevebp)            ;#00446666: 213175 14                  vu 80 20  1 906      
    mov eax,[edi-120]                     ;#00446669: 213107 88                  uv 01 80  1 909    *80*
    mov [edi-120], dword h4               ;#0044666C: 307107 88 00000040         vu 00 80  1 909      
    cmp eax,h4                            ;#00446673: 075 00000040               uv 00 01  1 910      
    jne #00446684                         ;#00446678: 165 0A                     v  00 00  1 910      
    mov esi,675                           ;#0044667A: 276 A3020000               uv 40 00  1 911      
    call #00462744 (:%pUnassigned)        ;#0044667F: 350 C0C00100               v  00 00  1 911      
    mov [ebp-4] (n),eax                   ;#00446684: 211105 FC                  uv 00 21  1 912      
    mov [ebp+28] (retaddr),#00446693      ;#00446687: 307105 1C 93664400         vu 00 20  1 912      
    jmp #0045581E (code:repeatch)         ;#0044668E: 351 8BF10000               v  00 00  1 913      
    push eax                              ;#00446693: 120                        uv 00 01  1 914      
    mov edi,[ebp-176] (symtab[711])       ;#00446694: 213275 50FFFFFF            vu 80 20  1 914      
    cmp edi,h4                            ;#0044669A: 201377 00000040            uv 00 80  1 915      
    jle #004466B0                         ;#004466A0: 176 0E                     v  00 00  1 915      
    sub dword[ebx+edi*4-8],1              ;#004466A2: 203154273 F8 01            u  00 88  3 916      
    jne #004466B0                         ;#004466A7: 165 07                     v  00 00  1 918      
    mov edx,edi                           ;#004466A9: 213327                     uv 04 80  1 919      
    call #004639A8 (:%pDealloc)           ;#004466AB: 350 F8D20100               v  00 00  1 919      
    pop dword[ebp-176] (symtab[711])      ;#004466B0: 217205 50FFFFFF            np 00 20  3 920      
    lea edx,[ebp-28] (r1)                 ;#004466B6: 215125 E4                  uv 04 20  1 923      
    lea edi,[ebp-28] (r1)                 ;#004466B9: 215175 E4                  vu 80 20  1 923      
    lea ecx,[ebp-176] (symtab[711])       ;#004466BC: 215215 50FFFFFF            uv 02 20  1 924      
    call #0045FD65 (:%opConcat)           ;#004466C2: 350 9E960100               v  00 00  1 924      
;   890                             end if
;   891                         end if
;   892                         if lowerHex and base=8 then -- 'O', 17/3/24
    mov esi,[ebp-60] (lowerHex)           ;#004466C7: 213165 C4                  uv 40 20  1 925      
    test esi,esi                          ;#004466CA: 205366                     uv 00 40  1 926 40   
    je #004466E6                          ;#004466CC: 164 18                     v  00 00  1 926      
    mov ecx,[ebp-44] (base)               ;#004466CE: 213115 D4                  uv 02 20  1 927      
    cmp ecx,8                             ;#004466D1: 203371 08                  uv 00 02  1 928 02   
    jne #004466E6                         ;#004466D4: 165 10                     v  00 00  1 928      
;   893                             r1 &= "o0"
    lea edx,[ebp-28] (r1)                 ;#004466D6: 215125 E4                  uv 04 20  1 929      
    lea edi,[ebp-28] (r1)                 ;#004466D9: 215175 E4                  vu 80 20  1 929      
    mov ecx,#0040231C                     ;#004466DC: 271 1C234000               uv 02 00  1 930      
    call #0045FD65 (:%opConcat)           ;#004466E1: 350 7F960100               v  00 00  1 930      
;   894                         end if
;   895                         r1len = length(r1)
    mov eax,[ebp-28] (r1)                 ;#004466E6: 213105 E4                  uv 01 20  1 931      
    mov edi,[ebx+eax*4-12]                ;#004466E9: 213174203 F4               uv 80 09  1 934 01 *01*
    mov [ebp-52] (r1len),edi              ;#004466ED: 211175 CC                  uv 00 A0  1 935 80   
;   896                         -- as promised, reverse it:
;   897                         for j=1 to r1len do     -- stops at mid-point[-1]
    mov [ebp-180] (symtab[713]),edi       ;#004466F0: 211275 4CFFFFFF            vu 00 A0  1 935      
    mov [ebp-184] (j), dword 1            ;#004466F6: 307205 48FFFFFF 01000000   uv 00 20  1 936      
    cmp edi,1                             ;#00446700: 201377 01000000            vu 00 80  1 936      
    jl #00447B8D                          ;#00446706: 017214 81140000            v  00 00  1 937      
;   898                             if j>=r1len then exit end if
    mov esi,[ebp-184] (j)                 ;#0044670C: 213265 48FFFFFF            uv 40 20  1 938      
    mov ecx,[ebp-52] (r1len)              ;#00446712: 213115 CC                  vu 02 20  1 938      
    cmp esi,ecx                           ;#00446715: 071316                     uv 00 42  1 939      
    jge #00447B8D                         ;#00446717: 017215 70140000            v  00 00  1 939      
;   899                             tmp = r1[j]
    mov edi,esi                           ;#0044671D: 211367                     uv 80 40  1 940      
    mov esi,[ebp-28] (r1)                 ;#0044671F: 213165 E4                  vu 40 20  1 940      
    mov edx,649                           ;#00446722: 272 89020000               uv 04 00  1 941      
    call #004610CE (:%pSubse1is)          ;#00446727: 350 A2A90100               v  00 00  1 941      
    mov [ebp-100] (tmp),eax               ;#0044672C: 211105 9C                  uv 00 21  1 942      
;   900                             r1[j] = r1[r1len]
    mov edi,[ebp-52] (r1len)              ;#0044672F: 213175 CC                  vu 80 20  1 942      
    mov esi,[ebp-28] (r1)                 ;#00446732: 213165 E4                  uv 40 20  1 943      
    mov edx,649                           ;#00446735: 272 89020000               vu 04 00  1 943      
    call #004610CE (:%pSubse1is)          ;#0044673A: 350 8FA90100               v  00 00  1 944      
    mov [ebp-168] (symtab[709]),eax       ;#0044673F: 211205 58FFFFFF            uv 00 21  1 945      
    mov ecx,eax                           ;#00446745: 211301                     vu 02 01  1 945      
    mov edi,[ebp-184] (j)                 ;#00446747: 213275 48FFFFFF            uv 80 20  1 946      
    mov esi,[ebp-28] (r1)                 ;#0044674D: 213165 E4                  vu 40 20  1 946      
    lea eax,[ebp-28] (r1)                 ;#00446750: 215105 E4                  uv 01 20  1 947      
    call #004607F3 (:%pRepe1)             ;#00446753: 350 9BA00100               v  00 00  1 947      
    mov [ebp-168] (symtab[709]),ebx       ;#00446758: 211235 58FFFFFF            uv 00 28  1 948      
    mov eax,[ebp-28] (r1)                 ;#0044675E: 213105 E4                  vu 01 20  1 948      
    cmp eax,h4                            ;#00446761: 075 00000040               uv 00 01  1 949      
    jl #0044676F                          ;#00446766: 174 07                     v  00 00  1 949      
    cmp byte[ebx+eax*4-1],#82             ;#00446768: 200174203 FF 82            u  00 09  2 950      
    je #00446779                          ;#0044676D: 164 0A                     v  00 00  1 951      
    mov ecx,649                           ;#0044676F: 271 89020000               uv 02 00  1 952      
    call #00462D8D (:%opTcFail)           ;#00446774: 350 14C60100               v  00 00  1 952      
;   901                             r1[r1len] = tmp
    mov esi,eax                           ;#00446779: 211306                     uv 40 01  1 953      
    mov edi,[ebp-52] (r1len)              ;#0044677B: 213175 CC                  vu 80 20  1 953      
    mov ecx,[ebp-100] (tmp)               ;#0044677E: 213115 9C                  uv 02 20  1 954      
    lea eax,[ebp-28] (r1)                 ;#00446781: 215105 E4                  vu 01 20  1 954      
    call #004607F3 (:%pRepe1)             ;#00446784: 350 6AA00100               v  00 00  1 955      
    mov eax,[ebp-28] (r1)                 ;#00446789: 213105 E4                  uv 01 20  1 956      
    cmp eax,h4                            ;#0044678C: 075 00000040               uv 00 01  1 957 01   
    jl #0044679A                          ;#00446791: 174 07                     v  00 00  1 957      
    cmp byte[ebx+eax*4-1],#82             ;#00446793: 200174203 FF 82            u  00 09  2 958      
    je #004467A4                          ;#00446798: 164 0A                     v  00 00  1 959      
    mov ecx,649                           ;#0044679A: 271 89020000               uv 02 00  1 960      
    call #00462D8D (:%opTcFail)           ;#0044679F: 350 E9C50100               v  00 00  1 960      
;   902                             r1len -= 1
    mov esi,[ebp-52] (r1len)              ;#004467A4: 213165 CC                  uv 40 20  1 961      
    sub esi,1                             ;#004467A7: 203356 01                  uv 40 40  1 962 40   
    mov edx,esi                           ;#004467AA: 213326                     uv 04 40  1 963 40   
    mov [ebp-52] (r1len),esi              ;#004467AC: 211165 CC                  vu 00 60  1 963      
    shl edx,1                             ;#004467AF: 321342                     u  04 04  1 964      
    jno #004467BB                         ;#004467B1: 161 08                     v  00 00  1 964      
    lea edi,[ebp-52] (r1len)              ;#004467B3: 215175 CC                  uv 80 20  1 965      
    call #00462764 (:%e01tcfAddiii)       ;#004467B6: 350 A9BF0100               v  00 00  1 965      
;   903                         end for
    mov edi,[ebp-184] (j)                 ;#004467BB: 213275 48FFFFFF            uv 80 20  1 966      
    mov ecx,[ebp-180] (symtab[713])       ;#004467C1: 213215 4CFFFFFF            vu 02 20  1 966      
    add edi,1                             ;#004467C7: 203307 01                  uv 80 80  1 967      
    cmp edi,ecx                           ;#004467CA: 073371                     uv 00 82  1 968 80   
    mov [ebp-184] (j),edi                 ;#004467CC: 211275 48FFFFFF            vu 00 A0  1 968      
    jle #0044670C                         ;#004467D2: 017216 34FFFFFF            v  00 00  1 969      
    jmp #00447B8D                         ;#004467D8: 351 B0130000               v  00 00  1 970      
;   904                     else
;   905 --DEV not thread safe:
;   906                         if o=nan then
    mov edi,[#00402228] (nan)             ;#004467DD: 213075 28224000            uv 80 00  1 971      
    mov eax,[ebp-32] (o)                  ;#004467E3: 213105 E0                  vu 01 20  1 971      
    mov esi,522                           ;#004467E6: 276 0A020000               uv 40 00  1 972      
    mov edx,650                           ;#004467EB: 272 8A020000               vu 04 00  1 972      
    call #0045F91F (:%opJccE)             ;#004467F0: 350 2A910100               v  00 00  1 973      
    jne #00446834                         ;#004467F5: 165 3D                     v  00 00  1 974      
;   907 --                          r1 = "nan"
;   908                             r1 = Nan()
    mov ecx,1                             ;#004467F7: 271 01000000               uv 02 00  1 975      
    mov edx,524                           ;#004467FC: 272 0C020000               vu 04 00  1 975      
    call #00462C02 (:%opFrame) (Nan)      ;#00446801: 350 FCC30100               v  00 00  1 976      
    mov [ebp+28] (retaddr),#00446812      ;#00446806: 307105 1C 12684400         uv 00 20  1 977      
    jmp #00449E7F (code:Nan)              ;#0044680D: 351 6D360000               v  00 00  1 977      
    push eax                              ;#00446812: 120                        uv 00 01  1 978      
    mov esi,[ebp-28] (r1)                 ;#00446813: 213165 E4                  vu 40 20  1 978      
    cmp esi,h4                            ;#00446816: 201376 00000040            uv 00 40  1 979      
    jle #0044682C                         ;#0044681C: 176 0E                     v  00 00  1 979      
    sub dword[ebx+esi*4-8],1              ;#0044681E: 203154263 F8 01            u  00 48  3 980      
    jne #0044682C                         ;#00446823: 165 07                     v  00 00  1 982      
    mov edx,esi                           ;#00446825: 213326                     uv 04 40  1 983      
    call #004639A8 (:%pDealloc)           ;#00446827: 350 7CD10100               v  00 00  1 983      
    pop dword[ebp-28] (r1)                ;#0044682C: 217105 E4                  np 00 20  3 984      
    jmp #00447B8D                         ;#0044682F: 351 59130000               v  00 00  1 987      
;   909                         elsif o=-nan then
    mov ecx,[#00402228] (nan)             ;#00446834: 213015 28224000            uv 02 00  1 988      
    cmp ecx,h4                            ;#0044683A: 201371 00000040            uv 00 02  1 989 02   
    jne #0044684C                         ;#00446840: 165 0A                     v  00 00  1 989      
    mov esi,522                           ;#00446842: 276 0A020000               uv 40 00  1 990      
    call #00462744 (:%pUnassigned)        ;#00446847: 350 F8BE0100               v  00 00  1 990      
    lea edi,[ebp-120] (symtab[675])       ;#0044684C: 215175 88                  uv 80 20  1 991      
    call #0045F51F (:%opUminus)           ;#0044684F: 350 CB8C0100               v  00 00  1 991      
    mov edi,[ebp-120] (symtab[675])       ;#00446854: 213175 88                  uv 80 20  1 992      
    mov eax,[ebp-32] (o)                  ;#00446857: 213105 E0                  vu 01 20  1 992      
    mov esi,675                           ;#0044685A: 276 A3020000               uv 40 00  1 993      
    mov edx,650                           ;#0044685F: 272 8A020000               vu 04 00  1 993      
    call #0045F91F (:%opJccE)             ;#00446864: 350 B6900100               v  00 00  1 994      
    jne #00446923                         ;#00446869: 017205 B4000000            v  00 00  1 995      
;   910 --                          r1 = "-nan"
;   911                             r1 = '-'&Nan()
    mov ecx,1                             ;#0044686F: 271 01000000               uv 02 00  1 996      
    mov edx,524                           ;#00446874: 272 0C020000               vu 04 00  1 996      
    call #00462C02 (:%opFrame) (Nan)      ;#00446879: 350 84C30100               v  00 00  1 997      
    mov [ebp+28] (retaddr),#0044688A      ;#0044687E: 307105 1C 8A684400         uv 00 20  1 998      
    jmp #00449E7F (code:Nan)              ;#00446885: 351 F5350000               v  00 00  1 998      
    push eax                              ;#0044688A: 120                        uv 00 01  1 999      
    mov esi,[ebp-176] (symtab[711])       ;#0044688B: 213265 50FFFFFF            vu 40 20  1 999      
    cmp esi,h4                            ;#00446891: 201376 00000040            uv 00 40  1 1000      
    jle #004468A7                         ;#00446897: 176 0E                     v  00 00  1 1000      
    sub dword[ebx+esi*4-8],1              ;#00446899: 203154263 F8 01            u  00 48  3 1001      
    jne #004468A7                         ;#0044689E: 165 07                     v  00 00  1 1003      
    mov edx,esi                           ;#004468A0: 213326                     uv 04 40  1 1004      
    call #004639A8 (:%pDealloc)           ;#004468A2: 350 01D10100               v  00 00  1 1004      
    pop dword[ebp-176] (symtab[711])      ;#004468A7: 217205 50FFFFFF            np 00 20  3 1005      
    mov ecx,[ebp-176] (symtab[711])       ;#004468AD: 213215 50FFFFFF            uv 02 20  1 1008      
    mov edi,[ebp-28] (r1)                 ;#004468B3: 213175 E4                  vu 80 20  1 1008      
    mov [ebp-176] (symtab[711]),ebx       ;#004468B6: 211235 50FFFFFF            uv 00 28  1 1009      
    cmp edi,h4                            ;#004468BC: 201377 00000040            vu 00 80  1 1009      
    mov [ebp-28] (r1),ecx                 ;#004468C2: 211115 E4                  uv 00 22  1 1010      
    jle #004468D5                         ;#004468C5: 176 0E                     v  00 00  1 1010      
    sub dword[ebx+edi*4-8],1              ;#004468C7: 203154273 F8 01            u  00 88  3 1011      
    jne #004468D5                         ;#004468CC: 165 07                     v  00 00  1 1013      
    mov edx,edi                           ;#004468CE: 213327                     uv 04 80  1 1014      
    call #004639A8 (:%pDealloc)           ;#004468D0: 350 D3D00100               v  00 00  1 1014      
    mov eax,[ebp-28] (r1)                 ;#004468D5: 213105 E4                  uv 01 20  1 1015      
    cmp eax,h4                            ;#004468D8: 075 00000040               uv 00 01  1 1016 01   
    jne #004468E9                         ;#004468DD: 165 0A                     v  00 00  1 1016      
    mov esi,649                           ;#004468DF: 276 89020000               uv 40 00  1 1017      
    call #00462744 (:%pUnassigned)        ;#004468E4: 350 5BBE0100               v  00 00  1 1017      
    lea edx,[ebp-28] (r1)                 ;#004468E9: 215125 E4                  uv 04 20  1 1018      
    lea edi,[ebp-28] (r1)                 ;#004468EC: 215175 E4                  vu 80 20  1 1018      
    mov ecx,#00402210                     ;#004468EF: 271 10224000               uv 02 00  1 1019      
    mov eax,1                             ;#004468F4: 270 01000000               vu 01 00  1 1019      
    call #0045F9F7 (:%opApnd)             ;#004468F9: 350 F9900100               v  00 00  1 1020      
    mov esi,[ebp-28] (r1)                 ;#004468FE: 213165 E4                  uv 40 20  1 1021      
    cmp esi,h4                            ;#00446901: 201376 00000040            uv 00 40  1 1022 40   
    jl #00446914                          ;#00446907: 174 0B                     v  00 00  1 1022      
    cmp byte[ebx+esi*4-1],#82             ;#00446909: 200174263 FF 82            u  00 48  2 1023      
    je #00447B8D                          ;#0044690E: 017204 79120000            v  00 00  1 1024      
    mov ecx,649                           ;#00446914: 271 89020000               uv 02 00  1 1025      
    call #00462D8D (:%opTcFail)           ;#00446919: 350 6FC40100               v  00 00  1 1025      
    jmp #00447B8D                         ;#0044691E: 351 6A120000               v  00 00  1 1026      
;   912                         elsif o=inf then
    mov edi,[#00402224] (inf)             ;#00446923: 213075 24224000            uv 80 00  1 1027      
    mov eax,[ebp-32] (o)                  ;#00446929: 213105 E0                  vu 01 20  1 1027      
    mov esi,521                           ;#0044692C: 276 09020000               uv 40 00  1 1028      
    mov edx,650                           ;#00446931: 272 8A020000               vu 04 00  1 1028      
    call #0045F91F (:%opJccE)             ;#00446936: 350 E48F0100               v  00 00  1 1029      
    jne #0044697A                         ;#0044693B: 165 3D                     v  00 00  1 1030      
;   913 --                          r1 = "inf"
;   914                             r1 = Inf()
    mov ecx,1                             ;#0044693D: 271 01000000               uv 02 00  1 1031      
    mov edx,529                           ;#00446942: 272 11020000               vu 04 00  1 1031      
    call #00462C02 (:%opFrame) (Inf)      ;#00446947: 350 B6C20100               v  00 00  1 1032      
    mov [ebp+28] (retaddr),#00446958      ;#0044694C: 307105 1C 58694400         uv 00 20  1 1033      
    jmp #00449E1F (code:Inf)              ;#00446953: 351 C7340000               v  00 00  1 1033      
    push eax                              ;#00446958: 120                        uv 00 01  1 1034      
    mov ecx,[ebp-28] (r1)                 ;#00446959: 213115 E4                  vu 02 20  1 1034      
    cmp ecx,h4                            ;#0044695C: 201371 00000040            uv 00 02  1 1035      
    jle #00446972                         ;#00446962: 176 0E                     v  00 00  1 1035      
    sub dword[ebx+ecx*4-8],1              ;#00446964: 203154213 F8 01            u  00 0A  3 1036      
    jne #00446972                         ;#00446969: 165 07                     v  00 00  1 1038      
    mov edx,ecx                           ;#0044696B: 213321                     uv 04 02  1 1039      
    call #004639A8 (:%pDealloc)           ;#0044696D: 350 36D00100               v  00 00  1 1039      
    pop dword[ebp-28] (r1)                ;#00446972: 217105 E4                  np 00 20  3 1040      
    jmp #00447B8D                         ;#00446975: 351 13120000               v  00 00  1 1043      
;   915                         else
;   916 --                          r1 = "0"
;   917                             r1 = repeat('0',1)
    mov ecx,6                             ;#0044697A: 271 06000000               uv 02 00  1 1044      
    mov edx,206                           ;#0044697F: 272 CE000000               vu 04 00  1 1044      
    call :%opFrame (repeatch)             ;#00446984: 350 79C20100               v  00 00  1 1045      
    mov [ebp] (ch), dword 48              ;#00446989: 307105 00 30000000         uv 00 20  1 1046      
    mov [ebp-4] (n), dword 1              ;#00446990: 307105 FC 01000000         vu 00 20  1 1046      
    mov [ebp+28] (retaddr),#004469A3      ;#00446997: 307105 1C A3694400         uv 00 20  1 1047      
    jmp #0045581E (code:repeatch)         ;#0044699E: 351 7BEE0000               v  00 00  1 1047      
    push eax                              ;#004469A3: 120                        uv 00 01  1 1048      
    mov esi,[ebp-28] (r1)                 ;#004469A4: 213165 E4                  vu 40 20  1 1048      
    cmp esi,h4                            ;#004469A7: 201376 00000040            uv 00 40  1 1049      
    jle #004469BD                         ;#004469AD: 176 0E                     v  00 00  1 1049      
    sub dword[ebx+esi*4-8],1              ;#004469AF: 203154263 F8 01            u  00 48  3 1050      
    jne #004469BD                         ;#004469B4: 165 07                     v  00 00  1 1052      
    mov edx,esi                           ;#004469B6: 213326                     uv 04 40  1 1053      
    call #004639A8 (:%pDealloc)           ;#004469B8: 350 EBCF0100               v  00 00  1 1053      
    pop dword[ebp-28] (r1)                ;#004469BD: 217105 E4                  np 00 20  3 1054      
;   918                         end if
;   919                     end if
;   920 --              elsif fidx<=10 then -- one of "stncvV"
    jmp #00447B8D                         ;#004469C0: 351 C8110000               v  00 00  1 1057      
;   921                 elsif fidx<=11 then -- one of "stncvVR"
    mov edi,11                            ;#004469C5: 277 0B000000               uv 80 00  1 1058      
    mov eax,[ebp-16] (fidx)               ;#004469CA: 213105 F0                  vu 01 20  1 1058      
    mov esi,0                             ;#004469CD: 276 00000000               uv 40 00  1 1059      
    mov edx,646                           ;#004469D2: 272 86020000               vu 04 00  1 1059      
    call #0045F8B0 (:%opJcc)              ;#004469D7: 350 D48E0100               v  00 00  1 1060      
    jg #004472BF                          ;#004469DC: 017217 DD080000            v  00 00  1 1061      
;   922                     if showplus then
    mov edi,[ebp-76] (showplus)           ;#004469E2: 213175 B4                  uv 80 20  1 1062      
    test edi,edi                          ;#004469E5: 205377                     uv 00 80  1 1063 80   
    je #00446A22                          ;#004469E7: 164 39                     v  00 00  1 1063      
;   923                         crash("show plus not supported on %c",fi,3)
    mov ecx,4                             ;#004469E9: 271 04000000               uv 02 00  1 1064      
    mov edx,397                           ;#004469EE: 272 8D010000               vu 04 00  1 1064      
    call #00462C02 (:%opFrame) (crash)    ;#004469F3: 350 0AC20100               v  00 00  1 1065      
    mov ecx,[#00402320]                   ;#004469F8: 213015 20234000            uv 02 00  1 1066      
    mov [ebp] (msg),ecx                   ;#004469FE: 211115 00                  uv 00 22  1 1067 02   
    add dword[ebx+ecx*4-8],1              ;#00446A01: 203104213 F8 01            u  00 0A  3 1069    *02*
    mov edi,[ebp+20] (prevebp)            ;#00446A06: 213175 14                  vu 80 20  1 1071      
    mov eax,[edi-12]                      ;#00446A09: 213107 F4                  uv 01 80  1 1074    *80*
    mov [ebp-4] (args),eax                ;#00446A0C: 211105 FC                  uv 00 21  1 1075 01   
    mov [ebp-8] (nFrames), dword 3        ;#00446A0F: 307105 F8 03000000         vu 00 20  1 1075      
    mov [ebp+28] (retaddr),#00446A22      ;#00446A16: 307105 1C 226A4400         uv 00 20  1 1076      
    jmp #0044AB92 (code:crash)            ;#00446A1D: 351 70410000               v  00 00  1 1076      
;   924                     end if
;   925                     if atom(args) then
    mov esi,[ebp-4] (args)                ;#00446A22: 213165 FC                  uv 40 20  1 1077      
    cmp esi,h4                            ;#00446A25: 201376 00000040            uv 00 40  1 1078 40   
    jl #00446A34                          ;#00446A2B: 174 07                     v  00 00  1 1078      
    cmp byte[ebx+esi*4-1],#12             ;#00446A2D: 200174263 FF 12            u  00 48  2 1079      
    jne #00446A68                         ;#00446A32: 165 34                     v  00 00  1 1080      
;   926                         o = args
    mov edx,[ebp-32] (o)                  ;#00446A34: 213125 E0                  uv 04 20  1 1081      
    cmp esi,h4                            ;#00446A37: 201376 00000040            vu 00 40  1 1081      
    jl #00446A44                          ;#00446A3D: 174 05                     v  00 00  1 1082      
    add dword[ebx+esi*4-8],1              ;#00446A3F: 203104263 F8 01            u  00 48  3 1083      
    mov [ebp-32] (o),esi                  ;#00446A44: 211165 E0                  vu 00 60  1 1085      
    cmp edx,h4                            ;#00446A47: 201372 00000040            uv 00 04  1 1086      
    jle #00446B33                         ;#00446A4D: 017216 E0000000            v  00 00  1 1086      
    sub dword[ebx+edx*4-8],1              ;#00446A53: 203154223 F8 01            u  00 0C  3 1087      
    jne #00446B33                         ;#00446A58: 017205 D5000000            v  00 00  1 1089      
    call #004639A8 (:%pDealloc)           ;#00446A5E: 350 45CF0100               v  00 00  1 1090      
;   927 --12/9/15:
;   928 --                  elsif useFlatString(args,nxt,fmt,i) then
;   929 --12/1/19:
;   930 --                  elsif fidx!=6 and useFlatString(args,nxt,fmt,i) then -- (not %c (ie %s) and useFlat..)
    jmp #00446B33                         ;#00446A63: 351 CB000000               v  00 00  1 1091      
;   931                     elsif fi='s' and useFlatString(args,nxt,fmt,i) then -- (not %c (ie %s) and useFlat..)
    mov edi,[ebp-12] (fi)                 ;#00446A68: 213175 F4                  uv 80 20  1 1092      
    cmp edi,115                           ;#00446A6B: 203377 73                  uv 00 80  1 1093 80   
    jne #00446B1E                         ;#00446A6E: 017205 AA000000            v  00 00  1 1093      
    mov ecx,10                            ;#00446A74: 271 0A000000               uv 02 00  1 1094      
    mov edx,576                           ;#00446A79: 272 40020000               vu 04 00  1 1094      
    call :%opFrame (useFlatString)        ;#00446A7E: 350 7FC10100               v  00 00  1 1095      
    mov edi,[ebp+20] (prevebp)            ;#00446A83: 213175 14                  uv 80 20  1 1096      
    mov eax,[edi-4]                       ;#00446A86: 213107 FC                  uv 01 80  1 1099 80 *80*
    xor ebx,ebx                           ;#00446A89: 061333                     vu 08 08  1 1099      
    cmp eax,h4                            ;#00446A8B: 075 00000040               uv 00 01  1 1100      
    jl #00446A9C                          ;#00446A90: 174 0A                     v  00 00  1 1100      
    add dword[ebx+eax*4-8],1              ;#00446A92: 203104203 F8 01            u  00 09  3 1101      
    cmp eax,643                           ;#00446A97: 075 83020000               vu 00 01  1 1103      
    mov [ebp] (args),eax                  ;#00446A9C: 211105 00                  uv 00 21  1 1104      
    mov edi,[ebp+20] (prevebp)            ;#00446A9F: 213175 14                  vu 80 20  1 1104      
    mov eax,[edi-20]                      ;#00446AA2: 213107 EC                  uv 01 80  1 1107    *80*
    mov [ebp-4] (nxt),eax                 ;#00446AA5: 211105 FC                  uv 00 21  1 1108 01   
    mov edi,[ebp+20] (prevebp)            ;#00446AA8: 213175 14                  vu 80 20  1 1108      
    mov eax,[edi]                         ;#00446AAB: 213007                     uv 01 80  1 1111    *80*
    xor ebx,ebx                           ;#00446AAD: 061333                     vu 08 08  1 1111      
    cmp eax,h4                            ;#00446AAF: 075 00000040               uv 00 01  1 1112      
    jl #00446AC0                          ;#00446AB4: 174 0A                     v  00 00  1 1112      
    add dword[ebx+eax*4-8],1              ;#00446AB6: 203104203 F8 01            u  00 09  3 1113      
    cmp eax,642                           ;#00446ABB: 075 82020000               vu 00 01  1 1115      
    mov [ebp-8] (fmt),eax                 ;#00446AC0: 211105 F8                  uv 00 21  1 1116      
    mov edi,[ebp+20] (prevebp)            ;#00446AC3: 213175 14                  vu 80 20  1 1116      
    mov eax,[edi-8]                       ;#00446AC6: 213107 F8                  uv 01 80  1 1119    *80*
    mov [ebp-12] (i),eax                  ;#00446AC9: 211105 F4                  uv 00 21  1 1120 01   
    mov [ebp+28] (retaddr),#00446AD8      ;#00446ACC: 307105 1C D86A4400         vu 00 20  1 1120      
    jmp #00449CB0 (code:useFlatString)    ;#00446AD3: 351 D8310000               v  00 00  1 1121      
    test eax,eax                          ;#00446AD8: 205300                     uv 00 01  1 1122      
    je #00446B1E                          ;#00446ADA: 164 42                     v  00 00  1 1122      
;   932                         o = args
    mov ecx,[ebp-4] (args)                ;#00446ADC: 213115 FC                  uv 02 20  1 1123      
    mov edx,[ebp-32] (o)                  ;#00446ADF: 213125 E0                  vu 04 20  1 1123      
    cmp ecx,h4                            ;#00446AE2: 201371 00000040            uv 00 02  1 1124      
    jl #00446AEF                          ;#00446AE8: 174 05                     v  00 00  1 1124      
    add dword[ebx+ecx*4-8],1              ;#00446AEA: 203104213 F8 01            u  00 0A  3 1125      
    mov [ebp-32] (o),ecx                  ;#00446AEF: 211115 E0                  vu 00 22  1 1127      
    cmp edx,h4                            ;#00446AF2: 201372 00000040            uv 00 04  1 1128      
    jle #00446B06                         ;#00446AF8: 176 0C                     v  00 00  1 1128      
    sub dword[ebx+edx*4-8],1              ;#00446AFA: 203154223 F8 01            u  00 0C  3 1129      
    jne #00446B06                         ;#00446AFF: 165 05                     v  00 00  1 1131      
    call #004639A8 (:%pDealloc)           ;#00446B01: 350 A2CE0100               v  00 00  1 1132      
;   933                         args = {}
    lea eax,[ebp-4] (args)                ;#00446B06: 215105 FC                  uv 01 20  1 1133      
    mov edx,0                             ;#00446B09: 272 00000000               vu 04 00  1 1133      
    push #00446B1C                        ;#00446B0E: 150 1C6B4400               uv 00 00  1 1134      
    push eax                              ;#00446B13: 120                        vu 00 01  1 1134      
    mov edi,[ebp-4] (args)                ;#00446B14: 213175 FC                  uv 80 20  1 1135      
    jmp #00460143 (:%pMkSq)               ;#00446B17: 351 27960100               v  00 00  1 1135      
    jmp #00446B33                         ;#00446B1C: 353 15                     v  00 00  1 1136      
;   934                     else
;   935                         o = args[nxt]
    mov edi,[ebp-20] (nxt)                ;#00446B1E: 213175 EC                  uv 80 20  1 1137      
    lea ecx,[ebp-32] (o)                  ;#00446B21: 215115 E0                  vu 02 20  1 1137      
    mov esi,[ebp-4] (args)                ;#00446B24: 213165 FC                  uv 40 20  1 1138      
    mov edx,643                           ;#00446B27: 272 83020000               vu 04 00  1 1138      
    mov al,0                              ;#00446B2C: 260 00                     uv 01 00  1 1139      
    call #00460FE5 (:%pSubse1)            ;#00446B2E: 350 B2A40100               v  00 00  1 1139      
;   936                     end if
;   937 --14/01/2022 %v and %V flipped
;   938                     if fi='v' then
    mov eax,[ebp-12] (fi)                 ;#00446B33: 213105 F4                  uv 01 20  1 1140      
    cmp eax,118                           ;#00446B36: 203370 76                  uv 00 01  1 1141 01   
    jne #00446BA0                         ;#00446B39: 165 65                     v  00 00  1 1141      
;   939                         o = sprint(o,-1)
    mov ecx,13                            ;#00446B3B: 271 0D000000               uv 02 00  1 1142      
    mov edx,212                           ;#00446B40: 272 D4000000               vu 04 00  1 1142      
    call #00462C02 (:%opFrame) (sprint)   ;#00446B45: 350 B8C00100               v  00 00  1 1143      
    mov edi,[ebp+20] (prevebp)            ;#00446B4A: 213175 14                  uv 80 20  1 1144      
    mov eax,[edi-32]                      ;#00446B4D: 213107 E0                  uv 01 80  1 1147 80 *80*
    mov [edi-32], dword h4                ;#00446B50: 307107 E0 00000040         vu 00 80  1 1147      
    cmp eax,h4                            ;#00446B57: 075 00000040               uv 00 01  1 1148      
    jne #00446B68                         ;#00446B5C: 165 0A                     v  00 00  1 1148      
    mov esi,650                           ;#00446B5E: 276 8A020000               uv 40 00  1 1149      
    call #00462744 (:%pUnassigned)        ;#00446B63: 350 DCBB0100               v  00 00  1 1149      
    mov [ebp] (x),eax                     ;#00446B68: 211105 00                  uv 00 21  1 1150      
    mov [ebp-4] (asCh), dword -1          ;#00446B6B: 307105 FC FFFFFFFF         vu 00 20  1 1150      
    mov [ebp+28] (retaddr),#00446B7E      ;#00446B72: 307105 1C 7E6B4400         uv 00 20  1 1151      
    jmp #0045471E (code:sprint)           ;#00446B79: 351 A0DB0000               v  00 00  1 1151      
    push eax                              ;#00446B7E: 120                        uv 00 01  1 1152      
    mov ecx,[ebp-32] (o)                  ;#00446B7F: 213115 E0                  vu 02 20  1 1152      
    cmp ecx,h4                            ;#00446B82: 201371 00000040            uv 00 02  1 1153      
    jle #00446B98                         ;#00446B88: 176 0E                     v  00 00  1 1153      
    sub dword[ebx+ecx*4-8],1              ;#00446B8A: 203154213 F8 01            u  00 0A  3 1154      
    jne #00446B98                         ;#00446B8F: 165 07                     v  00 00  1 1156      
    mov edx,ecx                           ;#00446B91: 213321                     uv 04 02  1 1157      
    call #004639A8 (:%pDealloc)           ;#00446B93: 350 10CE0100               v  00 00  1 1157      
    pop dword[ebp-32] (o)                 ;#00446B98: 217105 E0                  np 00 20  3 1158      
    jmp #00446E35                         ;#00446B9B: 351 95020000               v  00 00  1 1161      
;   940                     elsif fi='V' then
    cmp eax,86                            ;#00446BA0: 203370 56                  uv 00 01  1 1162      
    jne #00446C03                         ;#00446BA3: 165 5E                     v  00 00  1 1162      
;   941                         o = sprint(o)
    mov ecx,13                            ;#00446BA5: 271 0D000000               uv 02 00  1 1163      
    mov edx,212                           ;#00446BAA: 272 D4000000               vu 04 00  1 1163      
    call #00462C02 (:%opFrame) (sprint)   ;#00446BAF: 350 4EC00100               v  00 00  1 1164      
    mov edi,[ebp+20] (prevebp)            ;#00446BB4: 213175 14                  uv 80 20  1 1165      
    mov eax,[edi-32]                      ;#00446BB7: 213107 E0                  uv 01 80  1 1168 80 *80*
    mov [edi-32], dword h4                ;#00446BBA: 307107 E0 00000040         vu 00 80  1 1168      
    cmp eax,h4                            ;#00446BC1: 075 00000040               uv 00 01  1 1169      
    jne #00446BD2                         ;#00446BC6: 165 0A                     v  00 00  1 1169      
    mov esi,650                           ;#00446BC8: 276 8A020000               uv 40 00  1 1170      
    call #00462744 (:%pUnassigned)        ;#00446BCD: 350 72BB0100               v  00 00  1 1170      
    mov [ebp] (x),eax                     ;#00446BD2: 211105 00                  uv 00 21  1 1171      
    mov [ebp+28] (retaddr),#00446BE1      ;#00446BD5: 307105 1C E16B4400         vu 00 20  1 1171      
    jmp #0045471E (code:sprint)           ;#00446BDC: 351 3DDB0000               v  00 00  1 1172      
    push eax                              ;#00446BE1: 120                        uv 00 01  1 1173      
    mov edi,[ebp-32] (o)                  ;#00446BE2: 213175 E0                  vu 80 20  1 1173      
    cmp edi,h4                            ;#00446BE5: 201377 00000040            uv 00 80  1 1174      
    jle #00446BFB                         ;#00446BEB: 176 0E                     v  00 00  1 1174      
    sub dword[ebx+edi*4-8],1              ;#00446BED: 203154273 F8 01            u  00 88  3 1175      
    jne #00446BFB                         ;#00446BF2: 165 07                     v  00 00  1 1177      
    mov edx,edi                           ;#00446BF4: 213327                     uv 04 80  1 1178      
    call #004639A8 (:%pDealloc)           ;#00446BF6: 350 ADCD0100               v  00 00  1 1178      
    pop dword[ebp-32] (o)                 ;#00446BFB: 217105 E0                  np 00 20  3 1179      
;   942                         -- aside: in the following if construct, only the  
;   943                         -- last (ie precision) branch is relevant to %v.
    jmp #00446E35                         ;#00446BFE: 351 32020000               v  00 00  1 1182      
;   944                     elsif fi='R' then
    cmp eax,82                            ;#00446C03: 203370 52                  uv 00 01  1 1183      
    jne #00446C6F                         ;#00446C06: 165 67                     v  00 00  1 1183      
;   945                         o = toRoman(o,lowerHex)
    mov ecx,11                            ;#00446C08: 271 0B000000               uv 02 00  1 1184      
    mov edx,621                           ;#00446C0D: 272 6D020000               vu 04 00  1 1184      
    call #00462C02 (:%opFrame) (toRoman)  ;#00446C12: 350 EBBF0100               v  00 00  1 1185      
    mov edi,[ebp+20] (prevebp)            ;#00446C17: 213175 14                  uv 80 20  1 1186      
    mov eax,[edi-32]                      ;#00446C1A: 213107 E0                  uv 01 80  1 1189 80 *80*
    mov [edi-32], dword h4                ;#00446C1D: 307107 E0 00000040         vu 00 80  1 1189      
    cmp eax,h4                            ;#00446C24: 075 00000040               uv 00 01  1 1190      
    jne #00446C35                         ;#00446C29: 165 0A                     v  00 00  1 1190      
    mov esi,650                           ;#00446C2B: 276 8A020000               uv 40 00  1 1191      
    call #00462744 (:%pUnassigned)        ;#00446C30: 350 0FBB0100               v  00 00  1 1191      
    mov [ebp] (n),eax                     ;#00446C35: 211105 00                  uv 00 21  1 1192      
    mov edi,[ebp+20] (prevebp)            ;#00446C38: 213175 14                  vu 80 20  1 1192      
    mov eax,[edi-60]                      ;#00446C3B: 213107 C4                  uv 01 80  1 1195    *80*
    mov [ebp-4] (lowercase),eax           ;#00446C3E: 211105 FC                  uv 00 21  1 1196 01   
    mov [ebp+28] (retaddr),#00446C4D      ;#00446C41: 307105 1C 4D6C4400         vu 00 20  1 1196      
    jmp #00449A1C (code:toRoman)          ;#00446C48: 351 CF2D0000               v  00 00  1 1197      
    push eax                              ;#00446C4D: 120                        uv 00 01  1 1198      
    mov esi,[ebp-32] (o)                  ;#00446C4E: 213165 E0                  vu 40 20  1 1198      
    cmp esi,h4                            ;#00446C51: 201376 00000040            uv 00 40  1 1199      
    jle #00446C67                         ;#00446C57: 176 0E                     v  00 00  1 1199      
    sub dword[ebx+esi*4-8],1              ;#00446C59: 203154263 F8 01            u  00 48  3 1200      
    jne #00446C67                         ;#00446C5E: 165 07                     v  00 00  1 1202      
    mov edx,esi                           ;#00446C60: 213326                     uv 04 40  1 1203      
    call #004639A8 (:%pDealloc)           ;#00446C62: 350 41CD0100               v  00 00  1 1203      
    pop dword[ebp-32] (o)                 ;#00446C67: 217105 E0                  np 00 20  3 1204      
    jmp #00446E35                         ;#00446C6A: 351 C6010000               v  00 00  1 1207      
;   946                     elsif fi='t' then
    cmp eax,116                           ;#00446C6F: 203370 74                  uv 00 01  1 1208      
    jne #00446D23                         ;#00446C72: 017205 AB000000            v  00 00  1 1208      
;   947                         o = iff(o?"true":"false")
    mov eax,[ebp-32] (o)                  ;#00446C78: 213105 E0                  uv 01 20  1 1209      
    mov edx,650                           ;#00446C7B: 272 8A020000               vu 04 00  1 1209      
    call #0045F94C (:%opJif)              ;#00446C80: 350 C78C0100               v  00 00  1 1210      
    je #00446CBC                          ;#00446C85: 164 35                     v  00 00  1 1211      
    mov ecx,[#00402328]                   ;#00446C87: 213015 28234000            uv 02 00  1 1212      
    mov edx,[ebp-188] (symtab[717])       ;#00446C8D: 213225 44FFFFFF            vu 04 20  1 1212      
    cmp ecx,h4                            ;#00446C93: 201371 00000040            uv 00 02  1 1213      
    jl #00446CA0                          ;#00446C99: 174 05                     v  00 00  1 1213      
    add dword[ebx+ecx*4-8],1              ;#00446C9B: 203104213 F8 01            u  00 0A  3 1214      
    mov [ebp-188] (symtab[717]),ecx       ;#00446CA0: 211215 44FFFFFF            vu 00 22  1 1216      
    cmp edx,h4                            ;#00446CA6: 201372 00000040            uv 00 04  1 1217      
    jle #00446CEF                         ;#00446CAC: 176 41                     v  00 00  1 1217      
    sub dword[ebx+edx*4-8],1              ;#00446CAE: 203154223 F8 01            u  00 0C  3 1218      
    jne #00446CEF                         ;#00446CB3: 165 3A                     v  00 00  1 1220      
    call #004639A8 (:%pDealloc)           ;#00446CB5: 350 EECC0100               v  00 00  1 1221      
    jmp #00446CEF                         ;#00446CBA: 353 33                     v  00 00  1 1222      
    mov edi,[#0040232C]                   ;#00446CBC: 213075 2C234000            uv 80 00  1 1223      
    mov edx,[ebp-188] (symtab[717])       ;#00446CC2: 213225 44FFFFFF            vu 04 20  1 1223      
    cmp edi,h4                            ;#00446CC8: 201377 00000040            uv 00 80  1 1224      
    jl #00446CD5                          ;#00446CCE: 174 05                     v  00 00  1 1224      
    add dword[ebx+edi*4-8],1              ;#00446CD0: 203104273 F8 01            u  00 88  3 1225      
    mov [ebp-188] (symtab[717]),edi       ;#00446CD5: 211275 44FFFFFF            vu 00 A0  1 1227      
    cmp edx,h4                            ;#00446CDB: 201372 00000040            uv 00 04  1 1228      
    jle #00446CEF                         ;#00446CE1: 176 0C                     v  00 00  1 1228      
    sub dword[ebx+edx*4-8],1              ;#00446CE3: 203154223 F8 01            u  00 0C  3 1229      
    jne #00446CEF                         ;#00446CE8: 165 05                     v  00 00  1 1231      
    call #004639A8 (:%pDealloc)           ;#00446CEA: 350 B9CC0100               v  00 00  1 1232      
    mov esi,[ebp-188] (symtab[717])       ;#00446CEF: 213265 44FFFFFF            uv 40 20  1 1233      
    mov eax,[ebp-32] (o)                  ;#00446CF5: 213105 E0                  vu 01 20  1 1233      
    mov [ebp-188] (symtab[717]),ebx       ;#00446CF8: 211235 44FFFFFF            uv 00 28  1 1234      
    cmp eax,h4                            ;#00446CFE: 075 00000040               vu 00 01  1 1234      
    mov [ebp-32] (o),esi                  ;#00446D03: 211165 E0                  uv 00 60  1 1235      
    jle #00446E35                         ;#00446D06: 017216 29010000            v  00 00  1 1235      
    sub dword[ebx+eax*4-8],1              ;#00446D0C: 203154203 F8 01            u  00 09  3 1236      
    jne #00446E35                         ;#00446D11: 017205 1E010000            v  00 00  1 1238      
    mov edx,eax                           ;#00446D17: 213320                     uv 04 01  1 1239      
    call #004639A8 (:%pDealloc)           ;#00446D19: 350 8ACC0100               v  00 00  1 1239      
    jmp #00446E35                         ;#00446D1E: 351 12010000               v  00 00  1 1240      
;   948                     elsif fi='n' then
    cmp eax,110                           ;#00446D23: 203370 6E                  uv 00 01  1 1241      
    jne #00446DCC                         ;#00446D26: 017205 A0000000            v  00 00  1 1241      
;   949                         o = iff(o?"\n":"")
    mov eax,[ebp-32] (o)                  ;#00446D2C: 213105 E0                  uv 01 20  1 1242      
    mov edx,650                           ;#00446D2F: 272 8A020000               vu 04 00  1 1242      
    call #0045F94C (:%opJif)              ;#00446D34: 350 138C0100               v  00 00  1 1243      
    je #00446D70                          ;#00446D39: 164 35                     v  00 00  1 1244      
    mov ecx,[#00402330]                   ;#00446D3B: 213015 30234000            uv 02 00  1 1245      
    mov edx,[ebp-192] (symtab[720])       ;#00446D41: 213225 40FFFFFF            vu 04 20  1 1245      
    cmp ecx,h4                            ;#00446D47: 201371 00000040            uv 00 02  1 1246      
    jl #00446D54                          ;#00446D4D: 174 05                     v  00 00  1 1246      
    add dword[ebx+ecx*4-8],1              ;#00446D4F: 203104213 F8 01            u  00 0A  3 1247      
    mov [ebp-192] (symtab[720]),ecx       ;#00446D54: 211215 40FFFFFF            vu 00 22  1 1249      
    cmp edx,h4                            ;#00446D5A: 201372 00000040            uv 00 04  1 1250      
    jle #00446DA3                         ;#00446D60: 176 41                     v  00 00  1 1250      
    sub dword[ebx+edx*4-8],1              ;#00446D62: 203154223 F8 01            u  00 0C  3 1251      
    jne #00446DA3                         ;#00446D67: 165 3A                     v  00 00  1 1253      
    call #004639A8 (:%pDealloc)           ;#00446D69: 350 3ACC0100               v  00 00  1 1254      
    jmp #00446DA3                         ;#00446D6E: 353 33                     v  00 00  1 1255      
    mov edi,[#004022A4]                   ;#00446D70: 213075 A4224000            uv 80 00  1 1256      
    mov edx,[ebp-192] (symtab[720])       ;#00446D76: 213225 40FFFFFF            vu 04 20  1 1256      
    cmp edi,h4                            ;#00446D7C: 201377 00000040            uv 00 80  1 1257      
    jl #00446D89                          ;#00446D82: 174 05                     v  00 00  1 1257      
    add dword[ebx+edi*4-8],1              ;#00446D84: 203104273 F8 01            u  00 88  3 1258      
    mov [ebp-192] (symtab[720]),edi       ;#00446D89: 211275 40FFFFFF            vu 00 A0  1 1260      
    cmp edx,h4                            ;#00446D8F: 201372 00000040            uv 00 04  1 1261      
    jle #00446DA3                         ;#00446D95: 176 0C                     v  00 00  1 1261      
    sub dword[ebx+edx*4-8],1              ;#00446D97: 203154223 F8 01            u  00 0C  3 1262      
    jne #00446DA3                         ;#00446D9C: 165 05                     v  00 00  1 1264      
    call #004639A8 (:%pDealloc)           ;#00446D9E: 350 05CC0100               v  00 00  1 1265      
    mov esi,[ebp-192] (symtab[720])       ;#00446DA3: 213265 40FFFFFF            uv 40 20  1 1266      
    mov eax,[ebp-32] (o)                  ;#00446DA9: 213105 E0                  vu 01 20  1 1266      
    mov [ebp-192] (symtab[720]),ebx       ;#00446DAC: 211235 40FFFFFF            uv 00 28  1 1267      
    cmp eax,h4                            ;#00446DB2: 075 00000040               vu 00 01  1 1267      
    mov [ebp-32] (o),esi                  ;#00446DB7: 211165 E0                  uv 00 60  1 1268      
    jle #00446E35                         ;#00446DBA: 176 79                     v  00 00  1 1268      
    sub dword[ebx+eax*4-8],1              ;#00446DBC: 203154203 F8 01            u  00 09  3 1269      
    jne #00446E35                         ;#00446DC1: 165 72                     v  00 00  1 1271      
    mov edx,eax                           ;#00446DC3: 213320                     uv 04 01  1 1272      
    call #004639A8 (:%pDealloc)           ;#00446DC5: 350 DECB0100               v  00 00  1 1272      
    jmp #00446E35                         ;#00446DCA: 353 69                     v  00 00  1 1273      
;   950                     elsif enquote then
    mov ecx,[ebp-84] (enquote)            ;#00446DCC: 213115 AC                  uv 02 20  1 1274      
    test ecx,ecx                          ;#00446DCF: 205311                     uv 00 02  1 1275 02   
    je #00446E35                          ;#00446DD1: 164 62                     v  00 00  1 1275      
;   951                         o = allascii(o,enquote)
    mov ecx,12                            ;#00446DD3: 271 0C000000               uv 02 00  1 1276      
    mov edx,592                           ;#00446DD8: 272 50020000               vu 04 00  1 1276      
    call :%opFrame (allascii)             ;#00446DDD: 350 20BE0100               v  00 00  1 1277      
    mov edi,[ebp+20] (prevebp)            ;#00446DE2: 213175 14                  uv 80 20  1 1278      
    mov eax,[edi-32]                      ;#00446DE5: 213107 E0                  uv 01 80  1 1281 80 *80*
    mov [edi-32], dword h4                ;#00446DE8: 307107 E0 00000040         vu 00 80  1 1281      
    cmp eax,h4                            ;#00446DEF: 075 00000040               uv 00 01  1 1282      
    jne #00446E00                         ;#00446DF4: 165 0A                     v  00 00  1 1282      
    mov esi,650                           ;#00446DF6: 276 8A020000               uv 40 00  1 1283      
    call #00462744 (:%pUnassigned)        ;#00446DFB: 350 44B90100               v  00 00  1 1283      
    mov [ebp] (x),eax                     ;#00446E00: 211105 00                  uv 00 21  1 1284      
    mov edi,[ebp+20] (prevebp)            ;#00446E03: 213175 14                  vu 80 20  1 1284      
    mov eax,[edi-84]                      ;#00446E06: 213107 AC                  uv 01 80  1 1287    *80*
    mov [ebp-4] (enquote),eax             ;#00446E09: 211105 FC                  uv 00 21  1 1288 01   
    mov [ebp+28] (retaddr),#00446E18      ;#00446E0C: 307105 1C 186E4400         vu 00 20  1 1288      
    jmp #00449755 (code:allascii)         ;#00446E13: 351 3D290000               v  00 00  1 1289      
    push eax                              ;#00446E18: 120                        uv 00 01  1 1290      
    mov edi,[ebp-32] (o)                  ;#00446E19: 213175 E0                  vu 80 20  1 1290      
    cmp edi,h4                            ;#00446E1C: 201377 00000040            uv 00 80  1 1291      
    jle #00446E32                         ;#00446E22: 176 0E                     v  00 00  1 1291      
    sub dword[ebx+edi*4-8],1              ;#00446E24: 203154273 F8 01            u  00 88  3 1292      
    jne #00446E32                         ;#00446E29: 165 07                     v  00 00  1 1294      
    mov edx,edi                           ;#00446E2B: 213327                     uv 04 80  1 1295      
    call #004639A8 (:%pDealloc)           ;#00446E2D: 350 76CB0100               v  00 00  1 1295      
    pop dword[ebp-32] (o)                 ;#00446E32: 217105 E0                  np 00 20  3 1296      
;   952                     end if
;   953                     if atom(o) then
    mov esi,[ebp-32] (o)                  ;#00446E35: 213165 E0                  uv 40 20  1 1299      
    cmp esi,h4                            ;#00446E38: 201376 00000040            uv 00 40  1 1300 40   
    jne #00446E4A                         ;#00446E3E: 165 0A                     v  00 00  1 1300      
    mov esi,650                           ;#00446E40: 276 8A020000               uv 40 00  1 1301      
    call #00462744 (:%pUnassigned)        ;#00446E45: 350 FAB80100               v  00 00  1 1301      
    mov eax,esi                           ;#00446E4A: 211360                     uv 01 40  1 1302      
    mov ecx,650                           ;#00446E4C: 271 8A020000               vu 02 00  1 1302      
    call #0045F9B0 (:%opAtom0)            ;#00446E51: 350 5A8B0100               v  00 00  1 1303      
    test edx,edx                          ;#00446E56: 205322                     uv 00 04  1 1304      
    je #00447009                          ;#00446E58: 017204 AB010000            v  00 00  1 1304      
;   954 --15/4/24:
;   955                         if fi='c' and integer(o) and o>#7F and o<=#10FFFF then
    mov ecx,[ebp-12] (fi)                 ;#00446E5E: 213115 F4                  uv 02 20  1 1305      
    cmp ecx,99                            ;#00446E61: 203371 63                  uv 00 02  1 1306 02   
    jne #00446F6E                         ;#00446E64: 017205 04010000            v  00 00  1 1306      
    cmp eax,h4                            ;#00446E6A: 075 00000040               uv 00 01  1 1307      
    jne #00446E7B                         ;#00446E6F: 165 0A                     v  00 00  1 1307      
    mov esi,650                           ;#00446E71: 276 8A020000               uv 40 00  1 1308      
    call #00462744 (:%pUnassigned)        ;#00446E76: 350 C9B80100               v  00 00  1 1308      
    mov ecx,650                           ;#00446E7B: 271 8A020000               uv 02 00  1 1309      
    call #0045F9A0 (:%opInt0)             ;#00446E80: 350 1B8B0100               v  00 00  1 1309      
    test edx,edx                          ;#00446E85: 205322                     uv 00 04  1 1310      
    je #00446F6E                          ;#00446E87: 017204 E1000000            v  00 00  1 1310      
    mov edi,127                           ;#00446E8D: 277 7F000000               uv 80 00  1 1311      
    mov esi,723                           ;#00446E92: 276 D3020000               vu 40 00  1 1311      
    mov edx,650                           ;#00446E97: 272 8A020000               uv 04 00  1 1312      
    call #0045F8B0 (:%opJcc)              ;#00446E9C: 350 0F8A0100               v  00 00  1 1312      
    jle #00446F6E                         ;#00446EA1: 017216 C7000000            v  00 00  1 1313      
    mov edi,1114111                       ;#00446EA7: 277 FFFF1000               uv 80 00  1 1314      
    mov eax,[ebp-32] (o)                  ;#00446EAC: 213105 E0                  vu 01 20  1 1314      
    mov esi,724                           ;#00446EAF: 276 D4020000               uv 40 00  1 1315      
    mov edx,650                           ;#00446EB4: 272 8A020000               vu 04 00  1 1315      
    call #0045F8B0 (:%opJcc)              ;#00446EB9: 350 F2890100               v  00 00  1 1316      
    jg #00446F6E                          ;#00446EBE: 017217 AA000000            v  00 00  1 1317      
;   956                             r1 = utf32_to_utf8({o})
    lea eax,[ebp-116] (symtab[674])       ;#00446EC4: 215105 8C                  uv 01 20  1 1318      
    mov edx,1                             ;#00446EC7: 272 01000000               vu 04 00  1 1318      
    push #00446EF0                        ;#00446ECC: 150 F06E4400               uv 00 00  1 1319      
    push eax                              ;#00446ED1: 120                        vu 00 01  1 1319      
    mov edi,[ebp-32] (o)                  ;#00446ED2: 213175 E0                  uv 80 20  1 1320      
    cmp edi,h4                            ;#00446ED5: 201377 00000040            uv 00 80  1 1321 80   
    jl #00446EE7                          ;#00446EDB: 174 0A                     v  00 00  1 1321      
    add dword[ebx+edi*4-8],1              ;#00446EDD: 203104273 F8 01            u  00 88  3 1322      
    cmp eax,650                           ;#00446EE2: 075 8A020000               vu 00 01  1 1324      
    push edi                              ;#00446EE7: 127                        uv 00 80  1 1325      
    mov edi,[ebp-116] (symtab[674])       ;#00446EE8: 213175 8C                  vu 80 20  1 1325      
    jmp #00460143 (:%pMkSq)               ;#00446EEB: 351 53920100               v  00 00  1 1326      
    mov ecx,12                            ;#00446EF0: 271 0C000000               uv 02 00  1 1327      
    mov edx,392                           ;#00446EF5: 272 88010000               vu 04 00  1 1327      
    call :%opFrame (utf32_to_utf8)        ;#00446EFA: 350 03BD0100               v  00 00  1 1328      
    mov edi,[ebp+20] (prevebp)            ;#00446EFF: 213175 14                  uv 80 20  1 1329      
    mov eax,[edi-116]                     ;#00446F02: 213107 8C                  uv 01 80  1 1332 80 *80*
    mov [edi-116], dword h4               ;#00446F05: 307107 8C 00000040         vu 00 80  1 1332      
    cmp eax,h4                            ;#00446F0C: 075 00000040               uv 00 01  1 1333      
    jne #00446F1D                         ;#00446F11: 165 0A                     v  00 00  1 1333      
    mov esi,674                           ;#00446F13: 276 A2020000               uv 40 00  1 1334      
    call #00462744 (:%pUnassigned)        ;#00446F18: 350 27B80100               v  00 00  1 1334      
    mov [ebp] (utf32),eax                 ;#00446F1D: 211105 00                  uv 00 21  1 1335      
    mov [ebp+28] (retaddr),#00446F2C      ;#00446F20: 307105 1C 2C6F4400         vu 00 20  1 1335      
    jmp #0044BEA4 (code:utf32_to_utf8)    ;#00446F27: 351 784F0000               v  00 00  1 1336      
    push eax                              ;#00446F2C: 120                        uv 00 01  1 1337      
    mov esi,[ebp-28] (r1)                 ;#00446F2D: 213165 E4                  vu 40 20  1 1337      
    cmp esi,h4                            ;#00446F30: 201376 00000040            uv 00 40  1 1338      
    jle #00446F46                         ;#00446F36: 176 0E                     v  00 00  1 1338      
    sub dword[ebx+esi*4-8],1              ;#00446F38: 203154263 F8 01            u  00 48  3 1339      
    jne #00446F46                         ;#00446F3D: 165 07                     v  00 00  1 1341      
    mov edx,esi                           ;#00446F3F: 213326                     uv 04 40  1 1342      
    call #004639A8 (:%pDealloc)           ;#00446F41: 350 62CA0100               v  00 00  1 1342      
    pop dword[ebp-28] (r1)                ;#00446F46: 217105 E4                  np 00 20  3 1343      
    mov ecx,[ebp-28] (r1)                 ;#00446F49: 213115 E4                  uv 02 20  1 1346      
    cmp ecx,h4                            ;#00446F4C: 201371 00000040            uv 00 02  1 1347 02   
    jl #00446F5F                          ;#00446F52: 174 0B                     v  00 00  1 1347      
    cmp byte[ebx+ecx*4-1],#82             ;#00446F54: 200174213 FF 82            u  00 0A  2 1348      
    je #00447B8D                          ;#00446F59: 017204 2E0C0000            v  00 00  1 1349      
    mov ecx,649                           ;#00446F5F: 271 89020000               uv 02 00  1 1350      
    call #00462D8D (:%opTcFail)           ;#00446F64: 350 24BE0100               v  00 00  1 1350      
    jmp #00447B8D                         ;#00446F69: 351 1F0C0000               v  00 00  1 1351      
;   957                         else
;   958 --                          r1 = " "
;   959                             r1 = repeat(' ',1)
    mov ecx,6                             ;#00446F6E: 271 06000000               uv 02 00  1 1352      
    mov edx,206                           ;#00446F73: 272 CE000000               vu 04 00  1 1352      
    call :%opFrame (repeatch)             ;#00446F78: 350 85BC0100               v  00 00  1 1353      
    mov [ebp] (ch), dword 32              ;#00446F7D: 307105 00 20000000         uv 00 20  1 1354      
    mov [ebp-4] (n), dword 1              ;#00446F84: 307105 FC 01000000         vu 00 20  1 1354      
    mov [ebp+28] (retaddr),#00446F97      ;#00446F8B: 307105 1C 976F4400         uv 00 20  1 1355      
    jmp #0045581E (code:repeatch)         ;#00446F92: 351 87E80000               v  00 00  1 1355      
    push eax                              ;#00446F97: 120                        uv 00 01  1 1356      
    mov edi,[ebp-28] (r1)                 ;#00446F98: 213175 E4                  vu 80 20  1 1356      
    cmp edi,h4                            ;#00446F9B: 201377 00000040            uv 00 80  1 1357      
    jle #00446FB1                         ;#00446FA1: 176 0E                     v  00 00  1 1357      
    sub dword[ebx+edi*4-8],1              ;#00446FA3: 203154273 F8 01            u  00 88  3 1358      
    jne #00446FB1                         ;#00446FA8: 165 07                     v  00 00  1 1360      
    mov edx,edi                           ;#00446FAA: 213327                     uv 04 80  1 1361      
    call #004639A8 (:%pDealloc)           ;#00446FAC: 350 F7C90100               v  00 00  1 1361      
    pop dword[ebp-28] (r1)                ;#00446FB1: 217105 E4                  np 00 20  3 1362      
;   960                             r1[1] = and_bits(#FF,o) -- (nb: keeps r1 a string)
    lea edi,[ebp-168] (symtab[709])       ;#00446FB4: 215275 58FFFFFF            uv 80 20  1 1365      
    mov ecx,[#0040225C]                   ;#00446FBA: 213015 5C224000            vu 02 00  1 1365      
    mov eax,[ebp-32] (o)                  ;#00446FC0: 213105 E0                  uv 01 20  1 1366      
    call #0045F45E (:%opAndBits)          ;#00446FC3: 350 96840100               v  00 00  1 1366      
    mov edi,[#0040201C]                   ;#00446FC8: 213075 1C204000            uv 80 00  1 1367      
    mov ecx,[ebp-168] (symtab[709])       ;#00446FCE: 213215 58FFFFFF            vu 02 20  1 1367      
    mov esi,[ebp-28] (r1)                 ;#00446FD4: 213165 E4                  uv 40 20  1 1368      
    lea eax,[ebp-28] (r1)                 ;#00446FD7: 215105 E4                  vu 01 20  1 1368      
    call #004607F3 (:%pRepe1)             ;#00446FDA: 350 14980100               v  00 00  1 1369      
    mov [ebp-168] (symtab[709]),ebx       ;#00446FDF: 211235 58FFFFFF            uv 00 28  1 1370      
    mov eax,[ebp-28] (r1)                 ;#00446FE5: 213105 E4                  vu 01 20  1 1370      
    cmp eax,h4                            ;#00446FE8: 075 00000040               uv 00 01  1 1371      
    jl #00446FFA                          ;#00446FED: 174 0B                     v  00 00  1 1371      
    cmp byte[ebx+eax*4-1],#82             ;#00446FEF: 200174203 FF 82            u  00 09  2 1372      
    je #00447B8D                          ;#00446FF4: 017204 930B0000            v  00 00  1 1373      
    mov ecx,649                           ;#00446FFA: 271 89020000               uv 02 00  1 1374      
    call #00462D8D (:%opTcFail)           ;#00446FFF: 350 89BD0100               v  00 00  1 1374      
;   961                         end if
;   962 --                  elsif fidx=6 then -- 'c'
    jmp #00447B8D                         ;#00447004: 351 840B0000               v  00 00  1 1375      
;   963                     elsif fi='c' then
    mov edi,[ebp-12] (fi)                 ;#00447009: 213175 F4                  uv 80 20  1 1376      
    cmp edi,99                            ;#0044700C: 203377 63                  uv 00 80  1 1377 80   
    jne #00447023                         ;#0044700F: 165 12                     v  00 00  1 1377      
;   964 --/**/                  #ilASM{ mov al,76                           -- Phix
    mov al,76                             ;#00447011: 260 4C                     uv 01 00  1 1378      
;   965 --!/**/                         xor edi,edi         -- ep1 unused   -- Phix
;   966 --!/**/                         xor esi,esi         -- ep2 unused   -- Phix
;   967 --!/**/                         call :%pRTErn }     -- fatal error  -- Phix
;   968 --/**/                          mov ecx,2                           -- Phix
    mov ecx,2                             ;#00447013: 271 02000000               vu 02 00  1 1378      
;   969 --/**/                          jmp :!fatalN                        -- Phix
    jmp #00463E59 (:!fatalN)              ;#00447018: 351 3CCE0100               v  00 00  1 1379      
;   970 --/**/                          int3 }                              -- Phix
    int3                                  ;#0044701D: 314                        np 00 00 13 1380      
;   971 --/**/                                                      --/*    -- Phix
;   972                         puts(1,"%c requires an atom value\n")       -- RDS
;   973                         if getc(0) then end if                      -- RDS
;   974                         abort(1)                                    -- RDS --*/
    jmp #00447B8D                         ;#0044701E: 351 6A0B0000               v  00 00  1 1393      
;   975                     elsif not string(o) then
    cmp eax,h4                            ;#00447023: 075 00000040               uv 00 01  1 1394      
    jne #00447034                         ;#00447028: 165 0A                     v  00 00  1 1394      
    mov esi,650                           ;#0044702A: 276 8A020000               uv 40 00  1 1395      
    call #00462744 (:%pUnassigned)        ;#0044702F: 350 10B70100               v  00 00  1 1395      
    mov ecx,650                           ;#00447034: 271 8A020000               uv 02 00  1 1396      
    call #0045F9C4 (:%opStr0)             ;#00447039: 350 86890100               v  00 00  1 1396      
    test edx,edx                          ;#0044703E: 205322                     uv 00 04  1 1397      
    jne #00447220                         ;#00447040: 017205 DA010000            v  00 00  1 1397      
;   976                         if precision!=-1 and precision<length(o) then
    mov ecx,[ebp-96] (precision)          ;#00447046: 213115 A0                  uv 02 20  1 1398      
    cmp ecx,-1                            ;#00447049: 203371 FF                  uv 00 02  1 1399 02   
    je #004470B7                          ;#0044704C: 164 69                     v  00 00  1 1399      
    lea edi,[ebp-168] (symtab[709])       ;#0044704E: 215275 58FFFFFF            uv 80 20  1 1400      
    mov esi,eax                           ;#00447054: 211306                     vu 40 01  1 1400      
    mov edx,650                           ;#00447056: 272 8A020000               uv 04 00  1 1401      
    call #0045EFEC (:%opLen)              ;#0044705B: 350 8C7F0100               v  00 00  1 1401      
    mov esi,[ebp-96] (precision)          ;#00447060: 213165 A0                  uv 40 20  1 1402      
    mov edi,[ebp-168] (symtab[709])       ;#00447063: 213275 58FFFFFF            vu 80 20  1 1402      
    cmp esi,edi                           ;#00447069: 071376                     uv 00 C0  1 1403      
    jge #004470B7                         ;#0044706B: 175 4A                     v  00 00  1 1403      
;   977                             r1 = repeat(' ',precision)
    mov ecx,6                             ;#0044706D: 271 06000000               uv 02 00  1 1404      
    mov edx,206                           ;#00447072: 272 CE000000               vu 04 00  1 1404      
    call :%opFrame (repeatch)             ;#00447077: 350 86BB0100               v  00 00  1 1405      
    mov [ebp] (ch), dword 32              ;#0044707C: 307105 00 20000000         uv 00 20  1 1406      
    mov edi,[ebp+20] (prevebp)            ;#00447083: 213175 14                  vu 80 20  1 1406      
    mov eax,[edi-96]                      ;#00447086: 213107 A0                  uv 01 80  1 1409    *80*
    mov [ebp-4] (n),eax                   ;#00447089: 211105 FC                  uv 00 21  1 1410 01   
    mov [ebp+28] (retaddr),#00447098      ;#0044708C: 307105 1C 98704400         vu 00 20  1 1410      
    jmp #0045581E (code:repeatch)         ;#00447093: 351 86E70000               v  00 00  1 1411      
    push eax                              ;#00447098: 120                        uv 00 01  1 1412      
    mov ecx,[ebp-28] (r1)                 ;#00447099: 213115 E4                  vu 02 20  1 1412      
    cmp ecx,h4                            ;#0044709C: 201371 00000040            uv 00 02  1 1413      
    jle #004470B2                         ;#004470A2: 176 0E                     v  00 00  1 1413      
    sub dword[ebx+ecx*4-8],1              ;#004470A4: 203154213 F8 01            u  00 0A  3 1414      
    jne #004470B2                         ;#004470A9: 165 07                     v  00 00  1 1416      
    mov edx,ecx                           ;#004470AB: 213321                     uv 04 02  1 1417      
    call #004639A8 (:%pDealloc)           ;#004470AD: 350 F6C80100               v  00 00  1 1417      
    pop dword[ebp-28] (r1)                ;#004470B2: 217105 E4                  np 00 20  3 1418      
    jmp #00447115                         ;#004470B5: 353 5E                     v  00 00  1 1421      
;   978                         else
;   979                             r1 = repeat(' ',length(o))
    lea edi,[ebp-168] (symtab[709])       ;#004470B7: 215275 58FFFFFF            uv 80 20  1 1422      
    mov esi,[ebp-32] (o)                  ;#004470BD: 213165 E0                  vu 40 20  1 1422      
    mov edx,650                           ;#004470C0: 272 8A020000               uv 04 00  1 1423      
    call #0045EFEC (:%opLen)              ;#004470C5: 350 227F0100               v  00 00  1 1423      
    mov ecx,6                             ;#004470CA: 271 06000000               uv 02 00  1 1424      
    mov edx,206                           ;#004470CF: 272 CE000000               vu 04 00  1 1424      
    call :%opFrame (repeatch)             ;#004470D4: 350 29BB0100               v  00 00  1 1425      
    mov [ebp] (ch), dword 32              ;#004470D9: 307105 00 20000000         uv 00 20  1 1426      
    mov edi,[ebp+20] (prevebp)            ;#004470E0: 213175 14                  vu 80 20  1 1426      
    mov eax,[edi-168]                     ;#004470E3: 213207 58FFFFFF            uv 01 80  1 1429    *80*
    mov [ebp-4] (n),eax                   ;#004470E9: 211105 FC                  uv 00 21  1 1430 01   
    mov [ebp+28] (retaddr),#004470F8      ;#004470EC: 307105 1C F8704400         vu 00 20  1 1430      
    jmp #0045581E (code:repeatch)         ;#004470F3: 351 26E70000               v  00 00  1 1431      
    push eax                              ;#004470F8: 120                        uv 00 01  1 1432      
    mov edi,[ebp-28] (r1)                 ;#004470F9: 213175 E4                  vu 80 20  1 1432      
    cmp edi,h4                            ;#004470FC: 201377 00000040            uv 00 80  1 1433      
    jle #00447112                         ;#00447102: 176 0E                     v  00 00  1 1433      
    sub dword[ebx+edi*4-8],1              ;#00447104: 203154273 F8 01            u  00 88  3 1434      
    jne #00447112                         ;#00447109: 165 07                     v  00 00  1 1436      
    mov edx,edi                           ;#0044710B: 213327                     uv 04 80  1 1437      
    call #004639A8 (:%pDealloc)           ;#0044710D: 350 96C80100               v  00 00  1 1437      
    pop dword[ebp-28] (r1)                ;#00447112: 217105 E4                  np 00 20  3 1438      
;   980                         end if
;   981                         for j=1 to length(r1) do
    lea edi,[ebp-168] (symtab[709])       ;#00447115: 215275 58FFFFFF            uv 80 20  1 1441      
    mov esi,[ebp-28] (r1)                 ;#0044711B: 213165 E4                  vu 40 20  1 1441      
    mov edx,649                           ;#0044711E: 272 89020000               uv 04 00  1 1442      
    call #0045EFEC (:%opLen)              ;#00447123: 350 C47E0100               v  00 00  1 1442      
    mov [ebp-184] (j), dword 1            ;#00447128: 307205 48FFFFFF 01000000   uv 00 20  1 1443      
    mov ecx,[ebp-168] (symtab[709])       ;#00447132: 213215 58FFFFFF            vu 02 20  1 1443      
    lea edx,[ecx+1]                       ;#00447138: 215121 01                  uv 04 02  1 1446    *02*
    shl edx,1                             ;#0044713B: 321342                     u  04 04  1 1447      
    jno #00447150                         ;#0044713D: 161 11                     v  00 00  1 1447      
    mov al,121                            ;#0044713F: 260 79                     uv 01 00  1 1448      
    mov edi,709                           ;#00447141: 277 C5020000               vu 80 00  1 1448      
    mov esi,26                            ;#00447146: 276 1A000000               uv 40 00  1 1449      
    call #004627AC (:%pRTErn)             ;#0044714B: 350 5CB60100               v  00 00  1 1449      
    cmp ecx,1                             ;#00447150: 201371 01000000            uv 00 02  1 1450      
    jl #00447B8D                          ;#00447156: 017214 310A0000            v  00 00  1 1450      
;   982                             oj = o[j]
    mov eax,[ebp-32] (o)                  ;#0044715C: 213105 E0                  uv 01 20  1 1451      
    cmp eax,h4                            ;#0044715F: 075 00000040               uv 00 01  1 1452 01   
    jne #00447170                         ;#00447164: 165 0A                     v  00 00  1 1452      
    mov esi,650                           ;#00447166: 276 8A020000               uv 40 00  1 1453      
    call #00462744 (:%pUnassigned)        ;#0044716B: 350 D4B50100               v  00 00  1 1453      
    mov edi,[ebp-184] (j)                 ;#00447170: 213275 48FFFFFF            uv 80 20  1 1454      
    lea ecx,[ebp-36] (oj)                 ;#00447176: 215115 DC                  vu 02 20  1 1454      
    mov esi,eax                           ;#00447179: 211306                     uv 40 01  1 1455      
    mov edx,650                           ;#0044717B: 272 8A020000               vu 04 00  1 1455      
    mov al,0                              ;#00447180: 260 00                     uv 01 00  1 1456      
    call #00460FE5 (:%pSubse1)            ;#00447182: 350 5E9E0100               v  00 00  1 1456      
;   983                             if not integer(oj) then
    mov esi,[ebp-36] (oj)                 ;#00447187: 213165 DC                  uv 40 20  1 1457      
    cmp esi,h4                            ;#0044718A: 201376 00000040            uv 00 40  1 1458 40   
    jl #0044719F                          ;#00447190: 174 0D                     v  00 00  1 1458      
;   984 --                          if not integer(oj) or oj<#07 or oj>#FF then
;   985 --/**/                          #ilASM{ mov al,65                               -- Phix
    mov al,65                             ;#00447192: 260 41                     uv 01 00  1 1459      
;   986 --!/**/                                 xor edi,edi         -- ep1 unused       -- Phix
;   987 --!/**/                                 xor esi,esi         -- ep2 unused       -- Phix
;   988 --!/**/                                 call :%pRTErn }     -- fatal error      -- Phix
;   989 --/**/                                  mov ecx,2                               -- Phix
    mov ecx,2                             ;#00447194: 271 02000000               vu 02 00  1 1459      
;   990 --/**/                                  jmp :!fatalN                            -- Phix
    jmp #00463E59 (:!fatalN)              ;#00447199: 351 BBCC0100               v  00 00  1 1460      
;   991 --/**/                                  int3 }                                  -- Phix
    int3                                  ;#0044719E: 314                        np 00 00 13 1461      
;   992 --/**/                                                                  --/*    -- Phix
;   993                                 puts(1,"sequence found in character string\n")  -- RDS
;   994                                 if getc(0) then end if                          -- RDS
;   995                                 abort(1)                                        -- RDS --*/
;   996                             end if
;   997 --                          r1[j] = oj
;   998                             r1[j] = and_bits(oj,#FF)
    lea edi,[ebp-172] (symtab[710])       ;#0044719F: 215275 54FFFFFF            uv 80 20  1 1474      
    mov ecx,[ebp-36] (oj)                 ;#004471A5: 213115 DC                  vu 02 20  1 1474      
    mov eax,[#0040225C]                   ;#004471A8: 241 5C224000               uv 01 00  1 1475      
    call #0045F45E (:%opAndBits)          ;#004471AD: 350 AC820100               v  00 00  1 1475      
    mov edi,[ebp-28] (r1)                 ;#004471B2: 213175 E4                  uv 80 20  1 1476      
    cmp edi,h4                            ;#004471B5: 201377 00000040            uv 00 80  1 1477 80   
    jne #004471C7                         ;#004471BB: 165 0A                     v  00 00  1 1477      
    mov esi,649                           ;#004471BD: 276 89020000               uv 40 00  1 1478      
    call #00462744 (:%pUnassigned)        ;#004471C2: 350 7DB50100               v  00 00  1 1478      
    mov esi,edi                           ;#004471C7: 211376                     uv 40 80  1 1479      
    mov edi,[ebp-184] (j)                 ;#004471C9: 213275 48FFFFFF            vu 80 20  1 1479      
    mov ecx,[ebp-172] (symtab[710])       ;#004471CF: 213215 54FFFFFF            uv 02 20  1 1480      
    lea eax,[ebp-28] (r1)                 ;#004471D5: 215105 E4                  vu 01 20  1 1480      
    call #004607F3 (:%pRepe1)             ;#004471D8: 350 16960100               v  00 00  1 1481      
    mov [ebp-172] (symtab[710]),ebx       ;#004471DD: 211235 54FFFFFF            uv 00 28  1 1482      
    mov eax,[ebp-28] (r1)                 ;#004471E3: 213105 E4                  vu 01 20  1 1482      
    cmp eax,h4                            ;#004471E6: 075 00000040               uv 00 01  1 1483      
    jl #004471F4                          ;#004471EB: 174 07                     v  00 00  1 1483      
    cmp byte[ebx+eax*4-1],#82             ;#004471ED: 200174203 FF 82            u  00 09  2 1484      
    je #004471FE                          ;#004471F2: 164 0A                     v  00 00  1 1485      
    mov ecx,649                           ;#004471F4: 271 89020000               uv 02 00  1 1486      
    call #00462D8D (:%opTcFail)           ;#004471F9: 350 8FBB0100               v  00 00  1 1486      
;   999                         end for
    mov esi,[ebp-184] (j)                 ;#004471FE: 213265 48FFFFFF            uv 40 20  1 1487      
    mov edi,[ebp-168] (symtab[709])       ;#00447204: 213275 58FFFFFF            vu 80 20  1 1487      
    add esi,1                             ;#0044720A: 203306 01                  uv 40 40  1 1488      
    cmp esi,edi                           ;#0044720D: 073367                     uv 00 C0  1 1489 40   
    mov [ebp-184] (j),esi                 ;#0044720F: 211265 48FFFFFF            vu 00 60  1 1489      
    jle #0044715C                         ;#00447215: 017216 41FFFFFF            v  00 00  1 1490      
    jmp #00447B8D                         ;#0044721B: 351 6D090000               v  00 00  1 1491      
;  1000                     elsif precision!=-1 and precision<length(o) then
    mov ecx,[ebp-96] (precision)          ;#00447220: 213115 A0                  uv 02 20  1 1492      
    cmp ecx,-1                            ;#00447223: 203371 FF                  uv 00 02  1 1493 02   
    je #00447273                          ;#00447226: 164 4B                     v  00 00  1 1493      
    lea edi,[ebp-172] (symtab[710])       ;#00447228: 215275 54FFFFFF            uv 80 20  1 1494      
    mov esi,eax                           ;#0044722E: 211306                     vu 40 01  1 1494      
    mov edx,650                           ;#00447230: 272 8A020000               uv 04 00  1 1495      
    call #0045EFEC (:%opLen)              ;#00447235: 350 B27D0100               v  00 00  1 1495      
    mov edi,[ebp-96] (precision)          ;#0044723A: 213175 A0                  uv 80 20  1 1496      
    cmp edi,ecx                           ;#0044723D: 071317                     uv 00 82  1 1497 80   
    jge #00447273                         ;#0044723F: 175 32                     v  00 00  1 1497      
;  1001                         r1 = o[1..precision]
    cmp esi,h4                            ;#00447241: 201376 00000040            uv 00 40  1 1498      
    jne #00447253                         ;#00447247: 165 0A                     v  00 00  1 1498      
    mov esi,650                           ;#00447249: 276 8A020000               uv 40 00  1 1499      
    call #00462744 (:%pUnassigned)        ;#0044724E: 350 F1B40100               v  00 00  1 1499      
    lea edx,[ebp-28] (r1)                 ;#00447253: 215125 E4                  uv 04 20  1 1500      
    mov ecx,1                             ;#00447256: 271 01000000               vu 02 00  1 1500      
    push #0044726E                        ;#0044725B: 150 6E724400               uv 00 00  1 1501      
    push edx                              ;#00447260: 122                        vu 00 04  1 1501      
    push edi                              ;#00447261: 127                        uv 00 80  1 1502      
    push 1                                ;#00447262: 152 01                     vu 00 00  1 1502      
    mov edx,650                           ;#00447264: 272 8A020000               uv 04 00  1 1503      
    jmp #00460A75 (:%pSubss)              ;#00447269: 351 07980100               v  00 00  1 1503      
    jmp #00447B8D                         ;#0044726E: 351 1A090000               v  00 00  1 1504      
;  1002                     else
;  1003                         r1 = o
    mov eax,[ebp-32] (o)                  ;#00447273: 213105 E0                  uv 01 20  1 1505      
    cmp eax,h4                            ;#00447276: 075 00000040               uv 00 01  1 1506 01   
    jne #00447287                         ;#0044727B: 165 0A                     v  00 00  1 1506      
    mov esi,650                           ;#0044727D: 276 8A020000               uv 40 00  1 1507      
    call #00462744 (:%pUnassigned)        ;#00447282: 350 BDB40100               v  00 00  1 1507      
    mov edx,[ebp-28] (r1)                 ;#00447287: 213125 E4                  uv 04 20  1 1508      
    cmp eax,h4                            ;#0044728A: 075 00000040               vu 00 01  1 1508      
    jl #0044729B                          ;#0044728F: 174 0A                     v  00 00  1 1509      
    add dword[ebx+eax*4-8],1              ;#00447291: 203104203 F8 01            u  00 09  3 1510      
    cmp eax,650                           ;#00447296: 075 8A020000               vu 00 01  1 1512      
    mov [ebp-28] (r1),eax                 ;#0044729B: 211105 E4                  uv 00 21  1 1513      
    cmp edx,h4                            ;#0044729E: 201372 00000040            vu 00 04  1 1513      
    jle #00447B8D                         ;#004472A4: 017216 E3080000            v  00 00  1 1514      
    sub dword[ebx+edx*4-8],1              ;#004472AA: 203154223 F8 01            u  00 0C  3 1515      
    jne #00447B8D                         ;#004472AF: 017205 D8080000            v  00 00  1 1517      
    call #004639A8 (:%pDealloc)           ;#004472B5: 350 EEC60100               v  00 00  1 1518      
;  1004                     end if
    jmp #00447B8D                         ;#004472BA: 351 CE080000               v  00 00  1 1519      
;  1005                 else    -- efg/EG
;  1006                     if atom(args) then
    mov ecx,[ebp-4] (args)                ;#004472BF: 213115 FC                  uv 02 20  1 1520      
    cmp ecx,h4                            ;#004472C2: 201371 00000040            uv 00 02  1 1521 02   
    jl #004472D1                          ;#004472C8: 174 07                     v  00 00  1 1521      
    cmp byte[ebx+ecx*4-1],#12             ;#004472CA: 200174213 FF 12            u  00 0A  2 1522      
    jne #004472FA                         ;#004472CF: 165 29                     v  00 00  1 1523      
;  1007                         o = args
    mov edx,[ebp-32] (o)                  ;#004472D1: 213125 E0                  uv 04 20  1 1524      
    cmp ecx,h4                            ;#004472D4: 201371 00000040            vu 00 02  1 1524      
    jl #004472E1                          ;#004472DA: 174 05                     v  00 00  1 1525      
    add dword[ebx+ecx*4-8],1              ;#004472DC: 203104213 F8 01            u  00 0A  3 1526      
    mov [ebp-32] (o),ecx                  ;#004472E1: 211115 E0                  vu 00 22  1 1528      
    cmp edx,h4                            ;#004472E4: 201372 00000040            uv 00 04  1 1529      
    jle #0044733A                         ;#004472EA: 176 4E                     v  00 00  1 1529      
    sub dword[ebx+edx*4-8],1              ;#004472EC: 203154223 F8 01            u  00 0C  3 1530      
    jne #0044733A                         ;#004472F1: 165 47                     v  00 00  1 1532      
    call #004639A8 (:%pDealloc)           ;#004472F3: 350 B0C60100               v  00 00  1 1533      
    jmp #0044733A                         ;#004472F8: 353 40                     v  00 00  1 1534      
;  1008                     else
;  1009                         o = args[nxt]
    mov edi,[ebp-20] (nxt)                ;#004472FA: 213175 EC                  uv 80 20  1 1535      
    lea ecx,[ebp-32] (o)                  ;#004472FD: 215115 E0                  vu 02 20  1 1535      
    mov esi,[ebp-4] (args)                ;#00447300: 213165 FC                  uv 40 20  1 1536      
    mov edx,643                           ;#00447303: 272 83020000               vu 04 00  1 1536      
    mov al,0                              ;#00447308: 260 00                     uv 01 00  1 1537      
    call #00460FE5 (:%pSubse1)            ;#0044730A: 350 D69C0100               v  00 00  1 1537      
;  1010                         if not atom(o) then
    mov eax,[ebp-32] (o)                  ;#0044730F: 213105 E0                  uv 01 20  1 1538      
    cmp eax,h4                            ;#00447312: 075 00000040               uv 00 01  1 1539 01   
    jl #0044733A                          ;#00447317: 174 21                     v  00 00  1 1539      
    cmp byte[ebx+eax*4-1],#12             ;#00447319: 200174203 FF 12            u  00 09  2 1540      
    je #0044733A                          ;#0044731E: 164 1A                     v  00 00  1 1541      
;  1011                             o = 0
    mov edx,[ebp-32] (o)                  ;#00447320: 213125 E0                  uv 04 20  1 1542      
    cmp edx,h4                            ;#00447323: 201372 00000040            uv 00 04  1 1543 04   
    mov [ebp-32] (o),ebx                  ;#00447329: 211135 E0                  vu 00 28  1 1543      
    jle #0044733A                         ;#0044732C: 176 0C                     v  00 00  1 1544      
    sub dword[ebx+edx*4-8],1              ;#0044732E: 203154223 F8 01            u  00 0C  3 1545      
    jne #0044733A                         ;#00447333: 165 05                     v  00 00  1 1547      
    call #004639A8 (:%pDealloc)           ;#00447335: 350 6EC60100               v  00 00  1 1548      
;  1012                         end if
;  1013                     end if
;  1014                     if precision=-1 then
    mov ecx,[ebp-96] (precision)          ;#0044733A: 213115 A0                  uv 02 20  1 1549      
    cmp ecx,-1                            ;#0044733D: 203371 FF                  uv 00 02  1 1550 02   
    jne #0044734E                         ;#00447340: 165 0C                     v  00 00  1 1550      
;  1015                         precision = 6
    mov [ebp-96] (precision), dword 6     ;#00447342: 307105 A0 06000000         uv 00 20  1 1551      
;  1016 -- 1/11/22 (print fractional powers of 2 exactly, and this lot moved after o is set)
    jmp #0044742F                         ;#00447349: 351 E1000000               v  00 00  1 1551      
;  1017                     elsif count_bits(o)!=1 then
    mov ecx,10                            ;#0044734E: 271 0A000000               uv 02 00  1 1552      
    mov edx,264                           ;#00447353: 272 08010000               vu 04 00  1 1552      
    call :%opFrame (count_bits)           ;#00447358: 350 A5B80100               v  00 00  1 1553      
    mov edi,[ebp+20] (prevebp)            ;#0044735D: 213175 14                  uv 80 20  1 1554      
    mov eax,[edi-32]                      ;#00447360: 213107 E0                  uv 01 80  1 1557 80 *80*
    xor ebx,ebx                           ;#00447363: 061333                     vu 08 08  1 1557      
    cmp eax,h4                            ;#00447365: 075 00000040               uv 00 01  1 1558      
    jl #00447376                          ;#0044736A: 174 0A                     v  00 00  1 1558      
    add dword[ebx+eax*4-8],1              ;#0044736C: 203104203 F8 01            u  00 09  3 1559      
    cmp eax,650                           ;#00447371: 075 8A020000               vu 00 01  1 1561      
    mov [ebp] (n),eax                     ;#00447376: 211105 00                  uv 00 21  1 1562      
    mov [ebp+28] (retaddr),#00447385      ;#00447379: 307105 1C 85734400         vu 00 20  1 1562      
    jmp #0044FBF9 (code:count_bits)       ;#00447380: 351 74880000               v  00 00  1 1563      
    push eax                              ;#00447385: 120                        uv 00 01  1 1564      
    mov edi,[ebp-196] (symtab[725])       ;#00447386: 213275 3CFFFFFF            vu 80 20  1 1564      
    cmp edi,h4                            ;#0044738C: 201377 00000040            uv 00 80  1 1565      
    jle #004473A2                         ;#00447392: 176 0E                     v  00 00  1 1565      
    sub dword[ebx+edi*4-8],1              ;#00447394: 203154273 F8 01            u  00 88  3 1566      
    jne #004473A2                         ;#00447399: 165 07                     v  00 00  1 1568      
    mov edx,edi                           ;#0044739B: 213327                     uv 04 80  1 1569      
    call #004639A8 (:%pDealloc)           ;#0044739D: 350 06C60100               v  00 00  1 1569      
    pop dword[ebp-196] (symtab[725])      ;#004473A2: 217205 3CFFFFFF            np 00 20  3 1570      
    mov esi,[ebp-196] (symtab[725])       ;#004473A8: 213265 3CFFFFFF            uv 40 20  1 1573      
    cmp esi,1                             ;#004473AE: 203376 01                  uv 00 40  1 1574 40   
    je #0044742F                          ;#004473B1: 164 7C                     v  00 00  1 1574      
;  1018                         if precision>20 then
    mov ecx,[ebp-96] (precision)          ;#004473B3: 213115 A0                  uv 02 20  1 1575      
    cmp ecx,20                            ;#004473B6: 203371 14                  uv 00 02  1 1576 02   
    jle #00447423                         ;#004473B9: 176 68                     v  00 00  1 1576      
;  1019                             crash("floating point precision may not exceed 20",{},3)
    lea eax,[ebp-116] (symtab[674])       ;#004473BB: 215105 8C                  uv 01 20  1 1577      
    mov edx,0                             ;#004473BE: 272 00000000               vu 04 00  1 1577      
    push #004473D1                        ;#004473C3: 150 D1734400               uv 00 00  1 1578      
    push eax                              ;#004473C8: 120                        vu 00 01  1 1578      
    mov edi,[ebp-116] (symtab[674])       ;#004473C9: 213175 8C                  uv 80 20  1 1579      
    jmp #00460143 (:%pMkSq)               ;#004473CC: 351 728D0100               v  00 00  1 1579      
    mov ecx,4                             ;#004473D1: 271 04000000               uv 02 00  1 1580      
    mov edx,397                           ;#004473D6: 272 8D010000               vu 04 00  1 1580      
    call #00462C02 (:%opFrame) (crash)    ;#004473DB: 350 22B80100               v  00 00  1 1581      
    mov eax,[#00402344]                   ;#004473E0: 241 44234000               uv 01 00  1 1582      
    mov [ebp] (msg),eax                   ;#004473E5: 211105 00                  uv 00 21  1 1583 01   
    add dword[ebx+eax*4-8],1              ;#004473E8: 203104203 F8 01            u  00 09  3 1585    *01*
    mov edi,[ebp+20] (prevebp)            ;#004473ED: 213175 14                  vu 80 20  1 1587      
    mov eax,[edi-116]                     ;#004473F0: 213107 8C                  uv 01 80  1 1590    *80*
    mov [edi-116], dword h4               ;#004473F3: 307107 8C 00000040         vu 00 80  1 1590      
    cmp eax,h4                            ;#004473FA: 075 00000040               uv 00 01  1 1591      
    jne #0044740B                         ;#004473FF: 165 0A                     v  00 00  1 1591      
    mov esi,674                           ;#00447401: 276 A2020000               uv 40 00  1 1592      
    call #00462744 (:%pUnassigned)        ;#00447406: 350 39B30100               v  00 00  1 1592      
    mov [ebp-4] (args),eax                ;#0044740B: 211105 FC                  uv 00 21  1 1593      
    mov [ebp-8] (nFrames), dword 3        ;#0044740E: 307105 F8 03000000         vu 00 20  1 1593      
    mov [ebp+28] (retaddr),#00447421      ;#00447415: 307105 1C 21744400         uv 00 20  1 1594      
    jmp #0044AB92 (code:crash)            ;#0044741C: 351 71370000               v  00 00  1 1594      
    jmp #0044742F                         ;#00447421: 353 0C                     v  00 00  1 1595      
;  1020                         elsif machine_bits()=32
;  1021                           and precision>16 then
    cmp ecx,16                            ;#00447423: 203371 10                  uv 00 02  1 1596      
    jle #0044742F                         ;#00447426: 176 07                     v  00 00  1 1596      
;  1022                             precision = 16
    mov [ebp-96] (precision), dword 16    ;#00447428: 307105 A0 10000000         uv 00 20  1 1597      
;  1023                         end if
;  1024                     end if
;  1025 --1/11/22: (print powers of 2 exactly, with above 2^-1074 to 2^1024 [on 32 bit, >on 64-bit??])
;  1026 --                  if fi='f' and o>37778931862957161709568 and count_bits(o)=1 then
;  1027                     if fi='f' 
    mov esi,[ebp-12] (fi)                 ;#0044742F: 213165 F4                  vu 40 20  1 1597      
    cmp esi,102                           ;#00447432: 203376 66                  uv 00 40  1 1598      
    jne #00447836                         ;#00447435: 017205 FB030000            v  00 00  1 1598      
;  1028                     and atom_to_float64(o)[$]!=127 -- not [+/-]nan/inf
    mov ecx,2                             ;#0044743B: 271 02000000               uv 02 00  1 1599      
    mov edx,188                           ;#00447440: 272 BC000000               vu 04 00  1 1599      
    call :%opFrame (atom_to_float64)      ;#00447445: 350 B8B70100               v  00 00  1 1600      
    mov edi,[ebp+20] (prevebp)            ;#0044744A: 213175 14                  uv 80 20  1 1601      
    mov eax,[edi-32]                      ;#0044744D: 213107 E0                  uv 01 80  1 1604 80 *80*
    xor ebx,ebx                           ;#00447450: 061333                     vu 08 08  1 1604      
    cmp eax,h4                            ;#00447452: 075 00000040               uv 00 01  1 1605      
    jl #00447463                          ;#00447457: 174 0A                     v  00 00  1 1605      
    add dword[ebx+eax*4-8],1              ;#00447459: 203104203 F8 01            u  00 09  3 1606      
    cmp eax,650                           ;#0044745E: 075 8A020000               vu 00 01  1 1608      
    mov [ebp] (a),eax                     ;#00447463: 211105 00                  uv 00 21  1 1609      
    mov [ebp+28] (retaddr),#00447472      ;#00447466: 307105 1C 72744400         vu 00 20  1 1609      
    jmp #00457188 (code:atom_to_float64)  ;#0044746D: 351 16FD0000               v  00 00  1 1610      
    push eax                              ;#00447472: 120                        uv 00 01  1 1611      
    mov edi,[ebp-176] (symtab[711])       ;#00447473: 213275 50FFFFFF            vu 80 20  1 1611      
    cmp edi,h4                            ;#00447479: 201377 00000040            uv 00 80  1 1612      
    jle #0044748F                         ;#0044747F: 176 0E                     v  00 00  1 1612      
    sub dword[ebx+edi*4-8],1              ;#00447481: 203154273 F8 01            u  00 88  3 1613      
    jne #0044748F                         ;#00447486: 165 07                     v  00 00  1 1615      
    mov edx,edi                           ;#00447488: 213327                     uv 04 80  1 1616      
    call #004639A8 (:%pDealloc)           ;#0044748A: 350 19C50100               v  00 00  1 1616      
    pop dword[ebp-176] (symtab[711])      ;#0044748F: 217205 50FFFFFF            np 00 20  3 1617      
    mov edi,-1                            ;#00447495: 277 FFFFFFFF               uv 80 00  1 1620      
    mov esi,[ebp-176] (symtab[711])       ;#0044749A: 213265 50FFFFFF            vu 40 20  1 1620      
    mov edx,711                           ;#004474A0: 272 C7020000               uv 04 00  1 1621      
    call #004610CE (:%pSubse1is)          ;#004474A5: 350 249C0100               v  00 00  1 1621      
    mov [ebp-172] (symtab[710]),eax       ;#004474AA: 211205 54FFFFFF            uv 00 21  1 1622      
    cmp eax,127                           ;#004474B0: 203370 7F                  vu 00 01  1 1622      
    je #00447836                          ;#004474B3: 017204 7D030000            v  00 00  1 1623      
;  1029                     and o>37778931862957161709568 
    mov edi,[#00402348]                   ;#004474B9: 213075 48234000            uv 80 00  1 1624      
    mov eax,[ebp-32] (o)                  ;#004474BF: 213105 E0                  vu 01 20  1 1624      
    mov esi,728                           ;#004474C2: 276 D8020000               uv 40 00  1 1625      
    mov edx,650                           ;#004474C7: 272 8A020000               vu 04 00  1 1625      
    call #0045F8B0 (:%opJcc)              ;#004474CC: 350 DF830100               v  00 00  1 1626      
    jle #00447836                         ;#004474D1: 017216 5F030000            v  00 00  1 1627      
;  1030 -- sug/untested, see docs/Helping Hands/printf(2^i)
;  1031 --                  and (o>37778931862957161709568 or o<1e-22)
;  1032                     and count_bits(o)=1 then
    mov ecx,10                            ;#004474D7: 271 0A000000               uv 02 00  1 1628      
    mov edx,264                           ;#004474DC: 272 08010000               vu 04 00  1 1628      
    call :%opFrame (count_bits)           ;#004474E1: 350 1CB70100               v  00 00  1 1629      
    mov edi,[ebp+20] (prevebp)            ;#004474E6: 213175 14                  uv 80 20  1 1630      
    mov eax,[edi-32]                      ;#004474E9: 213107 E0                  uv 01 80  1 1633 80 *80*
    xor ebx,ebx                           ;#004474EC: 061333                     vu 08 08  1 1633      
    cmp eax,h4                            ;#004474EE: 075 00000040               uv 00 01  1 1634      
    jl #004474FF                          ;#004474F3: 174 0A                     v  00 00  1 1634      
    add dword[ebx+eax*4-8],1              ;#004474F5: 203104203 F8 01            u  00 09  3 1635      
    cmp eax,650                           ;#004474FA: 075 8A020000               vu 00 01  1 1637      
    mov [ebp] (n),eax                     ;#004474FF: 211105 00                  uv 00 21  1 1638      
    mov [ebp+28] (retaddr),#0044750E      ;#00447502: 307105 1C 0E754400         vu 00 20  1 1638      
    jmp #0044FBF9 (code:count_bits)       ;#00447509: 351 EB860000               v  00 00  1 1639      
    push eax                              ;#0044750E: 120                        uv 00 01  1 1640      
    mov ecx,[ebp-196] (symtab[725])       ;#0044750F: 213215 3CFFFFFF            vu 02 20  1 1640      
    cmp ecx,h4                            ;#00447515: 201371 00000040            uv 00 02  1 1641      
    jle #0044752B                         ;#0044751B: 176 0E                     v  00 00  1 1641      
    sub dword[ebx+ecx*4-8],1              ;#0044751D: 203154213 F8 01            u  00 0A  3 1642      
    jne #0044752B                         ;#00447522: 165 07                     v  00 00  1 1644      
    mov edx,ecx                           ;#00447524: 213321                     uv 04 02  1 1645      
    call #004639A8 (:%pDealloc)           ;#00447526: 350 7DC40100               v  00 00  1 1645      
    pop dword[ebp-196] (symtab[725])      ;#0044752B: 217205 3CFFFFFF            np 00 20  3 1646      
    mov esi,[ebp-196] (symtab[725])       ;#00447531: 213265 3CFFFFFF            uv 40 20  1 1649      
    cmp esi,1                             ;#00447537: 203376 01                  uv 00 40  1 1650 40   
    jne #00447836                         ;#0044753A: 017205 F6020000            v  00 00  1 1650      
;  1033                         sequence d2 = {}
    lea eax,[ebp-200] (d2)                ;#00447540: 215205 38FFFFFF            uv 01 20  1 1651      
    mov edx,0                             ;#00447546: 272 00000000               vu 04 00  1 1651      
    push #0044755C                        ;#0044754B: 150 5C754400               uv 00 00  1 1652      
    push eax                              ;#00447550: 120                        vu 00 01  1 1652      
    mov edi,[ebp-200] (d2)                ;#00447551: 213275 38FFFFFF            uv 80 20  1 1653      
    jmp #00460143 (:%pMkSq)               ;#00447557: 351 E78B0100               v  00 00  1 1653      
;  1034                         while o do
    mov eax,[ebp-32] (o)                  ;#0044755C: 213105 E0                  uv 01 20  1 1654      
    mov edx,650                           ;#0044755F: 272 8A020000               vu 04 00  1 1654      
    call #0045F94C (:%opJif)              ;#00447564: 350 E3830100               v  00 00  1 1655      
    je #004475BE                          ;#00447569: 164 53                     v  00 00  1 1656      
;  1035                             d2 = prepend(d2,rmdr(o,2))
    lea edi,[ebp-120] (symtab[675])       ;#0044756B: 215175 88                  uv 80 20  1 1657      
    mov ecx,[DLL_THREAD_ATTACH]           ;#0044756E: 213015 40204000            vu 02 00  1 1657      
    call #0045EF61 (:%opRmdr)             ;#00447574: 350 E8790100               v  00 00  1 1658      
    lea edx,[ebp-200] (d2)                ;#00447579: 215225 38FFFFFF            uv 04 20  1 1659      
    lea edi,[ebp-200] (d2)                ;#0044757F: 215275 38FFFFFF            vu 80 20  1 1659      
    lea ecx,[ebp-120] (symtab[675])       ;#00447585: 215115 88                  uv 02 20  1 1660      
    mov eax,1                             ;#00447588: 270 01000000               vu 01 00  1 1660      
    call #0045F9F7 (:%opApnd)             ;#0044758D: 350 65840100               v  00 00  1 1661      
    mov edx,[ebp-120] (symtab[675])       ;#00447592: 213125 88                  uv 04 20  1 1662      
    cmp edx,h4                            ;#00447595: 201372 00000040            uv 00 04  1 1663 04   
    mov [ebp-120] (symtab[675]),ebx       ;#0044759B: 211135 88                  vu 00 28  1 1663      
    jle #004475AC                         ;#0044759E: 176 0C                     v  00 00  1 1664      
    sub dword[ebx+edx*4-8],1              ;#004475A0: 203154223 F8 01            u  00 0C  3 1665      
    jne #004475AC                         ;#004475A5: 165 05                     v  00 00  1 1667      
    call #004639A8 (:%pDealloc)           ;#004475A7: 350 FCC30100               v  00 00  1 1668      
;  1036                             o = floor(o/2)
    lea edi,[ebp-32] (o)                  ;#004475AC: 215175 E0                  uv 80 20  1 1669      
    mov ecx,[ebp-32] (o)                  ;#004475AF: 213115 E0                  vu 02 20  1 1669      
    mov eax,[DLL_THREAD_ATTACH]           ;#004475B2: 241 40204000               uv 01 00  1 1670      
    call #0045F39A (:%opDivf)             ;#004475B7: 350 DE7D0100               v  00 00  1 1670      
;  1037                         end while
    jmp #0044755C                         ;#004475BC: 353 9E                     v  00 00  1 1671      
;  1038                         r1 = ""
    mov esi,[#004022A4]                   ;#004475BE: 213065 A4224000            uv 40 00  1 1672      
    mov edx,[ebp-28] (r1)                 ;#004475C4: 213125 E4                  vu 04 20  1 1672      
    cmp esi,h4                            ;#004475C7: 201376 00000040            uv 00 40  1 1673      
    jl #004475D4                          ;#004475CD: 174 05                     v  00 00  1 1673      
    add dword[ebx+esi*4-8],1              ;#004475CF: 203104263 F8 01            u  00 48  3 1674      
    mov [ebp-28] (r1),esi                 ;#004475D4: 211165 E4                  vu 00 60  1 1676      
    cmp edx,h4                            ;#004475D7: 201372 00000040            uv 00 04  1 1677      
    jle #004475EB                         ;#004475DD: 176 0C                     v  00 00  1 1677      
    sub dword[ebx+edx*4-8],1              ;#004475DF: 203154223 F8 01            u  00 0C  3 1678      
    jne #004475EB                         ;#004475E4: 165 05                     v  00 00  1 1680      
    call #004639A8 (:%pDealloc)           ;#004475E6: 350 BDC30100               v  00 00  1 1681      
;  1039                         while length(d2) do
    mov edi,[ebp-200] (d2)                ;#004475EB: 213275 38FFFFFF            uv 80 20  1 1682      
    mov ecx,[ebx+edi*4-12]                ;#004475F1: 213114273 F4               uv 02 88  1 1685 80 *80*
    test ecx,ecx                          ;#004475F5: 205311                     uv 00 02  1 1686 02   
    je #004477BB                          ;#004475F7: 017204 BE010000            v  00 00  1 1686      
;  1040                             integer d2r = 0
    mov [ebp-204] (d2r),ebx               ;#004475FD: 211235 34FFFFFF            uv 00 28  1 1687      
;  1041                             for d2i,d2digit in d2 do
    mov eax,[ebx+edi*4-12]                ;#00447603: 213104273 F4               vu 01 88  1 1687      
    mov [ebp-172] (symtab[710]),eax       ;#00447607: 211205 54FFFFFF            uv 00 21  1 1688      
    mov [ebp-160] (d2i), dword 1          ;#0044760D: 307205 60FFFFFF 01000000   vu 00 20  1 1688      
    cmp eax,1                             ;#00447617: 075 01000000               uv 00 01  1 1689      
    jl #004476EC                          ;#0044761C: 017214 CA000000            v  00 00  1 1689      
    mov edi,[ebp-160] (d2i)               ;#00447622: 213275 60FFFFFF            uv 80 20  1 1690      
    lea ecx,[ebp-208] (d2digit)           ;#00447628: 215215 30FFFFFF            vu 02 20  1 1690      
    mov esi,[ebp-200] (d2)                ;#0044762E: 213265 38FFFFFF            uv 40 20  1 1691      
    mov edx,729                           ;#00447634: 272 D9020000               vu 04 00  1 1691      
    mov al,0                              ;#00447639: 260 00                     uv 01 00  1 1692      
    call #00460FE5 (:%pSubse1)            ;#0044763B: 350 A5990100               v  00 00  1 1692      
;  1042                                 d2r = d2r*2+d2digit
    lea edi,[ebp-120] (symtab[675])       ;#00447640: 215175 88                  uv 80 20  1 1693      
    mov ecx,[ebp-204] (d2r)               ;#00447643: 213215 34FFFFFF            vu 02 20  1 1693      
    mov eax,[DLL_THREAD_ATTACH]           ;#00447649: 241 40204000               uv 01 00  1 1694      
    call #0045F412 (:%opMul)              ;#0044764E: 350 BF7D0100               v  00 00  1 1694      
    lea edi,[ebp-204] (d2r)               ;#00447653: 215275 34FFFFFF            uv 80 20  1 1695      
    mov ecx,[ebp-120] (symtab[675])       ;#00447659: 213115 88                  vu 02 20  1 1695      
    mov eax,[ebp-208] (d2digit)           ;#0044765C: 213205 30FFFFFF            uv 01 20  1 1696      
    call #0045F27A (:%opAddi)             ;#00447662: 350 137C0100               v  00 00  1 1696      
;  1043                                 d2[d2i] = floor(d2r/10)
    lea edi,[ebp-212] (symtab[732])       ;#00447667: 215275 2CFFFFFF            uv 80 20  1 1697      
    mov ecx,[ebp-204] (d2r)               ;#0044766D: 213215 34FFFFFF            vu 02 20  1 1697      
    mov eax,[#00402090] (BRIGHT_GREEN)    ;#00447673: 241 90204000               uv 01 00  1 1698      
    call #0045F39A (:%opDivf)             ;#00447678: 350 1D7D0100               v  00 00  1 1698      
    mov edi,[ebp-160] (d2i)               ;#0044767D: 213275 60FFFFFF            uv 80 20  1 1699      
    mov ecx,[ebp-212] (symtab[732])       ;#00447683: 213215 2CFFFFFF            vu 02 20  1 1699      
    mov esi,[ebp-200] (d2)                ;#00447689: 213265 38FFFFFF            uv 40 20  1 1700      
    lea eax,[ebp-200] (d2)                ;#0044768F: 215205 38FFFFFF            vu 01 20  1 1700      
    call #004607F3 (:%pRepe1)             ;#00447695: 350 59910100               v  00 00  1 1701      
    mov [ebp-212] (symtab[732]),ebx       ;#0044769A: 211235 2CFFFFFF            uv 00 28  1 1702      
;  1044                                 d2r = rmdr(d2r,10)
    lea edi,[ebp-204] (d2r)               ;#004476A0: 215275 34FFFFFF            vu 80 20  1 1702      
    mov eax,[ebp-204] (d2r)               ;#004476A6: 213205 34FFFFFF            uv 01 20  1 1703      
    mov ecx,[#00402090] (BRIGHT_GREEN)    ;#004476AC: 213015 90204000            vu 02 00  1 1703      
    call #0045EF61 (:%opRmdr)             ;#004476B2: 350 AA780100               v  00 00  1 1704      
    mov edi,[ebp-204] (d2r)               ;#004476B7: 213275 34FFFFFF            uv 80 20  1 1705      
    cmp edi,h4                            ;#004476BD: 201377 00000040            uv 00 80  1 1706 80   
    jl #004476CF                          ;#004476C3: 174 0A                     v  00 00  1 1706      
    mov ecx,730                           ;#004476C5: 271 DA020000               uv 02 00  1 1707      
    call #00462D8D (:%opTcFail)           ;#004476CA: 350 BEB60100               v  00 00  1 1707      
;  1045                             end for
    mov esi,[ebp-160] (d2i)               ;#004476CF: 213265 60FFFFFF            uv 40 20  1 1708      
    mov eax,[ebp-172] (symtab[710])       ;#004476D5: 213205 54FFFFFF            vu 01 20  1 1708      
    add esi,1                             ;#004476DB: 203306 01                  uv 40 40  1 1709      
    cmp esi,eax                           ;#004476DE: 073360                     uv 00 41  1 1710 40   
    mov [ebp-160] (d2i),esi               ;#004476E0: 211265 60FFFFFF            vu 00 60  1 1710      
    jle #00447622                         ;#004476E6: 017216 36FFFFFF            v  00 00  1 1711      
;  1046                             r1 &= d2r+'0'
    lea edi,[ebp-120] (symtab[675])       ;#004476EC: 215175 88                  uv 80 20  1 1712      
    mov ecx,[ebp-204] (d2r)               ;#004476EF: 213215 34FFFFFF            vu 02 20  1 1712      
    mov eax,[MB_ICONEXCLAMATION]          ;#004476F5: 241 D8204000               uv 01 00  1 1713      
    call #0045F261 (:%opAdd)              ;#004476FA: 350 627B0100               v  00 00  1 1713      
    lea edx,[ebp-28] (r1)                 ;#004476FF: 215125 E4                  uv 04 20  1 1714      
    lea edi,[ebp-28] (r1)                 ;#00447702: 215175 E4                  vu 80 20  1 1714      
    lea ecx,[ebp-120] (symtab[675])       ;#00447705: 215115 88                  uv 02 20  1 1715      
    xor eax,eax                           ;#00447708: 061300                     vu 01 01  1 1715      
    call #0045F9F7 (:%opApnd)             ;#0044770A: 350 E8820100               v  00 00  1 1716      
    mov edi,[ebp-28] (r1)                 ;#0044770F: 213175 E4                  uv 80 20  1 1717      
    cmp edi,h4                            ;#00447712: 201377 00000040            uv 00 80  1 1718 80   
    jl #00447721                          ;#00447718: 174 07                     v  00 00  1 1718      
    cmp byte[ebx+edi*4-1],#82             ;#0044771A: 200174273 FF 82            u  00 88  2 1719      
    je #0044772B                          ;#0044771F: 164 0A                     v  00 00  1 1720      
    mov ecx,649                           ;#00447721: 271 89020000               uv 02 00  1 1721      
    call #00462D8D (:%opTcFail)           ;#00447726: 350 62B60100               v  00 00  1 1721      
;  1047                             d2 = trim_head(d2,0)
    mov ecx,5                             ;#0044772B: 271 05000000               uv 02 00  1 1722      
    mov edx,386                           ;#00447730: 272 82010000               vu 04 00  1 1722      
    call :%opFrame (trim_head)            ;#00447735: 350 C8B40100               v  00 00  1 1723      
    mov edi,[ebp+20] (prevebp)            ;#0044773A: 213175 14                  uv 80 20  1 1724      
    mov eax,[edi-200]                     ;#0044773D: 213207 38FFFFFF            uv 01 80  1 1727 80 *80*
    mov [edi-200], dword h4               ;#00447743: 307207 38FFFFFF 00000040   vu 00 80  1 1727      
    cmp eax,h4                            ;#0044774D: 075 00000040               uv 00 01  1 1728      
    jne #0044775E                         ;#00447752: 165 0A                     v  00 00  1 1728      
    mov esi,729                           ;#00447754: 276 D9020000               uv 40 00  1 1729      
    call #00462744 (:%pUnassigned)        ;#00447759: 350 E6AF0100               v  00 00  1 1729      
    mov [ebp] (source),eax                ;#0044775E: 211105 00                  uv 00 21  1 1730      
    mov [ebp-4] (what),ebx                ;#00447761: 211135 FC                  vu 00 28  1 1730      
    mov [ebp+28] (retaddr),#00447770      ;#00447764: 307105 1C 70774400         uv 00 20  1 1731      
    jmp #0044C87E (code:trim_head)        ;#0044776B: 351 0E510000               v  00 00  1 1731      
    push eax                              ;#00447770: 120                        uv 00 01  1 1732      
    mov esi,[ebp-200] (d2)                ;#00447771: 213265 38FFFFFF            vu 40 20  1 1732      
    cmp esi,h4                            ;#00447777: 201376 00000040            uv 00 40  1 1733      
    jle #0044778D                         ;#0044777D: 176 0E                     v  00 00  1 1733      
    sub dword[ebx+esi*4-8],1              ;#0044777F: 203154263 F8 01            u  00 48  3 1734      
    jne #0044778D                         ;#00447784: 165 07                     v  00 00  1 1736      
    mov edx,esi                           ;#00447786: 213326                     uv 04 40  1 1737      
    call #004639A8 (:%pDealloc)           ;#00447788: 350 1BC20100               v  00 00  1 1737      
    pop dword[ebp-200] (d2)               ;#0044778D: 217205 38FFFFFF            np 00 20  3 1738      
    mov ecx,[ebp-200] (d2)                ;#00447793: 213215 38FFFFFF            uv 02 20  1 1741      
    cmp ecx,h4                            ;#00447799: 201371 00000040            uv 00 02  1 1742 02   
    jl #004477AC                          ;#0044779F: 174 0B                     v  00 00  1 1742      
    test byte[ebx+ecx*4-1],#80            ;#004477A1: 366104213 FF 80            u  00 0A  2 1743      
    jne #004475EB                         ;#004477A6: 017205 3FFEFFFF            v  00 00  1 1744      
    mov ecx,729                           ;#004477AC: 271 D9020000               uv 02 00  1 1745      
    call #00462D8D (:%opTcFail)           ;#004477B1: 350 D7B50100               v  00 00  1 1745      
;  1048                         end while
    jmp #004475EB                         ;#004477B6: 351 30FEFFFF               v  00 00  1 1746      
;  1049                         r1 = reverse(r1)
    mov ecx,8                             ;#004477BB: 271 08000000               uv 02 00  1 1747      
    mov edx,242                           ;#004477C0: 272 F2000000               vu 04 00  1 1747      
    call #00462C02 (:%opFrame) (reverse)  ;#004477C5: 350 38B40100               v  00 00  1 1748      
    mov edi,[ebp+20] (prevebp)            ;#004477CA: 213175 14                  uv 80 20  1 1749      
    mov eax,[edi-28]                      ;#004477CD: 213107 E4                  uv 01 80  1 1752 80 *80*
    mov [edi-28], dword h4                ;#004477D0: 307107 E4 00000040         vu 00 80  1 1752      
    cmp eax,h4                            ;#004477D7: 075 00000040               uv 00 01  1 1753      
    jne #004477E8                         ;#004477DC: 165 0A                     v  00 00  1 1753      
    mov esi,649                           ;#004477DE: 276 89020000               uv 40 00  1 1754      
    call #00462744 (:%pUnassigned)        ;#004477E3: 350 5CAF0100               v  00 00  1 1754      
    mov [ebp] (s),eax                     ;#004477E8: 211105 00                  uv 00 21  1 1755      
    mov [ebp+28] (retaddr),#004477F7      ;#004477EB: 307105 1C F7774400         vu 00 20  1 1755      
    jmp #00450FB8 (code:reverse)          ;#004477F2: 351 C1970000               v  00 00  1 1756      
    push eax                              ;#004477F7: 120                        uv 00 01  1 1757      
    mov edi,[ebp-28] (r1)                 ;#004477F8: 213175 E4                  vu 80 20  1 1757      
    cmp edi,h4                            ;#004477FB: 201377 00000040            uv 00 80  1 1758      
    jle #00447811                         ;#00447801: 176 0E                     v  00 00  1 1758      
    sub dword[ebx+edi*4-8],1              ;#00447803: 203154273 F8 01            u  00 88  3 1759      
    jne #00447811                         ;#00447808: 165 07                     v  00 00  1 1761      
    mov edx,edi                           ;#0044780A: 213327                     uv 04 80  1 1762      
    call #004639A8 (:%pDealloc)           ;#0044780C: 350 97C10100               v  00 00  1 1762      
    pop dword[ebp-28] (r1)                ;#00447811: 217105 E4                  np 00 20  3 1763      
    mov esi,[ebp-28] (r1)                 ;#00447814: 213165 E4                  uv 40 20  1 1766      
    cmp esi,h4                            ;#00447817: 201376 00000040            uv 00 40  1 1767 40   
    jl #0044782A                          ;#0044781D: 174 0B                     v  00 00  1 1767      
    cmp byte[ebx+esi*4-1],#82             ;#0044781F: 200174263 FF 82            u  00 48  2 1768      
    je #004478AE                          ;#00447824: 017204 84000000            v  00 00  1 1769      
    mov ecx,649                           ;#0044782A: 271 89020000               uv 02 00  1 1770      
    call #00462D8D (:%opTcFail)           ;#0044782F: 350 59B50100               v  00 00  1 1770      
    jmp #004478AE                         ;#00447834: 353 78                     v  00 00  1 1771      
;  1050                     else
;  1051                         r1 = sprintf2(o,fi,showplus,minfieldwidth,precision)
    mov ecx,31                            ;#00447836: 271 1F000000               uv 02 00  1 1772      
    mov edx,533                           ;#0044783B: 272 15020000               vu 04 00  1 1772      
    call :%opFrame (sprintf2)             ;#00447840: 350 BDB30100               v  00 00  1 1773      
    mov edi,[ebp+20] (prevebp)            ;#00447845: 213175 14                  uv 80 20  1 1774      
    mov eax,[edi-32]                      ;#00447848: 213107 E0                  uv 01 80  1 1777 80 *80*
    xor ebx,ebx                           ;#0044784B: 061333                     vu 08 08  1 1777      
    cmp eax,h4                            ;#0044784D: 075 00000040               uv 00 01  1 1778      
    jl #0044785E                          ;#00447852: 174 0A                     v  00 00  1 1778      
    add dword[ebx+eax*4-8],1              ;#00447854: 203104203 F8 01            u  00 09  3 1779      
    cmp eax,650                           ;#00447859: 075 8A020000               vu 00 01  1 1781      
    mov [ebp] (pf),eax                    ;#0044785E: 211105 00                  uv 00 21  1 1782      
    mov edi,[ebp+20] (prevebp)            ;#00447861: 213175 14                  vu 80 20  1 1782      
    mov eax,[edi-12]                      ;#00447864: 213107 F4                  uv 01 80  1 1785    *80*
    mov [ebp-4] (charflag),eax            ;#00447867: 211105 FC                  uv 00 21  1 1786 01   
    mov edi,[ebp+20] (prevebp)            ;#0044786A: 213175 14                  vu 80 20  1 1786      
    mov eax,[edi-76]                      ;#0044786D: 213107 B4                  uv 01 80  1 1789    *80*
    mov [ebp-8] (showplus),eax            ;#00447870: 211105 F8                  uv 00 21  1 1790 01   
    mov edi,[ebp+20] (prevebp)            ;#00447873: 213175 14                  vu 80 20  1 1790      
    mov eax,[edi-92]                      ;#00447876: 213107 A4                  uv 01 80  1 1793    *80*
    mov [ebp-12] (minfieldwidth),eax      ;#00447879: 211105 F4                  uv 00 21  1 1794 01   
    mov edi,[ebp+20] (prevebp)            ;#0044787C: 213175 14                  vu 80 20  1 1794      
    mov eax,[edi-96]                      ;#0044787F: 213107 A0                  uv 01 80  1 1797    *80*
    mov [ebp-16] (precision),eax          ;#00447882: 211105 F0                  uv 00 21  1 1798 01   
    mov [ebp+28] (retaddr),#00447891      ;#00447885: 307105 1C 91784400         vu 00 20  1 1798      
    jmp #00448102 (code:sprintf2)         ;#0044788C: 351 71080000               v  00 00  1 1799      
    push eax                              ;#00447891: 120                        uv 00 01  1 1800      
    mov ecx,[ebp-28] (r1)                 ;#00447892: 213115 E4                  vu 02 20  1 1800      
    cmp ecx,h4                            ;#00447895: 201371 00000040            uv 00 02  1 1801      
    jle #004478AB                         ;#0044789B: 176 0E                     v  00 00  1 1801      
    sub dword[ebx+ecx*4-8],1              ;#0044789D: 203154213 F8 01            u  00 0A  3 1802      
    jne #004478AB                         ;#004478A2: 165 07                     v  00 00  1 1804      
    mov edx,ecx                           ;#004478A4: 213321                     uv 04 02  1 1805      
    call #004639A8 (:%pDealloc)           ;#004478A6: 350 FDC00100               v  00 00  1 1805      
    pop dword[ebp-28] (r1)                ;#004478AB: 217105 E4                  np 00 20  3 1806      
;  1052                     end if
;  1053                     if showcommas then -- ('f' only)
    mov edi,[ebp-80] (showcommas)         ;#004478AE: 213175 B0                  uv 80 20  1 1809      
    test edi,edi                          ;#004478B1: 205377                     uv 00 80  1 1810 80   
    je #00447A73                          ;#004478B3: 017204 BA010000            v  00 00  1 1810      
;  1054 --19/09/2020 bugfix (caused by the introduction of %t)
;  1055 --                      if fidx!=9 then badfmt() end if
;  1056 --                      if fidx!=10 then badfmt() end if
;  1057 --                      if fidx!=11 then badfmt() end if
;  1058 --                      if fidx!=12 then 
;  1059 -- 30/5/23 is not this just much easier? (untested)
;  1060                         if fi!='f' then 
    mov esi,[ebp-12] (fi)                 ;#004478B9: 213165 F4                  uv 40 20  1 1811      
    cmp esi,102                           ;#004478BC: 203376 66                  uv 00 40  1 1812 40   
    je #004478F9                          ;#004478BF: 164 38                     v  00 00  1 1812      
;  1061                             crash("comma fill not supported on %c",fi,3)
    mov ecx,4                             ;#004478C1: 271 04000000               uv 02 00  1 1813      
    mov edx,397                           ;#004478C6: 272 8D010000               vu 04 00  1 1813      
    call #00462C02 (:%opFrame) (crash)    ;#004478CB: 350 32B30100               v  00 00  1 1814      
    mov eax,[#00402304]                   ;#004478D0: 241 04234000               uv 01 00  1 1815      
    mov [ebp] (msg),eax                   ;#004478D5: 211105 00                  uv 00 21  1 1816 01   
    add dword[ebx+eax*4-8],1              ;#004478D8: 203104203 F8 01            u  00 09  3 1818    *01*
    mov edi,[ebp+20] (prevebp)            ;#004478DD: 213175 14                  vu 80 20  1 1820      
    mov eax,[edi-12]                      ;#004478E0: 213107 F4                  uv 01 80  1 1823    *80*
    mov [ebp-4] (args),eax                ;#004478E3: 211105 FC                  uv 00 21  1 1824 01   
    mov [ebp-8] (nFrames), dword 3        ;#004478E6: 307105 F8 03000000         vu 00 20  1 1824      
    mov [ebp+28] (retaddr),#004478F9      ;#004478ED: 307105 1C F9784400         uv 00 20  1 1825      
    jmp #0044AB92 (code:crash)            ;#004478F4: 351 99320000               v  00 00  1 1825      
;  1062                         end if
;  1063                         showcommas = find('.',r1)
    mov ecx,8                             ;#004478F9: 271 08000000               uv 02 00  1 1826      
    mov edx,110                           ;#004478FE: 272 6E000000               vu 04 00  1 1826      
    call #00462C02 (:%opFrame) (find)     ;#00447903: 350 FAB20100               v  00 00  1 1827      
    mov [ebp] (needle), dword 46          ;#00447908: 307105 00 2E000000         uv 00 20  1 1828      
    mov edi,[ebp+20] (prevebp)            ;#0044790F: 213175 14                  vu 80 20  1 1828      
    mov eax,[edi-28]                      ;#00447912: 213107 E4                  uv 01 80  1 1831    *80*
    xor ebx,ebx                           ;#00447915: 061333                     vu 08 08  1 1831      
    cmp eax,h4                            ;#00447917: 075 00000040               uv 00 01  1 1832      
    jl #00447928                          ;#0044791C: 174 0A                     v  00 00  1 1832      
    add dword[ebx+eax*4-8],1              ;#0044791E: 203104203 F8 01            u  00 09  3 1833      
    cmp eax,649                           ;#00447923: 075 89020000               vu 00 01  1 1835      
    mov [ebp-4] (haystack),eax            ;#00447928: 211105 FC                  uv 00 21  1 1836      
    mov [ebp+28] (retaddr),#00447937      ;#0044792B: 307105 1C 37794400         vu 00 20  1 1836      
    jmp #0045AADB (code:find)             ;#00447932: 351 A4310100               v  00 00  1 1837      
    mov [ebp-80] (showcommas),eax         ;#00447937: 211105 B0                  uv 00 21  1 1838      
;  1064                         if showcommas=0 then showcommas = length(r1)+1 end if
    cmp eax,0                             ;#0044793A: 203370 00                  vu 00 01  1 1838      
    jne #0044796C                         ;#0044793D: 165 2D                     v  00 00  1 1839      
    lea edi,[ebp-212] (symtab[732])       ;#0044793F: 215275 2CFFFFFF            uv 80 20  1 1840      
    mov esi,[ebp-28] (r1)                 ;#00447945: 213165 E4                  vu 40 20  1 1840      
    mov edx,649                           ;#00447948: 272 89020000               uv 04 00  1 1841      
    call #0045EFEC (:%opLen)              ;#0044794D: 350 9A760100               v  00 00  1 1841      
    mov ecx,[ebp-212] (symtab[732])       ;#00447952: 213215 2CFFFFFF            uv 02 20  1 1842      
    add ecx,1                             ;#00447958: 203301 01                  uv 02 02  1 1843 02   
    mov edx,ecx                           ;#0044795B: 213321                     uv 04 02  1 1844 02   
    mov [ebp-80] (showcommas),ecx         ;#0044795D: 211115 B0                  vu 00 22  1 1844      
    shl edx,1                             ;#00447960: 321342                     u  04 04  1 1845      
    jno #0044796C                         ;#00447962: 161 08                     v  00 00  1 1845      
    lea edi,[ebp-80] (showcommas)         ;#00447964: 215175 B0                  uv 80 20  1 1846      
    call #00462764 (:%e01tcfAddiii)       ;#00447967: 350 F8AD0100               v  00 00  1 1846      
;  1065 --19/09/2020 bugfix ("-999" -> "-,999")
;  1066 --                      while showcommas>4 do
;  1067                         while showcommas>(4+(r1[1]='-')) do
    mov edi,[ebp-28] (r1)                 ;#0044796C: 213175 E4                  uv 80 20  1 1847      
    cmp edi,h4                            ;#0044796F: 201377 00000040            uv 00 80  1 1848 80   
    jne #00447981                         ;#00447975: 165 0A                     v  00 00  1 1848      
    mov esi,649                           ;#00447977: 276 89020000               uv 40 00  1 1849      
    call #00462744 (:%pUnassigned)        ;#0044797C: 350 C3AD0100               v  00 00  1 1849      
    mov edi,1                             ;#00447981: 277 01000000               uv 80 00  1 1850      
    mov esi,[ebp-28] (r1)                 ;#00447986: 213165 E4                  vu 40 20  1 1850      
    mov edx,649                           ;#00447989: 272 89020000               uv 04 00  1 1851      
    call #004610CE (:%pSubse1is)          ;#0044798E: 350 3B970100               v  00 00  1 1851      
    mov [ebp-212] (symtab[732]),eax       ;#00447993: 211205 2CFFFFFF            uv 00 21  1 1852      
    xor ecx,ecx                           ;#00447999: 061311                     vu 02 02  1 1852      
    cmp eax,45                            ;#0044799B: 203370 2D                  uv 00 01  1 1853      
    sete cl                               ;#0044799E: 017224301                  np 02 00  2 1854      
    mov [ebp-216] (symtab[733]),ecx       ;#004479A1: 211215 28FFFFFF            uv 00 22  1 1856      
    lea edi,[ebp-120] (symtab[675])       ;#004479A7: 215175 88                  vu 80 20  1 1856      
    mov ecx,[#0040205C] (JS)              ;#004479AA: 213015 5C204000            uv 02 00  1 1857      
    mov eax,[ebp-216] (symtab[733])       ;#004479B0: 213205 28FFFFFF            vu 01 20  1 1857      
    call #0045F261 (:%opAdd)              ;#004479B6: 350 A6780100               v  00 00  1 1858      
    mov edi,[ebp-80] (showcommas)         ;#004479BB: 213175 B0                  uv 80 20  1 1859      
    mov esi,[ebp-120] (symtab[675])       ;#004479BE: 213165 88                  vu 40 20  1 1859      
    cmp edi,esi                           ;#004479C1: 071367                     uv 00 C0  1 1860      
    jle #00447A73                         ;#004479C3: 017216 AA000000            v  00 00  1 1860      
;  1068                             showcommas -= 3
    sub edi,3                             ;#004479C9: 203357 03                  uv 80 80  1 1861      
    mov edx,edi                           ;#004479CC: 213327                     uv 04 80  1 1862 80   
    mov [ebp-80] (showcommas),edi         ;#004479CE: 211175 B0                  vu 00 A0  1 1862      
    shl edx,1                             ;#004479D1: 321342                     u  04 04  1 1863      
    jno #004479DD                         ;#004479D3: 161 08                     v  00 00  1 1863      
    lea edi,[ebp-80] (showcommas)         ;#004479D5: 215175 B0                  uv 80 20  1 1864      
    call #00462764 (:%e01tcfAddiii)       ;#004479D8: 350 87AD0100               v  00 00  1 1864      
;  1069                             r1 = r1[1..showcommas-1]&','&r1[showcommas..length(r1)]
    lea edi,[ebp-120] (symtab[675])       ;#004479DD: 215175 88                  uv 80 20  1 1865      
    mov ecx,[ebp-80] (showcommas)         ;#004479E0: 213115 B0                  vu 02 20  1 1865      
    mov eax,[#0040201C]                   ;#004479E3: 241 1C204000               uv 01 00  1 1866      
    call #0045F299 (:%opSub)              ;#004479E8: 350 AC780100               v  00 00  1 1866      
    mov esi,[ebp-28] (r1)                 ;#004479ED: 213165 E4                  uv 40 20  1 1867      
    cmp esi,h4                            ;#004479F0: 201376 00000040            uv 00 40  1 1868 40   
    jne #00447A02                         ;#004479F6: 165 0A                     v  00 00  1 1868      
    mov esi,649                           ;#004479F8: 276 89020000               uv 40 00  1 1869      
    call #00462744 (:%pUnassigned)        ;#004479FD: 350 42AD0100               v  00 00  1 1869      
    lea eax,[ebp-176] (symtab[711])       ;#00447A02: 215205 50FFFFFF            uv 01 20  1 1870      
    mov edi,1                             ;#00447A08: 277 01000000               vu 80 00  1 1870      
    mov ecx,[ebp-120] (symtab[675])       ;#00447A0D: 213115 88                  uv 02 20  1 1871      
    mov edx,649                           ;#00447A10: 272 89020000               vu 04 00  1 1871      
    call #00460C83 (:%pSubsss)            ;#00447A15: 350 69920100               v  00 00  1 1872      
    mov edi,[ebp-28] (r1)                 ;#00447A1A: 213175 E4                  uv 80 20  1 1873      
    cmp edi,h4                            ;#00447A1D: 201377 00000040            uv 00 80  1 1874 80   
    jne #00447A2F                         ;#00447A23: 165 0A                     v  00 00  1 1874      
    mov esi,649                           ;#00447A25: 276 89020000               uv 40 00  1 1875      
    call #00462744 (:%pUnassigned)        ;#00447A2A: 350 15AD0100               v  00 00  1 1875      
    lea eax,[ebp-220] (symtab[734])       ;#00447A2F: 215205 24FFFFFF            uv 01 20  1 1876      
    mov edi,[ebp-80] (showcommas)         ;#00447A35: 213175 B0                  vu 80 20  1 1876      
    mov ecx,-1                            ;#00447A38: 271 FFFFFFFF               uv 02 00  1 1877      
    mov esi,[ebp-28] (r1)                 ;#00447A3D: 213165 E4                  vu 40 20  1 1877      
    mov edx,649                           ;#00447A40: 272 89020000               uv 04 00  1 1878      
    call #00460C83 (:%pSubsss)            ;#00447A45: 350 39920100               v  00 00  1 1878      
    mov ecx,3                             ;#00447A4A: 271 03000000               uv 02 00  1 1879      
    push #00447A6E                        ;#00447A4F: 150 6E7A4400               vu 00 00  1 1879      
    push dword[ebp-220] (symtab[734])     ;#00447A54: 377265 24FFFFFF            np 00 20  2 1880      
    push dword[#004022D4]                 ;#00447A5A: 377065 D4224000            np 00 00  2 1882      
    push dword[ebp-176] (symtab[711])     ;#00447A60: 377265 50FFFFFF            np 00 20  2 1884      
    lea eax,[ebp-28] (r1)                 ;#00447A66: 215105 E4                  uv 01 20  1 1886      
    jmp #0045FF95 (:%opConcatN)           ;#00447A69: 351 27850100               v  00 00  1 1886      
;  1070                         end while
    jmp #0044796C                         ;#00447A6E: 351 F9FEFFFF               v  00 00  1 1887      
;  1071                     end if
;  1072                     if blankTZ and find('.',r1) then
    mov eax,[ebp-88] (blankTZ)            ;#00447A73: 213105 A8                  uv 01 20  1 1888      
    test eax,eax                          ;#00447A76: 205300                     uv 00 01  1 1889 01   
    je #00447B8D                          ;#00447A78: 017204 0F010000            v  00 00  1 1889      
    mov ecx,8                             ;#00447A7E: 271 08000000               uv 02 00  1 1890      
    mov edx,110                           ;#00447A83: 272 6E000000               vu 04 00  1 1890      
    call #00462C02 (:%opFrame) (find)     ;#00447A88: 350 75B10100               v  00 00  1 1891      
    mov [ebp] (needle), dword 46          ;#00447A8D: 307105 00 2E000000         uv 00 20  1 1892      
    mov edi,[ebp+20] (prevebp)            ;#00447A94: 213175 14                  vu 80 20  1 1892      
    mov eax,[edi-28]                      ;#00447A97: 213107 E4                  uv 01 80  1 1895    *80*
    xor ebx,ebx                           ;#00447A9A: 061333                     vu 08 08  1 1895      
    cmp eax,h4                            ;#00447A9C: 075 00000040               uv 00 01  1 1896      
    jl #00447AAD                          ;#00447AA1: 174 0A                     v  00 00  1 1896      
    add dword[ebx+eax*4-8],1              ;#00447AA3: 203104203 F8 01            u  00 09  3 1897      
    cmp eax,649                           ;#00447AA8: 075 89020000               vu 00 01  1 1899      
    mov [ebp-4] (haystack),eax            ;#00447AAD: 211105 FC                  uv 00 21  1 1900      
    mov [ebp+28] (retaddr),#00447ABC      ;#00447AB0: 307105 1C BC7A4400         vu 00 20  1 1900      
    jmp #0045AADB (code:find)             ;#00447AB7: 351 1F300100               v  00 00  1 1901      
    test eax,eax                          ;#00447ABC: 205300                     uv 00 01  1 1902      
    je #00447B8D                          ;#00447ABE: 017204 C9000000            v  00 00  1 1902      
;  1073                         for r1dx=length(r1) to 1 by -1 do
    lea edi,[ebp-216] (symtab[733])       ;#00447AC4: 215275 28FFFFFF            uv 80 20  1 1903      
    mov esi,[ebp-28] (r1)                 ;#00447ACA: 213165 E4                  vu 40 20  1 1903      
    mov edx,649                           ;#00447ACD: 272 89020000               uv 04 00  1 1904      
    call #0045EFEC (:%opLen)              ;#00447AD2: 350 15750100               v  00 00  1 1904      
    mov [ebp-224] (r1dx),ecx              ;#00447AD7: 211215 20FFFFFF            uv 00 22  1 1905      
    cmp ecx,1                             ;#00447ADD: 201371 01000000            vu 00 02  1 1905      
    jl #00447B8D                          ;#00447AE3: 017214 A4000000            v  00 00  1 1906      
;  1074                             integer r1ch = r1[r1dx]
    mov edi,[ebp-28] (r1)                 ;#00447AE9: 213175 E4                  uv 80 20  1 1907      
    cmp edi,h4                            ;#00447AEC: 201377 00000040            uv 00 80  1 1908 80   
    jne #00447AFE                         ;#00447AF2: 165 0A                     v  00 00  1 1908      
    mov esi,649                           ;#00447AF4: 276 89020000               uv 40 00  1 1909      
    call #00462744 (:%pUnassigned)        ;#00447AF9: 350 46AC0100               v  00 00  1 1909      
    mov edi,[ebp-224] (r1dx)              ;#00447AFE: 213275 20FFFFFF            uv 80 20  1 1910      
    mov esi,[ebp-28] (r1)                 ;#00447B04: 213165 E4                  vu 40 20  1 1910      
    mov edx,649                           ;#00447B07: 272 89020000               uv 04 00  1 1911      
    call #004610CE (:%pSubse1is)          ;#00447B0C: 350 BD950100               v  00 00  1 1911      
    mov [ebp-228] (r1ch),eax              ;#00447B11: 211205 1CFFFFFF            uv 00 21  1 1912      
;  1075                             if r1ch='0' or r1ch='.' then
    cmp eax,48                            ;#00447B17: 203370 30                  vu 00 01  1 1912      
    je #00447B21                          ;#00447B1A: 164 05                     v  00 00  1 1913      
    cmp eax,46                            ;#00447B1C: 203370 2E                  uv 00 01  1 1914      
    jne #00447B66                         ;#00447B1F: 165 45                     v  00 00  1 1914      
;  1076                                 r1[r1dx] = ' '
    mov ecx,[ebp-28] (r1)                 ;#00447B21: 213115 E4                  uv 02 20  1 1915      
    cmp ecx,h4                            ;#00447B24: 201371 00000040            uv 00 02  1 1916 02   
    jne #00447B36                         ;#00447B2A: 165 0A                     v  00 00  1 1916      
    mov esi,649                           ;#00447B2C: 276 89020000               uv 40 00  1 1917      
    call #00462744 (:%pUnassigned)        ;#00447B31: 350 0EAC0100               v  00 00  1 1917      
    mov esi,ecx                           ;#00447B36: 211316                     uv 40 02  1 1918      
    mov edi,[ebp-224] (r1dx)              ;#00447B38: 213275 20FFFFFF            vu 80 20  1 1918      
    mov ecx,32                            ;#00447B3E: 271 20000000               uv 02 00  1 1919      
    lea eax,[ebp-28] (r1)                 ;#00447B43: 215105 E4                  vu 01 20  1 1919      
    call #004607F3 (:%pRepe1)             ;#00447B46: 350 A88C0100               v  00 00  1 1920      
    mov eax,[ebp-28] (r1)                 ;#00447B4B: 213105 E4                  uv 01 20  1 1921      
    cmp eax,h4                            ;#00447B4E: 075 00000040               uv 00 01  1 1922 01   
    jl #00447B5C                          ;#00447B53: 174 07                     v  00 00  1 1922      
    cmp byte[ebx+eax*4-1],#82             ;#00447B55: 200174203 FF 82            u  00 09  2 1923      
    je #00447B66                          ;#00447B5A: 164 0A                     v  00 00  1 1924      
    mov ecx,649                           ;#00447B5C: 271 89020000               uv 02 00  1 1925      
    call #00462D8D (:%opTcFail)           ;#00447B61: 350 27B20100               v  00 00  1 1925      
;  1077                             end if
;  1078                             if r1ch!='0' then exit end if
    mov ecx,[ebp-228] (r1ch)              ;#00447B66: 213215 1CFFFFFF            uv 02 20  1 1926      
    cmp ecx,48                            ;#00447B6C: 203371 30                  uv 00 02  1 1927 02   
    jne #00447B8D                         ;#00447B6F: 165 1C                     v  00 00  1 1927      
;  1079                         end for
    mov esi,[ebp-224] (r1dx)              ;#00447B71: 213265 20FFFFFF            uv 40 20  1 1928      
    mov edx,1                             ;#00447B77: 272 01000000               vu 04 00  1 1928      
    add esi,-1                            ;#00447B7C: 203306 FF                  uv 40 40  1 1929      
    cmp esi,edx                           ;#00447B7F: 073362                     uv 00 44  1 1930 40   
    mov [ebp-224] (r1dx),esi              ;#00447B81: 211265 20FFFFFF            vu 00 60  1 1930      
    jge #00447AE9                         ;#00447B87: 017215 5CFFFFFF            v  00 00  1 1931      
;  1080                     end if
;  1081                 end if
;  1082 -- replaced 19/10/17:
;  1083 --              minfieldwidth -= length(r1)
;  1084 --              minfieldwidth -= length(utf8_to_utf32(r1))
;  1085 --DEV/SUG:
;  1086 --              minfieldwidth -= length(iff(r_len!=0?call_func(r_len,{r1}):r1))
;  1087                 minfieldwidth -= length(iff(unicode_align?utf8_to_utf32(r1):r1))
    mov edi,[#00402290] (unicode_align)   ;#00447B8D: 213075 90224000            uv 80 00  1 1932      
    test edi,edi                          ;#00447B93: 205377                     uv 00 80  1 1933 80   
    je #00447BF3                          ;#00447B95: 164 5C                     v  00 00  1 1933      
    mov ecx,15                            ;#00447B97: 271 0F000000               uv 02 00  1 1934      
    mov edx,390                           ;#00447B9C: 272 86010000               vu 04 00  1 1934      
    call :%opFrame (utf8_to_utf32)        ;#00447BA1: 350 5CB00100               v  00 00  1 1935      
    mov edi,[ebp+20] (prevebp)            ;#00447BA6: 213175 14                  uv 80 20  1 1936      
    mov eax,[edi-28]                      ;#00447BA9: 213107 E4                  uv 01 80  1 1939 80 *80*
    xor ebx,ebx                           ;#00447BAC: 061333                     vu 08 08  1 1939      
    cmp eax,h4                            ;#00447BAE: 075 00000040               uv 00 01  1 1940      
    jl #00447BBF                          ;#00447BB3: 174 0A                     v  00 00  1 1940      
    add dword[ebx+eax*4-8],1              ;#00447BB5: 203104203 F8 01            u  00 09  3 1941      
    cmp eax,649                           ;#00447BBA: 075 89020000               vu 00 01  1 1943      
    mov [ebp] (utf8),eax                  ;#00447BBF: 211105 00                  uv 00 21  1 1944      
    mov [ebp+28] (retaddr),#00447BCE      ;#00447BC2: 307105 1C CE7B4400         vu 00 20  1 1944      
    jmp #0044C195 (code:utf8_to_utf32)    ;#00447BC9: 351 C7450000               v  00 00  1 1945      
    push eax                              ;#00447BCE: 120                        uv 00 01  1 1946      
    mov ecx,[ebp-196] (symtab[725])       ;#00447BCF: 213215 3CFFFFFF            vu 02 20  1 1946      
    cmp ecx,h4                            ;#00447BD5: 201371 00000040            uv 00 02  1 1947      
    jle #00447BEB                         ;#00447BDB: 176 0E                     v  00 00  1 1947      
    sub dword[ebx+ecx*4-8],1              ;#00447BDD: 203154213 F8 01            u  00 0A  3 1948      
    jne #00447BEB                         ;#00447BE2: 165 07                     v  00 00  1 1950      
    mov edx,ecx                           ;#00447BE4: 213321                     uv 04 02  1 1951      
    call #004639A8 (:%pDealloc)           ;#00447BE6: 350 BDBD0100               v  00 00  1 1951      
    pop dword[ebp-196] (symtab[725])      ;#00447BEB: 217205 3CFFFFFF            np 00 20  3 1952      
    jmp #00447C3A                         ;#00447BF1: 353 47                     v  00 00  1 1955      
    mov esi,[ebp-28] (r1)                 ;#00447BF3: 213165 E4                  uv 40 20  1 1956      
    cmp esi,h4                            ;#00447BF6: 201376 00000040            uv 00 40  1 1957 40   
    jne #00447C08                         ;#00447BFC: 165 0A                     v  00 00  1 1957      
    mov esi,649                           ;#00447BFE: 276 89020000               uv 40 00  1 1958      
    call #00462744 (:%pUnassigned)        ;#00447C03: 350 3CAB0100               v  00 00  1 1958      
    mov edx,[ebp-196] (symtab[725])       ;#00447C08: 213225 3CFFFFFF            uv 04 20  1 1959      
    cmp esi,h4                            ;#00447C0E: 201376 00000040            vu 00 40  1 1959      
    jl #00447C20                          ;#00447C14: 174 0A                     v  00 00  1 1960      
    add dword[ebx+esi*4-8],1              ;#00447C16: 203104263 F8 01            u  00 48  3 1961      
    cmp eax,649                           ;#00447C1B: 075 89020000               vu 00 01  1 1963      
    mov [ebp-196] (symtab[725]),esi       ;#00447C20: 211265 3CFFFFFF            uv 00 60  1 1964      
    cmp edx,h4                            ;#00447C26: 201372 00000040            vu 00 04  1 1964      
    jle #00447C3A                         ;#00447C2C: 176 0C                     v  00 00  1 1965      
    sub dword[ebx+edx*4-8],1              ;#00447C2E: 203154223 F8 01            u  00 0C  3 1966      
    jne #00447C3A                         ;#00447C33: 165 05                     v  00 00  1 1968      
    call #004639A8 (:%pDealloc)           ;#00447C35: 350 6EBD0100               v  00 00  1 1969      
    lea edi,[ebp-212] (symtab[732])       ;#00447C3A: 215275 2CFFFFFF            uv 80 20  1 1970      
    mov esi,[ebp-196] (symtab[725])       ;#00447C40: 213265 3CFFFFFF            vu 40 20  1 1970      
    mov edx,725                           ;#00447C46: 272 D5020000               uv 04 00  1 1971      
    call #0045EFEC (:%opLen)              ;#00447C4B: 350 9C730100               v  00 00  1 1971      
    mov edx,[ebp-196] (symtab[725])       ;#00447C50: 213225 3CFFFFFF            uv 04 20  1 1972      
    cmp edx,h4                            ;#00447C56: 201372 00000040            uv 00 04  1 1973 04   
    mov [ebp-196] (symtab[725]),ebx       ;#00447C5C: 211235 3CFFFFFF            vu 00 28  1 1973      
    jle #00447C70                         ;#00447C62: 176 0C                     v  00 00  1 1974      
    sub dword[ebx+edx*4-8],1              ;#00447C64: 203154223 F8 01            u  00 0C  3 1975      
    jne #00447C70                         ;#00447C69: 165 05                     v  00 00  1 1977      
    call #004639A8 (:%pDealloc)           ;#00447C6B: 350 38BD0100               v  00 00  1 1978      
    mov edi,[ebp-92] (minfieldwidth)      ;#00447C70: 213175 A4                  uv 80 20  1 1979      
    mov eax,[ebp-212] (symtab[732])       ;#00447C73: 213205 2CFFFFFF            vu 01 20  1 1979      
    sub edi,eax                           ;#00447C79: 051307                     uv 80 81  1 1980      
    mov edx,edi                           ;#00447C7B: 213327                     uv 04 80  1 1981 80   
    mov [ebp-92] (minfieldwidth),edi      ;#00447C7D: 211175 A4                  vu 00 A0  1 1981      
    shl edx,1                             ;#00447C80: 321342                     u  04 04  1 1982      
    jno #00447C8C                         ;#00447C82: 161 08                     v  00 00  1 1982      
    lea edi,[ebp-92] (minfieldwidth)      ;#00447C84: 215175 A4                  uv 80 20  1 1983      
    call #00462764 (:%e01tcfAddiii)       ;#00447C87: 350 D8AA0100               v  00 00  1 1983      
;  1088                 if minfieldwidth>0 then
    mov ecx,[ebp-92] (minfieldwidth)      ;#00447C8C: 213115 A4                  uv 02 20  1 1984      
    cmp ecx,0                             ;#00447C8F: 203371 00                  uv 00 02  1 1985 02   
    jle #0044806F                         ;#00447C92: 017216 D7030000            v  00 00  1 1985      
;  1089 -- 20/9/2020
;  1090 --                  if zerofill then
;  1091                     if zerofill and find('-',r1)=0 then
    mov esi,[ebp-64] (zerofill)           ;#00447C98: 213165 C0                  uv 40 20  1 1986      
    test esi,esi                          ;#00447C9B: 205366                     uv 00 40  1 1987 40   
    je #00447D5F                          ;#00447C9D: 017204 BC000000            v  00 00  1 1987      
    mov ecx,8                             ;#00447CA3: 271 08000000               uv 02 00  1 1988      
    mov edx,110                           ;#00447CA8: 272 6E000000               vu 04 00  1 1988      
    call #00462C02 (:%opFrame) (find)     ;#00447CAD: 350 50AF0100               v  00 00  1 1989      
    mov [ebp] (needle), dword 45          ;#00447CB2: 307105 00 2D000000         uv 00 20  1 1990      
    mov edi,[ebp+20] (prevebp)            ;#00447CB9: 213175 14                  vu 80 20  1 1990      
    mov eax,[edi-28]                      ;#00447CBC: 213107 E4                  uv 01 80  1 1993    *80*
    xor ebx,ebx                           ;#00447CBF: 061333                     vu 08 08  1 1993      
    cmp eax,h4                            ;#00447CC1: 075 00000040               uv 00 01  1 1994      
    jl #00447CD2                          ;#00447CC6: 174 0A                     v  00 00  1 1994      
    add dword[ebx+eax*4-8],1              ;#00447CC8: 203104203 F8 01            u  00 09  3 1995      
    cmp eax,649                           ;#00447CCD: 075 89020000               vu 00 01  1 1997      
    mov [ebp-4] (haystack),eax            ;#00447CD2: 211105 FC                  uv 00 21  1 1998      
    mov [ebp+28] (retaddr),#00447CE1      ;#00447CD5: 307105 1C E17C4400         vu 00 20  1 1998      
    jmp #0045AADB (code:find)             ;#00447CDC: 351 FA2D0100               v  00 00  1 1999      
    cmp eax,0                             ;#00447CE1: 203370 00                  uv 00 01  1 2000      
    jne #00447D5F                         ;#00447CE4: 165 79                     v  00 00  1 2000      
;  1092                         r1 = repeat('0',minfieldwidth)&r1
    mov ecx,6                             ;#00447CE6: 271 06000000               uv 02 00  1 2001      
    mov edx,206                           ;#00447CEB: 272 CE000000               vu 04 00  1 2001      
    call :%opFrame (repeatch)             ;#00447CF0: 350 0DAF0100               v  00 00  1 2002      
    mov [ebp] (ch), dword 48              ;#00447CF5: 307105 00 30000000         uv 00 20  1 2003      
    mov edi,[ebp+20] (prevebp)            ;#00447CFC: 213175 14                  vu 80 20  1 2003      
    mov eax,[edi-92]                      ;#00447CFF: 213107 A4                  uv 01 80  1 2006    *80*
    mov [ebp-4] (n),eax                   ;#00447D02: 211105 FC                  uv 00 21  1 2007 01   
    mov [ebp+28] (retaddr),#00447D11      ;#00447D05: 307105 1C 117D4400         vu 00 20  1 2007      
    jmp #0045581E (code:repeatch)         ;#00447D0C: 351 0DDB0000               v  00 00  1 2008      
    push eax                              ;#00447D11: 120                        uv 00 01  1 2009      
    mov edi,[ebp-176] (symtab[711])       ;#00447D12: 213275 50FFFFFF            vu 80 20  1 2009      
    cmp edi,h4                            ;#00447D18: 201377 00000040            uv 00 80  1 2010      
    jle #00447D2E                         ;#00447D1E: 176 0E                     v  00 00  1 2010      
    sub dword[ebx+edi*4-8],1              ;#00447D20: 203154273 F8 01            u  00 88  3 2011      
    jne #00447D2E                         ;#00447D25: 165 07                     v  00 00  1 2013      
    mov edx,edi                           ;#00447D27: 213327                     uv 04 80  1 2014      
    call #004639A8 (:%pDealloc)           ;#00447D29: 350 7ABC0100               v  00 00  1 2014      
    pop dword[ebp-176] (symtab[711])      ;#00447D2E: 217205 50FFFFFF            np 00 20  3 2015      
    mov ecx,[ebp-28] (r1)                 ;#00447D34: 213115 E4                  uv 02 20  1 2018      
    cmp ecx,h4                            ;#00447D37: 201371 00000040            uv 00 02  1 2019 02   
    jne #00447D49                         ;#00447D3D: 165 0A                     v  00 00  1 2019      
    mov esi,649                           ;#00447D3F: 276 89020000               uv 40 00  1 2020      
    call #00462744 (:%pUnassigned)        ;#00447D44: 350 FBA90100               v  00 00  1 2020      
    lea edx,[ebp-28] (r1)                 ;#00447D49: 215125 E4                  uv 04 20  1 2021      
    lea edi,[ebp-176] (symtab[711])       ;#00447D4C: 215275 50FFFFFF            vu 80 20  1 2021      
    lea ecx,[ebp-28] (r1)                 ;#00447D52: 215115 E4                  uv 02 20  1 2022      
    call #0045FD65 (:%opConcat)           ;#00447D55: 350 0B800100               v  00 00  1 2022      
    jmp #0044806F                         ;#00447D5A: 351 10030000               v  00 00  1 2023      
;  1093                     elsif leftjustify then
    mov esi,[ebp-68] (leftjustify)        ;#00447D5F: 213165 BC                  uv 40 20  1 2024      
    test esi,esi                          ;#00447D62: 205366                     uv 00 40  1 2025 40   
    je #00447DDF                          ;#00447D64: 164 79                     v  00 00  1 2025      
;  1094                         r1 = r1&repeat(' ',minfieldwidth)
    mov ecx,6                             ;#00447D66: 271 06000000               uv 02 00  1 2026      
    mov edx,206                           ;#00447D6B: 272 CE000000               vu 04 00  1 2026      
    call :%opFrame (repeatch)             ;#00447D70: 350 8DAE0100               v  00 00  1 2027      
    mov [ebp] (ch), dword 32              ;#00447D75: 307105 00 20000000         uv 00 20  1 2028      
    mov edi,[ebp+20] (prevebp)            ;#00447D7C: 213175 14                  vu 80 20  1 2028      
    mov eax,[edi-92]                      ;#00447D7F: 213107 A4                  uv 01 80  1 2031    *80*
    mov [ebp-4] (n),eax                   ;#00447D82: 211105 FC                  uv 00 21  1 2032 01   
    mov [ebp+28] (retaddr),#00447D91      ;#00447D85: 307105 1C 917D4400         vu 00 20  1 2032      
    jmp #0045581E (code:repeatch)         ;#00447D8C: 351 8DDA0000               v  00 00  1 2033      
    push eax                              ;#00447D91: 120                        uv 00 01  1 2034      
    mov edi,[ebp-176] (symtab[711])       ;#00447D92: 213275 50FFFFFF            vu 80 20  1 2034      
    cmp edi,h4                            ;#00447D98: 201377 00000040            uv 00 80  1 2035      
    jle #00447DAE                         ;#00447D9E: 176 0E                     v  00 00  1 2035      
    sub dword[ebx+edi*4-8],1              ;#00447DA0: 203154273 F8 01            u  00 88  3 2036      
    jne #00447DAE                         ;#00447DA5: 165 07                     v  00 00  1 2038      
    mov edx,edi                           ;#00447DA7: 213327                     uv 04 80  1 2039      
    call #004639A8 (:%pDealloc)           ;#00447DA9: 350 FABB0100               v  00 00  1 2039      
    pop dword[ebp-176] (symtab[711])      ;#00447DAE: 217205 50FFFFFF            np 00 20  3 2040      
    mov ecx,[ebp-28] (r1)                 ;#00447DB4: 213115 E4                  uv 02 20  1 2043      
    cmp ecx,h4                            ;#00447DB7: 201371 00000040            uv 00 02  1 2044 02   
    jne #00447DC9                         ;#00447DBD: 165 0A                     v  00 00  1 2044      
    mov esi,649                           ;#00447DBF: 276 89020000               uv 40 00  1 2045      
    call #00462744 (:%pUnassigned)        ;#00447DC4: 350 7BA90100               v  00 00  1 2045      
    lea edx,[ebp-28] (r1)                 ;#00447DC9: 215125 E4                  uv 04 20  1 2046      
    lea edi,[ebp-28] (r1)                 ;#00447DCC: 215175 E4                  vu 80 20  1 2046      
    lea ecx,[ebp-176] (symtab[711])       ;#00447DCF: 215215 50FFFFFF            uv 02 20  1 2047      
    call #0045FD65 (:%opConcat)           ;#00447DD5: 350 8B7F0100               v  00 00  1 2047      
;  1095 --DEV/SUG:
    jmp #0044806F                         ;#00447DDA: 351 90020000               v  00 00  1 2048      
;  1096                     elsif centre then
    mov esi,[ebp-72] (centre)             ;#00447DDF: 213165 B8                  uv 40 20  1 2049      
    test esi,esi                          ;#00447DE2: 205366                     uv 00 40  1 2050 40   
    je #00447FFB                          ;#00447DE4: 017204 11020000            v  00 00  1 2050      
;  1097                         integer mh = floor(minfieldwidth/2)
    mov eax,[ebp-92] (minfieldwidth)      ;#00447DEA: 213105 A4                  uv 01 20  1 2051      
    sar eax,1                             ;#00447DED: 321370                     u  01 01  1 2052      
    mov [ebp-232] (mh),eax                ;#00447DEF: 211205 18FFFFFF            uv 00 21  1 2053 01   
;  1098                         if centre=1 then    -- '=', split 3:4
    cmp esi,1                             ;#00447DF5: 203376 01                  vu 00 40  1 2053      
    jne #00447F01                         ;#00447DF8: 017205 03010000            v  00 00  1 2054      
;  1099                             r1 = repeat(' ',mh)&r1&repeat(' ',minfieldwidth-mh)
    mov ecx,6                             ;#00447DFE: 271 06000000               uv 02 00  1 2055      
    mov edx,206                           ;#00447E03: 272 CE000000               vu 04 00  1 2055      
    call :%opFrame (repeatch)             ;#00447E08: 350 F5AD0100               v  00 00  1 2056      
    mov [ebp] (ch), dword 32              ;#00447E0D: 307105 00 20000000         uv 00 20  1 2057      
    mov edi,[ebp+20] (prevebp)            ;#00447E14: 213175 14                  vu 80 20  1 2057      
    mov eax,[edi-232]                     ;#00447E17: 213207 18FFFFFF            uv 01 80  1 2060    *80*
    mov [ebp-4] (n),eax                   ;#00447E1D: 211105 FC                  uv 00 21  1 2061 01   
    mov [ebp+28] (retaddr),#00447E2C      ;#00447E20: 307105 1C 2C7E4400         vu 00 20  1 2061      
    jmp #0045581E (code:repeatch)         ;#00447E27: 351 F2D90000               v  00 00  1 2062      
    push eax                              ;#00447E2C: 120                        uv 00 01  1 2063      
    mov edi,[ebp-176] (symtab[711])       ;#00447E2D: 213275 50FFFFFF            vu 80 20  1 2063      
    cmp edi,h4                            ;#00447E33: 201377 00000040            uv 00 80  1 2064      
    jle #00447E49                         ;#00447E39: 176 0E                     v  00 00  1 2064      
    sub dword[ebx+edi*4-8],1              ;#00447E3B: 203154273 F8 01            u  00 88  3 2065      
    jne #00447E49                         ;#00447E40: 165 07                     v  00 00  1 2067      
    mov edx,edi                           ;#00447E42: 213327                     uv 04 80  1 2068      
    call #004639A8 (:%pDealloc)           ;#00447E44: 350 5FBB0100               v  00 00  1 2068      
    pop dword[ebp-176] (symtab[711])      ;#00447E49: 217205 50FFFFFF            np 00 20  3 2069      
    lea edi,[ebp-120] (symtab[675])       ;#00447E4F: 215175 88                  uv 80 20  1 2072      
    mov ecx,[ebp-92] (minfieldwidth)      ;#00447E52: 213115 A4                  vu 02 20  1 2072      
    mov eax,[ebp-232] (mh)                ;#00447E55: 213205 18FFFFFF            uv 01 20  1 2073      
    call #0045F299 (:%opSub)              ;#00447E5B: 350 39740100               v  00 00  1 2073      
    mov ecx,6                             ;#00447E60: 271 06000000               uv 02 00  1 2074      
    mov edx,206                           ;#00447E65: 272 CE000000               vu 04 00  1 2074      
    call :%opFrame (repeatch)             ;#00447E6A: 350 93AD0100               v  00 00  1 2075      
    mov [ebp] (ch), dword 32              ;#00447E6F: 307105 00 20000000         uv 00 20  1 2076      
    mov edi,[ebp+20] (prevebp)            ;#00447E76: 213175 14                  vu 80 20  1 2076      
    mov eax,[edi-120]                     ;#00447E79: 213107 88                  uv 01 80  1 2079    *80*
    mov [edi-120], dword h4               ;#00447E7C: 307107 88 00000040         vu 00 80  1 2079      
    cmp eax,h4                            ;#00447E83: 075 00000040               uv 00 01  1 2080      
    jne #00447E94                         ;#00447E88: 165 0A                     v  00 00  1 2080      
    mov esi,675                           ;#00447E8A: 276 A3020000               uv 40 00  1 2081      
    call #00462744 (:%pUnassigned)        ;#00447E8F: 350 B0A80100               v  00 00  1 2081      
    mov [ebp-4] (n),eax                   ;#00447E94: 211105 FC                  uv 00 21  1 2082      
    mov [ebp+28] (retaddr),#00447EA3      ;#00447E97: 307105 1C A37E4400         vu 00 20  1 2082      
    jmp #0045581E (code:repeatch)         ;#00447E9E: 351 7BD90000               v  00 00  1 2083      
    push eax                              ;#00447EA3: 120                        uv 00 01  1 2084      
    mov esi,[ebp-220] (symtab[734])       ;#00447EA4: 213265 24FFFFFF            vu 40 20  1 2084      
    cmp esi,h4                            ;#00447EAA: 201376 00000040            uv 00 40  1 2085      
    jle #00447EC0                         ;#00447EB0: 176 0E                     v  00 00  1 2085      
    sub dword[ebx+esi*4-8],1              ;#00447EB2: 203154263 F8 01            u  00 48  3 2086      
    jne #00447EC0                         ;#00447EB7: 165 07                     v  00 00  1 2088      
    mov edx,esi                           ;#00447EB9: 213326                     uv 04 40  1 2089      
    call #004639A8 (:%pDealloc)           ;#00447EBB: 350 E8BA0100               v  00 00  1 2089      
    pop dword[ebp-220] (symtab[734])      ;#00447EC0: 217205 24FFFFFF            np 00 20  3 2090      
    mov edi,[ebp-28] (r1)                 ;#00447EC6: 213175 E4                  uv 80 20  1 2093      
    cmp edi,h4                            ;#00447EC9: 201377 00000040            uv 00 80  1 2094 80   
    jne #00447EDB                         ;#00447ECF: 165 0A                     v  00 00  1 2094      
    mov esi,649                           ;#00447ED1: 276 89020000               uv 40 00  1 2095      
    call #00462744 (:%pUnassigned)        ;#00447ED6: 350 69A80100               v  00 00  1 2095      
    mov ecx,3                             ;#00447EDB: 271 03000000               uv 02 00  1 2096      
    push #00447EFC                        ;#00447EE0: 150 FC7E4400               vu 00 00  1 2096      
    push dword[ebp-220] (symtab[734])     ;#00447EE5: 377265 24FFFFFF            np 00 20  2 2097      
    push dword[ebp-28] (r1)               ;#00447EEB: 377165 E4                  np 00 20  2 2099      
    push dword[ebp-176] (symtab[711])     ;#00447EEE: 377265 50FFFFFF            np 00 20  2 2101      
    lea eax,[ebp-28] (r1)                 ;#00447EF4: 215105 E4                  uv 01 20  1 2103      
    jmp #0045FF95 (:%opConcatN)           ;#00447EF7: 351 99800100               v  00 00  1 2103      
    jmp #0044806F                         ;#00447EFC: 351 6E010000               v  00 00  1 2104      
;  1100                         else                -- '|', split 4:3
;  1101                             r1 = repeat(' ',minfieldwidth-mh)&r1&repeat(' ',mh)
    lea edi,[ebp-120] (symtab[675])       ;#00447F01: 215175 88                  uv 80 20  1 2105      
    mov ecx,[ebp-92] (minfieldwidth)      ;#00447F04: 213115 A4                  vu 02 20  1 2105      
    call #0045F299 (:%opSub)              ;#00447F07: 350 8D730100               v  00 00  1 2106      
    mov ecx,6                             ;#00447F0C: 271 06000000               uv 02 00  1 2107      
    mov edx,206                           ;#00447F11: 272 CE000000               vu 04 00  1 2107      
    call :%opFrame (repeatch)             ;#00447F16: 350 E7AC0100               v  00 00  1 2108      
    mov [ebp] (ch), dword 32              ;#00447F1B: 307105 00 20000000         uv 00 20  1 2109      
    mov edi,[ebp+20] (prevebp)            ;#00447F22: 213175 14                  vu 80 20  1 2109      
    mov eax,[edi-120]                     ;#00447F25: 213107 88                  uv 01 80  1 2112    *80*
    mov [edi-120], dword h4               ;#00447F28: 307107 88 00000040         vu 00 80  1 2112      
    cmp eax,h4                            ;#00447F2F: 075 00000040               uv 00 01  1 2113      
    jne #00447F40                         ;#00447F34: 165 0A                     v  00 00  1 2113      
    mov esi,675                           ;#00447F36: 276 A3020000               uv 40 00  1 2114      
    call #00462744 (:%pUnassigned)        ;#00447F3B: 350 04A80100               v  00 00  1 2114      
    mov [ebp-4] (n),eax                   ;#00447F40: 211105 FC                  uv 00 21  1 2115      
    mov [ebp+28] (retaddr),#00447F4F      ;#00447F43: 307105 1C 4F7F4400         vu 00 20  1 2115      
    jmp #0045581E (code:repeatch)         ;#00447F4A: 351 CFD80000               v  00 00  1 2116      
    push eax                              ;#00447F4F: 120                        uv 00 01  1 2117      
    mov esi,[ebp-176] (symtab[711])       ;#00447F50: 213265 50FFFFFF            vu 40 20  1 2117      
    cmp esi,h4                            ;#00447F56: 201376 00000040            uv 00 40  1 2118      
    jle #00447F6C                         ;#00447F5C: 176 0E                     v  00 00  1 2118      
    sub dword[ebx+esi*4-8],1              ;#00447F5E: 203154263 F8 01            u  00 48  3 2119      
    jne #00447F6C                         ;#00447F63: 165 07                     v  00 00  1 2121      
    mov edx,esi                           ;#00447F65: 213326                     uv 04 40  1 2122      
    call #004639A8 (:%pDealloc)           ;#00447F67: 350 3CBA0100               v  00 00  1 2122      
    pop dword[ebp-176] (symtab[711])      ;#00447F6C: 217205 50FFFFFF            np 00 20  3 2123      
    mov ecx,6                             ;#00447F72: 271 06000000               uv 02 00  1 2126      
    mov edx,206                           ;#00447F77: 272 CE000000               vu 04 00  1 2126      
    call :%opFrame (repeatch)             ;#00447F7C: 350 81AC0100               v  00 00  1 2127      
    mov [ebp] (ch), dword 32              ;#00447F81: 307105 00 20000000         uv 00 20  1 2128      
    mov edi,[ebp+20] (prevebp)            ;#00447F88: 213175 14                  vu 80 20  1 2128      
    mov eax,[edi-232]                     ;#00447F8B: 213207 18FFFFFF            uv 01 80  1 2131    *80*
    mov [ebp-4] (n),eax                   ;#00447F91: 211105 FC                  uv 00 21  1 2132 01   
    mov [ebp+28] (retaddr),#00447FA0      ;#00447F94: 307105 1C A07F4400         vu 00 20  1 2132      
    jmp #0045581E (code:repeatch)         ;#00447F9B: 351 7ED80000               v  00 00  1 2133      
    push eax                              ;#00447FA0: 120                        uv 00 01  1 2134      
    mov edi,[ebp-220] (symtab[734])       ;#00447FA1: 213275 24FFFFFF            vu 80 20  1 2134      
    cmp edi,h4                            ;#00447FA7: 201377 00000040            uv 00 80  1 2135      
    jle #00447FBD                         ;#00447FAD: 176 0E                     v  00 00  1 2135      
    sub dword[ebx+edi*4-8],1              ;#00447FAF: 203154273 F8 01            u  00 88  3 2136      
    jne #00447FBD                         ;#00447FB4: 165 07                     v  00 00  1 2138      
    mov edx,edi                           ;#00447FB6: 213327                     uv 04 80  1 2139      
    call #004639A8 (:%pDealloc)           ;#00447FB8: 350 EBB90100               v  00 00  1 2139      
    pop dword[ebp-220] (symtab[734])      ;#00447FBD: 217205 24FFFFFF            np 00 20  3 2140      
    mov ecx,[ebp-28] (r1)                 ;#00447FC3: 213115 E4                  uv 02 20  1 2143      
    cmp ecx,h4                            ;#00447FC6: 201371 00000040            uv 00 02  1 2144 02   
    jne #00447FD8                         ;#00447FCC: 165 0A                     v  00 00  1 2144      
    mov esi,649                           ;#00447FCE: 276 89020000               uv 40 00  1 2145      
    call #00462744 (:%pUnassigned)        ;#00447FD3: 350 6CA70100               v  00 00  1 2145      
    mov ecx,3                             ;#00447FD8: 271 03000000               uv 02 00  1 2146      
    push #00447FF9                        ;#00447FDD: 150 F97F4400               vu 00 00  1 2146      
    push dword[ebp-220] (symtab[734])     ;#00447FE2: 377265 24FFFFFF            np 00 20  2 2147      
    push dword[ebp-28] (r1)               ;#00447FE8: 377165 E4                  np 00 20  2 2149      
    push dword[ebp-176] (symtab[711])     ;#00447FEB: 377265 50FFFFFF            np 00 20  2 2151      
    lea eax,[ebp-28] (r1)                 ;#00447FF1: 215105 E4                  uv 01 20  1 2153      
    jmp #0045FF95 (:%opConcatN)           ;#00447FF4: 351 9C7F0100               v  00 00  1 2153      
;  1102                         end if
    jmp #0044806F                         ;#00447FF9: 353 74                     v  00 00  1 2154      
;  1103                     else
;  1104                         r1 = repeat(' ',minfieldwidth)&r1
    mov ecx,6                             ;#00447FFB: 271 06000000               uv 02 00  1 2155      
    mov edx,206                           ;#00448000: 272 CE000000               vu 04 00  1 2155      
    call :%opFrame (repeatch)             ;#00448005: 350 F8AB0100               v  00 00  1 2156      
    mov [ebp] (ch), dword 32              ;#0044800A: 307105 00 20000000         uv 00 20  1 2157      
    mov edi,[ebp+20] (prevebp)            ;#00448011: 213175 14                  vu 80 20  1 2157      
    mov eax,[edi-92]                      ;#00448014: 213107 A4                  uv 01 80  1 2160    *80*
    mov [ebp-4] (n),eax                   ;#00448017: 211105 FC                  uv 00 21  1 2161 01   
    mov [ebp+28] (retaddr),#00448026      ;#0044801A: 307105 1C 26804400         vu 00 20  1 2161      
    jmp #0045581E (code:repeatch)         ;#00448021: 351 F8D70000               v  00 00  1 2162      
    push eax                              ;#00448026: 120                        uv 00 01  1 2163      
    mov esi,[ebp-176] (symtab[711])       ;#00448027: 213265 50FFFFFF            vu 40 20  1 2163      
    cmp esi,h4                            ;#0044802D: 201376 00000040            uv 00 40  1 2164      
    jle #00448043                         ;#00448033: 176 0E                     v  00 00  1 2164      
    sub dword[ebx+esi*4-8],1              ;#00448035: 203154263 F8 01            u  00 48  3 2165      
    jne #00448043                         ;#0044803A: 165 07                     v  00 00  1 2167      
    mov edx,esi                           ;#0044803C: 213326                     uv 04 40  1 2168      
    call #004639A8 (:%pDealloc)           ;#0044803E: 350 65B90100               v  00 00  1 2168      
    pop dword[ebp-176] (symtab[711])      ;#00448043: 217205 50FFFFFF            np 00 20  3 2169      
    mov edi,[ebp-28] (r1)                 ;#00448049: 213175 E4                  uv 80 20  1 2172      
    cmp edi,h4                            ;#0044804C: 201377 00000040            uv 00 80  1 2173 80   
    jne #0044805E                         ;#00448052: 165 0A                     v  00 00  1 2173      
    mov esi,649                           ;#00448054: 276 89020000               uv 40 00  1 2174      
    call #00462744 (:%pUnassigned)        ;#00448059: 350 E6A60100               v  00 00  1 2174      
    lea edx,[ebp-28] (r1)                 ;#0044805E: 215125 E4                  uv 04 20  1 2175      
    lea edi,[ebp-176] (symtab[711])       ;#00448061: 215275 50FFFFFF            vu 80 20  1 2175      
    lea ecx,[ebp-28] (r1)                 ;#00448067: 215115 E4                  uv 02 20  1 2176      
    call #0045FD65 (:%opConcat)           ;#0044806A: 350 F67C0100               v  00 00  1 2176      
;  1105                     end if
;  1106                 end if
;  1107                 result &= r1
    mov ecx,[ebp-28] (r1)                 ;#0044806F: 213115 E4                  uv 02 20  1 2177      
    cmp ecx,h4                            ;#00448072: 201371 00000040            uv 00 02  1 2178 02   
    jne #00448084                         ;#00448078: 165 0A                     v  00 00  1 2178      
    mov esi,649                           ;#0044807A: 276 89020000               uv 40 00  1 2179      
    call #00462744 (:%pUnassigned)        ;#0044807F: 350 C0A60100               v  00 00  1 2179      
    lea edx,[ebp-24] (result)             ;#00448084: 215125 E8                  uv 04 20  1 2180      
    lea edi,[ebp-24] (result)             ;#00448087: 215175 E8                  vu 80 20  1 2180      
    lea ecx,[ebp-28] (r1)                 ;#0044808A: 215115 E4                  uv 02 20  1 2181      
    call #0045FD65 (:%opConcat)           ;#0044808D: 350 D37C0100               v  00 00  1 2181      
;  1108                 nxt += 1
    mov eax,[ebp-20] (nxt)                ;#00448092: 213105 EC                  uv 01 20  1 2182      
    add eax,1                             ;#00448095: 203300 01                  uv 01 01  1 2183 01   
    mov edx,eax                           ;#00448098: 213320                     uv 04 01  1 2184 01   
    mov [ebp-20] (nxt),eax                ;#0044809A: 211105 EC                  vu 00 21  1 2184      
    shl edx,1                             ;#0044809D: 321342                     u  04 04  1 2185      
    jno #004480D7                         ;#0044809F: 161 36                     v  00 00  1 2185      
    lea edi,[ebp-20] (nxt)                ;#004480A1: 215175 EC                  uv 80 20  1 2186      
    call #00462764 (:%e01tcfAddiii)       ;#004480A4: 350 BBA60100               v  00 00  1 2186      
;  1109             end if
    jmp #004480D7                         ;#004480A9: 353 2C                     v  00 00  1 2187      
;  1110         else
;  1111 --puts(1,"?{result,fi}\n")
;  1112 --?{result,fi}
;  1113             result &= fi
    lea edx,[ebp-24] (result)             ;#004480AB: 215125 E8                  uv 04 20  1 2188      
    lea edi,[ebp-24] (result)             ;#004480AE: 215175 E8                  vu 80 20  1 2188      
    lea ecx,[ebp-12] (fi)                 ;#004480B1: 215115 F4                  uv 02 20  1 2189      
    xor eax,eax                           ;#004480B4: 061300                     vu 01 01  1 2189      
    call #0045F9F7 (:%opApnd)             ;#004480B6: 350 3C790100               v  00 00  1 2190      
    mov esi,[ebp-24] (result)             ;#004480BB: 213165 E8                  uv 40 20  1 2191      
    cmp esi,h4                            ;#004480BE: 201376 00000040            uv 00 40  1 2192 40   
    jl #004480CD                          ;#004480C4: 174 07                     v  00 00  1 2192      
    cmp byte[ebx+esi*4-1],#82             ;#004480C6: 200174263 FF 82            u  00 48  2 2193      
    je #004480D7                          ;#004480CB: 164 0A                     v  00 00  1 2194      
    mov ecx,648                           ;#004480CD: 271 88020000               uv 02 00  1 2195      
    call #00462D8D (:%opTcFail)           ;#004480D2: 350 B6AC0100               v  00 00  1 2195      
;  1114 --?result
;  1115         end if
;  1116         i += 1
    mov edi,[ebp-8] (i)                   ;#004480D7: 213175 F8                  uv 80 20  1 2196      
    add edi,1                             ;#004480DA: 203307 01                  uv 80 80  1 2197 80   
    mov edx,edi                           ;#004480DD: 213327                     uv 04 80  1 2198 80   
    mov [ebp-8] (i),edi                   ;#004480DF: 211175 F8                  vu 00 A0  1 2198      
    shl edx,1                             ;#004480E2: 321342                     u  04 04  1 2199      
    jno #00445234                         ;#004480E4: 017201 4AD1FFFF            v  00 00  1 2199      
    lea edi,[ebp-8] (i)                   ;#004480EA: 215175 F8                  uv 80 20  1 2200      
    call #00462764 (:%e01tcfAddiii)       ;#004480ED: 350 72A60100               v  00 00  1 2200      
;  1117     end while
    jmp #00445234                         ;#004480F2: 351 3DD1FFFF               v  00 00  1 2201      
;  1118 --DEV this should be a warning??? (Interpret mode only!)
;  1119 --  if not atom(args) and nxt<=length(args) then
;  1120 ----/**/    #ilASM{ mov al,105                              -- Phix
;  1121 ----!/**/           xor edi,edi         -- ep1 unused       -- Phix
;  1122 ----!/**/           xor esi,esi         -- ep2 unused       -- Phix
;  1123 ----/**/            call :%pRTErn }     -- fatal error      -- Phix
;  1124 ----/**/                                            --/*    -- Phix
;  1125 --      puts(1,"not enough format strings to print data\n") -- RDS
;  1126 --      if getc(0) then end if                              -- RDS
;  1127 --      abort(1)                                            -- RDS --*/
;  1128 --  end if
;  1129     return result
    mov eax,[ebp-24] (result)             ;#004480F7: 213105 E8                  uv 01 20  1 2202      
    mov [ebp-24] (result),ebx             ;#004480FA: 211135 E8                  vu 00 28  1 2202      
    jmp #00462C8F (:%opRetf)              ;#004480FD: 351 8DAB0100               v  00 00  1 2203      
;  1130 end function
;  1131 
;  1132 -- (This is a wrapper so that the internal routine can apply 
;  1133 --  identical error handling for both sprintf and printf: we
;  1134 --  typically want to point at the application source code
;  1135 --  line, rather than confuse by landing developer in here.)
;  1136 global function sprintf(sequence fmt, object args)
    mov edi,[ebp] (fmt)                   ;#00454E9A: 213175 00                  uv 80 20  1   1      
    cmp edi,h4                            ;#00454E9D: 201377 00000040            uv 00 80  1   2 80   
    jl #00454EAC                          ;#00454EA3: 174 07                     v  00 00  1   2      
    test byte[ebx+edi*4-1],#80            ;#00454EA5: 366104273 FF 80            u  00 88  2   3      
    jne #00454EB6                         ;#00454EAA: 165 0A                     v  00 00  1   4      
    mov ecx,738                           ;#00454EAC: 271 E2020000               uv 02 00  1   5      
    call #00462D8D (:%opTcFail)           ;#00454EB1: 350 D7DE0000               v  00 00  1   5      
;  1137     return sprintf_(fmt,args)
    mov ecx,59                            ;#00454EB6: 271 3B000000               uv 02 00  1   6      
    mov edx,641                           ;#00454EBB: 272 81020000               vu 04 00  1   6      
    call :%opFrame (sprintf_)             ;#00454EC0: 350 3DDD0000               v  00 00  1   7      
    mov edi,[ebp+20] (prevebp)            ;#00454EC5: 213175 14                  uv 80 20  1   8      
    mov eax,[edi]                         ;#00454EC8: 213007                     uv 01 80  1  11 80 *80*
    xor ebx,ebx                           ;#00454ECA: 061333                     vu 08 08  1  11      
    cmp eax,h4                            ;#00454ECC: 075 00000040               uv 00 01  1  12      
    jl #00454EDD                          ;#00454ED1: 174 0A                     v  00 00  1  12      
    add dword[ebx+eax*4-8],1              ;#00454ED3: 203104203 F8 01            u  00 09  3  13      
    cmp eax,738                           ;#00454ED8: 075 E2020000               vu 00 01  1  15      
    mov [ebp] (fmt),eax                   ;#00454EDD: 211105 00                  uv 00 21  1  16      
    mov edi,[ebp+20] (prevebp)            ;#00454EE0: 213175 14                  vu 80 20  1  16      
    mov eax,[edi-4]                       ;#00454EE3: 213107 FC                  uv 01 80  1  19    *80*
    xor ebx,ebx                           ;#00454EE6: 061333                     vu 08 08  1  19      
    cmp eax,h4                            ;#00454EE8: 075 00000040               uv 00 01  1  20      
    jl #00454EF9                          ;#00454EED: 174 0A                     v  00 00  1  20      
    add dword[ebx+eax*4-8],1              ;#00454EEF: 203104203 F8 01            u  00 09  3  21      
    cmp eax,739                           ;#00454EF4: 075 E3020000               vu 00 01  1  23      
    mov [ebp-4] (args),eax                ;#00454EF9: 211105 FC                  uv 00 21  1  24      
    mov [ebp+28] (retaddr),#00454F08      ;#00454EFC: 307105 1C 084F4500         vu 00 20  1  24      
    jmp #004451D9 (code:sprintf_)         ;#00454F03: 351 D102FFFF               v  00 00  1  25      
    jmp #00462C8F (:%opRetf)              ;#00454F08: 351 82DD0000               v  00 00  1  26      
;  1138 end function
;  1139 
;  1140 --DEV move this (once newEmit is done) [better yet put it in the optable]
;  1141 -- note: printf is now defined in pfileioN.e
;  1142 global procedure printf(integer fn, sequence fmt, object args={})
    mov esi,[ebp] (fn)                    ;#00444FC4: 213165 00                  uv 40 20  1   1      
    cmp esi,h4                            ;#00444FC7: 201376 00000040            uv 00 40  1   2 40   
    jl #00444FD9                          ;#00444FCD: 174 0A                     v  00 00  1   2      
    mov ecx,741                           ;#00444FCF: 271 E5020000               uv 02 00  1   3      
    call #00462D8D (:%opTcFail)           ;#00444FD4: 350 B4DD0100               v  00 00  1   3      
    mov edi,[ebp-4] (fmt)                 ;#00444FD9: 213175 FC                  uv 80 20  1   4      
    cmp edi,h4                            ;#00444FDC: 201377 00000040            uv 00 80  1   5 80   
    jl #00444FEB                          ;#00444FE2: 174 07                     v  00 00  1   5      
    test byte[ebx+edi*4-1],#80            ;#00444FE4: 366104273 FF 80            u  00 88  2   6      
    jne #00444FF5                         ;#00444FE9: 165 0A                     v  00 00  1   7      
    mov ecx,742                           ;#00444FEB: 271 E6020000               uv 02 00  1   8      
    call #00462D8D (:%opTcFail)           ;#00444FF0: 350 98DD0100               v  00 00  1   8      
    mov ecx,[ebp-8] (args)                ;#00444FF5: 213115 F8                  uv 02 20  1   9      
    cmp ecx,h4                            ;#00444FF8: 201371 00000040            uv 00 02  1  10 02   
    jne #00445012                         ;#00444FFE: 165 12                     v  00 00  1  10      
    lea eax,[ebp-8] (args)                ;#00445000: 215105 F8                  uv 01 20  1  11      
    xor edx,edx                           ;#00445003: 061322                     vu 04 04  1  11      
    push #00445012                        ;#00445005: 150 12504400               uv 00 00  1  12      
    push eax                              ;#0044500A: 120                        vu 00 01  1  12      
    mov edi,ecx                           ;#0044500B: 211317                     uv 80 02  1  13      
    jmp #00460143 (:%pMkSq)               ;#0044500D: 351 31B10100               v  00 00  1  13      
;  1143 --DEV/SUG:
;  1144     if fn=0 and fmt="" then
    mov eax,[ebp] (fn)                    ;#00445012: 213105 00                  uv 01 20  1  14      
    cmp eax,0                             ;#00445015: 203370 00                  uv 00 01  1  15 01   
    jne #00445159                         ;#00445018: 017205 3B010000            v  00 00  1  15      
    mov edi,[#004022A4]                   ;#0044501E: 213075 A4224000            uv 80 00  1  16      
    mov eax,[ebp-4] (fmt)                 ;#00445024: 213105 FC                  vu 01 20  1  16      
    mov esi,628                           ;#00445027: 276 74020000               uv 40 00  1  17      
    mov edx,742                           ;#0044502C: 272 E6020000               vu 04 00  1  17      
    call #0045F91F (:%opJccE)             ;#00445031: 350 E9A80100               v  00 00  1  18      
    jne #00445159                         ;#00445036: 017205 1D010000            v  00 00  1  19      
;  1145 --      -- args is settings-pairs, eg {"r_len",routine_id("utf8_to_utf32")}
;  1146         -- args is settings-pairs, eg printf(0,"",{"unicode_align",true})
;  1147 --DEV 20/4/19 broke p -c -test:
;  1148 --      if remainder(length(args),2) then throw("must be even length") end if
;  1149         if remainder(length(args),2) then ?9/0 end if
    lea edi,[ebp-12] (symtab[744])        ;#0044503C: 215175 F4                  uv 80 20  1  20      
    mov esi,[ebp-8] (args)                ;#0044503F: 213165 F8                  vu 40 20  1  20      
    mov edx,743                           ;#00445042: 272 E7020000               uv 04 00  1  21      
    call #0045EFEC (:%opLen)              ;#00445047: 350 A09F0100               v  00 00  1  21      
    mov eax,ecx                           ;#0044504C: 211310                     uv 01 02  1  22      
    and eax,1                             ;#0044504E: 045 01000000               uv 01 01  1  23 01   
    mov [ebp-16] (symtab[745]),eax        ;#00445053: 211105 F0                  uv 00 21  1  24 01   
    test eax,eax                          ;#00445056: 205300                     vu 00 01  1  24      
    je #0044505F                          ;#00445058: 164 05                     v  00 00  1  25      
    call #004627B6 (:%pDiv0)              ;#0044505A: 350 57D70100               v  00 00  1  26      
;  1150         for i=1 to length(args) by 2 do
    lea edi,[ebp-12] (symtab[744])        ;#0044505F: 215175 F4                  uv 80 20  1  27      
    mov edx,743                           ;#00445062: 272 E7020000               vu 04 00  1  27      
    call #0045EFEC (:%opLen)              ;#00445067: 350 809F0100               v  00 00  1  28      
    mov [ebp-20] (i), dword 1             ;#0044506C: 307105 EC 01000000         uv 00 20  1  29      
    cmp ecx,1                             ;#00445073: 201371 01000000            vu 00 02  1  29      
    jl #004451D4                          ;#00445079: 017214 55010000            v  00 00  1  30      
;  1151             string setting = args[i]
    mov edi,[ebp-20] (i)                  ;#0044507F: 213175 EC                  uv 80 20  1  31      
    lea ecx,[ebp-24] (setting)            ;#00445082: 215115 E8                  vu 02 20  1  31      
    mov esi,[ebp-8] (args)                ;#00445085: 213165 F8                  uv 40 20  1  32      
    mov edx,743                           ;#00445088: 272 E7020000               vu 04 00  1  32      
    mov al,0                              ;#0044508D: 260 00                     uv 01 00  1  33      
    call #00460FE5 (:%pSubse1)            ;#0044508F: 350 51BF0100               v  00 00  1  33      
    mov eax,[ebp-24] (setting)            ;#00445094: 213105 E8                  uv 01 20  1  34      
    cmp eax,h4                            ;#00445097: 075 00000040               uv 00 01  1  35 01   
    jl #004450A5                          ;#0044509C: 174 07                     v  00 00  1  35      
    cmp byte[ebx+eax*4-1],#82             ;#0044509E: 200174203 FF 82            u  00 09  2  36      
    je #004450AF                          ;#004450A3: 164 0A                     v  00 00  1  37      
    mov ecx,747                           ;#004450A5: 271 EB020000               uv 02 00  1  38      
    call #00462D8D (:%opTcFail)           ;#004450AA: 350 DEDC0100               v  00 00  1  38      
;  1152             switch setting do
;  1153 --              case "r_len": r_len = args[i+1]
;  1154                 case "unicode_align": unicode_align = args[i+1]
    mov edi,[#00402350]                   ;#004450AF: 213075 50234000            uv 80 00  1  39      
    mov esi,748                           ;#004450B5: 276 EC020000               vu 40 00  1  39      
    mov edx,747                           ;#004450BA: 272 EB020000               uv 04 00  1  40      
    call #0045F91F (:%opJccE)             ;#004450BF: 350 5BA80100               v  00 00  1  40      
    jne #004450F5                         ;#004450C4: 165 2F                     v  00 00  1  41      
    mov ecx,[ebp-20] (i)                  ;#004450C6: 213115 EC                  uv 02 20  1  42      
    add ecx,1                             ;#004450C9: 203301 01                  uv 02 02  1  43 02   
    mov edi,ecx                           ;#004450CC: 213371                     uv 80 02  1  44 02   
    mov ecx,#00402290                     ;#004450CE: 271 90224000               vu 02 00  1  44      
    mov esi,[ebp-8] (args)                ;#004450D3: 213165 F8                  uv 40 20  1  45      
    mov edx,743                           ;#004450D6: 272 E7020000               vu 04 00  1  45      
    mov al,0                              ;#004450DB: 260 00                     uv 01 00  1  46      
    call #00460FE5 (:%pSubse1)            ;#004450DD: 350 03BF0100               v  00 00  1  46      
    cmp eax,h4                            ;#004450E2: 075 00000040               uv 00 01  1  47      
    jl #00445143                          ;#004450E7: 174 5A                     v  00 00  1  47      
    mov ecx,615                           ;#004450E9: 271 67020000               uv 02 00  1  48      
    call #00462D8D (:%opTcFail)           ;#004450EE: 350 9ADC0100               v  00 00  1  48      
    jmp #00445143                         ;#004450F3: 353 4E                     v  00 00  1  49      
;  1155                 case "prefer_backtick": prefer_backtick = args[i+1]
    mov edi,[#00402354]                   ;#004450F5: 213075 54234000            uv 80 00  1  50      
    mov eax,[ebp-24] (setting)            ;#004450FB: 213105 E8                  vu 01 20  1  50      
    mov esi,750                           ;#004450FE: 276 EE020000               uv 40 00  1  51      
    mov edx,747                           ;#00445103: 272 EB020000               vu 04 00  1  51      
    call #0045F91F (:%opJccE)             ;#00445108: 350 12A80100               v  00 00  1  52      
    jne #0044513E                         ;#0044510D: 165 2F                     v  00 00  1  53      
    mov ecx,[ebp-20] (i)                  ;#0044510F: 213115 EC                  uv 02 20  1  54      
    add ecx,1                             ;#00445112: 203301 01                  uv 02 02  1  55 02   
    mov edi,ecx                           ;#00445115: 213371                     uv 80 02  1  56 02   
    mov ecx,#00402260                     ;#00445117: 271 60224000               vu 02 00  1  56      
    mov esi,[ebp-8] (args)                ;#0044511C: 213165 F8                  uv 40 20  1  57      
    mov edx,743                           ;#0044511F: 272 E7020000               vu 04 00  1  57      
    mov al,0                              ;#00445124: 260 00                     uv 01 00  1  58      
    call #00460FE5 (:%pSubse1)            ;#00445126: 350 BABE0100               v  00 00  1  58      
    cmp eax,h4                            ;#0044512B: 075 00000040               uv 00 01  1  59      
    jl #00445143                          ;#00445130: 174 11                     v  00 00  1  59      
    mov ecx,589                           ;#00445132: 271 4D020000               uv 02 00  1  60      
    call #00462D8D (:%opTcFail)           ;#00445137: 350 51DC0100               v  00 00  1  60      
    jmp #00445143                         ;#0044513C: 353 05                     v  00 00  1  61      
;  1156 --20/4/19:
;  1157 --              default: throw("unknown printf setting")
;  1158                 default: ?9/0
    call #004627B6 (:%pDiv0)              ;#0044513E: 350 73D60100               v  00 00  1  62      
;  1159             end switch
;  1160         end for
    mov edi,[ebp-20] (i)                  ;#00445143: 213175 EC                  uv 80 20  1  63      
    mov ecx,[ebp-12] (symtab[744])        ;#00445146: 213115 F4                  vu 02 20  1  63      
    add edi,2                             ;#00445149: 203307 02                  uv 80 80  1  64      
    cmp edi,ecx                           ;#0044514C: 073371                     uv 00 82  1  65 80   
    mov [ebp-20] (i),edi                  ;#0044514E: 211175 EC                  vu 00 A0  1  65      
    jle #0044507F                         ;#00445151: 017216 28FFFFFF            v  00 00  1  66      
    jmp #004451D4                         ;#00445157: 353 7B                     v  00 00  1  67      
;  1161     else
;  1162         puts(fn,sprintf_(fmt,args))
    mov ecx,59                            ;#00445159: 271 3B000000               uv 02 00  1  68      
    mov edx,641                           ;#0044515E: 272 81020000               vu 04 00  1  68      
    call :%opFrame (sprintf_)             ;#00445163: 350 9ADA0100               v  00 00  1  69      
    mov edi,[ebp+20] (prevebp)            ;#00445168: 213175 14                  uv 80 20  1  70      
    mov eax,[edi-4]                       ;#0044516B: 213107 FC                  uv 01 80  1  73 80 *80*
    xor ebx,ebx                           ;#0044516E: 061333                     vu 08 08  1  73      
    cmp eax,h4                            ;#00445170: 075 00000040               uv 00 01  1  74      
    jl #00445181                          ;#00445175: 174 0A                     v  00 00  1  74      
    add dword[ebx+eax*4-8],1              ;#00445177: 203104203 F8 01            u  00 09  3  75      
    cmp eax,742                           ;#0044517C: 075 E6020000               vu 00 01  1  77      
    mov [ebp] (fmt),eax                   ;#00445181: 211105 00                  uv 00 21  1  78      
    mov edi,[ebp+20] (prevebp)            ;#00445184: 213175 14                  vu 80 20  1  78      
    mov eax,[edi-8]                       ;#00445187: 213107 F8                  uv 01 80  1  81    *80*
    xor ebx,ebx                           ;#0044518A: 061333                     vu 08 08  1  81      
    cmp eax,h4                            ;#0044518C: 075 00000040               uv 00 01  1  82      
    jl #0044519D                          ;#00445191: 174 0A                     v  00 00  1  82      
    add dword[ebx+eax*4-8],1              ;#00445193: 203104203 F8 01            u  00 09  3  83      
    cmp eax,743                           ;#00445198: 075 E7020000               vu 00 01  1  85      
    mov [ebp-4] (args),eax                ;#0044519D: 211105 FC                  uv 00 21  1  86      
    mov [ebp+28] (retaddr),#004451AC      ;#004451A0: 307105 1C AC514400         vu 00 20  1  86      
    jmp #004451D9 (code:sprintf_)         ;#004451A7: 351 2D000000               v  00 00  1  87      
    push eax                              ;#004451AC: 120                        uv 00 01  1  88      
    mov esi,[ebp-32] (symtab[751])        ;#004451AD: 213165 E0                  vu 40 20  1  88      
    cmp esi,h4                            ;#004451B0: 201376 00000040            uv 00 40  1  89      
    jle #004451C6                         ;#004451B6: 176 0E                     v  00 00  1  89      
    sub dword[ebx+esi*4-8],1              ;#004451B8: 203154263 F8 01            u  00 48  3  90      
    jne #004451C6                         ;#004451BD: 165 07                     v  00 00  1  92      
    mov edx,esi                           ;#004451BF: 213326                     uv 04 40  1  93      
    call #004639A8 (:%pDealloc)           ;#004451C1: 350 E2E70100               v  00 00  1  93      
    pop dword[ebp-32] (symtab[751])       ;#004451C6: 217105 E0                  np 00 20  3  94      
    mov eax,[ebp] (fn)                    ;#004451C9: 213105 00                  uv 01 20  1  97      
    mov edx,[ebp-32] (symtab[751])        ;#004451CC: 213125 E0                  vu 04 20  1  97      
    call #0045E072 (:%opPuts)             ;#004451CF: 350 9E8E0100               v  00 00  1  98      
;  1163     end if
    jmp #00462C8F (:%opRetf)              ;#004451D4: 351 B6DA0100               v  00 00  1  99      
;  1164 end procedure
;  1165 
;  1166 local integer asChdef = false
;  1167 
;  1168 --global function sprint(object x, integer asCh=false, maxlen=-1, nest=0)
;  1169 global function sprint(object x, integer asCh=asChdef, maxlen=-1, nest=0)
    mov ecx,[ebp-4] (asCh)                ;#0045471E: 213115 FC                  uv 02 20  1   1      
    cmp ecx,h4                            ;#00454721: 201371 00000040            uv 00 02  1   2 02   
    jne #00454734                         ;#00454727: 165 0B                     v  00 00  1   2      
    mov ecx,[#00402358] (asChdef)         ;#00454729: 213015 58234000            uv 02 00  1   3      
    mov [ebp-4] (asCh),ecx                ;#0045472F: 211115 FC                  uv 00 22  1   4 02   
    jmp #00454740                         ;#00454732: 353 0C                     v  00 00  1   4      
    jl #00454740                          ;#00454734: 174 0A                     v  00 00  1   5      
    mov ecx,754                           ;#00454736: 271 F2020000               uv 02 00  1   6      
    call #00462D8D (:%opTcFail)           ;#0045473B: 350 4DE60000               v  00 00  1   6      
    mov edi,[ebp-8] (maxlen)              ;#00454740: 213175 F8                  uv 80 20  1   7      
    cmp edi,h4                            ;#00454743: 201377 00000040            uv 00 80  1   8 80   
    jne #00454754                         ;#00454749: 165 09                     v  00 00  1   8      
    mov [ebp-8] (maxlen), dword -1        ;#0045474B: 307105 F8 FFFFFFFF         uv 00 20  1   9      
    jmp #00454760                         ;#00454752: 353 0C                     v  00 00  1   9      
    jl #00454760                          ;#00454754: 174 0A                     v  00 00  1  10      
    mov ecx,755                           ;#00454756: 271 F3020000               uv 02 00  1  11      
    call #00462D8D (:%opTcFail)           ;#0045475B: 350 2DE60000               v  00 00  1  11      
    mov esi,[ebp-12] (nest)               ;#00454760: 213165 F4                  uv 40 20  1  12      
    cmp esi,h4                            ;#00454763: 201376 00000040            uv 00 40  1  13 40   
    jne #00454770                         ;#00454769: 165 05                     v  00 00  1  13      
    mov [ebp-12] (nest),ebx               ;#0045476B: 211135 F4                  uv 00 28  1  14      
    jmp #0045477C                         ;#0045476E: 353 0C                     v  00 00  1  14      
    jl #0045477C                          ;#00454770: 174 0A                     v  00 00  1  15      
    mov ecx,756                           ;#00454772: 271 F4020000               uv 02 00  1  16      
    call #00462D8D (:%opTcFail)           ;#00454777: 350 11E60000               v  00 00  1  16      
;  1170 -- Return the string representation of any data object. 
;  1171 -- This is the same as the output from print(1, x) or '?', 
;  1172 --  but returned as a string sequence rather than printed.
;  1173 -- asCh: true: print eg 65 as 65'A', 
;  1174 --       false: not top-level,
;  1175 --           -1: sticky false
;  1176 --       """"+10: (ie 9,10,11) new default (-1,0,1 respectively)
;  1177 -- maxlen, nest: see docs
;  1178 -- Alternative: see ppp.e (ppf/ppOpt/ppExf).
;  1179     object s, xi
;  1180     if asCh>=9 then
    mov eax,[ebp-4] (asCh)                ;#0045477C: 213105 FC                  uv 01 20  1  17      
    cmp eax,9                             ;#0045477F: 203370 09                  uv 00 01  1  18 01   
    jl #004547E3                          ;#00454782: 174 5F                     v  00 00  1  18      
;  1181         asCh -= 10
    sub eax,10                            ;#00454784: 203350 0A                  uv 01 01  1  19      
    mov edx,eax                           ;#00454787: 213320                     uv 04 01  1  20 01   
    mov [ebp-4] (asCh),eax                ;#00454789: 211105 FC                  vu 00 21  1  20      
    shl edx,1                             ;#0045478C: 321342                     u  04 04  1  21      
    jno #00454798                         ;#0045478E: 161 08                     v  00 00  1  21      
    lea edi,[ebp-4] (asCh)                ;#00454790: 215175 FC                  uv 80 20  1  22      
    call #00462764 (:%e01tcfAddiii)       ;#00454793: 350 CCDF0000               v  00 00  1  22      
;  1182         assert(asCh>=-1 and asCh<=1)
    cmp eax,-1                            ;#00454798: 203370 FF                  uv 00 01  1  23      
    jl #004547A2                          ;#0045479B: 174 05                     v  00 00  1  23      
    cmp eax,1                             ;#0045479D: 203370 01                  uv 00 01  1  24      
    jle #004547A7                         ;#004547A0: 176 05                     v  00 00  1  24      
    mov [ebp-24] (symtab[759]),ebx        ;#004547A2: 211135 E8                  uv 00 28  1  25      
    jmp #004547AE                         ;#004547A5: 353 07                     v  00 00  1  25      
    mov [ebp-24] (symtab[759]), dword 1   ;#004547A7: 307105 E8 01000000         uv 00 20  1  26      
    mov ecx,8                             ;#004547AE: 271 08000000               vu 02 00  1  26      
    mov edx,393                           ;#004547B3: 272 89010000               uv 04 00  1  27      
    call #00462C02 (:%opFrame) (assert)   ;#004547B8: 350 45E40000               v  00 00  1  27      
    mov edi,[ebp+20] (prevebp)            ;#004547BD: 213175 14                  uv 80 20  1  28      
    mov eax,[edi-24]                      ;#004547C0: 213107 E8                  uv 01 80  1  31 80 *80*
    mov [ebp] (condition),eax             ;#004547C3: 211105 00                  uv 00 21  1  32 01   
    mov [ebp+28] (retaddr),#004547D2      ;#004547C6: 307105 1C D2474500         vu 00 20  1  32      
    jmp #0044BD38 (code:assert)           ;#004547CD: 351 6675FFFF               v  00 00  1  33      
;  1183         if nest=0 then asChdef = asCh end if
    mov ecx,[ebp-12] (nest)               ;#004547D2: 213115 F4                  uv 02 20  1  34      
    cmp ecx,0                             ;#004547D5: 203371 00                  uv 00 02  1  35 02   
    jne #004547E3                         ;#004547D8: 165 09                     v  00 00  1  35      
    mov edi,[ebp-4] (asCh)                ;#004547DA: 213175 FC                  uv 80 20  1  36      
    mov [#00402358] (asChdef),edi         ;#004547DD: 211075 58234000            uv 00 80  1  37 80   
;  1184     end if
;  1185     if atom(x) then
    mov esi,[ebp] (x)                     ;#004547E3: 213165 00                  vu 40 20  1  37      
    cmp esi,h4                            ;#004547E6: 201376 00000040            uv 00 40  1  38      
    jl #004547F9                          ;#004547EC: 174 0B                     v  00 00  1  38      
    cmp byte[ebx+esi*4-1],#12             ;#004547EE: 200174263 FF 12            u  00 48  2  39      
    jne #004549F0                         ;#004547F3: 017205 F7010000            v  00 00  1  40      
;  1186 --      if asCh and integer(x) and ((x>=' ' and x<='~') or find(x,"\r\n\t"))
;  1187         if asCh=true    -- (not false or -1)
    mov eax,[ebp-4] (asCh)                ;#004547F9: 213105 FC                  uv 01 20  1  41      
    cmp eax,1                             ;#004547FC: 203370 01                  uv 00 01  1  42 01   
    jne #0045484C                         ;#004547FF: 165 4B                     v  00 00  1  42      
;  1188         and integer(x) 
    cmp esi,h4                            ;#00454801: 201376 00000040            uv 00 40  1  43      
    jg #0045484C                          ;#00454807: 177 43                     v  00 00  1  43      
;  1189         and (x>=' ' and x<='~') then
    cmp esi,32                            ;#00454809: 203376 20                  uv 00 40  1  44      
    jl #0045484C                          ;#0045480C: 174 3E                     v  00 00  1  44      
    cmp esi,126                           ;#0045480E: 203376 7E                  uv 00 40  1  45      
    jg #0045484C                          ;#00454811: 177 39                     v  00 00  1  45      
;  1190             s = sprintf("%d'%c'",x)
    mov ecx,2                             ;#00454813: 271 02000000               uv 02 00  1  46      
    mov edx,210                           ;#00454818: 272 D2000000               vu 04 00  1  46      
    call #00462C02 (:%opFrame) (sprintf)  ;#0045481D: 350 E0E30000               v  00 00  1  47      
    mov ecx,[#00402360]                   ;#00454822: 213015 60234000            uv 02 00  1  48      
    mov [ebp] (fmt),ecx                   ;#00454828: 211115 00                  uv 00 22  1  49 02   
    add dword[ebx+ecx*4-8],1              ;#0045482B: 203104213 F8 01            u  00 0A  3  51    *02*
    mov edi,[ebp+20] (prevebp)            ;#00454830: 213175 14                  vu 80 20  1  53      
    mov eax,[edi]                         ;#00454833: 213007                     uv 01 80  1  56    *80*
    mov [ebp-4] (args),eax                ;#00454835: 211105 FC                  uv 00 21  1  57 01   
    mov [ebp+28] (retaddr),#00454844      ;#00454838: 307105 1C 44484500         vu 00 20  1  57      
    jmp #00454E9A (code:sprintf)          ;#0045483F: 351 56060000               v  00 00  1  58      
    mov [ebp-16] (s),eax                  ;#00454844: 211105 F0                  uv 00 21  1  59      
    jmp #004549D1                         ;#00454847: 351 85010000               v  00 00  1  59      
;  1191         else
;  1192 --          s = sprintf("%.10g", x)
;  1193 --28/12/21 (get rid of this nonsense and cut out the middleman, why not. [spotted in passing])
;  1194 --          string fmt = '%'&'.'&'1'&'0'&'g'
;  1195 --          s = sprintf(fmt,x)
;  1196             if not init2 then init_2() end if
    mov edi,[#00402220] (init2)           ;#0045484C: 213075 20224000            uv 80 00  1  60      
    test edi,edi                          ;#00454852: 205377                     uv 00 80  1  61 80   
    jne #00454871                         ;#00454854: 165 1B                     v  00 00  1  61      
    mov ecx,1                             ;#00454856: 271 01000000               uv 02 00  1  62      
    mov edx,616                           ;#0045485B: 272 68020000               vu 04 00  1  62      
    call #00462C02 (:%opFrame) (init_2)   ;#00454860: 350 9DE30000               v  00 00  1  63      
    mov [ebp+28] (retaddr),#00454871      ;#00454865: 307105 1C 71484500         uv 00 20  1  64      
    jmp #00449F33 (code:init_2)           ;#0045486C: 351 C256FFFF               v  00 00  1  64      
;  1197             s = sprintf2(x,'g',/*showplus:=*/0,/*minfieldwidth:=*/0,/*precision:=*/10)
    mov ecx,31                            ;#00454871: 271 1F000000               uv 02 00  1  65      
    mov edx,533                           ;#00454876: 272 15020000               vu 04 00  1  65      
    call :%opFrame (sprintf2)             ;#0045487B: 350 82E30000               v  00 00  1  66      
    mov edi,[ebp+20] (prevebp)            ;#00454880: 213175 14                  uv 80 20  1  67      
    mov eax,[edi]                         ;#00454883: 213007                     uv 01 80  1  70 80 *80*
    xor ebx,ebx                           ;#00454885: 061333                     vu 08 08  1  70      
    cmp eax,h4                            ;#00454887: 075 00000040               uv 00 01  1  71      
    jl #00454898                          ;#0045488C: 174 0A                     v  00 00  1  71      
    add dword[ebx+eax*4-8],1              ;#0045488E: 203104203 F8 01            u  00 09  3  72      
    cmp eax,753                           ;#00454893: 075 F1020000               vu 00 01  1  74      
    mov [ebp] (pf),eax                    ;#00454898: 211105 00                  uv 00 21  1  75      
    mov [ebp-4] (charflag), dword 103     ;#0045489B: 307105 FC 67000000         vu 00 20  1  75      
    mov [ebp-8] (showplus),ebx            ;#004548A2: 211135 F8                  uv 00 28  1  76      
    mov [ebp-12] (minfieldwidth),ebx      ;#004548A5: 211135 F4                  vu 00 28  1  76      
    mov [ebp-16] (precision), dword 10    ;#004548A8: 307105 F0 0A000000         uv 00 20  1  77      
    mov [ebp+28] (retaddr),#004548BB      ;#004548AF: 307105 1C BB484500         vu 00 20  1  77      
    jmp #00448102 (code:sprintf2)         ;#004548B6: 351 4738FFFF               v  00 00  1  78      
    push eax                              ;#004548BB: 120                        uv 00 01  1  79      
    mov esi,[ebp-16] (s)                  ;#004548BC: 213165 F0                  vu 40 20  1  79      
    cmp esi,h4                            ;#004548BF: 201376 00000040            uv 00 40  1  80      
    jle #004548D5                         ;#004548C5: 176 0E                     v  00 00  1  80      
    sub dword[ebx+esi*4-8],1              ;#004548C7: 203154263 F8 01            u  00 48  3  81      
    jne #004548D5                         ;#004548CC: 165 07                     v  00 00  1  83      
    mov edx,esi                           ;#004548CE: 213326                     uv 04 40  1  84      
    call #004639A8 (:%pDealloc)           ;#004548D0: 350 D3F00000               v  00 00  1  84      
    pop dword[ebp-16] (s)                 ;#004548D5: 217105 F0                  np 00 20  3  85      
;  1198             if not integer(x)
    mov ecx,[ebp] (x)                     ;#004548D8: 213115 00                  uv 02 20  1  88      
    cmp ecx,h4                            ;#004548DB: 201371 00000040            uv 00 02  1  89 02   
    jl #004549D1                          ;#004548E1: 017214 EA000000            v  00 00  1  89      
;  1199 --removed 3/11/15 (so that eg 2000000000 gets the ".0")
;  1200 --          and integer(floor(x))
;  1201             and not find('.',s)
    mov ecx,8                             ;#004548E7: 271 08000000               uv 02 00  1  90      
    mov edx,110                           ;#004548EC: 272 6E000000               vu 04 00  1  90      
    call #00462C02 (:%opFrame) (find)     ;#004548F1: 350 0CE30000               v  00 00  1  91      
    mov [ebp] (needle), dword 46          ;#004548F6: 307105 00 2E000000         uv 00 20  1  92      
    mov edi,[ebp+20] (prevebp)            ;#004548FD: 213175 14                  vu 80 20  1  92      
    mov eax,[edi-16]                      ;#00454900: 213107 F0                  uv 01 80  1  95    *80*
    xor ebx,ebx                           ;#00454903: 061333                     vu 08 08  1  95      
    cmp eax,h4                            ;#00454905: 075 00000040               uv 00 01  1  96      
    jl #00454916                          ;#0045490A: 174 0A                     v  00 00  1  96      
    add dword[ebx+eax*4-8],1              ;#0045490C: 203104203 F8 01            u  00 09  3  97      
    cmp eax,757                           ;#00454911: 075 F5020000               vu 00 01  1  99      
    mov [ebp-4] (haystack),eax            ;#00454916: 211105 FC                  uv 00 21  1 100      
    mov [ebp+28] (retaddr),#00454925      ;#00454919: 307105 1C 25494500         vu 00 20  1 100      
    jmp #0045AADB (code:find)             ;#00454920: 351 B6610000               v  00 00  1 101      
    test eax,eax                          ;#00454925: 205300                     uv 00 01  1 102      
    jne #004549D1                         ;#00454927: 017205 A4000000            v  00 00  1 102      
;  1202             and not find('e',s)         -- eg 1e308
    mov ecx,8                             ;#0045492D: 271 08000000               uv 02 00  1 103      
    mov edx,110                           ;#00454932: 272 6E000000               vu 04 00  1 103      
    call #00462C02 (:%opFrame) (find)     ;#00454937: 350 C6E20000               v  00 00  1 104      
    mov [ebp] (needle), dword 101         ;#0045493C: 307105 00 65000000         uv 00 20  1 105      
    mov edi,[ebp+20] (prevebp)            ;#00454943: 213175 14                  vu 80 20  1 105      
    mov eax,[edi-16]                      ;#00454946: 213107 F0                  uv 01 80  1 108    *80*
    xor ebx,ebx                           ;#00454949: 061333                     vu 08 08  1 108      
    cmp eax,h4                            ;#0045494B: 075 00000040               uv 00 01  1 109      
    jl #0045495C                          ;#00454950: 174 0A                     v  00 00  1 109      
    add dword[ebx+eax*4-8],1              ;#00454952: 203104203 F8 01            u  00 09  3 110      
    cmp eax,757                           ;#00454957: 075 F5020000               vu 00 01  1 112      
    mov [ebp-4] (haystack),eax            ;#0045495C: 211105 FC                  uv 00 21  1 113      
    mov [ebp+28] (retaddr),#0045496B      ;#0045495F: 307105 1C 6B494500         vu 00 20  1 113      
    jmp #0045AADB (code:find)             ;#00454966: 351 70610000               v  00 00  1 114      
    test eax,eax                          ;#0045496B: 205300                     uv 00 01  1 115      
    jne #004549D1                         ;#0045496D: 165 62                     v  00 00  1 115      
;  1203             and not find('n',s) then    -- (inf/nan)
    mov ecx,8                             ;#0045496F: 271 08000000               uv 02 00  1 116      
    mov edx,110                           ;#00454974: 272 6E000000               vu 04 00  1 116      
    call #00462C02 (:%opFrame) (find)     ;#00454979: 350 84E20000               v  00 00  1 117      
    mov [ebp] (needle), dword 110         ;#0045497E: 307105 00 6E000000         uv 00 20  1 118      
    mov edi,[ebp+20] (prevebp)            ;#00454985: 213175 14                  vu 80 20  1 118      
    mov eax,[edi-16]                      ;#00454988: 213107 F0                  uv 01 80  1 121    *80*
    xor ebx,ebx                           ;#0045498B: 061333                     vu 08 08  1 121      
    cmp eax,h4                            ;#0045498D: 075 00000040               uv 00 01  1 122      
    jl #0045499E                          ;#00454992: 174 0A                     v  00 00  1 122      
    add dword[ebx+eax*4-8],1              ;#00454994: 203104203 F8 01            u  00 09  3 123      
    cmp eax,757                           ;#00454999: 075 F5020000               vu 00 01  1 125      
    mov [ebp-4] (haystack),eax            ;#0045499E: 211105 FC                  uv 00 21  1 126      
    mov [ebp+28] (retaddr),#004549AD      ;#004549A1: 307105 1C AD494500         vu 00 20  1 126      
    jmp #0045AADB (code:find)             ;#004549A8: 351 2E610000               v  00 00  1 127      
    test eax,eax                          ;#004549AD: 205300                     uv 00 01  1 128      
    jne #004549D1                         ;#004549AF: 165 20                     v  00 00  1 128      
;  1204                 -- make sure you can tell 5 and 5.00000000001 
;  1205                 --  apart in ex.err, trace, ?x, and the like.
;  1206 --              s &= ".0"
;  1207                 s &= '.'
    lea edx,[ebp-16] (s)                  ;#004549B1: 215125 F0                  uv 04 20  1 129      
    lea edi,[ebp-16] (s)                  ;#004549B4: 215175 F0                  vu 80 20  1 129      
    mov ecx,#00402208                     ;#004549B7: 271 08224000               uv 02 00  1 130      
    call #0045FD65 (:%opConcat)           ;#004549BC: 350 A4B30000               v  00 00  1 130      
;  1208                 s &= '0'
    lea edx,[ebp-16] (s)                  ;#004549C1: 215125 F0                  uv 04 20  1 131      
    lea edi,[ebp-16] (s)                  ;#004549C4: 215175 F0                  vu 80 20  1 131      
    mov ecx,#004020D8                     ;#004549C7: 271 D8204000               uv 02 00  1 132      
    call #0045FD65 (:%opConcat)           ;#004549CC: 350 94B30000               v  00 00  1 132      
;  1209             end if
;  1210         end if
;  1211         return s
    mov edi,[ebp-16] (s)                  ;#004549D1: 213175 F0                  uv 80 20  1 133      
    cmp edi,h4                            ;#004549D4: 201377 00000040            uv 00 80  1 134 80   
    jne #004549E6                         ;#004549DA: 165 0A                     v  00 00  1 134      
    mov esi,757                           ;#004549DC: 276 F5020000               uv 40 00  1 135      
    call #00462744 (:%pUnassigned)        ;#004549E1: 350 5EDD0000               v  00 00  1 135      
    mov eax,edi                           ;#004549E6: 211370                     uv 01 80  1 136      
    mov [ebp-16] (s),ebx                  ;#004549E8: 211135 F0                  vu 00 28  1 136      
    jmp #00462C8F (:%opRetf)              ;#004549EB: 351 9FE20000               v  00 00  1 137      
;  1212     end if
;  1213 --  if string(x) then
;  1214 
;  1215 --      s = allascii(x)
;  1216 --      if string(s) then return s end if
;  1217 --  end if
;  1218 --8/8/16:
;  1219 --  if maxlen!=-1 and length(x)>maxlen then
;  1220     if maxlen>4 and length(x)>maxlen then
    mov esi,[ebp-8] (maxlen)              ;#004549F0: 213165 F8                  uv 40 20  1 138      
    cmp esi,4                             ;#004549F3: 203376 04                  uv 00 40  1 139 40   
    jle #00454B04                         ;#004549F6: 017216 08010000            v  00 00  1 139      
    lea edi,[ebp-28] (symtab[762])        ;#004549FC: 215175 E4                  uv 80 20  1 140      
    mov esi,[ebp] (x)                     ;#004549FF: 213165 00                  vu 40 20  1 140      
    mov edx,753                           ;#00454A02: 272 F1020000               uv 04 00  1 141      
    call #0045EFEC (:%opLen)              ;#00454A07: 350 E0A50000               v  00 00  1 141      
    mov eax,[ebp-8] (maxlen)              ;#00454A0C: 213105 F8                  uv 01 20  1 142      
    cmp ecx,eax                           ;#00454A0F: 071301                     uv 00 03  1 143 01   
    jle #00454B04                         ;#00454A11: 017216 ED000000            v  00 00  1 143      
;  1221         x = x[1..maxlen]
    mov edx,ebp                           ;#00454A17: 213325                     uv 04 20  1 144      
    mov ecx,1                             ;#00454A19: 271 01000000               vu 02 00  1 144      
    push #00454A31                        ;#00454A1E: 150 314A4500               uv 00 00  1 145      
    push edx                              ;#00454A23: 122                        vu 00 04  1 145      
    push eax                              ;#00454A24: 120                        uv 00 01  1 146      
    push 1                                ;#00454A25: 152 01                     vu 00 00  1 146      
    mov edx,753                           ;#00454A27: 272 F1020000               uv 04 00  1 147      
    jmp #00460A75 (:%pSubss)              ;#00454A2C: 351 44C00000               v  00 00  1 147      
;  1222 --8/8/16: (change as above)
;  1223         if string(x) then
    mov edi,[ebp] (x)                     ;#00454A31: 213175 00                  uv 80 20  1 148      
    cmp byte[ebx+edi*4-1],#82             ;#00454A34: 200174273 FF 82            u  00 88  2 151    *80*
    jne #00454B7E                         ;#00454A39: 017205 3F010000            v  00 00  1 152      
;  1224 --      if string(x) and length(x)>4 then
;  1225 --          s = allascii(x[1..maxlen-4],true)
;  1226             s = allascii(x[1..maxlen-4])
    lea edi,[ebp-32] (symtab[763])        ;#00454A3F: 215175 E0                  uv 80 20  1 153      
    mov ecx,[ebp-8] (maxlen)              ;#00454A42: 213115 F8                  vu 02 20  1 153      
    mov eax,[#0040205C] (JS)              ;#00454A45: 241 5C204000               uv 01 00  1 154      
    call #0045F299 (:%opSub)              ;#00454A4A: 350 4AA80000               v  00 00  1 154      
    lea edx,[ebp-36] (symtab[764])        ;#00454A4F: 215125 DC                  uv 04 20  1 155      
    mov ecx,1                             ;#00454A52: 271 01000000               vu 02 00  1 155      
    push #00454A6F                        ;#00454A57: 150 6F4A4500               uv 00 00  1 156      
    push edx                              ;#00454A5C: 122                        vu 00 04  1 156      
    push dword[ebp-32] (symtab[763])      ;#00454A5D: 377165 E0                  np 00 20  2 157      
    push 1                                ;#00454A60: 152 01                     uv 00 00  1 159      
    mov esi,[ebp] (x)                     ;#00454A62: 213165 00                  vu 40 20  1 159      
    mov edx,753                           ;#00454A65: 272 F1020000               uv 04 00  1 160      
    jmp #00460A75 (:%pSubss)              ;#00454A6A: 351 06C00000               v  00 00  1 160      
    mov ecx,12                            ;#00454A6F: 271 0C000000               uv 02 00  1 161      
    mov edx,592                           ;#00454A74: 272 50020000               vu 04 00  1 161      
    call :%opFrame (allascii)             ;#00454A79: 350 84E10000               v  00 00  1 162      
    mov edi,[ebp+20] (prevebp)            ;#00454A7E: 213175 14                  uv 80 20  1 163      
    mov eax,[edi-36]                      ;#00454A81: 213107 DC                  uv 01 80  1 166 80 *80*
    mov [edi-36], dword h4                ;#00454A84: 307107 DC 00000040         vu 00 80  1 166      
    cmp eax,h4                            ;#00454A8B: 075 00000040               uv 00 01  1 167      
    jne #00454A9C                         ;#00454A90: 165 0A                     v  00 00  1 167      
    mov esi,764                           ;#00454A92: 276 FC020000               uv 40 00  1 168      
    call #00462744 (:%pUnassigned)        ;#00454A97: 350 A8DC0000               v  00 00  1 168      
    mov [ebp] (x),eax                     ;#00454A9C: 211105 00                  uv 00 21  1 169      
    mov [ebp+28] (retaddr),#00454AAB      ;#00454A9F: 307105 1C AB4A4500         vu 00 20  1 169      
    jmp #00449755 (code:allascii)         ;#00454AA6: 351 AA4CFFFF               v  00 00  1 170      
    push eax                              ;#00454AAB: 120                        uv 00 01  1 171      
    mov edi,[ebp-16] (s)                  ;#00454AAC: 213175 F0                  vu 80 20  1 171      
    cmp edi,h4                            ;#00454AAF: 201377 00000040            uv 00 80  1 172      
    jle #00454AC5                         ;#00454AB5: 176 0E                     v  00 00  1 172      
    sub dword[ebx+edi*4-8],1              ;#00454AB7: 203154273 F8 01            u  00 88  3 173      
    jne #00454AC5                         ;#00454ABC: 165 07                     v  00 00  1 175      
    mov edx,edi                           ;#00454ABE: 213327                     uv 04 80  1 176      
    call #004639A8 (:%pDealloc)           ;#00454AC0: 350 E3EE0000               v  00 00  1 176      
    pop dword[ebp-16] (s)                 ;#00454AC5: 217105 F0                  np 00 20  3 177      
;  1227 --          if string(s) then return s&".." end if
;  1228             if string(s) then
    mov ecx,[ebp-16] (s)                  ;#00454AC8: 213115 F0                  uv 02 20  1 180      
    cmp ecx,h4                            ;#00454ACB: 201371 00000040            uv 00 02  1 181 02   
    jl #00454B7E                          ;#00454AD1: 017214 A7000000            v  00 00  1 181      
;  1229                 s &= '.'
    lea edx,[ebp-16] (s)                  ;#00454AD7: 215125 F0                  uv 04 20  1 182      
    lea edi,[ebp-16] (s)                  ;#00454ADA: 215175 F0                  vu 80 20  1 182      
    mov ecx,#00402208                     ;#00454ADD: 271 08224000               uv 02 00  1 183      
    call #0045FD65 (:%opConcat)           ;#00454AE2: 350 7EB20000               v  00 00  1 183      
;  1230                 s &= '.'
    lea edx,[ebp-16] (s)                  ;#00454AE7: 215125 F0                  uv 04 20  1 184      
    lea edi,[ebp-16] (s)                  ;#00454AEA: 215175 F0                  vu 80 20  1 184      
    mov ecx,#00402208                     ;#00454AED: 271 08224000               uv 02 00  1 185      
    call #0045FD65 (:%opConcat)           ;#00454AF2: 350 6EB20000               v  00 00  1 185      
;  1231                 return s
    mov eax,[ebp-16] (s)                  ;#00454AF7: 213105 F0                  uv 01 20  1 186      
    mov [ebp-16] (s),ebx                  ;#00454AFA: 211135 F0                  vu 00 28  1 186      
    jmp #00462C8F (:%opRetf)              ;#00454AFD: 351 8DE10000               v  00 00  1 187      
;  1232             end if
;  1233         end if
    jmp #00454B7E                         ;#00454B02: 353 7A                     v  00 00  1 188      
;  1234     elsif string(x) then
    mov esi,[ebp] (x)                     ;#00454B04: 213165 00                  uv 40 20  1 189      
    cmp esi,h4                            ;#00454B07: 201376 00000040            uv 00 40  1 190 40   
    jl #00454B7E                          ;#00454B0D: 174 6F                     v  00 00  1 190      
    cmp byte[ebx+esi*4-1],#82             ;#00454B0F: 200174263 FF 82            u  00 48  2 191      
    jne #00454B7E                         ;#00454B14: 165 68                     v  00 00  1 192      
;  1235 --      s = allascii(x,nest!=0)
;  1236         s = allascii(x)
    mov ecx,12                            ;#00454B16: 271 0C000000               uv 02 00  1 193      
    mov edx,592                           ;#00454B1B: 272 50020000               vu 04 00  1 193      
    call :%opFrame (allascii)             ;#00454B20: 350 DDE00000               v  00 00  1 194      
    mov edi,[ebp+20] (prevebp)            ;#00454B25: 213175 14                  uv 80 20  1 195      
    mov eax,[edi]                         ;#00454B28: 213007                     uv 01 80  1 198 80 *80*
    xor ebx,ebx                           ;#00454B2A: 061333                     vu 08 08  1 198      
    cmp eax,h4                            ;#00454B2C: 075 00000040               uv 00 01  1 199      
    jl #00454B3D                          ;#00454B31: 174 0A                     v  00 00  1 199      
    add dword[ebx+eax*4-8],1              ;#00454B33: 203104203 F8 01            u  00 09  3 200      
    cmp eax,753                           ;#00454B38: 075 F1020000               vu 00 01  1 202      
    mov [ebp] (x),eax                     ;#00454B3D: 211105 00                  uv 00 21  1 203      
    mov [ebp+28] (retaddr),#00454B4C      ;#00454B40: 307105 1C 4C4B4500         vu 00 20  1 203      
    jmp #00449755 (code:allascii)         ;#00454B47: 351 094CFFFF               v  00 00  1 204      
    push eax                              ;#00454B4C: 120                        uv 00 01  1 205      
    mov edi,[ebp-16] (s)                  ;#00454B4D: 213175 F0                  vu 80 20  1 205      
    cmp edi,h4                            ;#00454B50: 201377 00000040            uv 00 80  1 206      
    jle #00454B66                         ;#00454B56: 176 0E                     v  00 00  1 206      
    sub dword[ebx+edi*4-8],1              ;#00454B58: 203154273 F8 01            u  00 88  3 207      
    jne #00454B66                         ;#00454B5D: 165 07                     v  00 00  1 209      
    mov edx,edi                           ;#00454B5F: 213327                     uv 04 80  1 210      
    call #004639A8 (:%pDealloc)           ;#00454B61: 350 42EE0000               v  00 00  1 210      
    pop dword[ebp-16] (s)                 ;#00454B66: 217105 F0                  np 00 20  3 211      
;  1237         if string(s) then return s end if
    mov ecx,[ebp-16] (s)                  ;#00454B69: 213115 F0                  uv 02 20  1 214      
    cmp ecx,h4                            ;#00454B6C: 201371 00000040            uv 00 02  1 215 02   
    jl #00454B7E                          ;#00454B72: 174 0A                     v  00 00  1 215      
    mov eax,ecx                           ;#00454B74: 211310                     uv 01 02  1 216      
    mov [ebp-16] (s),ebx                  ;#00454B76: 211135 F0                  vu 00 28  1 216      
    jmp #00462C8F (:%opRetf)              ;#00454B79: 351 11E10000               v  00 00  1 217      
;  1238     end if
;  1239 --  s = "{"
;  1240     s = repeat('{',1)
    mov ecx,6                             ;#00454B7E: 271 06000000               uv 02 00  1 218      
    mov edx,206                           ;#00454B83: 272 CE000000               vu 04 00  1 218      
    call :%opFrame (repeatch)             ;#00454B88: 350 75E00000               v  00 00  1 219      
    mov [ebp] (ch), dword 123             ;#00454B8D: 307105 00 7B000000         uv 00 20  1 220      
    mov [ebp-4] (n), dword 1              ;#00454B94: 307105 FC 01000000         vu 00 20  1 220      
    mov [ebp+28] (retaddr),#00454BA7      ;#00454B9B: 307105 1C A74B4500         uv 00 20  1 221      
    jmp #0045581E (code:repeatch)         ;#00454BA2: 351 770C0000               v  00 00  1 221      
    push eax                              ;#00454BA7: 120                        uv 00 01  1 222      
    mov esi,[ebp-16] (s)                  ;#00454BA8: 213165 F0                  vu 40 20  1 222      
    cmp esi,h4                            ;#00454BAB: 201376 00000040            uv 00 40  1 223      
    jle #00454BC1                         ;#00454BB1: 176 0E                     v  00 00  1 223      
    sub dword[ebx+esi*4-8],1              ;#00454BB3: 203154263 F8 01            u  00 48  3 224      
    jne #00454BC1                         ;#00454BB8: 165 07                     v  00 00  1 226      
    mov edx,esi                           ;#00454BBA: 213326                     uv 04 40  1 227      
    call #004639A8 (:%pDealloc)           ;#00454BBC: 350 E7ED0000               v  00 00  1 227      
    pop dword[ebp-16] (s)                 ;#00454BC1: 217105 F0                  np 00 20  3 228      
;  1241     if asCh=false then asCh=true end if -- (nb -1 and true left as-is)
    mov eax,[ebp-4] (asCh)                ;#00454BC4: 213105 FC                  uv 01 20  1 231      
    cmp eax,0                             ;#00454BC7: 203370 00                  uv 00 01  1 232 01   
    jne #00454BD3                         ;#00454BCA: 165 07                     v  00 00  1 232      
    mov [ebp-4] (asCh), dword 1           ;#00454BCC: 307105 FC 01000000         uv 00 20  1 233      
;  1242     for i=1 to length(x) do
    lea edi,[ebp-28] (symtab[762])        ;#00454BD3: 215175 E4                  vu 80 20  1 233      
    mov esi,[ebp] (x)                     ;#00454BD6: 213165 00                  uv 40 20  1 234      
    mov edx,753                           ;#00454BD9: 272 F1020000               vu 04 00  1 234      
    call #0045EFEC (:%opLen)              ;#00454BDE: 350 09A40000               v  00 00  1 235      
    mov [ebp-40] (i), dword 1             ;#00454BE3: 307105 D8 01000000         uv 00 20  1 236      
    cmp ecx,1                             ;#00454BEA: 201371 01000000            vu 00 02  1 236      
    jl #00454E7F                          ;#00454BF0: 017214 89020000            v  00 00  1 237      
;  1243 --      s &= sprint(x[i])
;  1244         xi = x[i]
    mov edi,[ebp-40] (i)                  ;#00454BF6: 213175 D8                  uv 80 20  1 238      
    lea ecx,[ebp-20] (xi)                 ;#00454BF9: 215115 EC                  vu 02 20  1 238      
    mov esi,[ebp] (x)                     ;#00454BFC: 213165 00                  uv 40 20  1 239      
    mov edx,753                           ;#00454BFF: 272 F1020000               vu 04 00  1 239      
    mov al,0                              ;#00454C04: 260 00                     uv 01 00  1 240      
    call #00460FE5 (:%pSubse1)            ;#00454C06: 350 DAC30000               v  00 00  1 240      
;  1245         if maxlen=-1 then
    mov eax,[ebp-8] (maxlen)              ;#00454C0B: 213105 F8                  uv 01 20  1 241      
    cmp eax,-1                            ;#00454C0E: 203370 FF                  uv 00 01  1 242 01   
    jne #00454CBF                         ;#00454C11: 017205 A8000000            v  00 00  1 242      
;  1246 --          s &= sprint(xi)
;  1247             s &= sprint(xi,asCh,-1,nest+1)
    lea edi,[ebp-32] (symtab[763])        ;#00454C17: 215175 E0                  uv 80 20  1 243      
    mov ecx,[ebp-12] (nest)               ;#00454C1A: 213115 F4                  vu 02 20  1 243      
    mov eax,[#0040201C]                   ;#00454C1D: 241 1C204000               uv 01 00  1 244      
    call #0045F261 (:%opAdd)              ;#00454C22: 350 3AA60000               v  00 00  1 244      
    mov ecx,13                            ;#00454C27: 271 0D000000               uv 02 00  1 245      
    mov edx,212                           ;#00454C2C: 272 D4000000               vu 04 00  1 245      
    call #00462C02 (:%opFrame) (sprint)   ;#00454C31: 350 CCDF0000               v  00 00  1 246      
    mov edi,[ebp+20] (prevebp)            ;#00454C36: 213175 14                  uv 80 20  1 247      
    mov eax,[edi-20]                      ;#00454C39: 213107 EC                  uv 01 80  1 250 80 *80*
    xor ebx,ebx                           ;#00454C3C: 061333                     vu 08 08  1 250      
    cmp eax,h4                            ;#00454C3E: 075 00000040               uv 00 01  1 251      
    jl #00454C4F                          ;#00454C43: 174 0A                     v  00 00  1 251      
    add dword[ebx+eax*4-8],1              ;#00454C45: 203104203 F8 01            u  00 09  3 252      
    cmp eax,758                           ;#00454C4A: 075 F6020000               vu 00 01  1 254      
    mov [ebp] (x),eax                     ;#00454C4F: 211105 00                  uv 00 21  1 255      
    mov edi,[ebp+20] (prevebp)            ;#00454C52: 213175 14                  vu 80 20  1 255      
    mov eax,[edi-4]                       ;#00454C55: 213107 FC                  uv 01 80  1 258    *80*
    mov [ebp-4] (asCh),eax                ;#00454C58: 211105 FC                  uv 00 21  1 259 01   
    mov [ebp-8] (maxlen), dword -1        ;#00454C5B: 307105 F8 FFFFFFFF         vu 00 20  1 259      
    mov edi,[ebp+20] (prevebp)            ;#00454C62: 213175 14                  uv 80 20  1 260      
    mov eax,[edi-32]                      ;#00454C65: 213107 E0                  uv 01 80  1 263 80 *80*
    mov [edi-32], dword h4                ;#00454C68: 307107 E0 00000040         vu 00 80  1 263      
    cmp eax,h4                            ;#00454C6F: 075 00000040               uv 00 01  1 264      
    jne #00454C80                         ;#00454C74: 165 0A                     v  00 00  1 264      
    mov esi,763                           ;#00454C76: 276 FB020000               uv 40 00  1 265      
    call #00462744 (:%pUnassigned)        ;#00454C7B: 350 C4DA0000               v  00 00  1 265      
    mov [ebp-12] (nest),eax               ;#00454C80: 211105 F4                  uv 00 21  1 266      
    mov [ebp+28] (retaddr),#00454C8F      ;#00454C83: 307105 1C 8F4C4500         vu 00 20  1 266      
    jmp #0045471E (code:sprint)           ;#00454C8A: 351 8FFAFFFF               v  00 00  1 267      
    push eax                              ;#00454C8F: 120                        uv 00 01  1 268      
    mov edi,[ebp-36] (symtab[764])        ;#00454C90: 213175 DC                  vu 80 20  1 268      
    cmp edi,h4                            ;#00454C93: 201377 00000040            uv 00 80  1 269      
    jle #00454CA9                         ;#00454C99: 176 0E                     v  00 00  1 269      
    sub dword[ebx+edi*4-8],1              ;#00454C9B: 203154273 F8 01            u  00 88  3 270      
    jne #00454CA9                         ;#00454CA0: 165 07                     v  00 00  1 272      
    mov edx,edi                           ;#00454CA2: 213327                     uv 04 80  1 273      
    call #004639A8 (:%pDealloc)           ;#00454CA4: 350 FFEC0000               v  00 00  1 273      
    pop dword[ebp-36] (symtab[764])       ;#00454CA9: 217105 DC                  np 00 20  3 274      
    lea edx,[ebp-16] (s)                  ;#00454CAC: 215125 F0                  uv 04 20  1 277      
    lea edi,[ebp-16] (s)                  ;#00454CAF: 215175 F0                  vu 80 20  1 277      
    lea ecx,[ebp-36] (symtab[764])        ;#00454CB2: 215115 DC                  uv 02 20  1 278      
    call #0045FD65 (:%opConcat)           ;#00454CB5: 350 ABB00000               v  00 00  1 278      
    jmp #00454E44                         ;#00454CBA: 351 85010000               v  00 00  1 279      
;  1248         else
;  1249             if maxlen>length(s) then
    lea edi,[ebp-44] (symtab[767])        ;#00454CBF: 215175 D4                  uv 80 20  1 280      
    mov esi,[ebp-16] (s)                  ;#00454CC2: 213165 F0                  vu 40 20  1 280      
    mov edx,757                           ;#00454CC5: 272 F5020000               uv 04 00  1 281      
    call #0045EFEC (:%opLen)              ;#00454CCA: 350 1DA30000               v  00 00  1 281      
    cmp eax,ecx                           ;#00454CCF: 071310                     uv 00 03  1 282      
    jle #00454DAE                         ;#00454CD1: 017216 D7000000            v  00 00  1 282      
;  1250                 s &= sprint(xi,asCh,maxlen-length(s),nest+1)
    lea edi,[ebp-44] (symtab[767])        ;#00454CD7: 215175 D4                  uv 80 20  1 283      
    mov edx,757                           ;#00454CDA: 272 F5020000               vu 04 00  1 283      
    call #0045EFEC (:%opLen)              ;#00454CDF: 350 08A30000               v  00 00  1 284      
    lea edi,[ebp-32] (symtab[763])        ;#00454CE4: 215175 E0                  uv 80 20  1 285      
    mov ecx,eax                           ;#00454CE7: 211301                     vu 02 01  1 285      
    mov eax,[ebp-44] (symtab[767])        ;#00454CE9: 213105 D4                  uv 01 20  1 286      
    call #0045F299 (:%opSub)              ;#00454CEC: 350 A8A50000               v  00 00  1 286      
    lea edi,[ebp-48] (symtab[768])        ;#00454CF1: 215175 D0                  uv 80 20  1 287      
    mov ecx,[ebp-12] (nest)               ;#00454CF4: 213115 F4                  vu 02 20  1 287      
    mov eax,[#0040201C]                   ;#00454CF7: 241 1C204000               uv 01 00  1 288      
    call #0045F261 (:%opAdd)              ;#00454CFC: 350 60A50000               v  00 00  1 288      
    mov ecx,13                            ;#00454D01: 271 0D000000               uv 02 00  1 289      
    mov edx,212                           ;#00454D06: 272 D4000000               vu 04 00  1 289      
    call #00462C02 (:%opFrame) (sprint)   ;#00454D0B: 350 F2DE0000               v  00 00  1 290      
    mov edi,[ebp+20] (prevebp)            ;#00454D10: 213175 14                  uv 80 20  1 291      
    mov eax,[edi-20]                      ;#00454D13: 213107 EC                  uv 01 80  1 294 80 *80*
    xor ebx,ebx                           ;#00454D16: 061333                     vu 08 08  1 294      
    cmp eax,h4                            ;#00454D18: 075 00000040               uv 00 01  1 295      
    jl #00454D29                          ;#00454D1D: 174 0A                     v  00 00  1 295      
    add dword[ebx+eax*4-8],1              ;#00454D1F: 203104203 F8 01            u  00 09  3 296      
    cmp eax,758                           ;#00454D24: 075 F6020000               vu 00 01  1 298      
    mov [ebp] (x),eax                     ;#00454D29: 211105 00                  uv 00 21  1 299      
    mov edi,[ebp+20] (prevebp)            ;#00454D2C: 213175 14                  vu 80 20  1 299      
    mov eax,[edi-4]                       ;#00454D2F: 213107 FC                  uv 01 80  1 302    *80*
    mov [ebp-4] (asCh),eax                ;#00454D32: 211105 FC                  uv 00 21  1 303 01   
    mov edi,[ebp+20] (prevebp)            ;#00454D35: 213175 14                  vu 80 20  1 303      
    mov eax,[edi-32]                      ;#00454D38: 213107 E0                  uv 01 80  1 306    *80*
    mov [edi-32], dword h4                ;#00454D3B: 307107 E0 00000040         vu 00 80  1 306      
    cmp eax,h4                            ;#00454D42: 075 00000040               uv 00 01  1 307      
    jne #00454D53                         ;#00454D47: 165 0A                     v  00 00  1 307      
    mov esi,763                           ;#00454D49: 276 FB020000               uv 40 00  1 308      
    call #00462744 (:%pUnassigned)        ;#00454D4E: 350 F1D90000               v  00 00  1 308      
    mov [ebp-8] (maxlen),eax              ;#00454D53: 211105 F8                  uv 00 21  1 309      
    mov edi,[ebp+20] (prevebp)            ;#00454D56: 213175 14                  vu 80 20  1 309      
    mov eax,[edi-48]                      ;#00454D59: 213107 D0                  uv 01 80  1 312    *80*
    mov [edi-48], dword h4                ;#00454D5C: 307107 D0 00000040         vu 00 80  1 312      
    cmp eax,h4                            ;#00454D63: 075 00000040               uv 00 01  1 313      
    jne #00454D74                         ;#00454D68: 165 0A                     v  00 00  1 313      
    mov esi,768                           ;#00454D6A: 276 00030000               uv 40 00  1 314      
    call #00462744 (:%pUnassigned)        ;#00454D6F: 350 D0D90000               v  00 00  1 314      
    mov [ebp-12] (nest),eax               ;#00454D74: 211105 F4                  uv 00 21  1 315      
    mov [ebp+28] (retaddr),#00454D83      ;#00454D77: 307105 1C 834D4500         vu 00 20  1 315      
    jmp #0045471E (code:sprint)           ;#00454D7E: 351 9BF9FFFF               v  00 00  1 316      
    push eax                              ;#00454D83: 120                        uv 00 01  1 317      
    mov edi,[ebp-36] (symtab[764])        ;#00454D84: 213175 DC                  vu 80 20  1 317      
    cmp edi,h4                            ;#00454D87: 201377 00000040            uv 00 80  1 318      
    jle #00454D9D                         ;#00454D8D: 176 0E                     v  00 00  1 318      
    sub dword[ebx+edi*4-8],1              ;#00454D8F: 203154273 F8 01            u  00 88  3 319      
    jne #00454D9D                         ;#00454D94: 165 07                     v  00 00  1 321      
    mov edx,edi                           ;#00454D96: 213327                     uv 04 80  1 322      
    call #004639A8 (:%pDealloc)           ;#00454D98: 350 0BEC0000               v  00 00  1 322      
    pop dword[ebp-36] (symtab[764])       ;#00454D9D: 217105 DC                  np 00 20  3 323      
    lea edx,[ebp-16] (s)                  ;#00454DA0: 215125 F0                  uv 04 20  1 326      
    lea edi,[ebp-16] (s)                  ;#00454DA3: 215175 F0                  vu 80 20  1 326      
    lea ecx,[ebp-36] (symtab[764])        ;#00454DA6: 215115 DC                  uv 02 20  1 327      
    call #0045FD65 (:%opConcat)           ;#00454DA9: 350 B7AF0000               v  00 00  1 327      
;  1251             end if
;  1252             if length(s)>=maxlen then
    lea edi,[ebp-44] (symtab[767])        ;#00454DAE: 215175 D4                  uv 80 20  1 328      
    mov esi,[ebp-16] (s)                  ;#00454DB1: 213165 F0                  vu 40 20  1 328      
    mov edx,757                           ;#00454DB4: 272 F5020000               uv 04 00  1 329      
    call #0045EFEC (:%opLen)              ;#00454DB9: 350 2EA20000               v  00 00  1 329      
    mov eax,[ebp-8] (maxlen)              ;#00454DBE: 213105 F8                  uv 01 20  1 330      
    cmp ecx,eax                           ;#00454DC1: 071301                     uv 00 03  1 331 01   
    jl #00454E44                          ;#00454DC3: 174 7F                     v  00 00  1 331      
;  1253                 if nest=0 then
    mov edi,[ebp-12] (nest)               ;#00454DC5: 213175 F4                  uv 80 20  1 332      
    cmp edi,0                             ;#00454DC8: 203377 00                  uv 00 80  1 333 80   
    jne #00454E1E                         ;#00454DCB: 165 51                     v  00 00  1 333      
;  1254                     s = s[1..maxlen-2]
    lea edi,[ebp-32] (symtab[763])        ;#00454DCD: 215175 E0                  uv 80 20  1 334      
    mov ecx,eax                           ;#00454DD0: 211301                     vu 02 01  1 334      
    mov eax,[DLL_THREAD_ATTACH]           ;#00454DD2: 241 40204000               uv 01 00  1 335      
    call #0045F299 (:%opSub)              ;#00454DD7: 350 BDA40000               v  00 00  1 335      
    lea edx,[ebp-16] (s)                  ;#00454DDC: 215125 F0                  uv 04 20  1 336      
    mov ecx,1                             ;#00454DDF: 271 01000000               vu 02 00  1 336      
    push #00454DFC                        ;#00454DE4: 150 FC4D4500               uv 00 00  1 337      
    push edx                              ;#00454DE9: 122                        vu 00 04  1 337      
    push dword[ebp-32] (symtab[763])      ;#00454DEA: 377165 E0                  np 00 20  2 338      
    push 1                                ;#00454DED: 152 01                     uv 00 00  1 340      
    mov esi,[ebp-16] (s)                  ;#00454DEF: 213165 F0                  vu 40 20  1 340      
    mov edx,757                           ;#00454DF2: 272 F5020000               uv 04 00  1 341      
    jmp #00460A75 (:%pSubss)              ;#00454DF7: 351 79BC0000               v  00 00  1 341      
;  1255 --                  s &= ".."
;  1256                     s &= '.'
    lea edx,[ebp-16] (s)                  ;#00454DFC: 215125 F0                  uv 04 20  1 342      
    lea edi,[ebp-16] (s)                  ;#00454DFF: 215175 F0                  vu 80 20  1 342      
    mov ecx,#00402208                     ;#00454E02: 271 08224000               uv 02 00  1 343      
    call #0045FD65 (:%opConcat)           ;#00454E07: 350 59AF0000               v  00 00  1 343      
;  1257                     s &= '.'
    lea edx,[ebp-16] (s)                  ;#00454E0C: 215125 F0                  uv 04 20  1 344      
    lea edi,[ebp-16] (s)                  ;#00454E0F: 215175 F0                  vu 80 20  1 344      
    mov ecx,#00402208                     ;#00454E12: 271 08224000               uv 02 00  1 345      
    call #0045FD65 (:%opConcat)           ;#00454E17: 350 49AF0000               v  00 00  1 345      
    jmp #00454E39                         ;#00454E1C: 353 1B                     v  00 00  1 346      
;  1258                 else
;  1259                     s = s[1..maxlen]
    lea edx,[ebp-16] (s)                  ;#00454E1E: 215125 F0                  uv 04 20  1 347      
    mov ecx,1                             ;#00454E21: 271 01000000               vu 02 00  1 347      
    push #00454E39                        ;#00454E26: 150 394E4500               uv 00 00  1 348      
    push edx                              ;#00454E2B: 122                        vu 00 04  1 348      
    push eax                              ;#00454E2C: 120                        uv 00 01  1 349      
    push 1                                ;#00454E2D: 152 01                     vu 00 00  1 349      
    mov edx,757                           ;#00454E2F: 272 F5020000               uv 04 00  1 350      
    jmp #00460A75 (:%pSubss)              ;#00454E34: 351 3CBC0000               v  00 00  1 350      
;  1260                 end if
;  1261                 return s
    mov eax,[ebp-16] (s)                  ;#00454E39: 213105 F0                  uv 01 20  1 351      
    mov [ebp-16] (s),ebx                  ;#00454E3C: 211135 F0                  vu 00 28  1 351      
    jmp #00462C8F (:%opRetf)              ;#00454E3F: 351 4BDE0000               v  00 00  1 352      
;  1262             end if
;  1263         end if
;  1264         if i<length(x) then
    lea edi,[ebp-44] (symtab[767])        ;#00454E44: 215175 D4                  uv 80 20  1 353      
    mov esi,[ebp] (x)                     ;#00454E47: 213165 00                  vu 40 20  1 353      
    mov edx,753                           ;#00454E4A: 272 F1020000               uv 04 00  1 354      
    call #0045EFEC (:%opLen)              ;#00454E4F: 350 98A10000               v  00 00  1 354      
    mov edi,[ebp-40] (i)                  ;#00454E54: 213175 D8                  uv 80 20  1 355      
    cmp edi,ecx                           ;#00454E57: 071317                     uv 00 82  1 356 80   
    jge #00454E6B                         ;#00454E59: 175 10                     v  00 00  1 356      
;  1265             s &= ','
    lea edx,[ebp-16] (s)                  ;#00454E5B: 215125 F0                  uv 04 20  1 357      
    lea edi,[ebp-16] (s)                  ;#00454E5E: 215175 F0                  vu 80 20  1 357      
    mov ecx,#004022D4                     ;#00454E61: 271 D4224000               uv 02 00  1 358      
    call #0045FD65 (:%opConcat)           ;#00454E66: 350 FAAE0000               v  00 00  1 358      
;  1266         end if
;  1267     end for
    mov eax,[ebp-40] (i)                  ;#00454E6B: 213105 D8                  uv 01 20  1 359      
    mov esi,[ebp-28] (symtab[762])        ;#00454E6E: 213165 E4                  vu 40 20  1 359      
    add eax,1                             ;#00454E71: 203300 01                  uv 01 01  1 360      
    cmp eax,esi                           ;#00454E74: 073306                     uv 00 41  1 361 01   
    mov [ebp-40] (i),eax                  ;#00454E76: 211105 D8                  vu 00 21  1 361      
    jle #00454BF6                         ;#00454E79: 017216 77FDFFFF            v  00 00  1 362      
;  1268 --  s &= "}"
;  1269     s &= '}'
    lea edx,[ebp-16] (s)                  ;#00454E7F: 215125 F0                  uv 04 20  1 363      
    lea edi,[ebp-16] (s)                  ;#00454E82: 215175 F0                  vu 80 20  1 363      
    mov ecx,#00402368                     ;#00454E85: 271 68234000               uv 02 00  1 364      
    call #0045FD65 (:%opConcat)           ;#00454E8A: 350 D6AE0000               v  00 00  1 364      
;  1270     return s
    mov eax,[ebp-16] (s)                  ;#00454E8F: 213105 F0                  uv 01 20  1 365      
    mov [ebp-16] (s),ebx                  ;#00454E92: 211135 F0                  vu 00 28  1 365      
    jmp #00462C8F (:%opRetf)              ;#00454E95: 351 F5DD0000               v  00 00  1 366      
;  1271 end function
;  1272 
;  1273 --DEV move this to pfileioN.e:
;  1274 global procedure print(integer fn, object x, integer asCh=asChdef, maxlen=-1)
    mov ecx,[ebp] (fn)                    ;#00444EF7: 213115 00                  uv 02 20  1   1      
    cmp ecx,h4                            ;#00444EFA: 201371 00000040            uv 00 02  1   2 02   
    jl #00444F0C                          ;#00444F00: 174 0A                     v  00 00  1   2      
    mov ecx,770                           ;#00444F02: 271 02030000               uv 02 00  1   3      
    call #00462D8D (:%opTcFail)           ;#00444F07: 350 81DE0100               v  00 00  1   3      
    mov esi,[ebp-8] (asCh)                ;#00444F0C: 213165 F8                  uv 40 20  1   4      
    cmp esi,h4                            ;#00444F0F: 201376 00000040            uv 00 40  1   5 40   
    jne #00444F22                         ;#00444F15: 165 0B                     v  00 00  1   5      
    mov esi,[#00402358] (asChdef)         ;#00444F17: 213065 58234000            uv 40 00  1   6      
    mov [ebp-8] (asCh),esi                ;#00444F1D: 211165 F8                  uv 00 60  1   7 40   
    jmp #00444F2E                         ;#00444F20: 353 0C                     v  00 00  1   7      
    jl #00444F2E                          ;#00444F22: 174 0A                     v  00 00  1   8      
    mov ecx,772                           ;#00444F24: 271 04030000               uv 02 00  1   9      
    call #00462D8D (:%opTcFail)           ;#00444F29: 350 5FDE0100               v  00 00  1   9      
    mov edi,[ebp-12] (maxlen)             ;#00444F2E: 213175 F4                  uv 80 20  1  10      
    cmp edi,h4                            ;#00444F31: 201377 00000040            uv 00 80  1  11 80   
    jne #00444F42                         ;#00444F37: 165 09                     v  00 00  1  11      
    mov [ebp-12] (maxlen), dword -1       ;#00444F39: 307105 F4 FFFFFFFF         uv 00 20  1  12      
    jmp #00444F4E                         ;#00444F40: 353 0C                     v  00 00  1  12      
    jl #00444F4E                          ;#00444F42: 174 0A                     v  00 00  1  13      
    mov ecx,773                           ;#00444F44: 271 05030000               uv 02 00  1  14      
    call #00462D8D (:%opTcFail)           ;#00444F49: 350 3FDE0100               v  00 00  1  14      
;  1275 -- Print a string representation of any data object.
;  1276 -- Alternative: see ppp.e (pp/ppOpt/ppEx).
;  1277 --printf(1,"asCh:%d\n",asCh)
;  1278     puts(fn,sprint(x,asCh,maxlen))
    mov ecx,13                            ;#00444F4E: 271 0D000000               uv 02 00  1  15      
    mov edx,212                           ;#00444F53: 272 D4000000               vu 04 00  1  15      
    call #00462C02 (:%opFrame) (sprint)   ;#00444F58: 350 A5DC0100               v  00 00  1  16      
    mov edi,[ebp+20] (prevebp)            ;#00444F5D: 213175 14                  uv 80 20  1  17      
    mov eax,[edi-4]                       ;#00444F60: 213107 FC                  uv 01 80  1  20 80 *80*
    xor ebx,ebx                           ;#00444F63: 061333                     vu 08 08  1  20      
    cmp eax,h4                            ;#00444F65: 075 00000040               uv 00 01  1  21      
    jl #00444F76                          ;#00444F6A: 174 0A                     v  00 00  1  21      
    add dword[ebx+eax*4-8],1              ;#00444F6C: 203104203 F8 01            u  00 09  3  22      
    cmp eax,771                           ;#00444F71: 075 03030000               vu 00 01  1  24      
    mov [ebp] (x),eax                     ;#00444F76: 211105 00                  uv 00 21  1  25      
    mov edi,[ebp+20] (prevebp)            ;#00444F79: 213175 14                  vu 80 20  1  25      
    mov eax,[edi-8]                       ;#00444F7C: 213107 F8                  uv 01 80  1  28    *80*
    mov [ebp-4] (asCh),eax                ;#00444F7F: 211105 FC                  uv 00 21  1  29 01   
    mov edi,[ebp+20] (prevebp)            ;#00444F82: 213175 14                  vu 80 20  1  29      
    mov eax,[edi-12]                      ;#00444F85: 213107 F4                  uv 01 80  1  32    *80*
    mov [ebp-8] (maxlen),eax              ;#00444F88: 211105 F8                  uv 00 21  1  33 01   
    mov [ebp+28] (retaddr),#00444F97      ;#00444F8B: 307105 1C 974F4400         vu 00 20  1  33      
    jmp #0045471E (code:sprint)           ;#00444F92: 351 87F70000               v  00 00  1  34      
    push eax                              ;#00444F97: 120                        uv 00 01  1  35      
    mov ecx,[ebp-16] (symtab[774])        ;#00444F98: 213115 F0                  vu 02 20  1  35      
    cmp ecx,h4                            ;#00444F9B: 201371 00000040            uv 00 02  1  36      
    jle #00444FB1                         ;#00444FA1: 176 0E                     v  00 00  1  36      
    sub dword[ebx+ecx*4-8],1              ;#00444FA3: 203154213 F8 01            u  00 0A  3  37      
    jne #00444FB1                         ;#00444FA8: 165 07                     v  00 00  1  39      
    mov edx,ecx                           ;#00444FAA: 213321                     uv 04 02  1  40      
    call #004639A8 (:%pDealloc)           ;#00444FAC: 350 F7E90100               v  00 00  1  40      
    pop dword[ebp-16] (symtab[774])       ;#00444FB1: 217105 F0                  np 00 20  3  41      
    mov eax,[ebp] (fn)                    ;#00444FB4: 213105 00                  uv 01 20  1  44      
    mov edx,[ebp-16] (symtab[774])        ;#00444FB7: 213125 F0                  vu 04 20  1  44      
    call #0045E072 (:%opPuts)             ;#00444FBA: 350 B3900100               v  00 00  1  45      
    jmp #00462C8F (:%opRetf)              ;#00444FBF: 351 CBDC0100               v  00 00  1  46      
;  1279 end procedure
;C:\Phix\builtins\VM\pPower.e:
;=============================
;     1 --
;     2 -- pPower.e
;     3 -- ========
;     4 --
;     5 --  Implements :%opPow, [edi]:=power(eax,ecx) (where [edi],eax,ecx are all int/atom [not sequence])
;     6 --
;     7 
;     8 -- Quick analysis of int:=power(int,int) that we could do in the ALU. Originally written because power(3,5) is non-exact on X64, 
;     9 --  which I have now conceded as not important, it looks like "+/-177,<=4" should have been "+/-181,<=4" but otherwise seems to
;    10 --  be a perfectly reasonable compromise. 
;    11 --  What I have not done is test performance: is ALU better/worse than fyl2x/frndint/f2xm1/fscale etc? If it is (which I doubt) 
;    12 --  then some more power(x,2..3) optimisations might just have merits.
;    13 --power(<atm>,0) [already handled separately]
;    14 --power(<int>,1) [worthwhile handling separately?]
;    15 --power(-32767..32767,2)
;    16 --power(-1024..1023,3)
;    17 --power(-181..181,4)    -- (1073283121 = #3FF90031)     [who knows where +/-177 came from?]
;    18 --power(-64..63,5)
;    19 --power(-31..31,6)
;    20 --power(-19..19,7)
;    21 --power(-13..13,8)
;    22 --power(-10..10,9)
;    23 --power(-7..7,10)
;    24 --power(-6..6,11)
;    25 --power(-5..5,12)
;    26 --power(-4..4,13..14)
;    27 --power(-4..3,15)
;    28 --power(-3..3,16..18)
;    29 --power(-2..2,19..29) [power(2,0..29) already handled separately]
;    30 --power(-1..1,>=1) [worthwhile handling separately?]
;    31 --power(0,x) [worthwhile handling separately?]
;    32 
;    33 --#with debug   -- (no effect: I had to disable the without in pprntfN.e instead, last time I tried)
;    34 
;    35 include VM\pHeap.e  -- :%pDealloc/:%pStoreFlt
;    36 include VM\pFPU.e   -- :%down53 etc
;    37 
;    38 #ilASM{ jmp :%opRetf
                jmp #00462C8F (:%opRetf)  ;#00463BF3: 351 97F0FFFF               v  00 00  1   1      
;    39 
;    40 --DEV
;    41 --      ::e102cr0tple0   -- cannot raise 0 to power<=0
;    42 --          int3
;    43         ::e1413sopa
;    44             int3
                    int3                  ;#00463BF8: 314                        np 00 00 13   2      
;    45         ::e34pfu
;    46             int3
                    int3                  ;#00463BF9: 314                        np 00 00 13  15      
;    47 --      ::e35pfo
;    48 --          int3
;    49 --      ::e54atrnntnip
;    50 --          int3
;    51 
;    52 --/*
;    53 procedure :%opPow(:%)
;    54 end procedure -- (for Edita/CtrlQ)
;    55 --*/
;    56   :%opPow
;    57 ---------
;    58     [32]
;    59         --calling convention:
;    60         --  lea edi,[p1]        -- target
;    61         --  mov ecx,[p3]        -- ref p3 (opUnassigned)
;    62         --  mov eax,[p2]        -- ref p2 (opUnassigned)
;    63         --  call :%opPow        -- [edi] := power(eax,ecx)
;    64         --    all registers trashed unless result is integer, left in eax
;    65 
;    66         -- handle power(2,0..29) as 1 shl cl.
;    67         cmp eax,2
                cmp eax,2                 ;#00463BFA: 203370 02                  uv 00 01  1  28      
;    68         jne :notPow2
                jne #00463C23             ;#00463BFD: 165 24                     v  00 00  1  28      
;    69         cmp ecx,29
                cmp ecx,29                ;#00463BFF: 203371 1D                  uv 00 02  1  29      
;    70         ja :notPow2
                ja #00463C23              ;#00463C02: 167 1F                     v  00 00  1  29      
;    71         mov eax,1
                mov eax,1                 ;#00463C04: 270 01000000               uv 01 00  1  30      
;    72         mov edx,[edi]
                mov edx,[edi]             ;#00463C09: 213027                     vu 04 80  1  30      
;    73         shl eax,cl
                shl eax,cl                ;#00463C0B: 323340                     np 01 03  4  31      
;    74       ::opPowRet
;    75         cmp edx,h4
                cmp edx,h4                ;#00463C0D: 201372 00000040            uv 00 04  1  35      
;    76         mov [edi],eax
                mov [edi],eax             ;#00463C13: 211007                     vu 00 81  1  35      
;    77         jle @f
                jle #00463C22             ;#00463C15: 176 0B                     v  00 00  1  36      
;    78             sub dword[ebx+edx*4-8],1
                    sub dword[ebx+edx*4-8],1  ;#00463C17: 203154223 F8 01            u  00 0C  3  37      
;    79             jz :%pDealloc
                    jz #004639A8 (:%pDealloc)  ;#00463C1C: 017204 86FDFFFF            v  00 00  1  39      
;    80       @@:
;    81         ret
                ret                       ;#00463C22: 303                        np 00 00  2  40      
;    82 
;    83       ::notPow2
;    84 
;    85         -- handle power(x,0) as 1, except for power(0,0) and power(<seq>,0) which are errors
;    86         test ecx,ecx
                test ecx,ecx              ;#00463C23: 205311                     uv 00 02  1  42      
;    87         jnz :notPow0
                jnz #00463C3E             ;#00463C25: 165 17                     v  00 00  1  42      
;    88         -- 3/11/15 let power(0,0) be 1
;    89 --      test eax,eax
;    90 --      jz :e102cr0tple0
;    91         cmp eax,h4
                cmp eax,h4                ;#00463C27: 075 00000040               uv 00 01  1  43      
;    92         jl @f
                jl #00463C35              ;#00463C2C: 174 07                     v  00 00  1  43      
;    93             cmp byte[ebx+eax*4-1],0x12
                    cmp byte[ebx+eax*4-1],#12  ;#00463C2E: 200174203 FF 12            u  00 09  2  44      
;    94             jne :e1413sopa
                    jne #00463BF8         ;#00463C33: 165 C3                     v  00 00  1  45      
;    95       @@:
;    96         mov edx,[edi]
                mov edx,[edi]             ;#00463C35: 213027                     uv 04 80  1  46      
;    97         mov eax,1
                mov eax,1                 ;#00463C37: 270 01000000               vu 01 00  1  46      
;    98         jmp :opPowRet
                jmp #00463C0D             ;#00463C3C: 353 CF                     v  00 00  1  47      
;    99     
;   100       ::notPow0
;   101 
;   102         -- power(-177..177,1..4) can be done using mul to give an integer result...
;   103 --PL 181^4/7^10/10^9
;   104         cmp ecx,4
                cmp ecx,4                 ;#00463C3E: 203371 04                  uv 00 02  1  48      
;   105         mov edx,-181
                mov edx,-181              ;#00463C41: 272 4BFFFFFF               vu 04 00  1  48      
;   106         jbe :testedx
                jbe #00463C52             ;#00463C46: 166 0A                     v  00 00  1  49      
;   107 --      cmp ecx,10
;   108 --      mov edx,-7
;   109 --      jbe :testrdx
;   110         cmp ecx,9
                cmp ecx,9                 ;#00463C48: 203371 09                  uv 00 02  1  50      
;   111         mov edx,-10
                mov edx,-10               ;#00463C4B: 272 F6FFFFFF               vu 04 00  1  50      
;   112         ja :notIntRes
                ja #00463C70              ;#00463C50: 167 1E                     v  00 00  1  51      
;   113 --      cmp eax,-177
;   114       ::testedx
;   115         cmp eax,edx
                cmp eax,edx               ;#00463C52: 071320                     uv 00 05  1  52      
;   116         jl :notIntRes
                jl #00463C70              ;#00463C54: 174 1A                     v  00 00  1  52      
;   117 --      cmp eax,177
;   118         neg edx
                neg edx                   ;#00463C56: 367332                     np 04 04  1  53      
;   119         cmp eax,edx
                cmp eax,edx               ;#00463C58: 071320                     uv 00 05  1  54      
;   120         jg :notIntRes
                jg #00463C70              ;#00463C5A: 177 14                     v  00 00  1  54      
;   121 
;   122         mov esi,eax
                mov esi,eax               ;#00463C5C: 213360                     uv 40 01  1  55      
;   123         mov edx,[edi]
                mov edx,[edi]             ;#00463C5E: 213027                     vu 04 80  1  55      
;   124         sub ecx,1
                sub ecx,1                 ;#00463C60: 203351 01                  uv 02 02  1  56      
;   125         jz :opPowRet
                jz #00463C0D              ;#00463C63: 164 A8                     v  00 00  1  56      
;   126       ::IntPowMulLoop
;   127         imul esi
                imul esi                  ;#00463C65: 367356                     np 05 41 10  57      
;   128         sub ecx,1
                sub ecx,1                 ;#00463C67: 203351 01                  uv 02 02  1  67      
;   129         jnz IntPowMulLoop
                jnz #00463C65             ;#00463C6A: 165 F9                     v  00 00  1  67      
;   130         mov edx,[edi]
                mov edx,[edi]             ;#00463C6C: 213027                     uv 04 80  1  68      
;   131         jmp :opPowRet
                jmp #00463C0D             ;#00463C6E: 353 9D                     v  00 00  1  68      
;   132 
;   133       ::notIntRes
;   134         cmp ecx,h4
                cmp ecx,h4                ;#00463C70: 201371 00000040            uv 00 02  1  69      
;   135         jge :opPowp3Flt
                jge #00463C81             ;#00463C76: 175 09                     v  00 00  1  69      
;   136             push ecx
                    push ecx              ;#00463C78: 121                        uv 00 02  1  70      
;   137             fild dword[esp]
                    fild dword[esp]       ;#00463C79: 333004044                  np 00 10  3  71      
;   138             add esp,4
                    add esp,4             ;#00463C7C: 203304 04                  uv 10 10  1  74      
;   139             jmp @f
                    jmp #00463C8F         ;#00463C7F: 353 0E                     v  00 00  1  74      
;   140       ::opPowp3Flt
;   141             cmp byte[ebx+ecx*4-1],0x12
                    cmp byte[ebx+ecx*4-1],#12  ;#00463C81: 200174213 FF 12            u  00 0A  2  75      
;   142             jne :e1413sopa
                    jne #00463BF8         ;#00463C86: 017205 6CFFFFFF            v  00 00  1  76      
;   143             fld qword[ebx+ecx*4]
                    fld qword[ebx+ecx*4]  ;#00463C8C: 335004213                  np 00 0A  1  77      
;   144       @@:
;   145         cmp eax,h4
                cmp eax,h4                ;#00463C8F: 075 00000040               uv 00 01  1  78      
;   146         jge :opPowp2Flt
                jge #00463C9F             ;#00463C94: 175 09                     v  00 00  1  78      
;   147             push eax
                    push eax              ;#00463C96: 120                        uv 00 01  1  79      
;   148             fild dword[esp]
                    fild dword[esp]       ;#00463C97: 333004044                  np 00 10  3  80      
;   149             add esp,4
                    add esp,4             ;#00463C9A: 203304 04                  uv 10 10  1  83      
;   150             jmp @f
                    jmp #00463CAD         ;#00463C9D: 353 0E                     v  00 00  1  83      
;   151       ::opPowp2Flt
;   152             cmp byte[ebx+eax*4-1],0x12
                    cmp byte[ebx+eax*4-1],#12  ;#00463C9F: 200174203 FF 12            u  00 09  2  84      
;   153             jne :e1413sopa
                    jne #00463BF8         ;#00463CA4: 017205 4EFFFFFF            v  00 00  1  85      
;   154             fld qword[ebx+eax*4]
                    fld qword[ebx+eax*4]  ;#00463CAA: 335004203                  np 00 09  1  86      
;   155       @@:
;   156 
;   157 --    ::opPowNN
;   158         fldz
                fldz                      ;#00463CAD: 331356                     np 00 00  2  87      
;   159         fcomp
                fcomp                     ;#00463CAF: 330331                     np 00 00  1  89      
;   160         fnstsw ax
                fnstsw ax                 ;#00463CB1: 337340                     np 01 00  6  90      
;   161 --DEV  test ah,0x41 jz (C=0 and Z=0 for ja), not sure any help since wd need test ah,0x40 next...
;   162         sahf
                sahf                      ;#00463CB3: 236                        np 00 01  2  96      
;   163         ja :opPowP2neg      -- jump if 0 > (above) p2
                ja #00463D29              ;#00463CB4: 167 73                     v  00 00  1  98      
;   164         fxch
                fxch                      ;#00463CB6: 331311                     np 00 00  1  99      
;   165         jne @f              -- if p2=0 then:
                jne #00463CD3             ;#00463CB8: 165 19                     v  00 00  1 100      
;   166             fldz
                    fldz                  ;#00463CBA: 331356                     np 00 00  2 101      
;   167             fcompp
                    fcompp                ;#00463CBC: 336331                     np 00 00  1 103      
;   168             fnstsw ax
                    fnstsw ax             ;#00463CBE: 337340                     np 01 00  6 104      
;   169 --DEV test ah,0x01/jnz (C=1 for jb)
;   170             sahf
                    sahf                  ;#00463CC0: 236                        np 00 01  2 110      
;   171             jb :%pStoreFlt
                    jb #0046388C (:%pStoreFlt)  ;#00463CC1: 017202 C5FBFFFF            v  00 00  1 112      
;   172 --          jmp :e102cr0tple0   -- cannot raise 0 to power<=0
;   173             pop edx
                    pop edx               ;#00463CC7: 132                        uv 04 00  1 113      
;   174             mov al,102          -- e102cr0tple0: cannot raise 0 to power<=0
                    mov al,102            ;#00463CC8: 260 66                     vu 01 00  1 113      
;   175             sub edx,1
                    sub edx,1             ;#00463CCA: 203352 01                  uv 04 04  1 114      
;   176             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00463CCD: 351 97010000               v  00 00  1 114      
;   177             int3
                    int3                  ;#00463CD2: 314                        np 00 00 13 115      
;   178       @@:
;   179         fxch
                fxch                      ;#00463CD3: 331311                     np 00 00  1 128      
;   180       ::opPowP3even
;   181         fyl2x               -- st1*=log2(st0); pop st0. st0 must be >0 ; ie log2(p2)*p3
                fyl2x                     ;#00463CD5: 331361                     np 00 00 103 129      
;   182         fld st0             -- duplicate st0
                fld st0                   ;#00463CD7: 331300                     np 00 00  1 232      
;   183         frndint             -- round it to an integer   ;DEV SLOW!
                frndint                   ;#00463CD9: 331374                     np 00 00 20 233      
;   184         fsub st1,st0        -- leave only fractional portion in st1
                fsub st1,st0              ;#00463CDB: 334351                     np 00 00  3 253      
;   185         fxch st1            -- st1=int(p2*log2(p3)); st0=p2*log2(p3)-st1
                fxch                      ;#00463CDD: 331311                     np 00 00  1 256      
;   186         f2xm1               -- get the fractional power of 2 (minus 1). st0 = 2^^st0-1 st0 must be in the range -1.0 to +1.0
                f2xm1                     ;#00463CDF: 331360                     np 00 00 57 257      
;   187         fld1
                fld1                      ;#00463CE1: 331350                     np 00 00  2 314      
;   188         faddp               -- get rid of that minus 1
                faddp st1,st0             ;#00463CE3: 336301                     np 00 00  3 316      
;   189         fscale              -- multiply by 2^int(p2*log2(p3)) ; similar to shl 2 being same as mul 4
                fscale                    ;#00463CE5: 331375                     np 00 00 32 319      
;   190 
;   191       ::opPowCont
;   192         fxch
                fxch                      ;#00463CE7: 331311                     np 00 00  1 351      
;   193         fstp st0            -- discard junk
                fstp st0                  ;#00463CE9: 335330                     np 00 00  1 352      
;   194 --  mov edx,edi
;   195 -- 30/1:
;   196     -- check for under/overflow:
;   197 --  cmp [sferr],0
;   198 --  je @f
;   199 --  mov [sferr],0
;   200 --minatm        dq 0xFFEFFFFFFFFFFFFF   ; -1.7976931348623146e308
;   201 --maxatm        dq 0x7FEFFFFFFFFFFFFF   ; +1.7976931348623146e308
;   202 --DEV test this!
;   203         push 0xFFEFFFFF
                push -1048577             ;#00463CEB: 150 FFFFEFFF               uv 00 00  1 353      
;   204         push -1
                push -1                   ;#00463CF0: 152 FF                     vu 00 00  1 353      
;   205 --  fld qword[minatm]
;   206         fld qword[esp]  -- minatm 
                fld qword[esp]            ;#00463CF2: 335004044                  np 00 10  1 354      
;   207         fcomp
                fcomp                     ;#00463CF5: 330331                     np 00 00  1 355      
;   208         fnstsw ax
                fnstsw ax                 ;#00463CF7: 337340                     np 01 00  6 356      
;   209 --DEV Agner sez (look this up!) test ax,0x40 jz StoreFlt64 (nb test inverted)
;   210 --  sahf
;   211 --  ja e34pfu           -- power function underflow
;   212         test ah,0x41
                test ah,65                ;#00463CF9: 366304 41                  uv 00 01  1 362      
;   213         jz :e34pfu          -- power function underflow
                jz #00463BF9              ;#00463CFC: 017204 F7FEFFFF            v  00 00  1 362      
;   214         mov dword[esp+4],0x7FEFFFFF
                mov [esp+4], dword 2146435071  ;#00463D02: 307104044 04 FFFFEF7F      uv 00 10  1 363      
;   215 --  fld qword[maxatm]
;   216         fld qword[esp]  -- maxatm
                fld qword[esp]            ;#00463D0A: 335004044                  np 00 10  1 364      
;   217         add esp,8
                add esp,8                 ;#00463D0D: 203304 08                  uv 10 10  1 365      
;   218         fcomp
                fcomp                     ;#00463D10: 330331                     np 00 00  1 366      
;   219         fnstsw ax
                fnstsw ax                 ;#00463D12: 337340                     np 01 00  6 367      
;   220 --DEV Agner sez (look this up!) test ax,0x40 jz StoreFlt64 (nb test inverted)
;   221 --  sahf
;   222 --  jae StoreFlt
;   223         test ah,0x01
                test ah,1                 ;#00463D14: 366304 01                  uv 00 01  1 373      
;   224         jz :%pStoreFlt
                jz #0046388C (:%pStoreFlt)  ;#00463D17: 017204 6FFBFFFF            v  00 00  1 373      
;   225 --      jmp :e35pfo         -- power function overflow
;   226         pop edx
                pop edx                   ;#00463D1D: 132                        uv 04 00  1 374      
;   227         mov al,35           -- e35pfo power function overflow
                mov al,35                 ;#00463D1E: 260 23                     vu 01 00  1 374      
;   228         sub edx,1
                sub edx,1                 ;#00463D20: 203352 01                  uv 04 04  1 375      
;   229         jmp :!iDiag
                jmp #00463E69 (:!iDiag)   ;#00463D23: 351 41010000               v  00 00  1 375      
;   230         int3
                int3                      ;#00463D28: 314                        np 00 00 13 376      
;   231 --  mov [sferr],1
;   232 -- @@:
;   233 
;   234 --  jmp StoreFlt
;   235 
;   236       ::opPowP2neg
;   237         fabs                -- p2 = |p2|, in this case same as *-1
                fabs                      ;#00463D29: 331341                     np 00 00  1 389      
;   238         fld st1             -- duplicate p3
                fld st1                   ;#00463D2B: 331301                     np 00 00  1 390      
;   239         frndint             -- DEV SLOW!
                frndint                   ;#00463D2D: 331374                     np 00 00 20 391      
;   240         fcom st2
                fcom st2                  ;#00463D2F: 330322                     np 00 00  1 411      
;   241         fnstsw ax
                fnstsw ax                 ;#00463D31: 337340                     np 01 00  6 412      
;   242         sahf
                sahf                      ;#00463D33: 236                        np 00 01  2 418      
;   243 --      jne :e54atrnntnip   -- attempt to raise negative number to non-integer power
;   244         je @f
                je #00463D42              ;#00463D34: 164 0C                     v  00 00  1 420      
;   245             pop edx
                    pop edx               ;#00463D36: 132                        uv 04 00  1 421      
;   246             mov al,54       -- e54atrnntnip: attempt to raise negative number to non-integer power
                    mov al,54             ;#00463D37: 260 36                     vu 01 00  1 421      
;   247             sub edx,1
                    sub edx,1             ;#00463D39: 203352 01                  uv 04 04  1 422      
;   248             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00463D3C: 351 28010000               v  00 00  1 422      
;   249             int3
                    int3                  ;#00463D41: 314                        np 00 00 13 423      
;   250       @@:
;   251         sub esp,4
                sub esp,4                 ;#00463D42: 203354 04                  uv 10 10  1 436      
;   252         fistp dword[esp]
                fistp dword[esp]          ;#00463D45: 333034044                  np 00 10  6 439    *10*
;   253         pop eax
                pop eax                   ;#00463D48: 130                        uv 01 00  1 445      
;   254         shr eax,1
                shr eax,1                 ;#00463D49: 321350                     u  01 01  1 446      
;   255         jnc :opPowP3even
                jnc #00463CD5             ;#00463D4B: 163 88                     v  00 00  1 446      
;   256         fyl2x               -- st1*=log2(st0); pop st0. st0 must be >0 ; ie log2(p2)*p3
                fyl2x                     ;#00463D4D: 331361                     np 00 00 103 447      
;   257         fld st0             -- duplicate st0
                fld st0                   ;#00463D4F: 331300                     np 00 00  1 550      
;   258         frndint             -- round it to an integer   ; DEV SLOW!
                frndint                   ;#00463D51: 331374                     np 00 00 20 551      
;   259         fsub st1,st0        -- leave only fractional portion in st1
                fsub st1,st0              ;#00463D53: 334351                     np 00 00  3 571      
;   260         fxch st1            -- st1=int(p2*log2(p3)); st0=p2*log2(p3)-st1
                fxch                      ;#00463D55: 331311                     np 00 00  1 574      
;   261         f2xm1               -- get the fractional power of 2 (minus 1). st0 = 2^^st0-1 st0 must be in the range -1.0 to +1.0
                f2xm1                     ;#00463D57: 331360                     np 00 00 57 575      
;   262         fld1
                fld1                      ;#00463D59: 331350                     np 00 00  2 632      
;   263         faddp               -- get rid of that minus 1
                faddp st1,st0             ;#00463D5B: 336301                     np 00 00  3 634      
;   264         fscale              -- multiply by 2^int(p2*log2(p3)) ; similar to shl 2 being same as mul 4
                fscale                    ;#00463D5D: 331375                     np 00 00 32 637      
;   265         fchs                -- change sign!
                fchs                      ;#00463D5F: 331340                     np 00 00  1 669      
;   266         jmp :opPowCont       
                jmp #00463CE7             ;#00463D61: 353 84                     v  00 00  1 670      
;   267     [64]
;   268         --calling convention:
;   269         --  lea rdi,[p1]        -- target
;   270         --  mov rcx,[p3]        -- ref p3 (opUnassigned)
;   271         --  mov rax,[p2]        -- ref p2 (opUnassigned)
;   272         --  call :%opPow        -- [rdi] := power(rax,rcx)
;   273         --    all registers trashed unless result is integer, left in rax
;   274 
;   275         mov r15,h4
;   276         -- handle power(2,0..61) as 1 shl cl. (29..61 untested!)
;   277         cmp rax,2
;   278         jne :notPow2
;   279         cmp rcx,61
;   280         ja :notPow2
;   281         mov rax,1
;   282         mov rdx,[rdi]
;   283         shl rax,cl
;   284       ::opPowRet
;   285         cmp rdx,r15
;   286         mov [rdi],rax
;   287         jle @f
;   288             sub qword[rbx+rdx*4-16],1
;   289             jz :%pDealloc
;   290       @@:
;   291         ret
;   292 
;   293       ::notPow2
;   294 
;   295         -- handle power(x,0) as 1, except for power(0,0) and power(<seq>,0) which are errors
;   296         test rcx,rcx
;   297         jnz :notPow0
;   298         -- 3/11/15 let power(0,0) be 1
;   299 --      test rax,rax
;   300 --      jz :e102cr0tple0
;   301         cmp rax,r15
;   302         jl @f
;   303             cmp byte[rbx+rax*4-1],0x12
;   304             jne :e1413sopa
;   305       @@:
;   306         mov rdx,[rdi]
;   307         mov rax,1
;   308         jmp :opPowRet
;   309     
;   310       ::notPow0
;   311 
;   312 --DEV new valid int range not yet done...
;   313         -- power(-177..177,1..4) can be done using mul to give an integer result...
;   314 --PL: 46340^4/73^10/10^17:
;   315         cmp rcx,4
;   316         mov rdx,-46340
;   317         jbe :testrdx
;   318 --      cmp rcx,10
;   319 --      mov rdx,-73
;   320 --      jbe :testrdx
;   321 --22/2/24:
;   322 --      cmp rcx,17
;   323         cmp rcx,18
;   324         mov rdx,-10
;   325         ja :notIntRes
;   326 --      cmp rax,-177
;   327       ::testrdx
;   328         cmp rax,rdx
;   329         jl :notIntRes
;   330 --      cmp rax,177
;   331         neg rdx
;   332         cmp rax,rdx
;   333         jg :notIntRes
;   334 
;   335         mov rsi,rax
;   336         mov rdx,[rdi]
;   337         sub rcx,1
;   338         jz :opPowRet
;   339       ::IntPowMulLoop
;   340         imul rsi
;   341         sub rcx,1
;   342         jnz IntPowMulLoop
;   343         mov rdx,[rdi]
;   344         jmp :opPowRet
;   345 
;   346       ::notIntRes
;   347         cmp rcx,r15
;   348         jge :opPowp3Flt
;   349             push rcx
;   350             fild qword[rsp]
;   351             add rsp,8
;   352             jmp @f
;   353       ::opPowp3Flt
;   354             cmp byte[rbx+rcx*4-1],0x12
;   355             jne :e1413sopa
;   356             fld tbyte[rbx+rcx*4]
;   357       @@:
;   358         cmp rax,r15
;   359         jge :opPowp2Flt
;   360             push rax
;   361             fild qword[rsp]
;   362             add rsp,8
;   363             jmp @f
;   364       ::opPowp2Flt
;   365             cmp byte[rbx+rax*4-1],0x12
;   366             jne :e1413sopa
;   367             fld tbyte[rbx+rax*4]
;   368       @@:
;   369 
;   370 --    ::opPowNN
;   371         fldz
;   372         fcomp
;   373         fnstsw ax
;   374 --DEV  test ah,0x41 jz (C=0 and Z=0 for ja), not sure any help since wd need test ah,0x40 next...
;   375         sahf
;   376         ja :opPowP2neg      -- jump if 0 > (above) p2
;   377         fxch
;   378         jne @f              -- if p2=0 then:
;   379             fldz
;   380             fcompp
;   381             fnstsw ax
;   382 --DEV test ah,0x01/jnz (C=1 for jb)
;   383             sahf
;   384             jb :%pStoreFlt
;   385 --          jmp :e102cr0tple0   -- cannot raise 0 to power<=0
;   386             pop rdx
;   387             mov al,102          -- e102cr0tple0: cannot raise 0 to power<=0
;   388             sub rdx,1
;   389             jmp :!iDiag
;   390             int3
;   391       @@:
;   392         fxch
;   393       ::opPowP3even
;   394         fyl2x               -- st1*=log2(st0); pop st0. st0 must be >0 ; ie log2(p2)*p3
;   395         fld st0             -- duplicate st0
;   396         frndint             -- round it to an integer   ;DEV SLOW!
;   397         fsub st1,st0        -- leave only fractional portion in st1
;   398         fxch st1            -- st1=int(p2*log2(p3)); st0=p2*log2(p3)-st1
;   399         f2xm1               -- get the fractional power of 2 (minus 1). st0 = 2^^st0-1 st0 must be in the range -1.0 to +1.0
;   400         fld1
;   401         faddp               -- get rid of that minus 1
;   402         fscale              -- multiply by 2^int(p2*log2(p3)) ; similar to shl 2 being same as mul 4
;   403 
;   404       ::opPowCont
;   405         fxch
;   406         fstp st0            -- discard junk
;   407         -- check for under/overflow:
;   408 --DEV test this!
;   409         mov rax,0x0000FFFE
;   410         mov rcx,-1
;   411         push rax
;   412         push rcx
;   413         fld tbyte[rsp]  -- minatm 
;   414         fcomp
;   415         fnstsw ax
;   416 --DEV Agner sez (look this up!) test ax,0x40 jz StoreFlt64 (nb test inverted)
;   417 --  sahf
;   418 --  ja e34pfu           -- power function underflow
;   419         test ah,0x41
;   420         jz :e34pfu          -- power function underflow
;   421         mov rax,0x00007FFE
;   422         mov [rsp+8],rax
;   423         fld tbyte[rsp]  -- maxatm
;   424         add rsp,16
;   425         fcomp
;   426         fnstsw ax
;   427 --DEV Agner sez (look this up!) test ax,0x40 jz StoreFlt64 (nb test inverted)
;   428 --  sahf
;   429 --  jae StoreFlt
;   430         test ah,0x01
;   431         jz :%pStoreFlt
;   432 --      jmp :e35pfo         -- power function overflow
;   433         pop rdx
;   434         mov al,35           -- e35pfo power function overflow
;   435         sub rdx,1
;   436         jmp :!iDiag
;   437         int3
;   438 
;   439 --  mov [sferr],1
;   440 -- @@:
;   441 
;   442 --  jmp StoreFlt
;   443 
;   444       ::opPowP2neg
;   445         fabs                -- p2 = |p2|, in this case same as *-1
;   446         fld st1             -- duplicate p3
;   447         frndint             -- DEV SLOW!
;   448         fcom st2
;   449         fnstsw ax
;   450         sahf
;   451 --      jne :e54atrnntnip   -- attempt to raise negative number to non-integer power
;   452         je @f
;   453             pop rdx
;   454             mov al,54       -- e54atrnntnip: attempt to raise negative number to non-integer power
;   455             sub rdx,1
;   456             jmp :!iDiag
;   457             int3
;   458       @@:
;   459         sub rsp,8
;   460         fistp qword[rsp]
;   461         pop rax
;   462         shr rax,1
;   463         jnc :opPowP3even
;   464         fyl2x               -- st1*=log2(st0); pop st0. st0 must be >0 ; ie log2(p2)*p3
;   465         fld st0             -- duplicate st0
;   466         frndint             -- round it to an integer   ; DEV SLOW!
;   467         fsub st1,st0        -- leave only fractional portion in st1
;   468         fxch st1            -- st1=int(p2*log2(p3)); st0=p2*log2(p3)-st1
;   469         f2xm1               -- get the fractional power of 2 (minus 1). st0 = 2^^st0-1 st0 must be in the range -1.0 to +1.0
;   470         fld1
;   471         faddp               -- get rid of that minus 1
;   472         fscale              -- multiply by 2^int(p2*log2(p3)) ; similar to shl 2 being same as mul 4
;   473         fchs                -- change sign!
;   474         jmp :opPowCont       
;   475     []
;   476       }
;   477 
;   478 --SUG:
;   479 --/*
;   480 "Matt C." <spam...@crayne.org> wrote in message 
;   481 news:n4ags05qqkh84ivon1s5n8t2go5f2k978j@4ax.com...
;   482 - show quoted text -
;   483 Here is some code which will handle the exponentation x^y where y is a 
;   484 positive integer or zero. Extrapolation to negative integers is easy: take 
;   485 the reciprocal of x if y is negative and then take the absolute value of y. 
;   486 If you need fractional exponents, then Terje's method is probably best.
;   487 
;   488 double exp(double base, unsigned int exp)
;   489 {
;   490  double acc = 1.0;
;   491 
;   492  while(exp > 0)
;   493  {
;   494   if (exp & 1)
;   495    acc *= base;
;   496   base *= base;
;   497   exp >>= 1;
;   498  }
;   499 
;   500  return acc;
;   501 }
;   502 
;   503 This code will not lose any bits of precision except what is inherent in 
;   504 floating-point. A simple assembly translation:
;   505 
;   506 _exp:
;   507  fld1
;   508  fld qword [esp+4]
;   509  mov eax, [esp+12]
;   510 
;   511  ; st1 = acc
;   512  ; st0 = base
;   513  test eax, eax
;   514  jz .done
;   515 
;   516 .top:
;   517  shr eax, 1
;   518  jnc .skip
;   519  fmul st1, st0
;   520 
;   521 .skip:
;   522  fmul st0, st0
;   523  jnz .top
;   524 
;   525 .done:
;   526  ffreep st0
;   527  ; st0 = acc
;   528  ret
;   529 
;   530 If you're after speed, unrolling that should give a significant speed gain. 
;   531 The critical path is going to be 32 FP multiplies which is 160 cycles on a 
;   532 P4. You can cut that to 128 (20% faster) if you use SSE/SSE2 instead. The 
;   533 disadvantage to SSE/SSE2 is limited compatibility.
;   534 
;   535 -Matt
;   536 
;   537 Assuming unpredictable bit patterns in the exponent, a branchless 
;   538 version might be faster:
;   539 
;   540    mov eax,[exp]                ; Exponent
;   541    fld1                        ; Accumulator, return value if (exp==0)
;   542    fld [base]                ; Current power of base
;   543    test eax,eax                ; exp > 0 ?
;   544     jz done
;   545 next:
;   546    fld1                        ; Multiplicator for zero power
;   547    shr eax,1                ; Sets carry if (exp & 1), zero flag if done
;   548 
;   549    fcmovc st,st(1)        ; Overwrite 1.0 with base^power if carry
;   550 
;   551    fmulp st(2),st        ; acc *= (exp & 1)? base : 1.0;
;   552    fmul st,st                ; base *= base;
;   553     jnz next
;   554 done:
;   555    fstp st                ; FPOP to get rid of base power
;   556    ret
;   557 
;   558 Since the two multiplications are independent, this version could run in 
;   559 just one or two cycles more than the time for a single FMUL, and do so 
;   560 without any lost time due to branches.
;   561 
;   562 --*/
;   563 
    jmp #00462C8F (:%opRetf)              ;#00463D63: 351 27EFFFFF               v  00 00  1 671      
;C:\Phix\builtins\VM\pHeap.e:
;============================
;     1 --
;     2 -- pHeap.e
;     3 -- =======
;     4 --
;     5 -- Practical note: You should never really need to read this. If you are happy (for now)
;     6 --  to say "it is a programming language: it /knows/ how to deal with strings, and it 
;     7 --  /knows/ how to deal with floating-point numbers", my advice is leave this well alone.
;     8 --  Mind you, the "Memory Use At The Lowest Level" stuff is probably worthwhile skimming,
;     9 --  but even I do not trouble myself to remember the precise details of all of it.
;    10 --
;    11 --DEV/SUG:
;    12 --  Running an strace on ./phix demo/pGUI/gears.exw creates a report with 140,000 getpid() in it.
;    13 --  That is almost certainly from pThread.e/pGetThread; it is probably worth making pStack.e save
;    14 --  it in vsb_root+nn (and duplicate it when a new vsb is created), at least temporarily, and in
;    15 --  fact no reason not to do the same for kernel32/GetCurrentThreadId calls, and then pGetThread
;    16 --  could be inlined/removed (taking the opportunity to alleviate any AGI stalls).
;    17 --  There are really only 4 places it is called (6 if you account for 32/64 bit), and while
;    18 --  you're at it, you could also (on Windows) try the mov eax,fs:[0x24] thing.
;    19 --
;    20 -- Technical note
;    21 -- ==============
;    22 --  Low-level errors in this code are almost always extremely serious and mapping them
;    23 --  to some hll source code line is not typically very helpful. For instance a heap
;    24 --  corruption is quite likely to be detected on some subsequent and entirely innocent
;    25 --  statement, and pointing the programmer at that will often hinder rather than help.
;    26 --  [update: as this matures, it seems that showing both might be increasingly useful]
;    27 --  These routines are written in a "fast fail" style.
;    28 --
;    29 --
;    30 -- The point of a heap manager is to scale effortlessly when it allocates /billions/ of
;    31 --  small blocks of memory, and allow them to be freed and re-used in any order, all in
;    32 --  a thread-safe manner, which is a decidedly non-trivial task. I am extremely proud of 
;    33 --  the code below, and believe it is very clean and efficient, considering the task it 
;    34 --  must do, but can hardly claim it is "simple". On that note, it is highly likely that 
;    35 --  the odd bug remains, although by its very nature it is the most extensively tested 
;    36 --  part of Phix. Any improvements are always welcome, of course.
;    37 --
;    38 --
;    39 -- Low-level memory access. Except for integers and a few constants, everything in Phix
;    40 --  gets stored in the heap, so an efficient heap manager is crucial to performance.
;    41 --  While newer versions of Windows (allegedly) come with a start-of-the-art allocator, 
;    42 --  previous verions were less than ideal, and Linux does not supply a heap manager at 
;    43 --  all. (Reference: http://x86asm.net/articles/memory-allocation-in-linux/index.html )
;    44 --  I looked at a few existing heap managers, but of course none are written in Phix, 
;    45 --  and besides, what works for (eg) C++ is not necessarily the best fit here. 
;    46 --  Further reading:
;    47 --   http://gee.cs.oswego.edu/dl/html/malloc.html (found after this was written)
;    48 -- As well as dealing with internal/implicit memory requirements, this also implements 
;    49 --  thread-safe and cross-platform allocate() and free(). The externally exposed asm 
;    50 --  entry points are: :%pAllocStr, :%pAllocSeq, :%pStoreFlt, :%pStoreMint, :%pLoadMint, 
;    51 --  :%pAlloc, :%pFree, :%pDealloc[0], :%pInitCS, :%pDeleteCS, :%pEnterCS, :%pLeaveCS,
;    52 --  plus :%pGetPool and :%pFreePool, but they should really only be used by pStack.e,
;    53 --  and pApnd.e (:%pFreePool only)
;    54 --  The trivial :%pGetpGtcb is also available should you need/want it.
;    55 --DEV
;    56 --  There may also need to be a :%pTerminateThread entry point for orphan handling.
;    57 --
;    58 -- TODO: * performance tests * [DEV]
;    59 --
;    60 -- Terminology
;    61 -- ===========
;    62 --  While this may yet make little sense, there are two types of memory block:
;    63 --  a) thread control blocks - used exclusively by these routines, one per thread.
;    64 --  b) superblocks - contain externally useable memory (eg "allocate(10)")
;    65 --  NB: All talk of thread safety in this program has nothing whatsoever to do with 
;    66 --  the thread safety of data /within/ the memory blocks it provides. In particular, 
;    67 --  increasing and decreasing reference counts on shared objects by multiple threads 
;    68 --  is an application-level issue that requires explicit application-level locking.
;    69 --  (eg see enter_cs() which is implemented via :%pEnterCS below)
;    70 --
;    71 --
;    72 -- Memory Use At The Lowest Level.
;    73 -- ==============================
;    74 --  This is actually utterly irrelevant to the heap manager, but it may be helpful to
;    75 --  properly understand exactly what (most) things it deals with are being used for.
;    76 --  Besides, a heap manager that does not yield "useful" sizes is no good to anyone.
;    77 --  Of course, memory obtained through allocate() can be used for whatever you want.
;    78 --
;    79 --  All memory blocks/allocations are at least dword-aligned, which means the address 
;    80 --  ends in 0b00 and right shifting two places does not cause any loss of information. 
;    81 --  Phix stores (31-bit) integers in the range -1073741824..1073741823, ie #C0000000..
;    82 --  #3FFFFFFF, ie leading bits 0b11 or 0b00, in a single dword. The special value h4,
;    83 --  or #40000000, means "unassigned", and anything above that (beginning 0b01) is a
;    84 --  2-bit-shifted raw address. For example, a hll variable containing #00000001 is 
;    85 --  just 1, whereas #40120021 is a ref pointing to memory at #00480084 - the shift 
;    86 --  effectively discards the leading #4/first two bits and puts back the 0b00 ending.
;    87 --  In practice we almost always scale (*4) rather than shift for performance reasons, 
;    88 --  but the net effect is exactly the same, including those first and last two bits.
;    89 --  Assuming something like "mov reg,[var]; cmp reg,h4; jl :isInt" has just occurred 
;    90 --  (the compiler may omit the load if it knows [var] is already in a reg, and the 
;    91 --  cmp/jmp if it is not integer, and is assigned, eg after "if not integer(var)"):
;    92 --
;    93 --  Floats are stored (on 32-bit) as
;    94 --      refcount @ dword[reg*4-8]
;    95 --      type #12 @ byte[reg*4-1]        plus 3 bytes used by delete_routine
;    96 --      f64      @ qword[reg*4]         as a 64-bit float (-1e308..+1e308)
;    97 --      total 16 bytes. On 64-bit two qwords and a tbyte(/f80) make it 26 bytes,
;    98 --                      which is rounded up to 28 to keep things dword-aligned.
;    99 --
;   100 --  Strings are stored as
;   101 --      maxlen   @ dword[reg*4-16]      actual allocated size in bytes
;   102 --      length   @ dword[reg*4-12]      in bytes/chars, not including null
;   103 --      refcount @ dword[reg*4-8]
;   104 --      type #82 @ byte[reg*4-1]        plus 3 bytes used by delete_routine
;   105 --      data     @ byte[reg*4]          ansi, UTF8, or even raw binary/WideString
;   106 --      char[i]  @ byte[reg*4+i-1]
;   107 --      null     @ byte[reg*4+length]   must always be present
;   108 --      header size is 16 bytes. 64-bit header is 32 bytes, but still 8-bit chars.
;   109 --
;   110 --  Sequences are stored as
;   111 --      slack    @ dword[reg*4-20]      bytes spare before header, initially 0
;   112 --      maxlen   @ dword[reg*4-16]      actual allocated size in bytes
;   113 --      length   @ dword[reg*4-12]      in dwords (qwords on 64-bit)
;   114 --      refcount @ dword[reg*4-8]
;   115 --      type #80 @ byte[reg*4-1]        plus 3 bytes used by delete_routine
;   116 --      elements @ dword[reg*4]         dword ints/refs
;   117 --      item[i]  @ dword[reg*4+i*4-4]
;   118 --      header size is 20 bytes. On 64-bit header is 40 bytes, with qword elements.
;   119 --
;   120 --  By making ref*4 locate the raw data, rather than the start of the header, we not only have
;   121 --  common/consistent offsets to data/type/refcount/length/maxlen, but also cause the special 
;   122 --  "unassigned" value of #40000000 (aka h4) to equate to a raw address of 0, which, quite 
;   123 --  apart from probably being used for something else or a "null pointer trap" by the OS, 
;   124 --  would make type/refcount etc negative/wrapped, ie it makes h4 patently/doubly invalid.
;   125 --  On 64-bit, type/refcount/length/maxlen/slack are [reg*4-1/16/24/32/40] respectively.
;   126 --
;   127 --  As noted above, a delete_routine index (see pDelete.e) may be stored in the remaining 3 
;   128 --  bytes of the type dword [at -4] (or 7 bytes of the type qword [at -8] on 64-bit).
;   129 --
;   130 --  As you can see, for floats the required size is always 16 bytes, 8 bytes of which are header.
;   131 --  Strings and sequences are allocated blocks of 32,64,128,etc, 16/20 bytes of which are header.
;   132 --  A zero-length string still needs a null terminator and thus does not fit in a 16 byte block.
;   133 --  Likewise, on 64-bit, you cannot fit a 32/40 byte header in 28 bytes, hence for both 32-bit
;   134 --  and 64-bit, chain[1]s only contain floats, and small allocate()ions, (which may become a bit 
;   135 --  clearer later on, and turns out to have little or no significance, except in the tables).
;   136 --  Update: There is a subtle implication for 64-bit here, that means qword-sequences are always 
;   137 --  qword-aligned (as long as the superblock was), ditto strings, which suits us just fine.
;   138 --
;   139 --  When strings/sequences are initially created, any spare space is at the end, and as long as
;   140 --  the refcount is 1 and we are doing a=append(a,b) style where b!=a, it may be done in situ.
;   141 --  Strings are always stored "hard left", with any spare space [maxlen-length-17] at the end.
;   142 --  Slice operations such as x=x[i..j] on dword-sequences with a refcount of 1 are permitted to 
;   143 --  move the header in situ, and set slack accordingly. A prepend operation (see VM/pApnd.e)
;   144 --  which finds slack of zero asks for a larger size and re-plants the header smack in the middle
;   145 --  of the newly allocated space, to cater for both subsequent append and prepend operations. If
;   146 --  prepend finds slack non-zero (and the refcount set to 1) it can move the 20-byte header left 
;   147 --  by 4 bytes (and reduce slack by 4), hence minimising the amount of data which must be moved. 
;   148 --  Append operations on dword-sequences must therefore check the length against (maxlen-slack), 
;   149 --  if there is no more space on the rhs it just creates a new "hard left" sequence.
;   150 --  Incidentally, any slack value not ending in 0b00 should immediately trigger an error.
;   151 --
;   152 --  Note that top-notch performance of prepend/slice on long strings has been deliberately 
;   153 --  sacrificed for the sake of significant speed gains elsewhere, whereas the performance of 
;   154 --  prepend/slice on dword-sequences is not compromised. By slice I specifically mean s=s[i..j]
;   155 --  when that could theoretically be done "in situ", rather than all forms of slices. For fast 
;   156 --  prepend/slice on strings you would need a "base" pointer in the string header to allow the 
;   157 --  text to start on an odd byte boundary, that is rather than move every byte just because you 
;   158 --  prepended one or more bytes to the start, but of course that would make all other operations 
;   159 --  on strings slower, and prevent passing the raw data to c_func etc. Some applications might 
;   160 --  therefore benefit from using dword-sequences instead of strings, by the simple technique of 
;   161 --  initialising to {} instead of "", or deliberately appending and then removing (say) a -1,
;   162 --  or, recommended if at all possible, reworked to use append in preference to prepend.
;   163 --
;   164 --  The maxlen is actually the total allocated space expressed in bytes, and is perhaps incorrectly 
;   165 --  named, equating to maximum length+17 for strings and maximum length*4+20 for dword-sequences. 
;   166 --  (Of course, actlen would have been a better name, but there is little point changing it now.)
;   167 --  On 64-bit those become maximum length+33 and maximum length*8+40 respectively.
;   168 --  For strings, (which must be dword-aligned) there is never any space at the start, for space at 
;   169 --  the end we must test whether (length+17)<maxlen (note the extra 1 for the null).
;   170 --  For sequences, checking for space at the start is simply whether slack is non-zero, at 
;   171 --  the end test whether (slack+(length*4)+20)<maxlen (again, slack is expressed in bytes).
;   172 --
;   173 --  Specifically note that when freeing a float, subtract 8, when freeing a string, subtract 16,
;   174 --  and when freeing a dword_sequence, subtract [slack]+20, that is, in order to obtain the proper 
;   175 --  "block start address" that a [ie this] heap manager has any chance of understanding. Of course
;   176 --  those numbers become 16/32/40 in 64-bit code.
;   177 --
;   178 --  The heap manager may also place additional fields before and after the above, for various 
;   179 --  housekeeping and/or corruption detection purposes. Note that the heap manager is heavily
;   180 --  biased towards faster performance, rather than absolute minimum memory consumption, not
;   181 --  that it chooses to be deliberately wasteful of course, but it is fair to say that using the
;   182 --  "doubling" method, described next, means that on average just shy of 25% of all allocated 
;   183 --  memory will technically not be in use, which (imho) is perfectly reasonable. By "on average"
;   184 --  I mean in the "mid-run" state, obviously at startup and should it go idle, expect high 90s.
;   185 --  Of course if anyone finds a better scheme I'd certainly love to hear about it.
;   186 --
;   187 --
;   188 -- Heap Management.
;   189 -- ===============
;   190 --  Smaller sizes (for now assume 16,32,64,128,256,etc, but we will revise that shortly) are 
;   191 --  allocated in per-thread "superblocks", ie we grab (say) an 8K chunk and split it up into 
;   192 --  packets of smaller sizes. According to some Intel paper I read, smaller sizes 16..512 
;   193 --  account for 98% of all usage, though that was for C++. We maintain simple chains of size 
;   194 --  links, 16,32,64,..2GB, and for now assume that means about 28 such lists (60 on 64bit),
;   195 --  per thread: not entirely trivial, but nevertheless perfectly manageable.
;   196 --  
;   197 --  Now, suppose we allocate an 8K "superblock" and logically attach it to sizes[10] (similar
;   198 --  processing may occur for larger sizes), then imagine we only want 32 bytes from it. We 
;   199 --  repeatedly split the block, detaching it from sizes[10] (if we ever really put it there)
;   200 --  and leave half on sizes[9] (4K), half the rest on sizes[8] (2K), and so on right down the
;   201 --  line until we're left with the 32 bytes we need. Now, if we want another 32 byte chunk,
;   202 --  that "other half" will be immediately available in sizes[2], and if we want another, that
;   203 --  is before either becomes free, then we will scan forward, find the sizes[3] (64 bytes) we
;   204 --  have left behind, and split that, half onto sizes[2] and the other half satisfying the
;   205 --  immediate requirement. Repeated requests for 32 byte chunks might continue this splitting
;   206 --  until we have used the whole 8K, at which point there are no more sizes[] to use and we
;   207 --  allocate another 8K "superblock" and repeat the process. One small point: whenever we 
;   208 --  split a block, we know that all the half-size-freelists down to the required size must be 
;   209 --  empty/null, which may (or may not) make things just a tiny little bit easier.
;   210 --
;   211 --  Releasing memory reverses this process. Simply put, we attempt to merge odd entries with 
;   212 --  the next, and even entries with the previous, pushing things back up sizes[] as far as 
;   213 --  they will go. "Entry Padding" below explains this in excruciating detail, together with a 
;   214 --  nice little diagram. Should we successfully merge an entire block, it is returned to the 
;   215 --  global pool (see below). In practice we allocate somewhat more than 8K (see below) to 
;   216 --  prevent padding (see below) from messing up the maths.
;   217 --
;   218 --  A thread must use a global lock to obtain a superblock, but can allocate smaller elements 
;   219 --  within any block it owns without locking. To avoid contention, each thread maintains two 
;   220 --  independent free lists, one for memory it owns, which it can update without any locking, 
;   221 --  and one for non-owned-memory, which must be locked, but with a thread-specific mechanism 
;   222 --  to minimise contention. It is of course other threads that put entries onto the non-owned
;   223 --  freelist(s), and the owning thread that later comes along and recycles them. No attempt 
;   224 --  is made to merge items before they are placed on the "non-owned" list, nor is the free bit
;   225 --  set on pRoot (explained below). A key aspect of this two-list scheme is that single threaded 
;   226 --  applications need perform virtually no locking as they acquire, release, and recycle memory, 
;   227 --  and of course even in a heavily multithreaded program, the vast majority of items are freed 
;   228 --  by the same thread that allocated them, and that can also be performed without locking.
;   229 --
;   230 --  One obvious example where memory allocated by one thread gets freed by another is the main 
;   231 --  gui creating and adding to (with appropriate locking) a "to-do" list, that a worker thread 
;   232 --  can (also lock and) process/remove entries from.
;   233 --
;   234 --  When the "owned" list is empty and the "non-owned" is not, we lock, zero the non-owned 
;   235 --  pointer, unlock, and then step down the list and merge things (ie everything that has 
;   236 --  been put on the "non-owned" freelist by other threads). Such locks (on the "non-owned"
;   237 --  lists) are extremely transient, covering only 3 or 4 fast instructions/clocks.
;   238 --  
;   239 --
;   240 -- Thread Termination.
;   241 -- ==================
;   242 --  By the time a thread reaches a natural conclusion, it may have amassed quite some list
;   243 --  of "owned" memory blocks. Some or all of that memory may remain in use, it just no longer
;   244 --  has a proper owning parent. Obviously, if the thread terminates abruptly, maybe we could
;   245 --  periodically check whether GetExitCodeThread() returns STILL_ACTIVE, but there would no
;   246 --  doubt be other issues (eg local variables/refcounts) that would prevent any recovery of
;   247 --  that memory short of application shutdown. Whatever, there should be a mechanism for a
;   248 --  thread to terminate gracefully, which includes saying to these routines "here, this is
;   249 --  all my stuff, you deal with it from now on.", or at least this should not preclude such.
;   250 --  NOTE: The first (few) version(s) are unlikely to have /any/ thread termination handling. [DEV]
;   251 --
;   252 --  In practice, we really want to leave "orphaned" memory exactly where it is, both in terms
;   253 --  of where the memory physically resides (obviously) and any and all pointers to it, since
;   254 --  any attempt to relink would significantly complicate matters, especially so for locking,
;   255 --  at least, that is, until every last byte ceases to be active. As mentioned above, when a
;   256 --  block is fully merged it is returned to the global pool, and that is just as valid for 
;   257 --  active threads as the orphaned memory previously owned by now-terminated threads. All we
;   258 --  need (or can) do is place a status code on the thread control block(s) as follows:
;   259 --
;   260 --      -1: normal (thread still active, let the owner deal with it)
;   261 --      -2: orphaned (thread terminated, lock/scan/merge whenever we need a new superblock)
;   262 --              [DEV there is still nothing that ever sets this value... (apart from and
;   263 --                   not counting the thing where we decide to leave it set to -2)]
;   264 --      -3: free (this thread control block should have all null pointers, and
;   265 --                can be reused whenever we need a new thread control block.)
;   266 --      -4: the global pool (-1 would probably be just fine, but why risk confusion)
;   267 --
;   268 --  Negative numbers were chosen simply because they stand out more in diagnostic hex dumps.
;   269 --  Normal/active thread control blocks can often end up with all null pointers, but in no 
;   270 --  way does that mean they are available for anyone else to nick.
;   271 --
;   272 --  Some lock contention may occur as things are shunted in and out of the global pool, but
;   273 --  it is almost all single-item and very transient.
;   274 --
;   275 --  There is one point where the memory allocator may appear to stall. Suppose that thread A 
;   276 --  allocates 10000 items and puts them on a "to-do" list, and thread B processes and removes
;   277 --  (say) 9996 of those entries (obviously with appropriate locking). When thread A allocates 
;   278 --  another item it may process all 9996 entries in one hit, which is fine, does not hinder 
;   279 --  thread B or any other thread, and besides is likely to be a tiny fraction of the time it
;   280 --  spent doing whatever it did to make the list that big in the first place. /However/, if 
;   281 --  thread A has terminated, a lock must remain in force for the entire duration of processing 
;   282 --  those 9996 entries, which /will/ stall anything attempting to free one of the remaining 4 
;   283 --  items, and likewise, for that matter, other threads attempting to obtain a new superblock.
;   284 -- DEV:
;   285 --  While :%pTerminateThread performs a full clear out/merglist all the "not-owned" lists, in       [DEV*: this has stopped making any sense to me!!]
;   286 --  minimal locking fashion, thread A may terminate shortly after creating those 10000 items.     [or did I just mean it's not pTerminateThread's job?]
;   287 --  It is of course the single (locked) call :scan_orphans below, of which I speak.
;   288 --  (Translation: There is only one fairly rare case where the heap manager stalls any other
;   289 --                thread for anything beyond the briefest of fleeting moments.)
;   290 --
;   291 --
;   292 --  OK, so that's the theory, let's put together a practical implementation.
;   293 --
;   294 -- Superblock Header
;   295 -- =================
;   296 --  DWORD   dwMagic     -- [+0] checked for memory corruption ("SBH\0" = #00484253)
;   297 --  DWORD   dwThreadId  -- [+4] owner
;   298 --  DWORD   nsbSize     -- [+8] does not include this 20 bytes (should always be >= 10K)
;   299 --  DWORD   pTCB        -- [+12] ptr/4 to the owning Thread Control Block (see below)
;   300 --  DWORD   pNxtsb      -- [+16] next superblock
;   301 --  ==
;   302 --  20 bytes (#14)  (see below for 64-bit version)
;   303 --
;   304 -- dwThreadId is normally set from kernel32/xGetCurrentThreadId() or sys_getpid()
;   305 -- When superblocks are added to the global pool, dwThreadId is set to 0, and pTCB gets replaced.
;   306 -- Originally, pNxtsb was to be per-owner for orphaned block handling, but is now just a single chain 
;   307 --  linked from pGtcb, and really only of any use for diagnostic heap dumps (external to this code).
;   308 -- Strictly, we only really need nsbSize and pTCB here, but that would of course be harder to debug.
;   309 --
;   310 -- Entry Padding
;   311 -- =============
;   312 --  DWORD   era         -- [-8] effective return address, for diagnostics/leak checking
;   313 --  DWORD   pRoot       -- [-4] pointer to the SuperBlock Header[+1]
;   314 --                      -- 0b01 (aka bit 0): block is free
;   315 --                      -- if xor(left,right) not 0|1 then memory corruption has occurred.
;   316 --  (DWORD  nSize)      -- [+0] size (permanent for allocate()d blocks)
;   317 --  (DWORD  pNext)      -- [+4] (on free items only), next freelist link
;   318 --  (DWORD  pPrev)      -- [+8] (on owned free items only), previous freelist link
;   319 --
;   320 --  The pointer to the superblock header, together with the block size, determines whether for
;   321 --  merging purposes this is a "leftie" or "rightie". Consider the following possible memory 
;   322 --  splittings, in which the right side might be more broken up than the left, or vice versa:
;   323 --  (Obviously this represents a tiny chunk of a scheme that scales effortlessly to petabyte
;   324 --   sized blocks potentially split into trillions of float-sized fragments, and covering up
;   325 --   to 28-ish splitable/mergeable/halveable/doubleable sizes on 32-bit, 60-ish on 64-bit.)
;   326 --
;   327 --                              s   160 |       L       |
;   328 --                              i    80 |   L   |   R   |
;   329 --                              z    40 | L | R | L | R |
;   330 --                              e    20 |L|R|L|R|L|R|L|R|
;   331 --                               offset 0   40  80  120 160
;   332 --
;   333 --  A block at offset 80 is a "leftie" for sizes 20 and 40, and must look to the right to see
;   334 --  if the corresponding block is both free and the same size, whereas a block of size 80 at
;   335 --  that address is a "rightie" and must look left to see, again, if the corresponding block 
;   336 --  is both free and the same size. Clearly, if (offset/size) is odd, look left, else right. 
;   337 --  (ie/eg line 3: 0/40=0(->R), 40/40=1(->L), 80/40=2(->R), 120/40=3(->L), ...)
;   338 --
;   339 --  Just to be very clear here, consider a block of size 40 (3rd line) at offset 80: we can say 
;   340 --  with /absolute certainty/ that on the right is either another block of size 40 or two blocks
;   341 --  of size 20, but there will definitely be a valid padding at offset 120. However, should we 
;   342 --  try to look left (which we wouldn't want to do if we are trying to put things back together 
;   343 --  the same way we took them apart) then at offset 40 we might find the same, /or/ that it is 
;   344 --  slap bang in the middle of an 80, and hence might be anything, rather than a pRoot[+1].
;   345 --  Whereas a block of size 80 (2nd line) at offset 80 looking left will definitely find a pRoot
;   346 --  at offset 0, although of course it may still be in use and/or of size 20, 40, or 80.
;   347 --
;   348 --  Fairly obviously, superblock headers always lie on a dword boundary, hence we can use the 
;   349 --  low-order bit to signify free areas. Note that bit is NOT set when items are placed on the
;   350 --  "not-owned" freelists. When merging two blocks, an xor of their pRoots should be 0 or 1,
;   351 --  otherwise memory corruption has occurred. The size of a float/string/sequence can be deduced 
;   352 --  from the Phix data it contains, whereas allocate()d blocks need an explicit/permanent size.
;   353 --  nSize (except as just noted), pNext, and pPrev overlap the live data, and the doubly-linked 
;   354 --  freelist allows us to quickly snip an entry out of the sizes[n] freelist as is is merged,
;   355 --  before carrying on forwards with similar processing for sizes[n+1]. In practice we only need
;   356 --  set pPrev on the owned freelists, it isn't used on the non-owned freelists (which are picked 
;   357 --  up and merged wholesale, by the owner). Also, of course, pPrev should be 0 on the first item 
;   358 --  in the (owned) list and likewise pNext should be 0 on the last.
;   359 --
;   360 --  Note: pNext and pPrev can freely point from one superblock to another and back, and a walk
;   361 --        down a free chain (which I do not do anywhere) could quite probably re-visit several
;   362 --        superblocks several times. I expect all dwThreadId at [pRoot[-1]+4] on any one chain 
;   363 --        should match, including all fully merged blocks in the global pool, however (as yet) 
;   364 --        this code makes no attempt whatsoever to verify that. [DEV: MCHK/MLEAK/FALLOC]
;   365 --
;   366 --DEV may be slightly out of date...
;   367 --  Minor point: In practice, the nSize value on allocate()'d blocks is 4 less than it is on
;   368 --               freed blocks, which is actually (still) 4 less than the useable size, eg:
;   369 --pHeapD(??)
;   370 --<              in the table below, [1] says 20[#00000014]=4+16; so the block size (20) is
;   371 --<              the value stored on the freelists, pGetPool returns edx=16 which is stored 
;   372 --<              by pAlloc(<=12) just after pRoot (as nSize, and in exactly the same place  
;   373 --<              where pFreePool stores the value 20), before 12 bytes of useable space. 
;   374 --<              Obviously on 64-bit those numbers are more like 8<8<useable eg 36/28/20.
;   375 --               in the table below, [1] says 24[#00000018]=8+16; so the block size (24) is
;   376 --               the value stored on the freelists, pGetPool returns edx=20 which is stored 
;   377 --               by pAlloc(<=12) just after pRoot (as nSize, and in exactly the same place  
;   378 --               where pFreePool stores the value 24), before 12 bytes of useable space. 
;   379 --               Obviously on 64-bit those numbers are more like 8?<8<useable eg 36/28/20.  [DEV]
;   380 --               None of this causes any particular problems, other than mild confusion when 
;   381 --               debugging this code. Obviously I didn't consciously design it like that, but 
;   382 --               that is the way it works, and that is the way it is going to stay, not that
;   383 --               two matching tweaks to pAlloc/pFree ought be anything but trivial. [DEV oh, just sort it, once regression tests all up and running...]
;   384 --
;   385 --
;   386 -- Thread Control Blocks
;   387 -- =====================
;   388 --  DWORD       dwMagicT    -- [+0] checked for memory corruption ("TCB\0" = #00424354)
;   389 --  DWORD       dwThreadId  -- [+4] owner
;   390 --  DWORD       pNxtcb      -- [+8] next thread control block
;   391 --  DWORD       pFirst      -- [+12] first superblock
;   392 --  DWORD       nStatus     -- [+16] -1: normal, -2: orphaned, -3: free, -4: global pool
;   393 --  DWORD[27]   pFree       -- [+20] chains of owned free blocks, by size (not locked)
;   394 --  DWORD[27]   pNofl       -- [+128] ""       not-     ""                (need locks)
;   395 --  DWORD       dwMagicC    -- [+236] checked for memory corruption ("CCB\0" = #00424343)
;   396 --  BYTE[24]    csLock      -- [+240] critical section for locking (a dword futex on Lnx)
;   397 --< DWORD       dwMagicE    -- [+264] checked for memory corruption ("ECB\0" = #00424345)
;   398 --> DWORD       SaveEBP     -- [+264]
;   399 --> DWORD       pTLS        -- [+268]
;   400 --  DWORD       dwMagicE    -- [+272] checked for memory corruption ("ECB\0" = #00424345)
;   401 --  ===
;   402 --< 268 bytes (27*2+7)*4+24  (see below for 64-bit version)
;   403 --  276 bytes (27*2+9)*4+24  (see below for 64-bit version)
;   404 --
;   405 --  A dwThreadId of 0 indicates the global pool (kept in pGtcb), which needs extra locking, has
;   406 --  an nStatus of -4, and the special properties that a) all entries in each pFree[i] chain point 
;   407 --  to <superblockheader+24> with a pRoot+0b01 and an nSize that corresponds exactly to [i]; there 
;   408 --  is never any need to do any merging within the global pool, and b) all of pNofl[] should forever 
;   409 --  be nulls. There should never be any reference [in pGtcb] to any memory that is still in use 
;   410 --  (except perhaps when there is a programming error such as an application invoking free(addr), 
;   411 --  but then continuing to use addr - you could test for bad pointers with and_bits(peek(addr-8),1), 
;   412 --  not that passing proves it is good, as it may have already been reused for something else).
;   413 --  [for a 64-bit application that test would, of course, be and_bits(peek(addr-16),1) instead, and
;   414 --   obviously any and all such tests would not port at all well to either OpenEuphoria or RDS Eu.]
;   415 --
;   416 --  As pGtcb is a hll variable and will always be dword-aligned it is stored /4 to ensure it is always 
;   417 --  an integer, and for consistency the pTCB values (on superblock headers) and pNxtcb are likewise /4, 
;   418 --  however pFirst etc are exact. [Note 64bit changes many *4 to *8, but pTCB handling remains /4|*4.]
;   419 --  While you must lock pGtcb->csLock to insert a new tcb, there should be no need for any locking by
;   420 --  other currently active threads that are just scanning the pGtcb->pNxtcb chain (there is no reason 
;   421 --  for them to be looking for the newest dwThreadId's tcb, or get upset when they cannot find it).
;   422 --  (In practice that just means updating pGtcb.pNxtcb last, after new.pNxtcb has got the old value.)
;   423 --  (Technically speaking, the creation of pGtcb itself is not thread safe, and we cannot change that,
;   424 --   since we haven't got anything we can lock until after we have created it, but it is highly unlikely 
;   425 --   that any application could get as far as CreateThread without somehow managing to initialise it.)
;   426 --
;   427 --  pFirst was originally intended to be per dwThreadId, but now everything is linked to pGtcb and it
;   428 --  should be null on all other records, and is only of any use for (external) heap dump diagnostics.
;   429 --  DEV: when/if we get Phix dlls, pFirst should probably be used to hold pGtcb...
;   430 --  dwMagicC/E can be used to check we located csLock correctly, all pointers should end with 0b00.
;   431 --  Obviously, on all superblock headers dwThreadId should match pTCB->dwThreadId (which also means
;   432 --  setting pSBH.dwThreadId to zero when transferring it to the global pool [&resetting pSBH.pTCB]).
;   433 --  
;   434 --  Possible improvements: Currently the pGtcb.pNxtcb chain is scanned to locate a dwThreadId, it may 
;   435 --                          improve matters to keep the current thread's tcb in thread local storage, 
;   436 --                          or use some other faster lookup.
;   437 --                         At startup, it hammers through ~17*2 pFree/pNofl on the thread tcb, and
;   438 --                          repeats that trick on the global pool. It might help (tracing, anyway)
;   439 --                          to have nMax holding the highest pFree/pNofl that can possibly contain
;   440 --                          anything useful. On 64-bit it's ~49*4 such checks that will all fail.
;   441 --                          Or: Init pFree with -1's, and when we allocate something, replace any
;   442 --                          lower pFree[i]s of -1 with 0s. If a scan stops on a pFree[] of -1, we
;   443 --                          know the rest of the table is empty and the same for pNofl (which is 
;   444 --                          still initialised to 0s). I'm thinking of a "js :ohnoitsallempty".
;   445 --                          To be fair, though, even saving 400 million clocks on a real-world
;   446 --                          application is unlikely to be particularly noticeable, these days.
;   447 --                         It might also be possible to detect the "startup" case, allocate an
;   448 --                          initial superblock and then obtain a tcb from within that. That could 
;   449 --                          however mean that we need to merge within the global pool, which I
;   450 --                          think would be a bad idea.
;   451 --                         We could also mark (in use) allocated blocks by setting bit #02 in pRoot,
;   452 --                          so they can be skipped by any memory leak checking code (none such yet).
;   453 --                          Obviously that means after xor(pRoots) we cmp 3 not cmp 1, before ja,
;   454 --                          and of course we need to mask out the extra bit. (ditto for pStack)
;   455 --                          [Update: I am now thinking that constant lf=allocate(sizeof(LOGFONT))
;   456 --                           w/o free should be treated as a memory leak that should be fixed.]
;   457 --                         Deferred coalescing. I have noticed this performs quite poorly when 
;   458 --                          saving 300,000-line/30MB files in Edita. This currently implements 
;   459 --                          very aggressive coalescing, even to the point of returning fully 
;   460 --                          merged blocks to the global pool, as soon as anything is freed. 
;   461 --                          One approach might be to extend pFree/pNofl to pFree/pDefc/pNofl: 
;   462 --                          at ::gpchecknextand we would check all 3, nicking a single entry
;   463 --                          off pDefc exactly as we do pFree, but on the first iteration only,
;   464 --                          ie when pDefc[idx] is 0, we also hammer back down pDefc[idx-1..1]
;   465 --                          performing the deferred coalescing, ideally stopping the moment we 
;   466 --                          have merged a block of the original required size*. It may also be 
;   467 --                          possible to utilise the spare bit on pRoot (#02) to indicate blocks 
;   468 --                          which have not been coalesced, instead of a separate pDefc list.
;   469 --                          It would clearly be quite critical that #02 blocks are kept grouped 
;   470 --                          together at the head of pFree and we can stop scanning the list (on
;   471 --                          that first iteration thing) as soon as we hit any non-#02 entry. By
;   472 --                          scanning backwards and stopping asap we /should/ avoid trying to 
;   473 --                          push any non-#02 entries ahead of #02 entries, if that makes sense..
;   474 --                          Use the pHeap.e/pHeapD.e approach (see psym/ptok). Thread termination
;   475 --                          and the like may require a temporary reversion to aggressive mode.
;   476 --
;   477 -- *some further thoughts on deferred coalescing, regarding the #02 grouping just mentioned:
;   478 --  imagine, on a clean heap, we have:
;   479 --      sequence sinTable = repeat(0,N), 
;   480 --               cosTable = repeat(0,N)
;   481 --      for i=1 to N do
;   482 --          sinTable[i] = sin(theta)
;   483 --          cosTable[i] = cos(theta)
;   484 --          theta += something
;   485 --      end for
;   486 --  and then we:
;   487 --      sinTable = {}
;   488 --  The result? pFree[1] has N odd floats that cannot be coalesced, since cosTable is still
;   489 --  using the pairing N even floats. N can quite easily be very large (30,000 or more). We
;   490 --  must ensure we do not needlessly re-traverse that 30,000 long chain (once is enough), by
;   491 --  not adhering to the rule that all #02 entries must be at the start of the list. If a 
;   492 --  pFree[2] is 0 so we deferred_coalesce(1), it must carry on down the list until it hits
;   493 --  a non-#02, rather than quit the moment it populates a #02. On the other hand, a call
;   494 --  to deferred_coalesce(1) can (and should) push #02 entries onto pFree(2), and we go back
;   495 --  up pFree[2..idx-1] doing the same. We can quit between any deferred_coalesce(N) calls,
;   496 --  but not during the middle of one. Note that #02 does not mean it /can/ be coalesced,
;   497 --  but that we haven't even looked. I am now leaning towards the pDefc list rather than 
;   498 --  the #02 bit, because of all of this.
;   499 --
;   500 -- Memory Leak Checking And Heap Diagnostics
;   501 -- =========================================
;   502 --  Every entry on the free list has a logical partner that we can examine. While that block 
;   503 --  might be further split internally, it should be enough to report on the leftmost chunk.
;   504 --
;   505 --  This approach does not locate anything in completely full superblocks, but is deemed to be 
;   506 --  good enough for our purposes - if that ever proves otherwise it should prove relatively 
;   507 --  simple to skip down the full list of superblocks (start with pGtcb.pFirst then follow the
;   508 --  pNxtsb chain) and examine offset 0 for any block with a non-0 dwThreadId that we failed to 
;   509 --  visit via the freelists. As long as we report at least one of the possibly many items in 
;   510 --  error, the assumption is made that, after the programmer has fixed that particular memory 
;   511 --  leak or corruption, the next run will show up anything else that also needs to be reported.
;   512 --
;   513 --  It also strikes me that we will need to process all pNofl at the start of all of this:
;   514 --   things like mergelist and scan_orphans may want to be made part of the optable. [DEV?]
;   515 --
;   516 --  In order to make any sense of the contents of the heap, we need to store an era (effective
;   517 --  return address), as shown above in "Entry Padding", that can later be translated into a 
;   518 --  source file/line. Note that if we find an "orphaned" block of memory there is little point
;   519 --  trying to guess whether it is/was a float/string/sequence/raw memory, especially if we are
;   520 --  suspicious that any kind of memory corruption may have happened. What we do know is where
;   521 --  the padding/era are/should be, and the block size (from whatever free list entry pairs with 
;   522 --  it), and a hex dump of the first 40 bytes (size of sequence header) or so should be enough.
;   523 --
;   524 --  Also, any such checks are only performed when interpreting, and take significant advantage 
;   525 --  of having two (or more) heaps: the initial one that compiles the source code and later on
;   526 --  runs the code that analyses the second, and a second one, only used while running the app.
;   527 --  Obviously that means we can code the potentially difficult analysis in normal hll code, and
;   528 --  not have to worry that day-to-day work vars are messing up the very thing we are looking at.
;   529 --  If we are not going to do the analysis, clearly we can stick with using just the one heap.
;   530 --  Maybe at some point the required code could be repackaged into a single "check_memory()" 
;   531 --  call that can be invoked from the very last line of an application (and when interpreted 
;   532 --  it would effectively all get done twice), so that we can (optionally) have some form of
;   533 --  this checking in a compiled program, but that is left as an exercise for the reader. [DEV did I say that better somewhere else? opposite/create a new stack to run the analysis in...]
;   534 --
;   535 --  Because existing libraries such as win32lib and arwen contain non-released memory allocations
;   536 --  such as constant lf = allocate(SIZEOF_LOGFONT), and things like call_back() allocate memory 
;   537 --  that is never released, the default is to skip all memory obtained via allocate(), which is     [BLUFF]
;   538 --  achieved by leaving the era set to 0 (or perhaps some other magic number). Alternatively we
;   539 --  could have allocate() set era but have a secondary routine, say not_freed(a), which clears 
;   540 --  the era to exclude it from subsequent checking. Checking that all allocate() calls in an 
;   541 --  application have an appropriate matching free() is for now something that may or may not be 
;   542 --  returned to at a later date. Right now this is concentrating on the quiet stuff that goes on 
;   543 --  behind the scenes pretty much all the time.
;   544 --
;   545 --  The interpret code (in p.exw/main) needs something like:    [DONE]
;   546 --
;   547 --      #ilASM{
;   548 --              ...
;   549 --              call :%pNewGtcbChain        -- (if analysing)
;   550 --              mov [ntcb4],eax             -- temp save
;   551 --              <existing call :%pNewStack still rqd>
;   552 --              <existing call(symtab[T_maintls][S_il])>
;   553 --              <existing restore ebp/esp/symtabptr>
;   554 --              mov eax,[ntcb4]
;   555 --              call :%pRestoreGtcbChain    -- (if analysing)
;   556 --              mov [ntcb4],edx             -- analyse later, in hll (and free it)
;   557 --              ...
;   558 --            }
;   559 --      check_heap(ntcb4)                   -- (if analysing)
;   560 --      <carry on with profile, -test, etc>
;   561 --
;   562 --copied from above: [DEV/dead]
;   563 --  add next/prev to pAlloc/pFree. Need to save/restore/0 pAhead with pGtcb.
;   564 --  rework pStack to use :%pAlloc/pFree, then :%pGetPool/FreePool->::pGetPool/FreePool,
;   565 --  and remove them from the optable. (AH: but :%pFreePool is used by pApnd.e)
;   566 --  code to pFree() everything on pAhead, in pCleanupAll. Create/test say FALLOC=0/1.
;   567 --  then code to scan for memory leaks, also in pCleanupAll. Proper reporting may want/
;   568 --  need to be done in pdiag; we might want to limit the number of items listed, and
;   569 --  common up with existing code therein the conversion of era-1 to file/line, plus
;   570 --  hammering down symtab collecting [S_il] addresses and sorting them into order is
;   571 --  definitely a job for hll rather than asm. Or we could scan symtab looking for the
;   572 --  largest [S_il] less than era, starting with symtab[T_maintls]. Or we could mark 
;   573 --  all alloc with a special tag/magic, and simply skip them (optionally) when checking
;   574 --  for memory leaks... Or just have an era of 0 in pAlloc.
;   575 --  DOH: let's just do memory leak checking when interpreted (only) and save the things
;   576 --  from the "opInterp", before restoring the ones used by p.exw; then we can analyse
;   577 --  things in hll code at our leisure!!!    <<--***
;   578 --</dead>
;   579 --
;   580 --
;   581 --  Note: if profiling then analysing should be turned off, otherwise there could be floats
;   582 --  as stored by opLnp[t] etc in the wrong heap/being reported as memory leaks, likewise for
;   583 --  tracing.
;   584 --
;   585 -- Revised Sizes.
;   586 -- =============
;   587 --  The initial plan of 16/32/64/128 etc byte sizes falls apart once we have entry padding. I wrote a
;   588 --  quick ditty (reproduced below) which created the following suggested sizes (for 32-bit):
;   589 --
;   590 --  idx      superblock size            block size  details             string           sequence
;   591 --  [1]                               24[#00000018]=4+4+16              n/a              n/a
;   592 --  [2]                               48[#00000030]=4+4+40              x(23)            s[5]
;   593 --  [3]                               96[#00000060]=4+4+88              x(71)            s[17]
;   594 --  [4]                              192[#000000C0]=4+4+184             x(167)           s[41]
;   595 --  [5]                              384[#00000180]=4+4+376             x(359)           s[89]
;   596 --  [6]                              768[#00000300]=4+4+760             x(743)           s[185]
;   597 --  [7]                             1536[#00000600]=4+4+1528            x(1,511)         s[377]
;   598 --  [8]                             3072[#00000C00]=4+4+3064            x(3,047)         s[761]
;   599 --  [9]                             6144[#00001800]=4+4+6136            x(6,119)         s[1,529]
;   600 -- [10]      12308[#00003014]      12288[#00003000]=4+4+12280 *         x(12,263)        s[3,065]
;   601 -- [11]      24596[#00006014]      24576[#00006000]=4+4+24568           x(24,551)        s[6,137]
;   602 -- [12]      49172[#0000C014]      49152[#0000C000]=4+4+49144           x(49,127)        s[12,281]
;   603 -- [13]      98324[#00018014]      98304[#00018000]=4+4+98296           x(98,279)        s[24,569]
;   604 -- [14]     196628[#00030014]     196608[#00030000]=4+4+196600          x(196,583)       s[49,145]
;   605 -- [15]     393236[#00060014]     393216[#00060000]=4+4+393208          x(393,191)       s[98,297]
;   606 -- [16]     786452[#000C0014]     786432[#000C0000]=4+4+786424          x(786,407)       s[196,601]
;   607 -- [17]    1572884[#00180014]    1572864[#00180000]=4+4+1572856         x(1,572,839)     s[393,209]
;   608 -- [18]    3145748[#00300014]    3145728[#00300000]=4+4+3145720         x(3,145,703)     s[786,425]
;   609 -- [19]    6291476[#00600014]    6291456[#00600000]=4+4+6291448         x(6,291,431)     s[1,572,857]
;   610 -- [20]   12582932[#00C00014]   12582912[#00C00000]=4+4+12582904        x(12,582,887)    s[3,145,721]
;   611 -- [21]   25165844[#01800014]   25165824[#01800000]=4+4+25165816        x(25,165,799)    s[6,291,449]
;   612 -- [22]   50331668[#03000014]   50331648[#03000000]=4+4+50331640        x(50,331,623)    s[12,582,905]
;   613 -- [23]  100663316[#06000014]  100663296[#06000000]=4+4+100663288       x(100,663,271)   s[25,165,817]
;   614 -- [24]  201326612[#0C000014]  201326592[#0C000000]=4+4+201326584       x(201,326,567)   s[50,331,641]
;   615 -- [25]  402653204[#18000014]  402653184[#18000000]=4+4+402653176       x(402,653,159)   s[100,663,289]
;   616 -- [26]  805306388[#30000014]  805306368[#30000000]=4+4+805306360       x(805,306,343)   s[201,326,585]
;   617 -- [27] 1610612756[#60000014] 1610612736[#60000000]=4+4+1610612728      x(1,610,612,711) s[402,653,177]
;   618 --([28] 3221225492[#C0000014] 3221225472[#C0000000]=4+4+3221225464      x(3,221,225,447) s[805,306,361]) [not possible, see below]
;   619 --                                      [#C0000000=3.00GB]
;   620 -- (The * on item 10 marks the virtual stack block size as used in pStack.e)
;   621 --
;   622 --  idx indicates the freelist entry (pFree/pNofl) [although this code uses 0,4,8...104(=26*4)]
;   623 --  superblock size includes the header and what we request from the OS (minimum 12K+20 rather than 8K)
;   624 --  The block size (critically) is the value which doubles in the above table, or, if you prefer to think 
;   625 --  the other way round, it is the value that we can halve and therefore split into two smaller blocks.
;   626 --  The details column shows padding (pRoot/era) and useable space, and by implication how to "round up".
;   627 --  The string and sequence columns show the maximum sizes the block can contain.
;   628 --
;   629 --  In the above scheme, a standard superblock can contain 512 floats, and if we assume the majority of 
;   630 --  strings are less than 71 characters long and the majority of sequences are less than 17 elements long 
;   631 --  (which is more likely to be so for table[i] than table) then a standard superblock can contain >= 128 
;   632 --  of them. All of which suggests that, on average, locking should be required less than 1% of the time.
;   633 --
;   634 --  The last entry ([28]) is shown in brackets because it would always fail, since kernel32/HeapAlloc has a 
;   635 --  hard limit of #7FFFFFFF. In practice (no doubt real-world apps would manage quite a bit less) it failed 
;   636 --  at #734CA1F8, equivalent to x(1,934,401,999) and s[483,600,499], as opposed to the values in [27] above. 
;   637 --  In adopting this scheme we are accepting an artificial limit of some 83% (75% of the theoretical limit), 
;   638 --  not that even a half-competent programmer should be thinking that hogging all possible available memory 
;   639 --  is the best way to achieve anything. Plus it kinda guarantees ~308MB should usually be available to cover 
;   640 --  diagnostics and/or any potential differences in available memory between compiled & interpreted apps,
;   641 --  at least should it fail when asked for something too big, as opposed to too many of something smaller.
;   642 --  Quick experiments on RDS Eu 2.4 and OpenEuphoria 4.1 (32-bit) gave (sequence) limits of s[483,164,865] 
;   643 --  and s[468,365,949] respectively, clearly (20%) better than the Phix dword-sequence limit, but a paltry 
;   644 --  30% of the Phix string (/byte/file size) limit.
;   645 --  
;   646 --  On a practical note, repeating the (trivial) size calculation loop on each and every allocation request
;   647 --  is actually faster than any dirty bsr-style skullduggery. (Ignore that if you don't know what it means.)
;   648 --  Testing will no doubt be limited to "if the smaller sizes all work, we can stop". Lastly, remember that 
;   649 --  explicit requests (ie allocate()) need an extra size field, so the limits for that are 12,36,84,180,372, 
;   650 --  but (thankfully) a few judiciously placed +/-12/24 allow the exact same code to be used for both).
;   651 --
;   652 --  As promised, I shall now formally declare the following limitations:
;   653 --
;   654 --      32-bit Phix does not support memory allocations over 1,610,612,728 bytes and in turn strings longer
;   655 --      than 1,610,612,711 characters or dword-sequences longer than 402,653,177. (The manual states these
;   656 --      limits as 400 million characters or 100 million elements, triple-able if allocated up front.)
;   657 --      64-bit Phix has (or more accurately is expected to have) such ludicrously high limits they are hardly 
;   658 --      worth mentioning. Oh go on then, around 5.5EB, by which I mean 5 million TB, which in 2014 is over a 
;   659 --      /billion/ quids worth of RAM (based on a 256GB SSD for 75UKP), and presumably a leccy bill that would 
;   660 --      put the LHC to shame. Another potential practical issue is the sheer weight of all that RAM (plus 
;   661 --      substrate) might tear a hole in the earth's crust, unless spread out a bit. I recently (May 2014) 
;   662 --      read that x86-64 is limited to 256TB, and Windows 7, according to wikipedia, is limited to 192GB. 
;   663 --
;   664 -- The 64-bit version of the above table is:
;   665 --  idx      superblock size            block size  details     string          sequence
;   666 --  [1]                               44[#0000002C]=8+8+26+2    n/a             n/a
;   667 --  [2]                               88[#00000058]=8+8+72      x(39)           s[4]
;   668 --  [3]                              176[#000000B0]=8+8+160     x(127)          s[15]
;   669 --  [4]                              352[#00000160]=8+8+336     x(303)          s[37]
;   670 --  [5]                              704[#000002C0]=8+8+688     x(655)          s[81]
;   671 --  [6]                             1408[#00000580]=8+8+1392    x(1,359)        s[169]
;   672 --  [7]                             2816[#00000B00]=8+8+2800    x(2,767)        s[345]
;   673 --  [8]                             5632[#00001600]=8+8+5616    x(5,583)        s[697]
;   674 --  [9]      11296[#00002C20]      11264[#00002C00]=8+8+11248 * x(11,215)       s[1,401]
;   675 -- [10]      22560[#00005820]      22528[#00005800]=8+8+22512   x(22,479)       s[2,809]
;   676 -- [11]      45088[#0000B020]      45056[#0000B000]=8+8+45040   x(45,007)       s[5,625]
;   677 -- [12]      90144[#00016020]      90112[#00016000]=8+8+90096   x(90,063)       s[11,257]
;   678 -- [13]     180256[#0002C020]     180224[#0002C000]=8+8+180208  x(180,175)      s[22,521]
;   679 -- [14]     360480[#00058020]     360448[#00058000]=8+8+360432  x(360,399)      s[45,049]
;   680 -- [15]     720928[#000B0020]     720896[#000B0000]=8+8+720880  x(720,847)      s[90,105]
;   681 -- [16]    1441824[#00160020]    1441792[#00160000]=8+8+1441776 x(1,441,743)    s[180,217]
;   682 -- [17]    2883616[#002C0020]    2883584[#002C0000]=8+8+2883568 x(2,883,535)    s[360,441]
;   683 -- [18]    5767200[#00580020]    5767168[#00580000]=8+8+5767152 x(5,767,119)    s[720,889]
;   684 --  <snip>
;   685 -- [58] 6341068275337658400[#5800000000000020] 6341068275337658368[#5800000000000000]=16+6341068275337658352  x(6,341,068,275,337,658,319)  s[792,633,534,417,207,289]
;   686 --([59]12682136550675316768[#B000000000000020]12682136550675316736[#B000000000000000]=16+12682136550675316720 x(12,682,136,550,675,316,687) s[1,585,267,068,834,414,585])
;   687 --                                                                [#B000000000000000=11.00EB]
;   688 --
;   689 -- The above assumes floats are 16 byte header and a tbyte, so 26 bytes, rounded up to 28 to keep dword-alignment,
;   690 --  strings have a 32 byte header but are still ansi/UTF8, sequences have a 40 byte header and each element is 8 
;   691 --  bytes, and the superblock header becomes 32 bytes and padding (pRoot) doubles to 16 bytes, as detailed below.
;   692 --  The allocate() limits become 20,64,152,328,680,1384, etc, similar to 32-bit, that is +16,*2 instead of *2,+16.
;   693 --  The last 10 or so entries are probably beyond any practical use, but there is little gain to removing them.
;   694 --
;   695 --
;   696 -- Just in case anyone wants to play around with these numbers a bit more, here are the quick ditties I used:
;   697 --
;   698 --  -- 32-bit:
;   699 --  atom d = 16
;   700 --  atom w
;   701 --  integer i = 2
;   702 --  while d<2*1024*1024*1024 do
;   703 --      w = (d+8)*2
;   704 --      d = w-8
;   705 --      printf(1,"-- [%d] %10d[#%08x] %10d[#%08x]=4+%d\t\tx(%,d)\ts[%,d]\n",{i,w+20,w+20,w,w,d,d-17,floor((d-20)/4)})
;   706 --      i += 1
;   707 --  end while
;   708 --  printf(1,"[#%08x=%3.2fGB]\n",{w,w/(1024*1024*1024)})
;   709 --  if getc(0) then end if
;   710 --  abort(0)
;   711 --
;   712 --  -- 64-bit:
;   713 --  -- (note that if this is run on 32-bit, the 53-bit precision of floats loses the trailing #20 [line 54+]
;   714 --  --  on the lhs, and the rhs can be out by approx 2K. Lines 58..59 shown above are from a 64-bit run.)
;   715 --  atom d = 28
;   716 --  atom w
;   717 --  integer i = 2
;   718 --  while d<8*1024*1024*1024*1024*1024*1024 do
;   719 --      w = (d+16)*2
;   720 --      d = w-16
;   721 --      printf(1,"-- [%d] %10d[#%08x] %10d[#%08x]=8+%d\tx(%,d)\ts[%,d]\n",{i,w+32,w+32,w,w,d,d-33,floor((d-40)/8)})
;   722 --      i += 1
;   723 --  end while
;   724 --  printf(1,"[#%08x=%3.2fEB]\n",{w,w/(1024*1024*1024*1024*1024*1024)})
;   725 --  if getc(0) then end if
;   726 --  abort(0)
;   727 --
;   728 -- Superblock Header (64-bit)
;   729 -- ==========================
;   730 --  DWORD   dwMagic     -- [+0] checked for memory corruption ("SBH\0" = #00484253)
;   731 --  DWORD   dwThreadId  -- [+4] owner
;   732 --  QWORD   nsbSize     -- [+8] does not include this 32 bytes (should always be >= 8K)
;   733 --  QWORD   pTCB        -- [+16] ptr/4 to the owning Thread Control Block (see below)
;   734 --  QWORD   pNxtsb      -- [+24] next superblock
;   735 --  ==
;   736 --  32 bytes (#20) - note that magic and threadId are (quite deliberately) still dwords.
;   737 --
;   738 -- Entry Padding (64-bit)
;   739 -- ======================
;   740 --  QWORD   era         -- [-16] effective return address, for diagnostics/leak checking
;   741 --  QWORD   pRoot       -- [-8] pointer to the SuperBlock Header[+1]
;   742 --                      -- 0b01 (aka bit 0): block is free
;   743 --                      -- if xor(left,right) not 0|1 then memory corruption has occurred.
;   744 --  (QWORD  nSize)      -- [+0] size (permanent for allocate()d blocks)
;   745 --  (QWORD  pNext)      -- [+8] (on free items only), next freelist link
;   746 --  (QWORD  pPrev)      -- [+16] (on owned free items only), previous freelist link
;   747 --
;   748 -- Thread Control Block (64-bit)
;   749 -- =============================
;   750 --  DWORD       dwMagicT    -- [+0] checked for memory corruption ("TCB\0" = #00424354)
;   751 --  DWORD       dwThreadId  -- [+4] owner
;   752 --  QWORD       pNxtcb      -- [+8] next tcb
;   753 --  QWORD       pFirst      -- [+16] first superblock
;   754 --  QWORD       nStatus     -- [+24] -1: normal, -2: orphaned, -3: free, -4: global pool
;   755 --  QWORD[58]   pFree       -- [+32] chains of owned free blocks, by size (not locked)
;   756 --  QWORD[58]   pNofl       -- [+496]  ""    not-      ""                 (need locks)
;   757 --  DWORD       dwMagicB    -- [+960] checked for memory corruption ("BCB\0" = #00424342)
;   758 --  DWORD       dwMagicC    -- [+964] checked for memory corruption ("CCB\0" = #00424343)
;   759 --  BYTE[40]    csLock      -- [+968] critical section for locking (a dword futex on Lnx)
;   760 --< DWORD       dwMagicE    -- [+1008] checked for memory corruption ("ECB\0" = #00424345)
;   761 --> QWORD       SaveEBP     -- [+1008]
;   762 --> QWORD       pTLS        -- [+1016]
;   763 --  DWORD       dwMagicE    -- [+1024] checked for memory corruption ("ECB\0" = #00424345)
;   764 --  ===
;   765 --< 1012 bytes - note that magic and threadId are (quite deliberately) still dwords.
;   766 --  1028 bytes - note that magic and threadId are (quite deliberately) still dwords.
;   767 --  dwMagicC can be used to check we located csLock correctly, all pointers should end 0b00
;   768 --
;   769 --
;   770 --DEV this probably belongs in the manual (ilASM), referenced here:
;   771 -- Technical note
;   772 -- ==============
;   773 --  This code contains both 32 and 64 bit versions, as well as PE and ELF differences.
;   774 --  In particular I want to point out that any split into equivalent chunks for 32/64 
;   775 --  or PE/ELF is quite arbitrary: pilasm.e declares labels etc using exactly the same
;   776 --  conditions (emitON) that control binary being emitted. When you see the general 
;   777 --  pattern [32] [64] [] label [32] [64] [] label [32] [64] [] label, you should not 
;   778 --  assume anything other than that I have used labels as a convenient breakpoint. 
;   779 --  So, for example, [32] ::mergeone [64] ::mergeone [] should not cause any problem.
;   780 --  Obviously [32] ::somelabel [64] call :somelabel [] causes the predictable error,
;   781 --  which can be somewhat confusing, so declaring all labels under [] is recommended.
;   782 --  While there is nothing wrong with [32] 800 lines [64] 800 lines [], it is probably 
;   783 --  a fair bit easier to maintain when the equivalent blocks both fit on the screen.
;   784 --  Of course it largely depends on what you are doing: when debugging (or simply just 
;   785 --  reading and understanding) it will probably help to have larger chunks, whereas 
;   786 --  smaller chunks make applying equivalent changes to 32 and 64 bit code far easier.
;   787 --  Obviously the splits you see were for translation, which is now done and dusted.
;   788 --  Feel free to merge/uninterleave or split/interleave chunks as it takes your fancy,
;   789 --  or "factor out" common code such as EnterCriticalSection and/or GetCurrentThreadId. [DONE!]
;   790 --  Likewise I have tended to use the ordering [PE32]/[ELF32]/[PE64]/[ELF64] but there
;   791 --  is no reason that (for instance) [PE32]/[PE64]/[ELF32]/[ELF64] would be wrong.
;   792 --  Obviously the code is more than twice as long as it would be if it supported just
;   793 --  a single target architecture, not much that can realistically be done about that.
;   794 --
;   795 --
;   796 -- Techical note: this all goes horribly wrong if e/rbx is not 0 on entry, hence to 
;   797 --  avoid grief I zero it at all known entry points. Feel free to add a few more.
;   798 --
;   799 
;   800 -- OLD STUFF:
;   801 -- Inconsequential ramblings that I couldn't quite bring myself to delete
;   802 -- ======================================================================
;   803 --  Obviously, feel free to skip this section.
;   804 --
;   805 --  Technically speaking hll variables/values beginning with 0b10 are invalid. 
;   806 --  Undefined behaviour occurs if the backend is asked to process such garbage,
;   807 --  ie in most cases it would probably be treated as a negative integer, but
;   808 --  other times it could bit-shift it and more than likely crash immediately.
;   809 --  Of course data (f64/char[]/raw memory) can contain any value, including 
;   810 --  dwords that happen to begin with 0b10, it is hll variables, and likewise
;   811 --  dword-sequence elements, which cannot. Note however the [new] compiler uses
;   812 --  0b10 for pre-relocated references, which get shr 2+0b001'd leaving a 0b01 
;   813 --  leadin. Said shift and add can be/is done at compilation-time for normal 
;   814 --  executables, but must be done after loading for DLLs [if ever finished].)
;   815 --
;   816 --DOH: I can/should do ALOT of testing before trying to make this live!!!
;   817 --SUG:safe_poke(base,offset,value): [base-8] must not have 0b01, [[base-8]] must be "SBH\0",
;   818 -- offset must be >=0 and <(=?)[base-4]-sizeinbytes(value).
;   819 --
;   820 --  All memory allocations are rounded up to a sensible size for subsequent splitting/reuse.
;   821 --  It makes little sense to bother the OS with sizes less than 8K, instead we grab ourselves
;   822 --  a "superblock" and farm out little bits of it ourselves. What we need are blocks that can
;   823 --  be split (in half) and recombined simply and efficiently. For now, assume powers of 2 (16,
;   824 --  32,64,128,256,...2GB) but expect a bit of tweaking in a moment.
;   825 --
;   826 --  This is deliberately fragile, with plenty of checks that trigger (/crash) when the slightest
;   827 --  thing goes wrong, on the basis that if it has not crashed by the time we have self-hosted
;   828 --  Phix and run Edita, then it probably never will.
;   829 --
;   830 --without debug
;   831 
;   832 --include builtins\VM\pFPU.e        -- (:%down53/64, :%near53/64 in pAlloc/Free)
;   833 --include builtins\VM\pFEH.e
;   834 --DEV
;   835 include builtins\VM\pDeleteN.e
;   836 
;   837 -- (suprisingly, these two =0 are all the initialisation we need!)
;   838 
;   839 integer pGtcb = 0       -- the global control block (dwThreadId=0, stored /4)
;   840 
;   841 integer stdcs = 0       -- for very short one-off inits in \builtins (opEnter/LeaveCS).
;   842 
;   843 --integer gt1tcb = 0
;   844 
;   845 constant M_MMAP_THRESHOLD = -3
;   846 integer  mmap_threshold = 128*1024  -- linux only, see notes below
;   847 
;   848 --DEV/temp:
;   849 constant memory_corruption = "memory corruption at #"
;   850 constant pGtcb4eq = ", pGtcb*4=#"
;   851 constant diffis = ", diff="
;   852 
;   853 --constant pssebp = "pSetSaveEBP: #"
;   854 --constant psslmh = " <- #"
;   855 --constant psssob = " ("
;   856 --constant pssccr = ")\n"
;   857 
;   858 --/*
;   859 integer withjs = 3  -- for with[out] js/javascript[_semantics]:
;   860                     --  0b01: without js
;   861                     --  0b10: with js
;   862                     --  0b11: default/without js/reset
;   863                     -- 1 <==> 2 is error, but 3 <==> 1 | 2 | 3 is fine.
;   864                     --  (uses test[aka bitwise and]!=0 for validity)
;   865                     --  (:%opAlloClone crashes if bit 01 is not set)
;   866 --*/
;   867 integer withjs = 0  -- with(1) / without(0) js/javascript[_semantics]
;   868                     -- treat 2 (meaning any) as 0 (aka without)
;   869 
;   870 integer safemode = 1    -- (see also safe_mode in pglobals.e)
;   871                         -- 1: treat everything as safe (default)
;   872                         -- 0: with safe_mode or -safe cmdln option.
;   873 
;   874 --DEV:
;   875 #ilASM{ jmp :!opCallOnceYeNot
                jmp :!opCallOnceYeNot     ;#00463014: 351 DAF7FFFF               v  00 00  1   1      
;   876 --#ilASM{ jmp :fin
;   877 
;   878 --/*
;   879 procedure ::pGetMem(::)
;   880 end procedure
;   881 --*/
;   882     ::pGetMem
;   883 -------------
;   884         -- on entry, eax(/rax) is the required length, including any headers
;   885         -- caller is responsible for any required locking
;   886         -- on exit, eax(/rax) is the allocated memory (may want a /4)
;   887         -- can return 0 (which should be fatal for everything except allocate())
;   888         [PE32]
;   889             -- standard (Windows API) calling convention applies: 
;   890             -- eax/ecx/edx are damaged, as are st0..7
;   891             -- ebx/ebp/esi/edi are preserved
;   892             -- result in eax, eax:edx, or st0
;   893             push eax                                -- dwBytes (for HeapAlloc)
                    push eax              ;#00463019: 120                        uv 00 01  1   2      
;   894             call "kernel32.dll","GetProcessHeap"
                    call [#0040106C] (GetProcessHeap)  ;#0046301A: 377025 6C104000            np 00 00  2   3      
;   895 --DEV try HEAP_NO_SERIALIZE (=#00000001), when running performance tests, but I somehow doubt it will matter
;   896 --      (specifically test calling allocate(8000) until it fails)
;   897             push ebx                                -- dwFlags (0)
                    push ebx              ;#00463020: 123                        uv 00 08  1   5      
;   898             push eax                                -- hHeap
                    push eax              ;#00463021: 120                        vu 00 01  1   5      
;   899             call "kernel32.dll","HeapAlloc"
                    call [#00401074] (HeapAlloc)  ;#00463022: 377025 74104000            np 00 00  2   6      
;   900         [PE64]
;   901             -- standard (Windows API) calling convention applies: 
;   902             -- first 4 parameters are passed in rcx/rdx/r8/r9 (or xmm0..3),
;   903             -- caller (ie this code) must allocate >=32 bytes of shadow space.
;   904             -- logically: p1/rcx at [rsp], p2/rdx at [rsp+8], p3/r8 at [rsp+16],
;   905             -- p4/r9 at [rsp+24], then: p5 in [rsp+32], p6 in [rsp+40], etc.
;   906             -- rax/rcx/rdx/r8/r9/r10/r11 are damaged, as are xmm0..5 and st0..7
;   907             -- rbx/rbp/rdi/rsi/r12/r13/r14/r15 are preserved (as are xmm6..15)
;   908             -- result in rax or xmm0
;   909             --
;   910             -- Auto-aligning the stack to a 16-byte boundary
;   911             -- =============================================
;   912             --      mov reg,rsp         -- (if you have one to spare, obviously, else a
;   913             --      push rsp            --  push rsp; push qword[rsp] pair will do, but
;   914             --      push reg            --  that way causes an AGI stall, on the [rsp].)
;   915             --      -- (there are now two copies of the original rsp on the stack, doh)
;   916             --      or rsp,8            -- [rsp] is now 1st or 2nd copy:
;   917             --                          -- if on entry rsp was xxx8: both copies remain on the stack
;   918             --                          -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them
;   919             --                          -- obviously rsp is now xxx8, whatever alignment we started with
;   920             --      sub rsp,8*<odd>     -- (realign the stack as you normally would, including shadow space)
;   921             --      ...
;   922             --      <##code##>
;   923             --      ...
;   924             --  --  add rsp,8*<odd>
;   925             --  --  pop rsp             -- restore, equivalent to rsp += (either #08 or #10)
;   926             --      mov rsp,[rsp+8*odd] -- equivalent to the add/pop
;   927             --
;   928             mov rcx,rsp -- put 2 copies of rsp onto the stack...
;   929             push rsp
;   930             push rcx
;   931             or rsp,8    -- [rsp] is now 1st or 2nd copy:
;   932                         -- if on entry rsp was xxx8: both copies remain on the stack
;   933                         -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them (+8)
;   934                         -- obviously rsp is now xxx8, whatever alignment we started with
;   935             sub rsp,8*5                             -- minimum 4 param shadow space, and align/somewhere to save rax
;   936             mov [rsp+32],rax                        -- save rax (required length)
;   937             call "kernel32.dll","GetProcessHeap"
;   938             mov r8,[rsp+32]                         -- dwBytes (p3)
;   939             mov rdx,rbx                             -- dwFlags (p2,0)
;   940             mov rcx,rax                             -- hHeap (p1)
;   941             call "kernel32.dll","HeapAlloc"
;   942 --          add rsp,8*5
;   943 --          pop rsp
;   944             mov rsp,[rsp+8*5]   -- equivalent to the add/pop
;   945         [ELF32]
;   946             -- standard (kernel) calling convention applies: 
;   947             -- syscall (int 0x80) number in eax (see docs\LinuxSyscallReference.txt), eg:
;   948             --  1 sys_exit
;   949             --  3 sys_read
;   950             --  4 sys_write (stdout is 1)
;   951             --  5 sys_open
;   952             --  6 sys_close
;   953             -- 45 sys_brk
;   954             --140 sys_llseek
;   955             -- arguments in ebx,ecx,edx,esi,edi[,ebp?] (so assume *all* regs damaged)
;   956             -- (may need brandelf -t Linux filename on freeBSD, unless we can figure out how to do that as part of "p -c")
;   957             -- *NB*: ELF32 often requires "xor ebx,ebx" after an int 0x80, whereas PE32/PE64/ELF64 preserve ebx/rbx
;   958             -- In the case of C library calls (eg call "libc.so.6","printf"), eax/ecx/edx are damaged,
;   959             --  but ebx/esi/edi/ebp are preserved. No floating point registers are preserved.
;   960 --DEV this lot needs replacing: calls to libiup.so routines completely obliterate memory allocated as below,
;   961 --      apparently sys_brk is "old hat" and "mmap with anon mapping" would be better.
;   962 --      See http://man7.org/linux/man-pages/man2/mmap.2.html 
;   963 --      Also, builtins\syswait.ew has examples of [ELF32/64] inline assembler calling libc funcs directly (call "libc.so.6","fork"),
;   964 --      and builtins\pcfunc.e has a few from libdl (call "libdl.so.2", "dlopen").
;   965 --      [plain old malloc is also an option, but I read it (sometimes) uses mmap internally anyway, and it does not have the protection
;   966 --       flags that might prove useful, then again it does have mcheck/mprobe... It has also occurred to me that the problem might be 
;   967 --       that libiup.so uses malloc/mmap and whichever it uses assumes it does all the sys_brks, so that may force our hand.]
;   968 
;   969 --/*
;   970             push eax            -- save size
;   971             -- call sys_brk(0) to find the current location of the program break
;   972             xor ebx,ebx
;   973             mov eax,45          -- sys_brk(0)
;   974             int 0x80
;   975             cmp eax,-4096
;   976             ja :error_brk
;   977             -- call sys_brk(prev+size) to set the new program break
;   978             mov ebx,eax
;   979             add ebx,[esp]       -- size
;   980             push eax
;   981             mov eax,45          -- sys_brk(ebx=long brk)
;   982             int 0x80
;   983             xor ebx,ebx         -- (NB: common requirement after an int 0x80)
;   984             pop ecx             -- prev
;   985             cmp eax,-4096
;   986             jbe @f
;   987           ::error_brk
;   988                 xor ebx,ebx     -- (covers the case when that ja triggers)
;   989                 xor ecx,ecx
;   990           @@:
;   991             -- return previous program break (or 0)
;   992             mov eax,ecx
;   993             add esp,4           -- discard size
;   994 --*/
;   995 
;   996 --void *mmap(void *addr(NULL), size_t length, int prot, int flags, int fd, off_t offset);
;   997 -- PROT_EXEC=4 | PROT_READ=1 | PROT_WRITE=2; 7=RWX
;   998 --  MAP_SHARED              =       01h             ; Share changes
;   999 --  MAP_PRIVATE             =       02h             ; Changes are private
;  1000 --  MAP_ANONYMOUS           =       20h             ; don't use a file
;  1001 -- the following broke ./phix -test...
;  1002 --/*
;  1003             push 0                  -- offset (ignored)
;  1004             push -1                 -- fd (ignored)
;  1005             push #22                -- MAP_ANONYMOUS | MAP_PRIVATE
;  1006             push 7                  -- RWX
;  1007             push eax                -- size
;  1008             push ebx                -- addr (NULL)
;  1009             call "libc.so.6","mmap"
;  1010             add esp,24
;  1011 --*/
;  1012 --void * malloc (size_t size)
;  1013             --2/5/17: (not strictly necessary on 32-bit)
;  1014             -- On Linux, by default, memory allocations below 128K are serviced from the heap 
;  1015             -- and above from mmap. However pemit2 needs optable+data_section+code_section to
;  1016             -- all be within a 32-bit offset of each other, which we achieve by forcing every
;  1017             -- allocation to be serviced from the heap. Note that since Phix never actually
;  1018             -- invokes libc/free, there is no advantage to using mmap anyway (as yet).
;  1019             push eax
;  1020             cmp eax,[mmap_threshold]
;  1021             jle @f
;  1022                 mov [mmap_threshold],eax
;  1023                 push eax
;  1024                 push M_MMAP_THRESHOLD
;  1025                 call "libc.so.6","mallopt"      -- mallopt(int param, int value);
;  1026                 add esp,8
;  1027           @@:
;  1028 --          push eax -- (done above)
;  1029             call "libc.so.6","malloc"
;  1030             add esp,4
;  1031 
;  1032         [ELF64]
;  1033 --pop al    -- calling convention is going to be hopelessly wrong in almost all cases!
;  1034             -- standard (kernel) calling convention applies: 
;  1035             -- syscall number in rax (see docs\lsct64.txt)
;  1036             -- first 6 parameters are passed in rdi/rsi/rdx/rcx(or r10 for system calls)/r8/r9 (or xmm0..7).
;  1037             -- rax/rcx/rdx/rsi/rdi/r8/r9/r10/r11 are damaged, as are xmm0..15 and st0..7
;  1038             -- rbx/rbp/r12/r13/r14/r15 are preserved
;  1039             -- In the case of C library calls (eg call "libc.so.6","printf"), rax/rcx/rdx/rsi/rdi/r8..r11 
;  1040             --  are damaged, but rbx/rbp/r12..r15 are preserved. No floating point registers are preserved.
;  1041 --/*
;  1042             push rax                -- save length
;  1043 --          mov r14,rax             -- save length
;  1044             -- call sys_brk(0) to find the current location of the program break
;  1045             xor rdi,rdi
;  1046             mov rax,12              -- sys_brk(rdi=unsigned long brk)
;  1047             syscall
;  1048             -- call sys_brk(prev+size) to set the new program break
;  1049 --          mov rdi,rax
;  1050 --          add rdi,r14
;  1051             pop rdi
;  1052             add rdi,rax
;  1053             mov rax,12              -- sys_brk(rdi=unsigned long brk)
;  1054             syscall
;  1055 --          pop r14
;  1056 --  Description                     RAX     RBX     RCX     RDX     RSI     RDI     RBP     RSP     R8      R9      R10     R11     R12     R13     R14     R15     RIP/RA
;  1057 --  Dwarf2 number                   0       3       2       1       4       5       6       7       8       9       10      11      12      13      14      15      16
;  1058 --  Preserved across function calls         Yes                                     Yes     Yes                                     Yes     Yes     Yes     Yes     N/A
;  1059 --  Function parameter                              4th     3rd     2nd     1st                     5th     6th                                                     N/A
;  1060 --  Return register                 1st                     2nd                                                                                                     N/A
;  1061 --  Kernel parameter                #NR                     3rd     2nd     1st                     5th     6th     4th                                             N/A
;  1062 --*/
;  1063 --/!*
;  1064 --void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);
;  1065 push rdi
;  1066 push rsi
;  1067             mov r9,0                -- offset (ignored)
;  1068             mov r8,-1               -- fd (ignored)
;  1069 --          mov rcx,#22             -- MAP_ANONYMOUS | MAP_PRIVATE
;  1070             mov rcx,#62             -- MAP_ANONYMOUS | MAP_PRIVATE | MAP_32BIT
;  1071             mov rdx,7               -- RWX
;  1072             mov rsi,rax             -- size
;  1073             mov rdi,rbx             -- addr (NULL)
;  1074             call "libc.so.6","mmap"
;  1075 --          add rsp,48
;  1076 --9/2/24:
;  1077             test rax,rax
;  1078             jg @f
;  1079                 xor rax,rax
;  1080          @@:
;  1081 pop rsi
;  1082 pop rdi
;  1083 --*!/
;  1084 --void * malloc (size_t size)
;  1085 --untried:
;  1086 -- 7/2/17:
;  1087 --/*
;  1088 push rdi
;  1089 push rsi
;  1090             --2/5/17:
;  1091             -- On Linux, by default, memory allocations below 128K are serviced from the heap 
;  1092             -- and above from mmap. However pemit2 needs optable+data_section+code_section to
;  1093             -- all be within a 32-bit offset of each other, which we achieve by forcing every
;  1094             -- allocation to be serviced from the heap. Note that since Phix never actually
;  1095             -- invokes libc/free, there is no advantage to using mmap anyway (as yet).
;  1096             push rax
;  1097             cmp rax,[mmap_threshold]
;  1098             jle @f
;  1099                 mov [mmap_threshold],rax
;  1100                 mov rdi,M_MMAP_THRESHOLD
;  1101                 mov rsi,rax
;  1102                 call "libc.so.6","mallopt"      -- mallopt(int param, int value);
;  1103           @@:
;  1104             pop rdi
;  1105 --          mov rdi,rax
;  1106             call "libc.so.6","malloc"
;  1107 pop rsi
;  1108 pop rdi
;  1109 --*/
;  1110         []
;  1111             ret
                    ret                   ;#00463028: 303                        np 00 00  2   8      
;  1112 
;  1113 --/*
;  1114 procedure ::pGetThread(::)
;  1115 end procedure -- (for Edita/CtrlQ)
;  1116 --*/
;  1117     ::pGetThread
;  1118 ----------------
;  1119         -- nb most registers are trashed, as per calling conventions outlined above
;  1120         --   (but feel free to save/restore them here, if it helps any)
;  1121         --  result in eax/rax
;  1122         [PE32]
;  1123 --DEV for the crack, when you've bored, instead try ([also try debugging] then try PE64, then replace everywhere it's called)
;  1124 --          mov eax,fs:[0x24]
;  1125             call "kernel32.dll","GetCurrentThreadId"
                    call [GetCurrentThreadId]  ;#00463029: 377025 58104000            np 00 00  2  10      
;  1126         [ELF32]
;  1127 --DEV libc/getpid()
;  1128             mov eax,20              -- sys_getpid()
;  1129             int 0x80
;  1130             xor ebx,ebx             -- (common requirement after int 0x80)
;  1131         [PE64]
;  1132             mov rax,rsp -- put 2 copies of rsp onto the stack...
;  1133             push rsp
;  1134             push rax
;  1135             or rsp,8    -- [rsp] is now 1st or 2nd copy:
;  1136                         -- if on entry rsp was xxx8: both copies remain on the stack
;  1137                         -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them (+8)
;  1138                         -- obviously rsp is now xxx8, whatever alignment we started with
;  1139             sub rsp,8*5
;  1140             call "kernel32.dll","GetCurrentThreadId"
;  1141 --          add rsp,8*5
;  1142 --          pop rsp
;  1143             mov rsp,[rsp+8*5]   -- equivalent to the add/pop
;  1144         [ELF64]
;  1145 -- 7/2/17:
;  1146 push rdi
;  1147 push rsi
;  1148 push rcx
;  1149             mov eax,39              -- sys_getpid()
;  1150             syscall
;  1151 pop rcx
;  1152 pop rsi
;  1153 pop rdi
;  1154         []
;  1155             ret
                    ret                   ;#0046302F: 303                        np 00 00  2  12      
;  1156     
;  1157 --/*
;  1158 procedure ::pGetTCB(::)
;  1159 end procedure -- (for Edita/CtrlQ)
;  1160 --*/
;  1161     :%pGetTCB
;  1162 --------------
;  1163         -- local routine for pSetSaveEBP; could also be used by pGetPool?
;  1164         -- (esi:=pTCB/4; most regs trashed)
;  1165         -- (also, eax/rax contains the thread-id on exit)
;  1166     [32]
;  1167         -- <no parameters>
;  1168         -- on exit, pTCB/4 in esi
;  1169         xor ebx,ebx -- (save some grief)
                xor ebx,ebx               ;#00463030: 061333                     uv 08 08  1  14      
;  1170         call :pGetThread    -- (eax:=dwThreadId; most regs trashed)
                call #00463029            ;#00463032: 350 F2FFFFFF               v  00 00  1  14      
;  1171         mov esi,[pGtcb]
                mov esi,[#004021B8] (pGtcb)  ;#00463037: 213065 B8214000            uv 40 00  1  15      
;  1172         test esi,esi
                test esi,esi              ;#0046303D: 205366                     uv 00 40  1  16 40   
;  1173     [64]
;  1174         -- <no parameters>
;  1175         -- on exit, pTCB/4 in rsi
;  1176         xor rbx,rbx     -- (save some grief)
;  1177         call :pGetThread    -- (rax:=dwThreadId; most regs trashed)
;  1178         mov rsi,[pGtcb]
;  1179         test rsi,rsi
;  1180     []
;  1181         jnz :gettcbloop
                jnz #00463042             ;#0046303F: 165 01                     v  00 00  1  16      
;  1182             int3
                    int3                  ;#00463041: 314                        np 00 00 13  17      
;  1183       ::gettcbloop
;  1184     [32]
;  1185         mov esi,dword[ebx+esi*4+8]          -- tcb:=tcb.pNxtcb
                mov esi,[ebx+esi*4+8]     ;#00463042: 213164263 08               uv 40 48  1  30      
;  1186         test esi,esi
                test esi,esi              ;#00463046: 205366                     uv 00 40  1  31 40   
;  1187         jz :tcbnotfound
                jz #0046305A              ;#00463048: 164 10                     v  00 00  1  31      
;  1188 --      jnz @f
;  1189 --SUG return 0...
;  1190 --          int3
;  1191 --          ret
;  1192 --    @@:
;  1193         cmp dword[ebx+esi*4],#00424354      -- dwMagicT ("TCB\0")
                cmp dword[ebx+esi*4],#00424354  ;#0046304A: 201074263 54434200         uv 00 48  2  32      
;  1194         je @f
                je #00463054              ;#00463051: 164 01                     v  00 00  1  33      
;  1195             int3
                    int3                  ;#00463053: 314                        np 00 00 13  34      
;  1196       @@:
;  1197         cmp dword[ebx+esi*4+4],eax          -- dwThreadId
                cmp [ebx+esi*4+4],eax     ;#00463054: 071104263 04               uv 00 49  2  47      
;  1198     [64]
;  1199         mov rsi,qword[rbx+rsi*4+8]          -- tcb:=tcb.pNxtcb
;  1200         test rsi,rsi
;  1201         jz :tcbnotfound
;  1202 --      jnz @f
;  1203 ----            int3
;  1204 --          ret
;  1205 --    @@:
;  1206         cmp dword[rbx+rsi*4],#00424354      -- dwMagicT ("TCB\0")
;  1207         je @f
;  1208             int3
;  1209       @@:
;  1210         cmp dword[rbx+rsi*4+4],eax          -- dwThreadId
;  1211     []
;  1212         jne :gettcbloop
                jne #00463042             ;#00463058: 165 E8                     v  00 00  1  48      
;  1213 
;  1214       ::tcbnotfound
;  1215         ret
                ret                       ;#0046305A: 303                        np 00 00  2  49      
;  1216 
;  1217 -- Callback handling
;  1218 -- =================
;  1219 --  This is one of those dirt-simple routines that requires an awful lot of explaining...
;  1220 --  Phix relies on ebp(/rbp) pointing to the current frame on the virtual stack (which is
;  1221 --  allocated in ~8K blocks on the heap). If we invoke call/c_func/proc, and that invokes
;  1222 --  a callback, ebp will most likely be meaningless (to Phix). Hence the former trio must
;  1223 --  save ebp which the latter can restore, and all four must restore everything back to
;  1224 --  the way they found it, as soon as that becomes appropriate. The single routine below,
;  1225 --  :%pSetSaveEBP, locates pTCB.SaveEBP, saves edx/rdx therein, and returns the previous 
;  1226 --  content in eax/rax. Note that arwen\pComN.ew also uses this, however I rather suspect
;  1227 --  it may be superfluous as the callback handler should cope, but all this has changed
;  1228 --  beyond recognition since the days when pComN.ew was written... [DEV]
;  1229 --  A callback is an asynchrochronous event to Phix: when it invokes some external C/asm 
;  1230 --  code, it has no idea if, when, or in what state things will be in, when control gets 
;  1231 --  to the callback handler, and it needs some way to restore a bit of sanity. Prior to 
;  1232 --  multithreading, this used a local static variable in pcfunc.e. The local integer(s)
;  1233 --  prev_ebp4, in call()/c_func()/c_proc(), use the trick of storing a dword-aligned 
;  1234 --  value /4 in an integer, and that takes care of any nesting, to any depth. 
;  1235 --  Logically, I suppose, pSetSaveEBP belongs in pStack.e - but making pGetTCB global is 
;  1236 --  not really justifiable, especially not just for this trivial little thing.          --DEV done anyway...
;  1237 --
;  1238 --  call/c_func/proc should: 
;  1239 --                              mov edx,ebp
;  1240 --                              call :%pSetSaveEBP  -- (eax<-pTCB.SaveEBP<-edx, all regs trashed)
;  1241 --                              shr eax,2
;  1242 --                              mov [local_ebp4],eax
;  1243 --  and when control returns:
;  1244 --                              mov edx,[local_ebp4]        -- see note[1] below
;  1245 --                              shl edx,2
;  1246 --                              call :%pSetSaveEBP  -- (eax<-pTCB.SaveEBP<-edx, all regs trashed)
;  1247 --  callback_handler should:
;  1248 --                              push ebp                    -- see note[2] below
;  1249 --                              xor edx,edx                 -- edx:=0
;  1250 --                              call :%pSetSaveEBP  -- (eax<-pTCB.SaveEBP<-edx, all regs trashed)
;  1251 --                              test eax,eax                
;  1252 --                              jz @f
;  1253 --                                  mov ebp,eax             -- see note[3] below
;  1254 --                            @@:
;  1255 --                              push eax
;  1256 --  and finally:
;  1257 --                              pop edx
;  1258 --                              call :%pSetSaveEBP  -- (eax<-pTCB.SaveEBP<-edx, all regs trashed)
;  1259 --                              pop ebp                     -- see note[2] below
;  1260 --  whew!
;  1261 --  note[1]: ebp must be correct for this to work. If you are worried that a c_func/proc
;  1262 --           could return with a damaged ebp, then just push/pop it, and don't confuse 
;  1263 --           that completely separate issue with anything that this is trying to do!
;  1264 --
;  1265 --  note[2]: The callback handler also has the further responsibility of saving/restoring 
;  1266 --           ebp for the benefit of the C code, which has nothing to do with SetSaveEBP.
;  1267 --
;  1268 --  note[3]: callback_handler zeroes pTCB.SaveEBP: should it be invoked "twice in a row", 
;  1269 --           without an intervening call/c_func/proc, or directly from #ilASM before any
;  1270 --           such, the test eax,eax ensures it leaves ebp as-is.
;  1271 --
;  1272 
;  1273 --/*
;  1274 procedure :%pSetSaveEBP(:%)
;  1275 end procedure
;  1276 --*/
;  1277     :%pSetSaveEBP
;  1278 --------------
;  1279         -- save ebp before c_func (etc), in case of call_back, in a thread safe manner
;  1280         -- (eax<-pTCB.SaveEBP<-edx, all regs trashed)
;  1281 --push esi
;  1282         -- (factored out as a prelude to using it elsewhere:)
;  1283         call :%pGetTCB          -- (esi:=pTCB/4; most regs trashed)
                call #00463030 (:%pGetTCB)  ;#0046305B: 350 D0FFFFFF               v  00 00  1  51      
;  1284 --pop edi
;  1285     [32]
;  1286         mov eax,[ebx+esi*4+264]     -- SaveEBP
                mov eax,[ebx+esi*4+264]   ;#00463060: 213204263 08010000         uv 01 48  1  52      
;  1287         mov [ebx+esi*4+264],edx     -- SaveEBP
                mov [ebx+esi*4+264],edx   ;#00463067: 211224263 08010000         vu 00 4C  1  52      
;  1288 --DEV temp code:
;  1289 --pushad
;  1290 ---- pSetSaveEBP: #00000000 <- #00000000 (%d)
;  1291 --mov edi,[pssebp]
;  1292 --call :%puts1
;  1293 --mov edx,[esp+28]  -- eax
;  1294 --push ebx
;  1295 --call :%puthex32
;  1296 --mov edi,[psslmh]
;  1297 --call :%puts1
;  1298 --mov edx,[esp+20]  -- edx
;  1299 --push ebx
;  1300 --call :%puthex32
;  1301 --mov edi,[psssob]
;  1302 --call :%puts1
;  1303 ----mov eax,[esp+4]     -- esi
;  1304 --mov eax,[esp]     -- edi
;  1305 --push ebx
;  1306 --call :%putsint
;  1307 --mov edi,[pssccr]
;  1308 --call :%puts1
;  1309 --popad
;  1310     [64]
;  1311         mov rax,[rbx+rsi*4+1008]    -- SaveEBP
;  1312         mov [rbx+rsi*4+1008],rdx    -- SaveEBP
;  1313     []
;  1314         ret
                ret                       ;#0046306E: 303                        np 00 00  2  53      
;  1315         
;  1316 --/*
;  1317 procedure :%pGetpGtcb(:%)
;  1318 end procedure -- (for Edita/CtrlQ)  [I quickly tired of keying CtrlQ/<stare blankly>/AltS]
;  1319 --*/
;  1320     :%pGetpGtcb         -- (for external heap diagnostics, if ever needed/written)
;  1321 ---------------
;  1322     [32]
;  1323         mov eax,[pGtcb]
                mov eax,[#004021B8] (pGtcb)  ;#0046306F: 241 B8214000               uv 01 00  1  55      
;  1324     [64]
;  1325         mov rax,[pGtcb]
;  1326     []
;  1327         ret
                ret                       ;#00463074: 303                        np 00 00  2  56      
;  1328 
;  1329 --/*
;  1330 procedure :%pNewGtcbChain(:%)
;  1331 end procedure -- (for Edita/CtrlQ)
;  1332 --*/
;  1333     :%pNewGtcbChain
;  1334 --------------
;  1335         -- eax/rax:=existing [pGtcb], if any, and [pGtcb]:=0 forces the test/newtcb 
;  1336         --          at the start of pGetPool to trigger the next time it is called.
;  1337         --  see "Memory Leak Checking And Heap Diagnostics" above
;  1338     [32]
;  1339         mov eax,[pGtcb]
                mov eax,[#004021B8] (pGtcb)  ;#00463075: 241 B8214000               uv 01 00  1  58      
;  1340         mov [pGtcb],ebx
                mov [#004021B8] (pGtcb),ebx  ;#0046307A: 211035 B8214000            vu 00 08  1  58      
;  1341     [64]
;  1342         mov rax,[pGtcb]
;  1343         mov [pGtcb],rdx
;  1344     []
;  1345         ret
                ret                       ;#00463080: 303                        np 00 00  2  59      
;  1346 
;  1347 --/*
;  1348 procedure :%pRestoreGtcbChain(:%)
;  1349 end procedure -- (for Edita/CtrlQ)
;  1350 --*/
;  1351     :%pRestoreGtcbChain
;  1352 ------------------
;  1353         -- restore [pGtcb] from the value in eax/rax, typically saved from the one 
;  1354         --  p.exe just used to compile the source, and return the current value in 
;  1355         --  edx/rdx, typically one that was specially created to interpret the app
;  1356         --  in, deliberately distinct from the p.exe one so that we can analyse it.
;  1357         --  see "Memory Leak Checking And Heap Diagnostics" above
;  1358     [32]
;  1359         mov edx,[pGtcb]
                mov edx,[#004021B8] (pGtcb)  ;#00463081: 213025 B8214000            uv 04 00  1  61      
;  1360         mov [pGtcb],eax
                mov [#004021B8] (pGtcb),eax  ;#00463087: 243 B8214000               vu 00 01  1  61      
;  1361     [64]
;  1362         mov rdx,[pGtcb]
;  1363         mov [pGtcb],rax
;  1364     []
;  1365         ret
                ret                       ;#0046308C: 303                        np 00 00  2  62      
;  1366 
;  1367 --/*
;  1368 procedure ::EnterCriticalSection(::)
;  1369 end procedure -- (for Edita/CtrlQ)
;  1370 --*/
;  1371     ::EnterCriticalSection
;  1372 --------------------------
;  1373         -- note this is internal, see also :%opEnterCS
;  1374         [PE32]
;  1375             -- lpCriticalSection in ecx
;  1376             push ecx
                    push ecx              ;#0046308D: 121                        uv 00 02  1  64      
;  1377             call "kernel32.dll","EnterCriticalSection"
                    call [EnterCriticalSection]  ;#0046308E: 377025 38104000            np 00 00  2  65      
;  1378             ret
                    ret                   ;#00463094: 303                        np 00 00  2  67      
;  1379         [PE64]
;  1380             -- lpCriticalSection in rcx
;  1381             mov rax,rsp -- put 2 copies of rsp onto the stack...
;  1382             push rsp
;  1383             push rax
;  1384             or rsp,8    -- [rsp] is now 1st or 2nd copy:
;  1385                         -- if on entry rsp was xxx8: both copies remain on the stack
;  1386                         -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them (+8)
;  1387                         -- obviously rsp is now xxx8, whatever alignment we started with
;  1388             sub rsp,8*5
;  1389             call "kernel32.dll","EnterCriticalSection"
;  1390 --          add rsp,8*5
;  1391 --          pop rsp
;  1392             mov rsp,[rsp+8*5]   -- equivalent to the add/pop
;  1393             ret
;  1394 
;  1395 --      [ELF]
;  1396 -- (it may be easier/better to just call "libpthread.so.0","pthread_mutex_lock")
;  1397 --          --/*
;  1398 --            -- credit: "futexes are tricky" by Ulrich Drepper (futex3 code)
;  1399 --            int val = 0;
;  1400 --            void lock() {
;  1401 --              int c;
;  1402 --              if ((c = cmpxchg(val, 0, 1)) != 0) {
;  1403 --                if (c!=2) {
;  1404 --                  c = xchg(val, 2);
;  1405 --                }
;  1406 --                while (c!=0) {
;  1407 --                  futex_wait(&val, 2);
;  1408 --                  c = xchg(val, 2);
;  1409 --                }
;  1410 --              }
;  1411 --            }
;  1412 --            void unlock() {
;  1413 --              if (atomic_dec(val) != 1) {
;  1414 --                val = 0;
;  1415 --                futex_wake(&val, 1);
;  1416 --              }
;  1417 --            }
;  1418 --            My quick explanation (go and find a copy of futex.pdf for more detail):
;  1419 --              val has three states:  0 = unlocked, 1 = locked no waiters, 2 = locked with waiters.
;  1420 --              lock: if we can 0->1 then we're done (fast route, uncontended lock)
;  1421 --                    else loop: set val to 2; if it was 0 we're done else wait/loop.
;  1422 --              unlock: set val (which must have been 1 or 2) to 0; if it was 2 wake one waiter up.
;  1423 --          --*/
;  1424 
;  1425         [ELF32]
;  1426             -- csLock (address of a dword futex) in ecx
;  1427             -- all registers trashed
;  1428             mov edx,1
;  1429             xor eax,eax
;  1430             lock cmpxchg [ecx],edx  -- atomic(<tmp>:=eax; eax:=[ecx]; if <tmp>==eax then [ecx]:=edx end if)
;  1431             test eax,eax            -- so if eax is now/still 0, then [ecx] just got set (from 0) to 1.
;  1432             jz @f
;  1433                 push ecx
;  1434                 cmp eax,2
;  1435                 je :futex_wait      -- (else [rcx] must have been 1 on entry)
;  1436               ::xchg2
;  1437                 mov eax,2
;  1438                 lock xchg [ecx],eax
;  1439                 test eax,eax
;  1440                 jz :futex_locked    -- if [ecx] just got set from 0 to 2, we're done (else (1|2)->2==>wait)
;  1441               ::futex_wait
;  1442                     mov eax,240         -- sys_futex(ebx=void *futex, ecx=int op, edx=int val, esi=const struct timespec *timeout[==NULL][, edi=void *futex2, ebp=int val3])
;  1443                     mov ebx,ecx         -- *futex
;  1444                     mov ecx,#80         -- FUTEX_WAIT(0) or FUTEX_PRIVATE_FLAG(128)
;  1445                     mov edx,2           -- val
;  1446                     xor esi,esi         -- no timeout
;  1447                     int 0x80            -- futex_wait(ecx,2)
;  1448                     xor ebx,ebx         -- (common requirement after int 0x80)
;  1449                     mov ecx,[esp]
;  1450                     jmp :xchg2
;  1451               ::futex_locked
;  1452                 pop ecx
;  1453           @@:
;  1454             ret
;  1455 
;  1456         [ELF64]
;  1457             -- csLock (address of a dword futex) in rcx (yes, a futex is still a dword on 64-bit)
;  1458             mov edx,1
;  1459             xor eax,eax
;  1460             lock cmpxchg [rcx],edx  -- atomic(<tmp>:=eax; eax:=[rcx]; if <tmp>==eax then [rcx]:=edx end if)
;  1461             test eax,eax            -- so if eax is now/still 0, then [rcx] just got set (from 0) to 1.
;  1462             jz @f
;  1463                 push rcx
;  1464                 cmp eax,2
;  1465                 je :futex_wait      -- (else [rcx] must have been 1 on entry)
;  1466               ::xchg2
;  1467                 mov eax,2
;  1468                 lock xchg [rcx],eax
;  1469                 test eax,eax
;  1470                 jz :futex_locked    -- if [rcx] just got set from 0 to 2, we're done (else (1|2)->2==>wait)
;  1471               ::futex_wait
;  1472 -- 7/2/17:
;  1473 push rdi
;  1474 push rsi
;  1475                     mov eax,202         -- sys_futex(rdi=u32*uaddr, rsi=int op, rdx=u32 val, r10=struct timespec*utime[==NULL] [,r8=u32*uaddr2,r9=u32 val3])
;  1476                     mov rdi,rcx         -- *futex
;  1477                     mov rsi,#80         -- FUTEX_WAIT(0) or FUTEX_PRIVATE_FLAG(128)
;  1478                     mov edx,2           -- val
;  1479                     xor r10,r10         -- no timeout
;  1480                     syscall             -- futex_wait(rcx,2)
;  1481 pop rsi
;  1482 pop rdi
;  1483                     mov rcx,[rsp]
;  1484                     jmp :xchg2
;  1485               ::futex_locked
;  1486                 pop rcx
;  1487           @@:
;  1488             ret
;  1489         []
;  1490 
;  1491 --/*
;  1492 procedure ::TryEnterCriticalSection(::)
;  1493 end procedure -- (for Edita/CtrlQ)
;  1494 --*/
;  1495     ::TryEnterCriticalSection
;  1496 -----------------------------
;  1497         -- note this is internal, see also :%opTryCS
;  1498         [PE32]
;  1499             -- lpCriticalSection in ecx
;  1500             push ecx
                    push ecx              ;#00463095: 121                        uv 00 02  1  69      
;  1501             call "kernel32.dll","TryEnterCriticalSection"
                    call [TryEnterCriticalSection]  ;#00463096: 377025 B4104000            np 00 00  2  70      
;  1502             -- eax==0 on failure [DEV may want a test/mov 1 here]
;  1503             ret
                    ret                   ;#0046309C: 303                        np 00 00  2  72      
;  1504         [PE64]
;  1505             -- lpCriticalSection in rcx
;  1506             mov rax,rsp -- put 2 copies of rsp onto the stack...
;  1507             push rsp
;  1508             push rax
;  1509             or rsp,8    -- [rsp] is now 1st or 2nd copy:
;  1510                         -- if on entry rsp was xxx8: both copies remain on the stack
;  1511                         -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them (+8)
;  1512                         -- obviously rsp is now xxx8, whatever alignment we started with
;  1513             sub rsp,8*5
;  1514             call "kernel32.dll","TryEnterCriticalSection"
;  1515 --          add rsp,8*5
;  1516 --          pop rsp
;  1517             mov rsp,[rsp+8*5]   -- equivalent to the add/pop
;  1518             -- rax==0 on failure [DEV may want a test/mov 1 here]
;  1519             ret
;  1520 
;  1521         [ELF32]
;  1522             -- csLock (address of a dword futex) in ecx
;  1523             -- all registers trashed
;  1524             mov edx,1
;  1525             xor eax,eax
;  1526             lock cmpxchg [ecx],edx  -- atomic(<tmp>:=eax; eax:=[ecx]; if <tmp>==eax then [ecx]:=edx end if)
;  1527             test eax,eax            -- so if eax is now/still 0, then [ecx] just got set (from 0) to 1.
;  1528             jz @f
;  1529                 xor eax,eax         -- failure
;  1530                 ret
;  1531           @@:
;  1532             mov eax,1
;  1533             ret
;  1534 
;  1535         [ELF64]
;  1536             -- csLock (address of a dword futex) in rcx (yes, a futex is still a dword on 64-bit)
;  1537             mov edx,1
;  1538             xor rax,rax
;  1539             lock cmpxchg [rcx],edx  -- atomic(<tmp>:=eax; eax:=[rcx]; if <tmp>==eax then [rcx]:=edx end if)
;  1540             test eax,eax            -- so if eax is now/still 0, then [rcx] just got set (from 0) to 1.
;  1541             jz @f
;  1542                 xor rax,rax         -- failure
;  1543                 ret
;  1544           @@:
;  1545             mov rax,1
;  1546             ret
;  1547         []
;  1548 
;  1549 --/*
;  1550 procedure ::LeaveCriticalSection(::)
;  1551 end procedure -- (for Edita/CtrlQ)
;  1552 --*/
;  1553     ::LeaveCriticalSection
;  1554 --------------------------
;  1555         -- note this is internal, see also :%opLeaveCS
;  1556         [PE32]
;  1557             -- lpCriticalSection in ecx
;  1558             push ecx
                    push ecx              ;#0046309D: 121                        uv 00 02  1  74      
;  1559             call "kernel32.dll","LeaveCriticalSection"
                    call [LeaveCriticalSection]  ;#0046309E: 377025 80104000            np 00 00  2  75      
;  1560             ret
                    ret                   ;#004630A4: 303                        np 00 00  2  77      
;  1561 
;  1562         [PE64]
;  1563             -- lpCriticalSection in rcx
;  1564             mov rax,rsp -- put 2 copies of rsp onto the stack...
;  1565             push rsp
;  1566             push rax
;  1567             or rsp,8    -- [rsp] is now 1st or 2nd copy:
;  1568                         -- if on entry rsp was xxx8: both copies remain on the stack
;  1569                         -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them (+8)
;  1570                         -- obviously rsp is now xxx8, whatever alignment we started with
;  1571             sub rsp,8*5
;  1572             call "kernel32.dll","LeaveCriticalSection"
;  1573 --          add rsp,8*5
;  1574 --          pop rsp
;  1575             mov rsp,[rsp+8*5]   -- equivalent to the add/pop
;  1576             ret
;  1577 
;  1578         [ELF32]
;  1579             -- csLock (address of a dword futex) in ecx
;  1580             lock sub dword[ecx],1   -- *futex -= 1
;  1581             jz @f
;  1582                 mov [ecx],ebx       -- *futex := 0
;  1583                 mov eax,240         -- sys_futex(ebx=u32*uaddr, ecx=int op, edx=u32 val [,esi=struct timespec*utime,edi=u32*uaddr2,ebp=u32 val3])
;  1584                 mov ebx,ecx         -- *futex
;  1585                 mov ecx,#81         -- FUTEX_WAKE(1) or FUTEX_PRIVATE_FLAG(128)
;  1586                 mov edx,1           -- val
;  1587                 int 0x80            -- futex_wake(ecx,1)
;  1588                 xor ebx,ebx         -- (common requirement after int 0x80)
;  1589           @@:
;  1590             ret
;  1591 
;  1592         [ELF64]
;  1593             -- csLock (address of a dword futex) in rcx
;  1594             lock sub dword[rcx],1   -- *futex -= 1  (yes, it is still a dword on 64-bit)
;  1595             jz @f
;  1596 -- 7/2/17:
;  1597 push rdi
;  1598 push rsi
;  1599                 mov [rcx],rbx       -- *futex := 0
;  1600                 mov eax,202         -- sys_futex(rdi=u32*uaddr, rsi=int op, rdx=u32 val [,r10=struct timespec*utime,r8=u32*uaddr2,r9=u32 val3])
;  1601                 mov rdi,rcx         -- *futex
;  1602                 mov rsi,#81         -- FUTEX_WAKE(1) or FUTEX_PRIVATE_FLAG(128)
;  1603                 mov edx,1           -- val
;  1604                 syscall             -- futex_wake(rcx,1)
;  1605 pop rsi
;  1606 pop rdi
;  1607           @@:
;  1608             ret
;  1609         []
;  1610 
;  1611 --/*
;  1612 procedure ::newtcb(::)
;  1613 end procedure -- (for Edita/CtrlQ)
;  1614 --*/
;  1615     ::newtcb
;  1616 ------------
;  1617         -- (no parameters)
;  1618         -- caller is responsible for any required locking
;  1619         -- on exit edi(/rdi) is pTCB/4 (dwThreadId is left set to 0)
;  1620         -- esi(/rsi) is preserved, all other registers are trashed [DEV]
;  1621         [32]
;  1622             mov edi,[pGtcb]     -- (stored /4)
                    mov edi,[#004021B8] (pGtcb)  ;#004630A5: 213075 B8214000            uv 80 00  1  79      
;  1623             test edi,edi
                    test edi,edi          ;#004630AB: 205377                     uv 00 80  1  80 80   
;  1624             jz @f
                    jz #004630C0          ;#004630AD: 164 11                     v  00 00  1  80      
;  1625                 -- (this loop assumes pGtcb.csLock is in force)
;  1626               ::scanforfreetcblooptop
;  1627                 mov edi,[ebx+edi*4+8]           -- pNxtcb
                        mov edi,[ebx+edi*4+8]  ;#004630AF: 213174273 08               uv 80 88  1  81      
;  1628                 test edi,edi
                        test edi,edi      ;#004630B3: 205377                     uv 00 80  1  82 80   
;  1629                 jz @f
                        jz #004630C0      ;#004630B5: 164 09                     v  00 00  1  82      
;  1630                 cmp dword[ebx+edi*4+16],-3      -- nStatus (free)
                        cmp dword[ebx+edi*4+16],-3  ;#004630B7: 203174273 10 FD            u  00 88  2  83      
;  1631                 jne :scanforfreetcblooptop
                        jne #004630AF     ;#004630BC: 165 F1                     v  00 00  1  84      
;  1632                 jmp :freetcbfound
                        jmp #00463109     ;#004630BE: 353 49                     v  00 00  1  85      
;  1633           @@:
;  1634 -->         mov eax,268         -- sizeof(TCB)
;  1635             mov eax,276         -- sizeof(TCB)
                    mov eax,276           ;#004630C0: 270 14010000               uv 01 00  1  86      
;  1636             call :pGetMem
                    call #00463019        ;#004630C5: 350 4FFFFFFF               v  00 00  1  86      
;  1637             test eax,eax
                    test eax,eax          ;#004630CA: 205300                     uv 00 01  1  87      
;  1638 --          jz :memoryallocationfailure
;  1639             jnz @f
                    jnz #004630CF         ;#004630CC: 165 01                     v  00 00  1  87      
;  1640                 int3
                        int3              ;#004630CE: 314                        np 00 00 13  88      
;  1641           @@:
;  1642             mov edx,eax
                    mov edx,eax           ;#004630CF: 213320                     uv 04 01  1 101      
;  1643             lea edi,[eax+4]
                    lea edi,[eax+4]       ;#004630D1: 215170 04                  vu 80 01  1 101      
;  1644             shr eax,2
                    shr eax,2             ;#004630D4: 301350 02                  u  01 01  1 102      
;  1645             push eax            -- [1] save result
                    push eax              ;#004630D7: 120                        uv 00 01  1 103 01   
;  1646             mov dword[edx],#00424354                    -- dwMagicT ("TCB\0")
                    mov [edx], dword #00424354  ;#004630D8: 307002 54434200            vu 00 04  1 103      
;  1647 -->         mov dword[edx+264],#00424345                -- dwMagicE ("ECB\0")
;  1648             mov dword[edx+272],#00424345                -- dwMagicE ("ECB\0")
                    mov [edx+272], dword #00424345  ;#004630DE: 307202 10010000 45434200   uv 00 04  1 104      
;  1649             xor eax,eax
                    xor eax,eax           ;#004630E8: 061300                     vu 01 01  1 104      
;  1650 -->         mov ecx,65 -- (4+27*2+1+6)  -- (not dwMagicT/E, dwThreadId..csLock[$])
;  1651             mov ecx,67 -- (4+27*2+1+6+2)    -- (not dwMagicT/E, dwThreadId..pTLS)
                    mov ecx,67            ;#004630EA: 271 43000000               uv 02 00  1 105      
;  1652             rep stosd
                    rep stosd             ;#004630EF: 363:253                    np 82 83  3 106      
;  1653             mov dword[edx+236],#00424343                -- dwMagicC ("CCB\0")
                    mov [edx+236], dword #00424343  ;#004630F1: 307202 EC000000 43434200   uv 00 04  1 109      
;  1654         [PE32]
;  1655             add edx,240
                    add edx,240           ;#004630FB: 201302 F0000000            vu 04 04  1 109      
;  1656             push edx                                    -- lpCriticalSection
                    push edx              ;#00463101: 122                        uv 00 04  1 110      
;  1657             call "kernel32.dll","InitializeCriticalSection"
                    call [InitializeCriticalSection]  ;#00463102: 377025 78104000            np 00 00  2 111      
;  1658 --      [ELF32]
;  1659             -- (a mutex (int32) of 0, as already set, is enough)
;  1660         [32]
;  1661             pop edi             -- [1] pTCB/4
                    pop edi               ;#00463108: 137                        uv 80 00  1 113      
;  1662           ::freetcbfound
;  1663             mov dword[ebx+edi*4+16],-1  -- nStatus (normal)
                    mov [ebx+edi*4+16], dword -1  ;#00463109: 307104273 10 FFFFFFFF      uv 00 88  1 116 80 *80*
;  1664         [64]
;  1665             mov rax,rsp -- put 2 copies of rsp onto the stack...
;  1666             push rsp
;  1667             push rax
;  1668             or rsp,8    -- [rsp] is now 1st or 2nd copy:
;  1669                         -- if on entry rsp was xxx8: both copies remain on the stack
;  1670                         -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them (+8)
;  1671                         -- obviously rsp is now xxx8, whatever alignment we started with
;  1672             sub rsp,8*5                                 -- minimum 4 param shadow space, and align/somewhere to save rax
;  1673             mov rdi,[pGtcb]                             -- (stored /4)
;  1674             test rdi,rdi
;  1675             jz @f
;  1676                 -- (this loop assumes pGtcb.csLock is in force)
;  1677               ::scanforfreetcblooptop
;  1678                 mov rdi,[rbx+rdi*4+8]           -- pNxtcb
;  1679                 test rdi,rdi
;  1680                 jz @f
;  1681                 cmp qword[rbx+rdi*4+24],-3      -- nStatus (free)
;  1682                 jne :scanforfreetcblooptop
;  1683                 jmp :freetcbfound
;  1684           @@:
;  1685 -->         mov rax,1012    -- sizeof(TCB)
;  1686             mov rax,1028    -- sizeof(TCB)
;  1687             call :pGetMem
;  1688             test rax,rax
;  1689 --          jz :memoryallocationfailure
;  1690             jnz @f
;  1691                 int3
;  1692           @@:
;  1693             mov rdx,rax
;  1694             lea rdi,[rax+8]
;  1695             shr rax,2
;  1696             mov [rsp+32],rax    -- [1] save result
;  1697             mov dword[rdx],#00424354                    -- dwMagicT ("TCB\0")
;  1698             mov dword[rdx+4],ebx                        -- dwThreadId (:=0)
;  1699 -->         mov dword[rdx+1008],#00424345               -- dwMagicE ("ECB\0")
;  1700             mov dword[rdx+1024],#00424345               -- dwMagicE ("ECB\0")
;  1701             xor rax,rax
;  1702 -->         mov rcx,125 -- (3+58*2+1+5) -- (not dwMagicT/E, not dwThreadId, pNextcb..csLock[$])
;  1703             mov rcx,127 -- (3+58*2+1+5+2) -- (not dwMagicT/E, not dwThreadId, pNextcb..pTLS)
;  1704             rep stosq
;  1705             mov dword[rdx+960],#00424342                -- dwMagicB ("BCB\0")
;  1706             mov dword[rdx+964],#00424343                -- dwMagicC ("CCB\0")
;  1707         [PE64]
;  1708             lea rcx,[rdx+968]                           -- lpCriticalSection (p1)
;  1709             call "kernel32.dll","InitializeCriticalSection"
;  1710 --      [ELF64]
;  1711             -- (a mutex (int32) of 0, as already set, is enough)
;  1712         [64]
;  1713 --          mov rax,[rsp+32]    -- [1] pTCB/4
;  1714             mov rdi,[rsp+32]    -- [1] pTCB/4
;  1715           ::freetcbfound
;  1716             mov qword[rbx+rdi*4+24],-1          -- nStatus (normal)
;  1717 --          add rsp,8*5
;  1718 --          pop rsp
;  1719             mov rsp,[rsp+8*5]   -- equivalent to the add/pop
;  1720         []
;  1721             ret
                    ret                   ;#00463111: 303                        np 00 00  2 117      
;  1722 
;  1723 --/*
;  1724 procedure ::mergeone(::)
;  1725 end procedure -- (for Edita/CtrlQ)
;  1726 --*/
;  1727     ::mergeone
;  1728 --------------
;  1729         -- (should only ever be called by the block owner, or fully locked orphaned block handling)
;  1730     [32]
;  1731         -- on entry, return address in [esp] (DOH)
;  1732         --           block ptr in eax and [esp+4] (cleared by this routine)
;  1733         --           block idx(*4) in [esp+8] (cleared by this routine)
;  1734         --           block size in [esp+12] (cleared by this routine) 
;  1735         --           <return address for mergelist or null at [esp+16]>
;  1736         --           tcb/4 in [esp+20]
;  1737         --           (obviously, last two entries cleared by calling routine)
;  1738         mov esi,[eax-4]     -- pRoot
                mov esi,[eax-4]           ;#00463112: 213160 FC                  uv 40 01  1 119      
;  1739         and esi,#FFFFFFFE   -- clear free bit (0b01, needed when looping)
                and esi,-2                ;#00463115: 201346 FEFFFFFF            uv 40 40  1 120 40   
;  1740         mov ecx,[esp+12]    -- block size
                mov ecx,[esp+12]          ;#0046311B: 213114044 0C               vu 02 10  1 120      
;  1741         cmp dword[esi],#00484253    -- dwMagic ("SBH\0")
                cmp dword[esi],4735571    ;#0046311F: 201076 53424800            uv 00 40  2 123    *40*
;  1742 --      jne :memorycorruption
;  1743         je @f
                je #00463128              ;#00463125: 164 01                     v  00 00  1 124      
;  1744             int3
                    int3                  ;#00463127: 314                        np 00 00 13 125      
;  1745       @@:
;  1746         cmp ecx,[esi+8]     -- pRoot.nsbSize (does not include header)
                cmp ecx,[esi+8]           ;#00463128: 073116 08                  uv 00 42  2 138      
;  1747         jne :mergeonenotfull
                jne #0046318C             ;#0046312B: 165 5F                     v  00 00  1 139      
;  1748             -- block fully merged, return it to the global pool
;  1749 --DEV :%retruntoglobalpool (do we really care??)
;  1750             mov edi,[pGtcb]
                    mov edi,[#004021B8] (pGtcb)  ;#0046312D: 213075 B8214000            uv 80 00  1 140      
;  1751             mov [esi+4],ebx             -- dwThreadId(0)
                    mov [esi+4],ebx       ;#00463133: 211136 04                  vu 00 48  1 140      
;  1752             mov [esi+12],edi            -- pTCB/4
                    mov [esi+12],edi      ;#00463136: 211176 0C                  uv 00 C0  1 141      
;  1753             or esi,1
                    or esi,1              ;#00463139: 203316 01                  vu 40 40  1 141      
;  1754             mov [eax],ecx               -- nSize (should already be set?)
                    mov [eax],ecx         ;#0046313C: 211010                     uv 00 03  1 142      
;  1755             mov [eax-4],esi             -- set free bit (0b01) on pRoot
                    mov [eax-4],esi       ;#0046313E: 211160 FC                  vu 00 41  1 142      
;  1756             mov esi,eax
                    mov esi,eax           ;#00463141: 213360                     uv 40 01  1 143      
;  1757             lea ecx,[ebx+edi*4+240]     -- csLock
                    lea ecx,[ebx+edi*4+240]  ;#00463143: 215214273 F0000000         vu 02 88  1 143      
;  1758             cmp dword[ebx+edi*4+236],#00424343  -- dwMagicC ("CCB\0")
                    cmp dword[ebx+edi*4+236],#00424343  ;#0046314A: 201274273 EC000000 43434200 u  00 88  2 144      
;  1759 --          jne :notCCB
;  1760             je @f
                    je #00463158          ;#00463155: 164 01                     v  00 00  1 145      
;  1761                 int3
                        int3              ;#00463157: 314                        np 00 00 13 146      
;  1762           @@:
;  1763 -->         cmp dword[ebx+edi*4+264],#00424345  -- dwMagicE ("ECB\0")
;  1764             cmp dword[ebx+edi*4+272],#00424345  -- dwMagicE ("ECB\0")
                    cmp dword[ebx+edi*4+272],#00424345  ;#00463158: 201274273 10010000 45434200 u  00 88  2 159      
;  1765             jne :notECB
                    jne #004632DC         ;#00463163: 017205 73010000            v  00 00  1 160      
;  1766             push ecx                    -- (save lpCriticalSection/csLock for Leave)
                    push ecx              ;#00463169: 121                        uv 00 02  1 161      
;  1767             call :EnterCriticalSection
                    call #0046308D        ;#0046316A: 350 1EFFFFFF               v  00 00  1 161      
;  1768             mov ecx,[esp+12]            -- idx*4 (+12 as lpCriticalSection still on the stack)
                    mov ecx,[esp+12]      ;#0046316F: 213114044 0C               uv 02 10  1 162      
;  1769             mov eax,[edi*4+ecx+20]      -- tmp:=pGtcb.pFree[idx]
                    mov eax,[ecx+edi*4+20]  ;#00463173: 213104271 14               uv 01 82  1 165 02 *02*
;  1770             mov [esi+4],eax             -- this.pNext:=tmp
                    mov [esi+4],eax       ;#00463177: 211106 04                  uv 00 41  1 166 01   
;  1771             mov [esi+8],ebx             -- this.pPrev:=null
                    mov [esi+8],ebx       ;#0046317A: 211136 08                  vu 00 48  1 166      
;  1772 --          mov [esi-8],ebx             -- this.era:=null (erm?)
;  1773             mov [edi*4+ecx+20],esi      -- pGtcb.pFree[idx]:=this
                    mov [ecx+edi*4+20],esi  ;#0046317D: 211164271 14               uv 00 C2  1 167      
;  1774 --DEV we also want to unlink from pFirst???
;  1775             pop ecx                     -- lpCriticalSection/csLock
                    pop ecx               ;#00463181: 131                        vu 02 00  1 167      
;  1776             call :LeaveCriticalSection
                    call #0046309D        ;#00463182: 350 16FFFFFF               v  00 00  1 168      
;  1777         [64]
;  1778         -- on entry, return address in [rsp] (DOH)
;  1779 --DEV r13,14,15?
;  1780         --           block ptr in rax and [rsp+8] (cleared by this routine)
;  1781         --           block idx(*8) in [rsp+16] (cleared by this routine)
;  1782         --           block size in [rsp+24] (cleared by this routine) 
;  1783         --           <return address for mergelist or null at [rsp+32]>
;  1784         --           tcb/4 in [rsp+40]
;  1785         --           (obviously, last two entries cleared by calling routine)
;  1786         --           Note that, as normal, stack is 8 mod 16 after all that!
;  1787         mov r8,[rax-8]                  -- pRoot
;  1788         and r8l, byte #FE               -- clear free bit (0b01, needed when looping, but not first time thru)
;  1789         mov rcx,[rsp+24]                -- block size
;  1790         cmp dword[r8],#00484253         -- dwMagic ("SBH\0")
;  1791 --      jne :memorycorruption
;  1792         je @f
;  1793             int3
;  1794       @@:
;  1795         cmp rcx,[r8+8]                  -- pRoot.nsbSize (does not include header)
;  1796         jne :mergeonenotfull
;  1797             -- block fully merged, return it to the global pool
;  1798 --DEV :%retruntoglobalpool (do we really care??)
;  1799             mov rdi,[pGtcb]
;  1800             mov [r8+4],ebx              -- dwThreadId(0)
;  1801             mov [r8+16],rdi             -- pTCB/4
;  1802             or r8l, byte 1
;  1803             mov [rax],rcx               -- nSize (should already be set?)
;  1804             mov [rax-8],r8              -- set free bit (0b01) on pRoot
;  1805             mov rsi,rax
;  1806             lea rcx,[rbx+rdi*4+968]     -- csLock
;  1807             cmp dword[rbx+rdi*4+960],#00424342  -- dwMagicB ("BCB\0")
;  1808 --          jne :notCCB
;  1809             je @f
;  1810                 int3
;  1811           @@:
;  1812             cmp dword[rbx+rdi*4+964],#00424343  -- dwMagicC ("CCB\0")
;  1813 --          jne :notCCB
;  1814             je @f
;  1815                 int3
;  1816           @@:
;  1817 -->         cmp dword[rcx+40],#00424345         -- dwMagicE ("ECB\0")
;  1818             cmp dword[rcx+56],#00424345         -- dwMagicE ("ECB\0")
;  1819             jne :notECB
;  1820             push rcx                    -- save lpCriticalSection/csLock (for Leave)
;  1821             call :EnterCriticalSection
;  1822             mov rcx,[rsp+24]            -- idx*8
;  1823             mov rax,[rdi*4+rcx+32]      -- tmp:=pGtcb.pFree[idx]
;  1824             mov [rsi+8],rax             -- this.pNext:=tmp
;  1825             mov [rsi+16],rbx            -- this.pPrev:=null
;  1826 --          mov [rsi-16],rbx            -- this.era:=null (erm?)
;  1827             mov [rdi*4+rcx+32],rsi      -- pGtcb.pFree[idx]:=this
;  1828 --DEV we also want to unlink from pFirst?
;  1829             pop rcx                     -- lpCriticalSection/csLock
;  1830             call :LeaveCriticalSection
;  1831         []
;  1832             jmp :mergeonedone
                    jmp #0046325F         ;#00463187: 351 D3000000               v  00 00  1 169      
;  1833 
;  1834       ::mergeonenotfull
;  1835         [32]
;  1836             -- odd or even?
;  1837             push eax                    -- [1] in case of no merge
                    push eax              ;#0046318C: 120                        uv 00 01  1 170      
;  1838             sub eax,esi
                    sub eax,esi           ;#0046318D: 051360                     vu 01 41  1 170      
;  1839             sub eax,28  -- (superblock header + pRoot + era)
                    sub eax,28            ;#0046318F: 203350 1C                  uv 01 01  1 171      
;  1840             cmp dword[esi],#00484253    -- dwMagic ("SBH\0")
                    cmp dword[esi],4735571  ;#00463192: 201076 53424800            vu 00 40  2 171      
;  1841             jne :notSBH
                    jne #004632DE         ;#00463198: 017205 40010000            v  00 00  1 172      
;  1842 --          cdq                         -- eax -> edx:eax (sign extend)
;  1843             xor edx,edx
                    xor edx,edx           ;#0046319E: 061322                     uv 04 04  1 173      
;  1844             idiv ecx
                    idiv ecx              ;#004631A0: 367371                     np 05 07 46 174      
;  1845             test edx,edx
                    test edx,edx          ;#004631A2: 205322                     uv 00 04  1 220      
;  1846 --          jnz :internalerror
;  1847             jz @f
                    jz #004631A7          ;#004631A4: 164 01                     v  00 00  1 220      
;  1848                 int3
                        int3              ;#004631A6: 314                        np 00 00 13 221      
;  1849           @@:
;  1850             test eax,1
                    test eax,1            ;#004631A7: 251 01000000               uv 00 01  1 234      
;  1851             mov eax,[esp+8]             -- block ptr
                    mov eax,[esp+8]       ;#004631AC: 213104044 08               vu 01 10  1 234      
;  1852             mov ecx,[esp+16]            -- block size
                    mov ecx,[esp+16]      ;#004631B0: 213114044 10               uv 02 10  1 235      
;  1853             jnz :mergeleft
                    jnz #004631BA         ;#004631B4: 165 04                     v  00 00  1 235      
;  1854                 -- check right
;  1855                 add eax,ecx
                        add eax,ecx       ;#004631B6: 001310                     uv 01 03  1 236      
;  1856                 jmp @f
                        jmp #004631C0     ;#004631B8: 353 06                     v  00 00  1 236      
;  1857           ::mergeleft
;  1858                 -- check left
;  1859                 sub eax,ecx
                        sub eax,ecx       ;#004631BA: 051310                     uv 01 03  1 237      
;  1860                 mov [esp+8],eax         -- new block ptr, iff we merge and loop
                        mov [esp+8],eax   ;#004631BC: 211104044 08               uv 00 11  1 238 01   
;  1861           @@:
;  1862             mov edi,[eax-4]             -- pRoot
                    mov edi,[eax-4]       ;#004631C0: 213170 FC                  uv 80 01  1 240    *01*
;  1863             xor esi,edi
                    xor esi,edi           ;#004631C3: 061376                     uv 40 C0  1 241 80   
;  1864             cmp esi,1
                    cmp esi,1             ;#004631C5: 203376 01                  uv 00 40  1 242 40   
;  1865 --          ja :memorycorruption
;  1866             jbe @f
                    jbe #004631D0         ;#004631C8: 166 06                     v  00 00  1 242      
;  1867 --30/5/16:
;  1868                 jmp :mc53
                        jmp #00463613     ;#004631CA: 351 44040000               v  00 00  1 243      
;  1869                 int3
                        int3              ;#004631CF: 314                        np 00 00 13 244      
;  1870           @@:
;  1871             test edi,1
                    test edi,1            ;#004631D0: 367307 01000000            uv 00 80  1 257      
;  1872             jz :nomerge
                    jz #00463220          ;#004631D6: 164 48                     v  00 00  1 257      
;  1873             cmp ecx,[eax]               -- nSize
                    cmp ecx,[eax]         ;#004631D8: 073010                     uv 00 03  2 258      
;  1874         [64]
;  1875             -- odd or even?
;  1876 -- DEV use r12?
;  1877             push rax                    -- [1] in case of no merge
;  1878             sub rax,r8
;  1879             sub rax,48  -- (superblock header + pRoot + era)
;  1880             cmp dword[r8],#00484253     -- dwMagic ("SBH\0")
;  1881             jne :notSBH
;  1882 --          cdq                         -- ?eax -> edx:eax (sign extend)
;  1883             xor rdx,rdx
;  1884             idiv rcx
;  1885             test rdx,rdx
;  1886 --          jnz :internalerror
;  1887             jz @f
;  1888                 int3
;  1889           @@:
;  1890             test rax,1
;  1891             mov rax,[rsp+16]            -- block ptr
;  1892             mov rcx,[rsp+32]            -- block size
;  1893             jnz :mergeleft
;  1894                 -- check right
;  1895                 add rax,rcx
;  1896                 jmp @f
;  1897           ::mergeleft
;  1898                 -- check left
;  1899                 sub rax,rcx
;  1900                 mov [rsp+16],rax        -- new block ptr, iff we merge and loop
;  1901           @@:
;  1902             mov rdi,[rax-8]             -- pRoot
;  1903 -- 10/10/14:
;  1904 --          xor rsi,rdi
;  1905 --          cmp rsi,1
;  1906             xor r8,rdi
;  1907             cmp r8,1
;  1908 --          ja :memorycorruption
;  1909             jbe @f
;  1910 --test/tmp (will only work for pFreePool/mergeone, not mergelist/mergeone.)
;  1911 -- (did not help: error occured mid-opRetf, so line number would be meaningless anyway,
;  1912 --                plus the jmp !iDiag bypassed the natural trapping of int3 in fdbg.)
;  1913 ----                mov rdx,[rsp+48]
;  1914 --              mov rdx,[rsp+56]
;  1915 --              mov al,32                   -- e32hc(era,edi)
;  1916 --              sub rdx,1
;  1917 --              -- (rdi is supposed to be a pRoot, in this one particular case)
;  1918 --              jmp :!iDiag
;  1919                 int3
;  1920           @@:
;  1921             test rdi,1
;  1922             jz :nomerge
;  1923             cmp rcx,[rax]               -- nSize
;  1924         []
;  1925             jne :nomerge
                    jne #00463220         ;#004631DA: 165 44                     v  00 00  1 259      
;  1926                 -- merge blocks - just detach eax from the freelist and loop.
;  1927         [32]
;  1928                 add esp,4                   -- [1] discard 
                        add esp,4         ;#004631DC: 203304 04                  uv 10 10  1 260      
;  1929 --temp:
;  1930 -- blat the middle pRoot (leave some footprints for a hex dump)
;  1931 --mov esi,[esp+4] -- block ptr
;  1932 --add esi,ecx
;  1933 --mov dword[esi-4],-10
;  1934                 mov esi,[eax+4]             -- pNext
                        mov esi,[eax+4]   ;#004631DF: 213160 04                  vu 40 01  1 260      
;  1935                 mov edx,[eax+8]             -- pPrev
                        mov edx,[eax+8]   ;#004631E2: 213120 08                  uv 04 01  1 261      
;  1936                 mov edi,[esp+8]             -- idx(*4)
                        mov edi,[esp+8]   ;#004631E5: 213174044 08               uv 80 10  1 263    *10*
;  1937                 test edx,edx
                        test edx,edx      ;#004631E9: 205322                     vu 00 04  1 263      
;  1938                 jnz :mergeone_midchain
                        jnz #004631FE     ;#004631EB: 165 11                     v  00 00  1 264      
;  1939                     mov edx,[esp+20]        -- tcb/4
                            mov edx,[esp+20]  ;#004631ED: 213124044 14               uv 04 10  1 265      
;  1940                     test esi,esi
                            test esi,esi  ;#004631F1: 205366                     vu 00 40  1 265      
;  1941                     jz @f
                            jz #004631F8  ;#004631F3: 164 03                     v  00 00  1 266      
;  1942                         mov [esi+8],ebx     -- this.pNext.pPrev:=null(=pPrev)
                                mov [esi+8],ebx  ;#004631F5: 211136 08                  uv 00 48  1 267      
;  1943                   @@:
;  1944                     mov [edx*4+edi+20],esi  -- pTCB.pFree[idx]:=this.pNext
                            mov [edi+edx*4+20],esi  ;#004631F8: 211164227 14               vu 00 C4  1 267      
;  1945                     jmp @f
                            jmp #00463208  ;#004631FC: 353 0A                     v  00 00  1 268      
;  1946               ::mergeone_midchain
;  1947                     mov [edx+4],esi         -- this.pPrev.pNext:=this.pNext
                            mov [edx+4],esi  ;#004631FE: 211162 04                  uv 00 44  1 269      
;  1948                     test esi,esi
                            test esi,esi  ;#00463201: 205366                     vu 00 40  1 269      
;  1949                     jz @f
                            jz #00463208  ;#00463203: 164 03                     v  00 00  1 270      
;  1950                         mov [esi+8],edx     -- this.pNext.pPrev:=this.pPrev
                                mov [esi+8],edx  ;#00463205: 211126 08                  uv 00 44  1 271      
;  1951               @@:
;  1952                 mov eax,[esp+4]
                        mov eax,[esp+4]   ;#00463208: 213104044 04               vu 01 10  1 271      
;  1953                 add edi,4
                        add edi,4         ;#0046320C: 203307 04                  uv 80 80  1 272      
;  1954                 add ecx,ecx                 -- (or shl ecx,1)
                        add ecx,ecx       ;#0046320F: 001311                     vu 02 02  1 272      
;  1955                 mov [esp+8],edi             -- idx(*4)
                        mov [esp+8],edi   ;#00463211: 211174044 08               uv 00 90  1 273      
;  1956                 mov [esp+12],ecx            -- block size
                        mov [esp+12],ecx  ;#00463215: 211114044 0C               vu 00 12  1 273      
;  1957                 mov [eax],ecx               -- nSize
                        mov [eax],ecx     ;#00463219: 211010                     uv 00 03  1 274      
;  1958         [64]
;  1959 --              add esp,8                   -- [1] discard 
;  1960                 add rsp,8                   -- [1] discard 
;  1961 --temp:
;  1962 -- blat the middle pRoot (leave some footprints for a hex dump)
;  1963 --mov rsi,[rsp+8]   -- block ptr
;  1964 --add rsi,rcx
;  1965 --mov qword[rsi-8],-10
;  1966                 mov rsi,[rax+8]             -- pNext
;  1967                 mov rdx,[rax+16]            -- pPrev
;  1968                 mov rdi,[rsp+16]            -- idx(*8)
;  1969                 test rdx,rdx
;  1970                 jnz :mergeone_midchain
;  1971                     mov rdx,[rsp+40]        -- tcb/4
;  1972                     test rsi,rsi
;  1973                     jz @f
;  1974                         mov [rsi+16],rbx    -- this.pNext.pPrev:=null(=pPrev)
;  1975                   @@:
;  1976                     mov [rdx*4+rdi+32],rsi  -- pTCB.pFree[idx]:=this.pNext
;  1977                     jmp @f
;  1978               ::mergeone_midchain
;  1979                     mov [rdx+8],rsi         -- this.pPrev.pNext:=this.pNext
;  1980                     test rsi,rsi
;  1981                     jz @f
;  1982 --                      mov [rsi+8],rdx     -- this.pNext.pPrev:=this.pPrev
;  1983                         mov [rsi+16],rdx    -- this.pNext.pPrev:=this.pPrev
;  1984               @@:
;  1985                 mov rax,[rsp+8]             -- block ptr
;  1986                 add rdi,8
;  1987                 add rcx,rcx                 -- (or shl rcx,1)
;  1988                 mov [rsp+16],rdi            -- idx(*8)
;  1989                 mov [rsp+24],rcx            -- block size
;  1990                 mov [rax],rcx               -- nSize
;  1991         []
;  1992                 -- ...and loop back to see what else it can be merged with
;  1993                 jmp :mergeone
                        jmp #00463112     ;#0046321B: 351 F2FEFFFF               v  00 00  1 274      
;  1994 
;  1995           ::nomerge
;  1996                 -- so just add the block to the owned freelist
;  1997         [32]
;  1998                 pop eax                         -- [1] restore
                        pop eax           ;#00463220: 130                        uv 01 00  1 275      
;  1999                 or edi,1                        -- set 0b01 bit...
                        or edi,1          ;#00463221: 203317 01                  vu 80 80  1 275      
;  2000                 mov edx,[esp+20]                -- pTCB/4
                        mov edx,[esp+20]  ;#00463224: 213124044 14               uv 04 10  1 276      
;  2001                 mov [eax-4],edi                 -- ...on pRoot
                        mov [eax-4],edi   ;#00463228: 211170 FC                  uv 00 81  1 278    *01*
;  2002 --              mov [eax-8],ebx                 -- era:=null?
;  2003                 mov [eax+8],ebx                 -- pPrev(:=0)
                        mov [eax+8],ebx   ;#0046322B: 211130 08                  vu 00 09  1 278      
;  2004                 mov edi,[esp+8]                 -- idx(*4)
                        mov edi,[esp+8]   ;#0046322E: 213174044 08               uv 80 10  1 279      
;  2005                 cmp dword[ebx+edx*4],#00424354  -- dwMagicT ("TCB\0")
                        cmp dword[ebx+edx*4],#00424354  ;#00463232: 201074223 54434200         vu 00 0C  2 279      
;  2006 --              jne :notTCB
;  2007                 je @f
                        je #0046323C      ;#00463239: 164 01                     v  00 00  1 280      
;  2008                     int3
                            int3          ;#0046323B: 314                        np 00 00 13 281      
;  2009               @@:
;  2010                 mov ecx,[edx*4+edi+20]          -- tmp:=pFree[idx]
                        mov ecx,[edi+edx*4+20]  ;#0046323C: 213114227 14               uv 02 84  1 294      
;  2011                 mov [eax+4],ecx                 -- this.pNext:=tmp
                        mov [eax+4],ecx   ;#00463240: 211110 04                  uv 00 03  1 295 02   
;  2012                 test ecx,ecx
                        test ecx,ecx      ;#00463243: 205311                     vu 00 02  1 295      
;  2013                 jz @f
                        jz #0046325B      ;#00463245: 164 14                     v  00 00  1 296      
;  2014                     cmp dword[ecx+8],0          -- check tmp.pPrev was 0
                            cmp dword[ecx+8],0  ;#00463247: 203171 08 00               u  00 02  2 297      
;  2015 --                  jnz :pPrevnot0
;  2016                     mov [ecx+8],eax             -- tmp.pPrev:=this
                            mov [ecx+8],eax  ;#0046324B: 211101 08                  vu 00 03  1 298      
;  2017                     jz @f
                            jz #0046325B  ;#0046324E: 164 0B                     v  00 00  1 299      
;  2018                         pop edx
                                pop edx   ;#00463250: 132                        uv 04 00  1 300      
;  2019 --                      mov edi,[esp+?]
;  2020                         mov edi,edx             -- temp
                                mov edi,edx  ;#00463251: 213372                     uv 80 04  1 301 04   
;  2021                         mov al,32               -- e32hc(era,edi)   --DEV show era/line number?
                                mov al,32  ;#00463253: 260 20                     vu 01 00  1 301      
;  2022                         jmp :!iDiag
                                jmp #00463E69 (:!iDiag)  ;#00463255: 351 0F0C0000               v  00 00  1 302      
;  2023                         int3
                                int3      ;#0046325A: 314                        np 00 00 13 303      
;  2024               @@:
;  2025                 mov [edx*4+edi+20],eax          -- pFree[idx]:=this
                        mov [edi+edx*4+20],eax  ;#0046325B: 211104227 14               uv 00 85  1 316      
;  2026         [64]
;  2027                 pop rax                         -- [1] restore
;  2028                 or rdi,1                        -- set 0b01 bit...
;  2029                 mov rdx,[rsp+40]                -- pTCB/4
;  2030                 mov [rax-8],rdi                 -- ...on pRoot
;  2031 --              mov [rax-16],rbx                -- era:=null?
;  2032                 mov [rax+16],rbx                -- pPrev(:=0)
;  2033                 mov rdi,[rsp+16]                -- idx(*8)
;  2034                 cmp dword[rbx+rdx*4],#00424354  -- dwMagicT ("TCB\0")
;  2035 --              jne :notTCB
;  2036                 je @f
;  2037                     int3
;  2038               @@:
;  2039                 mov rcx,[rdx*4+rdi+32]          -- tmp:=pFree[idx]
;  2040 --2/12/14:
;  2041 --              mov [rax+4],rcx                 -- this.pNext:=tmp
;  2042                 mov [rax+8],rcx                 -- this.pNext:=tmp
;  2043                 test rcx,rcx
;  2044                 jz @f
;  2045                     cmp qword[rcx+16],0         -- check tmp.pPrev was 0
;  2046 --                  jnz :pPrevnot0
;  2047                     mov [rcx+16],rax            -- tmp.pPrev:=this
;  2048                     jz @f
;  2049                         pop rdx
;  2050 --                      mov rdi,[rsp+?]
;  2051                         mov rdi,rdx             -- temp
;  2052                         mov al,32               -- e32hc(era,edi)   --DEV show era/line number?
;  2053                         jmp :!iDiag
;  2054                         int3
;  2055               @@:
;  2056                 mov [rdx*4+rdi+32],rax          -- pFree[idx]:=this
;  2057         []
;  2058       ::mergeonedone
;  2059     [32]
;  2060         ret 12
                ret 12                    ;#0046325F: 302 0C00                   np 00 00  3 317      
;  2061     [64]
;  2062         ret 24
;  2063     []
;  2064 
;  2065 --/*
;  2066 procedure ::mergelist(::)
;  2067 end procedure -- (for Edita/CtrlQ)
;  2068 --*/
;  2069     ::mergelist
;  2070 ---------------
;  2071     [32]
;  2072         -- on entry, <return address in [esp]>
;  2073         --           tcb/4 in [esp+4].
;  2074         --           list head in eax and [esp+8], (shd not be 0)
;  2075         --           block size in [esp+12],
;  2076         --           block idx(*4) in [esp+16],
;  2077         -- calling routine is responsible for removing the above
;  2078         -- (no specific result)
;  2079         mov ecx,[eax+4]     -- get/set pNext now
                mov ecx,[eax+4]           ;#00463262: 213110 04                  uv 02 01  1 320      
;  2080         mov edi,[esp+12]    -- block size
                mov edi,[esp+12]          ;#00463265: 213174044 0C               vu 80 10  1 320      
;  2081         mov edx,[esp+16]    -- block idx
                mov edx,[esp+16]          ;#00463269: 213124044 10               uv 04 10  1 321      
;  2082         mov [esp+8],ecx     -- new list head
                mov [esp+8],ecx           ;#0046326D: 211114044 08               vu 00 12  1 321      
;  2083         -- (the following 3 parameters are cleared by mergeone)
;  2084         push edi            -- block size
                push edi                  ;#00463271: 127                        uv 00 80  1 322      
;  2085         push edx            -- block idx
                push edx                  ;#00463272: 122                        vu 00 04  1 322      
;  2086         push eax            -- block ptr
                push eax                  ;#00463273: 120                        uv 00 01  1 323      
;  2087         call :mergeone
                call #00463112            ;#00463274: 350 99FEFFFF               v  00 00  1 323      
;  2088         mov eax,[esp+8]     -- pNext
                mov eax,[esp+8]           ;#00463279: 213104044 08               uv 01 10  1 324      
;  2089         test eax,eax
                test eax,eax              ;#0046327D: 205300                     uv 00 01  1 325 01   
;  2090     [64]
;  2091         -- on entry, <return address in [rsp]>
;  2092         --           tcb/4 in [rsp+8].
;  2093         --           list head in rax and [rsp+16], (shd not be 0)
;  2094         --           block size in [rsp+24],
;  2095         --           block idx(*8) in [rsp+32],
;  2096         -- calling routine is responsible for removing the above
;  2097         -- (no specific result)
;  2098         mov rcx,[rax+8]     -- get/set pNext now
;  2099         mov rdi,[rsp+24]    -- block size
;  2100         mov rdx,[rsp+32]    -- block idx
;  2101         mov [rsp+16],rcx    -- new list head
;  2102         -- (the following 3 parameters are cleared by mergeone)
;  2103         push rdi            -- block size
;  2104         push rdx            -- block idx
;  2105         push rax            -- block ptr
;  2106         call :mergeone
;  2107         mov rax,[rsp+16]    -- pNext
;  2108         test rax,rax
;  2109     []
;  2110         jne :mergelist
                jne #00463262             ;#0046327F: 165 E1                     v  00 00  1 325      
;  2111         ret
                ret                       ;#00463281: 303                        np 00 00  2 326      
;  2112 
;  2113 --/*
;  2114 procedure ::scan_orphans(::)
;  2115 end procedure -- (for Edita/CtrlQ)
;  2116 --*/
;  2117   ::scan_orphans
;  2118 ----------------
;  2119     [32]
;  2120         -- on entry esi is a locked tcb with nStatus of -2 (orphaned)
;  2121         -- esi is preserved, all other registers are trashed.
;  2122         push dword -3                       -- [1] new nStatus (free, iff everything merges)
                push -3                   ;#00463282: 152 FD                     uv 00 00  1 328      
;  2123         mov edi,0                           -- idx*4
                mov edi,0                 ;#00463284: 277 00000000               vu 80 00  1 328      
;  2124         mov edx,24                          -- block size
                mov edx,24                ;#00463289: 272 18000000               uv 04 00  1 329      
;  2125       ::scanorphanlooptop
;  2126             mov eax,[esi*4+edi+128]         -- is pNofl[idx]!=0?
                    mov eax,[edi+esi*4+128]  ;#0046328E: 213204267 80000000         uv 01 C0  1 331    *80*
;  2127             test eax,eax
                    test eax,eax          ;#00463295: 205300                     uv 00 01  1 332 01   
;  2128             jz @f
                    jz #004632AD          ;#00463297: 164 14                     v  00 00  1 332      
;  2129                 mov [esi*4+edi+128],ebx     -- pNofl[idx]:=0
                        mov [edi+esi*4+128],ebx  ;#00463299: 211234267 80000000         uv 00 C8  1 333      
;  2130                 push edi                    -- [2] idx*4
                        push edi          ;#004632A0: 127                        vu 00 80  1 333      
;  2131                 push edx                    -- [3] block size
                        push edx          ;#004632A1: 122                        uv 00 04  1 334      
;  2132                 push eax                    -- [4] list head
                        push eax          ;#004632A2: 120                        vu 00 01  1 334      
;  2133                 push esi                    -- [5] pTCB/4
                        push esi          ;#004632A3: 126                        uv 00 40  1 335      
;  2134                 -- recap: mergelist expects
;  2135                 --   return address in [esp],
;  2136                 --   tcb/4 in [esp+4],
;  2137                 --   list head in eax and [esp+8], 
;  2138                 --   block size in [esp+12],
;  2139                 --   block idx(*4) in [esp+16],
;  2140                 -- calling routine is responsible for removing the above
;  2141                 call :mergelist
                        call #00463262    ;#004632A4: 350 B9FFFFFF               v  00 00  1 335      
;  2142                 pop esi                     -- [5] restore pTCB/4
                        pop esi           ;#004632A9: 136                        uv 40 00  1 336      
;  2143                 pop eax                     -- [4] list head (discard)
                        pop eax           ;#004632AA: 130                        vu 01 00  1 336      
;  2144                 pop edx                     -- [3] restore block size
                        pop edx           ;#004632AB: 132                        uv 04 00  1 337      
;  2145                 pop edi                     -- [2] restore idx
                        pop edi           ;#004632AC: 137                        vu 80 00  1 337      
;  2146           @@:
;  2147             cmp dword[esi*4+edi+20],0       -- is pFree[idx]!=0?
                    cmp dword[edi+esi*4+20],0  ;#004632AD: 203174267 14 00            u  00 C0  2 340    *80*
;  2148             je @f
                    je #004632BB          ;#004632B2: 164 07                     v  00 00  1 341      
;  2149                 mov dword[esp],-2           -- leave nStatus as -2 (orphaned)
                        mov [esp], dword -2  ;#004632B4: 307004044 FEFFFFFF         uv 00 10  1 342      
;  2150           @@:
;  2151             add edi,4
                    add edi,4             ;#004632BB: 203307 04                  vu 80 80  1 342      
;  2152             add edx,edx
                    add edx,edx           ;#004632BE: 001322                     uv 04 04  1 343      
;  2153             cmp edi,108 -- (=27*4)
                    cmp edi,108           ;#004632C0: 203377 6C                  vu 00 80  1 343      
;  2154             jl :scanorphanlooptop
                    jl #0046328E          ;#004632C3: 174 C9                     v  00 00  1 344      
;  2155         pop dword[ebx+esi*4+16]             -- [1] new nStatus
                pop dword[ebx+esi*4+16]   ;#004632C5: 217104263 10               np 00 48  3 345      
;  2156     [64]
;  2157         -- on entry rsi is a locked tcb with nStatus of -2
;  2158         -- rsi is preserved, all other registers are trashed.
;  2159         push qword -3                       -- [1] new nStatus (free, iff everything merges)
;  2160         mov rdi,0                           -- idx*8
;  2161         mov rdx,44                          -- block size
;  2162       ::scanorphanlooptop
;  2163             mov rax,[rsi*4+rdi+496]         -- is pNofl[idx]!=0?
;  2164             test rax,rax
;  2165             jz @f
;  2166 --6/11/16:
;  2167 --              mov [rsi*4+rdi+496],ebx     -- pNofl[idx]:=0
;  2168                 mov [rsi*4+rdi+496],rbx     -- pNofl[idx]:=0
;  2169                 push rdi                    -- [2] idx*8
;  2170                 push rdx                    -- [3] block size
;  2171                 push rax                    -- [4] list head
;  2172                 push rsi                    -- [5] pTCB/4
;  2173                 -- recap: mergelist expects
;  2174                 --   return address in [rsp],
;  2175                 --   tcb/4 in [rsp+8],
;  2176                 --   list head in rax and [rsp+16], 
;  2177                 --   block size in [rsp+24],
;  2178                 --   block idx(*8) in [rsp+32],
;  2179                 -- calling routine is responsible for removing the above
;  2180                 call :mergelist
;  2181                 pop rsi                     -- [5] restore pTCB/4
;  2182                 pop rax                     -- [4] list head (discard)
;  2183                 pop rdx                     -- [3] restore block size
;  2184                 pop rdi                     -- [2] restore idx
;  2185           @@:
;  2186             cmp qword[rsi*4+rdi+32],0       -- is pFree[idx]!=0?
;  2187             je @f
;  2188                 mov qword[rsp],-2           -- leave nStatus as -2 (orphaned)
;  2189           @@:
;  2190             add rdi,8
;  2191             add rdx,rdx
;  2192 --          cmp edi,108 -- (=27*4)
;  2193             cmp rdi,464 -- (=58*8)
;  2194             jl :scanorphanlooptop
;  2195 --      pop qword[rbx+rsi*4+24]             -- [1] new nStatus
;  2196         pop rax
;  2197 --DEV 9/10/14 (spotted in passing)
;  2198 --      mov [ebx+esi*4+16],rax              -- [1] new nStatus
;  2199 --6/11/16 (DEV: did I replace the pop because pilasm.e was[/is] not coping with it??)
;  2200 --      mov [ebx+esi*4+24],rax              -- [1] new nStatus
;  2201         mov [rbx+rsi*4+24],rax              -- [1] new nStatus
;  2202     []
;  2203         ret
                ret                       ;#004632C9: 303                        np 00 00  2 348      
;  2204 
;  2205 --
;  2206 -- NOTE: it seemed like a clever idea to common up diagnostics, but that
;  2207 --        just made the diagnostics themselves very much harder to debug!
;  2208 --        (as needed I expect to gradually undo/inline the following..)
;  2209 --
;  2210 --    ::memorycorruption    (..much like I've already done with this)
;  2211 --      int3
;  2212 --      nop
;  2213 --    ::pPrevnot0   -- e32hc(era,edi)
;  2214 --          -- first, clear that offending tmp.pPrev
;  2215 --          -- (not ideal, but might reduce diaglooping)
;  2216 --          -- (may also need to unlock)
;  2217 --          [32]
;  2218 --              mov dword[ecx+8],0
;  2219 --              mov ecx,2
;  2220 --              pop edx
;  2221 --              add esp,12
;  2222 --          [64]
;  2223 --              mov qword[rcx+16],0
;  2224 --              mov rcx,2
;  2225 --              pop rdx
;  2226 --              add rsp,24
;  2227 --          []
;  2228 --              mov al,32
;  2229 --              jmp :!iDiag
;  2230 --              int3
;  2231 --              nop
;  2232 --    ::internalerror
;  2233 --      int3
;  2234 --      nop
;  2235 --    ::invalidmemoryrequest
;  2236 --      int3
;  2237 --      nop
;  2238 --    ::memoryallocationfailure     -- e77phroom?
;  2239 --      int3
;  2240 --      nop
;  2241       ::deallocerrunknowntype
;  2242         [32]
;  2243             mov edx,[esp+4]
                    mov edx,[esp+4]       ;#004632CA: 213124044 04               uv 04 10  1 350      
;  2244             mov al,32
                    mov al,32             ;#004632CE: 260 20                     vu 01 00  1 350      
;  2245             sub edx,1
                    sub edx,1             ;#004632D0: 203352 01                  uv 04 04  1 351      
;  2246             mov edi,edx
                    mov edi,edx           ;#004632D3: 213372                     uv 80 04  1 352 04   
;  2247         [64]
;  2248             mov rdx,[rsp+8]
;  2249             mov al,32
;  2250             sub rdx,1
;  2251             mov rdi,rdx
;  2252         []
;  2253             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#004632D5: 351 8F0B0000               v  00 00  1 352      
;  2254             int3
                    int3                  ;#004632DA: 314                        np 00 00 13 353      
;  2255         nop
                nop                       ;#004632DB: 220                        uv 00 00  1 366      
;  2256 --    ::notCCB
;  2257 --      int3
;  2258 --      nop
;  2259       ::notECB
;  2260         int3
                int3                      ;#004632DC: 314                        np 00 00 13 367      
;  2261         nop
                nop                       ;#004632DD: 220                        uv 00 00  1 380      
;  2262       ::notSBH
;  2263         int3
                int3                      ;#004632DE: 314                        np 00 00 13 381      
;  2264         nop
                nop                       ;#004632DF: 220                        uv 00 00  1 394      
;  2265 --    ::notTCB
;  2266 --      int3
;  2267 --      nop
;  2268 --    ::notb01
;  2269 --      int3
;  2270 --      nop
;  2271       ::sizeErr
;  2272         int3
                int3                      ;#004632E0: 314                        np 00 00 13 395      
;  2273         nop
                nop                       ;#004632E1: 220                        uv 00 00  1 408      
;  2274       ::pfreeidxnz
;  2275         int3
                int3                      ;#004632E2: 314                        np 00 00 13 409      
;  2276         nop
                nop                       ;#004632E3: 220                        uv 00 00  1 422      
;  2277       ::listheadz
;  2278         int3
                int3                      ;#004632E4: 314                        np 00 00 13 423      
;  2279         nop
                nop                       ;#004632E5: 220                        uv 00 00  1 436      
;  2280       ::idxlz
;  2281         -- [DEV] improve this...
;  2282 --      jmp :%e02atdb0
;  2283         int3
                int3                      ;#004632E6: 314                        np 00 00 13 437      
;  2284         nop
                nop                       ;#004632E7: 220                        uv 00 00  1 450      
;  2285 --    ::e37atambpi
;  2286 --      int3
;  2287 --      nop
;  2288       ::e38atfmba   -- argument to free must be an atom
;  2289         int3
                int3                      ;#004632E8: 314                        np 00 00 13 451      
;  2290         nop
                nop                       ;#004632E9: 220                        uv 00 00  1 464      
;  2291 
;  2292 --/*
;  2293 procedure :%pGetPool(:%)
;  2294 end procedure -- (for Edita/CtrlQ)
;  2295 --*/
;  2296     :%pGetPool
;  2297 --------------
;  2298     [32]
;  2299         -- on entry ecx is the required length (in bytes, including any headers)
;  2300         --          edx is <era>
;  2301         -- on exit, edx is the allocated size and eax is the raw pointer, and
;  2302         --          all other registers are trashed.
;  2303         -- the returned memory is left filled with whatever garbage was there.
;  2304         -- can return 0 (which should be fatal for everything except allocate())
;  2305 sub edx,1
        sub edx,1                         ;#004632EA: 203352 01                  vu 04 04  1 464      
;  2306         push edx    -- [0] era
                push edx                  ;#004632ED: 122                        uv 00 04  1 465      
;  2307         push ecx    -- [1] save required size
                push ecx                  ;#004632EE: 121                        vu 00 02  1 465      
;  2308         xor ebx,ebx -- (save some grief)
                xor ebx,ebx               ;#004632EF: 061333                     uv 08 08  1 466      
;  2309         call :pGetThread    -- (eax:=dwThreadId; most regs trashed)
                call #00463029            ;#004632F1: 350 33FDFFFF               v  00 00  1 466      
;  2310         push eax    -- [2] save thread id
                push eax                  ;#004632F6: 120                        uv 00 01  1 467      
;  2311         mov esi,[pGtcb]
                mov esi,[#004021B8] (pGtcb)  ;#004632F7: 213065 B8214000            vu 40 00  1 467      
;  2312         test esi,esi
                test esi,esi              ;#004632FD: 205366                     uv 00 40  1 468      
;  2313     [64]
;  2314         -- on entry rcx is the required length (in bytes, including any headers)
;  2315         --          rdx is <era>
;  2316         -- on exit, rdx is the allocated size and rax is the raw pointer, and
;  2317         --          all other registers are trashed.
;  2318         -- the returned memory is left filled with whatever garbage was there.
;  2319         -- can return 0 (which should be fatal for everything except allocate())
;  2320         sub rsp,8*11    -- minimum shadow space plus align/temp stores:
;  2321                         -- [rsp+0/8/16/24] shadow space <no longer rqd/used>
;  2322                         -- [rsp]    temp result     \
;  2323                         -- [rsp+8]  unused           \  ( recent
;  2324                         -- [rsp+16] asize (>8K)      /   additions)
;  2325                         -- [rsp+24] idx*8 for ""    /
;  2326                         -- [rsp+32] [1]required size
;  2327                         -- [rsp+40] lpCriticalSection
;  2328                         -- [rsp+48] [2]dwThreadId
;  2329                         -- [rsp+56] idx*8
;  2330                         -- [rsp+64] pTCB/4
;  2331                         -- [rsp+72] rqd size, rounded up (<2*[1])
;  2332                         -- [rsp+80] <era>
;  2333         xor rbx,rbx     -- (save some grief)
;  2334         mov [rsp+80],rdx    -- [0] era
;  2335         mov [rsp+32],rcx    -- [1] save required size
;  2336         call :pGetThread    -- (rax:=dwThreadId; most regs trashed)
;  2337         mov [rsp+48],eax    -- [2] save thread id
;  2338         mov rsi,[pGtcb]
;  2339         test rsi,rsi
;  2340     []
;  2341         jnz @f
                jnz #00463365             ;#004632FF: 165 64                     v  00 00  1 468      
;  2342             -- create a thread control block for the global pool...
;  2343             call :newtcb                -- (edi/rdi := pTCB/4)
                    call #004630A5        ;#00463301: 350 9FFDFFFF               v  00 00  1 469      
;  2344     [32]
;  2345             mov dword[ebx+edi*4+16],-4  -- nStatus (global pool)
                    mov [ebx+edi*4+16], dword -4  ;#00463306: 307104273 10 FCFFFFFF      uv 00 88  1 470      
;  2346             mov [pGtcb],edi
                    mov [#004021B8] (pGtcb),edi  ;#0046330E: 211075 B8214000            vu 00 80  1 470      
;  2347     [64]
;  2348             mov qword[rbx+rdi*4+24],-4  -- nStatus (global pool)
;  2349             mov [pGtcb],rdi
;  2350     []
;  2351           ::newcttcb
;  2352             -- ...and one for the current thread
;  2353     [32]
;  2354             mov ecx,[pGtcb]
                    mov ecx,[#004021B8] (pGtcb)  ;#00463314: 213015 B8214000            uv 02 00  1 471      
;  2355             shl ecx,2
                    shl ecx,2             ;#0046331A: 301341 02                  u  02 02  1 472      
;  2356             add ecx,240     -- csLock
                    add ecx,240           ;#0046331D: 201301 F0000000            uv 02 02  1 473 02   
;  2357             cmp dword[ecx-4],#00424343      -- dwMagicC ("CCB\0")
                    cmp dword[ecx-4],#00424343  ;#00463323: 201171 FC 43434200         u  00 02  2 476    *02*
;  2358 --          jne :notCCB
;  2359             je :CCBok
                    je #0046332D          ;#0046332A: 164 01                     v  00 00  1 477      
;  2360                 int3
                        int3              ;#0046332C: 314                        np 00 00 13 478      
;  2361           ::CCBok
;  2362 -->         cmp dword[ecx+24],#00424345     -- dwMagicE ("ECB\0")
;  2363             cmp dword[ecx+32],#00424345     -- dwMagicE ("ECB\0")
                    cmp dword[ecx+32],#00424345  ;#0046332D: 201171 20 45434200         u  00 02  2 491      
;  2364             jne :notECB
                    jne #004632DC         ;#00463334: 165 A6                     v  00 00  1 492      
;  2365             push ecx                        -- lpCriticalSection/csLock (for Leave)
                    push ecx              ;#00463336: 121                        uv 00 02  1 493      
;  2366     [64]
;  2367             mov rcx,[pGtcb]
;  2368             shl rcx,2
;  2369             add rcx,968     -- csLock
;  2370             cmp dword[rcx-8],#00424342      -- dwMagicB ("BCB\0")
;  2371 --          jne :notCCB
;  2372             je :CCBok
;  2373                 int3
;  2374           ::CCBok
;  2375             cmp dword[rcx-4],#00424343      -- dwMagicC ("CCB\0")
;  2376 --          jne :notCCB
;  2377             je :CCBok2
;  2378                 int3
;  2379           ::CCBok2
;  2380 -->         cmp dword[rcx+40],#00424345     -- dwMagicE ("ECB\0")
;  2381             cmp dword[rcx+56],#00424345     -- dwMagicE ("ECB\0")
;  2382             jne :notECB
;  2383             mov [rsp+40],rcx            -- save lpCriticalSection/csLock (for Leave)
;  2384     []
;  2385             call :EnterCriticalSection
                    call #0046308D        ;#00463337: 350 51FDFFFF               v  00 00  1 493      
;  2386             call :newtcb                -- (edi/rdi := pTCB/4)
                    call #004630A5        ;#0046333C: 350 64FDFFFF               v  00 00  1 494      
;  2387     [32]
;  2388             mov esi,edi
                    mov esi,edi           ;#00463341: 213367                     uv 40 80  1 495      
;  2389             mov edi,[pGtcb]
                    mov edi,[#004021B8] (pGtcb)  ;#00463343: 213075 B8214000            vu 80 00  1 495      
;  2390             mov eax,[esp+4]             -- [2] thread id
                    mov eax,[esp+4]       ;#00463349: 213104044 04               uv 01 10  1 496      
;  2391             mov edx,[ebx+edi*4+8]       -- edx:=pGtcb.pNxtcb
                    mov edx,[ebx+edi*4+8]  ;#0046334D: 213124273 08               uv 04 88  1 498    *80*
;  2392 --          mov [gt1tcb],edx            -- (save for pGetStdCS)
;  2393             mov [ebx+esi*4+8],edx       -- new.pNxtcb:=edx
                    mov [ebx+esi*4+8],edx  ;#00463351: 211124263 08               uv 00 4C  1 499 04   
;  2394             mov [ebx+esi*4+4],eax       -- new.dwThreadId:=eax
                    mov [ebx+esi*4+4],eax  ;#00463355: 211104263 04               vu 00 49  1 499      
;  2395             mov [ebx+edi*4+8],esi       -- pGtcb.pNxtcb:=new
                    mov [ebx+edi*4+8],esi  ;#00463359: 211164273 08               uv 00 C8  1 500      
;  2396             pop ecx                     -- lpCriticalSection/csLock
                    pop ecx               ;#0046335D: 131                        vu 02 00  1 500      
;  2397     [64]
;  2398             mov rsi,rdi
;  2399             mov rdi,[pGtcb]
;  2400             mov eax,dword[rsp+48]       -- [2] thread id
;  2401             mov rdx,[rbx+rdi*4+8]       -- rdx:=pGtcb.pNxtcb
;  2402 --          mov [gt1tcb],rdx            -- (save for pGetStdCS)
;  2403             mov [rbx+rsi*4+8],rdx       -- new.pNxtcb:=rdx
;  2404             mov [rbx+rsi*4+4],eax       -- new.dwThreadId:=eax
;  2405             mov [rbx+rdi*4+8],rsi       -- pGtcb.pNxtcb:=new
;  2406             mov rcx,[rsp+40]            -- lpCriticalSection/csLock
;  2407     []  
;  2408             call :LeaveCriticalSection
                    call #0046309D        ;#0046335E: 350 3AFDFFFF               v  00 00  1 501      
;  2409             jmp :tcbfound
                    jmp #0046337D         ;#00463363: 353 18                     v  00 00  1 502      
;  2410 
;  2411       @@:
;  2412     [32]
;  2413         mov esi,dword[ebx+esi*4+8]          -- tcb:=tcb.pNxtcb
                mov esi,[ebx+esi*4+8]     ;#00463365: 213164263 08               uv 40 48  1 503      
;  2414         test esi,esi
                test esi,esi              ;#00463369: 205366                     uv 00 40  1 504 40   
;  2415         jz :newcttcb
                jz #00463314              ;#0046336B: 164 A7                     v  00 00  1 504      
;  2416       :!GetPoolnotTCBa  -- era @ [esp+8]
;  2417         cmp dword[ebx+esi*4],#00424354      -- dwMagicT ("TCB\0")
                cmp dword[ebx+esi*4],#00424354  ;#0046336D: 201074263 54434200         uv 00 48  2 505      
;  2418 --      jne :memorycorruption
;  2419         je :tcbmagicok
                je #00463377              ;#00463374: 164 01                     v  00 00  1 506      
;  2420             int3
                    int3                  ;#00463376: 314                        np 00 00 13 507      
;  2421       ::tcbmagicok
;  2422         cmp dword[ebx+esi*4+4],eax          -- dwThreadId
                cmp [ebx+esi*4+4],eax     ;#00463377: 071104263 04               uv 00 49  2 520      
;  2423     [64]
;  2424         mov rsi,qword[rbx+rsi*4+8]          -- tcb:=tcb.pNxtcb
;  2425         test rsi,rsi
;  2426         jz :newcttcb
;  2427       :!GetPoolnotTCBa  -- era @ [rsp+80]
;  2428         cmp dword[rbx+rsi*4],#00424354      -- dwMagicT ("TCB\0")
;  2429 --      jne :memorycorruption
;  2430         je :tcbmagicok
;  2431             int3
;  2432       ::tcbmagicok
;  2433         cmp dword[rbx+rsi*4+4],eax          -- dwThreadId
;  2434     []
;  2435         jne @b
                jne #00463365             ;#0046337B: 165 E8                     v  00 00  1 521      
;  2436 
;  2437       ::tcbfound
;  2438     [32]
;  2439         pop eax         -- [2] discard the ThreadId
                pop eax                   ;#0046337D: 130                        uv 01 00  1 522      
;  2440         pop ecx         -- [1] restore rqd size
                pop ecx                   ;#0046337E: 131                        vu 02 00  1 522      
;  2441         -- esi contains pTCB/4, stack is now empty
;  2442         push esi        -- [1] pTCB/4
                push esi                  ;#0046337F: 126                        uv 00 40  1 523      
;  2443         -- figure out the required size
;  2444         cmp ecx,#50000000
                cmp ecx,1342177280        ;#00463380: 201371 00000050            vu 00 02  1 523      
;  2445 --      ja :invalidmemoryrequest
;  2446         jb @f
                jb #00463389              ;#00463386: 162 01                     v  00 00  1 524      
;  2447             int3
                    int3                  ;#00463388: 314                        np 00 00 13 525      
;  2448       @@:
;  2449         add ecx,8       -- add space for pRoot + era
                add ecx,8                 ;#00463389: 203301 08                  uv 02 02  1 538      
;  2450         mov edx,24      -- size
                mov edx,24                ;#0046338C: 272 18000000               vu 04 00  1 538      
;  2451         mov edi,0       -- idx*4
                mov edi,0                 ;#00463391: 277 00000000               uv 80 00  1 539      
;  2452       @@:
;  2453         cmp edx,ecx
                cmp edx,ecx               ;#00463396: 071312                     vu 00 06  1 539      
;  2454         jge @f
                jge #004633A1             ;#00463398: 175 07                     v  00 00  1 540      
;  2455             add edx,edx
                    add edx,edx           ;#0046339A: 001322                     uv 04 04  1 541      
;  2456             add edi,4
                    add edi,4             ;#0046339C: 203307 04                  vu 80 80  1 541      
;  2457             jmp @b
                    jmp #00463396         ;#0046339F: 353 F5                     v  00 00  1 542      
;  2458       @@:
;  2459         push edi        -- [2] save idx(*4)
                push edi                  ;#004633A1: 127                        uv 00 80  1 543      
;  2460         push edx        -- [3] save rqd size, rounded up
                push edx                  ;#004633A2: 122                        vu 00 04  1 543      
;  2461     [64]
;  2462         mov rcx,[rsp+32]    -- [1?] restore required size
;  2463         mov [rsp+64],rsi    -- pTCB/4
;  2464         -- figure out the required size
;  2465 --      mov rdx,#5000000000000000
;  2466         mov rdx,#50000000 --00000000
;  2467         shl rdx,32
;  2468         cmp rcx,rdx
;  2469 --      ja :invalidmemoryrequest
;  2470         jb @f
;  2471             int3
;  2472       @@:
;  2473         add rcx,16      -- add space for pRoot + era
;  2474         mov rdx,44      -- size
;  2475         mov rdi,0       -- idx*8
;  2476       @@:
;  2477         cmp rdx,rcx
;  2478         jge @f
;  2479             add rdx,rdx
;  2480             add rdi,8
;  2481             jmp @b
;  2482       @@:
;  2483         mov [rsp+56],rdi    -- [2?] save idx(*8)
;  2484         mov [rsp+72],rdx    -- [3?] save rqd size, rounded up
;  2485     []
;  2486         -- now look for an available block of >= rqd size
;  2487       ::gpchecknext
;  2488     [32]
;  2489         mov eax,[esi*4+edi+20]  -- pTCB.pFree[idx]
                mov eax,[edi+esi*4+20]    ;#004633A3: 213104267 14               uv 01 C0  1 544      
;  2490         test eax,eax
                test eax,eax              ;#004633A7: 205300                     uv 00 01  1 545 01   
;  2491         jnz :!blockfound
                jnz #004635B9 (:!blockfound)  ;#004633A9: 017205 0A020000            v  00 00  1 545      
;  2492         mov eax,[esi*4+edi+128] -- pTCB.pNofl[idx]
                mov eax,[edi+esi*4+128]   ;#004633AF: 213204267 80000000         uv 01 C0  1 546      
;  2493         test eax,eax
                test eax,eax              ;#004633B6: 205300                     uv 00 01  1 547 01   
;  2494         jnz :retakeownership
                jnz #00463539             ;#004633B8: 017205 7B010000            v  00 00  1 547      
;  2495         add edx,edx
                add edx,edx               ;#004633BE: 001322                     uv 04 04  1 548      
;  2496         add edi,4
                add edi,4                 ;#004633C0: 203307 04                  vu 80 80  1 548      
;  2497         cmp edi,108 -- (=27*4)
                cmp edi,108               ;#004633C3: 203377 6C                  uv 00 80  1 549      
;  2498         jl :gpchecknext
                jl #004633A3              ;#004633C6: 174 DB                     v  00 00  1 549      
;  2499         -- nothing suitable, get a fresh block.
;  2500         -- first: process any orphaned blocks (ie merge and shift what we can into the global pool)
;  2501 --      pushad -- (not entirely sure what we think we are preserving here...)
;  2502                 -- eax=0, edi=108, edx=#A0000000, esi is pTCB/4, which is already pushed and not used again, ecx is done with (size+4)
;  2503         mov esi,[pGtcb]
                mov esi,[#004021B8] (pGtcb)  ;#004633C8: 213065 B8214000            uv 40 00  1 550      
;  2504       @@:
;  2505         mov esi,[ebx+esi*4+8]           -- pNxtcb
                mov esi,[ebx+esi*4+8]     ;#004633CE: 213164263 08               uv 40 48  1 553 40 *40*
;  2506         test esi,esi
                test esi,esi              ;#004633D2: 205366                     uv 00 40  1 554 40   
;  2507         jz @f
                jz #00463400              ;#004633D4: 164 2A                     v  00 00  1 554      
;  2508             cmp dword[ebx+esi*4+16],-2  -- nStatus (orphaned?)
                    cmp dword[ebx+esi*4+16],-2  ;#004633D6: 203174263 10 FE            u  00 48  2 555      
;  2509             jne @b
                    jne #004633CE         ;#004633DB: 165 F1                     v  00 00  1 556      
;  2510             lea edx,[ebx+esi*4+240]     -- csLock
                    lea edx,[ebx+esi*4+240]  ;#004633DD: 215224263 F0000000         uv 04 48  1 557      
;  2511             push edx            -- [?8]                 -- lpCriticalSection (for Leave)
                    push edx              ;#004633E4: 122                        uv 00 04  1 558 04   
;  2512             mov ecx,edx
                    mov ecx,edx           ;#004633E5: 213312                     vu 02 04  1 558      
;  2513             call :EnterCriticalSection
                    call #0046308D        ;#004633E7: 350 A1FCFFFF               v  00 00  1 559      
;  2514             cmp dword[ebx+esi*4+16],-2  -- nStatus (orphaned?)
                    cmp dword[ebx+esi*4+16],-2  ;#004633EC: 203174263 10 FE            u  00 48  2 560      
;  2515             jne :someonelsedidit
                    jne #004633F8         ;#004633F1: 165 05                     v  00 00  1 561      
;  2516                 -- (aside: the biggest worry here and what really warrants the above recheck
;  2517                 --          would be that while we waited it could have been processed /and/ 
;  2518                 --          then reused for a new thread, which is happily using it *right
;  2519                 --          now*, without any locking whatsoever. Just saying, in case you 
;  2520                 --          were thinking "it don't matter if we call scan_orphans twice"...
;  2521                 --          and you'd be quite right, as long as it wasn't /in/ re-use.
;  2522                 --          Of course, it /might/ have been scanned, re-used, and by now
;  2523                 --          re-orphaned (-2), but that's no problem. Anyway, sorry to panic
;  2524                 --          you over - OMG - 7 bytes and/or 1 clock, but we need it!)
;  2525             call :scan_orphans
                    call #00463282        ;#004633F3: 350 8AFEFFFF               v  00 00  1 562      
;  2526           ::someonelsedidit
;  2527             pop ecx                     -- lpCriticalSection/csLock
                    pop ecx               ;#004633F8: 131                        uv 02 00  1 563      
;  2528             call :LeaveCriticalSection
                    call #0046309D        ;#004633F9: 350 9FFCFFFF               v  00 00  1 563      
;  2529     [64]
;  2530         mov rax,[rsi*4+rdi+32]  -- pTCB.pFree[idx]
;  2531         test rax,rax
;  2532         jnz :!blockfound
;  2533         mov rax,[rsi*4+rdi+496] -- pTCB.pNofl[idx]
;  2534         test rax,rax
;  2535         jnz :retakeownership
;  2536         add rdx,rdx
;  2537         add rdi,8
;  2538 --      cmp edi,108 -- (=27*4)
;  2539         cmp rdi,464 -- (=58*8)
;  2540         jl :gpchecknext
;  2541         -- nothing suitable, get a fresh block.
;  2542         -- first: process any orphaned blocks (ie merge and shift what we can into the global pool)
;  2543         mov rsi,[pGtcb]
;  2544       @@:
;  2545         mov rsi,[rbx+rsi*4+8]           -- pNxtcb
;  2546         test rsi,rsi
;  2547         jz @f
;  2548             cmp dword[rbx+rsi*4+24],-2  -- nStatus (orphaned?)
;  2549             jne @b
;  2550             lea rcx,[rbx+rsi*4+968]     -- csLock
;  2551             mov [rsp+40],rcx            -- save lpCriticalSection (for Leave)
;  2552             call :EnterCriticalSection
;  2553             cmp dword[rbx+rsi*4+24],-2  -- nStatus (orphaned?)
;  2554             jne :someonelsedidit
;  2555                 -- (notes as per 32 bit)
;  2556             call :scan_orphans
;  2557           ::someonelsedidit
;  2558             mov rcx,[rsp+40]            -- lpCriticalSection/csLock
;  2559             call :LeaveCriticalSection
;  2560     []
;  2561             jmp @b
                    jmp #004633CE         ;#004633FE: 353 CE                     v  00 00  1 564      
;  2562       @@:
;  2563         -- now check whether something in the global pool will satify our needs:
;  2564     [32]
;  2565         mov esi,[pGtcb]
                mov esi,[#004021B8] (pGtcb)  ;#00463400: 213065 B8214000            uv 40 00  1 565      
;  2566         mov edi,[esp+4]     -- [2] idx*4
                mov edi,[esp+4]           ;#00463406: 213174044 04               vu 80 10  1 565      
;  2567         mov edx,[esp]       -- [3] rqd size
                mov edx,[esp]             ;#0046340A: 213024044                  uv 04 10  1 566      
;  2568     [64]
;  2569         mov rsi,[pGtcb]
;  2570         mov rdi,[rsp+56]    -- [2?] idx*8
;  2571         mov rdx,[rsp+72]    -- [3?] rqd size (rounded up)
;  2572     []
;  2573       ::gpchecknextgpool
;  2574     [32]
;  2575         cmp dword[esi*4+edi+20],0   -- pGtb.pFree[idx]
                cmp dword[edi+esi*4+20],0  ;#0046340D: 203174267 14 00            u  00 C0  2 568    *C0*
;  2576     [64]
;  2577         cmp qword[rsi*4+rdi+32],0   -- pGtb.pFree[idx]
;  2578     []
;  2579         je :gpentryempty
                je #0046348F              ;#00463412: 164 7B                     v  00 00  1 569      
;  2580     [32]
;  2581             push edx        -- [4] temp save (size)
                    push edx              ;#00463414: 122                        uv 00 04  1 570      
;  2582             push ebx        -- [5] temp result
                    push ebx              ;#00463415: 123                        vu 00 08  1 570      
;  2583             lea ecx,[ebx+esi*4+240]             -- pGtcb.csLock
                    lea ecx,[ebx+esi*4+240]  ;#00463416: 215214263 F0000000         uv 02 48  1 571      
;  2584             cmp dword[ebx+esi*4+236],#00424343  -- dwMagicC ("CCB\0")
                    cmp dword[ebx+esi*4+236],#00424343  ;#0046341D: 201274263 EC000000 43434200 u  00 48  2 572      
;  2585 --          jne :notCCB
;  2586             je @f
                    je #0046342B          ;#00463428: 164 01                     v  00 00  1 573      
;  2587                 int3
                        int3              ;#0046342A: 314                        np 00 00 13 574      
;  2588           @@:
;  2589 -->         cmp dword[ecx+24],#00424345         -- dwMagicE ("ECB\0")
;  2590             cmp dword[ecx+32],#00424345         -- dwMagicE ("ECB\0")
                    cmp dword[ecx+32],#00424345  ;#0046342B: 201171 20 45434200         u  00 02  2 587      
;  2591             jne :notECB
                    jne #004632DC         ;#00463432: 017205 A4FEFFFF            v  00 00  1 588      
;  2592             push ecx                            -- save lpCriticalSection (for Leave)
                    push ecx              ;#00463438: 121                        uv 00 02  1 589      
;  2593             call :EnterCriticalSection
                    call #0046308D        ;#00463439: 350 4FFCFFFF               v  00 00  1 589      
;  2594     [64]
;  2595 --DEV use [rsp+16], [rsp] instead:
;  2596 --          mov r14,rdx     -- temp save (size)
;  2597 --          mov r13,rbx     -- temp result
;  2598             mov [rsp+16],rdx    -- temp save (size)
;  2599             mov [rsp],rbx       -- temp result
;  2600             lea rcx,[rbx+rsi*4+968]     -- pGtcb.csLock
;  2601             cmp dword[rbx+rsi*4+960],#00424342  -- dwMagicB ("BCB\0")
;  2602 --          jne :notCCB
;  2603             je @f
;  2604                 int3
;  2605           @@:
;  2606             cmp dword[rbx+rsi*4+964],#00424343  -- dwMagicC ("CCB\0")
;  2607 --          jne :notCCB
;  2608             je @f
;  2609                 int3
;  2610           @@:
;  2611 -->         cmp dword[rcx+40],#00424345         -- dwMagicE ("ECB\0")
;  2612             cmp dword[rcx+56],#00424345         -- dwMagicE ("ECB\0")
;  2613             jne :notECB
;  2614             mov [rsp+40],rcx                    -- save lpCriticalSection (for Leave)
;  2615             call :EnterCriticalSection
;  2616     [32]
;  2617             mov eax,[esi*4+edi+20]      -- recheck (pGtb.pFree[idx])
                    mov eax,[edi+esi*4+20]  ;#0046343E: 213104267 14               uv 01 C0  1 590      
;  2618             test eax,eax
                    test eax,eax          ;#00463442: 205300                     uv 00 01  1 591 01   
;  2619     [64]
;  2620             mov rax,[rsi*4+rdi+32]      -- recheck (pGtb.pFree[idx])
;  2621             test rax,rax
;  2622     []
;  2623             jz :gpentrystolen
                    jz #00463451          ;#00463444: 164 0B                     v  00 00  1 591      
;  2624     [32]
;  2625 --DEV this was already +4?
;  2626                 mov ecx,[eax+4]         -- pNext
                        mov ecx,[eax+4]   ;#00463446: 213110 04                  uv 02 01  1 592      
;  2627                 mov [esi*4+edi+20],ecx  -- pGtb.pFree[idx]
                        mov [edi+esi*4+20],ecx  ;#00463449: 211114267 14               uv 00 C2  1 593 02   
;  2628                 mov [esp+4],eax         -- stash result
                        mov [esp+4],eax   ;#0046344D: 211104044 04               vu 00 11  1 593      
;  2629     [64]
;  2630                 mov rcx,[rax+8]         -- pNext
;  2631                 mov [rsi*4+rdi+32],rcx  -- pGtb.pFree[idx]
;  2632 --              mov r13,rax             -- stash result
;  2633                 mov [rsp],rax           -- stash result
;  2634     []
;  2635           ::gpentrystolen
;  2636     [32]
;  2637             pop ecx                     -- lpCriticalSection/csLock
                    pop ecx               ;#00463451: 131                        uv 02 00  1 594      
;  2638             call :LeaveCriticalSection
                    call #0046309D        ;#00463452: 350 46FCFFFF               v  00 00  1 594      
;  2639             pop eax         -- [5] result or null
                    pop eax               ;#00463457: 130                        uv 01 00  1 595      
;  2640             pop edx         -- [4] restore (size)
                    pop edx               ;#00463458: 132                        vu 04 00  1 595      
;  2641             test eax,eax
                    test eax,eax          ;#00463459: 205300                     uv 00 01  1 596      
;  2642             jz :gpentryempty
                    jz #0046348F          ;#0046345B: 164 32                     v  00 00  1 596      
;  2643             -- perform some quick sanity checks:
;  2644             lea esi,[eax-28]    -- start of superblock
                    lea esi,[eax-28]      ;#0046345D: 215160 E4                  uv 40 01  1 597      
;  2645             mov ecx,[eax-4]     -- pRoot...
                    mov ecx,[eax-4]       ;#00463460: 213110 FC                  vu 02 01  1 597      
;  2646             test ecx,0b01       -- .. should have 0b01 set
                    test ecx,1            ;#00463463: 367301 01000000            uv 00 02  1 598      
;  2647 --          jz :notb01
;  2648             jnz @f
                    jnz #0046346C         ;#00463469: 165 01                     v  00 00  1 598      
;  2649                 int3
                        int3              ;#0046346B: 314                        np 00 00 13 599      
;  2650           @@:
;  2651             sub ecx,1
                    sub ecx,1             ;#0046346C: 203351 01                  uv 02 02  1 612      
;  2652             cmp esi,ecx         -- ...but otherwise equal eax-28
                    cmp esi,ecx           ;#0046346F: 071316                     uv 00 42  1 613 02   
;  2653 --          jnz :notb01
;  2654             jz @f
                    jz #00463474          ;#00463471: 164 01                     v  00 00  1 613      
;  2655                 int3
                        int3              ;#00463473: 314                        np 00 00 13 614      
;  2656           @@:
;  2657             cmp dword[esi],#00484253 -- dwMagic ("SBH\0")
                    cmp dword[esi],4735571  ;#00463474: 201076 53424800            uv 00 40  2 627      
;  2658             jne :notSBH
                    jne #004632DE         ;#0046347A: 017205 5EFEFFFF            v  00 00  1 628      
;  2659             cmp dword[esi+8],edx    -- and pSBH.nsbSize should match
                    cmp [esi+8],edx       ;#00463480: 071126 08                  uv 00 44  2 629      
;  2660             jne :sizeErr
                    jne #004632E0         ;#00463483: 017205 57FEFFFF            v  00 00  1 630      
;  2661             push edx            -- ([4]), size (as expected at gpgotfromgpool)
                    push edx              ;#00463489: 122                        uv 00 04  1 631      
;  2662     [64]
;  2663             mov rcx,[rsp+40]            -- lpCriticalSection/csLock
;  2664             call :LeaveCriticalSection
;  2665 --          mov rax,r13     -- result or null
;  2666 --          mov rdx,r14     -- restore (size)
;  2667             mov rax,[rsp]       -- result or null
;  2668             mov rdx,[rsp+16]    -- restore (size)
;  2669             test rax,rax
;  2670             jz :gpentryempty
;  2671             -- perform some quick sanity checks:
;  2672             lea rsi,[rax-48]    -- start of superblock
;  2673             mov rcx,[rax-8]     -- pRoot...
;  2674             test rcx,0b01       -- .. should have 0b01 set
;  2675 --          jz :notb01
;  2676             jnz @f
;  2677                 int3
;  2678           @@:
;  2679             sub rcx,1
;  2680             cmp rsi,rcx         -- ...but otherwise equal rax-48
;  2681 --          jnz :notb01
;  2682             jz @f
;  2683                 int3
;  2684           @@:
;  2685             cmp dword[rsi],#00484253 -- dwMagic ("SBH\0")
;  2686             jne :notSBH
;  2687             cmp qword[rsi+8],rdx    -- and pSBH.nsbSize should match
;  2688             jne :sizeErr
;  2689 --          -- (gpgotfromgpool expects the size to be in r14)
;  2690             -- (gpgotfromgpool expects the size to be in [rsp+16])
;  2691 --          mov [rsp+16],r14
;  2692     []
;  2693             jmp :gpgotfromgpool -- (resets dwThreadId and pTCB)
                    jmp #00463515         ;#0046348A: 351 86000000               v  00 00  1 631      
;  2694 
;  2695       ::gpentryempty
;  2696     [32]
;  2697         add edx,edx
                add edx,edx               ;#0046348F: 001322                     uv 04 04  1 632      
;  2698         add edi,4
                add edi,4                 ;#00463491: 203307 04                  vu 80 80  1 632      
;  2699         cmp edi,108 -- (=27*4)
                cmp edi,108               ;#00463494: 203377 6C                  uv 00 80  1 633      
;  2700     [64]
;  2701         add rdx,rdx
;  2702         add rdi,8
;  2703 --      cmp rdi,264 -- (=58*8)
;  2704         cmp rdi,464 -- (=58*8)
;  2705     []
;  2706         jl :gpchecknextgpool
                jl #0046340D              ;#00463497: 017214 70FFFFFF            v  00 00  1 633      
;  2707 
;  2708         -- nowt useful in the global pool, get some new memory then.
;  2709     [32]
;  2710         mov edi,[esp+4]     -- [2] idx*4
                mov edi,[esp+4]           ;#0046349D: 213174044 04               uv 80 10  1 634      
;  2711         mov eax,[esp]       -- [3] rqd size
                mov eax,[esp]             ;#004634A1: 213004044                  vu 01 10  1 634      
;  2712 --      push esi            -- [4] save (tcb/4)
;  2713         cmp edi,36
                cmp edi,36                ;#004634A4: 203377 24                  uv 00 80  1 635      
;  2714         jae @f
                jae #004634B3             ;#004634A7: 163 0A                     v  00 00  1 635      
;  2715             mov edi,36
                    mov edi,36            ;#004634A9: 277 24000000               uv 80 00  1 636      
;  2716             mov eax,12288   -- (block size[10])
                    mov eax,12288         ;#004634AE: 270 00300000               vu 01 00  1 636      
;  2717     [64]
;  2718         mov rdi,[rsp+56]    -- [2?] idx*8
;  2719         mov rax,[rsp+72]    -- [3?] rqd size
;  2720         cmp rdi,64
;  2721         jae @f
;  2722             mov rdi,64
;  2723             mov rax,11264
;  2724     []
;  2725       @@:
;  2726         -- create a new superblock and add it (under locking) to the pGtcb->pNxtcb chain
;  2727     [32]
;  2728         mov esi,[pGtcb]
                mov esi,[#004021B8] (pGtcb)  ;#004634B3: 213065 B8214000            uv 40 00  1 637      
;  2729         push eax                    -- [4] save size
                push eax                  ;#004634B9: 120                        vu 00 01  1 637      
;  2730         push edi                    -- [5] save (idx(*4))
                push edi                  ;#004634BA: 127                        uv 00 80  1 638      
;  2731         add eax,20                  -- sizeof(Superblock Header)
                add eax,20                ;#004634BB: 203300 14                  vu 01 01  1 638      
;  2732         lea ecx,[ebx+esi*4+240]     -- pTCB.csLock
                lea ecx,[ebx+esi*4+240]   ;#004634BE: 215214263 F0000000         uv 02 48  1 639      
;  2733         cmp dword[ebx+esi*4+236],#00424343  -- dwMagicC ("CCB\0")
                cmp dword[ebx+esi*4+236],#00424343  ;#004634C5: 201274263 EC000000 43434200 u  00 48  2 640      
;  2734 --      jne :notCCB
;  2735         je @f
                je #004634D3              ;#004634D0: 164 01                     v  00 00  1 641      
;  2736             int3
                    int3                  ;#004634D2: 314                        np 00 00 13 642      
;  2737       @@:
;  2738 -->     cmp dword[ecx+24],#00424345         -- dwMagicE ("ECB\0")
;  2739         cmp dword[ecx+32],#00424345         -- dwMagicE ("ECB\0")
                cmp dword[ecx+32],#00424345  ;#004634D3: 201171 20 45434200         u  00 02  2 655      
;  2740         jne :notECB
                jne #004632DC             ;#004634DA: 017205 FCFDFFFF            v  00 00  1 656      
;  2741         push eax                    -- [6] size/space for result
                push eax                  ;#004634E0: 120                        uv 00 01  1 657      
;  2742         push ecx                    -- save lpCriticalSection (for Leave)
                push ecx                  ;#004634E1: 121                        vu 00 02  1 657      
;  2743         call :EnterCriticalSection
                call #0046308D            ;#004634E2: 350 A6FBFFFF               v  00 00  1 658      
;  2744     [64]
;  2745         mov rsi,[pGtcb]
;  2746 --DEV why not [rsp+56/72]? (oh, I think I know why... but instead why not two extra slots on rsp? 0/8/16/24 are all free!)
;  2747 --      mov r14,rax                 -- [4?] save size
;  2748 --      mov r12,rdi                 -- [5?] save (idx(*8))
;  2749         mov [rsp+16],rax            -- [4?] save size
;  2750         mov [rsp+24],rdi            -- [5?] save (idx(*8))
;  2751 --      add rax,32                  -- sizeof(Superblock Header)
;  2752         lea rcx,[rbx+rsi*4+968]     -- pTCB.csLock
;  2753         cmp dword[rbx+rsi*4+960],#00424342  -- dwMagicB ("BCB\0")
;  2754 --      jne :notCCB
;  2755         je @f
;  2756             int3
;  2757       @@:
;  2758         cmp dword[rbx+rsi*4+964],#00424343  -- dwMagicC ("CCB\0")
;  2759 --      jne :notCCB
;  2760         je @f
;  2761             int3
;  2762       @@:
;  2763 -->     cmp dword[rcx+40],#00424345         -- dwMagicE ("ECB\0")
;  2764         cmp dword[rcx+56],#00424345         -- dwMagicE ("ECB\0")
;  2765         jne :notECB
;  2766         mov [rsp+40],rcx            -- save lpCriticalSection (for Leave)
;  2767         call :EnterCriticalSection
;  2768     [32]
;  2769         mov eax,[esp+4]             -- [6]
                mov eax,[esp+4]           ;#004634E7: 213104044 04               uv 01 10  1 659      
;  2770 --      add eax,20                  -- sizeof(Superblock Header)
;  2771         call :pGetMem
                call #00463019            ;#004634EB: 350 29FBFFFF               v  00 00  1 659      
;  2772         test eax,eax
                test eax,eax              ;#004634F0: 205300                     uv 00 01  1 660      
;  2773         jz @f
                jz #004634FF              ;#004634F2: 164 0B                     v  00 00  1 660      
;  2774 --          add eax,4
;  2775             mov ecx,[ebx+esi*4+12]  -- tmp:=pGtcb.pFirst
                    mov ecx,[ebx+esi*4+12]  ;#004634F4: 213114263 0C               uv 02 48  1 661      
;  2776             mov [eax+16],ecx        -- this.pNxtsb:=tmp
                    mov [eax+16],ecx      ;#004634F8: 211110 10                  uv 00 03  1 662 02   
;  2777             mov [ebx+esi*4+12],eax  -- pGtcb.pFirst:=this
                    mov [ebx+esi*4+12],eax  ;#004634FB: 211104263 0C               vu 00 49  1 662      
;  2778       @@:
;  2779         mov [esp+4],eax             -- [6] store result
                mov [esp+4],eax           ;#004634FF: 211104044 04               uv 00 11  1 663      
;  2780 --      mov esi,eax
;  2781         pop ecx                     -- lpCriticalSection/csLock
                pop ecx                   ;#00463503: 131                        vu 02 00  1 663      
;  2782         call :LeaveCriticalSection
                call #0046309D            ;#00463504: 350 94FBFFFF               v  00 00  1 664      
;  2783     [64]
;  2784 --      mov rax,r14
;  2785         mov rax,[rsp+16]
;  2786         add rax,32                  -- sizeof(Superblock Header)
;  2787         call :pGetMem
;  2788         test rax,rax
;  2789         jz @f
;  2790             mov rcx,[rbx+rsi*4+16]  -- tmp:=pGtcb.pFirst
;  2791             mov [rax+24],rcx        -- this.pNxtsb:=tmp
;  2792             mov [rbx+rsi*4+16],rax  -- pGtcb.pFirst:=this
;  2793       @@:
;  2794 --      mov r13,rax                 -- save result
;  2795         mov [rsp],rax               -- save result
;  2796         mov rcx,[rsp+40]            -- lpCriticalSection/csLock
;  2797         call :LeaveCriticalSection
;  2798     [32]
;  2799         pop esi                     -- [6] result
                pop esi                   ;#00463509: 136                        uv 40 00  1 665      
;  2800         pop edi                     -- [5] restore (idx(*4))
                pop edi                   ;#0046350A: 137                        vu 80 00  1 665      
;  2801         test esi,esi
                test esi,esi              ;#0046350B: 205366                     uv 00 40  1 666      
;  2802         jnz :gpgotfromgpool
                jnz #00463515             ;#0046350D: 165 06                     v  00 00  1 666      
;  2803             add esp,20              -- (now including era)
                    add esp,20            ;#0046350F: 203304 14                  uv 10 10  1 667      
;  2804             xor eax,eax
                    xor eax,eax           ;#00463512: 061300                     vu 01 01  1 667      
;  2805             ret
                    ret                   ;#00463514: 303                        np 00 00  2 668      
;  2806     [64]
;  2807 --      mov rsi,r13                 -- result
;  2808         mov rsi,[rsp]               -- result
;  2809 --      mov rdi,r12                 -- [5?] restore (idx(*8))
;  2810         mov rdi,[rsp+24]            -- [5?] restore (idx(*8))
;  2811         test rsi,rsi
;  2812         jnz :gpgotfromgpool
;  2813 --DEV rax:=0?? (added)
;  2814             add rsp,8*11
;  2815             xor rax,rax
;  2816             ret
;  2817         -- (size is (still) in r14) [erm, [rsp+16]?]
;  2818     []
;  2819 
;  2820 --/*
;  2821 procedure ::gpgotfromgpool(::)
;  2822 end procedure -- (for Edita/CtrlQ)
;  2823 --*/
;  2824       ::gpgotfromgpool
;  2825 ----------------------
;  2826         call :pGetThread    -- (eax:=dwThreadId; most regs trashed)
                call #00463029            ;#00463515: 350 0FFBFFFF               v  00 00  1 670      
;  2827     [32]
;  2828         pop edx             -- [4] size
                pop edx                   ;#0046351A: 132                        uv 04 00  1 671      
;  2829         mov dword[esi],#00484253    -- dwMagic ("SBH\0")
                mov [esi], dword 4735571  ;#0046351B: 307006 53424800            vu 00 40  1 671      
;  2830         mov [esi+4],eax             -- dwThreadId
                mov [esi+4],eax           ;#00463521: 211106 04                  uv 00 41  1 672      
;  2831 --      mov eax,[esp]
;  2832         mov eax,[esp+8]             -- [1] pTCB/4
                mov eax,[esp+8]           ;#00463524: 213104044 08               vu 01 10  1 672      
;  2833         mov [esi+8],edx             -- nsbSize
                mov [esi+8],edx           ;#00463528: 211126 08                  uv 00 44  1 673      
;  2834         mov [esi+12],eax            -- pTCB/4
                mov [esi+12],eax          ;#0046352B: 211106 0C                  vu 00 41  1 673      
;  2835         mov [esi+24],esi            -- set pRoot
                mov [esi+24],esi          ;#0046352E: 211166 18                  uv 00 40  1 674      
;  2836 --      ; eax,edi,edx should be set
;  2837         lea eax,[esi+28] -- hmm...
                lea eax,[esi+28]          ;#00463531: 215106 1C                  vu 01 40  1 674      
;  2838     [64]
;  2839 --      mov rdx,r14                 -- [4?] size
;  2840         mov rdx,[rsp+16]            -- [4?] size
;  2841         mov dword[rsi],#00484253    -- dwMagic ("SBH\0")
;  2842         mov [rsi+4],eax             -- dwThreadId
;  2843         mov rax,[rsp+64]            -- pTCB/4
;  2844         mov [rsi+8],rdx             -- nsbSize
;  2845         mov [rsi+16],rax            -- set sbh.pTCB/4
;  2846         mov [rsi+40],rsi            -- set pRoot
;  2847 --      ; rax,rdi,rdx should be set
;  2848         lea rax,[rsi+48] -- hmm...
;  2849     []
;  2850         jmp :blockdetached
                jmp #004635F6             ;#00463534: 351 BD000000               v  00 00  1 675      
;  2851 
;  2852       ::retakeownership
;  2853     [32]
;  2854         push edi            -- [4] save (idx) (may be unnecessary)
                push edi                  ;#00463539: 127                        uv 00 80  1 676      
;  2855         push edx            -- [5] save (block size)
                push edx                  ;#0046353A: 122                        vu 00 04  1 676      
;  2856         push ebx            -- [6] create space (list head)
                push ebx                  ;#0046353B: 123                        uv 00 08  1 677      
;  2857         push esi            -- [7] save (pTCB/4)
                push esi                  ;#0046353C: 126                        vu 00 40  1 677      
;  2858         lea ecx,[ebx+esi*4+240]         -- csLock
                lea ecx,[ebx+esi*4+240]   ;#0046353D: 215214263 F0000000         uv 02 48  1 678      
;  2859         cmp dword[ebx+esi*4],#00424354  -- dwMagicT ("TCB\0")
                cmp dword[ebx+esi*4],#00424354  ;#00463544: 201074263 54434200         vu 00 48  2 678      
;  2860 --      jne :notTCB
;  2861         je @f
                je #00463560              ;#0046354B: 164 13                     v  00 00  1 679      
;  2862             mov edx,[esp+16]
                    mov edx,[esp+16]      ;#0046354D: 213124044 10               uv 04 10  1 680      
;  2863             mov edi,[esp+12]
                    mov edi,[esp+12]      ;#00463551: 213174044 0C               vu 80 10  1 680      
;  2864             mov al,32                   -- e32hc(era,edi)
                    mov al,32             ;#00463555: 260 20                     uv 01 00  1 681      
;  2865             sub edi,1
                    sub edi,1             ;#00463557: 203357 01                  vu 80 80  1 681      
;  2866             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#0046355A: 351 0A090000               v  00 00  1 682      
;  2867             int3
                    int3                  ;#0046355F: 314                        np 00 00 13 683      
;  2868       @@:
;  2869         cmp dword[ecx-4],#00424343      -- dwMagicC ("CCB\0")
                cmp dword[ecx-4],#00424343  ;#00463560: 201171 FC 43434200         u  00 02  2 696      
;  2870 --      jne :notCCB
;  2871         je @f
                je #0046356A              ;#00463567: 164 01                     v  00 00  1 697      
;  2872             int3
                    int3                  ;#00463569: 314                        np 00 00 13 698      
;  2873       @@:
;  2874 -->     cmp dword[ecx+24],#00424345     -- dwMagicE ("ECB\0")
;  2875         cmp dword[ecx+32],#00424345     -- dwMagicE ("ECB\0")
                cmp dword[ecx+32],#00424345  ;#0046356A: 201171 20 45434200         u  00 02  2 711      
;  2876         jne :notECB
                jne #004632DC             ;#00463571: 017205 65FDFFFF            v  00 00  1 712      
;  2877         push ecx            -- [8]      -- save lpCriticalSection (for Leave)
                push ecx                  ;#00463577: 121                        uv 00 02  1 713      
;  2878         call :EnterCriticalSection
                call #0046308D            ;#00463578: 350 10FBFFFF               v  00 00  1 713      
;  2879     [64]
;  2880         mov [rsp],rsi       -- [7] save pTCB/4
;  2881         mov [rsp+8],rbx     -- [6] space for list head
;  2882         mov [rsp+16],rdx    -- [5] save block size
;  2883         mov [rsp+24],rdi    -- [4] save idx*8
;  2884 
;  2885         lea rcx,[rbx+rsi*4+968]         -- csLock
;  2886         cmp dword[rbx+rsi*4],#00424354  -- dwMagicT ("TCB\0")
;  2887 --      jne :notTCB
;  2888         je @f
;  2889             mov rdx,[rsp+88]
;  2890             mov rdi,[rsp+80]
;  2891             mov al,32                   -- e32hc(era,edi)
;  2892             sub rdi,1
;  2893             jmp :!iDiag
;  2894             int3
;  2895       @@:
;  2896         cmp dword[rcx-8],#00424342      -- dwMagicB ("BCB\0")
;  2897 --      jne :notCCB
;  2898         je @f
;  2899             int3
;  2900       @@:
;  2901         cmp dword[rcx-4],#00424343      -- dwMagicC ("CCB\0")
;  2902 --      jne :notCCB
;  2903         je @f
;  2904             int3
;  2905       @@:
;  2906 -->     cmp dword[rcx+40],#00424345     -- dwMagicE ("ECB\0")
;  2907         cmp dword[rcx+56],#00424345     -- dwMagicE ("ECB\0")
;  2908         jne :notECB
;  2909         mov [rsp+40],rcx            -- save lpCriticalSection (for Leave)
;  2910         call :EnterCriticalSection
;  2911     [32]
;  2912         cmp dword[ebx+esi*4],#00424354      -- magic ("TCB\0")
                cmp dword[ebx+esi*4],#00424354  ;#0046357D: 201074263 54434200         uv 00 48  2 714      
;  2913 --      jne :notTCB
;  2914         je @f
                je #00463587              ;#00463584: 164 01                     v  00 00  1 715      
;  2915             int3
                    int3                  ;#00463586: 314                        np 00 00 13 716      
;  2916       @@:
;  2917         mov eax,[esi*4+edi+128]     -- grab latest (pTCB.pNofl[idx])
                mov eax,[edi+esi*4+128]   ;#00463587: 213204267 80000000         uv 01 C0  1 729      
;  2918         mov [esi*4+edi+128],ebx     -- and zero
                mov [edi+esi*4+128],ebx   ;#0046358E: 211234267 80000000         vu 00 C8  1 729      
;  2919         mov [esp+8],eax     -- [6] store list head
                mov [esp+8],eax           ;#00463595: 211104044 08               uv 00 11  1 730      
;  2920         pop ecx                     -- lpCriticalSection/csLock
                pop ecx                   ;#00463599: 131                        vu 02 00  1 730      
;  2921         call :LeaveCriticalSection
                call #0046309D            ;#0046359A: 350 FEFAFFFF               v  00 00  1 731      
;  2922     [64]
;  2923         cmp dword[rbx+rsi*4],#00424354      -- magic ("TCB\0")
;  2924 --      jne :notTCB
;  2925         je @f
;  2926             int3
;  2927       @@:
;  2928         mov rax,[rsi*4+rdi+496]     -- grab latest (pTCB.pNofl[idx])
;  2929         mov [rsi*4+rdi+496],rbx     -- and zero
;  2930         mov [rsp+8],rax     -- [6] store list head
;  2931         mov rcx,[rsp+40]            -- lpCriticalSection/csLock
;  2932         call :LeaveCriticalSection
;  2933     [32]    
;  2934         mov eax,[esp+4]     -- [6] list head
                mov eax,[esp+4]           ;#0046359F: 213104044 04               uv 01 10  1 732      
;  2935         test eax,eax
                test eax,eax              ;#004635A3: 205300                     uv 00 01  1 733 01   
;  2936         jz :listheadz       -- (no-one else should have done it!)
                jz #004632E4              ;#004635A5: 017204 39FDFFFF            v  00 00  1 733      
;  2937         -- recap: mergelist expects
;  2938         --   return address in [esp],
;  2939         --   tcb/4 in [esp+4],
;  2940         --   list head in eax and [esp+8], 
;  2941         --   block size in [esp+12],
;  2942         --   block idx(*4) in [esp+16],
;  2943         -- calling routine is responsible for removing the above
;  2944     [64]
;  2945         mov rax,[rsp+8]     -- [6] list head
;  2946         test rax,rax
;  2947         jz :listheadz       -- (no-one else should have done it!)
;  2948         -- recap: mergelist expects
;  2949         --   return address in [rsp],
;  2950         --   tcb/4 in [rsp+8],
;  2951         --   list head in rax and [rsp+16], 
;  2952         --   block size in [rsp+24],
;  2953         --   block idx(*8) in [rsp+32],
;  2954         -- calling routine is responsible for removing the above
;  2955     []
;  2956         call :mergelist
                call #00463262            ;#004635AB: 350 B2FCFFFF               v  00 00  1 734      
;  2957     [32]
;  2958         pop esi             -- [7] restore pTCB/4
                pop esi                   ;#004635B0: 136                        uv 40 00  1 735      
;  2959         pop eax             -- [6] list head (discard)
                pop eax                   ;#004635B1: 130                        vu 01 00  1 735      
;  2960         pop edx             -- [5] restore block size
                pop edx                   ;#004635B2: 132                        uv 04 00  1 736      
;  2961         pop edi             -- [4] restore idx
                pop edi                   ;#004635B3: 137                        vu 80 00  1 736      
;  2962     [64]
;  2963         mov rsi,[rsp]       -- [7] restore pTCB/4
;  2964         mov rax,[rsp+8]     -- [6] list head (discard)
;  2965         mov rdx,[rsp+16]    -- [5] restore block size
;  2966         mov rdi,[rsp+24]    -- [4] restore idx
;  2967     []
;  2968         -- go back and see what mergelist has left us, if anything.
;  2969         jmp :gpchecknext
                jmp #004633A3             ;#004635B4: 351 EAFDFFFF               v  00 00  1 737      
;  2970 
;  2971     [32]
;  2972       :!blockfound  -- era @ [esp+12]
;  2973         -- first detach it from the freelist
;  2974         -- (see the recap in blockdetached, [only] esi and ecx are available)
;  2975         -- If we get an exception here, and as :!blockfound is only invoked 
;  2976         --  from one point above, we immediately zero dword[esi*4+edi+20],
;  2977         --  in pFEH.e, to minimise any heap corruption knock-on effects.
;  2978 --DEV should we not check here that pRoot is sensible first?
;  2979         mov esi,[eax+4]             -- pNext
                mov esi,[eax+4]           ;#004635B9: 213160 04                  uv 40 01  1 738      
;  2980         mov ecx,[eax+8]             -- pPrev
                mov ecx,[eax+8]           ;#004635BC: 213110 08                  vu 02 01  1 738      
;  2981         test ecx,ecx
                test ecx,ecx              ;#004635BF: 205311                     uv 00 02  1 739      
;  2982         jnz :!bf_midchain
                jnz #004635E2 (:!bf_midchain)  ;#004635C1: 017205 1B000000            v  00 00  1 739      
;  2983             mov ecx,[esp+8]         -- pTCB/4
                    mov ecx,[esp+8]       ;#004635C7: 213114044 08               uv 02 10  1 740      
;  2984             test esi,esi
                    test esi,esi          ;#004635CB: 205366                     vu 00 40  1 740      
;  2985             jz @f
                    jz #004635D2          ;#004635CD: 164 03                     v  00 00  1 741      
;  2986 --17/4/16:
;  2987 --              cmp esi,#10
;  2988 --              jbe :mc53clear
;  2989               :!blockfoundC0000005
;  2990                 mov [esi+8],ebx     -- this.pNext.pPrev:=null(=pPrev)
                        mov [esi+8],ebx   ;#004635CF: 211136 08                  uv 00 48  1 742      
;  2991           @@:
;  2992             cmp dword[ebx+ecx*4],#00424354  -- magic ("TCB\0")
                    cmp dword[ebx+ecx*4],#00424354  ;#004635D2: 201074213 54434200         vu 00 0A  2 742      
;  2993 --          jne :notTCB
;  2994             je @f
                    je #004635DC          ;#004635D9: 164 01                     v  00 00  1 743      
;  2995                 int3
                        int3              ;#004635DB: 314                        np 00 00 13 744      
;  2996           @@:
;  2997             mov [ecx*4+edi+20],esi  -- pTCB[idx]:=this.pNext
                    mov [edi+ecx*4+20],esi  ;#004635DC: 211164217 14               uv 00 C2  1 757      
;  2998             jmp :blockdetached
                    jmp #004635F6         ;#004635E0: 353 14                     v  00 00  1 757      
;  2999       :!bf_midchain
;  3000 --17/4/16:
;  3001 --          cmp ecx,2
;  3002 --          jbe :mc53clear
;  3003             mov [ecx+4],esi         -- this.pPrev.pNext:=this.pNext
                    mov [ecx+4],esi       ;#004635E2: 211161 04                  uv 00 42  1 758      
;  3004             test esi,esi
                    test esi,esi          ;#004635E5: 205366                     vu 00 40  1 758      
;  3005             jz :blockdetached
                    jz #004635F6          ;#004635E7: 164 0D                     v  00 00  1 759      
;  3006 --17/4/16 trap here (esi is 1)
;  3007                 cmp esi,#800            -- may need other values, maybe scan pGtcb chain? [DEV temp, either way]
                        cmp esi,2048      ;#004635E9: 201376 00080000            uv 00 40  1 760      
;  3008                 ja @f
                        ja #004635F3      ;#004635EF: 167 02                     v  00 00  1 760      
;  3009 --                  -- zero a few pointers in an attempt to prevent infinite loops reporting the error..
;  3010 --                  mov [ecx+4],ebx         -- this.pPrev.pNext:=0
;  3011 --                ::mc53clear
;  3012 --                  mov ecx,[esp+8]         -- pTCB/4
;  3013 --                  mov [eax+4],ebx         -- this.pNext:=0
;  3014 --                  mov [eax+8],ebx         -- this.pPrev:=0
;  3015 --                  mov [ecx*4+edi+20],ebx  -- pTCB[idx]:=0
;  3016                     jmp :mc53
                            jmp #00463613  ;#004635F1: 353 20                     v  00 00  1 761      
;  3017               @@:
;  3018                 mov [esi+8],ecx     -- this.pNext.pPrev:=this.pPrev
                        mov [esi+8],ecx   ;#004635F3: 211116 08                  uv 00 42  1 762      
;  3019     [64]
;  3020       :!blockfound  -- era @ [rsp+80]
;  3021         -- first detach it from the freelist
;  3022         -- (see the recap in blockdetached, [only] esi and ecx are available)
;  3023         -- if we get an exception here, and as :!blockfound is only called 
;  3024         --  from one point above, we immediately zero qword[rsi*4+rdi+32],
;  3025         --  in pFEH.e, to minimise any heap corruption knock-on effects.
;  3026         mov rsi,[rax+8]             -- pNext
;  3027         mov rcx,[rax+16]            -- pPrev
;  3028         test rcx,rcx
;  3029         jnz :!bf_midchain
;  3030             mov rcx,[rsp+64]        -- pTCB/4
;  3031             test rsi,rsi
;  3032             jz @f
;  3033               :!blockfoundC0000005
;  3034                 mov [rsi+16],rbx    -- this.pNext.pPrev:=null(=pPrev)
;  3035           @@:
;  3036             cmp dword[rbx+rcx*4],#00424354 -- magic ("TCB\0")
;  3037 --          jne :notTCB
;  3038             je @f
;  3039                 int3
;  3040           @@:
;  3041 -- 2/12/14:
;  3042 --          mov [rcx*4+rdi+32],esi  -- pTCB[idx]:=this.pNext
;  3043             mov [rcx*4+rdi+32],rsi  -- pTCB[idx]:=this.pNext
;  3044             jmp :blockdetached
;  3045       :!bf_midchain
;  3046             mov [rcx+8],rsi         -- this.pPrev.pNext:=this.pNext
;  3047             test rsi,rsi
;  3048             jz :blockdetached
;  3049                 mov [rsi+16],rcx    -- this.pNext.pPrev:=this.pPrev
;  3050     []
;  3051       ::blockdetached
;  3052     [32]
;  3053         -- recap:
;  3054         --      [esp] is rqd block size, rounded up (<=edx)
;  3055         --      [esp+4] is rqd idx*4 (<=edi) (not actually needed anymore)
;  3056         --      [esp+8] is pTCB/4
;  3057 --DEV   --      [esp+12] is era
;  3058 --      --      [esp+12] is <return address>
;  3059         --      [esp+16] is <return address>
;  3060         --      eax is an available block
;  3061         --      edx is size of ""
;  3062         --      edi is idx*4 of ""
;  3063         --      (obviously we may need to split eax until edx/edi match the stack values)
;  3064         mov ecx,[esp+8]             -- pTCB/4
                mov ecx,[esp+8]           ;#004635F6: 213114044 08               vu 02 10  1 762      
;  3065         mov esi,[eax-4]             -- pRoot [+0b01, sometimes]
                mov esi,[eax-4]           ;#004635FA: 213160 FC                  uv 40 01  1 763      
;  3066         and esi,#FFFFFFFE           -- clear 0b01, the free bit
                and esi,-2                ;#004635FD: 201346 FEFFFFFF            uv 40 40  1 764 40   
;  3067 --17/4/16:
;  3068         cmp esi,#800
                cmp esi,2048              ;#00463603: 201376 00080000            uv 00 40  1 765 40   
;  3069         jbe :mc53
                jbe #00463613             ;#00463609: 166 08                     v  00 00  1 765      
;  3070         cmp dword[esi],#00484253    -- dwMagic ("SBH\0")
                cmp dword[esi],4735571    ;#0046360B: 201076 53424800            uv 00 40  2 766      
;  3071 --      jne :memorycorruption       -- (now checked in splitdone)
;  3072         je @f
                je #00463666              ;#00463611: 164 53                     v  00 00  1 767      
;  3073 --17/4/16:
;  3074             -- memory corruption at #HHHHHHHH(esi) (pGtcb*4=#HHHHHHHH, diff=#HHHHHHHH)
;  3075           ::mc53
;  3076 --          mov edx,[esp+12]
;  3077 --          mov al,53               -- e53mcat(esi,ecx)
;  3078 --          sub edx,1
;  3079 --          mov ecx,[pGtcb]
;  3080 --          jmp :!iDiag
;  3081             push eax
                    push eax              ;#00463613: 120                        uv 00 01  1 768      
;  3082 --          push esi
;  3083             mov edi,[memory_corruption]         -- "memory corruption at #"
                    mov edi,[memory_corruption]  ;#00463614: 213075 CC214000            vu 80 00  1 768      
;  3084             call :%puts1
                    call #004627FE (:%puts1)  ;#0046361A: 350 DFF1FFFF               v  00 00  1 769      
;  3085             mov edx,[esp]
                    mov edx,[esp]         ;#0046361F: 213024044                  uv 04 10  1 770      
;  3086             push 0                      -- no cr
                    push 0                ;#00463622: 152 00                     vu 00 00  1 770      
;  3087             call :%puthex32
                    call #0046283B (:%puthex32)  ;#00463624: 350 12F2FFFF               v  00 00  1 771      
;  3088             mov edi,[pGtcb4eq]          -- ", pGtcb*4=#"
                    mov edi,[#004021D0] (pGtcb4eq)  ;#00463629: 213075 D0214000            uv 80 00  1 772      
;  3089             call :%puts1
                    call #004627FE (:%puts1)  ;#0046362F: 350 CAF1FFFF               v  00 00  1 772      
;  3090             mov edx,[pGtcb]
                    mov edx,[#004021B8] (pGtcb)  ;#00463634: 213025 B8214000            uv 04 00  1 773      
;  3091             shl edx,2
                    shl edx,2             ;#0046363A: 301342 02                  u  04 04  1 774      
;  3092             push 0
                    push 0                ;#0046363D: 152 00                     vu 00 00  1 774      
;  3093             call :%puthex32
                    call #0046283B (:%puthex32)  ;#0046363F: 350 F7F1FFFF               v  00 00  1 775      
;  3094             mov edi,[diffis]            -- ", diff="
                    mov edi,[#004021D4] (diffis)  ;#00463644: 213075 D4214000            uv 80 00  1 776      
;  3095             call :%puts1
                    call #004627FE (:%puts1)  ;#0046364A: 350 AFF1FFFF               v  00 00  1 776      
;  3096             mov ecx,[pGtcb]
                    mov ecx,[#004021B8] (pGtcb)  ;#0046364F: 213015 B8214000            uv 02 00  1 777      
;  3097             mov edx,[esp]
                    mov edx,[esp]         ;#00463655: 213024044                  vu 04 10  1 777      
;  3098             shl ecx,2
                    shl ecx,2             ;#00463658: 301341 02                  u  02 02  1 778      
;  3099             push 1
                    push 1                ;#0046365B: 152 01                     vu 00 00  1 778      
;  3100             sub edx,ecx
                    sub edx,ecx           ;#0046365D: 051312                     uv 04 06  1 779      
;  3101             call :%puthex32
                    call #0046283B (:%puthex32)  ;#0046365F: 350 D7F1FFFF               v  00 00  1 779      
;  3102 --          pop esi
;  3103             pop eax
                    pop eax               ;#00463664: 130                        uv 01 00  1 780      
;  3104 
;  3105             int3
                    int3                  ;#00463665: 314                        np 00 00 13 781      
;  3106       @@:
;  3107         cmp edx,[esp]               -- rqd block size
                cmp edx,[esp]             ;#00463666: 073024044                  uv 00 14  2 794      
;  3108         je :splitdone
                je #0046369E              ;#00463669: 164 33                     v  00 00  1 795      
;  3109         shr edx,1                   -- /2
                shr edx,1                 ;#0046366B: 321352                     u  04 04  1 796      
;  3110         or esi,1                    -- set 0b01 free bit
                or esi,1                  ;#0046366D: 203316 01                  vu 40 40  1 796      
;  3111         sub edi,4                   -- decrease (idx*4)
                sub edi,4                 ;#00463670: 203357 04                  uv 80 80  1 797      
;  3112         js :idxlz
                js #004632E6              ;#00463673: 017210 6DFCFFFF            v  00 00  1 797      
;  3113         mov [eax+edx-4],esi         -- pRoot, with 0b01 set
                mov [eax+edx-4],esi       ;#00463679: 211164020 FC               uv 00 45  1 798      
;  3114 --pHeapD [NO!]
;  3115 --!     mov esi,[esp+12]            -- era
;  3116         mov [eax+edx],edx           -- nSize
                mov [eax+edx],edx         ;#0046367D: 211024020                  vu 00 05  1 798      
;  3117 --!     mov [eax+edx-8],esi         -- era
;  3118         lea esi,[eax+edx]           -- esi:=address of block to put on freelist
                lea esi,[eax+edx]         ;#00463680: 215064020                  uv 40 05  1 799      
;  3119         cmp [ecx*4+edi+20],ebx      -- check pFree[idx] is zero
                cmp [edi+ecx*4+20],ebx    ;#00463683: 071134217 14               vu 00 8A  2 799      
;  3120         jne :pfreeidxnz             -- (if not, why we split bigger block?)
                jne #004632E2             ;#00463687: 017205 55FCFFFF            v  00 00  1 800      
;  3121         mov [eax+edx+4],ebx         -- esi.pNext:=0 (w/o agi stall)
                mov [eax+edx+4],ebx       ;#0046368D: 211134020 04               uv 00 0D  1 801      
;  3122         mov [eax+edx+8],ebx         -- esi.pPrev:=0 ("")
                mov [eax+edx+8],ebx       ;#00463691: 211134020 08               vu 00 0D  1 801      
;  3123         mov [ecx*4+edi+20],esi      -- pFree[idx](which was null):=2nd half
                mov [edi+ecx*4+20],esi    ;#00463695: 211164217 14               uv 00 C2  1 802      
;  3124     [64]
;  3125         -- recap:
;  3126 --afaik, rsp should be the same as just after the:
;  3127 --      sub rsp,8*11    -- minimum shadow space plus align/temp stores:
;  3128 --                      -- [rsp+0/8/16/24] shadow space
;  3129 --                      -- [rsp+32] required size
;  3130 --                      -- [rsp+40] lpCriticalSection
;  3131 --                      -- [rsp+48] dwThreadId
;  3132 --                      -- [rsp+56] idx*8
;  3133 --                      -- [rsp+64] pTCB/4
;  3134 --                      -- [rsp+72] rqd size, rounded up
;  3135 --                      -- [rsp+80] era
;  3136         --      rax is an available block
;  3137         --      rdx is size of ""
;  3138         --      rdi is idx*8 of ""
;  3139         --      (obviously we may need to split rax until rdx/rdi match the stack values)
;  3140         mov rcx,[rsp+64]            -- pTCB/4
;  3141 --      mov rsi,[rax-8]             -- pRoot [+0b01, sometimes]
;  3142         mov r8,[rax-8]              -- pRoot [+0b01, sometimes]
;  3143 --DEV (spotted in passing) disassembles as rsi..., should be esi according to FDBG, should really be rsi...
;  3144 --      and esi,#FFFFFFFE           -- clear 0b01, the free bit
;  3145 --      and rsi,-2                  -- clear 0b01, the free bit
;  3146 --DEV needs a #40 rex...
;  3147 --      and sil,-2                  -- clear 0b01, the free bit
;  3148         and r8l, byte #FE           -- clear 0b01, the free bit
;  3149 --DEV ditto
;  3150 --      cmp dword[esi],#00484253    -- dwMagic ("SBH\0")
;  3151 --      cmp dword[rsi],#00484253    -- dwMagic ("SBH\0")
;  3152         cmp dword[r8],#00484253     -- dwMagic ("SBH\0")
;  3153 --      jne :memorycorruption       -- (now checked in splitdone)
;  3154         je @f
;  3155             int3
;  3156       @@:
;  3157         cmp rdx,[rsp+72]            -- rqd block size
;  3158         je :splitdone
;  3159         shr rdx,1                   -- /2
;  3160 --      or rsi,1                    -- set 0b01 free bit
;  3161         or r8l,1                    -- set 0b01 free bit
;  3162         sub rdi,8                   -- decrease (idx*8)
;  3163         js :idxlz
;  3164 --      mov [rax+rdx-8],rsi         -- pRoot, with 0b01 set
;  3165         mov [rax+rdx-8],r8          -- pRoot, with 0b01 set
;  3166 --pHeapD: [NO!]
;  3167 --!     mov r9,[rsp+80]             -- era
;  3168         mov [rax+rdx],rdx           -- nSize
;  3169 --!     mov [rax+rdx-16],r9         -- era
;  3170         lea rsi,[rax+rdx]           -- rsi:=address of block to put on freelist
;  3171         cmp [rcx*4+rdi+32],rbx      -- check pFree[idx] is zero
;  3172         jne :pfreeidxnz             -- (if not, why we split bigger block?)
;  3173         mov [rax+rdx+8],rbx         -- rsi.pNext:=0 (w/o agi stall)
;  3174         mov [rax+rdx+16],rbx        -- rsi.pPrev:=0 ("")
;  3175         mov [rcx*4+rdi+32],rsi      -- pFree[idx](which was null):=2nd half
;  3176     []
;  3177         -- and carry on splitting as many times as required
;  3178         jmp :blockdetached
                jmp #004635F6             ;#00463699: 351 58FFFFFF               v  00 00  1 802      
;  3179 
;  3180       ::splitdone
;  3181     [32]
;  3182 --      and esi,#FFFFFFFE           -- clear 0b01, the free bit
;  3183 --      add esp,12
;  3184         cmp dword[esi],#00484253    -- dwMagic ("SBH\0")
                cmp dword[esi],4735571    ;#0046369E: 201076 53424800            uv 00 40  2 803      
;  3185 --      jne :memorycorruption
;  3186         je @f
                je #004636A7              ;#004636A4: 164 01                     v  00 00  1 804      
;  3187             int3
                    int3                  ;#004636A6: 314                        np 00 00 13 805      
;  3188       @@:
;  3189         mov ecx,[esp+12]            -- era (edi would be fine too, I think)
                mov ecx,[esp+12]          ;#004636A7: 213114044 0C               uv 02 10  1 818      
;  3190         add esp,16
                add esp,16                ;#004636AB: 203304 10                  vu 10 10  1 818      
;  3191         mov [eax-4],esi             -- pRoot (w/out the free bit set)
                mov [eax-4],esi           ;#004636AE: 211160 FC                  uv 00 41  1 819      
;  3192         mov [eax-8],ecx             -- era
                mov [eax-8],ecx           ;#004636B1: 211110 F8                  vu 00 03  1 819      
;  3193         sub edx,8                   -- subtract the space used by pRoot + era
                sub edx,8                 ;#004636B4: 203352 08                  uv 04 04  1 820      
;  3194         -- result is edx bytes at eax
;  3195     [64]
;  3196 --      mov r8,rsi
;  3197 --      and r8l,byte #FE            -- clear 0b01, the free bit
;  3198 --      add esp,12
;  3199         cmp dword[r8],#00484253     -- dwMagic ("SBH\0")
;  3200 --      jne :memorycorruption
;  3201         je @f
;  3202             int3
;  3203       @@:
;  3204         mov r9,[rsp+80]             -- era
;  3205         add rsp,8*11
;  3206         mov [rax-8],r8              -- pRoot (w/out the free bit set)
;  3207         mov [rax-16],r9             -- era
;  3208         sub rdx,16                  -- subtract the space used by pRoot + era
;  3209         -- result is rdx bytes at rax
;  3210     []
;  3211         ret
                ret                       ;#004636B7: 303                        np 00 00  2 821      
;  3212 
;  3213 
;  3214 --/*
;  3215 procedure :%pFreePool(:%)
;  3216 end procedure -- (for Edita/CtrlQ)
;  3217 --*/
;  3218     :%pFreePool
;  3219 ---------------
;  3220     [32]
;  3221         -- release ecx bytes of memory at eax, using edx as <era>.
;  3222         -- (no specific result, trashes eax/ecx/edx/esi/edi)
;  3223 --DEV (temp, see if we can get a consistent diff in edi)
;  3224 mov edi,[pGtcb]
        mov edi,[#004021B8] (pGtcb)       ;#004636B8: 213075 B8214000            uv 80 00  1 823      
;  3225 shl edi,2
        shl edi,2                         ;#004636BE: 301347 02                  u  80 80  1 824      
;  3226 sub edi,eax
        sub edi,eax                       ;#004636C1: 051307                     uv 80 81  1 825 80   
;  3227         push edx
                push edx                  ;#004636C3: 122                        vu 00 04  1 825      
;  3228         mov esi,[eax-4]             -- pRoot
                mov esi,[eax-4]           ;#004636C4: 213160 FC                  uv 40 01  1 826      
;  3229         xor ebx,ebx -- (save some grief)
                xor ebx,ebx               ;#004636C7: 061333                     vu 08 08  1 826      
;  3230 --      and esi,#FFFFFFFE           -- clear free bit (needed when looping)
;  3231         test esi,#01
                test esi,1                ;#004636C9: 367306 01000000            uv 00 40  1 827      
;  3232 --      jnz :memorycorruption
;  3233         jz :!FreePoole32a
                jz #004636DF (:!FreePoole32a)  ;#004636CF: 017204 0A000000            v  00 00  1 827      
;  3234 --6/8/19: real cause: free() when delete_routine() in force...
;  3235 --??        jmp :mc53
;  3236 
;  3237 --          pop edx
;  3238 --                      mov edi,[esp+?]
;  3239             mov edi,edx             -- temp
                    mov edi,edx           ;#004636D5: 213372                     uv 80 04  1 828      
;  3240             mov al,32               -- e32hc(era,edi)   --DEV show era/line number?
                    mov al,32             ;#004636D7: 260 20                     vu 01 00  1 828      
;  3241             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#004636D9: 351 8B070000               v  00 00  1 829      
;  3242             int3
                    int3                  ;#004636DE: 314                        np 00 00 13 830      
;  3243       :!FreePoole32a
;  3244         cmp dword[esi],#00484253    -- dwMagic ("SBH\0")
                cmp dword[esi],4735571    ;#004636DF: 201076 53424800            uv 00 40  2 843      
;  3245 --      jne :memorycorruption
;  3246         je @f
                je #004636E8              ;#004636E5: 164 01                     v  00 00  1 844      
;  3247             int3
                    int3                  ;#004636E7: 314                        np 00 00 13 845      
;  3248       @@:
;  3249         add ecx,8                   -- include size of padding
                add ecx,8                 ;#004636E8: 203301 08                  uv 02 02  1 858      
;  3250         mov edx,24
                mov edx,24                ;#004636EB: 272 18000000               vu 04 00  1 858      
;  3251         mov edi,0
                mov edi,0                 ;#004636F0: 277 00000000               uv 80 00  1 859      
;  3252       @@:
;  3253         cmp edx,ecx
                cmp edx,ecx               ;#004636F5: 071312                     vu 00 06  1 859      
;  3254 --      jle @f
;  3255         jge @f
                jge #00463700             ;#004636F7: 175 07                     v  00 00  1 860      
;  3256             add edx,edx
                    add edx,edx           ;#004636F9: 001322                     uv 04 04  1 861      
;  3257             add edi,4
                    add edi,4             ;#004636FB: 203307 04                  vu 80 80  1 861      
;  3258             jmp @b
                    jmp #004636F5         ;#004636FE: 353 F5                     v  00 00  1 862      
;  3259       @@:
;  3260 --      cmp edx,ecx
;  3261 --      jne :memorycorruption
;  3262         je @f
                je #00463703              ;#00463700: 164 01                     v  00 00  1 863      
;  3263             int3
                    int3                  ;#00463702: 314                        np 00 00 13 864      
;  3264       @@:
;  3265         cmp edi,108 -- (=27*4)
                cmp edi,108               ;#00463703: 203377 6C                  uv 00 80  1 877      
;  3266 --      jae :memorycorruption
;  3267         jb @f
                jb #00463709              ;#00463706: 162 01                     v  00 00  1 877      
;  3268             int3
                    int3                  ;#00463708: 314                        np 00 00 13 878      
;  3269       @@:
;  3270     [64]
;  3271         -- release rcx bytes of memory at rax, using rdx as <era>.
;  3272         -- (no specific result, trashes rax/rcx/rdx/rsi/rdi/r8/r9/r10/r11)
;  3273         push rdx
;  3274         mov rsi,[rax-8]             -- pRoot
;  3275         xor rbx,rbx -- (save some grief)
;  3276         test rsi,#01
;  3277 --      jnz :memorycorruption
;  3278         jz :!FreePoole32a
;  3279             int3
;  3280       :!FreePoole32a
;  3281         cmp dword[rsi],#00484253    -- dwMagic ("SBH\0")
;  3282 --      jne :memorycorruption
;  3283         je @f
;  3284             int3
;  3285       @@:
;  3286         add rcx,16                  -- include size of padding
;  3287         mov rdx,44                  -- block size
;  3288         mov rdi,0                   -- idx*8
;  3289       @@:
;  3290         cmp rdx,rcx
;  3291         jge @f
;  3292             add rdx,rdx
;  3293             add rdi,8
;  3294             jmp @b
;  3295       @@:
;  3296 --      jne :memorycorruption
;  3297         je @f
;  3298             int3
;  3299       @@:
;  3300         cmp rdi,464 -- (=58*8)
;  3301 --      jae :memorycorruption
;  3302         jb @f
;  3303             int3
;  3304       @@:
;  3305     [32]
;  3306 --erm? (added 30/5/14)
;  3307         mov [eax],ecx               -- nSize
                mov [eax],ecx             ;#00463709: 211010                     uv 00 03  1 891      
;  3308         push eax                    -- [1] save
                push eax                  ;#0046370B: 120                        vu 00 01  1 891      
;  3309 push ecx -- (does not actually help) [DEV]
        push ecx                          ;#0046370C: 121                        uv 00 02  1 892      
;  3310     [64]
;  3311         mov [rax],rcx               -- nSize
;  3312         mov r12,rax                 -- [1] save
;  3313     []
;  3314         call :pGetThread            -- (eax:=dwThreadId; most regs trashed)
                call #00463029            ;#0046370D: 350 17F9FFFF               v  00 00  1 892      
;  3315     [32]
;  3316 pop ecx
        pop ecx                           ;#00463712: 131                        uv 02 00  1 893      
;  3317         cmp eax,[esi+4]             -- sbh.dwThreadId
                cmp eax,[esi+4]           ;#00463713: 073106 04                  vu 00 41  2 893      
;  3318         mov edx,[esi+12]            -- pTCB/4
                mov edx,[esi+12]          ;#00463716: 213126 0C                  uv 04 40  1 894      
;  3319     [64]
;  3320         cmp eax,dword[rsi+4]        -- sbh.dwThreadId (dwMagic and dwThreadId are still dwords, btw)
;  3321         mov rdx,[rsi+16]            -- pTCB/4
;  3322     []
;  3323         jne @f
                jne #0046372A             ;#00463719: 165 0F                     v  00 00  1 894      
;  3324             -- owned
;  3325     [32]
;  3326             pop eax                 -- [1] restore
                    pop eax               ;#0046371B: 130                        uv 01 00  1 895      
;  3327             push edx                -- pTCB/4
                    push edx              ;#0046371C: 122                        vu 00 04  1 895      
;  3328             push ebx                -- null (instead of mergelist's return address)
                    push ebx              ;#0046371D: 123                        uv 00 08  1 896      
;  3329             push ecx                -- block size (cleared by mergeone)
                    push ecx              ;#0046371E: 121                        vu 00 02  1 896      
;  3330             push edi                -- idx(*4)    (cleared by mergeone)
                    push edi              ;#0046371F: 127                        uv 00 80  1 897      
;  3331             push eax                -- block ptr  (cleared by mergeone)
                    push eax              ;#00463720: 120                        vu 00 01  1 897      
;  3332             call :mergeone          --             (ends with a ret 12)
                    call #00463112        ;#00463721: 350 ECF9FFFF               v  00 00  1 898      
;  3333 --          add esp,8
;  3334             add esp,12
                    add esp,12            ;#00463726: 203304 0C                  uv 10 10  1 899      
;  3335     [64]
;  3336             mov rax,r12             -- [1] restore
;  3337             push rdx                -- pTCB/4
;  3338             push rbx                -- null (instead of mergelist's return address)
;  3339             push rcx                -- block size (cleared by mergeone)
;  3340             push rdi                -- idx(*8)    (cleared by mergeone)
;  3341             push rax                -- block ptr  (cleared by mergeone)
;  3342             call :mergeone          --             (ends with a ret 24)
;  3343 --          add rsp,16
;  3344             add rsp,24
;  3345     []
;  3346             ret
                    ret                   ;#00463729: 303                        np 00 00  2 900      
;  3347       @@:
;  3348         -- not owned
;  3349     [32]
;  3350         cmp dword[ebx+edx*4],#00424354      -- magic ("TCB\0")
                cmp dword[ebx+edx*4],#00424354  ;#0046372A: 201074223 54434200         uv 00 0C  2 902      
;  3351 --      jne :memorycorruption
;  3352         je @f
                je #00463734              ;#00463731: 164 01                     v  00 00  1 903      
;  3353             int3
                    int3                  ;#00463733: 314                        np 00 00 13 904      
;  3354       @@:
;  3355         lea esi,[ebx+edx*4+128]     -- locate pNofl (before edx gets damaged!)
                lea esi,[ebx+edx*4+128]   ;#00463734: 215264223 80000000         uv 40 0C  1 917      
;  3356         lea ecx,[ebx+edx*4+240]     -- csLock
                lea ecx,[ebx+edx*4+240]   ;#0046373B: 215214223 F0000000         vu 02 0C  1 917      
;  3357         cmp dword[ebx+edx*4+236],#00424343  -- dwMagicC ("CCB\0")
                cmp dword[ebx+edx*4+236],#00424343  ;#00463742: 201274223 EC000000 43434200 u  00 0C  2 918      
;  3358 --      jne :notCCB
;  3359         je @f
                je #00463750              ;#0046374D: 164 01                     v  00 00  1 919      
;  3360             int3
                    int3                  ;#0046374F: 314                        np 00 00 13 920      
;  3361       @@:
;  3362 -->     cmp dword[ecx+24],#00424345 -- dwMagicE ("ECB\0")
;  3363         cmp dword[ecx+32],#00424345 -- dwMagicE ("ECB\0")
                cmp dword[ecx+32],#00424345  ;#00463750: 201171 20 45434200         u  00 02  2 933      
;  3364         jne :notECB
                jne #004632DC             ;#00463757: 017205 7FFBFFFF            v  00 00  1 934      
;  3365         push ecx                                    -- lpCriticalSection (for Leave)
                push ecx                  ;#0046375D: 121                        uv 00 02  1 935      
;  3366         call :EnterCriticalSection
                call #0046308D            ;#0046375E: 350 2AF9FFFF               v  00 00  1 935      
;  3367     [64]
;  3368         cmp dword[rbx+rdx*4],#00424354      -- magic ("TCB\0")
;  3369 --      jne :memorycorruption
;  3370         je @f
;  3371             int3
;  3372       @@:
;  3373         lea rsi,[rbx+rdx*4+496]     -- locate pNofl (before rdx gets damaged!)
;  3374         lea rcx,[rbx+rdx*4+968]     -- csLock
;  3375 --23/11/16!
;  3376 --      cmp dword[rbx+rdx*4-960],#00424342  -- dwMagicB ("BCB\0")
;  3377         cmp dword[rbx+rdx*4+960],#00424342  -- dwMagicB ("BCB\0")
;  3378 --      jne :notCCB
;  3379         je @f
;  3380             int3
;  3381       @@:
;  3382         cmp dword[rcx-4],#00424343  -- dwMagicC ("CCB\0")
;  3383 --      jne :notCCB
;  3384         je @f
;  3385             int3
;  3386       @@:
;  3387 -->     cmp dword[rcx+40],#00424345 -- dwMagicE ("ECB\0")
;  3388         cmp dword[rcx+56],#00424345 -- dwMagicE ("ECB\0")
;  3389         jne :notECB
;  3390         mov [rsp+32],rcx            -- save lpCriticalSection (for Leave)
;  3391         call :EnterCriticalSection
;  3392     [32]
;  3393         mov eax,[esp+4]             -- [1] restore
                mov eax,[esp+4]           ;#00463763: 213104044 04               uv 01 10  1 936      
;  3394         mov edx,[esi+edi]           -- pNofl[idx] (previous)
                mov edx,[esi+edi]         ;#00463767: 213024076                  vu 04 C0  1 936      
;  3395         mov [esi+edi],eax           -- pNofl[idx] (new)
                mov [esi+edi],eax         ;#0046376A: 211004076                  uv 00 C1  1 937      
;  3396 --13/8/15 no!!
;  3397 --      mov ecx,[eax-4]             -- pRoot
;  3398         mov [eax+4],edx             -- pNext
                mov [eax+4],edx           ;#0046376D: 211120 04                  uv 00 05  1 939    *01*
;  3399 --      or ecx,1
;  3400         mov [eax+8],ebx             -- pPrev (null, probably unnecessary)
                mov [eax+8],ebx           ;#00463770: 211130 08                  vu 00 09  1 939      
;  3401 --      mov [eax-4],ecx             -- pRoot (with bit 0b01 set)
;  3402 --      mov [eax-8],ebx             -- era?
;  3403         pop ecx                     -- lpCriticalSection/csLock
                pop ecx                   ;#00463773: 131                        uv 02 00  1 940      
;  3404         call :LeaveCriticalSection
                call #0046309D            ;#00463774: 350 24F9FFFF               v  00 00  1 940      
;  3405         add esp,8                   -- [1] discard (and era)
                add esp,8                 ;#00463779: 203304 08                  uv 10 10  1 941      
;  3406     [64]
;  3407         mov rax,r12                 -- [1] restore
;  3408         mov rdx,[rsi+rdi]           -- pNofl[idx] (previous)
;  3409         mov [rsi+rdi],rax           -- pNofl[idx] (new)
;  3410 --13/8/15 no!!
;  3411 --      mov rcx,[rax-8]             -- pRoot
;  3412         mov [rax+8],rdx             -- pNext
;  3413 --      or rcx,1
;  3414         mov [rax+16],rbx            -- pPrev (null, probably unnecessary)
;  3415 --      mov [rax-8],rcx             -- pRoot (with bit 0b01 set)
;  3416 --      mov [rax-16],rbx            -- era?
;  3417         mov rcx,[rsp+32]            -- lpCriticalSection/csLock
;  3418         call :LeaveCriticalSection
;  3419         add rsp,8                   -- discard era
;  3420     []
;  3421         ret
                ret                       ;#0046377C: 303                        np 00 00  2 942      
;  3422 
;  3423 --/*
;  3424 procedure :%pAllocStr(:%)
;  3425 end procedure -- (for Edita/CtrlQ)
;  3426 --*/
;  3427     :%pAllocStr
;  3428 ---------------
;  3429     [32]
;  3430         -- Allocate a string of length ecx.
;  3431         -- Sets the length, type/refcount, and returns a ref in eax.
;  3432         -- All other registers (except eax) are preserved.
;  3433         test ecx,ecx
                test ecx,ecx              ;#0046377D: 205311                     uv 00 02  1 944      
;  3434 --      js e101atasonl                    ; attempt to allocate string of negative length
;  3435 --      js :invalidmemoryrequest
;  3436         jns @f
                jns #00463782             ;#0046377F: 171 01                     v  00 00  1 944      
;  3437             int3
                    int3                  ;#00463781: 314                        np 00 00 13 945      
;  3438       @@:
;  3439         pushad
                pushad                    ;#00463782: 140                        np 00 FF  5 958      
;  3440         add ecx,17                      -- header plus terminating null
                add ecx,17                ;#00463783: 203301 11                  uv 02 02  1 963      
;  3441         xor ebx,ebx                     -- (save some grief)
                xor ebx,ebx               ;#00463786: 061333                     vu 08 08  1 963      
;  3442         mov edx,[esp+32]                -- era
                mov edx,[esp+32]          ;#00463788: 213124044 20               uv 04 10  1 964      
;  3443         call :%pGetPool                 -- allocate ecx bytes, rounded up
                call #004632EA (:%pGetPool)  ;#0046378C: 350 59FBFFFF               v  00 00  1 964      
;  3444         test eax,eax
                test eax,eax              ;#00463791: 205300                     uv 00 01  1 965      
;  3445 --      jz :memoryallocationfailure
;  3446         jnz @f
                jnz #004637A4             ;#00463793: 165 0F                     v  00 00  1 965      
;  3447             mov edx,[esp+32]                -- era
                    mov edx,[esp+32]      ;#00463795: 213124044 20               uv 04 10  1 966      
;  3448             mov al,33   -- e33maf
                    mov al,33             ;#00463799: 260 21                     vu 01 00  1 966      
;  3449             sub edx,1
                    sub edx,1             ;#0046379B: 203352 01                  uv 04 04  1 967      
;  3450             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#0046379E: 351 C6060000               v  00 00  1 967      
;  3451             int3
                    int3                  ;#004637A3: 314                        np 00 00 13 968      
;  3452       @@:
;  3453         mov ecx,[esp+24]                -- retrieve original length (ecx from the pushad)
                mov ecx,[esp+24]          ;#004637A4: 213114044 18               uv 02 10  1 981      
;  3454         mov [eax],edx                   -- set maxlen
                mov [eax],edx             ;#004637A8: 211020                     vu 00 05  1 981      
;  3455         lea edx,[eax+17]                --      ref: raw plus header & type bit,
                lea edx,[eax+17]          ;#004637AA: 215120 11                  uv 04 01  1 982      
;  3456         mov [eax+4],ecx                 -- set length
                mov [eax+4],ecx           ;#004637AD: 211110 04                  vu 00 03  1 982      
;  3457         ror edx,2                       --      rotated,
                ror edx,2                 ;#004637B0: 301312 02                  np 04 04  1 983      
;  3458         mov dword[eax+8],1              -- refcount
                mov [eax+8], dword 1      ;#004637B3: 307100 08 01000000         uv 00 01  1 984      
;  3459         mov [esp+28],edx                --      keep new ref (in eax),
                mov [esp+28],edx          ;#004637BA: 211124044 1C               vu 00 14  1 984      
;  3460         mov dword[eax+12],0x82000000    -- type
                mov [eax+12], dword -2113929216  ;#004637BE: 307100 0C 00000082         uv 00 01  1 985      
;  3461         popad                           --      but restore all other registers
                popad                     ;#004637C5: 141                        np FF 00  5 986      
;  3462     [64]
;  3463         -- Allocate a string of length rcx.
;  3464         -- Sets the length, type/refcount, and returns a ref in rax.
;  3465         -- All other registers (except rax) are preserved. [DEV/ERM/may need yet more push/pop...]
;  3466         test rcx,rcx
;  3467 --      js e101atasonl                    ; attempt to allocate string of negative length
;  3468 --      js :invalidmemoryrequest
;  3469         jns @f
;  3470             int3
;  3471       @@:
;  3472 --      pushad
;  3473         sub rsp,8                       -- align stack
;  3474         xor rbx,rbx                     -- (save some grief)
;  3475         push rsi                        -- [1] save
;  3476         push rdi                        -- [2] save
;  3477         push rdx                        -- [3] save
;  3478         push rcx                        -- [4] save
;  3479         add rcx,33                      -- header plus terminating null
;  3480         mov rdx,[rsp+40]                -- era
;  3481         call :%pGetPool                 -- allocate ecx bytes, rounded up
;  3482         test rax,rax
;  3483 --      jz :memoryallocationfailure
;  3484         jnz @f
;  3485             int3
;  3486       @@:
;  3487         mov rcx,[rsp]                   -- [4] retrieve original length
;  3488         mov [rax],rdx                   -- set maxlen
;  3489 --<     lea rdx,[rax+33]                --      ref: raw plus header & type bit,
;  3490         mov [rax+8],rcx                 -- set length
;  3491 --<     ror rdx,2                       --      rotated,
;  3492         mov qword[rax+16],1             -- refcount
;  3493         mov dword[rax+24],ebx           -- type loword
;  3494         mov dword[rax+28],0x82000000    -- type
;  3495 --      popad                           --      but restore all other registers
;  3496 --<     mov rax,rdx
;  3497         mov rdx,[rsp+8]                 -- [3] restore
;  3498         mov rdi,[rsp+16]                -- [2] restore
;  3499         mov rsi,[rsp+24]                -- [1] restore
;  3500         lea rax,[rax+33]                -- ref: raw plus header & type bit,
;  3501         add rsp,5*8
;  3502         ror rax,2                       -- rotated,
;  3503     []
;  3504         ret
                ret                       ;#004637C6: 303                        np 00 00  2 991      
;  3505 
;  3506     :%pWithJS
;  3507 -------------
;  3508         --
;  3509         --  mov e/rax flag  (1 for without js, 2 for with js, 3 to reset)
;  3510         --  call :%opWithJS
;  3511         --  e/rcx contains prev, should you need it (mov to e/rax and re-call to preserve)
;  3512         --  e/rdx trashed
;  3513         --
;  3514     [32]
;  3515 --      and eax,1
;  3516 --      mov ecx,[withjs]
;  3517 --      mov edx,[esp]
;  3518         mov [withjs],eax
                mov [#004021D8] (withjs),eax  ;#004637C7: 243 D8214000               uv 00 01  1 993      
;  3519 --      sub edx,1
;  3520 --      test eax,ecx
;  3521     [64]
;  3522 --      and rax,1
;  3523 --      mov rcx,[withjs]
;  3524 --      mov rdx,[rsp]
;  3525         mov [withjs],rax
;  3526 --      sub rdx,1
;  3527 --      test rax,rcx
;  3528     []
;  3529 --      jnz @f
;  3530 --          mov al,29       -- e29wojsc
;  3531 --          jmp :!iDiag
;  3532 --          int3
;  3533 --    @@:
;  3534         ret
                ret                       ;#004637CC: 303                        np 00 00  2 994      
;  3535 
;  3536 --5/10/21 (safe_mode)
;  3537     :%pSafemode
;  3538             -- Set safe_mode ON (ie by default now nothing is safe, was "all safe")
;  3539             mov [safemode],0
                    mov [#004021DC] (safemode), dword 0  ;#004637CD: 307005 DC214000 00000000   uv 00 00  1 996      
;  3540             ret
                    ret                   ;#004637D7: 303                        np 00 00  2 997      
;  3541     :%pSafeOff
;  3542             -- Of course if a malicious programmer finds any way to invoke this, they
;  3543             -- have successfully defeated safe_mode, but hopefully they can't, since
;  3544             -- any and all #ilASM{} outside of builtins\ should be fully prohibited.
;  3545             mov [safemode],1
                    mov [#004021DC] (safemode), dword 1  ;#004637D8: 307005 DC214000 01000000   uv 00 00  1 999      
;  3546             ret
                    ret                   ;#004637E2: 303                        np 00 00  2 1000      
;  3547     :%pGetSafe
;  3548         [32]
;  3549             mov eax,[safemode]
                    mov eax,[#004021DC] (safemode)  ;#004637E3: 241 DC214000               uv 01 00  1 1002      
;  3550             mov [edi],eax
                    mov [edi],eax         ;#004637E8: 211007                     uv 00 81  1 1003 01   
;  3551         [64]
;  3552             mov rax,[safemode]
;  3553             mov [rdi],rax   
;  3554         []
;  3555           @@:
;  3556             ret
                    ret                   ;#004637EA: 303                        np 00 00  2 1004      
;  3557     :%pSafechk
;  3558             -- cl set on entry
;  3559             cmp [safemode],0
                    cmp dword[#004021DC] (safemode),0  ;#004637EB: 203075 DC214000 00         u  00 00  2 1006      
;  3560             jne @b
                    jne #004637EA         ;#004637F2: 165 F6                     v  00 00  1 1007      
;  3561             mov al,124          -- e124npism
                    mov al,124            ;#004637F4: 260 7C                     uv 01 00  1 1008      
;  3562             mov [safemode],1    -- allow ex.err to be written
                    mov [#004021DC] (safemode), dword 1  ;#004637F6: 307005 DC214000 01000000   vu 00 00  1 1008      
;  3563         [32]
;  3564           @@:
;  3565 --          mov edx,[ebp+28]    -- era
;  3566             mov edx,[ebp+12]    -- called from 
                    mov edx,[ebp+12]      ;#00463800: 213125 0C                  uv 04 20  1 1009      
;  3567             mov ebp,[ebp+20]    -- prev_ebp
                    mov ebp,[ebp+20] (prevebp)  ;#00463803: 213155 14                  vu 20 20  1 1009      
;  3568 --          mov edi,[ebp+20]    -- prev_ebp
;  3569 --          test edi,edi
;  3570 --          jz :keepebp
;  3571 --              mov ebp,edi
;  3572 --        ::keepebp
;  3573             sub cl,1
                    sub cl,1              ;#00463806: 200351 01                  uv 02 02  1 1010      
;  3574             jg @b
                    jg #00463800          ;#00463809: 177 F5                     v  00 00  1 1010      
;  3575             sub edx,1
                    sub edx,1             ;#0046380B: 203352 01                  uv 04 04  1 1011      
;  3576         [64]
;  3577           @@:
;  3578 --          mov rdx,[rbp+56]    -- era
;  3579             mov rdx,[rbp+24]    -- called from
;  3580             mov rbp,[rbp+40]    -- prev_ebp
;  3581 --          mov rdi,[rbp+40]    -- prev_ebp
;  3582 --          test rdi,rdi
;  3583 --          jz :keeprbp
;  3584 --              mov rbp,rdi
;  3585 --        ::keeprbp
;  3586             sub cl,1
;  3587             jg @b
;  3588             sub rdx,1
;  3589         []
;  3590             jmp :!iDiag         -- fatal error (see pdiagN.e)
                    jmp #00463E69 (:!iDiag)  ;#0046380E: 351 56060000               v  00 00  1 1011      
;  3591             int3
                    int3                  ;#00463813: 314                        np 00 00 13 1012      
;  3592 
;  3593 --/*
;  3594 procedure :%pAlloClone(:%)
;  3595 end procedure -- (for Edita/CtrlQ)
;  3596 --*/
;  3597     :%pAlloClone
;  3598 ----------------
;  3599     --
;  3600     -- About to clone a sequence because its refcount!=1.
;  3601     -- If withjs is in force, terminate in error.
;  3602     -- e/rdx should be set to era on entry, all registers preserved
;  3603     --  
;  3604 --DEV ... (fixes needed in pilasm)
;  3605 --      test [withjs],1
;  3606     [32]
;  3607         mov eax,[withjs]
                mov eax,[#004021D8] (withjs)  ;#00463814: 241 D8214000               uv 01 00  1 1025      
;  3608         test eax,1
                test eax,1                ;#00463819: 251 01000000               uv 00 01  1 1026 01   
;  3609     [64]
;  3610         mov rax,[withjs]
;  3611         test rax,1
;  3612     []
;  3613 --</dev>
;  3614         jz @f
                jz #00463831              ;#0046381E: 164 11                     v  00 00  1 1026      
;  3615             mov al,56           -- e56rocow, "p2js violation: relies on copy on write semantics"
                    mov al,56             ;#00463820: 260 38                     uv 01 00  1 1027      
;  3616     [32]
;  3617             sub edx,1
                    sub edx,1             ;#00463822: 203352 01                  vu 04 04  1 1027      
;  3618             mov [withjs],ebx
                    mov [#004021D8] (withjs),ebx  ;#00463825: 211035 D8214000            uv 00 08  1 1028      
;  3619     [64]
;  3620             sub rdx,1
;  3621             mov [withjs],rbx
;  3622     []
;  3623             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#0046382B: 351 39060000               v  00 00  1 1028      
;  3624             int3
                    int3                  ;#00463830: 314                        np 00 00 13 1029      
;  3625       @@:       
;  3626         ret
                ret                       ;#00463831: 303                        np 00 00  2 1042      
;  3627 
;  3628 --/*
;  3629 procedure :%pAllocSeq(:%)
;  3630 end procedure -- (for Edita/CtrlQ)
;  3631 --*/
;  3632     :%pAllocSeq
;  3633 ---------------
;  3634     [32]
;  3635         -- Allocate a sequence of length ecx.
;  3636         --  on entry, era in edx
;  3637         -- Sets the length, type/refcount, and returns a ref in eax.
;  3638         -- All other registers (except eax) are preserved.
;  3639         test ecx,ecx
                test ecx,ecx              ;#00463832: 205311                     uv 00 02  1 1044      
;  3640 --      js e101atasonl                  ; attempt to allocate string of negative length
;  3641 --      js :invalidmemoryrequest
;  3642         jns @f
                jns #00463837             ;#00463834: 171 01                     v  00 00  1 1044      
;  3643             int3
                    int3                  ;#00463836: 314                        np 00 00 13 1045      
;  3644       @@:
;  3645         pushad
                pushad                    ;#00463837: 140                        np 00 FF  5 1058      
;  3646         xor ebx,ebx                     -- (save some grief)
                xor ebx,ebx               ;#00463838: 061333                     uv 08 08  1 1063      
;  3647         lea ecx,[ebx+ecx*4+20]          -- 4 bytes per element plus header
                lea ecx,[ebx+ecx*4+20]    ;#0046383A: 215114213 14               uv 02 0A  1 1066 08 *08*
;  3648 --      mov edx,[esp+32]                -- era
;  3649         call :%pGetPool                 -- allocate ecx bytes, rounded up
                call #004632EA (:%pGetPool)  ;#0046383E: 350 A7FAFFFF               v  00 00  1 1066      
;  3650         test eax,eax
                test eax,eax              ;#00463843: 205300                     uv 00 01  1 1067      
;  3651 --      jz :memoryallocationfailure
;  3652         jnz @f
                jnz #00463856             ;#00463845: 165 0F                     v  00 00  1 1067      
;  3653 --          mov edx,[esp+32]                -- era
;  3654             mov edx,[esp+20]                -- era (was in edx)
                    mov edx,[esp+20]      ;#00463847: 213124044 14               uv 04 10  1 1068      
;  3655             mov al,33   -- e33maf
                    mov al,33             ;#0046384B: 260 21                     vu 01 00  1 1068      
;  3656             sub edx,1
                    sub edx,1             ;#0046384D: 203352 01                  uv 04 04  1 1069      
;  3657             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00463850: 351 14060000               v  00 00  1 1069      
;  3658             int3
                    int3                  ;#00463855: 314                        np 00 00 13 1070      
;  3659       @@:
;  3660         mov [eax],ebx                   -- set slack (=0)
                mov [eax],ebx             ;#00463856: 211030                     uv 00 09  1 1083      
;  3661         mov ecx,[esp+24]                -- retrieve original length (ecx from the pushad)
                mov ecx,[esp+24]          ;#00463858: 213114044 18               vu 02 10  1 1083      
;  3662         mov [eax+4],edx                 -- set maxlen (= allocated size)
                mov [eax+4],edx           ;#0046385C: 211120 04                  uv 00 05  1 1084      
;  3663         lea edi,[eax+21]                --      ref: raw plus header & type bit,
                lea edi,[eax+21]          ;#0046385F: 215170 15                  vu 80 01  1 1084      
;  3664         mov [eax+8],ecx                 -- set length
                mov [eax+8],ecx           ;#00463862: 211110 08                  uv 00 03  1 1085      
;  3665         ror edi,2                       --      rotated,
                ror edi,2                 ;#00463865: 301317 02                  np 80 80  1 1086      
;  3666         mov dword[eax+12],1             -- refcount
                mov [eax+12], dword 1     ;#00463868: 307100 0C 01000000         uv 00 01  1 1087      
;  3667         mov [esp+28],edi                --      keep new ref (in eax),
                mov [esp+28],edi          ;#0046386F: 211174044 1C               vu 00 90  1 1087      
;  3668         mov dword[eax+16],0x80000000    -- type
                mov [eax+16], dword -2147483648  ;#00463873: 307100 10 00000080         uv 00 01  1 1088      
;  3669         popad                           --      but restore all other registers
                popad                     ;#0046387A: 141                        np FF 00  5 1089      
;  3670     [64]
;  3671         -- Allocate a sequence of length rcx.
;  3672         --  on entry, era in rdx
;  3673         -- Sets the length, type/refcount, and returns a ref in rax.
;  3674         -- All other registers (except rax) are preserved. [DEV/ERM...]
;  3675         test rcx,rcx
;  3676 --      js e101atasonl                  ; attempt to allocate string of negative length
;  3677 --      js :invalidmemoryrequest
;  3678         jns @f
;  3679             int3
;  3680       @@:
;  3681 --      pushad
;  3682 --28/12/15:
;  3683 --      sub rsp,8                       -- align stack
;  3684         push r9                         -- [0] save
;  3685         xor rbx,rbx                     -- (save some grief)
;  3686         push rsi                        -- [1] save
;  3687         push rdi                        -- [2] save
;  3688         push rdx                        -- [3] save
;  3689         push rcx                        -- [4] save
;  3690 --      lea rcx,[rbx+rcx*8+40]          -- 8 bytes per element plus header
;  3691         shl rcx,3                       -- 8 bytes per element
;  3692 --      mov rdx,[rsp+40]                -- era
;  3693         add rcx,40                      -- plus header
;  3694         call :%pGetPool                 -- allocate rcx bytes, rounded up
;  3695         test rax,rax
;  3696 --      jz :memoryallocationfailure
;  3697         jnz @f
;  3698 --9/2/24:
;  3699             mov rdx,[rsp+48]
;  3700             mov al,33   -- e33maf
;  3701             sub rdx,1
;  3702             jmp :!iDiag
;  3703             int3
;  3704       @@:
;  3705         mov [rax],rbx                   -- set slack (=0)
;  3706         mov rcx,[rsp]                   -- [4] retrieve original length
;  3707         mov [rax+8],rdx                 -- set maxlen (= allocated size)
;  3708 --      lea rdi,[rax+41]                --      ref: raw plus header & type bit,
;  3709         mov [rax+16],rcx                -- set length
;  3710 --      ror rdi,2                       --      rotated,
;  3711         mov qword[rax+24],1             -- refcount
;  3712 --      mov [esp+28],edi                --      keep new ref (in eax),
;  3713         mov dword[rax+32],ebx           -- type loword
;  3714         mov dword[rax+36],0x80000000    -- type
;  3715 --      popad                           --      but restore all other registers
;  3716         mov rdx,[rsp+8]                 -- [3] restore
;  3717         mov rdi,[rsp+16]                -- [2] restore
;  3718         mov rsi,[rsp+24]                -- [1] restore
;  3719         mov r9,[rsp+32]                 -- [0] restore
;  3720         lea rax,[rax+41]                -- ref: raw plus header & type bit,
;  3721         add rsp,5*8
;  3722         ror rax,2                       -- rotated,
;  3723     []
;  3724         ret
                ret                       ;#0046387B: 303                        np 00 00  2 1094      
;  3725 
;  3726 --/*
;  3727 procedure :%pLoadFlt(:%)
;  3728 end procedure -- (for Edita/CtrlQ)
;  3729 --*/
;  3730     :%pLoadFlt
;  3731 ---------------
;  3732     [32]
;  3733         -- Load [esi] into st0, whether integer or floating-point.
;  3734         -- NB no checks are made to verify [esi] is an atom.
;  3735         -- eax is damaged, all other registers are preserved.
;  3736         mov eax,[esi]
                mov eax,[esi]             ;#0046387C: 213006                     uv 01 40  1 1098    *40*
;  3737         cmp eax,h4
                cmp eax,h4                ;#0046387E: 075 00000040               uv 00 01  1 1099 01   
;  3738         jl @f
                jl #00463889              ;#00463883: 174 04                     v  00 00  1 1099      
;  3739             fld qword[ebx+eax*4]
                    fld qword[ebx+eax*4]  ;#00463885: 335004203                  np 00 09  1 1100      
;  3740             ret
                    ret                   ;#00463888: 303                        np 00 00  2 1101      
;  3741       @@:
;  3742         fild dword[esi]
                fild dword[esi]           ;#00463889: 333006                     np 00 40  3 1103      
;  3743     [64]
;  3744         -- Load [rsi] into st0, whether integer or floating-point.
;  3745         -- NB no checks are made to verify [rsi] is an atom.
;  3746         -- rax is damaged, r15 set ot h4, all other registers are preserved.
;  3747         mov rax,[rsi]
;  3748         mov r15,h4
;  3749         cmp rax,r15
;  3750         jl @f
;  3751             fld tbyte[rbx+rax*4]
;  3752             ret
;  3753       @@:
;  3754         fild qword[rsi]
;  3755     []
;  3756         ret
                ret                       ;#0046388B: 303                        np 00 00  2 1106      
;  3757 
;  3758 --/*
;  3759 procedure :%pStoreFlt(:%)
;  3760 end procedure -- (for Edita/CtrlQ)
;  3761 --*/
;  3762     :%pStoreFlt
;  3763 ---------------
;  3764     [32]
;  3765         -- Store st0 in [edi], as integer if possible.
;  3766         -- Deallocates previous contents of [edi] if required.
;  3767         -- All registers are preserved.
;  3768         pushad
                pushad                    ;#0046388C: 140                        np 00 FF  5 1108      
;  3769         xor ebx,ebx -- (save some grief)
                xor ebx,ebx               ;#0046388D: 061333                     uv 08 08  1 1113      
;  3770         -- Force round to 64 bits, since that is how we store floats.
;  3771         sub esp,8
                sub esp,8                 ;#0046388F: 203354 08                  vu 10 10  1 1113      
;  3772         fstp qword[esp]     -- store as 64-bit float/pop (2 cycle)
                fstp qword[esp]           ;#00463892: 335034044                  np 00 10  2 1116    *10*
;  3773         fld qword[esp]      -- reload                    (1 cycle)
                fld qword[esp]            ;#00463895: 335004044                  np 00 10  1 1120    *10*
;  3774         fist dword[esp]     -- store as 32-bit int
                fist dword[esp]           ;#00463898: 333024044                  np 00 10  6 1121      
;  3775         mov edx,[edi]       -- prev contents
                mov edx,[edi]             ;#0046389B: 213027                     uv 04 80  1 1127      
;  3776         fild dword[esp]
                fild dword[esp]           ;#0046389D: 333004044                  np 00 10  3 1128      
;  3777         mov ecx,[esp]
                mov ecx,[esp]             ;#004638A0: 213014044                  uv 02 10  1 1131      
;  3778         add esp,8
                add esp,8                 ;#004638A3: 203304 08                  vu 10 10  1 1131      
;  3779         fcomp st1           -- pop one
                fcomp                     ;#004638A6: 330331                     np 00 00  1 1132      
;  3780         fnstsw ax
                fnstsw ax                 ;#004638A8: 337340                     np 01 00  6 1133      
;  3781 --DEV Agner sez (look this up!) test ax,0x40 jz StoreFlt64 (nb test inverted)
;  3782         sahf
                sahf                      ;#004638AA: 236                        np 00 01  2 1139      
;  3783         jne :StoreFlt64     -- not integer
                jne #004638D1             ;#004638AB: 165 24                     v  00 00  1 1141      
;  3784         mov eax,ecx
                mov eax,ecx               ;#004638AD: 213301                     uv 01 02  1 1142      
;  3785         shl ecx,1
                shl ecx,1                 ;#004638AF: 321341                     u  02 02  1 1143      
;  3786         jo :StoreFlt64      -- result bigger than 31 bits
                jo #004638D1              ;#004638B1: 160 1E                     v  00 00  1 1143      
;  3787         fstp st0            -- discard copy
                fstp st0                  ;#004638B3: 335330                     np 00 00  1 1144      
;  3788         mov [edi],eax
                mov [edi],eax             ;#004638B5: 211007                     uv 00 81  1 1145      
;  3789         cmp edx,h4
                cmp edx,h4                ;#004638B7: 201372 00000040            vu 00 04  1 1145      
;  3790         jle @f
                jle #004638CF             ;#004638BD: 176 10                     v  00 00  1 1146      
;  3791             sub dword[ebx+edx*4-8],1
                    sub dword[ebx+edx*4-8],1  ;#004638BF: 203154223 F8 01            u  00 0C  3 1147      
;  3792             jne @f
                    jne #004638CF         ;#004638C4: 165 09                     v  00 00  1 1149      
;  3793 --          push dword[esp+40]
;  3794             push dword[esp+32]  -- era
                    push dword[esp+32]    ;#004638C6: 377164044 20               np 00 10  2 1150      
;  3795             call :%pDealloc0
                    call #004639AB (:%pDealloc0)  ;#004638CA: 350 DC000000               v  00 00  1 1152      
;  3796       @@:
;  3797         popad
                popad                     ;#004638CF: 141                        np FF 00  5 1153      
;  3798     [64]
;  3799         -- Store st0 in [rdi], as integer if possible.
;  3800         -- Deallocates previous contents of [rdi] if required.
;  3801         -- All registers are preserved. [DEV? what about :%pDealloc? :%pGetPool?]
;  3802         -- Preserves rax/rcx/rdx/rsi (see StoreMint) and rdi
;  3803         -- NB: is now expected to leave r15 set to h4 (pTime.e)
;  3804         push rdx
;  3805         push rcx
;  3806         push rax
;  3807         push rsi
;  3808         mov r15,h4
;  3809         xor rbx,rbx -- (save some grief)
;  3810         sub rsp,16
;  3811 --      fist qword[rsp]     -- store as 64-bit int (instruction not supported [by the/any hardware!])
;  3812         fld st0
;  3813         fistp qword[rsp]    -- store as 64-bit int
;  3814         mov rdx,[rdi]       -- prev contents
;  3815         fild qword[rsp]
;  3816         mov rcx,[rsp]
;  3817         add rsp,16
;  3818         fcomp st1           -- pop one
;  3819         fnstsw ax
;  3820 --DEV Agner sez (look this up!) test ax,0x40 jz StoreFlt64 (nb test inverted)
;  3821         sahf
;  3822         jne :StoreFlt64     -- not integer
;  3823         mov rax,rcx
;  3824         shl rcx,1
;  3825         jo :StoreFlt64      -- result bigger than 31 bits
;  3826         fstp st0            -- discard copy
;  3827         mov [rdi],rax
;  3828 --      cmp rdx,h4
;  3829 --      mov r15,h4
;  3830         cmp rdx,r15
;  3831         jle @f
;  3832 --6/11/16:
;  3833 --          sub qword[ebx+edx*4-16],1
;  3834             sub qword[rbx+rdx*4-16],1
;  3835             jne @f
;  3836             push rdi            -- save
;  3837             push qword[rsp+40]  -- era
;  3838             call :%pDealloc0
;  3839             pop rdi             -- restore
;  3840       @@:
;  3841         pop rsi
;  3842         pop rax
;  3843         pop rcx
;  3844         pop rdx
;  3845     []
;  3846         ret
                ret                       ;#004638D0: 303                        np 00 00  2 1158      
;  3847 
;  3848       ::StoreFlt64
;  3849     [32]
;  3850         cmp edx,h4
                cmp edx,h4                ;#004638D1: 201372 00000040            uv 00 04  1 1160      
;  3851         jle :SFNewFlt
                jle #00463902             ;#004638D7: 176 29                     v  00 00  1 1160      
;  3852         mov ecx,[ebx+edx*4-8]           -- refcount
                mov ecx,[ebx+edx*4-8]     ;#004638D9: 213114223 F8               uv 02 0C  1 1161      
;  3853         cmp byte[ebx+edx*4-1],0x12
                cmp byte[ebx+edx*4-1],#12  ;#004638DD: 200174223 FF 12            u  00 0C  2 1162      
;  3854         jne @f
                jne #004638EE             ;#004638E2: 165 0A                     v  00 00  1 1163      
;  3855             sub ecx,1
                    sub ecx,1             ;#004638E4: 203351 01                  uv 02 02  1 1164      
;  3856             jne :SFnodealloc                -- reuse if refcount is exactly 1
                    jne #004638FE         ;#004638E7: 165 15                     v  00 00  1 1164      
;  3857             fstp qword[ebx+edx*4]
                    fstp qword[ebx+edx*4]  ;#004638E9: 335034223                  np 00 0C  2 1165      
;  3858             popad
                    popad                 ;#004638EC: 141                        np FF 00  5 1167      
;  3859             ret
                    ret                   ;#004638ED: 303                        np 00 00  2 1172      
;  3860       @@:
;  3861         sub ecx,1
                sub ecx,1                 ;#004638EE: 203351 01                  uv 02 02  1 1174      
;  3862         jne :SFnodealloc
                jne #004638FE             ;#004638F1: 165 0B                     v  00 00  1 1174      
;  3863             push dword[esp+32]
                    push dword[esp+32]    ;#004638F3: 377164044 20               np 00 10  2 1175      
;  3864             call :%pDealloc0
                    call #004639AB (:%pDealloc0)  ;#004638F7: 350 AF000000               v  00 00  1 1177      
;  3865             jmp :SFNewFlt
                    jmp #00463902         ;#004638FC: 353 04                     v  00 00  1 1178      
;  3866       ::SFnodealloc
;  3867         mov [ebx+edx*4-8],ecx           -- store decremented refcount (still>0)
                mov [ebx+edx*4-8],ecx     ;#004638FE: 211114223 F8               uv 00 0E  1 1179      
;  3868       ::SFNewFlt
;  3869         mov ecx,16
                mov ecx,16                ;#00463902: 271 10000000               vu 02 00  1 1179      
;  3870         mov edx,[esp+32]                -- era
                mov edx,[esp+32]          ;#00463907: 213124044 20               uv 04 10  1 1180      
;  3871         call :%pGetPool                 -- allocate ecx bytes
                call #004632EA (:%pGetPool)  ;#0046390B: 350 DAF9FFFF               v  00 00  1 1180      
;  3872         test eax,eax
                test eax,eax              ;#00463910: 205300                     uv 00 01  1 1181      
;  3873 --      jz :memoryallocationfailure
;  3874         jnz @f
                jnz #00463921             ;#00463912: 165 0D                     v  00 00  1 1181      
;  3875             popad
                    popad                 ;#00463914: 141                        np FF 00  5 1182      
;  3876             pop edx
                    pop edx               ;#00463915: 132                        uv 04 00  1 1187      
;  3877             mov al,33   -- e33maf
                    mov al,33             ;#00463916: 260 21                     vu 01 00  1 1187      
;  3878             sub edx,1
                    sub edx,1             ;#00463918: 203352 01                  uv 04 04  1 1188      
;  3879             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#0046391B: 351 49050000               v  00 00  1 1188      
;  3880             int3
                    int3                  ;#00463920: 314                        np 00 00 13 1189      
;  3881       @@:
;  3882         mov edi,[esp]                   -- restore original edi (pGetPool trashes all regs)
                mov edi,[esp]             ;#00463921: 213074044                  uv 80 10  1 1202      
;  3883         lea edx,[eax+9]                 --      ref: raw plus header & type bit,
                lea edx,[eax+9]           ;#00463924: 215120 09                  vu 04 01  1 1202      
;  3884         mov dword[eax],1                -- refcount
                mov [eax], dword 1        ;#00463927: 307000 01000000            uv 00 01  1 1203      
;  3885         ror edx,2                       --      rotated,
                ror edx,2                 ;#0046392D: 301312 02                  np 04 04  1 1204      
;  3886         mov dword[eax+4],0x12000000     -- type
                mov [eax+4], dword 301989888  ;#00463930: 307100 04 00000012         uv 00 01  1 1205      
;  3887         mov [edi],edx                   --      store ref in [edi]
                mov [edi],edx             ;#00463937: 211027                     vu 00 84  1 1205      
;  3888         fstp qword[eax+8]               -- value
                fstp qword[eax+8]         ;#00463939: 335130 08                  np 00 01  2 1206      
;  3889         popad
                popad                     ;#0046393C: 141                        np FF 00  5 1208      
;  3890 
;  3891     [64]
;  3892 --      cmp rdx,h4
;  3893 --      mov r15,h4
;  3894         push rdi
;  3895         cmp rdx,r15
;  3896         jle :SFNewFlt
;  3897         mov rcx,[rbx+rdx*4-16]          -- refcount
;  3898         cmp byte[rbx+rdx*4-1],0x12
;  3899         jne @f
;  3900             sub rcx,1
;  3901             jne :SFnodealloc                -- reuse if refcount is exactly 1
;  3902             fstp tbyte[rbx+rdx*4]
;  3903             pop rdi
;  3904             jmp @b  -- (pop pop pop ret)
;  3905 
;  3906       @@:
;  3907         sub rcx,1
;  3908         jne :SFnodealloc
;  3909             push qword[rsp+40]
;  3910             call :%pDealloc0
;  3911             jmp :SFNewFlt
;  3912       ::SFnodealloc
;  3913         mov [rbx+rdx*4-16],rcx          -- store decremented refcount (still>0)
;  3914       ::SFNewFlt
;  3915 --      mov rcx,26
;  3916         mov rcx,28
;  3917         mov rdx,[rsp+40]                -- era
;  3918         call :%pGetPool                 -- allocate rcx bytes
;  3919         test rax,rax
;  3920 --      jz :memoryallocationfailure
;  3921         jnz @f
;  3922             mov rdx,[rsp+40]
;  3923             mov al,33   -- e33maf
;  3924             sub rdx,1
;  3925             jmp :!iDiag
;  3926             int3
;  3927       @@:
;  3928 --      mov rdi,[rsp]                   -- restore original rdi (pGetPool trashes all regs) [DEV]
;  3929         pop rdi
;  3930         lea rdx,[rax+17]                --      ref: raw plus header & type bit,
;  3931         mov qword[rax],1                -- refcount
;  3932         ror rdx,2                       --      rotated,
;  3933         mov qword[rax+8],rbx            -- type/delete_rtn
;  3934         mov [rdi],rdx                   --      store ref in [rdi]
;  3935         mov byte[rax+15],0x12           -- type
;  3936         fstp tbyte[rax+16]              -- value
;  3937         pop rsi
;  3938         pop rax
;  3939         pop rcx
;  3940         pop rdx
;  3941     []
;  3942         ret
                ret                       ;#0046393D: 303                        np 00 00  2 1213      
;  3943 
;  3944 --/*
;  3945 procedure :%pLoadMint(:%)
;  3946 end procedure -- (for Edita/CtrlQ)
;  3947 --*/
;  3948     :%pLoadMint -- finish loading a machine-sized (32/64-bit) integer
;  3949 ---------------
;  3950 --DEV era in edx? error code in ecx?
;  3951     [32]
;  3952         -- eax:=(int32)eax, edx:=hi_dword
;  3953         -- All other registers are preserved (ebx:=0).
;  3954         xor ebx,ebx         -- (save some grief)
                xor ebx,ebx               ;#0046393E: 061333                     uv 08 08  1 1215      
;  3955         cmp eax,h4
                cmp eax,h4                ;#00463940: 075 00000040               vu 00 01  1 1215      
;  3956         jle @f
                jle #00463977             ;#00463945: 176 30                     v  00 00  1 1216      
;  3957             cmp byte[ebx+eax*4-1],#12
                    cmp byte[ebx+eax*4-1],#12  ;#00463947: 200174203 FF 12            u  00 09  2 1217      
;  3958             je :LoadMintFlt
                    je #0046395A          ;#0046394C: 164 0C                     v  00 00  1 1218      
;  3959                 --DEV or should we use the carry flag??
;  3960                 pop edx
                        pop edx           ;#0046394E: 132                        uv 04 00  1 1219      
;  3961                 mov al,48               -- e48atlmmba
                        mov al,48         ;#0046394F: 260 30                     vu 01 00  1 1219      
;  3962                 sub edx,1
                        sub edx,1         ;#00463951: 203352 01                  uv 04 04  1 1220      
;  3963                 jmp :!iDiag
                        jmp #00463E69 (:!iDiag)  ;#00463954: 351 10050000               v  00 00  1 1220      
;  3964                 int3
                        int3              ;#00463959: 314                        np 00 00 13 1221      
;  3965           ::LoadMintFlt
;  3966             sub esp,8
                    sub esp,8             ;#0046395A: 203354 08                  uv 10 10  1 1234      
;  3967             fld qword[ebx+eax*4]
                    fld qword[ebx+eax*4]  ;#0046395D: 335004203                  np 00 09  1 1235      
;  3968 --DEV try fisttp?
;  3969             call :%down53
                    call #00462155 (:%down53)  ;#00463960: 350 F0E7FFFF               v  00 00  1 1236      
;  3970             fistp qword[esp]
                    fistp qword[esp]      ;#00463965: 337074044                  np 00 10  6 1237      
;  3971             call :%near53
                    call #00462163 (:%near53)  ;#00463968: 350 F6E7FFFF               v  00 00  1 1243      
;  3972             mov eax,[esp]
                    mov eax,[esp]         ;#0046396D: 213004044                  uv 01 10  1 1244      
;  3973             mov edx,[esp+4]
                    mov edx,[esp+4]       ;#00463970: 213124044 04               vu 04 10  1 1244      
;  3974             add esp,8
                    add esp,8             ;#00463974: 203304 08                  uv 10 10  1 1245      
;  3975       @@:
;  3976         ret
                ret                       ;#00463977: 303                        np 00 00  2 1246      
;  3977     [64]
;  3978         -- rax:=(int64)rax
;  3979         -- All other registers are preserved (rbx:=0).
;  3980         mov r15,h4
;  3981         xor rbx,rbx         -- (save some grief)
;  3982         cmp rax,r15
;  3983         jle @f
;  3984             cmp byte[rbx+rax*4-1],#12
;  3985             je :LoadMintFlt
;  3986                 pop rdx
;  3987                 mov al,48               -- e48atlmmba
;  3988                 sub rdx,1
;  3989                 jmp :!iDiag
;  3990                 int3
;  3991           ::LoadMintFlt
;  3992 --removed 17/1/17:
;  3993 --          sub rsp,8
;  3994             fld tbyte[rbx+rax*4]
;  3995 
;  3996 --12/01/17:
;  3997             -- if uint>#7FFF... then uint-=#1_0000...
;  3998             push r15            -- #4000_0000_0000_0000
;  3999             fild qword[rsp]
;  4000             fadd st0,st0        -- #8000_0000_0000_0000
;  4001             fld st1
;  4002             fcomp
;  4003             fnstsw ax
;  4004             sahf
;  4005             jb :below80
;  4006                 fadd st0,st0    -- #1_0000_0000_0000_0000
;  4007                 fsub st1,st0
;  4008           ::below80
;  4009             fstp st0            -- discard
;  4010 
;  4011 --DEV try fisttp?
;  4012             call :%down64
;  4013             fistp qword[rsp]
;  4014             call :%near64
;  4015             pop rax
;  4016       @@:
;  4017         ret
;  4018     []
;  4019 
;  4020 --/*
;  4021 procedure :%pStoreMint(:%)
;  4022 end procedure -- (for Edita/CtrlQ)
;  4023 --*/
;  4024     :%pStoreMint    -- store a machine-sized (32/64-bit) integer
;  4025 ----------------
;  4026     [32]
;  4027         -- Store eax in [edi], as integer if possible, else as float.
;  4028         -- Deallocates previous contents of [edi] if required.
;  4029         -- All registers are preserved.
;  4030         pushad
                pushad                    ;#00463978: 140                        np 00 FF  5 1248      
;  4031         mov ecx,eax
                mov ecx,eax               ;#00463979: 213310                     uv 02 01  1 1253      
;  4032         mov edx,[edi]       -- prev contents
                mov edx,[edi]             ;#0046397B: 213027                     vu 04 80  1 1253      
;  4033         xor ebx,ebx         -- (save some grief)
                xor ebx,ebx               ;#0046397D: 061333                     uv 08 08  1 1254      
;  4034         shl ecx,1
                shl ecx,1                 ;#0046397F: 321341                     u  02 02  1 1255      
;  4035         jno @f
                jno #0046398C             ;#00463981: 161 09                     v  00 00  1 1255      
;  4036             fild dword[esp+28]      -- (ie the eax from pushad)
                    fild dword[esp+28]    ;#00463983: 333104044 1C               np 00 10  3 1256      
;  4037             jmp :StoreFlt64         -- (will dealloc [edi] if rqd)
                    jmp #004638D1         ;#00463987: 351 45FFFFFF               v  00 00  1 1259      
;  4038       @@:
;  4039         mov [edi],eax
                mov [edi],eax             ;#0046398C: 211007                     uv 00 81  1 1260      
;  4040         cmp edx,h4
                cmp edx,h4                ;#0046398E: 201372 00000040            vu 00 04  1 1260      
;  4041         jle @f
                jle #004639A6             ;#00463994: 176 10                     v  00 00  1 1261      
;  4042             sub dword[ebx+edx*4-8],1
                    sub dword[ebx+edx*4-8],1  ;#00463996: 203154223 F8 01            u  00 0C  3 1262      
;  4043             jne @f
                    jne #004639A6         ;#0046399B: 165 09                     v  00 00  1 1264      
;  4044             push dword[esp+32]
                    push dword[esp+32]    ;#0046399D: 377164044 20               np 00 10  2 1265      
;  4045             call :%pDealloc0
                    call #004639AB (:%pDealloc0)  ;#004639A1: 350 05000000               v  00 00  1 1267      
;  4046       @@:
;  4047         popad
                popad                     ;#004639A6: 141                        np FF 00  5 1268      
;  4048     [64]
;  4049         -- Store rax in [rdi], as integer if possible, else as float.
;  4050         -- Deallocates previous contents of [rdi] if required.
;  4051         -- Preserves rax/rcx/rdx/rsi (see StoreFlt) and rdi.
;  4052         push rdx
;  4053         push rcx
;  4054         push rax
;  4055         push rsi
;  4056         xor rbx,rbx -- (save some grief)
;  4057         mov rcx,rax
;  4058         mov rdx,[rdi]       -- prev contents
;  4059         shl rcx,1
;  4060         jno @f
;  4061             fild qword[rsp+8]   -- (saved rax)
;  4062             jmp :StoreFlt64
;  4063       @@:
;  4064         mov r15,h4
;  4065         mov [rdi],rax
;  4066         cmp rdx,r15
;  4067         jle @f
;  4068             sub qword[rbx+rdx*4-16],1
;  4069             jne @f
;  4070             push rdi
;  4071             push qword[rsp+40]
;  4072             call :%pDealloc0
;  4073             pop rdi
;  4074       @@:
;  4075         pop rsi
;  4076         pop rax
;  4077         pop rcx
;  4078         pop rdx
;  4079     []
;  4080         ret
                ret                       ;#004639A7: 303                        np 00 00  2 1273      
;  4081 
;  4082 --/*
;  4083 procedure :%pDealloc[0](:%)
;  4084 end procedure -- (for Edita/CtrlQ)
;  4085 --*/
;  4086     :%pDealloc          -- (era==[e/rsp])
;  4087 --------------
;  4088         --
;  4089         -- called when a refcount [ebx+edx*4-8] drops to zero.
;  4090         -- Note the refcount itself need not actually be 0 when this is called,
;  4091         --      ie "sub reg,1; jz deallocX; mov[ebx+edx*4-8],reg" is permitted.
;  4092         -- Invoke opDealloc iff era==[esp], ie when inlined and all those final
;  4093         --  jmp/jz from opcodes, otherwise push the era and invoke opDealloc0.
;  4094         -- All registers are trashed (except for esp and ebx[==0 on entry/exit]).
;  4095         --
;  4096     [32]
;  4097         push dword[esp] -- (era, discarded on exit)
                push dword[esp]           ;#004639A8: 377064044                  np 00 10  2 1277    *10*
;  4098     :%pDealloc0         -- (era @ [esp+4])
;  4099     -----------
;  4100         shl edx,2
                shl edx,2                 ;#004639AB: 301342 02                  u  04 04  1 1279      
;  4101         xor ebx,ebx -- (save some grief)
                xor ebx,ebx               ;#004639AE: 061333                     vu 08 08  1 1279      
;  4102         test dword[edx-4],0x00FFFFFF    -- delete_routine in low 3 bytes of type
                test dword[edx-4],16777215  ;#004639B0: 367102 FC FFFFFF00         u  00 04  2 1282    *04*
;  4103         jz @f
                jz #004639D0              ;#004639B7: 164 17                     v  00 00  1 1283      
;  4104             push edx
                    push edx              ;#004639B9: 122                        uv 00 04  1 1284      
;  4105             lea eax,[edx+1]
                    lea eax,[edx+1]       ;#004639BA: 215102 01                  vu 01 04  1 1284      
;  4106             -- put a refcount of 1 back (normally but not necessarily 0 by now)
;  4107             mov dword[edx-8],1
                    mov [edx-8], dword 1  ;#004639BD: 307102 F8 01000000         uv 00 04  1 1285      
;  4108 --          mov dword[edx-8],2
;  4109 --          mov eax,[pDelRtn]
;  4110             -- reconstruct the ref
;  4111 --          add edx,1
;  4112 --      mov eax,[DelRtn]            ; see builtins/pdelete.e/deletef()
;  4113 --          shl eax,2
;  4114 --          ror edx,2
;  4115             ror eax,2
                    ror eax,2             ;#004639C4: 301310 02                  np 01 01  1 1286      
;  4116 --      mov [DelRef],edx
;  4117 --      call eax
;  4118 --DEV:
;  4119 --          call :%DelRtn
;  4120 --          call [pDelRtn]
;  4121 --          call eax
;  4122             call :%opDelete
                    call #00462FE4 (:%opDelete)  ;#004639C7: 350 18F6FFFF               v  00 00  1 1287      
;  4123 --        ::pDealloc12
;  4124             pop edx
                    pop edx               ;#004639CC: 132                        uv 04 00  1 1288      
;  4125             mov dword[edx-8],ebx        -- and re-zero the refcount
                    mov [edx-8],ebx       ;#004639CD: 211132 F8                  uv 00 0C  1 1291 04 *04*
;  4126     [64]
;  4127         push qword[rsp]
;  4128     :%pDealloc0         -- (era @ [rsp+8])
;  4129     -----------
;  4130         lea rax,[rbx-1]                         -- #FFFFFFFFFFFFFFFF, instead of...
;  4131         shl rdx,2
;  4132         shr rax,8                               -- #00FFFFFFFFFFFFFF (which, being 56 bits, we struggle to handle on 32-bits) [DEV]
;  4133         xor rbx,rbx -- (save some grief)
;  4134 --      test qword[rdx-8],0x00FFFFFFFFFFFFFF    -- delete_routine in low 7 bytes of type?
;  4135         test qword[rdx-8],rax                   -- delete_routine in low 7 bytes of type?
;  4136         jz @f
;  4137             push rdx
;  4138             lea rax,[rdx+1]
;  4139             -- put a refcount of 1 back (normally but not necessarily 0 by now)
;  4140             mov qword[rdx-16],1
;  4141 --          mov qword[rdx-16],2
;  4142 --          mov rax,[pDelRtn]
;  4143             -- reconstruct the ref
;  4144 --          add rdx,1
;  4145 --      mov eax,[DelRtn]            ; see builtins/pdelete.e/deletef()
;  4146 --          shl rax,2
;  4147             ror rax,2
;  4148 --      mov [DelRef],edx
;  4149 --      call eax
;  4150 --DEV:
;  4151 --          call :%DelRtn
;  4152 --          call rax
;  4153             call :%opDelete
;  4154 --        ::pDealloc24
;  4155             pop rdx
;  4156             mov qword[rdx-16],rbx       -- and re-zero the refcount
;  4157     []
;  4158       @@:
;  4159     [32]
;  4160         cmp byte[edx-1],0x80
                cmp byte[edx-1],#80       ;#004639D0: 200172 FF 80               u  00 04  2 1292      
;  4161         jae @f
                jae #004639F4             ;#004639D4: 163 1E                     v  00 00  1 1293      
;  4162             -- float
;  4163 --          if debug
;  4164                 cmp byte[edx-1],0x12
                        cmp byte[edx-1],#12  ;#004639D6: 200172 FF 12               u  00 04  2 1294      
;  4165                 jne :deallocerrunknowntype
                        jne #004632CA     ;#004639DA: 017205 EAF8FFFF            v  00 00  1 1295      
;  4166 --          end if
;  4167 --          mov eax,edx
;  4168             lea eax,[edx-8]
                    lea eax,[edx-8]       ;#004639E0: 215102 F8                  uv 01 04  1 1296      
;  4169             mov ecx,16
                    mov ecx,16            ;#004639E3: 271 10000000               vu 02 00  1 1296      
;  4170             mov edx,[esp+4]         -- era
                    mov edx,[esp+4]       ;#004639E8: 213124044 04               uv 04 10  1 1297      
;  4171             call :%pFreePool        -- free ecx bytes at eax
                    call #004636B8 (:%pFreePool)  ;#004639EC: 350 C7FCFFFF               v  00 00  1 1297      
;  4172 --          ret
;  4173             ret 4
                    ret 4                 ;#004639F1: 302 0400                   np 00 00  3 1298      
;  4174     [64]
;  4175         cmp byte[rdx-1],0x80
;  4176         jae @f
;  4177             -- float
;  4178 --          if debug
;  4179                 cmp byte[rdx-1],0x12
;  4180                 jne :deallocerrunknowntype
;  4181 --          end if
;  4182 --          mov rax,rdx
;  4183             lea rax,[rdx-16]
;  4184 --          mov rcx,26
;  4185             mov rcx,28
;  4186 --          jmp :%pFreePool     -- free rcx bytes at rax
;  4187             mov rdx,[rsp+8]
;  4188             call :%pFreePool    -- free rcx bytes at rax
;  4189             ret 8
;  4190     []
;  4191       @@:
;  4192         je @f
                je #00463A12              ;#004639F4: 164 1C                     v  00 00  1 1301      
;  4193             -- string
;  4194     [32]
;  4195 --          if debug
;  4196                 cmp byte[edx-1],0x82
                        cmp byte[edx-1],#82  ;#004639F6: 200172 FF 82               u  00 04  2 1302      
;  4197                 jne :deallocerrunknowntype
                        jne #004632CA     ;#004639FA: 017205 CAF8FFFF            v  00 00  1 1303      
;  4198 --          end if
;  4199             mov ecx,[edx-16]        -- maxlen in bytes
                    mov ecx,[edx-16]      ;#00463A00: 213112 F0                  uv 02 04  1 1304      
;  4200             lea eax,[edx-16]        -- start of allocated memory (address of maxlen)
                    lea eax,[edx-16]      ;#00463A03: 215102 F0                  vu 01 04  1 1304      
;  4201             mov edx,[esp+4]         -- era
                    mov edx,[esp+4]       ;#00463A06: 213124044 04               uv 04 10  1 1305      
;  4202             call :%pFreePool        -- free ecx bytes at eax
                    call #004636B8 (:%pFreePool)  ;#00463A0A: 350 A9FCFFFF               v  00 00  1 1305      
;  4203           ::dret
;  4204 --          ret
;  4205             ret 4
                    ret 4                 ;#00463A0F: 302 0400                   np 00 00  3 1306      
;  4206     [64]
;  4207 --          if debug
;  4208                 cmp byte[rdx-1],0x82
;  4209                 jne :deallocerrunknowntype
;  4210 --          end if
;  4211             mov rcx,[rdx-32]        -- maxlen in bytes
;  4212             lea rax,[rdx-32]        -- start of allocated memory (address of maxlen)
;  4213 --          jmp :%pFreePool         -- free rcx bytes at rax
;  4214             mov rdx,[rsp+8]         -- era
;  4215             call :%pFreePool        -- free rcx bytes at rax
;  4216           ::dret
;  4217 --          ret
;  4218             ret 8
;  4219     []
;  4220       @@:
;  4221             -- sequence
;  4222     [32]
;  4223 --          if debug
;  4224 --              cmp byte[edx-1],0x80        -- (must be to get here)
;  4225 --              jne :deallocerrunknowntype
;  4226 --          end if
;  4227             mov dword[edx-8],0          -- clear refcount (just in case/see note above/tested to terminate loop)
                    mov [edx-8], dword 0  ;#00463A12: 307102 F8 00000000         uv 00 04  1 1309      
;  4228          ::dseqloop
;  4229             mov ecx,[edx-12]            -- length in dwords
                    mov ecx,[edx-12]      ;#00463A19: 213112 F4                  vu 02 04  1 1309      
;  4230          ::dseqresetbase
;  4231             mov esi,edx                 -- start with base ptr, ie s[1]
                    mov esi,edx           ;#00463A1C: 213362                     uv 40 04  1 1310      
;  4232          ::dseqelementloop
;  4233             sub ecx,1
                    sub ecx,1             ;#00463A1E: 203351 01                  vu 02 02  1 1310      
;  4234     [64]
;  4235 --          if debug
;  4236 --              cmp byte[rdx-1],0x80        -- (must be to get here)
;  4237 --              jne :deallocerrunknowntype
;  4238 --          end if
;  4239             mov qword[rdx-16],0         -- clear refcount (just in case/see note above/tested to terminate loop)
;  4240          ::dseqloop
;  4241             mov rcx,[rdx-24]            -- length in qwords
;  4242             shl rcx,3                   -- length in bytes
;  4243          ::dseqresetbase
;  4244             mov rsi,rdx                 -- start with base ptr, ie s[1]
;  4245          ::dseqelementloop
;  4246             sub rcx,8
;  4247     []
;  4248             jge @f
                    jge #00463A47         ;#00463A21: 175 24                     v  00 00  1 1311      
;  4249     [32]
;  4250                 mov ecx,[edx-16]        -- maxlen in bytes
                        mov ecx,[edx-16]  ;#00463A23: 213112 F0                  uv 02 04  1 1312      
;  4251                 mov esi,[edx-8]         -- restore raw address (parent) from refcount
                        mov esi,[edx-8]   ;#00463A26: 213162 F8                  vu 40 04  1 1312      
;  4252                 mov edi,[edx-4]         -- restore remaining items (parent) from type 
                        mov edi,[edx-4]   ;#00463A29: 213172 FC                  uv 80 04  1 1313      
;  4253                 lea eax,[edx-20]        -- start of allocated memory (address of slack)
                        lea eax,[edx-20]  ;#00463A2C: 215102 EC                  vu 01 04  1 1313      
;  4254                 sub eax,[edx-20]        -- account for any slack
                        sub eax,[edx-20]  ;#00463A2F: 053102 EC                  uv 01 05  2 1314      
;  4255                 pushad
                        pushad            ;#00463A32: 140                        np 00 FF  5 1316      
;  4256                 mov edx,[esp+36]        -- era
                        mov edx,[esp+36]  ;#00463A33: 213124044 24               uv 04 10  1 1321      
;  4257                 call :%pFreePool        -- free ecx bytes at eax
                        call #004636B8 (:%pFreePool)  ;#00463A37: 350 7CFCFFFF               v  00 00  1 1321      
;  4258                 popad
                        popad             ;#00463A3C: 141                        np FF 00  5 1322      
;  4259                 test esi,esi            -- if no parent quit
                        test esi,esi      ;#00463A3D: 205366                     uv 00 40  1 1327      
;  4260                 jz :dret
                        jz #00463A0F      ;#00463A3F: 164 CE                     v  00 00  1 1327      
;  4261                 mov edx,esi             -- raw address
                        mov edx,esi       ;#00463A41: 213326                     uv 04 40  1 1328      
;  4262                 mov ecx,edi             -- remaining items
                        mov ecx,edi       ;#00463A43: 213317                     vu 02 80  1 1328      
;  4263                 jmp :dseqresetbase
                        jmp #00463A1C     ;#00463A45: 353 D5                     v  00 00  1 1329      
;  4264     [64]
;  4265                 mov rcx,[rdx-32]        -- maxlen in bytes
;  4266                 mov rsi,[rdx-16]        -- restore raw address (parent) from refcount
;  4267                 mov rdi,[rdx-8]         -- restore remaining items (parent) from type 
;  4268                 lea rax,[rdx-40]        -- start of allocated memory (address of slack)
;  4269                 sub rax,[rdx-40]        -- account for any slack
;  4270 --              pushad
;  4271                 push rdx    -- (align)
;  4272                 push rsi
;  4273                 push rdi
;  4274                 mov rdx,[rsp+32]        -- era
;  4275                 call :%pFreePool        -- free rcx bytes at rax
;  4276 --              popad
;  4277                 pop rdi
;  4278                 pop rsi
;  4279                 pop rdx
;  4280                 test rsi,rsi            -- if no parent quit
;  4281                 jz :dret
;  4282                 mov rdx,rsi             -- raw address
;  4283                 mov rcx,rdi             -- remaining items
;  4284                 jmp :dseqresetbase
;  4285     []
;  4286           @@:
;  4287     [32]
;  4288             mov edi,[esi+ecx*4]
                    mov edi,[esi+ecx*4]   ;#00463A47: 213074216                  uv 80 42  1 1332    *02*
;  4289             xor eax,eax                 -- for use as base (lessens AGI to boot!)
                    xor eax,eax           ;#00463A4A: 061300                     vu 01 01  1 1332      
;  4290             cmp edi,h4  
                    cmp edi,h4            ;#00463A4C: 201377 00000040            uv 00 80  1 1333      
;  4291             jl :dseqelementloop
                    jl #00463A1E          ;#00463A52: 174 CA                     v  00 00  1 1333      
;  4292             sub dword[eax+edi*4-8],1    -- decrement refcount
                    sub dword[eax+edi*4-8],1  ;#00463A54: 203154270 F8 01            u  00 81  3 1334      
;  4293             lea eax,[eax+edi*4]
                    lea eax,[eax+edi*4]   ;#00463A59: 215004270                  vu 01 81  1 1336      
;  4294             jnz :dseqelementloop
                    jnz #00463A1E         ;#00463A5C: 165 C0                     v  00 00  1 1337      
;  4295             test dword[eax-4],0x00FFFFFF
                    test dword[eax-4],16777215  ;#00463A5E: 367100 FC FFFFFF00         u  00 01  2 1340    *01*
;  4296     [64]
;  4297             mov rdi,[rsi+rcx]
;  4298             xor rax,rax                 -- for use as base (lessens AGI to boot!)
;  4299             lea r14,[rbx-1]             -- #FFFFFFFFFFFFFFFF, instead of...
;  4300 --          cmp rdi,h4  
;  4301             mov r15,h4
;  4302             shr r14,8                   -- #00FFFFFFFFFFFFFF (which, being 56 bits, we struggle to handle on 32-bits) [DEV]
;  4303             cmp rdi,r15
;  4304             jl :dseqelementloop
;  4305             sub qword[rax+rdi*4-16],1   -- decrement refcount
;  4306             lea rax,[rax+rdi*4]
;  4307             jnz :dseqelementloop
;  4308 --          test dword[eax-4],0x00FFFFFF
;  4309 --[DEV check the listing:]
;  4310 -->         test qword[rax-8],-256  -- delete_routine in low 7 bytes of type 
;  4311             test qword[rax-8],r14       -- delete_routine in low 7 bytes of type?
;  4312     []
;  4313             jz :nodeleteroutine
                    jz #00463A82          ;#00463A65: 164 1B                     v  00 00  1 1341      
;  4314     [32]
;  4315                 pushad
                        pushad            ;#00463A67: 140                        np 00 FF  5 1342      
;  4316                 mov dword[eax-8],1      -- put a refcount of 1 back
                        mov [eax-8], dword 1  ;#00463A68: 307100 F8 01000000         uv 00 01  1 1347      
;  4317 --              mov dword[eax-8],2      -- put a refcount of 2 back
;  4318 --              mov ecx,[pDelRtn]
;  4319                 add eax,1               -- reconstruct the ref
                        add eax,1         ;#00463A6F: 203300 01                  vu 01 01  1 1347      
;  4320 --      mov edx,[DelRtn]
;  4321 --              shl ecx,2
;  4322                 ror eax,2
                        ror eax,2         ;#00463A72: 301310 02                  np 01 01  1 1348      
;  4323 --      mov [DelRef],eax
;  4324 --      call edx
;  4325 --              mov edx,eax
;  4326 --DEV
;  4327 --              call :%DelRtn
;  4328 --              call ecx
;  4329                 call :%opDelete
                        call #00462FE4 (:%opDelete)  ;#00463A75: 350 6AF5FFFF               v  00 00  1 1349      
;  4330 --            ::pDealloc40
;  4331                 popad
                        popad             ;#00463A7A: 141                        np FF 00  5 1350      
;  4332                 mov dword[eax-8],0
                        mov [eax-8], dword 0  ;#00463A7B: 307100 F8 00000000         uv 00 01  1 1356    *01*
;  4333     [64]
;  4334                 push rax
;  4335                 push rcx
;  4336                 push rdx
;  4337                 push rsi
;  4338                 --rsi?
;  4339                 mov qword[rax-16],1     -- puts a refcount of 1 back
;  4340 --              mov qword[rax-16],2     -- puts a refcount of 1 back
;  4341 --              mov rcx,[pDelRtn]
;  4342                 add rax,1               -- reconstruct the ref
;  4343 --      mov rdx,[DelRtn]            ; see builtins/pdelete.e/deletef()
;  4344 --              shl rcx,2
;  4345                 ror rax,2
;  4346 --      mov [DelRef],eax
;  4347 --      call edx
;  4348 --DEV:
;  4349 --              call :%DelRtn
;  4350 --              mov rdx,rax
;  4351 --              call rcx
;  4352                 call :%opDelete
;  4353 --            ::pDealloc24a
;  4354                 pop rsi
;  4355                 pop rdx
;  4356                 pop rcx
;  4357                 pop rax
;  4358 --DEV++??
;  4359                 mov qword[rax-16],rbx       -- and re-zero the refcount
;  4360     []
;  4361           ::nodeleteroutine
;  4362     [32]
;  4363             cmp byte[eax-1],0x80
                    cmp byte[eax-1],#80   ;#00463A82: 200170 FF 80               u  00 01  2 1357      
;  4364     [64]
;  4365             cmp byte[rax-1],0x80
;  4366     []
;  4367             jnb @f
                    jnb #00463AAA         ;#00463A86: 163 22                     v  00 00  1 1358      
;  4368             -- float
;  4369     [32]
;  4370 --              if debug
;  4371                     cmp byte[eax-1],0x12
                            cmp byte[eax-1],#12  ;#00463A88: 200170 FF 12               u  00 01  2 1359      
;  4372                     jne :deallocerrunknowntype
                            jne #004632CA  ;#00463A8C: 017205 38F8FFFF            v  00 00  1 1360      
;  4373 --              end if
;  4374                 pushad
                        pushad            ;#00463A92: 140                        np 00 FF  5 1361      
;  4375                 sub eax,8
                        sub eax,8         ;#00463A93: 203350 08                  uv 01 01  1 1366      
;  4376                 mov ecx,16
                        mov ecx,16        ;#00463A96: 271 10000000               vu 02 00  1 1366      
;  4377                 mov edx,[esp+36]        -- era
                        mov edx,[esp+36]  ;#00463A9B: 213124044 24               uv 04 10  1 1367      
;  4378                 call :%pFreePool        -- free ecx bytes at eax
                        call #004636B8 (:%pFreePool)  ;#00463A9F: 350 14FCFFFF               v  00 00  1 1367      
;  4379                 popad
                        popad             ;#00463AA4: 141                        np FF 00  5 1368      
;  4380     [64]
;  4381 --              if debug
;  4382                     cmp byte[rax-1],0x12
;  4383                     jne :deallocerrunknowntype
;  4384 --              end if
;  4385 --              pushad
;  4386                 push rcx
;  4387                 push rdx
;  4388                 push rsi
;  4389                 sub rax,16
;  4390 --              mov rcx,26
;  4391                 mov rcx,28
;  4392                 mov rdx,[rsp+32]        -- era
;  4393                 call :%pFreePool        -- free rcx bytes at rax
;  4394 --              popad
;  4395                 pop rsi
;  4396                 pop rdx
;  4397                 pop rcx
;  4398     []
;  4399                 jmp :dseqelementloop
                        jmp #00463A1E     ;#00463AA5: 351 74FFFFFF               v  00 00  1 1373      
;  4400           @@:
;  4401     [32]
;  4402                 mov edi,[eax-12]        -- length
                        mov edi,[eax-12]  ;#00463AAA: 213170 F4                  uv 80 01  1 1376    *01*
;  4403     [64]
;  4404                 mov rdi,[rax-24]        -- length
;  4405     []
;  4406                 je @f
                        je #00463ACF      ;#00463AAD: 164 20                     v  00 00  1 1376      
;  4407                     -- string
;  4408     [32]
;  4409 --                  if debug
;  4410                         cmp byte[eax-1],0x82
                                cmp byte[eax-1],#82  ;#00463AAF: 200170 FF 82               u  00 01  2 1377      
;  4411                         jne :deallocerrunknowntype
                                jne #004632CA  ;#00463AB3: 017205 11F8FFFF            v  00 00  1 1378      
;  4412 --                  end if
;  4413                     pushad
                            pushad        ;#00463AB9: 140                        np 00 FF  5 1379      
;  4414 --  push edx
;  4415 --  push ecx
;  4416                     mov ecx,[eax-16]
                            mov ecx,[eax-16]  ;#00463ABA: 213110 F0                  uv 02 01  1 1384      
;  4417                     sub eax,16
                            sub eax,16    ;#00463ABD: 203350 10                  vu 01 01  1 1384      
;  4418                     mov edx,[esp+36]    -- era
                            mov edx,[esp+36]  ;#00463AC0: 213124044 24               uv 04 10  1 1385      
;  4419                     call :%pFreePool    -- free ecx bytes at eax
                            call #004636B8 (:%pFreePool)  ;#00463AC4: 350 EFFBFFFF               v  00 00  1 1385      
;  4420                     popad
                            popad         ;#00463AC9: 141                        np FF 00  5 1386      
;  4421 --  pop ecx
;  4422 --  pop edx
;  4423     [64]
;  4424 --                  if debug
;  4425                         cmp byte[rax-1],0x82
;  4426                         jne :deallocerrunknowntype
;  4427 --                  end if
;  4428 --                  pushad
;  4429                     push rcx
;  4430                     push rdx
;  4431                     push rsi
;  4432 --17/12/14:
;  4433 --                  mov ecx,[eax-16]
;  4434 --                  sub eax,16
;  4435                     mov rcx,[rax-32]
;  4436                     sub rax,32
;  4437                     mov rdx,[rsp+32]    -- era
;  4438                     call :%pFreePool    -- free rcx bytes at rax
;  4439 --                  popad
;  4440                     pop rsi
;  4441                     pop rdx
;  4442                     pop rcx
;  4443     []
;  4444                     jmp :dseqelementloop
                            jmp #00463A1E  ;#00463ACA: 351 4FFFFFFF               v  00 00  1 1391      
;  4445           @@:
;  4446                 -- sequence
;  4447     [32]
;  4448 --              if debug
;  4449 --                  cmp byte[eax-1],0x80        -- (must be to get here)
;  4450 --                  jne :deallocerrunknowntype
;  4451 --              end if
;  4452                 mov [eax-8],edx     -- save raw (parent) in refcount (otherwise zero)
                        mov [eax-8],edx   ;#00463ACF: 211120 F8                  uv 00 05  1 1394    *01*
;  4453                 mov [eax-4],ecx     -- save remaining items in type (otherwise seq, ie #80)
                        mov [eax-4],ecx   ;#00463AD2: 211110 FC                  vu 00 03  1 1394      
;  4454                 mov edx,eax         -- new raw (child) address
                        mov edx,eax       ;#00463AD5: 213320                     uv 04 01  1 1395      
;  4455     [64]
;  4456 --              if debug
;  4457 --                  cmp byte[rax-1],0x80        -- (must be to get here)
;  4458 --                  jne :deallocerrunknowntype
;  4459 --              end if
;  4460                 mov [rax-16],rdx    -- save raw (parent) in refcount (otherwise zero)
;  4461                 mov [rax-8],rcx     -- save remaining items in type (otherwise seq, ie #80)
;  4462                 mov rdx,rax         -- new raw (child) address
;  4463     []
;  4464                 jmp :dseqloop
                        jmp #00463A19     ;#00463AD7: 351 3DFFFFFF               v  00 00  1 1395      
;  4465 
;  4466 --if debug
;  4467 --deallocerrunknowntype:
;  4468 --  call puthex32
;  4469 --  mov esi,deallocunknowntype
;  4470 --  call putstr
;  4471 --  jmp showerror
;  4472 --end if
;  4473 
;  4474 --;;DEV trigger p.err creation...
;  4475 --if used HeapFail
;  4476 --HeapFail:
;  4477 --  mov esi,Heaperror
;  4478 --  call putstr
;  4479 --;;int3
;  4480 --; invoke ExitProcess,1
;  4481 --end if
;  4482 --
;  4483 --;;DEV remove this?:
;  4484 --showerror:
;  4485 --  call showcr
;  4486 --  call showcr
;  4487 --  mov esi,pressenter
;  4488 --  call putstr
;  4489 --  call showcr
;  4490 --  call wait_key
;  4491 --  call opFreeCons
;  4492 --;DEV??? (if close() is now in hll)
;  4493 --  call opClosem9
;  4494 --  invoke ExitProcess,1
;  4495 
;  4496 --!*/
;  4497 
;  4498 --DEV allocate_data() etc might be an issue..
;  4499 --DEV/SUG put guards on all allocate and free, reduce limits accordingly. (NO: pRoot should be enough!)
;  4500 --/*
;  4501 procedure :%pAlloc(:%)
;  4502 end procedure -- (for Edita/CtrlQ)
;  4503 --*/
;  4504     :%pAlloc
;  4505 ------------
;  4506 --DEV linked list: nSize (4/8) -> nSize,pNext,pPrev (12/24), and matching changes to limits (pHeapA.e anyone?).
;  4507 --  pAlloc needs:
;  4508 --      enter_cs(0)     -- (if >1 tcb exists?)
;  4509 --      this.next = pAhead
;  4510 --      this.prev = null
;  4511 --      pAhead = this
;  4512 --      leave_cs(0)     -- ("", saved)
;  4513 --  pFree needs:
;  4514 --      enter_cs(0)     -- (if >1 tcb exists?)
;  4515 --      if this.prev==null then
;  4516 --          pAhead:=this.next
;  4517 --      else
;  4518 --          this.prev.next:=this.next
;  4519 --      end if
;  4520 --      if this.next!==null then
;  4521 --          this.next.prev:=this.prev
;  4522 --      end if
;  4523 --      leave_cs(0)     -- ("", saved)
;  4524     [32]
;  4525         -- size in ecx, result addr in edi
;  4526         xor ebx,ebx -- (save some grief)
                xor ebx,ebx               ;#00463ADC: 061333                     uv 08 08  1 1396      
;  4527 --/* now the responsibility of builtins/pAlloc.e:
;  4528         cmp ecx,h4  --DEV :%pLoadMint?
;  4529         jl @f
;  4530             cmp byte[ebx+ecx*4-1],0x12
;  4531             jne :e37atambpi  -- argument to allocate must be positive integer
;  4532             sub esp,8
;  4533             fld qword[ebx+ecx*4]
;  4534             call :%down53
;  4535             fistp qword[esp]
;  4536             call :%near53
;  4537             mov ecx,[esp]
;  4538             add esp,8
;  4539       @@:
;  4540         test ecx,ecx
;  4541 --      jle :e37atambpi     -- argument to allocate must be positive integer
;  4542 --      jg @f
;  4543         jge @f              -- 25/10/15 allocate(0) should be allowed
;  4544           ::e37atambpi      -- argument to allocate must be positive integer
;  4545             pop edx
;  4546             mov al,37       -- e37atambpi
;  4547             sub edx,1
;  4548             jmp :!iDiag
;  4549             int3
;  4550       @@:
;  4551 --*/
;  4552         -- calling convention
;  4553         -- mov ecx,[size]   -- (checked to be integer>=0)
;  4554         -- lea edi,[res]
;  4555         -- mov edx,[ebp+12] -- era/called from address
;  4556         -- call :%pAlloc
;  4557         add ecx,4           -- for nSize
                add ecx,4                 ;#00463ADE: 203301 04                  vu 02 02  1 1396      
;  4558 --      mov edx,[esp]       -- era[DEV]
;  4559         push edi
                push edi                  ;#00463AE1: 127                        uv 00 80  1 1397      
;  4560         call :%pGetPool     -- (trashes all registers)
                call #004632EA (:%pGetPool)  ;#00463AE2: 350 03F8FFFF               v  00 00  1 1397      
;  4561         -- result is edx bytes at eax, but we use first 4 bytes to save the size, for free().
;  4562         test eax,eax
                test eax,eax              ;#00463AE7: 205300                     uv 00 01  1 1398      
;  4563         jz @f
                jz #00463AF0              ;#00463AE9: 164 05                     v  00 00  1 1398      
;  4564             mov [eax],edx   -- so this is 16 when returning 12 bytes of useable space (at eax+4).
                    mov [eax],edx         ;#00463AEB: 211020                     uv 00 05  1 1399      
;  4565             add eax,4       -- for nSize (see also "Minor point" above)
                    add eax,4             ;#00463AED: 203300 04                  vu 01 01  1 1399      
;  4566       @@:
;  4567         pop edi
                pop edi                   ;#00463AF0: 137                        uv 80 00  1 1400      
;  4568         push ebx
                push ebx                  ;#00463AF1: 123                        vu 00 08  1 1400      
;  4569         push eax
                push eax                  ;#00463AF2: 120                        uv 00 01  1 1401      
;  4570         fild qword[esp]
                fild qword[esp]           ;#00463AF3: 337054044                  np 00 10  3 1402      
;  4571         add esp,8
                add esp,8                 ;#00463AF6: 203304 08                  uv 10 10  1 1405      
;  4572         jmp :%pStoreFlt     -- [edi]:=st0
                jmp #0046388C (:%pStoreFlt)  ;#00463AF9: 351 8EFDFFFF               v  00 00  1 1405      
;  4573     [64]
;  4574         -- size in rcx, result addr in rdi
;  4575         xor rbx,rbx -- (save some grief)
;  4576 --/* now the responsibility of builtins/pAlloc.e:
;  4577         mov r15,h4
;  4578         push rdi
;  4579         cmp rcx,r15
;  4580         jl @f
;  4581             cmp byte[rbx+rcx*4-1],0x12
;  4582             jne :e37atambpi  -- argument to allocate must be positive integer
;  4583             sub rsp,8
;  4584             fld tbyte[rbx+rcx*4]
;  4585             call :%down64
;  4586             fistp qword[rsp]
;  4587             call :%near64
;  4588             pop rcx
;  4589       @@:
;  4590         test rcx,rcx
;  4591 --      jle :e37atambpi     -- argument to allocate must be positive integer
;  4592         jg @f
;  4593           ::e37atambpi      -- argument to allocate must be positive integer
;  4594             pop rdx
;  4595             mov al,37       -- e37atambpi
;  4596             sub rdx,1
;  4597             jmp :!iDiag
;  4598             int3
;  4599       @@:
;  4600 --*/
;  4601         add rcx,8           -- for nSize
;  4602 --      mov rdx,[rsp+8]     -- era
;  4603         push rdi
;  4604         call :%pGetPool
;  4605         -- result is rdx bytes at rax, but we use first 8 bytes to save the size, for free().
;  4606         test rax,rax
;  4607         jz @f
;  4608             mov [rax],rdx   -- so this is 28 when returning 20 bytes of useable space (at rax+8).
;  4609             add rax,8       -- for nSize (see also "Minor point" above)
;  4610       @@:
;  4611         pop rdi
;  4612         push rax
;  4613         fild qword[rsp]     -- (treat as signed)
;  4614         add rsp,8
;  4615         jmp :%pStoreFlt     -- [rdi]:=st0
;  4616     []
;  4617 
;  4618 --/*
;  4619 procedure :%pFree(:%)
;  4620 end procedure -- (for Edita/CtrlQ)
;  4621 --*/
;  4622     :%pFree
;  4623 ------------
;  4624     [32]
;  4625         -- addr in eax, era in edx
;  4626         xor ebx,ebx -- (save some grief)
                xor ebx,ebx               ;#00463AFE: 061333                     uv 08 08  1 1406      
;  4627         cmp eax,h4  --DEV :%pLoadMint
                cmp eax,h4                ;#00463B00: 075 00000040               vu 00 01  1 1406      
;  4628         jl @f
                jl #00463B2B (:%pFree_e107ifma)  ;#00463B05: 174 24                     v  00 00  1 1407      
;  4629             cmp byte[ebx+eax*4-1],0x12
                    cmp byte[ebx+eax*4-1],#12  ;#00463B07: 200174203 FF 12            u  00 09  2 1408      
;  4630             jne :e38atfmba   -- argument to free must be an atom
                    jne #004632E8         ;#00463B0C: 017205 D6F7FFFF            v  00 00  1 1409      
;  4631             sub esp,8
                    sub esp,8             ;#00463B12: 203354 08                  uv 10 10  1 1410      
;  4632             fld qword[ebx+eax*4]
                    fld qword[ebx+eax*4]  ;#00463B15: 335004203                  np 00 09  1 1411      
;  4633             call :%down53
                    call #00462155 (:%down53)  ;#00463B18: 350 38E6FFFF               v  00 00  1 1412      
;  4634             fistp qword[esp]
                    fistp qword[esp]      ;#00463B1D: 337074044                  np 00 10  6 1413      
;  4635             call :%near53
                    call #00462163 (:%near53)  ;#00463B20: 350 3EE6FFFF               v  00 00  1 1419      
;  4636             mov eax,[esp]
                    mov eax,[esp]         ;#00463B25: 213004044                  uv 01 10  1 1420      
;  4637             add esp,8
                    add esp,8             ;#00463B28: 203304 08                  vu 10 10  1 1420      
;  4638       @@:
;  4639       :%pFree_e107ifma      -- exception here mapped to e107ifma
;  4640         mov ecx,[eax-4]     -- retrieve size
                mov ecx,[eax-4]           ;#00463B2B: 213110 FC                  uv 02 01  1 1423    *01*
;  4641         sub eax,4
                sub eax,4                 ;#00463B2E: 203350 04                  vu 01 01  1 1423      
;  4642 --      mov edx,[esp]       -- era
;  4643     [64]
;  4644         -- addr in rax, era in rdx
;  4645         mov r15,h4
;  4646         xor rbx,rbx -- (save some grief)
;  4647         cmp rax,r15
;  4648         jl @f
;  4649             cmp byte[rbx+rax*4-1],0x12
;  4650             jne :e38atfmba   -- argument to free must be an atom
;  4651             sub rsp,8
;  4652             fld tbyte[rbx+rax*4]
;  4653             call :%down64
;  4654             fistp qword[rsp] -- (assume ok, matches pAlloc [signed])
;  4655             call :%near64
;  4656             pop rax
;  4657       @@:
;  4658       :%pFree_e107ifma      -- exception here mapped to e107ifma
;  4659         mov rcx,[rax-8]     -- retrieve size
;  4660         sub rax,8
;  4661 --      mov rdx,[rsp]       -- era
;  4662     []
;  4663         call :%pFreePool
                call #004636B8 (:%pFreePool)  ;#00463B31: 350 82FBFFFF               v  00 00  1 1424      
;  4664         ret
                ret                       ;#00463B36: 303                        np 00 00  2 1425      
;  4665 
;  4666 --SUG: (now that I've written them, maybe I'll use them... though admittedly IncRef just looks like pure pointless overhead...)
;  4667 --     (we might want cmp h4 inside these calls, which may alter the balance in favour of them being useful...)
;  4668 --/*
;  4669     :%opIncRef
;  4670 --------------
;  4671         [32]
;  4672             -- on entry edx must be set, all registers preserved
;  4673             cmp edx,h4
;  4674             jl @f
;  4675                 add dword[ebx+edx*4-8],1
;  4676           @@:
;  4677         [64]
;  4678             -- on entry rdx must be set, all registers preserved
;  4679             mov r15,h4
;  4680             cmp edx,r15
;  4681             jl @f
;  4682                 add qword[rbx+rdx*4-16],1
;  4683           @@:
;  4684         []
;  4685         ret
;  4686     :%opDecRef
;  4687 --------------
;  4688         [32]
;  4689             -- on entry esi and edx must be set, all registers preserved
;  4690             cmp edx,h4
;  4691             jl @f
;  4692                 sub dword[ebx+edx*4-8],1
;  4693                 jnz @f
;  4694                     pushad
;  4695                     mov dword[esi],ebx
;  4696                     push dword[esp+32]
;  4697                     call :%pDealloc0
;  4698                     popad
;  4699         [64]
;  4700             -- on entry rsi and rdx must be set, no(?) registers preserved
;  4701             mov r15,h4
;  4702             cmp rdx,r15
;  4703             jl @f
;  4704                 sub qword[rbx+rdx*4-16],1
;  4705                 jnz @f
;  4706 --                  pop al  -- (yet to determine which registers need preserving)
;  4707                     mov qword[rsi],rbx
;  4708 --                  push qword[rsp+40??]
;  4709                     push qword[rsp]
;  4710                     call :%pDealloc0
;  4711         []
;  4712           @@:
;  4713             ret
;  4714 --*/
;  4715 
;  4716 --/*
;  4717 procedure :%pCleanupAll(:%)
;  4718 end procedure -- (for Edita/CtrlQ)
;  4719 --*/
;  4720     :%pCleanupAll
;  4721 -----------------
;  4722 --          call :%pFreeStack
;  4723 --      [32]
;  4724 --      [64]
;  4725 --      []
;  4726             ret
                    ret                   ;#00463B37: 303                        np 00 00  2 1427      
;  4727 
;  4728 --/*
;  4729 procedure :%pInitCS(:%)
;  4730 end procedure -- (for Edita/CtrlQ)
;  4731 --*/
;  4732     :%pInitCS
;  4733 -------------
;  4734         [32]
;  4735             -- calling convention:
;  4736             -- lea edi,[res]            -- (integer)
;  4737             -- call :%pInitCS           -- [edi]:=init_cs()
;  4738             -- (trashes all registers)
;  4739             mov edx,[esp]               -- era
                    mov edx,[esp]         ;#00463B38: 213024044                  uv 04 10  1 1429      
;  4740             mov ecx,4                   -- for nSize
                    mov ecx,4             ;#00463B3B: 271 04000000               vu 02 00  1 1429      
;  4741             push edi
                    push edi              ;#00463B40: 127                        uv 00 80  1 1430      
;  4742         [64]
;  4743             -- calling convention:
;  4744             -- lea rdi,[res]            -- (integer)
;  4745             -- call :%pInitCS           -- [rdi]:=init_cs()
;  4746             -- (trashes all registers)
;  4747             mov rdx,[rsp]               -- era
;  4748             mov rcx,8                   -- for nSize
;  4749             push rdi
;  4750         [PE32]
;  4751             add ecx,24                  -- win32 critical section size
                    add ecx,24            ;#00463B41: 203301 18                  vu 02 02  1 1430      
;  4752         [PE64]
;  4753             add rcx,40                  -- win64 critical section size
;  4754         [ELF32]
;  4755             add ecx,4                   -- linux: single DWORD futex,
;  4756         [ELF64]
;  4757             add rcx,4                   --        even on 64-bit
;  4758         []
;  4759             call :%pGetPool             -- (trashes all registers)
                    call #004632EA (:%pGetPool)  ;#00463B44: 350 A1F7FFFF               v  00 00  1 1431      
;  4760         [32]
;  4761             test eax,eax
                    test eax,eax          ;#00463B49: 205300                     uv 00 01  1 1432      
;  4762 --          jz :memoryallocationfailure
;  4763             jnz @f
                    jnz #00463B4E         ;#00463B4B: 165 01                     v  00 00  1 1432      
;  4764                 int3
                        int3              ;#00463B4D: 314                        np 00 00 13 1433      
;  4765           @@:
;  4766             mov [eax],edx               -- save nSize
                    mov [eax],edx         ;#00463B4E: 211020                     uv 00 05  1 1446      
;  4767         [PE32]
;  4768             lea ecx,[eax+4]
                    lea ecx,[eax+4]       ;#00463B50: 215110 04                  vu 02 01  1 1446      
;  4769         [ELF32]
;  4770             mov [eax+4],ebx             -- (a mutex (int32) of 0 is enough)
;  4771         [32]
;  4772             shr eax,2
                    shr eax,2             ;#00463B53: 301350 02                  u  01 01  1 1447      
;  4773             pop edi
                    pop edi               ;#00463B56: 137                        vu 80 00  1 1447      
;  4774             call :%pStoreMint           -- [edi]:=eax (all registers preserved)
                    call #00463978 (:%pStoreMint)  ;#00463B57: 350 1CFEFFFF               v  00 00  1 1448      
;  4775         [PE32]
;  4776             push ecx                                    -- lpCriticalSection
                    push ecx              ;#00463B5C: 121                        uv 00 02  1 1449      
;  4777             call "kernel32.dll","InitializeCriticalSection"
                    call [InitializeCriticalSection]  ;#00463B5D: 377025 78104000            np 00 00  2 1450      
;  4778         [64]
;  4779             test rax,rax
;  4780 --          jz :memoryallocationfailure
;  4781             jnz @f
;  4782                 int3
;  4783           @@:
;  4784             mov [rax],rdx               -- save nSize
;  4785         [PE64]
;  4786             lea rcx,[rax+8]             -- lpCriticalSection (p1)
;  4787         [ELF64]
;  4788             mov dword[rax+8],ebx        -- (a mutex (int32) of 0 is enough) [yes, on 64-bit]
;  4789         [64]
;  4790             shr rax,2
;  4791             pop rdi
;  4792             call :%pStoreMint           -- [rdi]:=rax (preserves rax/rcx/rdx/rsi/rdi)
;  4793         [PE64]
;  4794             mov rax,rsp -- put 2 copies of rsp onto the stack...
;  4795             push rsp
;  4796             push rax
;  4797             or rsp,8    -- [rsp] is now 1st or 2nd copy:
;  4798                         -- if on entry rsp was xxx8: both copies remain on the stack
;  4799                         -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them (+8)
;  4800                         -- obviously rsp is now xxx8, whatever alignment we started with
;  4801             sub rsp,8*5                 -- minimum 4 param shadow space, and align/somewhere to save rax
;  4802 --          (rcx already set)
;  4803             call "kernel32.dll","InitializeCriticalSection"
;  4804 --          add rsp,8*5
;  4805 --          pop rsp
;  4806             mov rsp,[rsp+8*5]   -- equivalent to the add/pop
;  4807         []
;  4808             ret
                    ret                   ;#00463B63: 303                        np 00 00  2 1452      
;  4809 
;  4810 --/*
;  4811 procedure :%pDeleteCS(:%)
;  4812 end procedure -- (for Edita/CtrlQ)
;  4813 --*/
;  4814     :%pDeleteCS
;  4815 ---------------
;  4816         [32]
;  4817             -- calling convention
;  4818             --  mov eax,[mycs]
;  4819             --  mov esi,mycs        -- var no, if it can be unassigned [DEV]
;  4820             --  call :%pDeleteCS    -- delete_cs(eax)
;  4821 --          test eax,eax
;  4822 --          jz @f
;  4823             shl eax,2
                    shl eax,2             ;#00463B64: 301340 02                  u  01 01  1 1454      
;  4824             jz :unassignedcs
                    jz #00463BA5          ;#00463B67: 164 3C                     v  00 00  1 1454      
;  4825 --          jnz @f
;  4826 --              mov eax,[stdcs]
;  4827 --              mov [stdcs],ebx
;  4828 --        @@:
;  4829         [PE32]
;  4830 --          lea ecx,[ebx+eax*4+4]
;  4831             lea ecx,[eax+4]
                    lea ecx,[eax+4]       ;#00463B69: 215110 04                  uv 02 01  1 1457    *01*
;  4832             push eax
                    push eax              ;#00463B6C: 120                        vu 00 01  1 1457      
;  4833             push ecx                                -- lpCriticalSection
                    push ecx              ;#00463B6D: 121                        uv 00 02  1 1458      
;  4834             call "kernel32","DeleteCriticalSection"
                    call [DeleteCriticalSection]  ;#00463B6E: 377025 34104000            np 00 00  2 1459      
;  4835             pop eax
                    pop eax               ;#00463B74: 130                        uv 01 00  1 1461      
;  4836 --      [ELF32]
;  4837 --          pop al          -- (nowt needed)
;  4838         [64]
;  4839             -- calling convention
;  4840             --  mov rax,[mycs]
;  4841             --  mov rsi,mycs        -- var no, if it can be unassigned
;  4842             --  call :%pDeleteCS    -- delete_cs(rax)
;  4843 --          test rax,rax
;  4844 --          jz @f
;  4845             shl rax,2
;  4846             jz :unassignedcs
;  4847 --          jnz @f
;  4848 --              mov rax,[stdcs]
;  4849 --              mov [stdcs],rbx
;  4850 --        @@:
;  4851         [PE64]
;  4852             push rax
;  4853             mov rcx,rsp -- put 2 copies of rsp onto the stack...
;  4854             push rsp
;  4855             push rcx
;  4856             or rsp,8    -- [rsp] is now 1st or 2nd copy:
;  4857                         -- if on entry rsp was xxx8: both copies remain on the stack
;  4858                         -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them (+8)
;  4859                         -- obviously rsp is now xxx8, whichever alignment we started with
;  4860             sub rsp,8*5 -- minimum 4 param shadow space, and align
;  4861 --          lea rcx,[rbx+rax*4+8]                   -- lpCriticalSection
;  4862             lea rcx,[rax+8]
;  4863             call "kernel32","DeleteCriticalSection"
;  4864 --          add rsp,8*5
;  4865 --          pop rsp
;  4866             mov rsp,[rsp+8*5]   -- equivalent to the add/pop
;  4867             pop rax
;  4868 --      [ELF64]
;  4869 --          pop al              -- (nowt needed)
;  4870         [32]
;  4871 --          mov ecx,[ebx+eax*2] -- retrieve size
;  4872             mov ecx,[eax]       -- retrieve size
                    mov ecx,[eax]         ;#00463B75: 213010                     uv 02 01  1 1464 01 *01*
;  4873 --          shl eax,2
;  4874             mov edx,[esp]       -- era
                    mov edx,[esp]         ;#00463B77: 213024044                  vu 04 10  1 1464      
;  4875         [64]
;  4876 --          mov rcx,[rbx+rax*2] -- retrieve size
;  4877             mov rcx,[rax]       -- retrieve size
;  4878 --          shl rax,2
;  4879             mov rdx,[rsp]       -- era
;  4880         []
;  4881             call :%pFreePool
                    call #004636B8 (:%pFreePool)  ;#00463B7A: 350 39FBFFFF               v  00 00  1 1465      
;  4882 --        @@:
;  4883             ret
                    ret                   ;#00463B7F: 303                        np 00 00  2 1466      
;  4884 
;  4885 
;  4886 --/*
;  4887 procedure :%pGetStdCS(:%)
;  4888 end procedure -- (for Edita/CtrlQ)
;  4889 --*/
;  4890 --DEV cold feet?
;  4891 --/*
;  4892     :%pGetStdCS                 -- [edi]:=get_stdcs()
;  4893 --------------
;  4894     [32]
;  4895         -- calling convention
;  4896         -- lea edi,[res]        -- result
;  4897         -- call :%pGetStdCS     -- eax:=get_stdcs(); [edi]:=eax
;  4898         -- (trashes all other registers)
;  4899         mov eax,[stdcs]
;  4900         push edi
;  4901         test eax,eax
;  4902         jnz @f
;  4903             cmp [gt1tcb],ebx
;  4904             je @f
;  4905                 -- (so >1 tcb exists)
;  4906                 lea edi,[stdcs]
;  4907                 call :%pInitCS      -- (trashes all registers)
;  4908                 mov eax,[stdcs]
;  4909       @@:
;  4910         pop rdi
;  4911         jmp :%pStoreMint            -- [edi]:=eax (all registers preserved)
;  4912     [64]
;  4913         mov rax,[stdcs]
;  4914         test rax,rax
;  4915         jnz @f
;  4916             cmp [gt1tcb],rbx
;  4917             je @f
;  4918                 lea rdi,[stdcs]
;  4919                 call :%pInitCS      -- (trashes all registers)
;  4920                 mov rax,[stdcs]
;  4921       @@:
;  4922         pop rdi
;  4923         jmp :%pStoreMint            -- [rdi]:=rax (preserves rax/rcx/rdx/rsi/rdi)
;  4924     []
;  4925 --*/
;  4926 
;  4927 -- no: compiler automatically inserts NULL
;  4928 --  :%opEnterSTDCS
;  4929 --      mov eax,[stdcs]
;  4930 --      ...
;  4931 --/*
;  4932 procedure :%pEnterCS(:%)
;  4933 end procedure -- (for Edita/CtrlQ)
;  4934 --*/
;  4935     :%pEnterCS
;  4936 --------------
;  4937     [32]
;  4938         -- calling convention
;  4939         -- mov ecx,[mycs]       -- or xor ecx,ecx
;  4940         -- mov esi,mycs         -- var no, if it can be unassigned [DEV]
;  4941         -- call :%opEnterCS     -- enter_cs(ecx)
;  4942         test ecx,ecx
                test ecx,ecx              ;#00463B80: 205311                     uv 00 02  1 1468      
;  4943         jnz @f
                jnz #00463BA0             ;#00463B82: 165 1C                     v  00 00  1 1468      
;  4944             mov ecx,[stdcs]
                    mov ecx,[#004021BC] (stdcs)  ;#00463B84: 213015 BC214000            uv 02 00  1 1469      
;  4945             test ecx,ecx
                    test ecx,ecx          ;#00463B8A: 205311                     uv 00 02  1 1470 02   
;  4946             jnz @f
                    jnz #00463BA0         ;#00463B8C: 165 12                     v  00 00  1 1470      
;  4947             lea edi,[stdcs]
                    mov edi,#004021BC     ;#00463B8E: 277 BC214000               uv 80 00  1 1471      
;  4948             call :%pInitCS
                    call #00463B38 (:%pInitCS)  ;#00463B93: 350 A0FFFFFF               v  00 00  1 1471      
;  4949             mov ecx,[stdcs]
                    mov ecx,[#004021BC] (stdcs)  ;#00463B98: 213015 BC214000            uv 02 00  1 1472      
;  4950 --          lea edi,[stdcs]
;  4951 --          call :%pGetStdCS    -- sets eax, trashes rest
;  4952 --          mov ecx,eax
;  4953             xor esi,esi
                    xor esi,esi           ;#00463B9E: 061366                     vu 40 40  1 1472      
;  4954       @@:
;  4955         shl ecx,2
                shl ecx,2                 ;#00463BA0: 301341 02                  u  02 02  1 1473      
;  4956         jnz @f
                jnz #00463BB1             ;#00463BA3: 165 0C                     v  00 00  1 1473      
;  4957       ::unassignedcs
;  4958             pop edx -- era
                    pop edx               ;#00463BA5: 132                        uv 04 00  1 1474      
;  4959             mov al,92           -- e92vhnbaav(esi)
                    mov al,92             ;#00463BA6: 260 5C                     vu 01 00  1 1474      
;  4960             sub edx,1
                    sub edx,1             ;#00463BA8: 203352 01                  uv 04 04  1 1475      
;  4961             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00463BAB: 351 B9020000               v  00 00  1 1475      
;  4962             int3
                    int3                  ;#00463BB0: 314                        np 00 00 13 1476      
;  4963       @@:
;  4964         add ecx,4
                add ecx,4                 ;#00463BB1: 203301 04                  uv 02 02  1 1489      
;  4965     [64]
;  4966         -- calling convention
;  4967         -- mov rcx,[mycs]       -- or xor rcx,rcx
;  4968         -- mov rsi,mycs         -- var no, if it can be unassigned
;  4969         -- call :%opEnterCS     -- enter_cs(rcx)
;  4970         test rcx,rcx
;  4971         jnz @f
;  4972             mov rcx,[stdcs]
;  4973             test rcx,rcx
;  4974             jnz @f
;  4975             lea rdi,[stdcs]
;  4976             call :%pInitCS
;  4977             mov rcx,[stdcs]
;  4978 --          lea rdi,[stdcs]
;  4979 --          call :%pGetStdCS    -- sets rax, trashes rest
;  4980 --          mov rcx,rax
;  4981             xor rsi,rsi
;  4982       @@:
;  4983         shl rcx,2
;  4984         jnz @f
;  4985       ::unassignedcs
;  4986             pop rdx -- era
;  4987             mov al,92           -- e92vhnbaav(esi)
;  4988             sub rdx,1
;  4989             jmp :!iDiag
;  4990             int3
;  4991       @@:
;  4992         add rcx,8
;  4993     []
;  4994         call :EnterCriticalSection -- in pHeap.e (cs in ecx) all registers trashed
                call #0046308D            ;#00463BB4: 350 D4F4FFFF               v  00 00  1 1489      
;  4995         ret
                ret                       ;#00463BB9: 303                        np 00 00  2 1490      
;  4996 
;  4997 --/*
;  4998 procedure :%pTryCS(:%)
;  4999 end procedure -- (for Edita/CtrlQ)
;  5000 --*/
;  5001     :%pTryCS
;  5002 ------------
;  5003 --DEV (if >1 tcb exists)
;  5004     [32]
;  5005         -- calling convention
;  5006         -- mov ecx,[mycs]
;  5007         -- mov esi,mycs         -- var no, if it can be unassigned [DEV]
;  5008         -- lea edi,[res]
;  5009         -- call :%opTryCS       -- [edi]:=try_cs(ecx) (0 means failure)
;  5010         shl ecx,2
                shl ecx,2                 ;#00463BBA: 301341 02                  u  02 02  1 1492      
;  5011         jz :unassignedcs
                jz #00463BA5              ;#00463BBD: 164 E6                     v  00 00  1 1492      
;  5012         add ecx,4
                add ecx,4                 ;#00463BBF: 203301 04                  uv 02 02  1 1493      
;  5013         push edi
                push edi                  ;#00463BC2: 127                        vu 00 80  1 1493      
;  5014     [64]
;  5015         -- calling convention
;  5016         -- mov rcx,[mycs]
;  5017         -- mov rsi,mycs         -- var no, if it can be unassigned
;  5018         -- lea rdi,[res]
;  5019         -- call :%opTryCS       -- [rdi]:=try_cs(rcx) (0 means failure)
;  5020         shl rcx,2
;  5021         jz :unassignedcs
;  5022         add rcx,8
;  5023         push rdi
;  5024     []
;  5025         call :TryEnterCriticalSection
                call #00463095            ;#00463BC3: 350 CDF4FFFF               v  00 00  1 1494      
;  5026     [32]
;  5027         pop edi
                pop edi                   ;#00463BC8: 137                        uv 80 00  1 1495      
;  5028     [64]
;  5029         pop rdi
;  5030     []
;  5031         jmp :%pStoreMint
                jmp #00463978 (:%pStoreMint)  ;#00463BC9: 351 AAFDFFFF               v  00 00  1 1495      
;  5032 
;  5033 --NO: compiler automatically inserts NULL
;  5034 --  :%opLeaveSTDCS
;  5035 --      mov eax,[stdcs]
;  5036 --      ...
;  5037 --/*
;  5038 procedure :%pLeaveCS(:%)
;  5039 end procedure -- (for Edita/CtrlQ)
;  5040 --*/
;  5041     :%pLeaveCS
;  5042 --------------
;  5043 -- DEV (if >1 tcb exists)
;  5044     [32]
;  5045         -- calling convention
;  5046         -- mov ecx,[mycs]       -- or xor ecx,ecx
;  5047         -- mov esi,mycs         -- var no, if it can be unassigned [DEV]
;  5048         -- call :%opLeaveCS     -- leave_cs(ecx)
;  5049         test ecx,ecx
                test ecx,ecx              ;#00463BCE: 205311                     uv 00 02  1 1496      
;  5050         jnz @f
                jnz #00463BE0             ;#00463BD0: 165 0E                     v  00 00  1 1496      
;  5051             mov ecx,[stdcs]
                    mov ecx,[#004021BC] (stdcs)  ;#00463BD2: 213015 BC214000            uv 02 00  1 1497      
;  5052             test ecx,ecx
                    test ecx,ecx          ;#00463BD8: 205311                     uv 00 02  1 1498 02   
;  5053             jz :%e02atdb0
                    jz #004627B6 (:%pDiv0)  ;#00463BDA: 017204 D6EBFFFF            v  00 00  1 1498      
;  5054       @@:
;  5055         shl ecx,2
                shl ecx,2                 ;#00463BE0: 301341 02                  u  02 02  1 1499      
;  5056         jz :unassignedcs
                jz #00463BA5              ;#00463BE3: 164 C0                     v  00 00  1 1499      
;  5057         add ecx,4
                add ecx,4                 ;#00463BE5: 203301 04                  uv 02 02  1 1500      
;  5058     [64]
;  5059         -- calling convention
;  5060         -- mov rcx,[mycs]       -- or xor rcx,rcx
;  5061         -- mov rsi,mycs         -- var no, if it can be unassigned
;  5062         -- call :%opLeaveCS     -- leave_cs(rcx)
;  5063         test rcx,rcx
;  5064         jnz @f
;  5065             mov rcx,[stdcs]
;  5066             test rcx,rcx
;  5067             jz :%e02atdb0
;  5068       @@:
;  5069         shl rcx,2
;  5070         jz :unassignedcs
;  5071         add rcx,8
;  5072     []
;  5073         call :LeaveCriticalSection
                call #0046309D            ;#00463BE8: 350 B0F4FFFF               v  00 00  1 1500      
;  5074         ret
                ret                       ;#00463BED: 303                        np 00 00  2 1501      
;  5075     
;  5076 --  ::fin
;  5077     }
;  5078 
;  5079 
    jmp #00462C8F (:%opRetf)              ;#00463BEE: 351 9CF0FFFF               v  00 00  1 1503      
;C:\Phix\builtins\VM\pDeleteN.e:
;===============================
;     1 --
;     2 -- pDeleteN.e
;     3 -- ==========
;     4 --
;     5 -- Implements delete_routine and delete (auto-include) [DEV make this part of pcfunc.e]
;     6 --
;     7 --  This file is loaded automatically by Phix as and when needed. There is no
;     8 --  need to manually include this file (unless you want a namespace on it).
;     9 --
;    10 --  First, assume this in all the following examples, and something similar
;    11 --   in all programs that make use of delete_routine():
;    12 --
;    13 --      procedure del(object o)  -- (a procedure taking one object parameter)
;    14 --          puts(1,"del\n")      --   (put whatever code you like in here,)
;    15 --          ?o                   --   (    eg free/close/log/debug/etc    )
;    16 --      end procedure
;    17 --      constant r_del = routine_id("del")  -- (whatever names you like)
;    18 --
;    19 -- Usage
;    20 -- =====
;    21 --
;    22 --      data = delete_routine(data,r_del)
;    23 --      ...
;    24 --  --  delete(data) -- (or let this occur automatically when refcount:=0)
;    25 --
;    26 --  A call to delete(data) does NOT destroy/alter data; instead it invokes 
;    27 --  the routine(s) that perform any "done with this" processing, and detaches
;    28 --  said routines so that they are not invoked again.
;    29 --
;    30 --  If an integer is passed to delete_routine, it is returned as a float. See
;    31 --  notes below for more details.
;    32 --
;    33 --  A search of the std/ directory should yield plenty of examples.
;    34 --
;    35 -- NB:
;    36 -- ===
;    37 --
;    38 --  The deletion routines are attached to the *data*, NOT the variable.
;    39 --
;    40 --      In essence, delete_routine "protects" some data that you pass to it,
;    41 --      but it cannot do that reliably if you subsequently "play" with it.
;    42 --
;    43 --  Data passed to delete_routine should be final, or at least pretty close.
;    44 --  ========================================================================
;    45 --  
;    46 --      sequence table
;    47 --          table = {}
;    48 --      --  table = delete_routine(table,r_del) -- NO! utterly pointless!
;    49 --          for i=1 to something do
;    50 --              table = append(table,something_else)
;    51 --          end for
;    52 --          table = delete_routine(table,r_del) -- much more like it.
;    53 --          
;    54 --  Better yet, call delete_routine on each something_else as you add it to 
;    55 --  table, especially if table is likely to be further extended later on.
;    56 --  
;    57 --  The example below, with {7} being extended by lots of {8,9}, explains why
;    58 --  a call on non-final data is not the right thing to do.
;    59 --
;    60 --DEV reword if poc below gets implemented, it becomes 16 million permutations
;    61 --      of delete_routines, instead of 16 million data items, more on 64-bit.
;    62 --  Each and every data value passed to delete_routine gets a private entry in 
;    63 --  delete_sets and is marked with the index of that entry. Up to 16 million 
;    64 --  separate data items may have attached delete routines at any one time, 
;    65 --  which hopefully should be far more than enough (and is probably both far 
;    66 --  more than any real program could fit in memory, not particularly difficult 
;    67 --  to extend if the need should ever arise, just messy and widespread).
;    68 --
;    69 --  Each entry in delete_sets can have as many routine_ids as it likes.
;    70 --  When delete() is called or the reference count drops to zero, the routines 
;    71 --  are called, in reverse order of attachment, and the corresponding entry in
;    72 --  delete_sets is put on a freelist for possible later re-use (or we could 
;    73 --  quite easily "shrink" the table if that ever became an issue).
;    74 --
;    75 --  As above, deletion routines are attached to *data*, not variables. Hence:
;    76 --
;    77 --  (The following all relate to behaviour when data is not "final".)
;    78 --
;    79 --      object a,b
;    80 --
;    81 --          a = delete_routine({4},r_del)
;    82 --          b = a
;    83 --          a[1] = 5
;    84 --          puts(1,"a=0\n")
;    85 --          a = 0       -- del not called!
;    86 --          puts(1,"b=0\n")
;    87 --          b = 0       -- del called, with {4}, not {5}
;    88 --
;    89 --  The above outputs:
;    90 --      a=0
;    91 --      b=0
;    92 --      del
;    93 --      {4}
;    94 --
;    95 -- We asked to "protect" that {4}, not a, and not that modified to {5}, so
;    96 --  in this case (by luck) it has done the best we could possibly want.
;    97 --
;    98 -- However, if you remove the b=a line, del gets called earlier, with {5}:
;    99 --
;   100 --      a=0
;   101 --      del
;   102 --      {5}
;   103 --      b=0
;   104 --
;   105 -- We asked to "protect" that {4}, not a, and not that modified to {5}, but
;   106 --  in this case we may (or may not) need extra manual protection around
;   107 --  that "a[1] = 5", and/or removal (using delete()) beforehand.
;   108 --
;   109 -- Another example, as mentioned above:
;   110 --
;   111 --      object a
;   112 --          a = delete_routine({7},r_del)
;   113 --          for i=1 to 100 do
;   114 --              a &= {8,9}
;   115 --          end for
;   116 --
;   117 --  This calls del on the second iteration, with {7,8,9}, since at that point
;   118 --  there is no space to extend it, a "clone" occurs and the old is discarded.
;   119 --  It would be unlikely if that was what you wanted and may well change - so
;   120 --  stick to the "data must be final" rule. Obviously, therefore, a call such
;   121 --  as a = delete_routine(a,r_del) after the end for would probably be better.
;   122 --  (It may be possible to transfer the delete_routine association as part of 
;   123 --   the "clone", but that could still cause unexpected behaviour.)
;   124 --  OpenEuphoria calls del with {7}, btw.
;   125 --
;   126 --  Yet another bad example might be:
;   127 --
;   128 --      a = delete_routine("a",r_del)
;   129 --      b = delete_routine("b",r_del)
;   130 --      c = delete_routine("c",r_del)
;   131 --
;   132 --      a = b & a & c
;   133 --
;   134 --  The precise behaviour of which is completely undefined - ie del may get 
;   135 --  called with "a", or may get called later with "bac". However, of course,
;   136 --
;   137 --      a = {b,a,c}
;   138 --
;   139 --  is a perfectly valid and predictable/sensible way of coding, because the 
;   140 --  data (that delete_routine saw) has not changed (reference counts aside),
;   141 --  it has instead just been moved to a different variable/element. (There 
;   142 --  is no warranty of any particular order in the above case, only that all
;   143 --  specified delete_routines will (barring abort) at some point be called.)
;   144 --  And yes, the fact that a is not "a" anymore is no reason for r_rel to be
;   145 --  invoked, as that "a" is still an existing element of the new a.
;   146 --
;   147 --  You can of course also do things like:
;   148 --
;   149 --    table = append(table,delete_routine(<expr>,routine_id("tabledel")))
;   150 --
;   151 --DEV chaining delete_routines.
;   152 --  It is technically possible to daisy-chain several delete_routines.
;   153 --  Note however the use of file-level variables and multiple references
;   154 --  can severely interfere with any such attempts:
;   155 --
;   156 --      a = delete_routine(a,r_del1)
;   157 --      b = a
;   158 --      a = delete_routine(a,r_del2)
;   159 --
;   160 --  Now, r_del1 will effectively be attached to the content of b, and the
;   161 --  content of a will have just the one delete_routine, r_del2.
;   162 --
;   163 
;   164 -- Finally, some technical points:
;   165 --
;   166 -- The abort() routine stops program execution immediately, without calling     [DEV not so... at least when interpreting]
;   167 --  any delete_routines. A "table={}" statement or similar may be required to
;   168 --  force them to be called. Just setting a delete_routine does not guarantee
;   169 --  that it will be called, but instead that it will be called *when and if*
;   170 --  the value it is associated with is deleted/deallocated. You should still
;   171 --  plan for and code some manual cleanup; delete_routine operates more as a
;   172 --  guard against data being "lost", than guaranteeing a call occurs.
;   173 --  Typically I use/recommend an "Abort()" routine wrapper for abort.
;   174 --
;   175 -- Delete routines and/or builtins\VM\pHeap.e\:%opDealloc may be called for
;   176 --  items in any order. This means you should only rely on the data /within/
;   177 --  the parameter to your delete_routine, so in eg:
;   178 --      atom t0 = time()    -- (or set during object creation)
;   179 --      procedure mydel(object o)
;   180 --          printf(1,"deleted after %3.2fs\n",{time()-t0})
;   181 --          ...
;   182 --      end procedure
;   183 --  you should not be surprised if (sometimes) t0 is garbage/unassigned/0.
;   184 --  The obvious solution to a situation like the above is to store the time
;   185 --  when the object was created somewhere within the object itself. Sometimes
;   186 --  you may need to maintain a flag, for example set anywhere that abort() is
;   187 --  invoked and after the WinMain() exits, and avoid eg updates to the GUI if 
;   188 --  the call to the delete_routine was triggered by application shutdown. (A
;   189 --  plain file-level integer flag is not subject to any delete_routine() or
;   190 --  :%opDealloc processing.)
;   191 --
;   192 -- If you pass an integer as the first parameter to delete_routine, it is
;   193 --  "promoted" to atom. This may conflict with some fundamental optimisations
;   194 --  widely practised in the backend, specifically that no integer is ever the
;   195 --  same as any value held in a float. You should not later rely on find() or 
;   196 --  even =, but instead use a loop and/or a-N=0 instead of a=N. (ditto "!=")
;   197 --  Things should be fine if all you have done is taken a copy of something
;   198 --  (after the delete_routine call(s)), but if you are debugging, see a "5",
;   199 --  so add (temporarily) say "find(5,table)", then it will not work at all.
;   200 --  Simply "wrap" an integer in a sequence to sidestep this issue (obviously 
;   201 --  any integers contained therein are left as they were, there is no need 
;   202 --  to "promote" them). In truth, integer support is (only) required because 
;   203 --  allocate() may return an integer (<#3FFFFFFF); applications should avoid
;   204 --  relying on this, at least for the sanity of future maintainers.
;   205 --      ie rather than
;   206 --          integer thing
;   207 --          thing = 5
;   208 --          thing = delete_routine(thing,r_del) -- (typecheck error)
;   209 --          if thing=5 ...
;   210 --      or
;   211 --          atom thing
;   212 --          thing = 5
;   213 --          thing = delete_routine(thing,r_del)
;   214 --          if thing=5 ...                      -- (will not work)
;   215 --      use
;   216 --          sequence thing
;   217 --          thing = {5}
;   218 --          thing = delete_routine(thing,r_del)
;   219 --          if thing[1]=5 ...                   -- (this is fine)
;   220 --
;   221 -- WARNING
;   222 -- =======
;   223 -- The delete_routines are not designed or expected to cope across opInterp 
;   224 --  and dll boundaries. In "p test", aka "p.exe test.exw", there are two 
;   225 --  symtabs, one for p.exe and one for test.exw. Any routine_ids apply to 
;   226 --  one but not the other. Likewise for this.exe and that.dll. A similar 
;   227 --  situation exists for file handles; you cannot open a file in a dll, 
;   228 --  pass the handle(/ftable index) back, and expect the callee to further 
;   229 --  process/close that file, at least not via the routines in (two copies 
;   230 --  of) builtins\VM\pfileioN.e. Of course if you returned a file number 
;   231 --  with the sole intention of passing it back to the dll for further
;   232 --  processing, that would be fine, whereas it would be technically tricky
;   233 --  and utterly nonsensical to explicitly invoke that sort of call-back in
;   234 --  order to implicitly trigger a delete_routine in the right context.
;   235 --  If necessary, it may be possible to use call_backs to the main process 
;   236 --  to set delete_routines and/or perform file i/o, but such is untested.
;   237 --
;   238 --include pcfunc.e
;   239 --DEV?
;   240 include pcallfunc.e
;   241 
;   242 --integer freelist = 0
;   243 --sequence delete_sets      -- {{rid,rid,rid,...}}
;   244 --integer dinit = 0
;   245 
;   246 --global function reset_delete()
;   247 ---- for use by p.exw; no discernable effect when used elsewhere
;   248 --end function
;   249 
;   250 --global procedure delete(object o)
;   251 procedure fdelete(object o)
;   252 -- Note this code is replicated in free()
;   253 --integer delete_index
;   254 --sequence dsi
;   255 integer rid
;   256     if not integer(o) then
    mov edi,[ebp] (o)                     ;#00462192: 213175 00                  uv 80 20  1   1      
    cmp edi,h4                            ;#00462195: 201377 00000040            uv 00 80  1   2 80   
    jl #00462205                          ;#0046219B: 174 68                     v  00 00  1   2      
;   257 --      -- get the current delete_index, if any
;   258         -- get the current delete_routine, if any
;   259         #ilASM{ [32]
;   260                     mov edx,[o]
                            mov edx,[ebp] (o)  ;#0046219D: 213125 00                  uv 04 20  1   3      
;   261                     mov eax,[ebx+edx*4-4] -- (load index & type byte)
                            mov eax,[ebx+edx*4-4]  ;#004621A0: 213104223 FC               uv 01 0C  1   6 04 *04*
;   262                     mov ecx,eax
                            mov ecx,eax   ;#004621A4: 213310                     uv 02 01  1   7 01   
;   263                     and eax,0x00FFFFFF  -- (keep delete_index only)
                            and eax,16777215  ;#004621A6: 045 FFFFFF00               vu 01 01  1   7      
;   264                     and ecx,0xFF000000  -- (keep type byte only)
                            and ecx,-16777216  ;#004621AB: 201341 000000FF            uv 02 02  1   8      
;   265                     mov [ebx+edx*4-4],ecx -- (zeroise delete_index on data)
                            mov [ebx+edx*4-4],ecx  ;#004621B1: 211114223 FC               uv 00 0E  1   9 02   
;   266 --                  mov [delete_index],eax
;   267                     mov [rid],eax
                            mov [ebp-4] (rid),eax  ;#004621B5: 211105 FC                  vu 00 21  1   9      
;   268                 [64]
;   269                     mov rdx,[o]
;   270                     mov rax,[rbx+rdx*4-8] -- (load index & type byte)
;   271                     mov rcx,rax
;   272 --                  and rax,0x00FFFFFFFFFFFFFF  -- (keep delete_index only)
;   273 --                  and rcx,0xFF00000000000000  -- (keep type byte only)
;   274                     shl rax,8
;   275                     rol rcx,8
;   276                     shr rax,8
;   277                     shl rcx,32+24   -- (56, aka 64-8)
;   278                     mov [rbx+rdx*4-8],rcx -- (zeroise delete_index on data)
;   279 --                  mov [delete_index],rax
;   280                     mov [rid],rax
;   281               }
;   282 
;   283 --      if delete_index then
;   284         if rid!=0 then
    xor edi,edi                           ;#004621B8: 061377                     uv 80 80  1  10      
    mov eax,[ebp-4] (rid)                 ;#004621BA: 213105 FC                  vu 01 20  1  10      
    mov esi,25                            ;#004621BD: 276 19000000               uv 40 00  1  11      
    mov edx,473                           ;#004621C2: 272 D9010000               vu 04 00  1  11      
    call #0045F91F (:%opJccE)             ;#004621C7: 350 53D7FFFF               v  00 00  1  12      
    je #00462205                          ;#004621CC: 164 37                     v  00 00  1  13      
;   285 --          for i=length(delete_sets[delete_index]) to 1 by -1 do
;   286 --              call_proc(delete_sets[delete_index][i],{o})
;   287 --          end for
;   288 --          enter_cs()
;   289 --          dsi = delete_sets[delete_index]
;   290 --          leave_cs()
;   291 --          for i=length(dsi) to 1 by -1 do
;   292 --              call_proc(dsi[i],{o})
;   293 --          end for
;   294             call_proc(rid,{o})
    lea eax,[ebp-8] (symtab[474])         ;#004621CE: 215105 F8                  uv 01 20  1  14      
    mov edx,1                             ;#004621D1: 272 01000000               vu 04 00  1  14      
    push #004621FA                        ;#004621D6: 150 FA214600               uv 00 00  1  15      
    push eax                              ;#004621DB: 120                        vu 00 01  1  15      
    mov ecx,[ebp] (o)                     ;#004621DC: 213115 00                  uv 02 20  1  16      
    cmp ecx,h4                            ;#004621DF: 201371 00000040            uv 00 02  1  17 02   
    jl #004621F1                          ;#004621E5: 174 0A                     v  00 00  1  17      
    add dword[ebx+ecx*4-8],1              ;#004621E7: 203104213 F8 01            u  00 0A  3  18      
    cmp eax,472                           ;#004621EC: 075 D8010000               vu 00 01  1  20      
    push ecx                              ;#004621F1: 121                        uv 00 02  1  21      
    mov edi,[ebp-8] (symtab[474])         ;#004621F2: 213175 F8                  vu 80 20  1  21      
    jmp #00460143 (:%pMkSq)               ;#004621F5: 351 49DFFFFF               v  00 00  1  22      
    mov eax,[ebp-4] (rid)                 ;#004621FA: 213105 FC                  uv 01 20  1  23      
    mov esi,[ebp-8] (symtab[474])         ;#004621FD: 213165 F8                  vu 40 20  1  23      
    call #00462F0E (:%opCallProc)         ;#00462200: 350 090D0000               v  00 00  1  24      
;   295 --DEV locking required (possibly just inside the "if not integer" test)
;   296 --          enter_cs()
;   297 --          delete_sets[delete_index] = freelist
;   298 --          freelist = delete_index
;   299 --          leave_cs()
;   300         end if
;   301     end if
    jmp #00462C8F (:%opRetf)              ;#00462205: 351 850A0000               v  00 00  1  25      
;   302 end procedure
;   303 
;   304 --global function delete_routine(object o, integer rid)
;   305 --function fdelete_routine(object o, integer rid)
;   306 ----
;   307 ---- attach rid to the data in o
;   308 ----
;   309 --  --
;   310 --  -- verify that rid is a procedure accepting one parameter?
;   311 --  --
;   312 ----> DEV
;   313 --
;   314 ----integer prev
;   315 ----integer delete_index
;   316 ----, refcount
;   317 ----    if dinit=0 then setup() end if
;   318 ----/*
;   319 --  -- the penny drops: p.exw has to invoke delete_routine immediately
;   320 --  --  after running "#!:%opInterp", before any o/s delete() kick in.
;   321 ----DEV
;   322 ----    #ilASM{ call @f
;   323 --  #ilASM{ call :f
;   324 --
;   325 --          -- (3 nops to allow [pDelRtn] to be stored/4, see pHeap.e)
;   326 --          nop
;   327 --          nop
;   328 --          nop
;   329 ----        ::opDelete
;   330 --      [32]
;   331 --          -- calling convention (from pHeap.e/pDealloc only)
;   332 --          --  mov edx,ref         -- (refcount set to 2)
;   333 --          --  call [pDelRtn]      -- ~==delete(edx) [pDelRtn] is ::opDelete
;   334 --          push edx                            --[1] o
;   335 --          mov edx,routine_id(delete)          -- mov edx,imm32 (sets K_ridt)
;   336 --          mov ecx,$_Ltot                      -- mov ecx,imm32 (=symtab[fdelete][S_Ltot])
;   337 --          call :%opFrame
;   338 --          mov edx,[esp+4]
;   339 --          pop dword[ebp]                      --[1] o
;   340 --X         mov dword[ebp+16],:delret           -- return address
;   341 --          mov dword[ebp+28],:delret           -- return address
;   342 --          mov dword[ebp+12],edx               -- called from address
;   343 --          jmp $_il                            -- jmp code:delete
;   344 --      [64]
;   345 --          -- calling convention (from pHeap.e/pDealloc only)
;   346 --          --  mov rdx,ref         -- (refcount set to 2)
;   347 --          --  call [pDelRtn]      -- ~==delete(rdx) [pDelRtn] is ::opDelete
;   348 --          push rdx                            --[1] o
;   349 --          mov rdx,routine_id(delete)          -- mov rdx,imm32 (sets K_ridt)
;   350 --          mov rcx,$_Ltot                      -- mov rcx,imm32 (=symtab[fdelete][S_Ltot])
;   351 --          call :%opFrame
;   352 --          mov rdx,[rsp+8]
;   353 --          pop qword[rbp]                      --[1] addr
;   354 --X         mov qword[rbp+32],:delret           -- return address
;   355 --          mov qword[rbp+56],:delret           -- return address
;   356 --          mov qword[ebp+24],rdx               -- called from address
;   357 --          jmp $_il                            -- jmp code:delete
;   358 --      []
;   359 --        ::delret
;   360 --          ret
;   361 ----          @@:
;   362 --        ::f
;   363 --      [32]
;   364 --          pop eax
;   365 --          add eax,3
;   366 --      [64]
;   367 --          pop eax
;   368 --          add rax,3
;   369 --      []
;   370 --          call :%pSetDel }
;   371 ----*/
;   372 --
;   373 --  if integer(o) then
;   374 --      -- promote to atom
;   375 --      #ilASM{ [32]
;   376 --                  lea edi,[o]
;   377 --                  fild dword[o]
;   378 --                  fldpi                   -- (any non-integer value would do)
;   379 --                  call :%pStoreFlt
;   380 --                  mov edi,[edi]
;   381 --                  mov ecx,[rid]
;   382 --                  fstp qword[ebx+edi*4]
;   383 --                  mov eax,[ebx+edi*4-4]
;   384 --                  or eax,ecx  -- (combine rid and type byte)
;   385 --                  mov [ebx+edi*4-4],eax
;   386 --              [64]
;   387 --                  lea rdi,[o]
;   388 --                  fild qword[o]
;   389 --                  fldpi                   -- (any non-integer value would do)
;   390 --                  call :%pStoreFlt
;   391 --                  mov rdi,[rdi]
;   392 --                  mov rcx,[rid]
;   393 --                  fstp tbyte[rbx+rdi*4]
;   394 --                  mov rax,[rbx+rdx*4-8]
;   395 --                  or rax,rcx  -- (combine rid and type byte)
;   396 --                  mov [rbx+rdx*4-8],rax
;   397 --            }
;   398 ----        delete_index = 0
;   399 --  else
;   400 --      -- first, force a refcount of 1
;   401 --      -- (DOH, if x is a file-level/global variable, then in
;   402 --      --      x = delete_routine(x,rid)
;   403 --      --  we would get a reference count of 2 here anyway,
;   404 --      --  though PBR (on locals), and unnamed temps will
;   405 --      --  usually get us a refount of 1)
;   406 ----DEV we may need to put this back, to daisy chain delete routines...
;   407 ----        #ilASM{ mov edx,[o]
;   408 ----                mov eax,[ebx+edx*4-8] -- (load refcount)
;   409 ----                mov [refcount],eax }
;   410 ----        if refcount!=1 then
;   411 ----        if atom(o) then
;   412 ----            --DEV ilasm{fld/StoreFlt} might be better
;   413 ----            o += 1.1
;   414 ----            o -= 1.1
;   415 ------DEV tryme:
;   416 ------          #ilASM{ [32]
;   417 ------                      lea edi,[o]
;   418 ------                      fld qword[ebx+edi*4]
;   419 ------                      call :%pStoreFlt
;   420 ------                  [64]
;   421 ------                      lea rdi,[o]
;   422 ------                      fld tbyte[rbx+rdi*4]
;   423 ------                      call :%pStoreFlt
;   424 ------                  []
;   425 ------                }
;   426 ----        else
;   427 ----            o &= 'x'
;   428 ----            o = o[1..-2]
;   429 ----        end if
;   430 ----        -- get the current delete_index, if any
;   431 --      -- get the current delete_routine, if any
;   432 --      #ilASM{ [32]
;   433 --                  mov edx,[o]
;   434 --                  mov ecx,[rid]
;   435 --                  mov eax,[ebx+edx*4-4]
;   436 --                  mov esi,[ebx+edx*4-4]
;   437 --                  and eax,0x00FFFFFF
;   438 ----                    mov [delete_index],eax
;   439 --                  jz @f
;   440 ----                        :e??dras
;   441 --                      int3
;   442 --                @@:
;   443 --                  or ecx,esi  -- (combine rid and type byte)
;   444 --                  mov [ebx+edx*4-4],ecx
;   445 --              [64]
;   446 --                  mov rdx,[o]
;   447 --                  mov rcx,[rid]
;   448 --                  mov rax,[rbx+rdx*4-8]
;   449 --                  mov rsi,[rbx+rdx*4-8]
;   450 ----                    and rax,0x00FFFFFFFFFFFFFF
;   451 --                  shl rax,8
;   452 --                  or rcx,rsi  -- (combine rid and type byte)
;   453 --                  shr rax,8
;   454 ----                    mov [delete_index],rax
;   455 --                  jz @f
;   456 ----                        :e??dras
;   457 --                      int3
;   458 --                @@:
;   459 --                  mov [rbx+rdx*4-8],rax
;   460 --              []
;   461 --            }
;   462 --  end if
;   463 --
;   464 ----DEV locking required... (enter_cs()/leave_cs())
;   465 ----DEV/SUG: ditch freelist and keep them permanently. Allow multiple data values to "share" delete sets.
;   466 ----            For performance, we may want to keep a chain of all other delete_sets[] that are one item
;   467 ----            added from the current. (See the proof of concept I wrote for it, at the end.)
;   468 ----    if delete_index=0 then
;   469 ----        enter_cs()
;   470 ----        if freelist then
;   471 ----            delete_index = freelist
;   472 ----            freelist = delete_sets[freelist]
;   473 ----            delete_sets[delete_index] = {}
;   474 ----        else
;   475 ----            delete_sets = append(delete_sets,{})
;   476 ----            delete_index = length(delete_sets)
;   477 ------          if machine=32 then
;   478 ----            if delete_index>#FFFFFF then ?9/0 end if    -- (limit of 16,777,215 blown)
;   479 ------          else --machine=64
;   480 ------          if delete_index>#FFFFFFFFFFFFFF then ?9/0 end if    -- (limit of <lots> blown)
;   481 ------          end if
;   482 ----        end if
;   483 ----        leave_cs()
;   484 --      -- store the delete index
;   485 ----        #ilASM{ [32]
;   486 ----                    mov edx,[o]
;   487 ------                  mov ecx,[delete_index]
;   488 ----                    mov ecx,[rid]
;   489 ----                    mov eax,[ebx+edx*4-4]
;   490 ----                    or eax,ecx  -- (combine delete_index and type byte)
;   491 ----                    mov [ebx+edx*4-4],eax
;   492 ----                [64]
;   493 ----                    mov rdx,[o]
;   494 ------                  mov rcx,[delete_index]
;   495 ----                    mov rcx,[rid]
;   496 ----                    mov rax,[rbx+rdx*4-8]
;   497 ----                    or rax,rcx  -- (combine delete_index and type byte)
;   498 ----                    mov [rbx+rdx*4-8],rax
;   499 ----              }
;   500 ----    end if
;   501 ----    enter_cs()
;   502 ----    delete_sets[delete_index] &= rid
;   503 ----    leave_cs()
;   504 --  return o
;   505 --end function
;   506 
;   507 
;   508 --function fdelete_routine(object o, integer rid)
;   509 --/*
;   510 procedure :%opDelRtn(:%)
;   511 end procedure -- (for Edita/CtrlQ)
;   512 --*/
;   513 --!/*
;   514 --DEV:
;   515 #ilASM{ jmp :!opCallOnceYeNot
                jmp :!opCallOnceYeNot     ;#00462F69: 351 85F8FFFF               v  00 00  1   1      
;   516 --#ilASM{ jmp :fin
;   517 
;   518     :%opDelRtn
;   519 --------------
;   520         [32]
;   521             -- calling convention
;   522             --  lea edi,[res]       -- result location
;   523             --  mov esi,[o]         -- (opUnassigned)
;   524             --  mov eax,[rid]       -- (opUnassigned)
;   525             --  call :%opDelRtn     -- [edi]:=delete_routine(esi,eax)
;   526             cmp esi,h4
                    cmp esi,h4            ;#00462F6E: 201376 00000040            uv 00 40  1   2      
;   527             jge @f
                    jge #00462F8B         ;#00462F74: 175 15                     v  00 00  1   2      
;   528                 -- integer, promote to atom:
;   529 --14/2/24!!
;   530                 mov [edi],esi
                        mov [edi],esi     ;#00462F76: 211067                     uv 00 C0  1   3      
;   531                 fild dword[edi]
                        fild dword[edi]   ;#00462F78: 333007                     np 00 80  3   4      
;   532                 fldpi                   -- (any non-integer value would do)
                        fldpi             ;#00462F7A: 331353                     np 00 00  5   7      
;   533                 call :%pStoreFlt        -- (preserves all registers)
                        call #0046388C (:%pStoreFlt)  ;#00462F7C: 350 0B090000               v  00 00  1  12      
;   534                 mov esi,[edi]
                        mov esi,[edi]     ;#00462F81: 213067                     uv 40 80  1  13      
;   535                 fstp qword[ebx+esi*4]
                        fstp qword[ebx+esi*4]  ;#00462F83: 335034263                  np 00 48  2  16    *40*
;   536                 or [ebx+esi*4-4],eax    -- (combine rid and type byte)
                        or [ebx+esi*4-4],eax  ;#00462F86: 011104263 FC               uv 00 49  3  18      
;   537                 ret
                        ret               ;#00462F8A: 303                        np 00 00  2  21      
;   538           @@:
;   539                 mov ecx,[ebx+esi*4-4]   -- type/delete_routine
                        mov ecx,[ebx+esi*4-4]  ;#00462F8B: 213114263 FC               uv 02 48  1  23      
;   540                 cmp eax,-1              -- nb 0 is allowed
                        cmp eax,-1        ;#00462F8F: 203370 FF                  vu 00 01  1  23      
;   541                 jne @f
                        jne #00462FA2     ;#00462F92: 165 0E                     v  00 00  1  24      
;   542                     -- :e72iri(edi)     -- (invalid routine id)
;   543                     pop edx
                            pop edx       ;#00462F94: 132                        uv 04 00  1  25      
;   544                     mov al,72           -- e72iri(edi)
                            mov al,72     ;#00462F95: 260 48                     vu 01 00  1  25      
;   545                     mov edi,eax
                            mov edi,eax   ;#00462F97: 213370                     uv 80 01  1  26      
;   546                     sub edx,1
                            sub edx,1     ;#00462F99: 203352 01                  vu 04 04  1  26      
;   547                     jmp :!iDiag
                            jmp #00463E69 (:!iDiag)  ;#00462F9C: 351 C80E0000               v  00 00  1  27      
;   548                     int3
                            int3          ;#00462FA1: 314                        np 00 00 13  28      
;   549               @@:
;   550 --              and ecx,0x00FFFFFF
;   551                 test ecx,0x00FFFFFF
                        test ecx,16777215  ;#00462FA2: 367301 FFFFFF00            uv 00 02  1  41      
;   552                 jz @f
                        jz #00462FC1      ;#00462FA8: 164 17                     v  00 00  1  41      
;   553                     and ecx,0xFF000000
                            and ecx,-16777216  ;#00462FAA: 201341 000000FF            uv 02 02  1  42      
;   554                     cmp eax,0
                            cmp eax,0     ;#00462FB0: 203370 00                  vu 00 01  1  42      
;   555                     je @f
                            je #00462FC1  ;#00462FB3: 164 0C                     v  00 00  1  43      
;   556                         -- e123dras     -- (delete routine already set)
;   557                         pop edx
                                pop edx   ;#00462FB5: 132                        uv 04 00  1  44      
;   558                         mov al,123      -- e123dras
                                mov al,123  ;#00462FB6: 260 7B                     vu 01 00  1  44      
;   559                         sub edx,1
                                sub edx,1  ;#00462FB8: 203352 01                  uv 04 04  1  45      
;   560                         jmp :!iDiag
                                jmp #00463E69 (:!iDiag)  ;#00462FBB: 351 A90E0000               v  00 00  1  45      
;   561                         int3
                                int3      ;#00462FC0: 314                        np 00 00 13  46      
;   562               @@:
;   563 --              or [ebx+esi*4-4],eax    -- (combine rid and type byte)
;   564                 or ecx,eax              -- (combine rid and type byte)
                        or ecx,eax        ;#00462FC1: 011301                     uv 02 03  1  59      
;   565                 mov edx,[edi]
                        mov edx,[edi]     ;#00462FC3: 213027                     vu 04 80  1  59      
;   566                 mov [ebx+esi*4-4],ecx
                        mov [ebx+esi*4-4],ecx  ;#00462FC5: 211114263 FC               uv 00 4A  1  60      
;   567                 add dword[ebx+esi*4-8],1    -- incref
                        add dword[ebx+esi*4-8],1  ;#00462FC9: 203104263 F8 01            u  00 48  3  61      
;   568                 mov [edi],esi
                        mov [edi],esi     ;#00462FCE: 211067                     vu 00 C0  1  63      
;   569                 cmp edx,h4
                        cmp edx,h4        ;#00462FD0: 201372 00000040            uv 00 04  1  64      
;   570                 jle @f
                        jle #00462FE3     ;#00462FD6: 176 0B                     v  00 00  1  64      
;   571                     sub dword[ebx+edx*4-8],1
                            sub dword[ebx+edx*4-8],1  ;#00462FD8: 203154223 F8 01            u  00 0C  3  65      
;   572                     jz :%pDealloc
                            jz #004639A8 (:%pDealloc)  ;#00462FDD: 017204 C5090000            v  00 00  1  67      
;   573               @@:
;   574                 ret
                        ret               ;#00462FE3: 303                        np 00 00  2  68      
;   575         [64]
;   576             -- calling convention
;   577             --  lea rdi,[res]       -- result location
;   578             --  mov rsi,[o]         -- (opUnassigned)
;   579             --  mov rax,[rid]       -- (opUnassigned)
;   580             --  call :%opDelRtn     -- [rdi]:=delete_routine(rsi,rax)
;   581             mov r15,h4
;   582             cmp rsi,r15
;   583             jge @f
;   584                 -- integer, promote to atom:
;   585 --14/2/24!!
;   586                 mov [rdi],rsi
;   587                 fild qword[rdi]
;   588                 fldpi                   -- (any non-integer value would do)
;   589                 call :%pStoreFlt        -- (preserves most registers)
;   590                 mov rsi,[rdi]
;   591                 fstp tbyte[rbx+rsi*4]
;   592 --              mov rax,[rbx+rsi*4-8]
;   593 --              or rax,rcx  -- (combine rid and type byte)
;   594 --              mov [rbx+rdx*4-8],rax
;   595                 or [rbx+rsi*4-8],rax
;   596                 ret
;   597           @@:
;   598                 mov rcx,[rbx+rsi*4-8]   -- type/delete_routine
;   599                 cmp rax,-1              -- nb 0 is allowed
;   600                 jne @f
;   601                     -- :e72iri(edi)     -- (invalid routine id)
;   602                     pop rdx
;   603                     mov al,72           -- e72iri(edi)
;   604                     mov rdi,rax
;   605                     sub rdx,1
;   606                     jmp :!iDiag
;   607                     int3
;   608               @@:
;   609 --              shl rcx,8
;   610                 mov rdx,rcx
;   611                 shl rdx,8
;   612                 jz @f
;   613 --                  mov rcx,[rbx+rsi*4-8]   -- type/delete_routine
;   614                     shr rcx,56
;   615                     shl rcx,56
;   616                     cmp rax,0
;   617                     je @f
;   618                         -- e123dras     -- (delete routine already set)
;   619                         pop rdx
;   620                         mov al,123      -- e123dras
;   621                         sub rdx,1
;   622                         jmp :!iDiag
;   623                         int3
;   624               @@:
;   625 --              or [rbx+rsi*4-8],rax    -- (combine rid and type byte)
;   626                 or rcx,rax
;   627                 mov rdx,[rdi]
;   628                 mov [rbx+rsi*4-8],rcx
;   629                 add qword[rbx+rsi*4-16],1   -- incref
;   630                 mov r15,h4
;   631                 mov [rdi],rsi
;   632                 cmp rdx,r15
;   633                 jle @f
;   634                     sub qword[rbx+rdx*4-16],1
;   635                     jz :%pDealloc
;   636               @@:
;   637                 ret
;   638 --  return o
;   639 --end function
;   640 --<
;   641         []
;   642 
;   643 --DEV obviously this becomes the backend entry point!!
;   644 --procedure fdelete(object o)
;   645 --/*
;   646 procedure :%opDelete(:%)
;   647 end procedure -- (for Edita/CtrlQ)
;   648 --!*/
;   649     :%opDelete
;   650 -------------
;   651         [32]
;   652             -- calling convention
;   653             --  mov eax,[o]     -- (opUnassigned)
;   654 --?? mov [o],h4 (no)
;   655             --  call :%opDelete     -- delete(eax)
;   656             cmp eax,h4
                    cmp eax,h4            ;#00462FE4: 075 00000040               uv 00 01  1  70      
;   657             jl @f
                    jl #00462FF0          ;#00462FE9: 174 05                     v  00 00  1  70      
;   658                 add dword[ebx+eax*4-8],1        -- incref
                        add dword[ebx+eax*4-8],1  ;#00462FEB: 203104203 F8 01            u  00 09  3  71      
;   659           @@:
;   660             push eax                            --[1] o
                    push eax              ;#00462FF0: 120                        vu 00 01  1  73      
;   661             mov edx,routine_id(fdelete)         -- mov edx,imm32 (sets K_ridt)
                    mov edx,471           ;#00462FF1: 272 D7010000               uv 04 00  1  74      
;   662 --          mov edx,routine_id(delete)          -- mov edx,imm32 (sets K_ridt)
;   663             mov ecx,$_Ltot                      -- mov ecx,imm32 (=symtab[fdelete][S_Ltot])
                    mov ecx,3             ;#00462FF6: 271 03000000               vu 02 00  1  74      
;   664             call :%opFrame
                    call #00462C02 (:%opFrame) (fdelete)  ;#00462FFB: 350 02FCFFFF               v  00 00  1  75      
;   665 --          mov edx,[esp+4]
;   666             pop dword[ebp]                      --[1] o
                    pop dword[ebp] (o)    ;#00463000: 217105 00                  np 00 20  3  76      
;   667             pop edx
                    pop edx               ;#00463003: 132                        uv 04 00  1  79      
;   668 --EXCEPT
;   669 --          mov dword[ebp+16],:delret           -- return address
;   670 --          mov dword[ebp+28],:delret           -- return address
;   671             mov dword[ebp+28],edx               -- return address
                    mov [ebp+28] (retaddr),edx  ;#00463004: 211125 1C                  uv 00 24  1  80 04   
;   672             mov dword[ebp+12],edx               -- called from address
                    mov [ebp+12],edx      ;#00463007: 211125 0C                  vu 00 24  1  80      
;   673             jmp $_il                            -- jmp code:fdelete
                    jmp #00462192 (code:fdelete)  ;#0046300A: 351 83F1FFFF               v  00 00  1  81      
;   674         [64]
;   675             -- calling convention
;   676             --  mov rax,[o]         -- (opUnassigned)
;   677             --  call :%opDelete     -- delete(rax)
;   678             mov r15,h4
;   679             cmp rax,r15
;   680             jl @f
;   681                 add qword[rbx+rax*4-16],1
;   682           @@:
;   683             push rax                            --[1] o
;   684             mov rdx,routine_id(fdelete)         -- mov rdx,imm32 (sets K_ridt)
;   685 --          mov rdx,routine_id(delete)          -- mov rdx,imm32 (sets K_ridt)
;   686             mov rcx,$_Ltot                      -- mov rcx,imm32 (=symtab[fdelete][S_Ltot])
;   687             call :%opFrame
;   688 --          mov rdx,[rsp+8]
;   689             pop qword[rbp]                      --[1] addr
;   690             pop rdx
;   691 --EXCEPT
;   692 --          mov qword[rbp+32],:delret           -- return address
;   693 --          mov qword[rbp+56],:delret           -- return address
;   694             mov qword[rbp+56],rdx               -- return address
;   695             mov qword[rbp+24],rdx               -- called from address
;   696             jmp $_il                            -- jmp code:fdelete
;   697         []
;   698 --        ::delret
;   699 --          ret
;   700 --    ::fin
;   701     }
;   702 --!*/
;   703 
;   704 
;   705 
;   706 --DEV replace with:
;   707 --/*
;   708 procedure deletep()
;   709 -- Backend entry point (see pHeap.e/%:pDealloc)
;   710 -- (the point of this, rather than calling delete() directly
;   711 --  from below, is to have the following thread-safe local o)
;   712 object o
;   713     #ilASM{ pop [o] }       -- (I hope this works!)
;   714     delete(o)
;   715     #ilASM{ [32]            -- (zero, prevent dealloc)
;   716                 mov [o],ebx
;   717             [64]
;   718                 mov [o],rbx
;   719           } 
;   720 end procedure
;   721 
;   722 --  #ilASM{ jmp:%delfin
;   723 ----            align 16
;   724 --          :%pDelRtn   -- invoked from pHeap.e [DEV to go]
;   725 --          [32]
;   726 --              push edx
;   727 --          [64]
;   728 --              push rdx
;   729 --        }
;   730 --          deletep()
;   731 --  #ilASM{ :%delfin }
;   732 --*/
;   733 
;   734 -- Backend entry point. This must be a function so we can call_back() it.
;   735 -- (this is itself a work around to call_back only accepting atoms)
;   736 --DEV tricks from pthread.e... (atom a contains a reference)
;   737 --DEV certainly not thread safe at this point (cos of opDelRef)
;   738 --function deletef()
;   739 --object o
;   740 --  #ilASM{ call %opDelRef  -- load the parameter
;   741 --          mov [o],eax }
;   742 --  delete(o)
;   743 --  #ilASM{ mov [o],ebx } -- (zero, prevent dealloc)
;   744 --  return 0
;   745 --end function
;   746 
;   747 --procedure setup()
;   748 --
;   749 ----/* --DEV sort this out: (update: I think :%pDelRtn does it...)
;   750 ---- tell the backend where it (deletef) is.
;   751 ---- NB Phix itself (and for that matter any builtins it uses) should not use this...
;   752 ----    (just needs a stack of them, but that ain't implemented yet, fix when we do ebp)
;   753 ----    (Problem is that ebp->symtab must be right for any routine-ids to work, though
;   754 ----     provided we invoke the appropriate callback that should all be taken care of.
;   755 ----     But one callback for p.exe and the test.exw it is running spells disaster.)
;   756 --integer delcb
;   757 --  delcb = call_back(routine_id("deletef"))
;   758 --  #ilASM{ lea edi,[delcb]                         -- mov edi,addr delete callback
;   759 --          call %opDelRtn}                         -- save delete callback
;   760 ----    delete_sets = {}
;   761 ----*/
;   762 --  enter_cs()
;   763 --  if dinit=0 then
;   764 --      delete_sets = {{0}} -- make 1 illegal (see pemit.e)
;   765 --      dinit = 1
;   766 --  end if
;   767 --  leave_cs()
;   768 --end procedure
;   769 --setup()
;   770 
;   771 --/*
;   772 -- proof of concept, as mentioned above, for delete_routine:
;   773 --  find: 97.7s, plus/next: 0.19s, so ~500x faster!
;   774 sequence ds = {{}}  -- or maybe {{0},{}} with root=2? (or as-is and drop that 1 thing, never caught anything anyway)
;   775 sequence plus = {0} -- start of list of entries with one item added
;   776 sequence next = {0} -- next in list of entries with one item added
;   777 
;   778 function add(integer idx, integer i)
;   779 sequence newkey = append(ds[idx],i)
;   780 integer res
;   781     if 0 then
;   782         res = find(newkey,ds)
;   783         if res=0 then
;   784             ds = append(ds,newkey)
;   785             res = length(ds)
;   786         end if
;   787     else
;   788         res = plus[idx]
;   789         while res do
;   790             if ds[res]=newkey then exit end if
;   791             res = next[res]
;   792         end while
;   793         if res=0 then
;   794             ds = append(ds,newkey)
;   795             res = length(ds)
;   796             plus = append(plus,0)
;   797             next = append(next,plus[idx])
;   798             plus[idx] = res
;   799         end if
;   800     end if
;   801     return res
;   802 end function
;   803 
;   804 integer root=1,ai,aj,ak
;   805 
;   806 constant LIM=50
;   807 puts(1,"started\n")
;   808 atom t0 = time()
;   809 for times=1 to 2 do
;   810     for i=1 to LIM do
;   811 ?i
;   812         ai = add(root,i)
;   813         for j=1 to LIM do
;   814             aj = add(ai,j)
;   815             for k=1 to LIM do
;   816                 ak = add(aj,k)
;   817             end for
;   818         end for
;   819     end for
;   820 end for
;   821 printf(1,"%d items added in %3.2f\n",{length(ds),time()-t0})
;   822 if getc(0) then end if
;   823 abort(0)
;   824 --*/
    jmp #00462C8F (:%opRetf)              ;#0046300F: 351 7BFCFFFF               v  00 00  1  82      
;C:\Phix\builtins\VM\pcallfunc.e:
;================================
;     1 --
;     2 -- pcallfunc.e (Phix compatible 0.6.3)
;     3 --
;     4 --  Phix implementation of dynamic calls: call_func and call_proc.
;     5 --
;     6 --DEV??
;     7 --  WARNING: Fragile code ahead! Mistakes in this code may completely
;     8 --           spanner diagnostics and tracing. You have been warned.
;     9 --           (If p -test, p edita, p test\terror, and p test\trace
;    10 --            all seem fine, then you can breathe easy once again.)
;    11 --
;    12 --/*
;    13     ?9/0    This file is wholly incompatible with RDS/OpenEuphoria.
;    14 --*/
;    15 
;    16 --!/**/without debug
;    17 --!/**/with debug
;    18 
;    19 --include builtins\VM\pHeap.e   -- :%pStoreFlt etc
;    20 include builtins\VM\pStack.e    -- :%opGetST, :%opFrame etc
;    21 --include builtins\VM\pUnassigned.e -- :%pRTErn (DEV/temp)
;    22 
;    23 --constant e16cbchop        = 16    -- call_backs cannot have optional parameters
;    24 constant e71cfppe   = 71    -- call_func/proc parameter error
;    25 constant e72iri     = 72    -- invalid routine_id
;    26 --constant e73atodmbs   = 73    -- argument to open_dll must be string
;    27 --constant e74dcfpe     = 74    -- define_c_func/proc parameter error
;    28 --constant e75cbrpmaba  = 75    -- call back routine parameters must all be atoms
;    29 constant e81ipicfp  = 81    -- insufficient parameters in call_func/proc()
;    30 --constant e84cbpmbropr = 84    -- call_back parameter must be routine_id or {'+',routine_id}
;    31 --constant e88atcfpmbaos    = 88    -- arguments to c_func/proc must be atoms or strings
;    32 constant e89tmpicfp = 89    -- too many parameters in call_func/proc()
;    33 --constant e116rrnp     = 116   -- routine requires %d parameters, not %d
;    34 constant e117rdnrav = 117   -- routine does not return a value
;    35 constant e118rrav   = 118   -- routine returns a value
;    36 
;    37 --DEV??
;    38 procedure fatalN(integer level, integer errcode, integer ep1=0, integer ep2=0)
    mov ecx,[ebp-8] (ep1)                 ;#004626EA: 213115 F8                  uv 02 20  1   1      
    cmp ecx,h4                            ;#004626ED: 201371 00000040            uv 00 02  1   2 02   
    jne #004626FA                         ;#004626F3: 165 05                     v  00 00  1   2      
    mov [ebp-8] (ep1),ebx                 ;#004626F5: 211135 F8                  uv 00 28  1   3      
    jmp #00462706                         ;#004626F8: 353 0C                     v  00 00  1   3      
    jl #00462706                          ;#004626FA: 174 0A                     v  00 00  1   4      
    mov ecx,444                           ;#004626FC: 271 BC010000               uv 02 00  1   5      
    call #00462D8D (:%opTcFail)           ;#00462701: 350 87060000               v  00 00  1   5      
    mov eax,[ebp-12] (ep2)                ;#00462706: 213105 F4                  uv 01 20  1   6      
    cmp eax,h4                            ;#00462709: 075 00000040               uv 00 01  1   7 01   
    jne #00462713                         ;#0046270E: 165 03                     v  00 00  1   7      
    mov [ebp-12] (ep2),ebx                ;#00462710: 211135 F4                  uv 00 28  1   8      
;    39 -- level is the number of frames to pop to obtain an era (must be >=2).
;    40 -- we report errors on (eg) the c_func call, not in c_func below, so
;    41 -- obviously c_func itself calls fatalN(2..), whereas if c_func calls
;    42 -- toString, that must then call fatalN(3..), and when open_dll calls
;    43 -- OpenOneDLL, which calls toString which finally calls this, it must 
;    44 -- do so with call fatalN(4..). There are no fatalN(1..) calls since
;    45 -- this is local and that would report errors in pcallfunc.e itself,
;    46 -- which is the very thing the level parameter is supposed to avoid!
;    47 --printf(1,"fatalN(%d,%d)\n",{level,errcode})
;    48     #ilASM{
;    49         -- calling convention
;    50         --  lea ecx,[level]     -- no of frames to pop to obtain an era (>=2)
;    51         --  mov eax,[errcode]   -- (opUnassigned)
;    52         --  mov edi,[ep1]       -- (opUnassigned) [optional]
;    53         --  mov esi,[ep2]       -- (opUnassigned) [optional]
;    54         --  jmp :%opFatalN      -- fatalN(level,errcode,ep1,ep2)
;    55         [32]
;    56             mov ecx,[level]
                    mov ecx,[ebp] (level)  ;#00462713: 213115 00                  vu 02 20  1   8      
;    57             mov eax,[errcode]
                    mov eax,[ebp-4] (errcode)  ;#00462716: 213105 FC                  uv 01 20  1   9      
;    58             mov edi,[ep1]
                    mov edi,[ebp-8] (ep1)  ;#00462719: 213175 F8                  vu 80 20  1   9      
;    59             mov esi,[ep2]
                    mov esi,[ebp-12] (ep2)  ;#0046271C: 213165 F4                  uv 40 20  1  10      
;    60           @@:
;    61             mov edx,[ebp+12]    -- called from address
                    mov edx,[ebp+12]      ;#0046271F: 213125 0C                  vu 04 20  1  10      
;    62             mov ebp,[ebp+20]    -- (nb no local vars after this!)
                    mov ebp,[ebp+20] (prevebp)  ;#00462722: 213155 14                  uv 20 20  1  11      
;    63             sub ecx,1
                    sub ecx,1             ;#00462725: 203351 01                  vu 02 02  1  11      
;    64             jg @b
                    jg #0046271F          ;#00462728: 177 F5                     v  00 00  1  12      
;    65             xor esi,esi         -- ep2 unused
                    xor esi,esi           ;#0046272A: 061366                     uv 40 40  1  13      
;    66             sub edx,1
                    sub edx,1             ;#0046272C: 203352 01                  vu 04 04  1  13      
;    67             jmp :!iDiag         -- fatal error (see pdiagN.e)
                    jmp #00463E69 (:!iDiag)  ;#0046272F: 351 35170000               v  00 00  1  14      
;    68 --          jmp :!fatalN        -- fatal error (see pdiagN.e)
;    69             int3
                    int3                  ;#00462734: 314                        np 00 00 13  15      
;    70         [64]
;    71             mov rcx,[level]
;    72             mov rax,[errcode]
;    73             mov rdi,[ep1]
;    74             mov rsi,[ep1]
;    75           @@:
;    76             mov rdx,[rbp+24]    -- called from address
;    77             mov rbp,[rbp+40]    -- (nb no local vars after this!)
;    78             sub rcx,1
;    79             jg @b
;    80             xor rsi,rsi         -- ep2 unused
;    81             sub rdx,1
;    82             jmp :!iDiag         -- fatal error (see pdiagN.e)
;    83 --          jmp :!fatalN        -- fatal error (see pdiagN.e)
;    84             int3
;    85         []
;    86           }
;    87     ?9/0
    call #004627B6 (:%pDiv0)              ;#00462735: 350 7C000000               v  00 00  1  28      
    jmp #00462C8F (:%opRetf)              ;#0046273A: 351 50050000               v  00 00  1  29      
;    88 end procedure
;    89 
;    90 -- keep these matching pglobals.e!
;    91 constant S_NTyp     = 2,
;    92          S_sig      = 7,    -- routine signature, eg {'F',T_integer} (nb S_sig must be = S_vtype)
;    93 --       S_Parm1    = 8,    -- first parameter. (idx to symtab, then follow S_Slink)
;    94          S_ParmN    = 9,    -- min no of parameters. (max is length(S_sig)-1))
;    95          S_Ltot     = 10,   -- total no of parameters + locals (for stack frame allocation)
;    96          S_il       = 11,   -- intermediate code (also backpatch list)
;    97 --       S_Tidx     = 9,
;    98          S_Type     = 6,
;    99 --       S_Func     = 7,
;   100          S_Proc     = 8,
;   101 --       T_atom     = 3,
;   102 --       T_object   = 15,
;   103          T_const1   = 26
;   104 --       DEBUG      = 0
;   105 
;   106 
;   107 --constant FUNC = 1, PROC = 0
;   108 
;   109 --1/6/17:
;   110 --function call_common(integer rid, sequence params, integer isProc)
;   111 function call_common(object rid, object params, integer isProc)
    mov ecx,[ebp-8] (isProc)              ;#0046220A: 213115 F8                  uv 02 20  1   1      
    cmp ecx,h4                            ;#0046220D: 201371 00000040            uv 00 02  1   2 02   
    jl #0046221F                          ;#00462213: 174 0A                     v  00 00  1   2      
    mov ecx,458                           ;#00462215: 271 CA010000               uv 02 00  1   3      
    call #00462D8D (:%opTcFail)           ;#0046221A: 350 6E0B0000               v  00 00  1   3      
;   112 -- common code for call_proc/call_func (validate and process args)
;   113 -- isProc is 0 from call_func, 1 from call_proc.
;   114 --sequence symtab
;   115 object symtab
;   116 object si               -- copy of symtab[i], speedwise
;   117 integer sNtyp,
;   118         minparams,
;   119         maxparams,
;   120         noofparams,
;   121         nooflocals,     -- (ie params+localvars)
;   122         si_il
;   123 
;   124 --integer tidx
;   125 object res
;   126 
;   127     -- get copy of symtab. NB read only! may contain nuts! (unassigned vars)
;   128 --  si = 1  -- callstack not rqd
;   129 enter_cs()
    xor ecx,ecx                           ;#0046221F: 061311                     uv 02 02  1   4      
    call #00463B80 (:%pEnterCS)           ;#00462221: 350 5A190000               v  00 00  1   4      
;   130     #ilASM{
;   131         [32]
;   132             lea edi,[symtab]
                    lea edi,[ebp-12] (symtab)  ;#00462226: 215175 F4                  uv 80 20  1   5      
;   133             call :%opGetST                      -- [edi]:=symtab (see pStack.e)
                    call #00462AEB (:%opGetST)  ;#00462229: 350 BD080000               v  00 00  1   5      
;   134         [64]
;   135             lea rdi,[symtab]
;   136             call :%opGetST                      -- [rdi]:=symtab (see pStack.e)
;   137         []
;   138           }
;   139 --1/6/17:
;   140 --  if rid<T_const1
;   141     if not integer(rid)
    mov edi,[ebp] (rid)                   ;#0046222E: 213175 00                  uv 80 20  1   6      
    cmp edi,h4                            ;#00462231: 201377 00000040            uv 00 80  1   7 80   
    jg #00462255                          ;#00462237: 177 1C                     v  00 00  1   7      
;   142     or rid<T_const1
    cmp edi,26                            ;#00462239: 203377 1A                  uv 00 80  1   8      
    jl #00462255                          ;#0046223C: 174 17                     v  00 00  1   8      
;   143     or rid>length(symtab) then
    lea edi,[ebp-48] (symtab[468])        ;#0046223E: 215175 D0                  uv 80 20  1   9      
    mov esi,[ebp-12] (symtab)             ;#00462241: 213165 F4                  vu 40 20  1   9      
    mov edx,459                           ;#00462244: 272 CB010000               uv 04 00  1  10      
    call #0045EFEC (:%opLen)              ;#00462249: 350 9ECDFFFF               v  00 00  1  10      
    mov eax,[ebp] (rid)                   ;#0046224E: 213105 00                  uv 01 20  1  11      
    cmp eax,ecx                           ;#00462251: 071310                     uv 00 03  1  12 01   
    jle #0046225A                         ;#00462253: 176 05                     v  00 00  1  12      
;   144 --      fatalN(3,e72iri,rid)
;   145         si = 0
    mov [ebp-16] (si),ebx                 ;#00462255: 211135 F0                  uv 00 28  1  13      
    jmp #0046227D                         ;#00462258: 353 23                     v  00 00  1  13      
;   146     else
;   147         si = symtab[rid]
    cmp esi,h4                            ;#0046225A: 201376 00000040            uv 00 40  1  14      
    jne #0046226C                         ;#00462260: 165 0A                     v  00 00  1  14      
    mov esi,459                           ;#00462262: 276 CB010000               uv 40 00  1  15      
    call #00462744 (:%pUnassigned)        ;#00462267: 350 D8040000               v  00 00  1  15      
    mov edi,eax                           ;#0046226C: 211307                     uv 80 01  1  16      
    lea ecx,[ebp-16] (si)                 ;#0046226E: 215115 F0                  vu 02 20  1  16      
    mov edx,459                           ;#00462271: 272 CB010000               uv 04 00  1  17      
    mov al,0                              ;#00462276: 260 00                     vu 01 00  1  17      
    call #00460FE5 (:%pSubse1)            ;#00462278: 350 68EDFFFF               v  00 00  1  18      
;   148     end if
;   149 leave_cs()
    xor ecx,ecx                           ;#0046227D: 061311                     uv 02 02  1  19      
    call #00463BCE (:%pLeaveCS)           ;#0046227F: 350 4A190000               v  00 00  1  19      
;   150     if si=0 then
    xor edi,edi                           ;#00462284: 061377                     uv 80 80  1  20      
    mov eax,[ebp-16] (si)                 ;#00462286: 213105 F0                  vu 01 20  1  20      
    mov esi,25                            ;#00462289: 276 19000000               uv 40 00  1  21      
    mov edx,460                           ;#0046228E: 272 CC010000               vu 04 00  1  21      
    call #0045F91F (:%opJccE)             ;#00462293: 350 87D6FFFF               v  00 00  1  22      
    jne #00462307                         ;#00462298: 165 6D                     v  00 00  1  23      
;   151 --4/9/21: (Alas I can do no better...)
;   152         if not integer(rid) then rid = -8 end if
    mov edi,[ebp] (rid)                   ;#0046229A: 213175 00                  uv 80 20  1  24      
    cmp edi,h4                            ;#0046229D: 201377 00000040            uv 00 80  1  25 80   
    jl #004622C3                          ;#004622A3: 174 1E                     v  00 00  1  25      
    mov edx,[ebp] (rid)                   ;#004622A5: 213125 00                  uv 04 20  1  26      
    cmp edx,h4                            ;#004622A8: 201372 00000040            uv 00 04  1  27 04   
    mov [ebp] (rid), dword -8             ;#004622AE: 307105 00 F8FFFFFF         vu 00 20  1  27      
    jle #004622C3                         ;#004622B5: 176 0C                     v  00 00  1  28      
    sub dword[ebx+edx*4-8],1              ;#004622B7: 203154223 F8 01            u  00 0C  3  29      
    jne #004622C3                         ;#004622BC: 165 05                     v  00 00  1  31      
    call #004639A8 (:%pDealloc)           ;#004622BE: 350 E5160000               v  00 00  1  32      
;   153 --      if not integer(rid) then crash("invalid routine_id(%V)",{rid},2) end if     -- still ugly/gibberish
;   154 --      if not integer(rid) then crash("invalid routine_id(%V)",{rid},3) end if     -- too far/wrong line (dang)
;   155         fatalN(2,e72iri,rid)
    mov ecx,4                             ;#004622C3: 271 04000000               uv 02 00  1  33      
    mov edx,441                           ;#004622C8: 272 B9010000               vu 04 00  1  33      
    call #00462C02 (:%opFrame) (fatalN)   ;#004622CD: 350 30090000               v  00 00  1  34      
    mov [ebp] (level), dword 2            ;#004622D2: 307105 00 02000000         uv 00 20  1  35      
    mov [ebp-4] (errcode), dword 72       ;#004622D9: 307105 FC 48000000         vu 00 20  1  35      
    mov edi,[ebp+20] (prevebp)            ;#004622E0: 213175 14                  uv 80 20  1  36      
    mov eax,[edi]                         ;#004622E3: 213007                     uv 01 80  1  39 80 *80*
    xor ebx,ebx                           ;#004622E5: 061333                     vu 08 08  1  39      
    cmp eax,h4                            ;#004622E7: 075 00000040               uv 00 01  1  40      
    jl #004622F8                          ;#004622EC: 174 0A                     v  00 00  1  40      
    add dword[ebx+eax*4-8],1              ;#004622EE: 203104203 F8 01            u  00 09  3  41      
    cmp eax,456                           ;#004622F3: 075 C8010000               vu 00 01  1  43      
    mov [ebp-8] (ep1),eax                 ;#004622F8: 211105 F8                  uv 00 21  1  44      
    mov [ebp+28] (retaddr),#00462307      ;#004622FB: 307105 1C 07234600         vu 00 20  1  44      
    jmp #004626EA (code:fatalN)           ;#00462302: 351 E3030000               v  00 00  1  45      
;   156     end if
;   157 
;   158 --1/6/17:
;   159     if not sequence(params) then
    mov ecx,[ebp-4] (params)              ;#00462307: 213115 FC                  uv 02 20  1  46      
    cmp ecx,h4                            ;#0046230A: 201371 00000040            uv 00 02  1  47 02   
    jl #00462319                          ;#00462310: 174 07                     v  00 00  1  47      
    test byte[ebx+ecx*4-1],#80            ;#00462312: 366104213 FF 80            u  00 0A  2  48      
    jne #0046235D                         ;#00462317: 165 44                     v  00 00  1  49      
;   160 --(1/6/17) also applied elsewhere [now that we've (eg) killed off call_func() and invoke call_common() directly from opCallFunc]
;   161 --      fatalN(3,e71cfppe,rid)
;   162         fatalN(2,e71cfppe,rid)
    mov ecx,4                             ;#00462319: 271 04000000               uv 02 00  1  50      
    mov edx,441                           ;#0046231E: 272 B9010000               vu 04 00  1  50      
    call #00462C02 (:%opFrame) (fatalN)   ;#00462323: 350 DA080000               v  00 00  1  51      
    mov [ebp] (level), dword 2            ;#00462328: 307105 00 02000000         uv 00 20  1  52      
    mov [ebp-4] (errcode), dword 71       ;#0046232F: 307105 FC 47000000         vu 00 20  1  52      
    mov edi,[ebp+20] (prevebp)            ;#00462336: 213175 14                  uv 80 20  1  53      
    mov eax,[edi]                         ;#00462339: 213007                     uv 01 80  1  56 80 *80*
    xor ebx,ebx                           ;#0046233B: 061333                     vu 08 08  1  56      
    cmp eax,h4                            ;#0046233D: 075 00000040               uv 00 01  1  57      
    jl #0046234E                          ;#00462342: 174 0A                     v  00 00  1  57      
    add dword[ebx+eax*4-8],1              ;#00462344: 203104203 F8 01            u  00 09  3  58      
    cmp eax,456                           ;#00462349: 075 C8010000               vu 00 01  1  60      
    mov [ebp-8] (ep1),eax                 ;#0046234E: 211105 F8                  uv 00 21  1  61      
    mov [ebp+28] (retaddr),#0046235D      ;#00462351: 307105 1C 5D234600         vu 00 20  1  61      
    jmp #004626EA (code:fatalN)           ;#00462358: 351 8D030000               v  00 00  1  62      
;   163     end if
;   164 
;   165     sNtyp = si[S_NTyp]
    mov esi,[ebp-16] (si)                 ;#0046235D: 213165 F0                  uv 40 20  1  63      
    cmp esi,h4                            ;#00462360: 201376 00000040            uv 00 40  1  64 40   
    jne #00462372                         ;#00462366: 165 0A                     v  00 00  1  64      
    mov esi,460                           ;#00462368: 276 CC010000               uv 40 00  1  65      
    call #00462744 (:%pUnassigned)        ;#0046236D: 350 D2030000               v  00 00  1  65      
    mov edi,2                             ;#00462372: 277 02000000               uv 80 00  1  66      
    lea ecx,[ebp-20] (sNtyp)              ;#00462377: 215115 EC                  vu 02 20  1  66      
    mov edx,460                           ;#0046237A: 272 CC010000               uv 04 00  1  67      
    mov al,0                              ;#0046237F: 260 00                     vu 01 00  1  67      
    call #00460FE5 (:%pSubse1)            ;#00462381: 350 5FECFFFF               v  00 00  1  68      
    cmp eax,h4                            ;#00462386: 075 00000040               uv 00 01  1  69      
    jl #00462397                          ;#0046238B: 174 0A                     v  00 00  1  69      
    mov ecx,461                           ;#0046238D: 271 CD010000               uv 02 00  1  70      
    call #00462D8D (:%opTcFail)           ;#00462392: 350 F6090000               v  00 00  1  70      
;   166     if sNtyp<S_Type
    cmp eax,6                             ;#00462397: 203370 06                  uv 00 01  1  71      
    jl #004623A1                          ;#0046239A: 174 05                     v  00 00  1  71      
;   167     or sNtyp>S_Proc then
    cmp eax,8                             ;#0046239C: 203370 08                  uv 00 01  1  72      
    jle #004623EA                         ;#0046239F: 176 49                     v  00 00  1  72      
;   168 --      fatalN(3,e72iri,rid)
;   169         fatalN(2,e72iri,rid)
    mov ecx,4                             ;#004623A1: 271 04000000               uv 02 00  1  73      
    mov edx,441                           ;#004623A6: 272 B9010000               vu 04 00  1  73      
    call #00462C02 (:%opFrame) (fatalN)   ;#004623AB: 350 52080000               v  00 00  1  74      
    mov [ebp] (level), dword 2            ;#004623B0: 307105 00 02000000         uv 00 20  1  75      
    mov [ebp-4] (errcode), dword 72       ;#004623B7: 307105 FC 48000000         vu 00 20  1  75      
    mov edi,[ebp+20] (prevebp)            ;#004623BE: 213175 14                  uv 80 20  1  76      
    mov eax,[edi]                         ;#004623C1: 213007                     uv 01 80  1  79 80 *80*
    xor ebx,ebx                           ;#004623C3: 061333                     vu 08 08  1  79      
    cmp eax,h4                            ;#004623C5: 075 00000040               uv 00 01  1  80      
    jl #004623D6                          ;#004623CA: 174 0A                     v  00 00  1  80      
    add dword[ebx+eax*4-8],1              ;#004623CC: 203104203 F8 01            u  00 09  3  81      
    cmp eax,456                           ;#004623D1: 075 C8010000               vu 00 01  1  83      
    mov [ebp-8] (ep1),eax                 ;#004623D6: 211105 F8                  uv 00 21  1  84      
    mov [ebp+28] (retaddr),#004623E5      ;#004623D9: 307105 1C E5234600         vu 00 20  1  84      
    jmp #004626EA (code:fatalN)           ;#004623E0: 351 05030000               v  00 00  1  85      
    jmp #0046248C                         ;#004623E5: 351 A2000000               v  00 00  1  86      
;   170     elsif (sNtyp=S_Proc)!=isProc then
    xor ecx,ecx                           ;#004623EA: 061311                     uv 02 02  1  87      
    cmp eax,8                             ;#004623EC: 203370 08                  vu 00 01  1  87      
    sete cl                               ;#004623EF: 017224301                  np 02 00  2  88      
    mov edi,[ebp-8] (isProc)              ;#004623F2: 213175 F8                  uv 80 20  1  90      
    cmp ecx,edi                           ;#004623F5: 071371                     uv 00 82  1  91 80   
    je #0046248C                          ;#004623F7: 017204 8F000000            v  00 00  1  91      
;   171         if sNtyp=S_Proc then
    cmp eax,8                             ;#004623FD: 203370 08                  uv 00 01  1  92      
    jne #00462448                         ;#00462400: 165 46                     v  00 00  1  92      
;   172 --          fatalN(3,e117rdnrav,rid)
;   173             fatalN(2,e117rdnrav,rid)
    mov ecx,4                             ;#00462402: 271 04000000               uv 02 00  1  93      
    mov edx,441                           ;#00462407: 272 B9010000               vu 04 00  1  93      
    call #00462C02 (:%opFrame) (fatalN)   ;#0046240C: 350 F1070000               v  00 00  1  94      
    mov [ebp] (level), dword 2            ;#00462411: 307105 00 02000000         uv 00 20  1  95      
    mov [ebp-4] (errcode), dword 117      ;#00462418: 307105 FC 75000000         vu 00 20  1  95      
    mov edi,[ebp+20] (prevebp)            ;#0046241F: 213175 14                  uv 80 20  1  96      
    mov eax,[edi]                         ;#00462422: 213007                     uv 01 80  1  99 80 *80*
    xor ebx,ebx                           ;#00462424: 061333                     vu 08 08  1  99      
    cmp eax,h4                            ;#00462426: 075 00000040               uv 00 01  1 100      
    jl #00462437                          ;#0046242B: 174 0A                     v  00 00  1 100      
    add dword[ebx+eax*4-8],1              ;#0046242D: 203104203 F8 01            u  00 09  3 101      
    cmp eax,456                           ;#00462432: 075 C8010000               vu 00 01  1 103      
    mov [ebp-8] (ep1),eax                 ;#00462437: 211105 F8                  uv 00 21  1 104      
    mov [ebp+28] (retaddr),#00462446      ;#0046243A: 307105 1C 46244600         vu 00 20  1 104      
    jmp #004626EA (code:fatalN)           ;#00462441: 351 A4020000               v  00 00  1 105      
    jmp #0046248C                         ;#00462446: 353 44                     v  00 00  1 106      
;   174         else
;   175 --          fatalN(3,e118rrav,rid)
;   176             fatalN(2,e118rrav,rid)
    mov ecx,4                             ;#00462448: 271 04000000               uv 02 00  1 107      
    mov edx,441                           ;#0046244D: 272 B9010000               vu 04 00  1 107      
    call #00462C02 (:%opFrame) (fatalN)   ;#00462452: 350 AB070000               v  00 00  1 108      
    mov [ebp] (level), dword 2            ;#00462457: 307105 00 02000000         uv 00 20  1 109      
    mov [ebp-4] (errcode), dword 118      ;#0046245E: 307105 FC 76000000         vu 00 20  1 109      
    mov edi,[ebp+20] (prevebp)            ;#00462465: 213175 14                  uv 80 20  1 110      
    mov eax,[edi]                         ;#00462468: 213007                     uv 01 80  1 113 80 *80*
    xor ebx,ebx                           ;#0046246A: 061333                     vu 08 08  1 113      
    cmp eax,h4                            ;#0046246C: 075 00000040               uv 00 01  1 114      
    jl #0046247D                          ;#00462471: 174 0A                     v  00 00  1 114      
    add dword[ebx+eax*4-8],1              ;#00462473: 203104203 F8 01            u  00 09  3 115      
    cmp eax,456                           ;#00462478: 075 C8010000               vu 00 01  1 117      
    mov [ebp-8] (ep1),eax                 ;#0046247D: 211105 F8                  uv 00 21  1 118      
    mov [ebp+28] (retaddr),#0046248C      ;#00462480: 307105 1C 8C244600         vu 00 20  1 118      
    jmp #004626EA (code:fatalN)           ;#00462487: 351 5E020000               v  00 00  1 119      
;   177         end if
;   178     end if
;   179 
;   180     minparams = si[S_ParmN]
    mov esi,[ebp-16] (si)                 ;#0046248C: 213165 F0                  uv 40 20  1 120      
    cmp esi,h4                            ;#0046248F: 201376 00000040            uv 00 40  1 121 40   
    jne #004624A1                         ;#00462495: 165 0A                     v  00 00  1 121      
    mov esi,460                           ;#00462497: 276 CC010000               uv 40 00  1 122      
    call #00462744 (:%pUnassigned)        ;#0046249C: 350 A3020000               v  00 00  1 122      
    mov edi,9                             ;#004624A1: 277 09000000               uv 80 00  1 123      
    lea ecx,[ebp-24] (minparams)          ;#004624A6: 215115 E8                  vu 02 20  1 123      
    mov edx,460                           ;#004624A9: 272 CC010000               uv 04 00  1 124      
    mov al,0                              ;#004624AE: 260 00                     vu 01 00  1 124      
    call #00460FE5 (:%pSubse1)            ;#004624B0: 350 30EBFFFF               v  00 00  1 125      
    cmp eax,h4                            ;#004624B5: 075 00000040               uv 00 01  1 126      
    jl #004624C6                          ;#004624BA: 174 0A                     v  00 00  1 126      
    mov ecx,462                           ;#004624BC: 271 CE010000               uv 02 00  1 127      
    call #00462D8D (:%opTcFail)           ;#004624C1: 350 C7080000               v  00 00  1 127      
;   181     noofparams = length(params)
    lea edi,[ebp-32] (noofparams)         ;#004624C6: 215175 E0                  uv 80 20  1 128      
    mov esi,[ebp-4] (params)              ;#004624C9: 213165 FC                  vu 40 20  1 128      
    mov edx,457                           ;#004624CC: 272 C9010000               uv 04 00  1 129      
    call #0045EFEC (:%opLen)              ;#004624D1: 350 16CBFFFF               v  00 00  1 129      
;   182     nooflocals = si[S_Ltot]         -- (total no of params + local vars + temps)
    mov edi,[ebp-16] (si)                 ;#004624D6: 213175 F0                  uv 80 20  1 130      
    cmp edi,h4                            ;#004624D9: 201377 00000040            uv 00 80  1 131 80   
    jne #004624EB                         ;#004624DF: 165 0A                     v  00 00  1 131      
    mov esi,460                           ;#004624E1: 276 CC010000               uv 40 00  1 132      
    call #00462744 (:%pUnassigned)        ;#004624E6: 350 59020000               v  00 00  1 132      
    mov edi,10                            ;#004624EB: 277 0A000000               uv 80 00  1 133      
    lea ecx,[ebp-36] (nooflocals)         ;#004624F0: 215115 DC                  vu 02 20  1 133      
    mov esi,[ebp-16] (si)                 ;#004624F3: 213165 F0                  uv 40 20  1 134      
    mov edx,460                           ;#004624F6: 272 CC010000               vu 04 00  1 134      
    mov al,0                              ;#004624FB: 260 00                     uv 01 00  1 135      
    call #00460FE5 (:%pSubse1)            ;#004624FD: 350 E3EAFFFF               v  00 00  1 135      
    cmp eax,h4                            ;#00462502: 075 00000040               uv 00 01  1 136      
    jl #00462513                          ;#00462507: 174 0A                     v  00 00  1 136      
    mov ecx,465                           ;#00462509: 271 D1010000               uv 02 00  1 137      
    call #00462D8D (:%opTcFail)           ;#0046250E: 350 7A080000               v  00 00  1 137      
;   183 --DEV 26/02/2012 (we want something similar on si, maybe object sicopy?)
;   184 --put back, 21/9/14 (keep ex.err simpler):
;   185 --  symtab = {} -- 1/10/14: spannered self-host on newEmit=0, so I made the same un-change here for now [DEV, re-test when newEmit=1 self host works!]
;   186 -- added 21/9/14:
;   187     si_il = si[S_il]
    mov ecx,[ebp-16] (si)                 ;#00462513: 213115 F0                  uv 02 20  1 138      
    cmp ecx,h4                            ;#00462516: 201371 00000040            uv 00 02  1 139 02   
    jne #00462528                         ;#0046251C: 165 0A                     v  00 00  1 139      
    mov esi,460                           ;#0046251E: 276 CC010000               uv 40 00  1 140      
    call #00462744 (:%pUnassigned)        ;#00462523: 350 1C020000               v  00 00  1 140      
    mov edi,11                            ;#00462528: 277 0B000000               uv 80 00  1 141      
    lea ecx,[ebp-40] (si_il)              ;#0046252D: 215115 D8                  vu 02 20  1 141      
    mov esi,[ebp-16] (si)                 ;#00462530: 213165 F0                  uv 40 20  1 142      
    mov edx,460                           ;#00462533: 272 CC010000               vu 04 00  1 142      
    mov al,0                              ;#00462538: 260 00                     uv 01 00  1 143      
    call #00460FE5 (:%pSubse1)            ;#0046253A: 350 A6EAFFFF               v  00 00  1 143      
    cmp eax,h4                            ;#0046253F: 075 00000040               uv 00 01  1 144      
    jl #00462550                          ;#00462544: 174 0A                     v  00 00  1 144      
    mov ecx,466                           ;#00462546: 271 D2010000               uv 02 00  1 145      
    call #00462D8D (:%opTcFail)           ;#0046254B: 350 3D080000               v  00 00  1 145      
;   188 
;   189     enter_cs()
    xor ecx,ecx                           ;#00462550: 061311                     uv 02 02  1 146      
    call #00463B80 (:%pEnterCS)           ;#00462552: 350 29160000               v  00 00  1 146      
;   190     maxparams = length(si[S_sig])-1
    mov edi,[ebp-16] (si)                 ;#00462557: 213175 F0                  uv 80 20  1 147      
    cmp edi,h4                            ;#0046255A: 201377 00000040            uv 00 80  1 148 80   
    jne #0046256C                         ;#00462560: 165 0A                     v  00 00  1 148      
    mov esi,460                           ;#00462562: 276 CC010000               uv 40 00  1 149      
    call #00462744 (:%pUnassigned)        ;#00462567: 350 D8010000               v  00 00  1 149      
    mov edi,7                             ;#0046256C: 277 07000000               uv 80 00  1 150      
    lea ecx,[ebp-52] (symtab[470])        ;#00462571: 215115 CC                  vu 02 20  1 150      
    mov esi,[ebp-16] (si)                 ;#00462574: 213165 F0                  uv 40 20  1 151      
    mov edx,460                           ;#00462577: 272 CC010000               vu 04 00  1 151      
    mov al,0                              ;#0046257C: 260 00                     uv 01 00  1 152      
    call #00460FE5 (:%pSubse1)            ;#0046257E: 350 62EAFFFF               v  00 00  1 152      
    lea edi,[ebp-48] (symtab[468])        ;#00462583: 215175 D0                  uv 80 20  1 153      
    mov esi,[ebp-52] (symtab[470])        ;#00462586: 213165 CC                  vu 40 20  1 153      
    mov edx,470                           ;#00462589: 272 D6010000               uv 04 00  1 154      
    call #0045EFEC (:%opLen)              ;#0046258E: 350 59CAFFFF               v  00 00  1 154      
    mov edx,[ebp-52] (symtab[470])        ;#00462593: 213125 CC                  uv 04 20  1 155      
    cmp edx,h4                            ;#00462596: 201372 00000040            uv 00 04  1 156 04   
    mov [ebp-52] (symtab[470]),ebx        ;#0046259C: 211135 CC                  vu 00 28  1 156      
    jle #004625AD                         ;#0046259F: 176 0C                     v  00 00  1 157      
    sub dword[ebx+edx*4-8],1              ;#004625A1: 203154223 F8 01            u  00 0C  3 158      
    jne #004625AD                         ;#004625A6: 165 05                     v  00 00  1 160      
    call #004639A8 (:%pDealloc)           ;#004625A8: 350 FB130000               v  00 00  1 161      
    mov eax,[ebp-48] (symtab[468])        ;#004625AD: 213105 D0                  uv 01 20  1 162      
    sub eax,1                             ;#004625B0: 203350 01                  uv 01 01  1 163 01   
    mov [ebp-28] (maxparams),eax          ;#004625B3: 211105 E4                  uv 00 21  1 164 01   
;   191     si = 0
    mov edx,[ebp-16] (si)                 ;#004625B6: 213125 F0                  vu 04 20  1 164      
    cmp edx,h4                            ;#004625B9: 201372 00000040            uv 00 04  1 165      
    mov [ebp-16] (si),ebx                 ;#004625BF: 211135 F0                  vu 00 28  1 165      
    jle #004625D0                         ;#004625C2: 176 0C                     v  00 00  1 166      
    sub dword[ebx+edx*4-8],1              ;#004625C4: 203154223 F8 01            u  00 0C  3 167      
    jne #004625D0                         ;#004625C9: 165 05                     v  00 00  1 169      
    call #004639A8 (:%pDealloc)           ;#004625CB: 350 D8130000               v  00 00  1 170      
;   192     symtab = 0
    mov edx,[ebp-12] (symtab)             ;#004625D0: 213125 F4                  uv 04 20  1 171      
    cmp edx,h4                            ;#004625D3: 201372 00000040            uv 00 04  1 172 04   
    mov [ebp-12] (symtab),ebx             ;#004625D9: 211135 F4                  vu 00 28  1 172      
    jle #004625EA                         ;#004625DC: 176 0C                     v  00 00  1 173      
    sub dword[ebx+edx*4-8],1              ;#004625DE: 203154223 F8 01            u  00 0C  3 174      
    jne #004625EA                         ;#004625E3: 165 05                     v  00 00  1 176      
    call #004639A8 (:%pDealloc)           ;#004625E5: 350 BE130000               v  00 00  1 177      
;   193     leave_cs()
    xor ecx,ecx                           ;#004625EA: 061311                     uv 02 02  1 178      
    call #00463BCE (:%pLeaveCS)           ;#004625EC: 350 DD150000               v  00 00  1 178      
;   194 
;   195 --  if noofparams<minparams then fatalN(3,e81ipicfp) end if -- insufficient parameters in call_func/proc()
;   196     if noofparams<minparams then fatalN(2,e81ipicfp) end if -- insufficient parameters in call_func/proc()
    mov edi,[ebp-32] (noofparams)         ;#004625F1: 213175 E0                  uv 80 20  1 179      
    mov esi,[ebp-24] (minparams)          ;#004625F4: 213165 E8                  vu 40 20  1 179      
    cmp edi,esi                           ;#004625F7: 071367                     uv 00 C0  1 180      
    jge #00462624                         ;#004625F9: 175 29                     v  00 00  1 180      
    mov ecx,4                             ;#004625FB: 271 04000000               uv 02 00  1 181      
    mov edx,441                           ;#00462600: 272 B9010000               vu 04 00  1 181      
    call #00462C02 (:%opFrame) (fatalN)   ;#00462605: 350 F8050000               v  00 00  1 182      
    mov [ebp] (level), dword 2            ;#0046260A: 307105 00 02000000         uv 00 20  1 183      
    mov [ebp-4] (errcode), dword 81       ;#00462611: 307105 FC 51000000         vu 00 20  1 183      
    mov [ebp+28] (retaddr),#00462624      ;#00462618: 307105 1C 24264600         uv 00 20  1 184      
    jmp #004626EA (code:fatalN)           ;#0046261F: 351 C6000000               v  00 00  1 184      
;   197 --  if noofparams>maxparams then fatalN(3,e89tmpicfp) end if -- too many parameters in call_func/proc()
;   198     if noofparams>maxparams then fatalN(2,e89tmpicfp) end if -- too many parameters in call_func/proc()
    mov ecx,[ebp-32] (noofparams)         ;#00462624: 213115 E0                  uv 02 20  1 185      
    mov eax,[ebp-28] (maxparams)          ;#00462627: 213105 E4                  vu 01 20  1 185      
    cmp ecx,eax                           ;#0046262A: 071301                     uv 00 03  1 186      
    jle #00462657                         ;#0046262C: 176 29                     v  00 00  1 186      
    mov ecx,4                             ;#0046262E: 271 04000000               uv 02 00  1 187      
    mov edx,441                           ;#00462633: 272 B9010000               vu 04 00  1 187      
    call #00462C02 (:%opFrame) (fatalN)   ;#00462638: 350 C5050000               v  00 00  1 188      
    mov [ebp] (level), dword 2            ;#0046263D: 307105 00 02000000         uv 00 20  1 189      
    mov [ebp-4] (errcode), dword 89       ;#00462644: 307105 FC 59000000         vu 00 20  1 189      
    mov [ebp+28] (retaddr),#00462657      ;#0046264B: 307105 1C 57264600         uv 00 20  1 190      
    jmp #004626EA (code:fatalN)           ;#00462652: 351 93000000               v  00 00  1 190      
;   199 --  if noofparams>maxparams then fatalN(1,e89tmpicfp) end if -- too many parameters in call_func/proc()
;   200 
;   201     if string(params) then
    mov edi,[ebp-4] (params)              ;#00462657: 213175 FC                  uv 80 20  1 191      
    cmp edi,h4                            ;#0046265A: 201377 00000040            uv 00 80  1 192 80   
    jl #00462679                          ;#00462660: 174 17                     v  00 00  1 192      
    cmp byte[ebx+edi*4-1],#82             ;#00462662: 200174273 FF 82            u  00 88  2 193      
    jne #00462679                         ;#00462667: 165 10                     v  00 00  1 194      
;   202         params &= -1    -- (force conversion to dword-sequence)
    lea edx,[ebp-4] (params)              ;#00462669: 215125 FC                  uv 04 20  1 195      
    lea edi,[ebp-4] (params)              ;#0046266C: 215175 FC                  vu 80 20  1 195      
    mov ecx,#00402014                     ;#0046266F: 271 14204000               uv 02 00  1 196      
    call #0045FD65 (:%opConcat)           ;#00462674: 350 ECD6FFFF               v  00 00  1 196      
;   203         --  Of course call_proc(N,"fred") is probably an error,
;   204         --  where the programmer actually meant to use {"fred"},
;   205         --  ((assuming enough optional params to get this far))
;   206         --  but call_proc(N,repeat(65,5)) must work the same as
;   207         --  call_proc(N,{65,65,65,65,65}) even though it is in
;   208         --  fact effectively the same as call_proc(N,"AAAAA"),
;   209         --  since repeat(ch,N) creates a string, as it should.
;   210     end if
;   211 
;   212     #ilASM{ e_all                                   -- set "all side_effects"
;   213         [32]
;   214             mov ecx,[nooflocals]                    -- (si[S_Ltot])
                    mov ecx,[ebp-36] (nooflocals)  ;#00462679: 213115 DC                  uv 02 20  1 197      
;   215             mov edx,[rid]
                    mov edx,[ebp] (rid)   ;#0046267C: 213125 00                  vu 04 20  1 197      
;   216             -- 04/12/2011: load before the opFrame (as that modifies ebp) and push*3
;   217 --          mov eax,[si]
;   218             mov eax,[si_il]                         -- (si[S_il])
                    mov eax,[ebp-40] (si_il)  ;#0046267F: 213105 D8                  uv 01 20  1 198      
;   219             mov edi,[noofparams]
                    mov edi,[ebp-32] (noofparams)  ;#00462682: 213175 E0                  vu 80 20  1 198      
;   220             mov esi,[params]
                    mov esi,[ebp-4] (params)  ;#00462685: 213165 FC                  uv 40 20  1 199      
;   221             push eax                                -- [1] (popped into esi)
                    push eax              ;#00462688: 120                        vu 00 01  1 199      
;   222             push edi                                -- [2] (popped into ecx)
                    push edi              ;#00462689: 127                        uv 00 80  1 200      
;   223             push esi                                -- [3] 
                    push esi              ;#0046268A: 126                        vu 00 40  1 200      
;   224 push dword[ebp+12]
        push dword[ebp+12]                ;#0046268B: 377165 0C                  np 00 20  2 201      
;   225             call :%opFrame
                    call #00462C02 (:%opFrame)  ;#0046268E: 350 6F050000               v  00 00  1 203      
;   226 pop dword[ebp+12]
        pop dword[ebp+12]                 ;#00462693: 217105 0C                  np 00 20  3 204      
;   227             pop esi                                 -- [3] (params)
                    pop esi               ;#00462696: 136                        uv 40 00  1 207      
;   228             mov edi,ebp                             -- address of first parameter
                    mov edi,ebp           ;#00462697: 213375                     vu 80 20  1 207      
;   229             pop ecx                                 -- [2] (noofparams)
                    pop ecx               ;#00462699: 131                        uv 02 00  1 208      
;   230             shl esi,2                               -- params(raw)
                    shl esi,2             ;#0046269A: 301346 02                  u  40 40  1 209      
;   231             test ecx,ecx
                    test ecx,ecx          ;#0046269D: 205311                     vu 00 02  1 209      
;   232             jz :zeroparams
                    jz #004626B8          ;#0046269F: 164 17                     v  00 00  1 210      
;   233 
;   234          ::paramloop
;   235                 lodsd                               -- mov eax,[esi]; esi+=4
                        lodsd             ;#004626A1: 255                        np 41 40  2 211      
;   236                 mov [edi],eax
                        mov [edi],eax     ;#004626A2: 211007                     uv 00 81  1 213      
;   237                 sub edi,4
                        sub edi,4         ;#004626A4: 203357 04                  vu 80 80  1 213      
;   238                 cmp eax,h4
                        cmp eax,h4        ;#004626A7: 075 00000040               uv 00 01  1 214      
;   239                 jl @f
                        jl #004626B3      ;#004626AC: 174 05                     v  00 00  1 214      
;   240                     add dword[ebx+eax*4-8],1        -- increment refcount.
                            add dword[ebx+eax*4-8],1  ;#004626AE: 203104203 F8 01            u  00 09  3 215      
;   241               @@:
;   242                 sub ecx,1
                        sub ecx,1         ;#004626B3: 203351 01                  vu 02 02  1 217      
;   243                 jnz :paramloop
                        jnz #004626A1     ;#004626B6: 165 E9                     v  00 00  1 218      
;   244 
;   245          ::zeroparams
;   246 
;   247 --          pop esi                                 -- [1] ([si, ie symtab[rid]])
;   248 --          pop esi                                 -- [1] ([si_il, ie symtab[rid][S_il]])
;   249 --EXCEPT
;   250 --X         mov dword[ebp+16],:retaddr
;   251             mov dword[ebp+28],:cc_retaddr
                    mov [ebp+28] (retaddr),#004626C0  ;#004626B8: 307105 1C C0264600         uv 00 20  1 219      
;   252 --          mov dword[ebp+28],:!cc_ret
;   253 --          jmp dword[ebx+esi*4+40]                 -- execute first opcode (S_il=11)
;   254 --          jmp esi                                 -- execute first opcode
;   255             ret                                     -- [1] (== jmp symtab[rid][S_il])
                    ret                   ;#004626BF: 303                        np 00 00  2 220      
;   256          ::cc_retaddr
;   257 --       :!cc_ret
;   258             cmp [isProc],0
                    cmp dword[ebp-8] (isProc),0  ;#004626C0: 203175 F8 00               u  00 20  2 222      
;   259             jz :isFunc
                    jz #004626C8          ;#004626C4: 164 02                     v  00 00  1 223      
;   260                 xor eax,eax
                        xor eax,eax       ;#004626C6: 061300                     uv 01 01  1 224      
;   261          ::isFunc
;   262             mov [res],eax                           -- (assumes [res] is still h4 here)
                    mov [ebp-44] (res),eax  ;#004626C8: 211105 D4                  uv 00 21  1 225 01   
;   263 --DEV (temp, verify it is a valid ebp, or 0:)
;   264 --mov eax,[ebp+24]              -- ebp_root
;   265 --cmp dword[eax+16],#40565342   -- vsb_magic="@VSB"?
;   266 --je @f
;   267 --  int3
;   268 --@@:
;   269 
;   270         [64]
;   271             mov rcx,[nooflocals]
;   272             mov rdx,[rid]
;   273             -- 04/12/2011: load before the opFrame (as that modifies ebp) and push*3
;   274 --          mov rax,[si]
;   275             mov rax,[si_il]
;   276             mov rdi,[noofparams]
;   277             mov rsi,[params]
;   278             push rax                                -- [1] (popped into rsi)
;   279             push rdi                                -- [2] (popped into rcx)
;   280             push rsi                                -- [3] 
;   281             call :%opFrame
;   282             pop rsi                                 -- [3] (params)
;   283             mov rdi,rbp                             -- address of first parameter
;   284             pop rcx                                 -- [2] (noofparams)
;   285             shl rsi,2                               -- params(raw)
;   286             test rcx,rcx
;   287             jz :zeroparams
;   288             mov r15,h4
;   289 
;   290          ::paramloop
;   291                 lodsq                               -- mov rax,[rsi]; rsi+=8
;   292                 mov [rdi],rax
;   293 --              sub rdi,4
;   294                 sub rdi,8
;   295 --              cmp rax,h4
;   296                 cmp rax,r15
;   297                 jl @f
;   298                     add qword[rbx+rax*4-16],1       -- increment refcount.
;   299               @@:
;   300                 sub rcx,1
;   301                 jnz :paramloop
;   302 
;   303          ::zeroparams
;   304 
;   305 --          pop esi                                 -- [1] ([si, ie symtab[rid]])
;   306 --          pop esi                                 -- [1] ([si_il, ie symtab[rid][S_il]])
;   307 --EXCEPT
;   308 --X         mov qword[rbp+32],:retaddr
;   309             mov qword[rbp+56],:cc_retaddr
;   310 --          mov qword[rbp+56],:!cc_ret
;   311 --          jmp dword[ebx+esi*4+40]                 -- execute first opcode (S_il=11)
;   312 --          jmp esi                                 -- execute first opcode
;   313             ret                                     -- [1] (== jmp symtab[rid][S_il])
;   314          ::cc_retaddr
;   315 --       :!cc_ret
;   316             cmp [isProc],0
;   317             jz :isFunc
;   318                 xor rax,rax
;   319          ::isFunc
;   320             mov [res],rax                           -- (assumes [res] is still h4 here)
;   321         []
;   322     }
;   323     return res
    mov esi,[ebp-44] (res)                ;#004626CB: 213165 D4                  vu 40 20  1 225      
    cmp esi,h4                            ;#004626CE: 201376 00000040            uv 00 40  1 226      
    jne #004626E0                         ;#004626D4: 165 0A                     v  00 00  1 226      
    mov esi,467                           ;#004626D6: 276 D3010000               uv 40 00  1 227      
    call #00462744 (:%pUnassigned)        ;#004626DB: 350 64000000               v  00 00  1 227      
    mov eax,esi                           ;#004626E0: 211360                     uv 01 40  1 228      
    mov [ebp-44] (res),ebx                ;#004626E2: 211135 D4                  vu 00 28  1 228      
    jmp #00462C8F (:%opRetf)              ;#004626E5: 351 A5050000               v  00 00  1 229      
;   324 end function
;   325 
;   326 --DEV to go, see below:
;   327 --global function call_func(integer rid, sequence params)
;   328 --  return call_common(rid,params,0)
;   329 --end function
;   330 --
;   331 --global procedure call_proc(integer rid, sequence params)
;   332 --  if call_common(rid,params,1)!=0 then ?9/0 end if
;   333 --end procedure
;   334 --
;   335 --global function call_funcN(integer rid, sequence params)
;   336 --  return call_common(rid,params,0)
;   337 --end function
;   338 --
;   339 --global procedure call_procN(integer rid, sequence params)
;   340 --  if call_common(rid,params,1)!=0 then ?9/0 end if
;   341 --end procedure
;   342 
;   343 #ilASM{ jmp :!opCallOnceYeNot
                jmp :!opCallOnceYeNot     ;#00462EA9: 351 45F9FFFF               v  00 00  1   1      
;   344 --#ilASM{ jmp :fin
;   345 
;   346 --global function call_func(integer rid, sequence params)
;   347 --  return call_common(rid,params,0)
;   348 --end function
;   349 --/*
;   350 procedure :%opCallFunc(:%)
;   351 end procedure -- (for Edita/CtrlQ)
;   352 --*/
;   353     :%opCallFunc
;   354 ----------------
;   355         [32]
;   356             -- calling convention
;   357             --  lea edi,[res]       -- result location
;   358             --  mov eax,[rid]       -- (opUnassigned)
;   359             --  mov esi,[args]      -- (opUnassigned)
;   360             --  call :%opCallFunc   -- [edi]:=call_func(eax,esi)
;   361             cmp eax,h4
                    cmp eax,h4            ;#00462EAE: 075 00000040               uv 00 01  1   2      
;   362             jl @f
                    jl #00462EBA          ;#00462EB3: 174 05                     v  00 00  1   2      
;   363                 add dword[ebx+eax*4-8],1
                        add dword[ebx+eax*4-8],1  ;#00462EB5: 203104203 F8 01            u  00 09  3   3      
;   364           @@:
;   365             cmp esi,h4
                    cmp esi,h4            ;#00462EBA: 201376 00000040            vu 00 40  1   5      
;   366             jl @f
                    jl #00462EC7          ;#00462EC0: 174 05                     v  00 00  1   6      
;   367                 add dword[ebx+esi*4-8],1
                        add dword[ebx+esi*4-8],1  ;#00462EC2: 203104263 F8 01            u  00 48  3   7      
;   368           @@:
;   369 --29/10/17...
;   370 --mov edx,[esp]
;   371 --mov dword[ebp+12],edx
;   372             push edi                            --[1] addr res
                    push edi              ;#00462EC7: 127                        vu 00 80  1   9      
;   373             push esi                            --[2] args
                    push esi              ;#00462EC8: 126                        uv 00 40  1  10      
;   374             push eax                            --[3] rid
                    push eax              ;#00462EC9: 120                        vu 00 01  1  10      
;   375             mov edx,routine_id(call_common)     -- mov edx,imm32 (sets K_ridt)
                    mov edx,455           ;#00462ECA: 272 C7010000               uv 04 00  1  11      
;   376             mov ecx,$_Ltot                      -- mov ecx,imm32 (=symtab[call_common][S_Ltot])
                    mov ecx,14            ;#00462ECF: 271 0E000000               vu 02 00  1  11      
;   377             call :%opFrame
                    call :%opFrame (call_common)  ;#00462ED4: 350 29FDFFFF               v  00 00  1  12      
;   378             mov edx,[esp+12]
                    mov edx,[esp+12]      ;#00462ED9: 213124044 0C               uv 04 10  1  13      
;   379             pop dword[ebp]                      --[3] rid
                    pop dword[ebp] (rid)  ;#00462EDD: 217105 00                  np 00 20  3  14      
;   380             pop dword[ebp-4]                    --[2] args
                    pop dword[ebp-4] (params)  ;#00462EE0: 217105 FC                  np 00 20  3  17      
;   381             mov dword[ebp-8],ebx                -- isProc:=0
                    mov [ebp-8] (isProc),ebx  ;#00462EE3: 211135 F8                  uv 00 28  1  20      
;   382 --EXCEPT
;   383 --X         mov dword[ebp+16],:callfuncret      -- return address
;   384 --          mov dword[ebp+28],:callfuncret      -- return address
;   385             mov dword[ebp+28],:!cf_ret          -- return address
                    mov [ebp+28] (retaddr),#00462EF5  ;#00462EE6: 307105 1C F52E4600         vu 00 20  1  20      
;   386             mov dword[ebp+12],edx               -- called from address
                    mov [ebp+12],edx      ;#00462EED: 211125 0C                  uv 00 24  1  21      
;   387             jmp $_il                            -- jmp code:call_common
                    jmp #0046220A (code:call_common)  ;#00462EF0: 351 15F3FFFF               v  00 00  1  21      
;   388 --        ::callfuncret
;   389           :!cf_ret
;   390             pop edi                             --[1] addr res
                    pop edi               ;#00462EF5: 137                        uv 80 00  1  22      
;   391             mov edx,[edi]
                    mov edx,[edi]         ;#00462EF6: 213027                     uv 04 80  1  25 80 *80*
;   392             mov [edi],eax
                    mov [edi],eax         ;#00462EF8: 211007                     vu 00 81  1  25      
;   393             cmp edx,h4
                    cmp edx,h4            ;#00462EFA: 201372 00000040            uv 00 04  1  26      
;   394             jle @f
                    jle #00462F0D         ;#00462F00: 176 0B                     v  00 00  1  26      
;   395                 sub dword[ebx+edx*4-8],1
                        sub dword[ebx+edx*4-8],1  ;#00462F02: 203154223 F8 01            u  00 0C  3  27      
;   396                 jz :%pDealloc
                        jz #004639A8 (:%pDealloc)  ;#00462F07: 017204 9B0A0000            v  00 00  1  29      
;   397           @@:
;   398             ret
                    ret                   ;#00462F0D: 303                        np 00 00  2  30      
;   399         [64]
;   400             -- calling convention
;   401             --  lea rdi,[res]       -- result location
;   402             --  mov rax,[rid]       -- (opUnassigned)
;   403             --  mov rsi,[args]      -- (opUnassigned)
;   404             --  call :%opCallFunc   -- [rdi]:=call_func(rax,rsi)
;   405             mov r15,h4
;   406             cmp rax,r15
;   407             jl @f
;   408                 add qword[rbx+rax*4-16],1
;   409           @@:
;   410             cmp rsi,r15
;   411             jl @f
;   412                 add qword[rbx+rsi*4-16],1
;   413           @@:
;   414             push rdi                            --[1] addr res
;   415             push rsi                            --[2] args
;   416             push rax                            --[3] rid
;   417             mov rdx,routine_id(call_common)     -- mov rdx,imm32 (sets K_ridt)
;   418             mov rcx,$_Ltot                      -- mov rcx,imm32 (=symtab[call_common][S_Ltot])
;   419             call :%opFrame
;   420             mov rdx,[rsp+24]
;   421             pop qword[rbp]                      --[3] rid
;   422             pop qword[rbp-8]                    --[2] args
;   423             mov qword[rbp-16],rbx               -- isProc:=0
;   424 --EXCEPT
;   425 --X         mov qword[rbp+32],:callfuncret      -- return address
;   426 --          mov qword[rbp+56],:callfuncret      -- return address
;   427             mov qword[rbp+56],:!cf_ret          -- return address
;   428             mov qword[rbp+24],rdx               -- called from address
;   429             jmp $_il                            -- jmp code:call_common
;   430 --        ::callfuncret
;   431           :!cf_ret
;   432             pop rdi                             --[1] addr res
;   433             mov rdx,[rdi]
;   434             mov [rdi],rax
;   435             cmp rdx,r15
;   436             jle @f
;   437                 sub qword[rbx+rdx*4-16],1
;   438                 jz :%pDealloc
;   439           @@:
;   440             ret
;   441         []
;   442 
;   443 --global procedure call_proc(integer rid, sequence params)
;   444 --  if call_common(rid,params,1)!=0 then ?9/0 end if
;   445 --end procedure
;   446 --/*
;   447 procedure :%opCallProc(:%)
;   448 end procedure -- (for Edita/CtrlQ)
;   449 --*/
;   450     :%opCallProc
;   451 ----------------
;   452         [32]
;   453             -- calling convention
;   454             --  mov eax,[rid]       -- (opUnassigned)
;   455             --  mov esi,[args]      -- (opUnassigned)
;   456             --  call :%opCallProc   -- call_proc(eax,esi)
;   457             -- If, instead of call, this is invoked via push 0; jmp :%opCallProc,
;   458             --  the impossible return is discarded and control passes to opRetf.
;   459             --  This allows pTask.e to keep the system stack balanced.
;   460             cmp eax,h4
                    cmp eax,h4            ;#00462F0E: 075 00000040               uv 00 01  1  32      
;   461             jl @f
                    jl #00462F1A          ;#00462F13: 174 05                     v  00 00  1  32      
;   462                 add dword[ebx+eax*4-8],1
                        add dword[ebx+eax*4-8],1  ;#00462F15: 203104203 F8 01            u  00 09  3  33      
;   463           @@:
;   464             cmp esi,h4
                    cmp esi,h4            ;#00462F1A: 201376 00000040            vu 00 40  1  35      
;   465             jl @f
                    jl #00462F27          ;#00462F20: 174 05                     v  00 00  1  36      
;   466                 add dword[ebx+esi*4-8],1
                        add dword[ebx+esi*4-8],1  ;#00462F22: 203104263 F8 01            u  00 48  3  37      
;   467           @@:
;   468             push esi                            --[1] args
                    push esi              ;#00462F27: 126                        vu 00 40  1  39      
;   469             push eax                            --[2] rid
                    push eax              ;#00462F28: 120                        uv 00 01  1  40      
;   470             mov edx,routine_id(call_common)     -- mov edx,imm32 (sets K_ridt)
                    mov edx,455           ;#00462F29: 272 C7010000               vu 04 00  1  40      
;   471             mov ecx,$_Ltot                      -- mov ecx,imm32 (=symtab[call_common][S_Ltot])
                    mov ecx,14            ;#00462F2E: 271 0E000000               uv 02 00  1  41      
;   472             call :%opFrame
                    call :%opFrame (call_common)  ;#00462F33: 350 CAFCFFFF               v  00 00  1  41      
;   473             mov edx,[esp+8]                     -- return address
                    mov edx,[esp+8]       ;#00462F38: 213124044 08               uv 04 10  1  42      
;   474             pop dword[ebp]                      --[2] rid
                    pop dword[ebp] (rid)  ;#00462F3C: 217105 00                  np 00 20  3  43      
;   475             pop dword[ebp-4]                    --[1] args
                    pop dword[ebp-4] (params)  ;#00462F3F: 217105 FC                  np 00 20  3  46      
;   476 --          mov eax,:callprocret                -- return address
;   477             pop eax
                    pop eax               ;#00462F42: 130                        uv 01 00  1  49      
;   478             test edx,edx
                    test edx,edx          ;#00462F43: 205322                     vu 00 04  1  49      
;   479             jnz @f
                    jnz #00462F52         ;#00462F45: 165 0B                     v  00 00  1  50      
;   480                 mov edx,[ebp+20]                -- prev_ebp
                        mov edx,[ebp+20] (prevebp)  ;#00462F47: 213125 14                  uv 04 20  1  51      
;   481 --              add esp,4
;   482                 mov eax,:%opRetf
                        mov eax,#00462C8F  ;#00462F4A: 270 8F2C4600               vu 01 00  1  51      
;   483                 mov edx,[edx+12]                -- called from address
                        mov edx,[edx+12]  ;#00462F4F: 213122 0C                  uv 04 04  1  54    *04*
;   484           @@:
;   485             mov dword[ebp-8],1                  -- isProc:=1
                    mov [ebp-8] (isProc), dword 1  ;#00462F52: 307105 F8 01000000         vu 00 20  1  54      
;   486 --EXCEPT
;   487 --X         mov dword[ebp+16],eax               -- return address
;   488             mov dword[ebp+28],eax               -- return address
                    mov [ebp+28] (retaddr),eax  ;#00462F59: 211105 1C                  uv 00 21  1  55      
;   489             mov dword[ebp+12],edx               -- called from address
                    mov [ebp+12],edx      ;#00462F5C: 211125 0C                  vu 00 24  1  55      
;   490             jmp $_il                            -- jmp code:call_common
                    jmp #0046220A (code:call_common)  ;#00462F5F: 351 A6F2FFFF               v  00 00  1  56      
;   491 --        ::callprocret
;   492 --          test eax,eax
;   493 --          jnz :%e02atdb0
;   494 --          ret
;   495         [64]
;   496             -- calling convention
;   497             --  mov rax,[rid]       -- (opUnassigned)
;   498             --  mov rsi,[args]      -- (opUnassigned)
;   499             --  call :%opCallProc   -- call_proc(rax,rsi)
;   500             -- If instead of call this is invoked via push 0; jmp :%opCallProc,
;   501             --  the impossible return is discarded and control passes to opRetf.
;   502             --  This allows pTask.e to keep the system stack balanced.
;   503             mov r15,h4
;   504             cmp rax,r15
;   505             jl @f
;   506                 add qword[rbx+rax*4-16],1
;   507           @@:
;   508             cmp rsi,r15
;   509             jl @f
;   510                 add qword[rbx+rsi*4-16],1
;   511           @@:
;   512             push rsi                            --[1] args
;   513             push rax                            --[2] rid
;   514             mov rdx,routine_id(call_common)     -- mov rdx,imm32 (sets K_ridt)
;   515             mov rcx,$_Ltot                      -- mov rcx,imm32 (=symtab[call_common][S_Ltot])
;   516             call :%opFrame
;   517             mov rdx,[rsp+16]                    -- return address
;   518             pop qword[rbp]                      --[2] rid
;   519             pop qword[rbp-8]                    --[1] args
;   520             mov rax,:callprocret                -- return address
;   521             test rdx,rdx
;   522             jnz @f
;   523                 mov rdx,[rbp+40]                -- prev_ebp
;   524                 add rsp,8
;   525                 mov rax,:%opRetf
;   526                 mov rdx,[rdx+24]                -- called from address
;   527           @@:
;   528             mov qword[rbp-16],1                 -- isProc:=1
;   529 --EXCEPT
;   530 --X         mov qword[rbp+32],rax               -- return address
;   531             mov qword[rbp+56],rax               -- return address
;   532             mov qword[rbp+24],rdx               -- called from address
;   533             jmp $_il                            -- jmp code:call_common
;   534           ::callprocret
;   535             test rax,rax
;   536             jnz :%e02atdb0
;   537             ret
;   538         []
;   539 
;   540 --  ::fin
;   541       }
;   542 
;   543 
    jmp #00462C8F (:%opRetf)              ;#00462F64: 351 26FDFFFF               v  00 00  1  57      
;C:\Phix\builtins\VM\pStack.e:
;=============================
;     1 --
;     2 -- pStack.e
;     3 -- ========
;     4 
;     5 --constant freesym = "free symtab["
;     6 --constant closebr = "] \n"
;     7 
;     8 --
;     9 --  Call stack management. 
;    10 --
;    11 --  Phix uses a virtual stack, allocated in ~12K (~11K for 64-bit) blocks on the heap, rather than 
;    12 --  the system stack, which avoids having to deal with stack exceptions, and/or decide how big the 
;    13 --  stack should be before execution begins. This means that Phix can perform deeper nested calls, 
;    14 --  and/or use a larger heap, than a traditional system-stack based approach. The virtual stack 
;    15 --  block sizes were taken directly from the tables in pHeap.e, namely 12280 for 32 bit and 11248 
;    16 --  for 64 bit, and we use %:pGetPool rather than allocate, which would be 4/8 off those figures.
;    17 --  (In reality :%pGetPool existed long before :%pAlloc and was chosen for that singular reason;
;    18 --   it would not be a terrible idea to switch to :%pAlloc, albeit resulting in a tiny loss.)
;    19 --
;    20 --  Creating a new frame and invoking a routine is not that much different to how it would be done 
;    21 --  traditionally (on the system stack), however return has to decrease reference counts and when
;    22 --  they drop to zero deallocate the object. Additionally, specialised methods are used to perform 
;    23 --  type checking and "callonce" any top-level code. To be fair, there is very little difference 
;    24 --  between using the system stack or virtual stack blocks, not that I ever quite got the hang of 
;    25 --  catching some exception or other in order to extend the stack, but one idea I rather like
;    26 --  about vsbs is that when a program runs out of memory it is quite possible to free up all but 
;    27 --  the head and tail(2) of the vsb chain, compared to freeing up the middle of the stack, and of
;    28 --  course that little bit of extra available memory may well be all that pDiag.e needs.
;    29 --
;    30 --
;    31 --  A virtual stack block (32-bit) is:
;    32 --      dd vsb_prev                 [vsb_root]
;    33 --      dd vsb_next                 [vsb_root+4]
;    34 --      dd spare (was symtabptr)    [vsb_root+8]
;    35 --      dd spare (was gvarptr)      [vsb_root+12]
;    36 --      dd magic                    [vsb_root+16]       -- (#40565342 = "@VSB")
;    37 --      (frames in remaining 12280-24 bytes, leaving unused chunks rather than spanning)
;    38 --      dd magic                    [vsb_root+12276]    -- (#3C565342 = "<VSB")
;    39 --
;    40 --  A (32-bit) frame is:
;    41 --      dd items N..2               [ebp-n*4+4]
;    42 --      dd item 1                   [ebp]
;    43 --      dd N                        [ebp+4] (if N==0 then [ebp] is junk/off-limits)
;    44 --      dd routine being called     [ebp+8] (there is no longer a calling routine)
;    45 --      dd called from addr         [ebp+12]
;    46 --EXCEPT
;    47 --X     dd return address           [ebp+16] (0 means callback)
;    48 --      dd exception handler        [ebp+16] (0 means none, 1 means lower down)
;    49 --      dd prev_ebp                 [ebp+20] (0 means top-level quit [maybe?])
;    50 --      dd vsb_root                 [ebp+24]
;    51 --EXCEPT
;    52 --X>?   dd ehand                    [ebp+28] (exception handler/flag) [proposed]
;    53 --      dd return address           [ebp+28] (0 means callback)
;    54 --old:
;    55 --      dd symtabptr                [ebp+24] \
;    56 --?     dd threadstack              [ebp+28]  } may be copied/overwritten every frame
;    57 --      dd vsb_root                 [ebp+32] /
;    58 
;    59 --DEV have this make ddthreadstack 0 and see if we really need it anymore...
;    60 --    can we not just use [ds+8] to load symptr? - I believe we now do...   [ARGH!]
;    61 
;    62 --
;    63 --  A virtual stack block (64-bit) is:
;    64 --      dq vsb_prev                 [vsb_root]
;    65 --      dq vsb_next                 [vsb_root+8]
;    66 --<     dq symtabptr                [vsb_root+16]       -- (raw address of symtab[1])   [DEV]
;    67 --<     dq gvarptr                  [vsb_root+24]       -- (raw address of gvar[1])     [DEV]
;    68 --      dq spare (was symtabptr)    [vsb_root+16]
;    69 --      dq spare (was gvarptr)      [vsb_root+24]
;    70 --      dq magic                    [vsb_root+32]       -- (#40565342 = "@VSB")
;    71 --pHeapD:
;    72 --<     <frames in remaining 9208-48 bytes, leaving unused chunks rather than spanning>
;    73 --      <frames in remaining 11248-48 bytes, leaving unused chunks rather than spanning>
;    74 --<     dq magic    ( [vsb_root+(9200)] )       -- (#3C565342 = "<VSB")
;    75 --      dq magic    ( [vsb_root+(11240)] )      -- (#3C565342 = "<VSB")
;    76 --
;    77 --  A (64-bit) frame is:
;    78 --      dq items N..2               [rbp-n*8+8]
;    79 --      dq item 1                   [rbp]
;    80 --      dq N                        [rbp+8] (if N==0 then [rbp] is junk/off-limits)
;    81 --      dq routine being called     [rbp+16] (there is no longer a calling routine)
;    82 --      dq called from addr         [rbp+24]
;    83 --EXCEPT
;    84 --X     dq return address           [rbp+32] (0 means callback)
;    85 --      dq exception handler        [rbp+32] (0 means none, 1 means lower down)
;    86 --      dq prev_ebp                 [rbp+40] (0 means top-level quit [maybe?])
;    87 --      dq vsb_root                 [rbp+48]
;    88 --EXCEPT
;    89 --X>?   dq ehand                    [rbp+56] (exception handler/flag) [proposed]
;    90 --      dq return address           [rbp+56] (0 means callback)
;    91 --
;    92 
;    93 --without debug
;    94 
;    95 include builtins\VM\pFEH.e
;    96 include builtins\VM\pHeap.e     -- :%pDealloc, :%pGetPool
;    97 
;    98 integer sinit = 0   -- enforce once-only init
;    99 
;   100 integer pArg = 0    -- [ELF] save of r|esp/4 (for command_line) at load
;   101                     -- (when non-null) [pArg*w+w] is argc, where w=machine_word()
;   102                     -- see syswait.ew for more details/environment handling
;   103 
;   104 integer nocleanup = 0   -- set to 1 if (eg) :!iDiag has been called,
;   105                         -- so abort proper like, rather than try and
;   106                         -- "return when interpreting" etc.
;   107 
;   108 integer CClean = 0      -- cleanup code for pcfunc.e [DEV togo]
;   109 
;   110 constant oom = "Your program has run out of memory, one moment please\n"
;   111 
;   112 #ilASM{ jmp :!opCallOnceYeNot
                jmp :!opCallOnceYeNot     ;#00462AD5: 351 19FDFFFF               v  00 00  1   1      
;   113 
;   114 --
;   115 -- The following two routines are needed for p.exw and pcfunc.e: in the "parlor trick"
;   116 --  that is "p p p -test" we need to be sure that when we access [ds+8] we are talking
;   117 --  about the same one the VM is using. pDiagN/pStack/pTrace can use [ds+8] directly,
;   118 --  as they are part of the VM (and one day soon pcfunc.e should be as well?).
;   119 --
;   120 
;   121 --/*
;   122 procedure :%pGetSymPtr(:%)
;   123 end procedure -- (for Edita/CtrlQ)
;   124 --*/
;   125 :%pGetSymPtr        -- [e/rsi] := raw(symtab)
;   126 -------------
;   127     [32]
;   128         mov esi,[ds+8]      -- (esi:=raw addr of symtab[1])
                mov esi,[#00402008]       ;#00462ADA: 213065 08204000            uv 40 00  1   2      
;   129     [64]
;   130         mov rsi,[ds+8]      -- (rsi:=raw addr of symtab[1])
;   131     []
;   132         ret
                ret                       ;#00462AE0: 303                        np 00 00  2   3      
;   133 
;   134 --/*
;   135 procedure :%pSetSymPtr(:%)
;   136 end procedure -- (for Edita/CtrlQ)
;   137 --*/
;   138 :%pSetSymPtr        -- raw(symtab) := [e/rsi]
;   139 -------------
;   140     [32]
;   141         mov [ds+8],esi      -- (raw addr of symtab[1]:=esi)
                mov [#00402008],esi       ;#00462AE1: 211065 08204000            uv 00 40  1   5      
;   142     [64]
;   143         mov [ds+8],rsi      -- (raw addr of symtab[1]:=rsi)
;   144     []
;   145         ret
                ret                       ;#00462AE7: 303                        np 00 00  2   6      
;   146 
;   147 --/*
;   148 procedure :%opGetST(:%)
;   149 end procedure -- (for Edita/CtrlQ)
;   150 --*/
;   151 --DEV/temp...
;   152 :!opGetST       -- [e/rdi] := symtab
;   153     [32]
;   154         push dword[esp]
                push dword[esp]           ;#00462AE8: 377064044                  np 00 10  2   8      
;   155     [64]
;   156         push qword[rsp]
;   157     []
;   158 :%opGetST       -- [e/rdi] := symtab
;   159 ---------       -- (trashes all registers, if [edi] needs dealloc, else just eax/edx)
;   160     [32]
;   161         mov eax,[ds+8]      -- (eax:=raw addr of symtab[1])
                mov eax,[#00402008]       ;#00462AEB: 213005 08204000            uv 01 00  1  10      
;   162         mov edx,[edi]
                mov edx,[edi]             ;#00462AF1: 213027                     vu 04 80  1  10      
;   163         add dword[eax-8],1  -- inc refcount of symtab
                add dword[eax-8],1        ;#00462AF3: 203100 F8 01               u  00 01  3  13    *01*
;   164         add eax,1           -- \
                add eax,1                 ;#00462AF7: 203300 01                  vu 01 01  1  15      
;   165         ror eax,2           -- / make a #40000000+ ref
                ror eax,2                 ;#00462AFA: 301310 02                  np 01 01  1  16      
;   166         mov [edi],eax
                mov [edi],eax             ;#00462AFD: 211007                     uv 00 81  1  17      
;   167         cmp edx,h4
                cmp edx,h4                ;#00462AFF: 201372 00000040            vu 00 04  1  17      
;   168         jle @f
                jle #00462B12             ;#00462B05: 176 0B                     v  00 00  1  18      
;   169             sub dword[ebx+edx*4-8],1
                    sub dword[ebx+edx*4-8],1  ;#00462B07: 203154223 F8 01            u  00 0C  3  19      
;   170 --          jnz @f
;   171 --          pushad
;   172 ----      if debugmem2
;   173 ----        mov eax,[esp+32]
;   174 ----        mov [dmFera],eax
;   175 ----      end if
;   176 --          push dword[esp+32]
;   177 --          call :%pDealloc0
;   178 --          popad
;   179             jz :%pDealloc
                    jz #004639A8 (:%pDealloc)  ;#00462B0C: 017204 960E0000            v  00 00  1  21      
;   180     [64]
;   181         mov rax,[ds+8]      -- (rax:=raw addr of symtab[1])
;   182         mov rdx,[rdi]
;   183         add qword[rax-16],1 -- inc refcount of symtab
;   184         add rax,1           -- \
;   185         ror rax,2           -- / make a #40000..00+ ref
;   186         mov r15,h4
;   187         mov [rdi],rax
;   188         cmp rdx,r15
;   189         jle @f
;   190             sub qword[rbx+rdx*4-16],1
;   191             jz :%pDealloc
;   192     []
;   193       @@:
;   194         ret
                ret                       ;#00462B12: 303                        np 00 00  2  22      
;   195 
;   196 --/*
;   197 procedure ::newVSB(::)
;   198 end procedure -- (for Edita/CtrlQ)
;   199 --*/
;   200 ::newVSB    -- (called from pNewStack and opFrame)
;   201 --------
;   202     -- Allocate a new page for the virtual stack or re-use vsb_next.
;   203     --
;   204     -- On entry, edi(/rdi) is vsb_root (may be stack00), nowt else matters.
;   205     -- On exit, eax(/rax) is the new ebp_root, ebp is unaltered, as are ecx, ebx, edx, esi, edi.
;   206     --
;   207     [32]
;   208         mov eax,[edi+4]                 -- vsb_next
                mov eax,[edi+4]           ;#00462B13: 213107 04                  uv 01 80  1  24      
;   209         test eax,eax
                test eax,eax              ;#00462B16: 205300                     uv 00 01  1  25 01   
;   210         jnz @f
                jnz #00462B53             ;#00462B18: 165 39                     v  00 00  1  25      
;   211         push ecx                        -- save
                push ecx                  ;#00462B1A: 121                        uv 00 02  1  26      
;   212         push edx                        -- save
                push edx                  ;#00462B1B: 122                        vu 00 04  1  26      
;   213         push esi                        -- save
                push esi                  ;#00462B1C: 126                        uv 00 40  1  27      
;   214         push edi                        -- save (vsb_root)
                push edi                  ;#00462B1D: 127                        vu 00 80  1  27      
;   215         mov ecx,12280
                mov ecx,12280             ;#00462B1E: 271 F82F0000               uv 02 00  1  28      
;   216         call :%pGetPool                 -- sets eax,edx, trashes ecx,esi,edi
                call #004632EA (:%pGetPool)  ;#00462B23: 350 C2070000               v  00 00  1  28      
;   217         pop edi                         -- restore (vsb_root)
                pop edi                   ;#00462B28: 137                        uv 80 00  1  29      
;   218         pop esi                         -- restore
                pop esi                   ;#00462B29: 136                        vu 40 00  1  29      
;   219         pop edx                         -- restore
                pop edx                   ;#00462B2A: 132                        uv 04 00  1  30      
;   220         pop ecx                         -- restore
                pop ecx                   ;#00462B2B: 131                        vu 02 00  1  30      
;   221         test eax,eax
                test eax,eax              ;#00462B2C: 205300                     uv 00 01  1  31      
;   222         jz :trimStackPop
                jz #00462CF9              ;#00462B2E: 017204 C5010000            v  00 00  1  31      
;   223         mov [edi+4],eax                 -- prev_block.vsb_next:=new_block
                mov [edi+4],eax           ;#00462B34: 211107 04                  uv 00 81  1  32      
;   224         mov [eax],edi                   -- new_block.vsb_prev:=prev_block
                mov [eax],edi             ;#00462B37: 211070                     vu 00 81  1  32      
;   225         mov [eax+4],ebx                 -- new_block.vsb_next:=0
                mov [eax+4],ebx           ;#00462B39: 211130 04                  uv 00 09  1  33      
;   226         mov [eax+8],ebx                 -- unused
                mov [eax+8],ebx           ;#00462B3C: 211130 08                  vu 00 09  1  33      
;   227         mov [eax+12],ebx                -- unused
                mov [eax+12],ebx          ;#00462B3F: 211130 0C                  uv 00 09  1  34      
;   228         mov dword[eax+16],#40565342     -- magic ("@VSB")
                mov [eax+16], dword 1079399234  ;#00462B42: 307100 10 42535640         vu 00 01  1  34      
;   229         mov dword[eax+12276],#3C565342  -- magic ("<VSB")
                mov [eax+12276], dword 1012290370  ;#00462B49: 307200 F42F0000 4253563C   uv 00 01  1  35      
;   230       @@:
;   231 --  mov edi,eax
;   232     [64]
;   233         mov rax,[rdi+8]                 -- vsb_next
;   234         test rax,rax
;   235         jnz @f
;   236         push rcx                        -- save
;   237         push rdx                        -- save
;   238         push rsi                        -- save
;   239         push rdi                        -- save (vsb_root)
;   240 --pHeapD:
;   241 --<     mov rcx,9208
;   242         mov rcx,11248
;   243         call :%pGetPool                 -- sets rax,rdx, trashes rcx,rsi,rdi[?]
;   244         pop rdi                         -- restore
;   245         pop rsi                         -- restore
;   246 --  test rax,rax
;   247 --  jz :trimStack
;   248 --< cmp rdx,9208
;   249 --  cmp rdx,11248
;   250 --  jne ???
;   251         pop rdx                         -- restore
;   252         pop rcx                         -- restore
;   253         test rax,rax
;   254         jz :trimStackPop
;   255         mov [rdi+8],rax                 -- set prev_block's vsb_next
;   256         mov [rax],rdi                   -- set new_block's vsb_prev
;   257         mov [rax+8],rbx                 -- set new_block's vsb_next = 0
;   258         mov [rax+16],rbx
;   259         mov [rax+24],rbx
;   260         mov qword[rax+32],#40565342     -- magic ("@VSB")
;   261         mov qword[rax+11240],#3C565342  -- magic ("<VSB")
;   262       @@:
;   263 --  mov rdi,rax
;   264     []
;   265         ret
                ret                       ;#00462B53: 303                        np 00 00  2  36      
;   266 
;   267 --/*
;   268 procedure :%pNewStack(:%)
;   269 end procedure -- (for Edita/CtrlQ)
;   270 --*/
;   271 :%pNewStack     -- (called from :>initStack, :%opInterp, task_yield, and CreateThread [DEV]) [20/1/18 now also cbhand.e]
;   272 ----------
;   273     [32]
;   274         -- first, create a dummy vsb_root (vsb_next,vsb_prev@=0) on the stack
;   275         --DEV edx:=era?
;   276         xor ebx,ebx
                xor ebx,ebx               ;#00462B54: 061333                     uv 08 08  1  38      
;   277 --27/2/15:
;   278 --!     push ecx                -- gvarptr          [DEV]
;   279 --!     push eax                -- symtabptr        [DEV]
;   280         push ebx
                push ebx                  ;#00462B56: 123                        uv 00 08  1  39 08   
;   281         push ebx
                push ebx                  ;#00462B57: 123                        vu 00 08  1  39      
;   282         mov edi,esp
                mov edi,esp               ;#00462B58: 213374                     uv 80 10  1  40      
;   283         call :newVSB            -- allocate a new virtual stack block
                call #00462B13            ;#00462B5A: 350 B4FFFFFF               v  00 00  1  40      
;   284         add esp,8               -- discard that dummy vsb_root
                add esp,8                 ;#00462B5F: 203304 08                  uv 10 10  1  41      
;   285 --      lea esi,[eax+8]         -- new ebp (N=0, [ebp] is <magic> ie "@VSB")
;   286         lea esi,[eax+16]        -- new ebp (N=0, [ebp] is <magic> ie "@VSB")
                lea esi,[eax+16]          ;#00462B62: 215160 10                  vu 40 01  1  41      
;   287         mov [eax],ebx           -- clear new vsb_prev link
                mov [eax],ebx             ;#00462B65: 211030                     uv 00 09  1  42      
;   288         mov [esi+4],ebx         -- N
                mov [esi+4],ebx           ;#00462B67: 211136 04                  uv 00 48  1  44    *40*
;   289         mov dword[esi+8],21     -- routine being called (T_maintls)
                mov [esi+8], dword 21     ;#00462B6A: 307106 08 15000000         vu 00 40  1  44      
;   290         mov [esi+12],ebx        -- called from address (0)  [DEV remove?]
                mov [esi+12],ebx          ;#00462B71: 211136 0C                  uv 00 48  1  45      
;   291 --EXCEPT
;   292 --X     mov [esi+16],ebx        -- return address (0)
;   293         mov [esi+16],ebx        -- exception handler (0)
                mov [esi+16],ebx          ;#00462B74: 211136 10                  vu 00 48  1  45      
;   294         mov [esi+20],ebx        -- prev_ebp
                mov [esi+20],ebx          ;#00462B77: 211136 14                  uv 00 48  1  46      
;   295         mov [esi+24],eax        -- vsb_root
                mov [esi+24],eax          ;#00462B7A: 211106 18                  vu 00 41  1  46      
;   296         mov [esi+28],ebx        -- return address (0)
                mov [esi+28],ebx          ;#00462B7D: 211136 1C                  uv 00 48  1  47      
;   297         mov ebp,esi
                mov ebp,esi               ;#00462B80: 213356                     vu 20 40  1  47      
;   298     [64]
;   299         -- first, create a dummy vsb_root (vsb_next,vsb_prev@=0) on the stack
;   300         --DEV rdx:=era?
;   301         xor rbx,rbx
;   302         mov r15,h4
;   303 --27/2/15:
;   304 --      push rcx                -- gvarptr
;   305 --      push rax                -- symtabptr
;   306         push rbx
;   307         push rbx
;   308         mov rdi,rsp
;   309         call :newVSB            -- allocate a new virtual stack block
;   310         add rsp,16              -- discard that dummy vsb_root
;   311 --      add rsp,32              -- discard that dummy vsb_root
;   312 --      lea rsi,[rax+16]        -- new ebp (N=0, [ebp] is <magic> ie "@VSB")
;   313         lea rsi,[rax+32]        -- new ebp (N=0, [ebp] is <magic> ie "@VSB")
;   314         mov [rax],rbx           -- clear new vsb_prev link
;   315         mov [rsi+8],rbx         -- N
;   316         mov qword[rsi+16],21    -- routine being called
;   317         mov [rsi+24],rbx        -- called from address (0)
;   318 --EXCEPT
;   319 --X     mov [rsi+32],rbx        -- return address (0)
;   320         mov [rsi+32],rbx        -- exception handler (0)
;   321         mov [rsi+40],rbx        -- prev_ebp
;   322         mov [rsi+48],rax        -- vsb_root
;   323         mov [rsi+56],rbx        -- return address (0)
;   324         mov rbp,rsi
;   325     []
;   326         ret
                ret                       ;#00462B82: 303                        np 00 00  2  48      
;   327 
;   328 --/*
;   329 procedure :>initStack(:>)
;   330 end procedure -- (for Edita/CtrlQ)
;   331 --*/
;   332 :>initStack
;   333 -----------
;   334         cmp [sinit],0
                cmp dword[#00402168] (sinit),0  ;#00462B83: 203075 68214000 00         u  00 00  2  50      
;   335         jne :dont_do_everything_twice
                jne #00462C00             ;#00462B8A: 165 74                     v  00 00  1  51      
;   336         mov [sinit],1
                mov [#00402168] (sinit), dword 1  ;#00462B8C: 307005 68214000 01000000   uv 00 00  1  52      
;   337 
;   338     [PE32,ELF32,ELF64]  -- (not PE64) [DEV try without this...]
;   339         call :>initFEH
                call #0046296B (:>initFEH)  ;#00462B96: 350 D0FDFFFF               v  00 00  1  52      
;   340     [32]
;   341         call :%pNewStack
                call #00462B54 (:%pNewStack)  ;#00462B9B: 350 B4FFFFFF               v  00 00  1  53      
;   342 --15/9/16:
;   343         mov edx,ebp             -- edx:=ebp
                mov edx,ebp               ;#00462BA0: 213325                     uv 04 20  1  54      
;   344         call :%pSetSaveEBP      -- (eax<-pTCB.SaveEBP<-edx, all regs trashed)
                call #0046305B (:%pSetSaveEBP)  ;#00462BA2: 350 B4040000               v  00 00  1  54      
;   345 
;   346 --EXCEPT
;   347 --X     mov dword[ebp+16],:Exit0    -- return address (0)
;   348         mov dword[ebp+28],:Exit0    -- return address (0)
                mov [ebp+28] (retaddr),#00462E89  ;#00462BA7: 307105 1C 892E4600         uv 00 20  1  55      
;   349     [ELF32] -- save esp for command line ... (assumes it is undamaged)  [DEV not interpret?]
;   350         mov eax,esp
;   351         shr eax,2
;   352         mov [pArg],eax
;   353 --/*
;   354     [ARM]
;   355         mov r0,sp
;   356         shr r0,2
;   357         lea r1,[pArg]
;   358 --      mov [r1],r0
;   359         str r0,[r1]
;   360 --*/
;   361     [64]
;   362         call :%pNewStack
;   363 
;   364 --DEV (spotted in passing) wot, no pSetSaveEBP?
;   365 
;   366 --EXCEPT
;   367 --X     mov qword[rbp+32],:Exit0    -- return address (0)
;   368         mov qword[rbp+56],:Exit0    -- return address (0)
;   369     [ELF64]
;   370 --/*
;   371 DEV/In case it is useful, from flatassembler.net:
;   372 yes, that's right 
;   373 if you try to load ELF64 under debugger, you can find how and why 
;   374 in ELF64 created directly by FASM you get args in the stack 
;   375 dword [rsp]=argc 
;   376 qword [rsp+8]=pointer to arg0 
;   377 ... 
;   378 qword [rsp+8 + argc*8]=0 end of args 
;   379 qword [rsp+8 + argc*8 + 8]=pointer to first string of environment 
;   380 ... 
;   381 qword [...]=0 end of envirnment 
;   382 --*/
;   383         mov rax,rsp
;   384         shr rax,2
;   385         mov [pArg],rax
;   386 
;   387         -- and any dll ref relocations (after pNewStack has zeroed e/rbx!):
;   388 
;   389     [32]
;   390         mov esi,[ds+12]     -- relocs
                mov esi,[#0040200C]       ;#00462BAE: 213065 0C204000            vu 40 00  1  55      
;   391         test esi,esi
                test esi,esi              ;#00462BB4: 205366                     uv 00 40  1  56      
;   392         jz :loopend
                jz #00462C00              ;#00462BB6: 164 48                     v  00 00  1  56      
;   393         mov [ds+12],ebx
                mov [#0040200C],ebx       ;#00462BB8: 211035 0C204000            uv 00 08  1  57      
;   394     [64]
;   395         mov rsi,[ds+16]     -- relocs
;   396         test rsi,rsi
;   397         jz :loopend
;   398         mov [ds+16],rbx
;   399         --
;   400         -- So this must be a dll/so, first time.
;   401         -- The relocs table is in packed offset delta format:
;   402         --  bytes 4..255 are offset deltas (two refs cannot overlap, and a
;   403         --        constant sequence of length N causes N-1 4/8's to occur,
;   404         --        at least, that is, when every element of it is a ref)
;   405         --  3 is unused/illegal (no dll data segment is ever >4GB!)
;   406         --  2 means a word (16-bit) offset delta follows,
;   407         --  1 means a dword (32-bit) offset delta follows,
;   408         --  0 means end of table.
;   409         -- There should be no fixed literal refs anywhere in the code section.
;   410         --  (ie pilx86.e should avoid isConstRef and similar when DLL=1)
;   411         --
;   412     [32]
;   413         lea edi,[ds+0]      -- base (addr sigPhx)
                lea edi,[#00402000]       ;#00462BBE: 215075 00204000            vu 80 00  1  57      
;   414         mov edx,esi
                mov edx,esi               ;#00462BC4: 213326                     uv 04 40  1  58      
;   415         sub edx,[esi-4]     -- a non-relocated address...
                sub edx,[esi-4]           ;#00462BC6: 053126 FC                  uv 04 44  2  59 04   
;   416         xor eax,eax
                xor eax,eax               ;#00462BC9: 061300                     vu 01 01  1  60      
;   417         shr edx,2           --> ref fixup value (add to all refs)
                shr edx,2                 ;#00462BCB: 301352 02                  u  04 04  1  61      
;   418     ::looptop
;   419         lodsb
                lodsb                     ;#00462BCE: 254                        np 41 40  2  62      
;   420         cmp al,4
                cmp al,4                  ;#00462BCF: 200370 04                  uv 00 01  1  64      
;   421         jb @f
                jb #00462BDB              ;#00462BD2: 162 07                     v  00 00  1  64      
;   422             add dword[edi+eax],edx
                    add [edi+eax],edx     ;#00462BD4: 001024007                  uv 00 85  3  65      
;   423             add edi,eax
                    add edi,eax           ;#00462BD7: 001307                     vu 80 81  1  67      
;   424             jmp looptop
                    jmp #00462BCE         ;#00462BD9: 353 F3                     v  00 00  1  68      
;   425       @@:
;   426         cmp al,3
                cmp al,3                  ;#00462BDB: 200370 03                  uv 00 01  1  69      
;   427         jne @f
                jne #00462BE1             ;#00462BDE: 165 01                     v  00 00  1  69      
;   428             int3
                    int3                  ;#00462BE0: 314                        np 00 00 13  70      
;   429       @@:
;   430         cmp al,2
                cmp al,2                  ;#00462BE1: 200370 02                  uv 00 01  1  83      
;   431         jne @f
                jne #00462BF1             ;#00462BE4: 165 0B                     v  00 00  1  83      
;   432             lodsw
                    lodsw                 ;#00462BE6: 146:255                    np 41 40  2  84      
;   433             add dword[edi+eax],edx
                    add [edi+eax],edx     ;#00462BE8: 001024007                  uv 00 85  3  87    *01*
;   434             add edi,eax
                    add edi,eax           ;#00462BEB: 001307                     vu 80 81  1  89      
;   435             xor eax,eax
                    xor eax,eax           ;#00462BED: 061300                     uv 01 01  1  90      
;   436             jmp looptop
                    jmp #00462BCE         ;#00462BEF: 353 DD                     v  00 00  1  90      
;   437       @@:
;   438         cmp al,1
                cmp al,1                  ;#00462BF1: 200370 01                  uv 00 01  1  91      
;   439         jne loopend
                jne #00462C00             ;#00462BF4: 165 0A                     v  00 00  1  91      
;   440             lodsd
                    lodsd                 ;#00462BF6: 255                        np 41 40  2  92      
;   441             add dword[edi+eax],edx
                    add [edi+eax],edx     ;#00462BF7: 001024007                  uv 00 85  3  95    *01*
;   442             add edi,eax
                    add edi,eax           ;#00462BFA: 001307                     vu 80 81  1  97      
;   443             xor eax,eax
                    xor eax,eax           ;#00462BFC: 061300                     uv 01 01  1  98      
;   444             jmp looptop
                    jmp #00462BCE         ;#00462BFE: 353 CE                     v  00 00  1  98      
;   445       ::loopend
;   446     [64]
;   447         lea rdi,[ds+0]      -- base (addr sigPhx)
;   448         mov rdx,rsi
;   449         sub rdx,[rsi-4]     -- a non-relocated address...
;   450         xor rax,rax
;   451         shr rdx,2           --> ref fixup value (add to all refs)
;   452     ::looptop
;   453         lodsb
;   454         cmp al,8
;   455         jb @f
;   456             add qword[rdi+rax],rdx
;   457             add rdi,rax
;   458             jmp looptop
;   459       @@:
;   460         cmp al,3
;   461         jb @f
;   462             -- deltas of 3..7 are all illegal on 64-bit
;   463             int3
;   464 --          lodsq
;   465 --          add qword[rdi+rax],rdx
;   466 --          add rdi,rax
;   467 --          xor rax,rax
;   468 --          jmp looptop
;   469       @@:
;   470         cmp al,2
;   471         jne @f
;   472             lodsw
;   473             add qword[rdi+rax],rdx
;   474             add rdi,rax
;   475             xor rax,rax
;   476             jmp looptop
;   477       @@:
;   478         cmp al,1
;   479         jne loopend
;   480             lodsd
;   481             add qword[rdi+rax],rdx
;   482             add rdi,rax
;   483             xor rax,rax
;   484             jmp looptop
;   485       ::loopend
;   486     []
;   487 
;   488       ::dont_do_everything_twice
;   489         ret
                ret                       ;#00462C00: 303                        np 00 00  2  99      
;   490 
;   491 --/*
;   492 procedure :%opGetArg(:%)
;   493 end procedure -- (for Edita/CtrlQ)
;   494 --*/
;   495 :%opGetArgELF       -- (meaningless on PE/WINDOWS)
;   496 -------------
;   497     [ELF32]
;   498 --:%opGetArgELF32
;   499         mov eax,[pArg]
;   500     [ELF64]
;   501 --:%opGetArgELF64
;   502         mov rax,[pArg]
;   503 --/*
;   504     [ARM]
;   505         lea r0,[pArg]
;   506         mov r0,[r0]
;   507 --*/
;   508     []
;   509         ret
                ret                       ;#00462C01: 303                        np 00 00  2 101      
;   510 
;   511 --makeFrameX:
;   512 --  mov esi,[esp]       -- grab a copy of the "called from" address, for use in debug reporting
;   513 --                      -- (note the "return address" may be branch straightened to miles away)
;   514 
;   515 --/*
;   516 procedure :%opFrame(:%)
;   517 end procedure -- (for Edita/CtrlQ)
;   518 --*/
;   519 :%opFrame
;   520 ---------
;   521     [32]
;   522         -- new style vsb:
;   523         --  vsb_next
;   524         --  vsb_prev
;   525         --  spare (was symtabptr)
;   526         --  spare (was gvarptr)
;   527         --  magic == #40565342 aka "@VSB"
;   528         --  <frames in next 12280-24 bytes>
;   529         --  magic == #3C565342 aka "<VSB"
;   530         --
;   531         -- new style frame: (see above)
;   532         --  items N..2              [ebp-n*4] (p2 is at [ebp-4], p3 at [ebp-8], etc)
;   533         --ebp:
;   534         --  item 1                  [ebp]   p1 (may not exist)
;   535         --  N                       [ebp+4] number of parameters and locals (may be 0)
;   536         --  routine being called    [ebp+8] (there is no longer a calling routine)
;   537         --  called from addr        [ebp+12] (see note below)
;   538 --EXCEPT
;   539 --X     --  return address          [ebp+16] (0 means callback)
;   540         --  exception handler       [ebp+16] (0 means none, 1 means lower down)
;   541         --  prev_ebp                [ebp+20] (0 means top-level quit)
;   542         --  vsb_root                [ebp+24]
;   543         --  return address          [ebp+28] (0 means callback)
;   544         --
;   545         --  Obviously, if N [ebp+4] is zero, then [ebp] is magic/vsb_root of previous frame
;   546         --              and should not be read let alone overwritten.
;   547         --
;   548         -- On Entry, ecx is number of parameters and locals
;   549         --           edx is routineNo to call (nb was edi) (a symtab index)
;   550         --           [esp] is "called from" addr 
;   551         -- On Exit, eax is h4,
;   552         --          ebx is 0, (as usual)
;   553         --          ecx is 0,
;   554 --      --              edx is threadstack (==[ebp+28]) [DEV???]
;   555         --          edx is still routineNo
;   556         --          esi is ebp-N*4 or thereabouts
;   557         --          edi is prev_ebp (==[ebp+20])
;   558         --  Note "return address"=="called from" is correct for opCallOnce and opTChk, 
;   559         --       but replaced after all direct calls to :%opFrame from "normal" code,
;   560 --EXCEPT
;   561 --X     --       via a mov dword[ebp+16],imm32 instruction.
;   562         --       via a mov dword[ebp+28],imm32 instruction.
;   563 --      push esi                    -- save called from addr (we ran out of registers!)
;   564 -- ::makeFrameX [DEV killme]
;   565         mov edi,[ebp+24]            -- vsb_root
                mov edi,[ebp+24]          ;#00462C02: 213175 18                  uv 80 20  1 103      
;   566 --DEV test:
;   567 --cmp dword[edi+16],#40565342   -- magic ("@VSB")
;   568 --je @f
;   569 --  int3
;   570 --@@:
;   571 --cmp dword[edi+12276],#3C565342    -- magic ("<VSB")
;   572 --je @f
;   573 --  int3
;   574 --@@:
;   575 --  lea esi,[ebp+ecx*4+36]      -- new ebp (provisional!)   
;   576 --EXCEPT
;   577 --X     lea esi,[ebp+ecx*4+28]      -- new ebp (provisional!)   
;   578         lea esi,[ebp+ecx*4+32]      -- new ebp (provisional!)   
                lea esi,[ebp+ecx*4+32]    ;#00462C05: 215164215 20               vu 40 22  1 103      
;   579 
;   580 -- if (newebp+28)<=(vsb_root+12280) then frame fits OK in current virtual stack block
;   581 -- if [ebp+ecx*4+28+28-12280]<=edi
;   582 -- if [ebp+ecx*4-12224]<=edi
;   583 --DEV I am sure we can simplify this, to say esi<=edi+12224-36, try the following:
;   584 --      lea eax,[ebp+ecx*4-12224]
;   585 --      cmp eax,edi                 -- check space
;   586 --EXCEPT
;   587 --      lea eax,[edi+12248] -- (12280-32 = 12248)       (DEV AGI)
;   588 --      lea eax,[edi+12244] -- (12280-36 = 12244)       (DEV AGI)
;   589         lea eax,[edi+12240] -- (12280-36 = 12244)       (DEV AGI)
                lea eax,[edi+12240]       ;#00462C09: 215207 D02F0000            uv 01 80  1 106    *80*
;   590         cmp esi,eax         -- (if newebp > vsb_root+12280-32 then newVSB)
                cmp esi,eax               ;#00462C0F: 071306                     uv 00 41  1 107 01   
;   591         jle @f
                jle #00462C1E             ;#00462C11: 176 0B                     v  00 00  1 107      
;   592 --DEV (untried)
;   593 --        push edx
;   594 --        mov edx,[esp+4]
;   595           call :newVSB              -- sets eax (new vsb_root)
                  call #00462B13          ;#00462C13: 350 FBFEFFFF               v  00 00  1 108      
;   596 --        pop edx
;   597           mov edi,eax
                  mov edi,eax             ;#00462C18: 213370                     uv 80 01  1 109      
;   598           lea esi,[eax+ecx*4+16]    -- new ebp (for N=0, [ebp] is <magic> ie "@VSB")
                  lea esi,[eax+ecx*4+16]  ;#00462C1A: 215164210 10               vu 40 03  1 109      
;   599         @@:
;   600         xor ebx,ebx
                xor ebx,ebx               ;#00462C1E: 061333                     uv 08 08  1 110      
;   601         mov eax,[esp]               -- called from address
                mov eax,[esp]             ;#00462C20: 213004044                  vu 01 10  1 110      
;   602         mov [esi+4],ecx             -- N
                mov [esi+4],ecx           ;#00462C23: 211116 04                  uv 00 42  1 111      
;   603 cmp [ebp+16],ebx
        cmp [ebp+16],ebx                  ;#00462C26: 071135 10                  vu 00 28  2 111      
;   604         mov [esi+8],edx             -- routine being called
                mov [esi+8],edx           ;#00462C29: 211126 08                  uv 00 44  1 112      
;   605 setne bl
        setne bl                          ;#00462C2C: 017225303                  np 08 00  2 113      
;   606         mov [esi+12],eax            -- called from address
                mov [esi+12],eax          ;#00462C2F: 211106 0C                  uv 00 41  1 115      
;   607 --EXCEPT
;   608 --X     mov [esi+16],eax            -- return address (see note above)
;   609         mov [esi+16],ebx            -- exception handler (0/1)
                mov [esi+16],ebx          ;#00462C32: 211136 10                  vu 00 48  1 115      
;   610 --mov edx,[ebp+16]
;   611         mov [esi+20],ebp            -- prev_ebp
                mov [esi+20],ebp          ;#00462C35: 211156 14                  uv 00 60  1 116      
;   612 xor ebx,ebx
        xor ebx,ebx                       ;#00462C38: 061333                     vu 08 08  1 116      
;   613         mov [esi+24],edi            -- vsb_root
                mov [esi+24],edi          ;#00462C3A: 211176 18                  uv 00 C0  1 117      
;   614         mov [esi+28],eax            -- return address (see note above)
                mov [esi+28],eax          ;#00462C3D: 211106 1C                  vu 00 41  1 117      
;   615 --DEV test:
;   616 --lea edx,[edi+12276]
;   617         mov eax,h4
                mov eax,h4                ;#00462C40: 270 00000040               uv 01 00  1 118      
;   618         mov edi,esi
                mov edi,esi               ;#00462C45: 213376                     vu 80 40  1 118      
;   619         std
                std                       ;#00462C47: 375                        np 00 00  2 119      
;   620         rep stosd                   -- (while ecx-- do mov[edi--],eax)
                rep stosd                 ;#00462C48: 363:253                    np 82 83  3 123    *80*
;   621         cld
                cld                       ;#00462C4A: 374                        np 00 00  2 126      
;   622         mov edi,ebp
                mov edi,ebp               ;#00462C4B: 213375                     uv 80 20  1 128      
;   623         mov ebp,esi
                mov ebp,esi               ;#00462C4D: 213356                     vu 20 40  1 128      
;   624 --cmp dword[edx],#3C565342
;   625 --je @f
;   626 --  int3
;   627 --@@:
;   628     [64]
;   629         -- new style vsb:
;   630         --  vsb_next
;   631         --  vsb_prev
;   632         --  spare (was symtabptr)
;   633         --  spare (was gvarptr)
;   634         --  magic == #40565342 aka "@VSB" (plus dword 0 padding)
;   635         --  <frames in next 11248-48 bytes>
;   636         --  magic == #3C565342 aka "<VSB" (plus dword 0 padding)
;   637         --
;   638         -- new style frame: (see above)
;   639         --  items N..2              [rbp-n*8] (p2 is at [rbp-8], p3 at [rbp-16], etc)
;   640         --rbp:
;   641         --  item 1                  [rbp]   p1 (may not exist)
;   642         --  N                       [rbp+8] number of parameters and locals (may be 0)
;   643         --  routine being called    [rbp+16] (there is no longer a calling routine)
;   644         --  called from addr        [rbp+24] (see note below)   [DEV remove??]
;   645 --EXCEPT
;   646 --X     --  return address          [rbp+32] (0 means callback)
;   647         --  exception handler       [rbp+32] (0 means none, 1 means lower down)
;   648         --  prev_ebp                [rbp+40] (0 means top-level quit)
;   649         --  vsb_root                [rbp+48]
;   650         --  return address          [rbp+56] (0 means callback)
;   651         --
;   652         --  Obviously, if N [rbp+8] is zero, then [rbp] is magic/vsb_root of previous frame
;   653         --              and should not be read let alone overwritten.
;   654         --
;   655         -- On Entry, rcx is number of parameters and locals (N, >=0)
;   656         --           rdx is routineNo to call (a symtab index)
;   657         --           [rsp] is "called from" addr 
;   658         -- On Exit, rax is h4,
;   659         --          rbx is 0, (as usual)
;   660         --          rcx is 0,
;   661         --          rdx is still routineNo
;   662         --          rsi is rbp-N*8 or thereabouts
;   663         --          rdi is prev_ebp (==[rbp+40])
;   664         --          rbp is the new frame, such that [rbp+8] is N, 
;   665         --                                          [rbp+16] is routine no, etc
;   666         --  Note "return address"=="called from" is correct for opCallOnce and opTChk, 
;   667         --       but replaced after all direct calls to :%opFrame from "normal" code,
;   668         --       via a mov dword[rbp+32],imm32 instruction. [DEV check this]
;   669 --  push rsi                    -- save called from addr (we ran out of registers!)
;   670 --      mov r12,rsi                 -- save called from addr
;   671 -- ::makeFrameX
;   672         mov rdi,[rbp+48]            -- vsb_root
;   673 --DEV test:
;   674 --cmp qword[rdi+32],#40565342   -- magic ("@VSB")
;   675 --je @f
;   676 --  int3
;   677 --@@:
;   678 --cmp qword[rdi+11240],#3C565342    -- magic ("<VSB")
;   679 --je @f
;   680 --  int3
;   681 --@@:
;   682 
;   683 --EXCEPT
;   684 --X     lea rsi,[rbp+rcx*8+56]      -- new ebp (provisional!)  --DEV try this again!
;   685         lea rsi,[rbp+rcx*8+64]      -- new ebp (provisional!)  --DEV try this again!
;   686 
;   687 --      shl rsi,2               --DEV? shl rsi,1??
;   688 --      add rsi,rbp                 -- new ebp (provisional!)
;   689 -- if (newebp+56)<=(vsb_root+9208) then frame fits OK in current virtual stack block
;   690 -- if [rbp+rcx*8+56+56-9208]<=rdi
;   691 -- if [rbp+rcx*8-9096]<=rdi
;   692 --      lea r13,[rbp+rcx*8-9096]        --DEV try this again!
;   693 -- if (newebp+56)<=(vsb_root+11248) then frame fits OK in current virtual stack block
;   694 -- if [rbp+rcx*8+56+56-11248]<=rdi
;   695 -- if [rbp+rcx*8-11136]<=rdi
;   696 --      lea r13,[rbp+rcx*8-11136]       --DEV try this again!
;   697 --pHeapD: (9208->11248)
;   698 --      lea r13,[rbx+rcx*4-4548]
;   699 --      lea r13,[rbx+rcx*4-4548?!]
;   700 --x!    shl r13,2   -- (spotted in passing!)
;   701 --      shl r13,1
;   702 --      add r13,rbp                 
;   703 --      cmp r13,rdi                 -- check space
;   704 --DEV I am sure we can simplify this, to say rsi<=rdi+9208-56, try the following: (after updating the numbers!)
;   705 --  lea rax,[rdi+9152]  -- (9208-56 = 9152)
;   706 --      lea rax,[rdi+9152]  -- (9208-56 = 9152)
;   707 --      lea rax,[rdi+11080] -- (11248-56 = 11080!)
;   708 --EXCEPT
;   709 --      lea rax,[rdi+11184] -- (11248-64 = 11184)       (DEV AGI)
;   710 --      lea rax,[rdi+11176] -- (11248-72 = 11176)       (DEV AGI)
;   711         lea rax,[rdi+11168] -- (11248-72 = 11176)       (DEV AGI)
;   712 --      cmp rsi,rax         -- (if newebp > vsb_root+9208-56 then newVSB)
;   713         cmp rsi,rax         -- (if newebp > vsb_root+11248-64 then newVSB)
;   714         jle @f
;   715 --DEV (untried)
;   716 --        push rdx
;   717 --        mov rdx,[rsp+8]
;   718           call :newVSB              -- sets rax (new vsb_root)
;   719 --        pop rdx
;   720           mov rdi,rax
;   721 --DEV have I gone mad here?
;   722           lea rsi,[rax+rcx*8+32]    -- new ebp (for N=0, [ebp] is <magic> ie "@VSB")
;   723 --        lea rsi,[rbx+rcx*4+8]
;   724 --        lea rsi,[rbx+rcx*4+16]
;   725 --x!      shl rsi,2 -- (ditto)
;   726 --        shl rsi,1
;   727 --        add rsi,rax
;   728       @@:
;   729 --  xor rbx,rbx
;   730 --  pop eax                     -- called from address
;   731         mov rax,[rsp]               -- called from address
;   732         mov [rsi+8],rcx             -- N
;   733 cmp [rbp+32],rbx
;   734         mov [rsi+16],rdx            -- routine being called
;   735 setne bl
;   736         mov [rsi+24],rax            -- called from address
;   737 --EXCEPT
;   738 --X     mov [rsi+32],rax            -- return address (see note above)
;   739         mov [rsi+32],rbx            -- exception handler
;   740         mov [rsi+40],rbp            -- prev_ebp
;   741 xor rbx,rbx
;   742         mov [rsi+48],rdi            -- vsb_root
;   743         mov [rsi+56],rax            -- return address (see note above)
;   744 --DEV test: (removed 6/3/16 - NB callback error handling now relies on rdx being preserved)
;   745 --lea rdx,[rdi+11240]
;   746         mov rax,h4
;   747         mov rdi,rsi
;   748         std
;   749         rep stosq                   -- (while rcx-- do mov[rdi--],rax)
;   750         cld
;   751         mov rdi,rbp
;   752         mov rbp,rsi
;   753 --cmp qword[rdx],#3C565342
;   754 --je @f
;   755 --  int3
;   756 --@@:
;   757 --      mov qword[rax+11240],#3C565342  -- magic ("<VSB")
;   758     []
;   759         ret
                ret                       ;#00462C4F: 303                        np 00 00  2 129      
;   760 
;   761 --/*
;   762 procedure :%opCallOnce(:%)
;   763 end procedure -- (for Edita/CtrlQ)
;   764 --*/
;   765 :%opCallOnce
;   766 ------------
;   767 --
;   768 -- Used for top level subroutine (tls) calls. A tls is created for each and every 
;   769 -- include file, with the one for the main file living in symtab[T_maintls(=21)],
;   770 -- which is the only one never invoked via :%pCallOnce. The compiler will however
;   771 -- try to optimise them away, if it turns out that all they do is invoke opRetf.
;   772 -- Effectively, the "include" statement generates an opCallOnce in the 'calling tls'.
;   773 -- Eg inc0.exw includes inc0b.e, and the [top-level] code from inc0b.e ends up
;   774 -- in symtab[362] so symtab[T_maintls] contains {...opCallOnce,362...}.
;   775 -- See also file:../docs/pfeat.htm#fwdDZ and the section after that.
;   776 -- A tls routine is parameterless, opCallOnce is opFrame+opCall rolled into one.
;   777 --
;   778 -- opCallOnce may also be used when invoking a forward (global) routine, to try and
;   779 -- ensure that any top-level initialisation in the include file has been done.
;   780 --
;   781     [32]
;   782         -- routine no passed in edi, all registers trashed
;   783         mov edx,[ds+8]              -- symtabptr
                mov edx,[#00402008]       ;#00462C50: 213025 08204000            uv 04 00  1 131      
;   784         xor ebx,ebx
                xor ebx,ebx               ;#00462C56: 061333                     vu 08 08  1 131      
;   785 --DEV try nop nop
;   786         mov edx,[edx+edi*4-4]       -- symtab[edi]              (AGI unavoidable... unless fixup does it!)
                mov edx,[edx+edi*4-4]     ;#00462C58: 213124272 FC               uv 04 84  1 134    *04*
;   787 --DEV try nop nop nop
;   788 --6/7/17:
;   789 --      mov eax,[ebx+edx*4+12]      -- symtab[edi][S_State=4]   (AGI unavoidable...)
;   790 --      mov ecx,[ebx+edx*4+40]      -- symtab[edi][S_il=11] - execute after makeFrame
;   791 --      test eax,#800               -- K_ran
;   792 --      jnz :justRetX               -- already called!
;   793 --      pop esi                     -- return address === called from addr
;   794 --      add eax,#800
;   795 --      push ecx                    -- symtab[edi][S_il] - execute after makeFrame
;   796 --      mov [ebx+edx*4+12],eax      -- update symtab[edi][S_State]
;   797         mov ecx,[ebx+edx*4+12]      -- symtab[edi][S_State=4]   (AGI unavoidable...)
                mov ecx,[ebx+edx*4+12]    ;#00462C5C: 213114223 0C               uv 02 0C  1 137 04 *04*
;   798         mov eax,[ebx+edx*4+40]      -- symtab[edi][S_il=11] - execute after makeFrame
                mov eax,[ebx+edx*4+40]    ;#00462C60: 213104223 28               vu 01 0C  1 137      
;   799         test ecx,#800               -- K_ran
                test ecx,2048             ;#00462C64: 367301 00080000            uv 00 02  1 138      
;   800         jnz :justRetX               -- already called!
                jnz #00462C8E             ;#00462C6A: 165 22                     v  00 00  1 138      
;   801         pop esi                     -- return address === called from addr
                pop esi                   ;#00462C6C: 136                        uv 40 00  1 139      
;   802         add ecx,#800
                add ecx,2048              ;#00462C6D: 201301 00080000            vu 02 02  1 139      
;   803 --      push ecx                    -- symtab[edi][S_il] - execute after makeFrame
;   804         mov [ebx+edx*4+12],ecx      -- update symtab[edi][S_State]
                mov [ebx+edx*4+12],ecx    ;#00462C73: 211114223 0C               uv 00 0E  1 140      
;   805         call :%pLoadMint    
                call #0046393E (:%pLoadMint)  ;#00462C77: 350 C20C0000               v  00 00  1 140      
;   806         push eax
                push eax                  ;#00462C7C: 120                        uv 00 01  1 141      
;   807 --<6/7/17 ends>
;   808         xor ecx,ecx                 -- no of params (0)
                xor ecx,ecx               ;#00462C7D: 061311                     vu 02 02  1 141      
;   809         mov edx,edi
                mov edx,edi               ;#00462C7F: 213327                     uv 04 80  1 142      
;   810         push esi
                push esi                  ;#00462C81: 126                        vu 00 40  1 142      
;   811         call :%opFrame
                call #00462C02 (:%opFrame)  ;#00462C82: 350 7BFFFFFF               v  00 00  1 143      
;   812         pop eax                     -- called from address (was esi)
                pop eax                   ;#00462C87: 130                        uv 01 00  1 144      
;   813         mov [esi+12],eax            -- called from address
                mov [esi+12],eax          ;#00462C88: 211106 0C                  uv 00 41  1 145 01   
;   814 --EXCEPT
;   815 --X     mov [esi+16],eax            -- return address (see note above)
;   816         mov [esi+28],eax            -- return address (see note above)
                mov [esi+28],eax          ;#00462C8B: 211106 1C                  vu 00 41  1 145      
;   817 --      add esp,4
;   818     [64]
;   819         -- routine no passed in rdi, all registers trashed
;   820         mov rdx,[ds+8]              -- symtabptr
;   821         xor rbx,rbx
;   822 --DEV try nop nop
;   823         mov rdx,[rdx+rdi*8-8]       -- symtab[rdi]              (AGI unavoidable... unless fixup does it!)
;   824 --!     mov rdx,[rdx+r12]
;   825 --DEV try nop nop nop
;   826 --6/7/17:
;   827 --      mov rax,[rbx+rdx*4+24]      -- symtab[rdi][S_State=4]   (AGI unavoidable...)
;   828 --      mov rcx,[rbx+rdx*4+80]      -- symtab[rdi][S_il=11] - execute after makeFrame
;   829 --      test rax,#800               -- K_ran
;   830 --      jnz :justRetX               -- already called!
;   831 --      pop rsi                     -- return address === called from addr
;   832 --      add rax,#800
;   833 --      push rcx                    -- symtab[rdi][S_il] - execute after makeFrame
;   834 --      mov [rbx+rdx*4+24],rax      -- update symtab[rdi][S_State]
;   835         mov rcx,[rbx+rdx*4+24]      -- symtab[rdi][S_State=4]   (AGI unavoidable...)
;   836         mov rax,[rbx+rdx*4+80]      -- symtab[rdi][S_il=11] - execute after makeFrame
;   837         test rcx,#800               -- K_ran
;   838         jnz :justRetX               -- already called!
;   839         pop rsi                     -- return address === called from addr
;   840         add rcx,#800
;   841 --      push rcx                    -- symtab[rdi][S_il] - execute after makeFrame
;   842         mov [rbx+rdx*4+24],rcx      -- update symtab[rdi][S_State]
;   843         call :%pLoadMint    
;   844         push rax
;   845 --<6/7/17 ends>
;   846         xor rcx,rcx                 -- no of params (0)
;   847         mov rdx,rdi
;   848         push rsi
;   849         call :%opFrame
;   850         pop rax                     -- called from address (was rsi)
;   851         mov [rsi+24],rax            -- called from address
;   852 --EXCEPT
;   853 --X     mov [rsi+32],rax            -- return address (see note above)
;   854         mov [rsi+56],rax            -- return address (see note above)
;   855 --      add rsp,8
;   856     []
;   857       ::justRetX
;   858         ret
                ret                       ;#00462C8E: 303                        np 00 00  2 146      
;   859 
;   860 --      jmp :%opFrame
;   861 
;   862 
;   863 --DEV sweeeeeeet! (untested) (can now patch [S_State]+=K_ran for {opRetf} jobs as well)
;   864 --  -- edi is routine no
;   865 --  -- edx is raw symtab[edi] as well
;   866 --  mov eax,[edx+12]            -- symtab[edi][S_State=4]       (AGI unavoidable...)
;   867 --  mov ecx,[edx+40]            -- symtab[edx][S_il=11] - execute after makeFrame
;   868 --  test eax,#800               -- K_ran
;   869 --  jnz @f                      -- already called!
;   870 --  pop esi                     -- return address === called from addr
;   871 --  add eax,#800
;   872 --  push ecx                    -- symtab[edx][S_il] - execute after makeFrame
;   873 --  mov [edx+12],eax            -- update S_State
;   874 --  xor ecx,ecx                 -- no of params (0)
;   875 --  xor eax,eax                 -- addr 1st (n/a)
;   876 --  jmp makeFrame               -- (esi,edi already set)
;   877 --  @@:
;   878 --  ret
;   879 
;   880 --/*
;   881 procedure :%opRetf(:%)
;   882 end procedure -- (for Edita/CtrlQ)
;   883 --*/
;   884 :%opRetf
;   885 --------
;   886 --nb must preserve eax/rax
;   887 -- new style vsb:
;   888 --  items N..2
;   889 --ebp: // so p1 is at [ebp], p2 at [ebp-4] etc...
;   890 --  item 1
;   891 --  N                       +4
;   892 --  routine being called    +8 (there is no longer a calling routine)
;   893 --  called from addr        +12 (see note below)
;   894 --< return address          +16 (0 means callback)
;   895 --  exception handler       +16 (0 means none, 1 means lower down)
;   896 --  prev_ebp                +20
;   897 --! symtab                  +24
;   898 --! threadstack             +28     
;   899 --! vsb_root                +32
;   900 --  vsb_root                +24
;   901 --  return address          +28 (0 means callback)
;   902 
;   903     [32]
;   904 --EXCEPT
;   905 --X     mov edx,[ebp+16]        -- return address
;   906 --cmp [ebp+16],ebx
;   907 --je @f
;   908 --  int3
;   909 --@@:
;   910         mov edx,[ebp+28]        -- return address
                mov edx,[ebp+28] (retaddr)  ;#00462C8F: 213125 1C                  uv 04 20  1 148      
;   911         mov ecx,[ebp+4]         -- N
                mov ecx,[ebp+4]           ;#00462C92: 213115 04                  vu 02 20  1 148      
;   912 --      mov e?x,[ebp+20]        -- vsb_root (not needed??)
;   913         test edx,edx
                test edx,edx              ;#00462C95: 205322                     uv 00 04  1 149      
;   914         jz @f
                jz #00462C9A              ;#00462C97: 164 01                     v  00 00  1 149      
;   915           push edx
                  push edx                ;#00462C99: 122                        uv 00 04  1 150      
;   916       @@:
;   917 --      push eax                -- preserve eax
;   918         mov esi,ebp
                mov esi,ebp               ;#00462C9A: 213365                     vu 40 20  1 150      
;   919 --SUG:
;   920 --    ::opRetLoop
;   921       @@:
;   922         sub ecx,1               -- no of items saved
                sub ecx,1                 ;#00462C9C: 203351 01                  uv 02 02  1 151      
;   923         js :opRetLoopEnd
                js #00462CC2              ;#00462C9F: 170 21                     v  00 00  1 151      
;   924         mov edx,[esi]
                mov edx,[esi]             ;#00462CA1: 213026                     uv 04 40  1 152      
;   925 --      sub esi,4
;   926         lea esi,[esi-4]
                lea esi,[esi-4]           ;#00462CA3: 215166 FC                  vu 40 40  1 152      
;   927         cmp edx,h4
                cmp edx,h4                ;#00462CA6: 201372 00000040            uv 00 04  1 153      
;   928         jle @b
                jle #00462C9C             ;#00462CAC: 176 EE                     v  00 00  1 153      
;   929         sub dword[ebx+edx*4-8],1
                sub dword[ebx+edx*4-8],1  ;#00462CAE: 203154223 F8 01            u  00 0C  3 154      
;   930         jnz @b
                jnz #00462C9C             ;#00462CB3: 165 E7                     v  00 00  1 156      
;   931         pushad                  -- (needs to preserve ecx,esi, may as well do eax too)
                pushad                    ;#00462CB5: 140                        np 00 FF  5 157      
;   932                                 -- (NB a single (/outer) pushad would not work anyway)
;   933 --?     call deallocY
;   934         push dword[esp+32]
                push dword[esp+32]        ;#00462CB6: 377164044 20               np 00 10  2 162      
;   935         call :%pDealloc0
                call #004639AB (:%pDealloc0)  ;#00462CBA: 350 EC0C0000               v  00 00  1 164      
;   936         popad
                popad                     ;#00462CBF: 141                        np FF 00  5 165      
;   937         jmp @b
                jmp #00462C9C             ;#00462CC0: 353 DA                     v  00 00  1 170      
;   938       ::opRetLoopEnd
;   939         mov ecx,[ebp+20]        -- prev_ebp
                mov ecx,[ebp+20] (prevebp)  ;#00462CC2: 213115 14                  uv 02 20  1 173    *20*
;   940         test ecx,ecx
                test ecx,ecx              ;#00462CC5: 205311                     uv 00 02  1 174 02   
;   941         jz @f
                jz #00462CCC              ;#00462CC7: 164 03                     v  00 00  1 174      
;   942             mov ebp,ecx
                    mov ebp,ecx           ;#00462CC9: 213351                     uv 20 02  1 175      
;   943 --          xor eax,eax --no!!
;   944             ret
                    ret                   ;#00462CCB: 303                        np 00 00  2 176      
;   945       @@:
;   946         xor eax,eax  -- 11/2/15 (makes final top-level exit==abort(0), not abort(rand))
                xor eax,eax               ;#00462CCC: 061300                     uv 01 01  1 178      
;   947         ret
                ret                       ;#00462CCE: 303                        np 00 00  2 179      
;   948 
;   949     [64]
;   950 --EXCEPT
;   951 --X     mov rdx,[rbp+32]        -- return address
;   952 --cmp [rbp+32],rbx
;   953 --je @f
;   954 --  int3
;   955 --@@:
;   956         mov rdx,[rbp+56]        -- return address
;   957         mov rcx,[rbp+8]         -- N
;   958         test rdx,rdx
;   959         jz @f
;   960           push rdx
;   961       @@:
;   962         mov rsi,rbp
;   963         mov r15,h4
;   964       @@:
;   965         sub rcx,1               -- no of items saved
;   966         js opRetLoopEnd
;   967         mov rdx,[rsi]
;   968         lea rsi,[rsi-8]
;   969 --      cmp rdx,h4
;   970         cmp rdx,r15
;   971         jle @b
;   972         sub qword[rbx+rdx*4-16],1
;   973         jnz @b
;   974         push rcx
;   975         push rsi
;   976         push rax
;   977 --DEV now assuming this preserves r15 (h4):
;   978         push qword[rsp+24]
;   979         call :%pDealloc0
;   980         pop rax
;   981         pop rsi
;   982         pop rcx
;   983         jmp @b
;   984       ::opRetLoopEnd
;   985         mov rcx,[rbp+40]        -- prev_ebp
;   986         test rcx,rcx
;   987         jz @f
;   988             mov rbp,rcx
;   989             ret
;   990       @@:
;   991         xor rax,rax  -- 11/2/15 (makes final top-level exit==abort(0), not abort(rand))
;   992         ret
;   993     []
;   994 
;   995 --/*
;   996 procedure :%pFreeStack(:%)
;   997 end procedure -- (for Edita/CtrlQ)
;   998 --*/
;   999 :%pFreeStack    -- called from pThread.e
;  1000 ------------
;  1001 --::tFreeStack
;  1002     [32]
;  1003         -- call :%opRetf until T_maintls
;  1004         cmp dword[ebp+8],21     -- T_maintls
                cmp dword[ebp+8],21       ;#00462CCF: 203175 08 15               u  00 20  2 181      
;  1005         je @f
                je #00462CE1              ;#00462CD3: 164 0C                     v  00 00  1 182      
;  1006 --X         mov dword[ebp+16],:%pFreeStack  -- replace return address (DEV bug in pilasm.e)
;  1007             mov dword[ebp+28],:%pFreeStack  -- replace return address
                    mov [ebp+28] (retaddr),#00462CCF  ;#00462CD5: 307105 1C CF2C4600         uv 00 20  1 183      
;  1008 --EXCEPT
;  1009 --X         mov dword[ebp+16],:tFreeStack   -- replace return address
;  1010 --X         mov dword[ebp+28],:tFreeStack   -- replace return address
;  1011             jmp :%opRetf
                    jmp #00462C8F (:%opRetf)  ;#00462CDC: 351 AEFFFFFF               v  00 00  1 183      
;  1012       @@:
;  1013         mov eax,[ebp+24]        -- vsb_root
                mov eax,[ebp+24]          ;#00462CE1: 213105 18                  uv 01 20  1 184      
;  1014       @@:
;  1015         push dword[eax+4]       -- vsb_next
                push dword[eax+4]         ;#00462CE4: 377160 04                  np 00 01  2 187    *01*
;  1016         mov ecx,12280
                mov ecx,12280             ;#00462CE7: 271 F82F0000               uv 02 00  1 189      
;  1017 --DEV edx:=?                    -- era
;  1018         call :%pFreePool        -- release ecx bytes of memory at eax.
                call #004636B8 (:%pFreePool)  ;#00462CEC: 350 C7090000               v  00 00  1 189      
;  1019         pop eax
                pop eax                   ;#00462CF1: 130                        uv 01 00  1 190      
;  1020         test eax,eax
                test eax,eax              ;#00462CF2: 205300                     uv 00 01  1 191 01   
;  1021         jnz @b
                jnz #00462CE4             ;#00462CF4: 165 EE                     v  00 00  1 191      
;  1022         xor ebp,ebp
                xor ebp,ebp               ;#00462CF6: 061355                     uv 20 20  1 192      
;  1023     [64]
;  1024         -- call :%opRetf until T_maintls
;  1025         cmp qword[rbp+16],21    -- T_maintls
;  1026         je @f
;  1027 --X         mov qword[rbp+32],:%pFreeStack  -- replace return address (DEV bug in pilasm.e)
;  1028             mov qword[rbp+56],:%pFreeStack  -- replace return address
;  1029 --EXCEPT
;  1030 --X         mov qword[rbp+32],:tFreeStack   -- replace return address
;  1031 --X         mov qword[rbp+56],:tFreeStack   -- replace return address
;  1032             jmp :%opRetf
;  1033       @@:
;  1034         mov rax,[rbp+48]        -- vsb_root
;  1035       @@:
;  1036         push qword[rax+8]       -- vsb_next
;  1037 --pHeapD:
;  1038 --<     mov rcx,9208
;  1039         mov rcx,11248
;  1040 --DEV rdx:=?                    -- era
;  1041         call :%pFreePool        -- release rcx bytes of memory at rax.
;  1042         pop rax
;  1043         test rax,rax
;  1044         jnz @b
;  1045         xor rbp,rbp
;  1046     []
;  1047         ret
                ret                       ;#00462CF8: 303                        np 00 00  2 193      
;  1048 
;  1049 --/*
;  1050 procedure :%trimStack(:%)
;  1051 end procedure -- (for Edita/CtrlQ)
;  1052 --*/
;  1053   ::trimStackPop
;  1054 ----------------
;  1055     -- (assumes this is from opFrame/newVSB, not pNewStack/newVSB):
;  1056     [32]
;  1057         add esp,4
                add esp,4                 ;#00462CF9: 203304 04                  uv 10 10  1 195      
;  1058     [64]
;  1059         add rsp,8
;  1060     []
;  1061   :%trimStack
;  1062 -------------
;  1063     -- cleanup the call stack and raise e33maf. era @ [esp].
;  1064     [32]
;  1065         mov edi,[oom]           -- "Your program has run out of memory, one moment please\n"
                mov edi,[#00402178] (oom)  ;#00462CFC: 213075 78214000            vu 80 00  1 195      
;  1066         call :%puts1
                call #004627FE (:%puts1)  ;#00462D02: 350 F7FAFFFF               v  00 00  1 196      
;  1067         mov eax,[ebp+24]        -- vsb_root
                mov eax,[ebp+24]          ;#00462D07: 213105 18                  uv 01 20  1 197      
;  1068         cmp [eax],ebx           -- vsb_prev
                cmp [eax],ebx             ;#00462D0A: 071030                     uv 00 09  2 200 01 *01*
;  1069         je :trimNP              -- no trimming possible
                je #00462D52              ;#00462D0C: 164 44                     v  00 00  1 201      
;  1070         push eax                --[1]
                push eax                  ;#00462D0E: 120                        uv 00 01  1 202      
;  1071         push ebp                --[2]
                push ebp                  ;#00462D0F: 125                        vu 00 20  1 202      
;  1072         --
;  1073         -- skip down the stack until we've got a different vsb_root
;  1074         --
;  1075       @@:
;  1076         mov edx,ebp
                mov edx,ebp               ;#00462D10: 213325                     uv 04 20  1 203      
;  1077         mov ebp,[ebp+20]        -- prev_ebp
                mov ebp,[ebp+20] (prevebp)  ;#00462D12: 213155 14                  vu 20 20  1 203      
;  1078         cmp eax,[ebp+24]        -- vsb_root
                cmp eax,[ebp+24]          ;#00462D15: 073105 18                  uv 00 21  2 206    *20*
;  1079         je @b
                je #00462D10              ;#00462D18: 164 F6                     v  00 00  1 207      
;  1080         --
;  1081         -- call opRetf until vsb_prev is 0
;  1082         --
;  1083         push dword[ebp+24]      --[3] save vsb_root of last_but_one block
                push dword[ebp+24]        ;#00462D1A: 377165 18                  np 00 20  2 208      
;  1084         push edx                --[4] save last[1] for prev_ebp relink
                push edx                  ;#00462D1D: 122                        uv 00 04  1 210      
;  1085       ::trimRetLoop
;  1086         mov eax,[ebp+24]        -- vsb_root
                mov eax,[ebp+24]          ;#00462D1E: 213105 18                  vu 01 20  1 210      
;  1087         cmp [eax],ebx           -- vsb_prev
                cmp [eax],ebx             ;#00462D21: 071030                     uv 00 09  2 213    *01*
;  1088         je @f
                je #00462D31              ;#00462D23: 164 0C                     v  00 00  1 214      
;  1089 --EXCEPT
;  1090 --X         mov dword[ebp+16],:trimRetLoop  -- replace return address
;  1091             mov dword[ebp+28],:trimRetLoop  -- replace return address
                    mov [ebp+28] (retaddr),#00462D1E  ;#00462D25: 307105 1C 1E2D4600         uv 00 20  1 215      
;  1092             jmp :%opRetf
                    jmp #00462C8F (:%opRetf)  ;#00462D2C: 351 5EFFFFFF               v  00 00  1 215      
;  1093       @@:
;  1094         --
;  1095         -- free any stack blocks emptied by the previous loop
;  1096         --
;  1097         pop edx                 --[4] last[1] (first frame in last block)
                pop edx                   ;#00462D31: 132                        uv 04 00  1 216      
;  1098         mov [edx+20],ebp        -- reroute prev_ebp chain around removed blocks
                mov [edx+20],ebp          ;#00462D32: 211152 14                  uv 00 24  1 219 04 *04*
;  1099         pop eax                 --[3] last_but_one (a vsb_root)
                pop eax                   ;#00462D35: 130                        vu 01 00  1 219      
;  1100       ::trimFreeLoop    
;  1101         cmp [eax],ebx           -- vsb_prev
                cmp [eax],ebx             ;#00462D36: 071030                     uv 00 09  2 222    *01*
;  1102         je @f
                je #00462D49              ;#00462D38: 164 0F                     v  00 00  1 223      
;  1103             push dword[eax]     --[3] vsb_prev
                    push dword[eax]       ;#00462D3A: 377060                     np 00 01  2 224      
;  1104             mov ecx,12280
                    mov ecx,12280         ;#00462D3C: 271 F82F0000               uv 02 00  1 226      
;  1105             -- (no sensible edx/era here)
;  1106             call :%pFreePool        -- release ecx bytes of memory at eax.
                    call #004636B8 (:%pFreePool)  ;#00462D41: 350 72090000               v  00 00  1 226      
;  1107             pop eax             --[3]
                    pop eax               ;#00462D46: 130                        uv 01 00  1 227      
;  1108             jmp :trimFreeLoop
                    jmp #00462D36         ;#00462D47: 353 ED                     v  00 00  1 227      
;  1109       @@:
;  1110         --
;  1111         -- re-attach the last block, and link that last[1] up.
;  1112         --
;  1113         pop ebp                 --[2] original
                pop ebp                   ;#00462D49: 135                        uv 20 00  1 228      
;  1114         pop dword[eax+4]        --[1] vsb_next
                pop dword[eax+4]          ;#00462D4A: 217100 04                  np 00 01  3 230    *01*
;  1115         mov edx,[ebp+24]        -- vsb_root
                mov edx,[ebp+24]          ;#00462D4D: 213125 18                  uv 04 20  1 233      
;  1116         mov [edx],eax           -- vsb_prev
                mov [edx],eax             ;#00462D50: 211002                     uv 00 05  1 236 04 *04*
;  1117 
;  1118       ::trimNP
;  1119         --
;  1120         -- and finally trigger e33maf
;  1121         --
;  1122         pop edx
                pop edx                   ;#00462D52: 132                        vu 04 00  1 236      
;  1123         mov al,33   -- e33maf (memory allocation failure)
                mov al,33                 ;#00462D53: 260 21                     uv 01 00  1 237      
;  1124         sub edx,1
                sub edx,1                 ;#00462D55: 203352 01                  vu 04 04  1 237      
;  1125         jmp :!iDiag
                jmp #00463E69 (:!iDiag)   ;#00462D58: 351 0C110000               v  00 00  1 238      
;  1126         int3
                int3                      ;#00462D5D: 314                        np 00 00 13 239      
;  1127     [64]
;  1128         mov rdi,[oom]           -- "Your program has run out of memory, one moment please\n"
;  1129         call :%puts1
;  1130         mov rax,[rbp+48]        -- vsb_root
;  1131         cmp [rax],rbx           -- vsb_prev
;  1132         je :trimNP              -- no trimming possible
;  1133         push rax                --[1]
;  1134         push rbp                --[2]
;  1135         --
;  1136         -- skip down the stack until we've got a different vsb_root
;  1137         --
;  1138       @@:
;  1139         mov rdx,rbp
;  1140         mov rbp,[rbp+40]        -- prev_ebp
;  1141         cmp rax,[rbp+48]        -- vsb_root
;  1142         je @b
;  1143         --
;  1144         -- call opRetf until vsb_prev is 0
;  1145         --
;  1146         push qword[rbp+48]      --[3] save vsb_root of last_but_one block
;  1147         push rdx                --[4] save last[1] for prev_ebp relink
;  1148       ::trimRetLoop
;  1149         mov rax,[rbp+48]        -- vsb_root
;  1150         cmp [rax],rbx           -- vsb_prev
;  1151         je @f
;  1152 --EXCEPT
;  1153 --X         mov dword[rbp+32],:trimRetLoop  -- replace return address
;  1154             mov dword[rbp+56],:trimRetLoop  -- replace return address
;  1155             jmp :%opRetf
;  1156       @@:
;  1157         --
;  1158         -- free any stack blocks emptied by the previous loop
;  1159         --
;  1160         pop rdx                 --[4] last[1] (first frame in last block)
;  1161         mov [rdx+40],rbp        -- reroute prev_ebp chain around removed blocks
;  1162         pop rax                 --[3] last_but_one (a vsb_root)
;  1163       ::trimFreeLoop    
;  1164         cmp [rax],rbx           -- vsb_prev
;  1165         je @f
;  1166             push qword[rax]     --[3] vsb_prev
;  1167             mov rcx,11248
;  1168             -- (no sensible rdx/era here)
;  1169             call :%pFreePool        -- release rcx bytes of memory at rax.
;  1170             pop rax             --[3]
;  1171             jmp :trimFreeLoop
;  1172       @@:
;  1173         --
;  1174         -- re-attach the last block, and link that last[1] up.
;  1175         --
;  1176         pop rbp                 --[2] original
;  1177         pop qword[rax+8]        --[1] vsb_next
;  1178         mov rdx,[rbp+48]        -- vsb_root
;  1179         mov [rdx],rax           -- vsb_prev
;  1180 
;  1181       ::trimNP
;  1182         --
;  1183         -- and finally trigger e33maf
;  1184         --
;  1185         pop rdx
;  1186         mov al,33   -- e33maf (memory allocation failure)
;  1187         sub rdx,1
;  1188         jmp :!iDiag
;  1189         int3
;  1190     []
;  1191 --  A virtual stack block (32-bit) is:
;  1192 --      dd vsb_prev                 [vsb_root]
;  1193 --      dd vsb_next                 [vsb_root+4]
;  1194 --  A (32-bit) frame is:
;  1195 --EXCEPT
;  1196 --X     dd return address           [ebp+16] (0 means callback)
;  1197 --      dd exception handler        [ebp+16] (0 means none, 1 means lower down)
;  1198 --      dd prev_ebp                 [ebp+20] (0 means top-level quit [maybe?])
;  1199 --      dd vsb_root                 [ebp+24]
;  1200 --      dd return address           [ebp+28] (0 means callback)
;  1201 
;  1202 --  A virtual stack block (64-bit) is:
;  1203 --      dq vsb_prev                 [vsb_root]
;  1204 --      dq vsb_next                 [vsb_root+8]
;  1205 --  A (64-bit) frame is:
;  1206 --EXCEPT
;  1207 --X     dq return address           [rbp+32] (0 means callback)
;  1208 --      dq exception handler        [rbp+32] (0 means nojne, 1 means lower down)
;  1209 --      dq prev_ebp                 [rbp+40] (0 means top-level quit [maybe?])
;  1210 --      dq vsb_root                 [rbp+48]
;  1211 --      dq return address           [rbp+56] (0 means callback)
;  1212 ----    puts(1,"Your program has run out of memory, one moment please\n")
;  1213 --! mov eax,[ebp+32]                -- vsb_root
;  1214 --  --
;  1215 --  -- Keep the (full) vsb at edi, free everything below it.
;  1216 --  -- (We may also want to keep the first vsb, but that is for another day)
;  1217 --  -- First job: scan down the prev_ebp links looking for the first in this (edi) block,
;  1218 --  --            then zero that prev_ebp (which is pointing to a different vsb).
;  1219 --  mov edx,[ebp+24]                -- vsb_root
;  1220 --  mov esi,ebp
;  1221 --  mov eax,[ebp+20]                -- prev_ebp
;  1222 -- ::tsloop1    -- while eax is between edx and esi, shadow eax in esi
;  1223 --DEV should test this does what I want when a vsb straddles #80000000:
;  1224 --  cmp eax,edx
;  1225 --  jb @f
;  1226 --  cmp eax,esi
;  1227 --  ja @f
;  1228 --  mov esi,eax
;  1229 --  mov eax,[eax+20]                -- prev_ebp
;  1230 --  jmp :tsloop1
;  1231 -- @@:
;  1232 --  mov [esi+20],ebx                -- prev_ebp:=null, on the first frame in this vsb
;  1233 --  -- Second job: unlink and free all vsb_prev
;  1234 --  push esi
;  1235 -- ::tsloop2
;  1236 --  mov eax,[edx]                   -- vsb_prev
;  1237 --  mov [edx],ebx                   -- vsb_prev:=0 (only rqd on first)
;  1238 --  test eax,eax
;  1239 --? jz @f
;  1240 --  jz e77phroom
;  1241 --  push eax
;  1242 --  mov ecx,12280
;  1243 --  mov eax,edx
;  1244 --  mov edx,??? (era)
;  1245 --  call :%pFreePool    -- release ecx bytes at eax
;  1246 --  pop edx
;  1247 --  jmp :tsloop2
;  1248 --? @@:
;  1249 --? push ebp
;  1250 --? mov eax,[eax]                   -- vsb_prev
;  1251 --? test eax,eax
;  1252 --? jz :trimdone
;  1253 --? ::tslooptop
;  1254 --? mov eax,[eax+32]                -- vsb_root
;  1255 --? mov [esp],eax
;  1256 --? mov eax,[eax]                   -- vsb_prev
;  1257 --? test eax,eax
;  1258 --? jz :trimdone
;  1259 --? 
;  1260 --? ::trimdone
;  1261 --? add esp,4
;  1262 --? jmp e77phroom
;  1263 
;  1264 --/*
;  1265 procedure :%opTchk(:%)
;  1266 end procedure -- (for Edita/CtrlQ)
;  1267 --*/
;  1268 :%opTchk
;  1269 --------
;  1270 -- calling convention (as used in pilx86.e)
;  1271 --  mov ecx,nparms      -- no of params/locals/tmps (aka symtab[edx][S_Ltot])
;  1272 --  mov edx,N           -- type check routineNo (using isVno)
;  1273 --  push :return addr
;  1274 --  push <varno>        -- var number (using isVno)
;  1275 --  push <code>         -- addr of typecheck code (aka symtab[edx][S_il])
;  1276 --  push dword[var]     -- value to check
;  1277 --  jmp %:pTchk                                     351         E9 rel32        jmp rel32
;  1278 -- ::return_addr
;  1279     [32]
;  1280         mov esi,[esp+12]    -- return address (==called from address)
                mov esi,[esp+12]          ;#00462D5E: 213164044 0C               uv 40 10  1 252      
;  1281         call :%opFrame      -- leaves ecx=0, ?esi=addr first (was in eax)
                call #00462C02 (:%opFrame)  ;#00462D62: 350 9BFEFFFF               v  00 00  1 252      
;  1282         pop eax             -- value to check
                pop eax                   ;#00462D67: 130                        uv 01 00  1 253      
;  1283 --X     mov edx,:!opTchkRetAddr  -- return address
;  1284         mov ecx,[esp+8]     -- real return addr
                mov ecx,[esp+8]           ;#00462D68: 213114044 08               vu 02 10  1 253      
;  1285 --X     mov dword[ebp+16],:!opTchkRetAddr  -- return address
;  1286         mov dword[ebp+28],:!opTchkRetAddr  -- return address
                mov [ebp+28] (retaddr),#00462D87  ;#00462D6C: 307105 1C 872D4600         uv 00 20  1 254      
;  1287 --EXCEPT
;  1288 --X     mov dword[ebp+16],edx
;  1289 --x^    mov dword[ebp+28],edx
;  1290         mov dword[ebp+12],ecx
                mov [ebp+12],ecx          ;#00462D73: 211115 0C                  vu 00 22  1 254      
;  1291         cmp eax,h4
                cmp eax,h4                ;#00462D76: 075 00000040               uv 00 01  1 255      
;  1292         jl @f
                jl #00462D82              ;#00462D7B: 174 05                     v  00 00  1 255      
;  1293           add dword[ebx+eax*4-8],1  -- incref
                  add dword[ebx+eax*4-8],1  ;#00462D7D: 203104203 F8 01            u  00 09  3 256      
;  1294       @@:
;  1295 -- (minor listing issue)
;  1296 --      mov [ebp],eax       -- [addr first] := value
;  1297         mov [ebp+ebx],eax   -- [addr first] := value
                mov [ebp+ebx],eax         ;#00462D82: 211104035 00               vu 00 29  1 258      
;  1298         ret                 -- execute typecheck code!
                ret                       ;#00462D86: 303                        np 00 00  2 259      
;  1299 
;  1300 --DEV if era is opTchkRetAddr, then replace it with the one on the stack... (very messy if there be stuff on the stack...)
;  1301 --      (better: stash it in [ebp+12]/[rbp+24] before the ret above)
;  1302       :!opTchkRetAddr
;  1303         pop ecx             -- var no
                pop ecx                   ;#00462D87: 131                        uv 02 00  1 261      
;  1304         cmp eax,0
                cmp eax,0                 ;#00462D88: 203370 00                  vu 00 01  1 261      
;  1305         jne @f
                jne #00462D99             ;#00462D8B: 165 0C                     v  00 00  1 262      
;  1306     :%opTcFail
;  1307 --------------
;  1308 --(no)      pop eax         -- return address
;  1309 --DEV:
;  1310 --          mov [ep1],ecx   -- var no (just leave it in ecx)
;  1311 --          mov [era],eax   -- (just leave it on the stack)
;  1312             pop edx
                    pop edx               ;#00462D8D: 132                        uv 04 00  1 263      
;  1313             mov al,1        -- e01tcf(ecx==idx)
                    mov al,1              ;#00462D8E: 260 01                     vu 01 00  1 263      
;  1314             sub edx,1
                    sub edx,1             ;#00462D90: 203352 01                  uv 04 04  1 264      
;  1315             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00462D93: 351 D1100000               v  00 00  1 264      
;  1316             int3
                    int3                  ;#00462D98: 314                        np 00 00 13 265      
;  1317       @@:
;  1318         ret
                ret                       ;#00462D99: 303                        np 00 00  2 278      
;  1319     [64]
;  1320         mov rsi,[rsp+24]    -- return address (==called from address)
;  1321         call :%opFrame      -- leaves ecx=0, ?esi=addr first (was in eax)
;  1322         pop rax             -- value to check
;  1323         mov rcx,[rsp+16]    -- real return addr
;  1324 --X     mov rdx,:!opTchkRetAddr  -- return address
;  1325         mov r15,h4
;  1326 --X     mov qword[rbp+32],:!opTchkRetAddr  -- return address
;  1327         mov qword[rbp+56],:!opTchkRetAddr  -- return address
;  1328 --EXCEPT
;  1329 --X     mov qword[rbp+32],rdx
;  1330 --x^    mov qword[rbp+56],rdx
;  1331         mov qword[rbp+24],rcx
;  1332         cmp rax,r15
;  1333         jl @f
;  1334           add qword[rbx+rax*4-16],1 -- incref
;  1335       @@:
;  1336 --ditto (minor listing issue)
;  1337 --      mov [rbp],rax       -- [addr first] := value
;  1338         mov [rbp+rbx],rax   -- [addr first] := value
;  1339         ret                 -- execute typecheck code!
;  1340 
;  1341       :!opTchkRetAddr
;  1342         pop rcx             -- var no
;  1343         cmp rax,0
;  1344         jne @f
;  1345     :%opTcFail
;  1346 --(no)      pop rax         -- return address
;  1347 --DEV:
;  1348 --          mov [ep1],rcx   -- var no (just leave it in rcx)
;  1349 --          mov [era],rax   -- (just leave in on the stack)
;  1350             pop rdx
;  1351             mov al,1
;  1352 --DEV pdiag?
;  1353 --          jmp :enumbset
;  1354             sub rdx,1
;  1355             jmp :!iDiag
;  1356             int3 
;  1357       @@:
;  1358         ret
;  1359     []
;  1360 
;  1361 --/*
;  1362 :%opInterp (should probably just be in p.exw/main())
;  1363 ----------
;  1364     -- note: the compiler should not have any open files when this is called.
;  1365     --       interpretation is NOT thread safe
;  1366 --  push [symtabptr] -- now [ds+8] (no longer needed)
;  1367 --  mov [symtabptr],??? ""
;  1368     [level]++
;  1369 --27/2/15: eax:=symtabptr, ecx:=gvarptr
;  1370     call :%pNewStack
;  1371     call ???
;  1372 :%opIaborted
;  1373     [level]--
;  1374 --  pop [symtabptr] ""
;  1375     call :%pFreeStack
;  1376     ret
;  1377 --*/
;  1378 
;  1379 --::fin
;  1380 
;  1381 --
;  1382 -- pAbort.e
;  1383 -- ========
;  1384 --
;  1385 --  The abort() builtin.
;  1386 --  Close any open files, free the console, ... [DEV]
;  1387 --
;  1388 
;  1389 --include builtins\VM\pFEH.e    -- possibly temp
;  1390 
;  1391 --  ::e87acmbi
;  1392 --      [32]
;  1393 --          pop edx
;  1394 --          mov al,87
;  1395 --          sub edx,1
;  1396 --      [64]
;  1397 --          pop rdx...
;  1398 --      []
;  1399 --          jmp :!iDiag [DEV]
;  1400 --          int3
;  1401 
;  1402 --newEmit/optable:
;  1403 --/*
;  1404 stack effects: #ilasm: any...!!!
;  1405 file        entry points
;  1406 pAbort.e
;  1407 ========
;  1408         :%opAbort
;  1409 --      (pFPU.e)    :%down53
;  1410 --      call :!opClosem9                -- (duplicates return addr, if called)
;  1411 --      call opFreeCons
;  1412 --      jmp :%opIaborted
;  1413 --*/
;  1414 
;  1415 --DEV togo:
;  1416 --/*
;  1417 procedure :%SetCCleanup(:%)
;  1418 end procedure -- (for Edita/CtrlQ)
;  1419 --*/
;  1420     :%SetCCleanup       -- cleanup code for pcfunc.e
;  1421 -----------------
;  1422     [32]
;  1423         mov [CClean],eax
                mov [#00402174] (CClean),eax  ;#00462D9A: 243 74214000               uv 00 01  1 280      
;  1424     [64]
;  1425         mov [CClean],rax
;  1426     []
;  1427         ret
                ret                       ;#00462D9F: 303                        np 00 00  2 281      
;  1428 
;  1429 --/*
;  1430 procedure :%RunCleanup(:%)
;  1431 end procedure -- (for Edita/CtrlQ)
;  1432 --*/
;  1433     :%RunCleanup
;  1434 ----------------
;  1435 ::FreeStack
;  1436     [32]
;  1437         -- call :%opRetf until T_maintls
;  1438         cmp dword[ebp+8],21     -- T_maintls
                cmp dword[ebp+8],21       ;#00462DA0: 203175 08 15               u  00 20  2 283      
;  1439         je @f
                je #00462DB2              ;#00462DA4: 164 0C                     v  00 00  1 284      
;  1440 --EXCEPT
;  1441 --X         mov dword[ebp+16],:FreeStack    -- replace return address
;  1442             mov dword[ebp+28],:FreeStack    -- replace return address
                    mov [ebp+28] (retaddr),#00462DA0  ;#00462DA6: 307105 1C A02D4600         uv 00 20  1 285      
;  1443             jmp :%opRetf
                    jmp #00462C8F (:%opRetf)  ;#00462DAD: 351 DDFEFFFF               v  00 00  1 285      
;  1444       @@:
;  1445 
;  1446 --      mov edi,[freesym]
;  1447 --      call :%puts1
;  1448 --      mov edi,[closebr]
;  1449 --      call :%puts1
;  1450 
;  1451         mov eax,[CClean]
                mov eax,[#00402174] (CClean)  ;#00462DB2: 241 74214000               uv 01 00  1 286      
;  1452         shr eax,2
                shr eax,2                 ;#00462DB7: 301350 02                  u  01 01  1 287      
;  1453         jz @f
                jz #00462DBE              ;#00462DBA: 164 02                     v  00 00  1 287      
;  1454             call eax
                    call eax              ;#00462DBC: 377320                     np 00 01  2 288      
;  1455       @@:
;  1456 
;  1457         mov esi,[ds+8]              -- (esi:=raw addr of symtab[1])
                mov esi,[#00402008]       ;#00462DBE: 213065 08204000            uv 40 00  1 290      
;  1458 
;  1459         mov ecx,[esi-12]            -- symlen
                mov ecx,[esi-12]          ;#00462DC4: 213116 F4                  uv 02 40  1 293 40 *40*
;  1460       ::CleanupLoop
;  1461 --pushad
;  1462 --      push ecx
;  1463 --      mov edi,[freesym]
;  1464 --      call :%puts1
;  1465 --      pop eax
;  1466 --      push 0
;  1467 --      call :%putsint
;  1468 --      mov edi,[closebr]
;  1469 --      call :%puts1
;  1470 --popad
;  1471 
;  1472         mov edi,[esi+ecx*4-4]       -- symtab[ecx]
                mov edi,[esi+ecx*4-4]     ;#00462DC7: 213174216 FC               uv 80 42  1 296 02 *02*
;  1473         sub ecx,1
                sub ecx,1                 ;#00462DCB: 203351 01                  vu 02 02  1 296      
;  1474         cmp edi,h4
                cmp edi,h4                ;#00462DCE: 201377 00000040            uv 00 80  1 297      
;  1475         jle @f
                jle #00462E1B             ;#00462DD4: 176 45                     v  00 00  1 297      
;  1476             mov edx,[ebx+edi*4+4]       -- symtab[ecx][S_NTyp]
                    mov edx,[ebx+edi*4+4]  ;#00462DD6: 213124273 04               uv 04 88  1 298      
;  1477             cmp edx,1                   -- <=2 (S_Const or S_GVar2)
                    cmp edx,1             ;#00462DDA: 203372 01                  uv 00 04  1 299 04   
;  1478             jne :opAgvar
                    jne #00462DE9         ;#00462DDD: 165 0A                     v  00 00  1 299      
;  1479                 test dword[ebx+edi*4+12],#200   -- K_noclr
                        test dword[ebx+edi*4+12],512  ;#00462DDF: 367104273 0C 00020000      u  00 88  2 300      
;  1480                 jnz @f
                        jnz #00462E1B     ;#00462DE7: 165 32                     v  00 00  1 301      
;  1481           ::opAgvar
;  1482             cmp edx,2
                    cmp edx,2             ;#00462DE9: 203372 02                  uv 00 04  1 302      
;  1483             jg @f
                    jg #00462E1B          ;#00462DEC: 177 2D                     v  00 00  1 302      
;  1484                 -- S_Const w/o K_noclr and all S_Gvar2
;  1485                 mov eax,[esi+88]        -- eax:=symtab[T_ds4=23]
                        mov eax,[esi+88]  ;#00462DEE: 213106 58                  uv 01 40  1 303      
;  1486 --              mov edx,[ebx+edi*4+20]  -- symtab[ecx][S_Slink]
;  1487                 mov edi,[ebx+edi*4+20]  -- edi:=symtab[ecx][S_Slink]
                        mov edi,[ebx+edi*4+20]  ;#00462DF1: 213174273 14               vu 80 88  1 303      
;  1488 --              lea edi,[ds+8] -- no!
;  1489                 cmp [esi+84],ebx        -- symtab[T_EBP=22]=0?
                        cmp [esi+84],ebx  ;#00462DF5: 071136 54                  uv 00 48  2 304      
;  1490                 je :compiled
                        je #00462DFD      ;#00462DF8: 164 03                     v  00 00  1 305      
;  1491                     shl eax,2
                            shl eax,2     ;#00462DFA: 301340 02                  u  01 01  1 306      
;  1492               ::compiled
;  1493 --              mov edx,[eax+edx*4+16]  -- gvar[symtab[ecx][S_Slink]]
;  1494                 mov edx,[eax+edi*4+16]  -- edx:=gvar[symtab[ecx][S_Slink]]
                        mov edx,[eax+edi*4+16]  ;#00462DFD: 213124270 10               uv 04 81  1 309 01 *01*
;  1495                 cmp edx,h4
                        cmp edx,h4        ;#00462E01: 201372 00000040            uv 00 04  1 310 04   
;  1496                 jle @f
                        jle #00462E1B     ;#00462E07: 176 12                     v  00 00  1 310      
;  1497                     sub dword[ebx+edx*4-8],1
                            sub dword[ebx+edx*4-8],1  ;#00462E09: 203154223 F8 01            u  00 0C  3 311      
;  1498                     jnz @f
                            jnz #00462E1B  ;#00462E0E: 165 0B                     v  00 00  1 313      
;  1499                         mov [eax+edi*4+16],ebx
                                mov [eax+edi*4+16],ebx  ;#00462E10: 211134270 10               uv 00 89  1 314      
;  1500                         pushad
                                pushad    ;#00462E14: 140                        np 00 FF  5 315      
;  1501                         call :%pDealloc
                                call #004639A8 (:%pDealloc)  ;#00462E15: 350 8E0B0000               v  00 00  1 320      
;  1502 
;  1503 --                      mov edi,[freesym]
;  1504 --                      call :%puts1
;  1505 --                      mov eax,[esp+24]    -- (ecx)
;  1506 --                      push 0
;  1507 --                      add eax,1
;  1508 --                      call :%putsint
;  1509 --                      mov edi,[closebr]
;  1510 --                      call :%puts1
;  1511 
;  1512                         popad
                                popad     ;#00462E1A: 141                        np FF 00  5 321      
;  1513 --/*
;  1514         mov edi,[ecode]             -- "exception code #"
;  1515         call :%puts1
;  1516 
;  1517         mov edx,[edi]               -- exception_code
;  1518         push 0                      -- no cr
;  1519         call :%puthex32
;  1520 
;  1521         mov eax,[i]
;  1522         push [showcr]
;  1523         call :%putsint
;  1524 --*/
;  1525       @@:
;  1526         cmp ecx,26                  -- T_const1
                cmp ecx,26                ;#00462E1B: 203371 1A                  uv 00 02  1 326      
;  1527         jg :CleanupLoop
                jg #00462DC7              ;#00462E1E: 177 A7                     v  00 00  1 326      
;  1528 --      pop eax
;  1529 
;  1530         mov eax,[ebp+24]        -- vsb_root
                mov eax,[ebp+24]          ;#00462E20: 213105 18                  uv 01 20  1 327      
;  1531       @@:
;  1532         push dword[eax+4]       -- vsb_next
                push dword[eax+4]         ;#00462E23: 377160 04                  np 00 01  2 330    *01*
;  1533         mov ecx,12280
                mov ecx,12280             ;#00462E26: 271 F82F0000               uv 02 00  1 332      
;  1534 --DEV edx:=?                    -- era
;  1535         call :%pFreePool        -- release ecx bytes of memory at eax.
                call #004636B8 (:%pFreePool)  ;#00462E2B: 350 88080000               v  00 00  1 332      
;  1536         pop eax
                pop eax                   ;#00462E30: 130                        uv 01 00  1 333      
;  1537         test eax,eax
                test eax,eax              ;#00462E31: 205300                     uv 00 01  1 334 01   
;  1538         jnz @b
                jnz #00462E23             ;#00462E33: 165 EE                     v  00 00  1 334      
;  1539         xor ebp,ebp
                xor ebp,ebp               ;#00462E35: 061355                     uv 20 20  1 335      
;  1540 
;  1541     [64]
;  1542         -- call :%opRetf until T_maintls
;  1543         cmp qword[rbp+16],21    -- T_maintls
;  1544         je @f
;  1545 --EXCEPT
;  1546 --X         mov qword[rbp+32],:FreeStack    -- replace return address
;  1547             mov qword[rbp+56],:FreeStack    -- replace return address
;  1548             jmp :%opRetf
;  1549       @@:
;  1550 
;  1551         mov rax,[CClean]
;  1552         shr rax,2
;  1553         jz @f
;  1554             call rax
;  1555       @@:
;  1556 
;  1557         mov rsi,[ds+8]              -- (rsi:=raw addr of symtab[1])
;  1558 
;  1559         mov rcx,[rsi-24]            -- symlen
;  1560         mov r15,h4
;  1561       ::CleanupLoop
;  1562         mov rdi,[rsi+rcx*8-8]       -- symtab[rcx]
;  1563         sub rcx,1
;  1564         cmp rdi,r15
;  1565         jle @f
;  1566             mov rdx,[rbx+rdi*8+8]       -- symtab[rcx][S_NTyp]
;  1567             cmp rdx,1                   -- <=2 (S_Const or S_GVar2)
;  1568             jne :opAgvar
;  1569                 test qword[rbx+rdi*8+24],#200   -- K_noclr
;  1570                 jnz @f
;  1571           ::opAgvar
;  1572             cmp rdx,2
;  1573             jg @f
;  1574                 -- S_Const w/o K_noclr and all S_Gvar2
;  1575                 mov rax,[rsi+22*8]      -- rax:=symtab[T_ds4=23]
;  1576                 mov rdi,[rbx+rdi*8+40]  -- rdi:=symtab[rcx][S_Slink]
;  1577                 cmp [rsi+21*8],rbx      -- symtab[T_EBP=22]=0?
;  1578                 je :compiled
;  1579                     shl rax,2
;  1580               ::compiled
;  1581                 mov rdx,[rax+rdi*8+32]  -- rdx:=gvar[symtab[rcx][S_Slink]]
;  1582                 cmp rdx,r15
;  1583                 jle @f
;  1584                     sub qword[rbx+rdx*4-16],1
;  1585                     jnz @f
;  1586 --6/11/16:
;  1587 --                      mov [rax+rdi*8+32],ebx
;  1588                         mov [rax+rdi*8+32],rbx
;  1589 --                      pushad
;  1590                         push rsi
;  1591                         push rcx
;  1592                         call :%pDealloc
;  1593 --                      popad
;  1594                         pop rcx
;  1595                         pop rsi
;  1596       @@:
;  1597         cmp rcx,26                  -- T_const1
;  1598         jg :CleanupLoop
;  1599 
;  1600         mov rax,[rbp+48]        -- vsb_root
;  1601       @@:
;  1602         push qword[rax+8]       -- vsb_next
;  1603 --pHeapD:
;  1604 --<     mov rcx,9208
;  1605         mov rcx,11248
;  1606 --DEV rdx:=?                    -- era
;  1607         call :%pFreePool        -- release rcx bytes of memory at rax.
;  1608         pop rax
;  1609         test rax,rax
;  1610         jnz @b
;  1611         xor rbp,rbp
;  1612     []
;  1613         ret
                ret                       ;#00462E37: 303                        np 00 00  2 336      
;  1614 
;  1615 --/*
;  1616 procedure :%NoCleanup(:%)
;  1617 end procedure -- (for Edita/CtrlQ)
;  1618 --*/
;  1619     :%NoCleanup     -- ( this is not explicitly part of the VM )
;  1620 ---------------
;  1621         -- called by (eg) :!iDiag to make abort() etc invoke ExitProcess properly, 
;  1622         --  rather than try and return an error code to p.exw/pmain.e, which will
;  1623         --  then have a fit since c_cleanup() etc have not been called...
;  1624         -- Note this should stop :%RunCleanup being called, rather than change the
;  1625         --  way it works or otherwise bothering to test this flag.
;  1626         mov [nocleanup],1
                mov [#00402170] (nocleanup), dword 1  ;#00462E38: 307005 70214000 01000000   uv 00 00  1 338      
;  1627         ret
                ret                       ;#00462E42: 303                        np 00 00  2 339      
;  1628 
;  1629 --/*
;  1630 procedure :%opAbort(:%)
;  1631 end procedure -- (for Edita/CtrlQ)
;  1632 --*/
;  1633     :%opAbort
;  1634 -------------
;  1635 
;  1636 --DEV cleanup code...
;  1637 
;  1638 
;  1639 --/*
;  1640 --      call :%pLoadMint (with era mods, or as below)
;  1641     [32]
;  1642         cmp eax,h4
;  1643         jl @f
;  1644             shl eax,2
;  1645 --              jz e92vhnbaavespm9  -- or opUnassigned [DEV]
;  1646             jz :e87acmbi
;  1647             cmp byte[eax-1],0x12
;  1648             jne :e87acmbi   -- abort condition must be integer
;  1649             sub esp,8
;  1650             fld qword[eax]
;  1651             call :%down53
;  1652             fistp qword[esp]
;  1653             call :%near53
;  1654             mov eax,[esp]
;  1655             add esp,8
;  1656         @@:
;  1657     [64]
;  1658         pop al
;  1659     []
;  1660 --*/
;  1661 
;  1662 --!/*
;  1663     [32]
;  1664         mov esi,[ds+8]              -- esi:=raw addr of symtab[1]
                mov esi,[#00402008]       ;#00462E43: 213065 08204000            uv 40 00  1 341      
;  1665         cmp eax,h4
                cmp eax,h4                ;#00462E49: 075 00000040               vu 00 01  1 341      
;  1666         jl @f
                jl #00462E5C              ;#00462E4E: 174 0C                     v  00 00  1 342      
;  1667             pop edx
                    pop edx               ;#00462E50: 132                        uv 04 00  1 343      
;  1668             mov al,87               -- e87acmbi (abort code must be integer)
                    mov al,87             ;#00462E51: 260 57                     vu 01 00  1 343      
;  1669             sub edx,1
                    sub edx,1             ;#00462E53: 203352 01                  uv 04 04  1 344      
;  1670             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00462E56: 351 0E100000               v  00 00  1 344      
;  1671             int3
                    int3                  ;#00462E5B: 314                        np 00 00 13 345      
;  1672       @@:
;  1673         cmp [ebp+16],ebx            -- exception handler
                cmp [ebp+16],ebx          ;#00462E5C: 071135 10                  uv 00 28  2 358      
;  1674         je @f
                je #00462E6F              ;#00462E5F: 164 0E                     v  00 00  1 359      
;  1675             mov ecx,eax
                    mov ecx,eax           ;#00462E61: 213310                     uv 02 01  1 360      
;  1676             pop edx
                    pop edx               ;#00462E63: 132                        vu 04 00  1 360      
;  1677             mov al,42               -- e42a
                    mov al,42             ;#00462E64: 260 2A                     uv 01 00  1 361      
;  1678             sub edx,1
                    sub edx,1             ;#00462E66: 203352 01                  vu 04 04  1 361      
;  1679             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00462E69: 351 FB0F0000               v  00 00  1 362      
;  1680             int3
                    int3                  ;#00462E6E: 314                        np 00 00 13 363      
;  1681       @@:
;  1682         mov ecx,[nocleanup]
                mov ecx,[#00402170] (nocleanup)  ;#00462E6F: 213015 70214000            uv 02 00  1 376      
;  1683         mov edx,[esi+84]            -- edx:=symtab[T_EBP=22]
                mov edx,[esi+84]          ;#00462E75: 213126 54                  vu 04 40  1 376      
;  1684         test ecx,ecx
                test ecx,ecx              ;#00462E78: 205311                     uv 00 02  1 377      
;  1685         jnz @f
                jnz #00462E8B             ;#00462E7A: 165 0F                     v  00 00  1 377      
;  1686         test edx,edx
                test edx,edx              ;#00462E7C: 205322                     uv 00 04  1 378      
;  1687         jz @f
                jz #00462E8B              ;#00462E7E: 164 0B                     v  00 00  1 378      
;  1688             -- interpreted
;  1689             mov ecx,[ebx+edx*4+4]   -- symtab[T_EBP][2] = esp4
                    mov ecx,[ebx+edx*4+4]  ;#00462E80: 213114223 04               uv 02 0C  1 379      
;  1690             lea esp,[ebx+ecx*4-8]
                    lea esp,[ebx+ecx*4-8]  ;#00462E84: 215144213 F8               uv 10 0A  1 382 02 *02*
;  1691             ret
                    ret                   ;#00462E88: 303                        np 00 00  2 383      
;  1692           ::Exit0
;  1693             xor eax,eax
                    xor eax,eax           ;#00462E89: 061300                     uv 01 01  1 385      
;  1694       @@:
;  1695 --29/10/16:
;  1696         push eax                    -- save
                push eax                  ;#00462E8B: 120                        uv 00 01  1 386 01   
;  1697         --
;  1698         -- If pfileioN.e has not been included this resolves to "call 0", aka "push <addr next instruction>"
;  1699         --  whereas, obviously, if pfileioN.e /has/ been included this does the expected thing, however it
;  1700         --  (ie ":!opClosem9") deliberately leaves the return address on the stack, for the "add esp,4" 
;  1701         --  after the call.
;  1702         --
;  1703         call :!opClosem9            -- (duplicates return addr, if called)
                call #0045E5A2 (:!opClosem9)  ;#00462E8C: 350 11B7FFFF               v  00 00  1 386      
;  1704         add esp,4                   -- (discard "", or a call 0's "this")
                add esp,4                 ;#00462E91: 203304 04                  uv 10 10  1 387      
;  1705         pop eax                     -- restore
                pop eax                   ;#00462E94: 130                        vu 01 00  1 387      
;  1706     [64]
;  1707         mov r15,h4
;  1708         mov rsi,[ds+8]              -- rsi:=raw addr of symtab[1]
;  1709         cmp rax,r15
;  1710         jl @f
;  1711             pop rdx
;  1712             mov al,87               -- e87acmbi (abort code must be integer)
;  1713             sub rdx,1
;  1714             jmp :!iDiag
;  1715             int3
;  1716       @@:
;  1717         cmp [rbp+32],rbx            -- exception handler
;  1718         je @f
;  1719             mov rcx,rax
;  1720             pop rdx
;  1721             mov al,42               -- e42a
;  1722             sub rdx,1
;  1723             jmp :!iDiag
;  1724             int3
;  1725       @@:
;  1726         mov rcx,[nocleanup]
;  1727         mov rdx,[rsi+168]           -- rdx:=symtab[T_EBP=22]
;  1728         test rcx,rcx
;  1729         jnz @f
;  1730         test rdx,rdx
;  1731         jz @f
;  1732             -- interpreted
;  1733             mov rcx,[rbx+rdx*4+8]   -- symtab[T_EBP][2] = esp4
;  1734             lea rsp,[rbx+rcx*4-16]
;  1735 --DEV (temp) for now, abort means abort (see exit_cb in edix) [FIXED]
;  1736             ret
;  1737 --jmp @f
;  1738           ::Exit0
;  1739             xor rax,rax
;  1740       @@:
;  1741 --29/10/16:
;  1742         push rax
;  1743         call :!opClosem9
;  1744         add rsp,8
;  1745         pop rax
;  1746     []
;  1747 
;  1748 
;  1749     [PE32]
;  1750         cmp eax,259
                cmp eax,259               ;#00462E95: 075 03010000               uv 00 01  1 388      
;  1751         jne @f
                jne #00462E9D             ;#00462E9A: 165 01                     v  00 00  1 388      
;  1752 --          mov al,?? -- e??ia259: "illegal: abort(259)\n"
;  1753             int3    -- [DEV]
                    int3                  ;#00462E9C: 314                        np 00 00 13 389      
;  1754       @@:
;  1755         push eax                        -- uExitCode (for ExitProcess)
                push eax                  ;#00462E9D: 120                        uv 00 01  1 402      
;  1756         call "kernel32.dll","ExitProcess"
                call [#0040103C] (ExitProcess)  ;#00462E9E: 377025 3C104000            np 00 00  2 403      
;  1757 --          ret
;  1758     [PE64]
;  1759         cmp rax,259
;  1760         jne @f
;  1761 --          mov al,?? -- e??ia259: "illegal: abort(259)\n"
;  1762             int3    -- [DEV]
;  1763       @@:
;  1764         mov rcx,rsp -- put 2 copies of rsp onto the stack...
;  1765         push rsp
;  1766         push rcx
;  1767         or rsp,8    -- [rsp] is now 1st or 2nd copy:
;  1768                     -- if on entry rsp was xxx8: both copies remain on the stack
;  1769                     -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them (+8)
;  1770                     -- obviously rsp is now xxx8, whatever alignment we started with
;  1771         sub rsp,8*5
;  1772         mov rcx,rax                     -- uExitCode
;  1773         call "kernel32.dll","ExitProcess"
;  1774 --          add rsp,8*5
;  1775 --          pop rsp     -- restore, equivalent to rsp += (either #08 or #10)
;  1776 --          mov rsp,[rsp+8*5]   -- equivalent to the add/pop
;  1777     [ELF32]
;  1778         mov ebx,eax                     -- error_code (p1)
;  1779 --      mov eax,1                       -- sys_exit(ebx=int error_code)
;  1780         mov eax,252                     -- sys_exit_group(ebx=int error_code)
;  1781         int 0x80
;  1782 --      xor ebx,ebx                     -- (common requirement after int 0x80)
;  1783     [ELF64]
;  1784         mov rdi,rax                     -- error_code (p1)
;  1785 --      mov rax,60                      -- sys_exit(rdi=int error_code)
;  1786         mov rax,231                     -- sys_exit_group(rdi=int error_code) 
;  1787         syscall
;  1788     []
;  1789 
;  1790 --/*
;  1791 :%opAbort
;  1792 ---------
;  1793 
;  1794 if debugleak
;  1795     mov [echk],0        ;; not all cleanup code has run; skip the memory check.
;  1796 end if
;  1797 
;  1798     cmp edx,h4
;  1799     jl @f
;  1800         shl edx,2
;  1801         jz e92vhnbaavespm9
;  1802         cmp byte[edx-1],0x12
;  1803         jne e87acmbi    ; abort condition must be integer
;  1804         fld qword[edx]
;  1805         mov edx,FltWrk
;  1806         fldcw [down53]
;  1807         fistp qword[edx]
;  1808         fldcw [near53]
;  1809         mov edx,[edx]
;  1810     @@:
;  1811 
;  1812     push edx
;  1813     call opClosem9
;  1814 cmp [ebpidx],0
;  1815 jne @f
;  1816     call opFreeCons
;  1817     pop edx
;  1818     invoke ExitProcess,edx
;  1819 @@:
;  1820     pop edx
;  1821     mov [ecode],edx
;  1822 mov esp,[resp]
;  1823 jmp :%opIaborted
;  1824 --*/
;  1825 
;  1826 }
;  1827 
;  1828 
    jmp #00462C8F (:%opRetf)              ;#00462EA4: 351 E6FDFFFF               v  00 00  1 405      
;C:\Phix\builtins\VM\pFEH.e:
;===========================
;     1 --
;     2 -- pFEH.e
;     3 --
;     4 --  The Phix final exception handler
;     5 --
;     6 --  This can display some machine-level diagnostics, which can be useful as long as
;     7 --  you have a matching list.asm, and is always loaded, unlike pdiagN.e, which can
;     8 --  be omitted (via the -nodiag command line option), and generally concerns itself
;     9 --  with hll-level diagnostics. Obviously this division of labour is intended to
;    10 --  assist with issues in the compiler or more accurately builtins\VM, rather than
;    11 --  in a more typical hll application.
;    12 --
;    13 
;    14 --without debug
;    15 
;    16 include builtins\VM\puts1.e         -- low-level console i/o
;    17 include builtins\VM\pUnassigned.e   -- opCallOnceYeNot etc
;    18 
;    19 --constant edetected = "exception detected, exception_pointers is #"
;    20 --constant comma = ",\n"
;    21 --constant erecord = "exception record is #"
;    22 --constant econtext = "exception context is #"
;    23 
;    24 constant ecode = "exception code #"
;    25 constant sigsegv = "SIGSEGV"
;    26 constant eat = " at #"
;    27 constant eaxis = "eax: ", ebxis = "ebx: ", ecxis = "ecx: ", edxis = "edx: ", esiis = "esi: ", ediis = "edi: "
;    28 --          (the above constants are rudely patched to rax..rdi under 64-bit, but later restored, btw.)
;    29 constant r10is = "r10: ", r11is = "r11: ", r15is = "r15: "
;    30 --constant setuef = "SetUnhandledExceptionFilter is #"
;    31 
;    32 integer finit = 0
;    33 
;    34 #ilASM{ jmp :!opCallOnceYeNot
                jmp :!opCallOnceYeNot     ;#00462966: 351 88FEFFFF               v  00 00  1   1      
;    35 
;    36   :>initFEH                         -- same as :<exch64 on PE64, and /not/ called at startup in that case
;    37 -----------                         -- (I needed "" in the optable, but it only exists on PE64)
;    38     [PE32,ELF32,ELF64]
;    39         cmp [finit],0
                cmp dword[#00402164] (finit),0  ;#0046296B: 203075 64214000 00         u  00 00  2   2      
;    40         jne :dont_do_everything_twice
                jne #0046298A             ;#00462972: 165 16                     v  00 00  1   3      
;    41         mov [finit],1
                mov [#00402164] (finit), dword 1  ;#00462974: 307005 64214000 01000000   uv 00 00  1   4      
;    42     [PE32]
;    43 --DEV temp (passed...)
;    44 --      mov edi,[setuef]            -- "SetUnhandledExceptionFilter is #"
;    45 --      call :%puts1
;    46 --      mov esi,:sehcall
;    47 --      mov edx,[esi+2]
;    48 --      mov edx,[edx]
;    49 --      push 1                      -- cr
;    50 --      call :%puthex32
;    51 --DEV /temp
;    52         mov eax,:finalExceptionHandler
                mov eax,#0046298B         ;#0046297E: 270 8B294600               vu 01 00  1   4      
;    53         push eax                                    -- lpTopLevelExceptionFilter
                push eax                  ;#00462983: 120                        uv 00 01  1   5      
;    54 --::sehcall
;    55         call "kernel32.dll","SetUnhandledExceptionFilter"
                call [SetUnhandledExceptionFilter]  ;#00462984: 377025 B0104000            np 00 00  2   6      
;    56 --/*
;    57     [PE64]
;    58         mov rcx,rsp -- put 2 copies of rsp onto the stack...
;    59         push rsp
;    60         push rcx
;    61         or rsp,8    -- [rsp] is now 1st or 2nd copy:
;    62                     -- if on entry rsp was xxx8: both copies remain on the stack
;    63                     -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them (+8)
;    64                     -- obviously rsp is now xxx8, whatever alignment we started with
;    65         sub rsp,8*5
;    66         mov rcx,:finalExceptionHandler              -- lpTopLevelExceptionFilter
;    67         mov [rsp],rcx
;    68         call "kernel32.dll","SetUnhandledExceptionFilter"
;    69 --      add rsp,8*5
;    70 --      pop rsp     -- restore, equivalent to rsp += (either #08 or #10)
;    71         mov rsp,[rsp+8*5]   -- equivalent to the add/pop
;    72 --*/
;    73     [ELF32]
;    74         push 0
;    75         push 4  -- SA_SIGINFO
;    76         push 0
;    77         push :my_signal_handler
;    78         mov eax, 67 -- SYSCALL_SIGACTION (67==#43)
;    79         mov ebx, 11 -- SIGSEGV 
;    80         mov ecx,esp
;    81         xor edx, edx 
;    82         int 0x80
;    83         add esp,16
;    84         xor ebx,ebx             -- (common requirement after int 0x80)
;    85 -- nah, methinks we want sigaction...
;    86 --      --; install signal handler 
;    87 --      mov eax,48  -- SYSCALL_SIGNAL ( syscall to function signal() )
;    88 --      mov ebx,11  -- signal id SIGSEGV 
;    89 --      mov ecx,:my_signal_handler 
;    90 --      int 0x80 
;    91 --      xor ebx,ebx             -- (common requirement after int 0x80)
;    92 --#     Name                        Registers                                                                                                               Definition
;    93 --                                  eax     ebx                     ecx                     edx                     esi                     edi
;    94 --67    sys_sigaction               0x43    int sig                 const struct old_sigaction *act struct old_sigaction *oact  -           -               arch/mips/kernel/signal.c:300
;    95 
;    96 --48        sys_signal                  0x30    int sig                 __sighandler_t handler  -                       -                       -               kernel/signal.c:2683
;    97 --67        sys_sigaction               0x43    int sig                 const struct old_sigaction *act struct old_sigaction *oact  -           -               arch/mips/kernel/signal.c:300
;    98 --119       sys_sigreturn               0x77    struct pt_regs *regs    -                       -                       -                       -               arch/alpha/kernel/entry.S:758
;    99 --see also SYSCALL_SIGNAL below (best bet?)
;   100 -- got it!: http://syprog.blogspot.co.uk/2011/10/iterfacing-linux-signals.html (saved in edita14)
;   101     [ELF64]
;   102 --%rax  System call             %rdi                    %rsi                            %rdx                    %rcx                    %r8                     %r9
;   103 --13        sys_rt_sigaction        int sig                 const struct sigaction *act     struct sigaction *oact  size_t sigsetsize
;   104         -- (untested: may need more space: 8 qw (of 0) for the mask, restore function, and "push 0x04000004 -- SA_SIGINFO or SA_RESTORER", see example64.asm)
;   105         push 4  -- SA_SIGINFO
;   106         push :my_signal_handler
;   107         xor r10,r10     -- (may need to be 8)
;   108         xor rcx,rcx     -- (copy "", in case it /is/ rcx not r10 for system calls)
;   109         xor rdx,rdx
;   110         mov rsi,rsp
;   111         mov rdi,11  -- SIGSEGV
;   112         mov rax,13  -- sys_rt_sigaction
;   113         syscall
;   114         add rsp,16
;   115     [PE32,ELF32,ELF64]
;   116       ::dont_do_everything_twice
;   117         ret
                ret                       ;#0046298A: 303                        np 00 00  2   8      
;   118 
;   119 
;   120 --  [PE]
;   121     [PE32]
;   122       ::finalExceptionHandler
;   123         xor ebx,ebx -- important!!
                xor ebx,ebx               ;#0046298B: 061333                     uv 08 08  1  10      
;   124 
;   125 --      call :lowlevel              -- (temp)
;   126 
;   127         mov esi,[esp+4]             -- EXCEPTION_POINTERS
                mov esi,[esp+4]           ;#0046298D: 213164044 04               vu 40 10  1  10      
;   128         mov edi,[esi]               -- EXCEPTION_RECORD
                mov edi,[esi]             ;#00462991: 213076                     uv 80 40  1  13    *40*
;   129         mov esi,[esi+4]             -- CONTEXT_RECORD
                mov esi,[esi+4]           ;#00462993: 213166 04                  vu 40 40  1  13      
;   130         mov ecx,[edi]               -- exception_code
                mov ecx,[edi]             ;#00462996: 213017                     uv 02 80  1  16    *80*
;   131         mov edx,[esi+184]           -- or_eip (exception_addr)
                mov edx,[esi+184]         ;#00462998: 213226 B8000000            vu 04 40  1  16      
;   132         mov ebp,[esi+180]           -- or_ebp (restore)
                mov ebp,[esi+180]         ;#0046299E: 213256 B4000000            uv 20 40  1  17      
;   133         mov edi,esp                 -- (in case :!fehDiag not called)
                mov edi,esp               ;#004629A4: 213374                     vu 80 10  1  17      
;   134         mov esp,[esi+196]           -- or_esp
                mov esp,[esi+196]         ;#004629A6: 213246 C4000000            uv 10 40  1  18      
;   135 
;   136 --EXCEPT
;   137 --      cmp [ebp+16],ebx
;   138 --      je @f
;   139 --          -- exception handler!=NULL:
;   140 --          mov eax,:!iDiag
;   141 --          cmp eax,ebx
;   142 --          je @f                   -- (crash in the -nodiag case)
;   143 --          mov [esi+172],ecx       -- exception code (in or_ecx)
;   144 --          mov [esi+168],edx       -- exception address (in or_edx)
;   145 --          mov [esi+184],::fhthrow -- replace or_eip
;   146 --          mov eax,-1              -- EXCEPTION_CONTINUE_EXECUTION  (0xFFFFFFFF)
;   147 --          ret
;   148 --    ::fhthrow
;   149 --          mov al,30               -- e30ume
;   150 --          jmp :!iDiag
;   151 --    @@:
;   152 
;   153         -- special cases:
;   154         cmp edx,:!blockfound
                cmp edx,#004635B9         ;#004629AC: 201372 B9354600            vu 00 04  1  18      
;   155         jne @f
                jne #004629C8             ;#004629B2: 165 14                     v  00 00  1  19      
;   156             -- heap corruption: zero pTCB.pFree[idx] to minimise knock-on effects
;   157             push edi
                    push edi              ;#004629B4: 127                        uv 00 80  1  20      
;   158             push esi
                    push esi              ;#004629B5: 126                        vu 00 40  1  20      
;   159             mov edi,[esi+156]   -- or_edi
                    mov edi,[esi+156]     ;#004629B6: 213276 9C000000            uv 80 40  1  21      
;   160             mov esi,[esi+160]   -- or_esi
                    mov esi,[esi+160]     ;#004629BC: 213266 A0000000            vu 40 40  1  21      
;   161             mov [esi*4+edi+20],ebx  -- pTCB.pFree[idx]:=0 (see pHeap.e)
                    mov [edi+esi*4+20],ebx  ;#004629C2: 211134267 14               uv 00 C8  1  24    *C0*
;   162             pop esi
                    pop esi               ;#004629C6: 136                        vu 40 00  1  24      
;   163             pop edi
                    pop edi               ;#004629C7: 137                        uv 80 00  1  25      
;   164       @@:
;   165 
;   166         --  esi is context record (save everything once we get into :!fehDiag)
;   167         --  edx is exception address
;   168         --  ecx is exception code
;   169         --  ebx, ebp, and esp have been reset
;   170         call :!fehDiag              -- pdiagN.e, if loaded
                call #00463F51 (:!fehDiag)  ;#004629C8: 350 84150000               v  00 00  1  25      
;   171         -- (control does not return if called, unless looping)
;   172 --      add esp,4
;   173         mov esp,edi
                mov esp,edi               ;#004629CD: 213347                     uv 10 80  1  26      
;   174 
;   175         call :lowlevel              -- (not temp)
                call #004629DC            ;#004629CF: 350 08000000               v  00 00  1  26      
;   176 
;   177 --      call :%opClosem9
;   178 --      push dword[errcode]         -- uExitCode
;   179         push 1                      -- uExitCode
                push 1                    ;#004629D4: 152 01                     uv 00 00  1  27      
;   180         call "kernel32","ExitProcess"
                call [#0040103C] (ExitProcess)  ;#004629D6: 377025 3C104000            np 00 00  2  28      
;   181 
;   182       ::lowlevel
;   183         -- 
;   184         mov edi,[ecode]             -- "exception code #"
                mov edi,[#00402134] (ecode)  ;#004629DC: 213075 34214000            uv 80 00  1  30      
;   185         call :%puts1
                call #004627FE (:%puts1)  ;#004629E2: 350 17FEFFFF               v  00 00  1  30      
;   186         mov esi,[esp+8]             -- EXCEPTION_POINTERS
                mov esi,[esp+8]           ;#004629E7: 213164044 08               uv 40 10  1  31      
;   187         mov edi,[esi]               -- EXCEPTION_RECORD
                mov edi,[esi]             ;#004629EB: 213076                     uv 80 40  1  34 40 *40*
;   188         mov edx,[edi]               -- exception_code
                mov edx,[edi]             ;#004629ED: 213027                     uv 04 80  1  37 80 *80*
;   189         push 0                      -- no cr
                push 0                    ;#004629EF: 152 00                     vu 00 00  1  37      
;   190         call :%puthex32
                call #0046283B (:%puthex32)  ;#004629F1: 350 45FEFFFF               v  00 00  1  38      
;   191         mov edi,[eat]               -- " at #"
                mov edi,[#0040213C] (eat)  ;#004629F6: 213075 3C214000            uv 80 00  1  39      
;   192         call :%puts1
                call #004627FE (:%puts1)  ;#004629FC: 350 FDFDFFFF               v  00 00  1  39      
;   193         mov esi,[esp+8]             -- EXCEPTION_POINTERS
                mov esi,[esp+8]           ;#00462A01: 213164044 08               uv 40 10  1  40      
;   194         mov ecx,[esi+4]             -- CONTEXT_RECORD
                mov ecx,[esi+4]           ;#00462A05: 213116 04                  uv 02 40  1  43 40 *40*
;   195         mov edx,[ecx+184]           -- or_eip
                mov edx,[ecx+184]         ;#00462A08: 213221 B8000000            uv 04 02  1  46 02 *02*
;   196         push 1                      -- cr
                push 1                    ;#00462A0E: 152 01                     vu 00 00  1  46      
;   197         call :%puthex32
                call #0046283B (:%puthex32)  ;#00462A10: 350 26FEFFFF               v  00 00  1  47      
;   198 
;   199         mov edi,[eaxis]             -- "eax: "
                mov edi,[#00402140] (eaxis)  ;#00462A15: 213075 40214000            uv 80 00  1  48      
;   200         call :%puts1
                call #004627FE (:%puts1)  ;#00462A1B: 350 DEFDFFFF               v  00 00  1  48      
;   201         mov esi,[esp+8]             -- EXCEPTION_POINTERS
                mov esi,[esp+8]           ;#00462A20: 213164044 08               uv 40 10  1  49      
;   202         mov ecx,[esi+4]             -- CONTEXT_RECORD
                mov ecx,[esi+4]           ;#00462A24: 213116 04                  uv 02 40  1  52 40 *40*
;   203         mov edx,[ecx+176]           -- or_eax
                mov edx,[ecx+176]         ;#00462A27: 213221 B0000000            uv 04 02  1  55 02 *02*
;   204         push 1                      -- cr
                push 1                    ;#00462A2D: 152 01                     vu 00 00  1  55      
;   205         call :%puthex32
                call #0046283B (:%puthex32)  ;#00462A2F: 350 07FEFFFF               v  00 00  1  56      
;   206         mov edi,[ebxis]             -- "ebx: "
                mov edi,[#00402144] (ebxis)  ;#00462A34: 213075 44214000            uv 80 00  1  57      
;   207         call :%puts1
                call #004627FE (:%puts1)  ;#00462A3A: 350 BFFDFFFF               v  00 00  1  57      
;   208         mov esi,[esp+8]             -- EXCEPTION_POINTERS
                mov esi,[esp+8]           ;#00462A3F: 213164044 08               uv 40 10  1  58      
;   209         mov ecx,[esi+4]             -- CONTEXT_RECORD
                mov ecx,[esi+4]           ;#00462A43: 213116 04                  uv 02 40  1  61 40 *40*
;   210         mov edx,[ecx+164]           -- or_ebx
                mov edx,[ecx+164]         ;#00462A46: 213221 A4000000            uv 04 02  1  64 02 *02*
;   211         push 1                      -- cr
                push 1                    ;#00462A4C: 152 01                     vu 00 00  1  64      
;   212         call :%puthex32
                call #0046283B (:%puthex32)  ;#00462A4E: 350 E8FDFFFF               v  00 00  1  65      
;   213         mov edi,[ecxis]             -- "ecx: "
                mov edi,[#00402148] (ecxis)  ;#00462A53: 213075 48214000            uv 80 00  1  66      
;   214         call :%puts1
                call #004627FE (:%puts1)  ;#00462A59: 350 A0FDFFFF               v  00 00  1  66      
;   215         mov esi,[esp+8]             -- EXCEPTION_POINTERS
                mov esi,[esp+8]           ;#00462A5E: 213164044 08               uv 40 10  1  67      
;   216         mov ecx,[esi+4]             -- CONTEXT_RECORD
                mov ecx,[esi+4]           ;#00462A62: 213116 04                  uv 02 40  1  70 40 *40*
;   217         mov edx,[ecx+172]           -- or_ecx
                mov edx,[ecx+172]         ;#00462A65: 213221 AC000000            uv 04 02  1  73 02 *02*
;   218         push 1                      -- cr
                push 1                    ;#00462A6B: 152 01                     vu 00 00  1  73      
;   219         call :%puthex32
                call #0046283B (:%puthex32)  ;#00462A6D: 350 C9FDFFFF               v  00 00  1  74      
;   220         mov edi,[edxis]             -- "edx: "
                mov edi,[#0040214C] (edxis)  ;#00462A72: 213075 4C214000            uv 80 00  1  75      
;   221         call :%puts1
                call #004627FE (:%puts1)  ;#00462A78: 350 81FDFFFF               v  00 00  1  75      
;   222         mov esi,[esp+8]             -- EXCEPTION_POINTERS
                mov esi,[esp+8]           ;#00462A7D: 213164044 08               uv 40 10  1  76      
;   223         mov ecx,[esi+4]             -- CONTEXT_RECORD
                mov ecx,[esi+4]           ;#00462A81: 213116 04                  uv 02 40  1  79 40 *40*
;   224         mov edx,[ecx+168]           -- or_edx
                mov edx,[ecx+168]         ;#00462A84: 213221 A8000000            uv 04 02  1  82 02 *02*
;   225         push 1                      -- cr
                push 1                    ;#00462A8A: 152 01                     vu 00 00  1  82      
;   226         call :%puthex32
                call #0046283B (:%puthex32)  ;#00462A8C: 350 AAFDFFFF               v  00 00  1  83      
;   227         mov edi,[esiis]             -- "esi: "
                mov edi,[#00402150] (esiis)  ;#00462A91: 213075 50214000            uv 80 00  1  84      
;   228         call :%puts1
                call #004627FE (:%puts1)  ;#00462A97: 350 62FDFFFF               v  00 00  1  84      
;   229         mov esi,[esp+8]             -- EXCEPTION_POINTERS
                mov esi,[esp+8]           ;#00462A9C: 213164044 08               uv 40 10  1  85      
;   230         mov ecx,[esi+4]             -- CONTEXT_RECORD
                mov ecx,[esi+4]           ;#00462AA0: 213116 04                  uv 02 40  1  88 40 *40*
;   231         mov edx,[ecx+160]           -- or_esi
                mov edx,[ecx+160]         ;#00462AA3: 213221 A0000000            uv 04 02  1  91 02 *02*
;   232         push 1                      -- cr
                push 1                    ;#00462AA9: 152 01                     vu 00 00  1  91      
;   233         call :%puthex32
                call #0046283B (:%puthex32)  ;#00462AAB: 350 8BFDFFFF               v  00 00  1  92      
;   234         mov edi,[ediis]             -- "edi: "
                mov edi,[#00402154] (ediis)  ;#00462AB0: 213075 54214000            uv 80 00  1  93      
;   235         call :%puts1
                call #004627FE (:%puts1)  ;#00462AB6: 350 43FDFFFF               v  00 00  1  93      
;   236         mov esi,[esp+8]             -- EXCEPTION_POINTERS
                mov esi,[esp+8]           ;#00462ABB: 213164044 08               uv 40 10  1  94      
;   237         mov ecx,[esi+4]             -- CONTEXT_RECORD
                mov ecx,[esi+4]           ;#00462ABF: 213116 04                  uv 02 40  1  97 40 *40*
;   238         mov edx,[ecx+156]           -- or_edi
                mov edx,[ecx+156]         ;#00462AC2: 213221 9C000000            uv 04 02  1 100 02 *02*
;   239         push 1                      -- cr
                push 1                    ;#00462AC8: 152 01                     vu 00 00  1 100      
;   240         call :%puthex32
                call #0046283B (:%puthex32)  ;#00462ACA: 350 6CFDFFFF               v  00 00  1 101      
;   241 
;   242         ret
                ret                       ;#00462ACF: 303                        np 00 00  2 102      
;   243 
;   244     [PE64]
;   245   :<exch64
;   246 ----------
;   247 --DEV you should be able to debug this with fdbg no problem... (trap and use Ctrl F12 to pass exception to handler)
;   248 --  qword[r8+248] == context.Rip
;   249 --typedef EXCEPTION_DISPOSITION
;   250 --(*PEXCEPTION_ROUTINE)(
;   251 --  IN PEXCEPTION_RECORD ExceptionRecord,           -- rcx
;   252 --  IN ULONG64 EstablisherFrame,                    -- rdx
;   253 --  IN OUT PCONTEXT ContextRecord,                  -- r8
;   254 --  IN OUT PDISPATCHER_CONTEXT DispatcherContext);  -- r9
;   255 
;   256         xor rbx,rbx -- important!!
;   257 
;   258         mov [rsp+8],rcx             -- copy actual param into shadow space!
;   259         mov [rsp+24],r8             -- (neither of these are temp!)
;   260 
;   261         call :lowlevel              -- (temp) [DEV]
;   262         mov rcx,[rsp+8]             --   ""
;   263         mov r8,[rsp+24]             --   ""
;   264 
;   265 --/*
;   266 --      mov rsi,[rsp+8]             -- EXCEPTION_POINTERS
;   267 --      mov rdi,[rsi]               -- EXCEPTION_RECORD
;   268         mov rdi,[rcx]               -- EXCEPTION_RECORD
;   269 --      mov rsi,[rsi+8]             -- CONTEXT_RECORD
;   270         mov rsi,[rcx+8]             -- CONTEXT_RECORD
;   271         mov rdx,[rsi+248]           -- DWORD64 Rip (exception_addr)
;   272 --  add qword[r8+248],2
;   273         mov ecx,dword[rdi]          -- exception_code (DWORD)
;   274         mov rbp,[rsi+160]           -- DWORD64 Rbp (restore)
;   275         mov rdi,rsp                 -- (in case :!fehDiag not called)
;   276         mov rsp,[rsi+152]           -- DWORD64 Rsp (restore)
;   277 
;   278         -- special cases:
;   279 --      cmp rdx,:!blockfound
;   280         cmp edx,:!blockfound
;   281         jne @f
;   282             -- heap corruption: zero pTCB.pFree[idx] to minimise knock-on effects
;   283             push rdi
;   284             push rsi
;   285             mov rdi,[rsi+176]       -- DWORD64 Rdi
;   286             mov rsi,[rsi+168]       -- DWORD64 Rsi
;   287             mov [rsi*4+rdi+32],rbx  -- pTCB.pFree[idx]:=0 (see pHeap.e)
;   288             pop rsi
;   289             pop rdi
;   290       @@:
;   291 --*/
;   292         mov rdx,[r8+248]            -- DWORD64 context.Rip
;   293         mov ecx,[rcx]               -- exception_code (DWORD)
;   294         mov rbp,[r8+160]            -- DWORD64 context.Rbp (restore)
;   295         mov rdi,rsp                 -- (in case :!fehDiag not called)
;   296         mov rsp,[r8+152]            -- DWORD64 context.Rsp (restore)
;   297         mov rsi,r8
;   298 
;   299 --EXCEPT
;   300 --      cmp [rbp+32],rbx
;   301 --      je @f
;   302 --          -- exception handler!=NULL:
;   303 --          mov rax,:!iDiag
;   304 --          cmp rax,rbx
;   305 --          je @f                   -- (crash in the -nodiag case)
;   306 --          mov [r8+128],rcx        -- exception code (in context.Rcx)
;   307 --          mov [r8+136],rdx        -- exception address (in context.Rdx)
;   308 --          mov [r8+248],::fhthrow  -- context.Rip
;   309 --          mov eax,-1              -- EXCEPTION_CONTINUE_EXECUTION  (0xFFFFFFFF)
;   310 --          ret
;   311 --    ::fhthrow
;   312 --          mov al,30               -- e30ume
;   313 --          jmp :!iDiag
;   314 --    @@:
;   315 
;   316         --  rsi is context record (save everything once we get into :!fehDiag)
;   317         --  rdx is exception address
;   318         --  ecx is exception code (DWORD)
;   319         --  rbx, rbp, and rsp have been reset
;   320         call :!fehDiag              -- pdiagN.e, if loaded
;   321         -- (control does not return if called, unless looping)
;   322 --      add rsp,8
;   323         mov rsp,rdi
;   324 
;   325         call :lowlevel              -- (not temp, that copy rcx is rqd)
;   326 
;   327 --      call :!opClosem9
;   328 --      add rsp,8
;   329 --      push dword[errcode]         -- uExitCode
;   330 
;   331         sub rsp,8*5
;   332         mov rcx,1                   -- uExitCode
;   333         call "kernel32","ExitProcess"
;   334 
;   335       ::lowlevel
;   336 
;   337         mov rdi,[ecode]             -- "exception code #"
;   338         call :%puts1
;   339         mov rcx,[rsp+16]
;   340         mov edx,[rcx]               -- exception_code (DWORD)
;   341 --      mov rdx,[rcx]               -- exception_code (DWORD)
;   342         push 0                      -- no cr
;   343         call :%puthex32
;   344         mov rdi,[eat]               -- " at #"
;   345         call :%puts1
;   346         mov rcx,[rsp+16]
;   347         mov rdx,[rcx+16]            -- exception address
;   348         push 1                      -- cr
;   349         call :%puthex64
;   350 --!/*
;   351 --typedef struct _EXCEPTION_RECORD {
;   352 --  DWORD                  ExceptionCode;
;   353 --  DWORD                  ExceptionFlags;
;   354 --  struct _EXCEPTION_RECORD    *ExceptionRecord;
;   355 --  PVOID                  ExceptionAddress;
;   356 
;   357 --      mov rsi,[rsp+16]            -- EXCEPTION_POINTERS
;   358 --      mov rdi,[rsi]               -- EXCEPTION_RECORD
;   359 --      mov edx,[rdi]               -- exception_code (DWORD)
;   360 --      push 0                      -- no cr
;   361 --      call :%puthex32
;   362 --      mov rdi,[eat]               -- " at #"
;   363 --      call :%puts1
;   364 --      mov rsi,[rsp+16]            -- EXCEPTION_POINTERS
;   365 --      mov rcx,[rsi+8]             -- CONTEXT_RECORD
;   366 --      mov rdx,[rcx+248]           -- DWORD64 Rip
;   367 
;   368 -- good, matches:
;   369 --      mov r8,[rsp+32]
;   370 --      mov rdx,[r8+248]            -- DWORD64 context.Rip
;   371 --      push 1
;   372 --      call :%puthex64
;   373 
;   374         mov rdi,[eaxis]             -- "rax: "
;   375         call :puts1r
;   376 --      mov rsi,[rsp+16]            -- EXCEPTION_POINTERS
;   377 --      mov rcx,[rsi+8]             -- CONTEXT_RECORD
;   378 --      mov rdx,[rcx+120]           -- DWORD64 Rax
;   379         mov r8,[rsp+32]
;   380         mov rdx,[r8+120]            -- DWORD64 context.Rax
;   381         push 1                      -- cr
;   382         call :%puthex64
;   383         mov rdi,[ebxis]             -- "rbx: "
;   384         call :puts1r
;   385 --      mov rsi,[rsp+16]            -- EXCEPTION_POINTERS
;   386 --      mov rcx,[rsi+8]             -- CONTEXT_RECORD
;   387 --      mov rdx,[rcx+144]           -- DWORD64 Rbx
;   388         mov r8,[rsp+32]
;   389         mov rdx,[r8+144]            -- DWORD64 context.Rbx
;   390         push 1                      -- cr
;   391         call :%puthex64
;   392         mov rdi,[ecxis]             -- "rcx: "
;   393         call :puts1r
;   394 --      mov rsi,[rsp+16]            -- EXCEPTION_POINTERS
;   395 --      mov rcx,[rsi+8]             -- CONTEXT_RECORD
;   396 --      mov rdx,[rcx+128]           -- DWORD64 Rcx
;   397         mov r8,[rsp+32]
;   398         mov rdx,[r8+128]            -- DWORD64 context.Rcx
;   399         push 1                      -- cr
;   400         call :%puthex64
;   401         mov rdi,[edxis]             -- "rdx: "
;   402         call :puts1r
;   403 --      mov rsi,[rsp+16]            -- EXCEPTION_POINTERS
;   404 --      mov rcx,[rsi+8]             -- CONTEXT_RECORD
;   405 --      mov rdx,[rcx+136]           -- DWORD64 Rdx
;   406         mov r8,[rsp+32]
;   407         mov rdx,[r8+136]            -- DWORD64 context.Rdx
;   408         push 1                      -- cr
;   409         call :%puthex64
;   410         mov rdi,[esiis]             -- "rsi: "
;   411         call :puts1r
;   412 --      mov rsi,[rsp+16]            -- EXCEPTION_POINTERS
;   413 --      mov rcx,[rsi+8]             -- CONTEXT_RECORD
;   414 --      mov rdx,[rcx+168]           -- DWORD64 Rsi
;   415         mov r8,[rsp+32]
;   416         mov rdx,[r8+168]            -- DWORD64 context.Rsi
;   417         push 1                      -- cr
;   418         call :%puthex64
;   419         mov rdi,[ediis]             -- "rdi: "
;   420         call :puts1r
;   421 --      mov rsi,[rsp+16]            -- EXCEPTION_POINTERS
;   422 --      mov rcx,[rsi+8]             -- CONTEXT_RECORD
;   423 --      mov rdx,[rcx+176]           -- DWORD64 Rdi
;   424         mov r8,[rsp+32]
;   425         mov rdx,[r8+176]            -- DWORD64 context.Rdi
;   426         push 1                      -- cr
;   427         call :%puthex64
;   428 
;   429 --/*
;   430   DWORD64 Dr7;
;   431   DWORD64 Rax;  120
;   432   DWORD64 Rcx;  128
;   433   DWORD64 Rdx;  136
;   434   DWORD64 Rbx;  144
;   435   DWORD64 Rsp;  152
;   436   DWORD64 Rbp;  160
;   437   DWORD64 Rsi;  168
;   438   DWORD64 Rdi;  176
;   439   DWORD64 R8;   184
;   440   DWORD64 R9;   192
;   441   DWORD64 R10;  200
;   442   DWORD64 R11;  208
;   443   DWORD64 R12;  216
;   444   DWORD64 R13;  224
;   445   DWORD64 R14;  232
;   446   DWORD64 R15;  240
;   447   DWORD64 Rip;
;   448 --*/
;   449         mov rdi,[r10is]             -- "r10: "
;   450         call :%puts1
;   451 --      mov rsi,[rsp+16]            -- EXCEPTION_POINTERS
;   452 --      mov rcx,[rsi+8]             -- CONTEXT_RECORD
;   453 --      mov rdx,[rcx+176]           -- DWORD64 Rdi
;   454         mov r8,[rsp+32]
;   455         mov rdx,[r8+200]            -- DWORD64 context.R10
;   456         push 1                      -- cr
;   457         call :%puthex64
;   458         mov rdi,[r11is]             -- "r11: "
;   459         call :%puts1
;   460 --      mov rsi,[rsp+16]            -- EXCEPTION_POINTERS
;   461 --      mov rcx,[rsi+8]             -- CONTEXT_RECORD
;   462 --      mov rdx,[rcx+176]           -- DWORD64 Rdi
;   463         mov r8,[rsp+32]
;   464         mov rdx,[r8+208]            -- DWORD64 context.R11
;   465         push 1                      -- cr
;   466         call :%puthex64
;   467         mov rdi,[r15is]             -- "r15: "
;   468         call :%puts1
;   469 --      mov rsi,[rsp+16]            -- EXCEPTION_POINTERS
;   470 --      mov rcx,[rsi+8]             -- CONTEXT_RECORD
;   471 --      mov rdx,[rcx+176]           -- DWORD64 Rdi
;   472         mov r8,[rsp+32]
;   473         mov rdx,[r8+240]            -- DWORD64 context.R15
;   474         push 1                      -- cr
;   475         call :%puthex64
;   476         ret
;   477 
;   478       ::puts1r
;   479         push rdi
;   480         mov byte[rbx+rdi*4],'r'     -- eax->rax etc
;   481         call :%puts1
;   482         pop rdi
;   483         mov byte[rbx+rdi*4],'e'     -- restore (in case values are shared)
;   484 --!*/
;   485         ret
;   486 
;   487     [ELF32]
;   488       ::my_signal_handler
;   489         xor ebx,ebx -- important!!
;   490 
;   491 --DEV removed for now (18/4/16):
;   492 --!/*
;   493         call :lowlevel              -- (temp)
;   494 
;   495         mov esi,[esp+12]            -- 3rd param (siginfo_t)
;   496         mov edx,[esi+76]            -- eip
;   497         mov ebp,[esi+44]
;   498         mov edi,esp                 -- (in case :!fehDiag not called)
;   499         mov esp,[esi+48]
;   500 --      mov esi,[esp+4]             -- EXCEPTION_POINTERS
;   501 --      mov edi,[esi]               -- EXCEPTION_RECORD
;   502 --      mov esi,[esi+4]             -- CONTEXT_RECORD
;   503 --      mov ecx,[edi]               -- exception_code
;   504 --      mov edx,[esi+184]           -- or_eip (exception_addr)
;   505 --      mov ebp,[esi+180]           -- or_ebp (restore)
;   506 --      mov edi,esp                 -- (in case :!fehDiag not called)
;   507 --      mov esp,[esi+196]           -- or_esp
;   508 --
;   509 
;   510 --EXCEPT
;   511 --      cmp [ebp+16],ebx
;   512 --      je @f
;   513 --          -- exception handler!=NULL:
;   514 --          mov eax,:!iDiag
;   515 --          cmp eax,ebx
;   516 --          je @f                   -- (crash in the -nodiag case)
;   517 --          mov dword[esi+60],11    -- exception code, always SIGSEGV (in ecx)
;   518 --          mov [esi+56],edx        -- exception address (in edx)
;   519 --          mov [esi+76],::fhthrow
;   520 --          ret
;   521 --    ::fhthrow
;   522 --          mov al,30               -- e30ume
;   523 --          jmp :!iDiag
;   524 --    @@:
;   525 
;   526 --      -- special cases:
;   527 --      cmp edx,:!blockfound
;   528 --      jne @f
;   529 --          -- heap corruption: zero pTCB.pFree[idx] to minimise knock-on effects
;   530 --          push edi
;   531 --          push esi
;   532 --          mov edi,[esi+156]   -- or_edi
;   533 --          mov esi,[esi+160]   -- or_esi
;   534 --          mov [esi*4+edi+20],ebx  -- pTCB.pFree[idx]:=0 (see pHeap.e)
;   535 --          pop esi
;   536 --          pop edi
;   537 --    @@:
;   538 --
;   539         --  esi is context record (save everything once we get into :!fehDiag)
;   540         --  edx is exception address
;   541 --      --  ecx is exception code (would always be SIGSEGV)
;   542 --      --  ebx, ebp, and esp have been reset
;   543         call :!fehDiag              -- pdiagN.e, if loaded
;   544 --      -- (control does not return if called, unless looping)
;   545 ----        add esp,4
;   546         mov esp,edi
;   547 --
;   548 --!*/
;   549         call :lowlevel              -- (not temp)
;   550 
;   551 --      call :%opClosem9
;   552 
;   553         xor     ebx, ebx 
;   554         mov     eax, 1  -- SYSCALL_EXIT 
;   555         int     0x80 
;   556 
;   557       ::lowlevel
;   558 
;   559         mov edi,[sigsegv]           -- "SIGSEGV"
;   560         call :%puts1
;   561         mov edi,[eat]               -- " at #"
;   562         call :%puts1
;   563         mov eax,[esp+16]            -- 3rd param
;   564         mov edx,[eax+76]            -- eip
;   565         push 1                      -- cr
;   566         call :%puthex32
;   567 
;   568         mov edi,[eaxis]             -- "eax: "
;   569         call :%puts1
;   570         mov eax,[esp+16]            -- 3rd param
;   571         mov edx,[eax+64]            -- eax
;   572         push 1                      -- cr
;   573         call :%puthex32
;   574         mov edi,[ebxis]             -- "ebx: "
;   575         call :%puts1
;   576         mov eax,[esp+16]            -- 3rd param
;   577         mov edx,[eax+52]            -- ebx
;   578         push 1                      -- cr
;   579         call :%puthex32
;   580         mov edi,[ecxis]             -- "ecx: "
;   581         call :%puts1
;   582         mov eax,[esp+16]            -- 3rd param
;   583         mov edx,[eax+60]            -- ecx
;   584         push 1                      -- cr
;   585         call :%puthex32
;   586         mov edi,[edxis]             -- "edx: "
;   587         call :%puts1
;   588         mov eax,[esp+16]            -- 3rd param
;   589         mov edx,[eax+56]            -- edx
;   590         push 1                      -- cr
;   591         call :%puthex32
;   592         mov edi,[esiis]             -- "esi: "
;   593         call :%puts1
;   594         mov eax,[esp+16]            -- 3rd param
;   595         mov edx,[eax+40]            -- esi
;   596         push 1                      -- cr
;   597         call :%puthex32
;   598         mov edi,[ediis]             -- "edi: "
;   599         call :%puts1
;   600         mov eax,[esp+16]            -- 3rd param
;   601         mov edx,[eax+36]            -- edi
;   602         push 1                      -- cr
;   603         call :%puthex32
;   604 
;   605         ret
;   606 
;   607 --      .edi           rd 1     ;36
;   608 --      .esi           rd 1     ;40
;   609 --      .ebp           rd 1     ;44
;   610 --      .esp           rd 1     ;48
;   611 --      .ebx           rd 1     ;52
;   612 --      .edx           rd 1     ;56
;   613 --      .ecx           rd 1     ;60
;   614 --      .eax           rd 1     ;64
;   615 --      .trapno        rd 1     ;68
;   616 --      .err           rd 1     ;72
;   617 --      .eip           rd 1     ;76 (correct)
;   618 --      .cs            rw 1     ;80
;   619 --      .__csh         rw 1     ;82
;   620 --      .eflags        rd 1     ;84
;   621 --      .esp_at_signal rd 1     ;88
;   622 
;   623     [ELF64]
;   624       ::my_signal_handler
;   625 
;   626         xor rbx,rbx -- important!!
;   627 
;   628         mov [rsp+16],rdx            -- copy actual param into shadow space!
;   629 
;   630         call :lowlevel              -- (temp)
;   631 
;   632         mov rsi,[rsp+24]            -- 3rd param
;   633         mov rdx,[rsi+0xA8]          -- rip
;   634         mov rbp,[rsi+0x78]
;   635         mov rdi,rsp                 -- (in case :!fehDiag not called)
;   636         mov rsp,[rsi+0xA0]
;   637 --      mov esi,[esp+4]             -- EXCEPTION_POINTERS
;   638 --      mov edi,[esi]               -- EXCEPTION_RECORD
;   639 --      mov esi,[esi+4]             -- CONTEXT_RECORD
;   640 --      mov ecx,[edi]               -- exception_code
;   641 --      mov edx,[esi+184]           -- or_eip (exception_addr)
;   642 --      mov ebp,[esi+180]           -- or_ebp (restore)
;   643 --      mov edi,esp                 -- (in case :!fehDiag not called)
;   644 --      mov esp,[esi+196]           -- or_esp
;   645 --
;   646 
;   647 --EXCEPT
;   648 --      cmp [rbp+32],rbx
;   649 --      je @f
;   650 --          -- exception handler!=NULL:
;   651 --          mov rax,:!iDiag
;   652 --          cmp rax,rbx
;   653 --          je @f                       -- (crash in the -nodiag case)
;   654 --          mov qword[rsi+0x98],11      -- exception code, always SIGSEGV (in rcx)
;   655 --          mov [rsi+0x88],rdx          -- exception address (in rdx)
;   656 --          mov [rsi+0xA8],::fhthrow    -- rip
;   657 --          ret
;   658 --    ::fhthrow
;   659 --          mov al,30               -- e30ume
;   660 --          jmp :!iDiag
;   661 --    @@:
;   662 
;   663 --  if [Rbp+32]!=0 then             -- if exception handler!=NULL then
;   664 --      ret
;   665 --    ::fhthrow (or maybe :!fehDiag or similar)
;   666 --  end if
;   667 
;   668 --      -- special cases:
;   669 --      cmp edx,:!blockfound
;   670 --      jne @f
;   671 --          -- heap corruption: zero pTCB.pFree[idx] to minimise knock-on effects
;   672 --          push edi
;   673 --          push esi
;   674 --          mov edi,[esi+156]   -- or_edi
;   675 --          mov esi,[esi+160]   -- or_esi
;   676 --          mov [esi*4+edi+20],ebx  -- pTCB.pFree[idx]:=0 (see pHeap.e)
;   677 --          pop esi
;   678 --          pop edi
;   679 --    @@:
;   680 --
;   681         --  rsi is context record (save everything once we get into :!fehDiag)
;   682         --  rdx is exception address
;   683 --      --  ecx is exception code
;   684         --  rbx, rbp, and rsp have been reset
;   685         call :!fehDiag              -- pdiagN.e, if loaded
;   686 --      -- (control does not return if called, unless looping)
;   687 ----        add esp,4
;   688         mov rsp,rdi
;   689 --
;   690         call :lowlevel              -- (not temp)
;   691 
;   692 --      call :%opClosem9
;   693 
;   694 --      mov rax,60  -- sys_exit
;   695         mov rax,231 -- sys_exit_group(rdi=int error_code) 
;   696         xor rdi,rdi
;   697         syscall
;   698 
;   699       ::lowlevel
;   700 
;   701         mov rdi,[sigsegv]           -- "SIGSEGV"
;   702         call :%puts1
;   703         mov rdi,[eat]               -- " at #"
;   704         call :%puts1
;   705         mov rdx,[rsp+32]            -- 3rd param
;   706         mov rdx,[rdx+0xA8]          -- rip
;   707         push 1                      -- cr
;   708         call :%puthex64
;   709 
;   710         mov rdi,[eaxis]             -- "eax: "
;   711         call :puts1r
;   712         mov rdx,[rsp+32]            -- 3rd param
;   713         mov rdx,[rdx+0x90]          -- rax
;   714         push 1                      -- cr
;   715         call :%puthex64
;   716         mov rdi,[ebxis]             -- "ebx: "
;   717         call :puts1r
;   718         mov rdx,[rsp+32]            -- 3rd param
;   719         mov rdx,[rdx+0x80]          -- rbx
;   720         push 1                      -- cr
;   721         call :%puthex64
;   722         mov rdi,[ecxis]             -- "ecx: "
;   723         call :puts1r
;   724         mov rdx,[rsp+32]            -- 3rd param
;   725         mov rdx,[rdx+0x98]          -- rcx
;   726         push 1                      -- cr
;   727         call :%puthex64
;   728         mov rdi,[edxis]             -- "edx: "
;   729         call :puts1r
;   730         mov rdx,[rsp+32]            -- 3rd param
;   731         mov rdx,[rdx+0x88]          -- rdx
;   732         push 1                      -- cr
;   733         call :%puthex64
;   734         mov rdi,[esiis]             -- "esi: "
;   735         call :puts1r
;   736         mov rdx,[rsp+32]            -- 3rd param
;   737         mov rdx,[rdx+0x70]          -- rsi
;   738         push 1                      -- cr
;   739         call :%puthex64
;   740         mov edi,[ediis]             -- "edi: "
;   741         call :puts1r
;   742         mov rdx,[rsp+32]            -- 3rd param
;   743         mov rdx,[rdx+0x68]          -- rdi
;   744         push 1                      -- cr
;   745         call :%puthex64
;   746 
;   747         ret
;   748 
;   749 --  .r8             dq  ?   ;0x28
;   750 --  .r9             dq  ?   ;0x30
;   751 --  .r10            dq  ?   ;0x38
;   752 --  .r11            dq  ?   ;0x40
;   753 --  .r12            dq  ?   ;0x48
;   754 --  .r13            dq  ?   ;0x50
;   755 --  .r14            dq  ?   ;0x58
;   756 --  .r15            dq  ?   ;0x60
;   757 --  .rdi            dq  ?   ;0x68
;   758 --  .rsi            dq  ?   ;0x70
;   759 --  .rbp            dq  ?   ;0x78
;   760 --  .rbx            dq  ?   ;0x80
;   761 --  .rdx            dq  ?   ;0x88
;   762 --  .rax            dq  ?   ;0x90
;   763 --  .rcx            dq  ?   ;0x98
;   764 --  .rsp            dq  ?   ;0xA0
;   765 --  .rip            dq  ?   ;0xA8
;   766 --  .eflags         dq  ?   ;0xB0
;   767 --  .cs             dw  ?   ;0xB8
;   768 --  .gs             dw  ?   ;0xBA
;   769 --  .fs             dw  ?   ;0xBC
;   770 --  .__pad0         dw  ?   ;0xBE
;   771 --  .err            dq  ?   ;0xC0
;   772 --  .trapno         dq  ?   ;0xC8
;   773 --  .oldmask        dq  ?   ;0xD0
;   774 --  .cr2            dq  ?   ;0xD8
;   775 --  .fpstate        dq  ?   ;0xE0
;   776 --  .reserved       rq  8   ;0xE8
;   777 
;   778       ::puts1r
;   779         push rdi
;   780         mov byte[rbx+rdi*4],'r'     -- eax->rax etc
;   781         call :%puts1
;   782         pop rdi
;   783         mov byte[rbx+rdi*4],'e'     -- restore (in case values are shared)
;   784         ret
;   785     []
;   786 
;   787 --::fin
;   788       }
;   789 
;   790 --/*
;   791 virtual at edx  ; exception_pointers
;   792     exception_record dd ?
;   793     context_record   dd ?
;   794 end virtual
;   795 
;   796 typedef struct _EXCEPTION_RECORD {
;   797   DWORD                    ExceptionCode;
;   798   DWORD                    ExceptionFlags;
;   799   struct _EXCEPTION_RECORD  *ExceptionRecord;
;   800   PVOID                    ExceptionAddress;
;   801   DWORD                    NumberParameters;
;   802   ULONG_PTR                ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];
;   803 } EXCEPTION_RECORD, *PEXCEPTION_RECORD;
;   804            
;   805 virtual at eax  ; exception_record
;   806     exception_code  dd ?
;   807     exception_flag  dd ?
;   808     nested          dd ?
;   809     exception_addr  dd ?
;   810     noof_params     dd ?
;   811     addtnl_data     dd ?
;   812 end virtual
;   813 
;   814 /* Exception record (32-bit version) */
;   815 typedef struct _EXCEPTION_RECORD32 {
;   816     DWORD   ExceptionCode;
;   817     DWORD   ExceptionFlags;
;   818     DWORD   ExceptionRecord;
;   819     DWORD   ExceptionAddress;
;   820     DWORD   NumberParameters;
;   821     DWORD   ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];
;   822 } EXCEPTION_RECORD32;
;   823 typedef EXCEPTION_RECORD32  *PEXCEPTION_RECORD32;
;   824 
;   825 /* Exception record (64-bit version) */
;   826 typedef struct _EXCEPTION_RECORD64 {
;   827     DWORD   ExceptionCode;
;   828     DWORD   ExceptionFlags;
;   829     DWORD64 ExceptionRecord;
;   830     DWORD64 ExceptionAddress;
;   831     DWORD   NumberParameters;
;   832     DWORD   __unusedAlignment;
;   833     DWORD64 ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];
;   834 } EXCEPTION_RECORD64;
;   835 typedef EXCEPTION_RECORD64  *PEXCEPTION_RECORD64;
;   836 
;   837 /* Pointers to exception and context records */
;   838 typedef struct _EXCEPTION_POINTERS {
;   839     PEXCEPTION_RECORD   ExceptionRecord;
;   840     PCONTEXT            ContextRecord;
;   841 } EXCEPTION_POINTERS;
;   842 typedef EXCEPTION_POINTERS  *PEXCEPTION_POINTERS;
;   843 
;   844 
;   845 typedef struct _CONTEXT {
;   846 0       DWORD   ContextFlags;
;   847 4       DWORD   Dr0;
;   848 8       DWORD   Dr1;
;   849 12      DWORD   Dr2;
;   850 16      DWORD   Dr3;
;   851 20      DWORD   Dr6;
;   852 24      DWORD   Dr7;
;   853 +112    FLOATING_SAVE_AREA FloatSave;
;   854 136     DWORD   SegGs;
;   855         DWORD   SegFs;
;   856         DWORD   SegEs;
;   857         DWORD   SegDs;
;   858         DWORD   Edi;
;   859         DWORD   Esi;
;   860         DWORD   Ebx;
;   861         DWORD   Edx;
;   862         DWORD   Ecx;
;   863         DWORD   Eax;
;   864         DWORD   Ebp;
;   865         DWORD   Eip;
;   866         DWORD   SegCs;
;   867         DWORD   EFlags;
;   868         DWORD   Esp;
;   869         DWORD   SegSs;
;   870         BYTE    ExtendedRegisters[MAXIMUM_SUPPORTED_EXTENSION];
;   871 } CONTEXT;
;   872 
;   873 virtual at eax  ; context_record
;   874 0   context_flags   dd ?
;   875 4   dr_0            dd ?    ; debug register 0
;   876 8   dr_1            dd ?
;   877 12  dr_2            dd ?
;   878 16  dr_3            dd ?
;   879 20  dr_6            dd ?
;   880 24  dr_7            dd ?
;   881 28  fp_cw           dd ?    ; control word
;   882 32  fp_sw           dd ?    ; status word
;   883 36  fp_tw           dd ?    ; tag word
;   884 40  fp_eo           dd ?    ; error offset
;   885 44  fp_es           dd ?    ; error selector
;   886 48  fp_do           dd ?    ; data offset
;   887 52  fp_ds           dd ?    ; data selector
;   888 56  fp_st0          dt ?    ; floating point register 0
;   889 66  fp_st1          dt ?
;   890 76  fp_st2          dt ?
;   891 86  fp_st3          dt ?
;   892 96  fp_st4          dt ?
;   893 106 fp_st5          dt ?
;   894 116 fp_st6          dt ?
;   895 126 fp_st7          dt ?
;   896 136 fp_cron         dd ?    ; ? Cr0NpxState ?
;   897 140 sr_gs           dd ?    ; gs register
;   898 144 sr_fs           dd ?    ; gs register
;   899 148 sr_es           dd ?    ; gs register
;   900 152 sr_ds           dd ?    ; gs register
;   901 156 or_edi          dd ?    ; edi
;   902 160 or_esi          dd ?    ; esi
;   903 164 or_ebx          dd ?
;   904 168 or_edx          dd ?
;   905 172 or_ecx          dd ?
;   906 176 or_eax          dd ?
;   907 180 or_ebp          dd ?
;   908 184 or_eip          dd ?        #B8 = 184 (tick)
;   909 188 or_cs           dd ?
;   910 192 or_eflags       dd ?
;   911 196 or_esp          dd ?
;   912 200 or_ss           dd ?
;   913 end virtual
;   914 
;   915 typedef struct DECLSPEC_ALIGN(16) _CONTEXT {
;   916 
;   917     //
;   918     // Register parameter home addresses.
;   919     //
;   920     // N.B. These fields are for convience - they could be used to extend the
;   921     //      context record in the future.
;   922     //
;   923 
;   924 0   DWORD64 P1Home;
;   925 8   DWORD64 P2Home;
;   926 16  DWORD64 P3Home;
;   927 24  DWORD64 P4Home;
;   928 32  DWORD64 P5Home;
;   929 40  DWORD64 P6Home;
;   930 
;   931     //
;   932     // Control flags.
;   933     //
;   934 
;   935 48  DWORD ContextFlags;
;   936 52  DWORD MxCsr;
;   937 
;   938     //
;   939     // Segment Registers and processor flags.
;   940     //
;   941 
;   942 56  WORD   SegCs;
;   943 58  WORD   SegDs;
;   944 60  WORD   SegEs;
;   945 62  WORD   SegFs;
;   946 64  WORD   SegGs;
;   947 66  WORD   SegSs;
;   948 68  DWORD EFlags;
;   949 
;   950     //
;   951     // Debug registers
;   952     //
;   953 
;   954 72  DWORD64 Dr0;
;   955 80  DWORD64 Dr1;
;   956 88  DWORD64 Dr2;
;   957 96  DWORD64 Dr3;
;   958 104 DWORD64 Dr6;
;   959 112 DWORD64 Dr7;
;   960 
;   961     //
;   962     // Integer registers.
;   963     //
;   964 
;   965 120 DWORD64 Rax;
;   966 128 DWORD64 Rcx;
;   967 136 DWORD64 Rdx;
;   968 144 DWORD64 Rbx;
;   969 152 DWORD64 Rsp;
;   970 160 DWORD64 Rbp;
;   971 168 DWORD64 Rsi;
;   972 176 DWORD64 Rdi;
;   973 184 DWORD64 R8;
;   974 192 DWORD64 R9;
;   975 200 DWORD64 R10;
;   976 208 DWORD64 R11;
;   977 216 DWORD64 R12;
;   978 224 DWORD64 R13;
;   979 232 DWORD64 R14;
;   980 240 DWORD64 R15;
;   981 
;   982     //
;   983     // Program counter.
;   984     //
;   985 
;   986 248 DWORD64 Rip;
;   987 
;   988     //
;   989     // Floating point state.
;   990     //
;   991 
;   992     union {
;   993         XMM_SAVE_AREA32 FltSave;
;   994         struct {
;   995             M128A Header[2];
;   996             M128A Legacy[8];
;   997             M128A Xmm0;
;   998             M128A Xmm1;
;   999             M128A Xmm2;
;  1000             M128A Xmm3;
;  1001             M128A Xmm4;
;  1002             M128A Xmm5;
;  1003             M128A Xmm6;
;  1004             M128A Xmm7;
;  1005             M128A Xmm8;
;  1006             M128A Xmm9;
;  1007             M128A Xmm10;
;  1008             M128A Xmm11;
;  1009             M128A Xmm12;
;  1010             M128A Xmm13;
;  1011             M128A Xmm14;
;  1012             M128A Xmm15;
;  1013         } DUMMYSTRUCTNAME;
;  1014     } DUMMYUNIONNAME;
;  1015 
;  1016     //
;  1017     // Vector registers.
;  1018     //
;  1019 
;  1020     M128A VectorRegister[26];
;  1021     DWORD64 VectorControl;
;  1022 
;  1023     //
;  1024     // Special debug control registers.
;  1025     //
;  1026 
;  1027     DWORD64 DebugControl;
;  1028     DWORD64 LastBranchToRip;
;  1029     DWORD64 LastBranchFromRip;
;  1030     DWORD64 LastExceptionToRip;
;  1031     DWORD64 LastExceptionFromRip;
;  1032 } CONTEXT, *PCONTEXT;
;  1033 
;  1034 
;  1035 STATUS_BREAKPOINT               = 80000003h
;  1036 STATUS_SINGLE_STEP              = 80000004h
;  1037 EXCEPTION_BREAKPOINT            = STATUS_BREAKPOINT
;  1038 EXCEPTION_SINGLE_STEP           = STATUS_SINGLE_STEP
;  1039 
;  1040 EXCEPTION_ACCESS_VIOLATION              = C0000005h         -- <-- we get this!
;  1041 EXCEPTION_DATATYPE_MISALIGNMENT         = 80000002h
;  1042 EXCEPTION_BREAKPOINT                    = 80000003h         -- <-- ie an int3
;  1043 EXCEPTION_SINGLE_STEP                   = 80000004h
;  1044 EXCEPTION_ARRAY_BOUNDS_EXCEEDED         = C000008Ch
;  1045 EXCEPTION_FLT_DENORMAL_OPERAND          = C000008Dh
;  1046 EXCEPTION_FLT_DIVIDE_BY_ZERO            = C000008Eh
;  1047 EXCEPTION_FLT_INEXACT_RESULT            = C000008Fh
;  1048 EXCEPTION_FLT_INVALID_OPERATION         = C0000090h
;  1049 EXCEPTION_FLT_OVERFLOW                  = C0000091h
;  1050 EXCEPTION_FLT_STACK_CHECK               = C0000092h
;  1051 EXCEPTION_FLT_UNDERFLOW                 = C0000093h
;  1052 EXCEPTION_INT_DIVIDE_BY_ZERO            = C0000094h
;  1053 EXCEPTION_INT_OVERFLOW                  = C0000095h
;  1054 EXCEPTION_PRIV_INSTRUCTION              = C0000096h
;  1055 EXCEPTION_IN_PAGE_ERROR                 = C0000006h
;  1056 EXCEPTION_ILLEGAL_INSTRUCTION           = C000001Dh
;  1057 EXCEPTION_NONCONTINUABLE_EXCEPTION      = C0000025h
;  1058 EXCEPTION_STACK_OVERFLOW                = C00000FDh
;  1059 EXCEPTION_INVALID_DISPOSITION           = C0000026h
;  1060 EXCEPTION_GUARD_PAGE                    = 80000001h
;  1061 EXCEPTION_INVALID_HANDLE                = C0000008h
;  1062 EXCEPTION_POSSIBLE_DEADLOCK             = C0000194h
;  1063 CONTROL_C_EXIT                          = C000013Ah
;  1064 EXCEPTION_BCC_FATAL                     = 0EEFFACEh
;  1065 EXCEPTION_BCC_NORMAL                    = 0EEFFAE6h
;  1066 DBG_CONTROL_C                           = 0EEFFAE6h
;  1067 --*/
;  1068 
;  1069 --/*
;  1070 ; example for exception handling 
;  1071 format ELF executable 
;  1072 entry start 
;  1073 
;  1074 SYSCALL_EXIT   equ 1  ; syscall to function exit() 
;  1075 SYSCALL_WRITE  equ 4  ; syscall to function write() 
;  1076 SYSCALL_SIGNAL equ 48 ; syscall to function signal() 
;  1077 SIGSEGV        equ 11 ; signal id SIGSEGV 
;  1078 STDERR         equ 2  ; standard error 
;  1079 
;  1080 section readable writeable 
;  1081 signal_handler_msg db 'Hmmm, SIGSEGV signal received', 0xa 
;  1082 signal_handler_msg_size = $-signal_handler_msg 
;  1083 reborn_msg db "but I'm still alive", 0xa 
;  1084 reborn_msg_size = $-reborn_msg 
;  1085 
;  1086 section readable executable 
;  1087 start: 
;  1088 ; install signal handler 
;  1089         mov     eax, SYSCALL_SIGNAL 
;  1090         mov     ebx, SIGSEGV 
;  1091         mov     ecx, my_signal_handler 
;  1092         int     0x80 
;  1093 ; do something dirty 
;  1094         push    dword [fs:0] 
;  1095 ; print reborn message 
;  1096 .print_reborn_msg: 
;  1097         mov     eax, SYSCALL_WRITE 
;  1098         mov     ebx, STDERR 
;  1099         mov     ecx, reborn_msg 
;  1100         mov     edx, reborn_msg_size 
;  1101         int     0x80 
;  1102 .finish: 
;  1103         xor     ebx, ebx 
;  1104         mov     eax, SYSCALL_EXIT 
;  1105         int     0x80 
;  1106 
;  1107 my_signal_handler: 
;  1108 ; print exception message 
;  1109         mov     eax, SYSCALL_WRITE 
;  1110         mov     ebx, STDERR 
;  1111         mov     ecx, signal_handler_msg 
;  1112         mov     edx, signal_handler_msg_size 
;  1113         int     0x80 
;  1114 ; remove return adress from the stack 
;  1115         add     esp, 4 
;  1116 ; jump after the erroneous code 
;  1117         jmp     start.print_reborn_msg
;  1118 --*/
;  1119 
;  1120 --/*
;  1121 ; example for exception handlig 
;  1122 format ELF executable 
;  1123 entry start 
;  1124 
;  1125 SYSCALL_EXIT      equ 1  ; syscall to function exit() 
;  1126 SYSCALL_WRITE     equ 4  ; syscall to function write() 
;  1127 SYSCALL_SIGACTION equ 67 ; syscall to function sigaction() 
;  1128 SA_NOCLDSTOP      equ 0x00000001 
;  1129 SA_NOCLDWAIT      equ 0x00000002 ; not supported yet 
;  1130 SA_SIGINFO        equ 0x00000004 ; use sa_sigaction instead of sa_handler 
;  1131 SA_ONSTACK        equ 0x08000000 
;  1132 SA_RESTART        equ 0x10000000 
;  1133 SA_NODEFER        equ 0x40000000 
;  1134 SA_RESETHAND      equ 0x80000000 
;  1135 SIGSEGV           equ 11 ; signal id SIGSEGV 
;  1136 STDERR            equ 2  ; standard error 
;  1137 
;  1138 ; sigaction structure for installing signal handler 
;  1139 struc sigaction sa, m, f { 
;  1140         .sa_sigaction dd sa ; void (*sa_sigaction)(int, siginfo_t *, void *); 
;  1141         .sa_mask      dd m  ; sigset_t sa_mask; 
;  1142         .sa_flags     dd f  ; int sa_flags; 
;  1143         .sa_restorer  dd 0  ; void (*sa_restorer)(void); -- obsoleted, don't use it 
;  1144 } 
;  1145 
;  1146 ; sigcontext structure used in ucontext below 
;  1147 ; it contains eip we're going to overwrite when catching signal 
;  1148 struc sigcontext { 
;  1149         .gs            rw 1 
;  1150         .__gsh         rw 1 
;  1151         .fs            rw 1 
;  1152         .__fsh         rw 1 
;  1153         .es            rw 1 
;  1154         .__esh         rw 1 
;  1155         .ds            rw 1 
;  1156         .__dsh         rw 1 
;  1157         .edi           rd 1 
;  1158         .esi           rd 1 
;  1159         .ebp           rd 1 
;  1160         .esp           rd 1 
;  1161         .ebx           rd 1 
;  1162         .edx           rd 1 
;  1163         .ecx           rd 1 
;  1164         .eax           rd 1 
;  1165         .trapno        rd 1 
;  1166         .err           rd 1 
;  1167         .eip           rd 1 
;  1168         .cs            rw 1 
;  1169         .__csh         rw 1 
;  1170         .eflags        rd 1 
;  1171         .esp_at_signal rd 1 
;  1172         .ss            rw 1 
;  1173         .__ssh         rw 1 
;  1174         .fpstate       rd 1 
;  1175         .oldmask       rd 1 
;  1176         .cr2           rd 1 
;  1177 } 
;  1178 
;  1179 virtual at 0 
;  1180         sigcontext sigcontext 
;  1181 end virtual 
;  1182 
;  1183 ; sigset structure used in ucontext below 
;  1184 _NSIG             equ 64 
;  1185 _NSIG_BPW         equ 32 
;  1186 _NSIG_WORDS       equ (_NSIG / _NSIG_BPW) 
;  1187 
;  1188 struc sigset_t { 
;  1189         .sig rd _NSIG_WORDS 
;  1190 } 
;  1191 
;  1192 ; signalstack structure used in ucontext below 
;  1193 struc signaltstack { 
;  1194         ss_sp    rd 1 
;  1195         ss_flags rd 1 
;  1196         ss_size  rd 1 
;  1197 } 
;  1198 
;  1199 ; structure type for 3rd parameter of signal handler 
;  1200 struc ucontext { 
;  1201         .uc_flags    rd 1 
;  1202         .uc_link     rd 1 
;  1203         .uc_stack    signaltstack 
;  1204         .uc_mcontext sigcontext 
;  1205         .uc_sigmask  sigset_t 
;  1206 } 
;  1207 
;  1208 virtual at 0 
;  1209         ucontext ucontext 
;  1210 end virtual 
;  1211 
;  1212 ; some dangereous statements 
;  1213 macro do_dirty { 
;  1214 -       push    dword [ds:0] 
;  1215 -       mov     dword [ds:0], eax 
;  1216 -       push    dword [fs:0] 
;  1217 } 
;  1218 
;  1219 ; determine size of those statements at compilation time 
;  1220 virtual at 0 
;  1221         do_dirty 
;  1222         sizeof.do_dirty=$ 
;  1223 end virtual 
;  1224 
;  1225 
;  1226 ; define section for code and constants 
;  1227 section readable executable 
;  1228 
;  1229 ; new_act is constant that's why it is here 
;  1230 new_act sigaction my_signal_handler, 0,  SA_SIGINFO 
;  1231 
;  1232 start: 
;  1233 ; install signal handler 
;  1234         mov     eax, SYSCALL_SIGACTION 
;  1235         mov     ebx, SIGSEGV 
;  1236         mov     ecx, new_act 
;  1237         xor     edx, edx 
;  1238         int     0x80 
;  1239 ; check result of installing signal handler 
;  1240         test    eax, eax 
;  1241         mov     ebx, eax ; set exit value 
;  1242         jnz     .finish 
;  1243 ; do something dirty 
;  1244         do_dirty 
;  1245 ; print reborn message 
;  1246         mov     eax, SYSCALL_WRITE 
;  1247         mov     ebx, STDERR 
;  1248         mov     ecx, reborn_msg 
;  1249         mov     edx, reborn_msg_size 
;  1250         int     0x80 
;  1251         xor     ebx, ebx 
;  1252 .finish: 
;  1253         mov     eax, SYSCALL_EXIT 
;  1254         int     0x80 
;  1255 
;  1256 my_signal_handler: 
;  1257 ; print exception message 
;  1258         mov     eax, SYSCALL_WRITE 
;  1259         mov     ebx, STDERR 
;  1260         mov     ecx, signal_handler_msg 
;  1261         mov     edx, signal_handler_msg_size 
;  1262         int     0x80 
;  1263 ; get parameter ucontext 
;  1264         mov     eax, [esp+12] 
;  1265 ; modify eip 
;  1266         add     dword [eax+ucontext.uc_mcontext+sigcontext.eip], sizeof.do_dirty 
;  1267         ret 
;  1268 
;  1269 ; define section for data 
;  1270 section readable writeable 
;  1271 signal_handler_msg db 'Hmmm, SIGSEGV signal received', 0xa 
;  1272 signal_handler_msg_size = $-signal_handler_msg 
;  1273 reborn_msg db "but I'm still alive", 0xa 
;  1274 reborn_msg_size = $-reborn_msg
;  1275 --*/
;  1276 
;  1277 --/*
;  1278 Skeleton for multiprocess handling for 64-bits (easy portable to 32-bit world) - may help for trying in multithread handling
;  1279 
;  1280 Code:
;  1281 start: 
;  1282 
;  1283         mov     eax,sys_fork 
;  1284         syscall                         ; make second copy of program 
;  1285 ; child has return value=0, parent return value = child's PID 
;  1286 ; see: man fork 
;  1287         or      rax,rax 
;  1288         js      exit1                   ; something went wrong... 
;  1289         jnz     parent_proc 
;  1290 
;  1291 child_proc: 
;  1292 ; see: 
;  1293 ; man ptrace 
;  1294 ; look for PTRACE_TRACEME 
;  1295 ; Any signal delivered to this process will cause it to stop and its parent to 
;  1296 ; be notified via wait. 
;  1297         xor     r10,r10 
;  1298         xor     edx,edx 
;  1299         xor     esi,esi 
;  1300         mov     edi,PTRACE_TRACEME 
;  1301         mov     eax,sys_ptrace 
;  1302         syscall 
;  1303 
;  1304 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
;  1305 ; put the core of your program here ; 
;  1306 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
;  1307 
;  1308 parent_proc: 
;  1309         mov     [child_PID],rax 
;  1310 
;  1311 parent_signal_wait: 
;  1312         xor     r10,r10 
;  1313         mov     edx,WUNTRACED 
;  1314         lea     rsi,[child_status] 
;  1315 ;       or      rdi,-1 
;  1316 ; use -1 for wait to child's children too, but we want to wait for child only 
;  1317         mov     rdi,qword [child_PID] 
;  1318         mov     eax,sys_wait4 
;  1319         syscall 
;  1320         or      rax,rax 
;  1321         jns     wait_L1 
;  1322 msg_err_wait_exit: 
;  1323         lea     rax,[msg_err_wait] 
;  1324         jmp     exit_msg 
;  1325 
;  1326 wait_L1: 
;  1327         mov     eax,dword [child_status] 
;  1328 WIFSTOPPED              =       7Fh 
;  1329         test    al,WIFSTOPPED 
;  1330         jnz     wait_L2 
;  1331 ; Child exited ? Then we do the same... 
;  1332 ; WEXITSTATUS eax 
;  1333         and     eax,0000FF00h 
;  1334         sar     eax,8 
;  1335 
;  1336 ; al=exitstatus 
;  1337 ; display the exit status 
;  1338 ;... 
;  1339         jmp     exit0 
;  1340 
;  1341 wait_L2: 
;  1342 ; WIFSIGNALED eax 
;  1343         and     eax,7Fh 
;  1344         inc     eax 
;  1345         sar     al,1 
;  1346 
;  1347         jle     wait_L3 
;  1348 
;  1349 ; display hexa content of AL register: 
;  1350 ; ... 
;  1351 
;  1352         jmp     exit0 
;  1353 
;  1354 wait_L3: 
;  1355         mov     eax,dword [child_status] 
;  1356 
;  1357         cmp     al,WIFSTOPPED 
;  1358         jnz     wait_L7 
;  1359 
;  1360 ;       WSTOPSIG        eax 
;  1361         and     eax,0000FF00h 
;  1362         sar     eax,8 
;  1363 ; al holds signal now 
;  1364 
;  1365 ; 0. display message with the signal number 
;  1366 ; 1. then handle the exception and at the end choose only one of 1.A. or 1.B. 
;  1367 ; 1.A. resume program: 
;  1368 ;       mov     r10d,SIGCONT 
;  1369 ;       xor     edx,edx 
;  1370 ;       mov     rsi,qword [child_PID] 
;  1371 ;       mov     edi,PTRACE_CONT 
;  1372 ;       mov     eax,sys_ptrace 
;  1373 ;       syscall 
;  1374 ; 1.B. or kill the program: 
;  1375 ;       xor     r10,r10 
;  1376 ;       xor     edx,edx 
;  1377 ;       mov     rsi,qword [child_PID] 
;  1378 ;       mov     edi,PTRACE_KILL 
;  1379 ;       mov     eax,sys_ptrace 
;  1380 ;       syscall 
;  1381 
;  1382 wait_L7: 
;  1383         jmp     parent_signal_wait 
;  1384 
;  1385 exit0: 
;  1386         xor     edi,edi  
;  1387 exit:   mov     eax,sys_exit 
;  1388         syscall 
;  1389 
;  1390 exit1:  mov     edi,1 
;  1391         jmp     exit 
;  1392 
;  1393 
;  1394 
;  1395 The above skeleton is from fdbg. I still don't know what to do when the child forks - something in the above code is missing. 
;  1396     The above handling idea is the same as every debugger's job (it is an auto-debugger, or self-debugger).
;  1397 part 2 (for it not to be so simple...)
;  1398 if you want new thread instead of new process, then use
;  1399 sys_clone with CLONE_THREAD
;  1400 instead of
;  1401 sys_fork
;  1402 
;  1403 you need to mmap space for new thread (new stack, ...) before sys_clone
;  1404 
;  1405 how to skip instruction causing singal ?
;  1406 0. read registers sys_ptrace with PTRACE_GETREGS and get RIP (EIP) register
;  1407 (offset of instruction pointer differs in x64 and x86 platform)
;  1408 1. determine size of instruction:
;  1409 1A read 16 bytes (2 qwords in x64, 4 dwords in x86) sys_ptrace PTRACE_PEEKTEXT
;  1410 1B determine the size of the instruction by disassembling it, the most difficult task
;  1411 you can use disasm engine for x64 or simplify it not to disassemble
;  1412 the whole instruction but to determine instruction size only
;  1413 I don't know whether there is any disasm engine for x86 written in asm
;  1414 2. add instruction size to user.user_regs.rip (or ...eip)
;  1415 3. write registers sys_ptrace PTRACE_SETREGS
;  1416 4. continue run sys_ptrace PTRACE_CONT
;  1417 
;  1418 After doing this you can only hope that skipping instruction doesn't alter program run too much...
;  1419 --*/
    jmp #00462C8F (:%opRetf)              ;#00462AD0: 351 BA010000               v  00 00  1 104      
;C:\Phix\builtins\VM\puts1.e:
;============================
;     1 --
;     2 -- puts1.e
;     3 -- =======
;     4 --
;     5 --  Low-level simplistic console i/o
;     6 --
;     7 --  These routines exist so that we can output some simple console messages before all of
;     8 --  pHeap.e/pStack.e/pprntfN.e/psprintN.e/pfileioN.e/pMath.e/pSubseN.e/pSubssN.e/pJcc.e
;     9 --  pRmdr.e/pRepeN.e/pRepsN.e/pApnd.e etc are working, or if they get broken in any way.
;    10 --
;    11 --  See ..\puts1h.e for hll wrapper routines/hints on invoking these from inline assembly.
;    12 --  This file was made an autoinclude purely because it was an easy one to start off with.
;    13 --  Note that unlike this, ..\puts1h.e requires an explicit include statement before use.
;    14 --  Also note the original version of this file was deliberately split into puts1/puts1h
;    15 --  so that this can be put into the optable (:%labels only) and the latter left out.
;    16 --
;    17 --      in here         in puts1h.e
;    18 --      =======         ===========
;    19 --      :%puts1         puts1(s)        equivalent to     puts(1,s)
;    20 --                                                        puts(1,raw(edi|rdi)[1..$])
;    21 --      :%puts1ediesi                                     puts(1,*edi[1..esi])  -- (32-bit char*)
;    22 --      :%puts1rdirsi                                     puts(1,*rdi[1..rsi])  -- (64-bit char*)
;    23 --      :%puthex32a     puthex32(a)     equivalent to     printf(1,"%08x\n",{a})    -- (atom/int)
;    24 --      :%puthex32                                        printf(1,"%08x\n",{edx|and_bits(rdx,#FFFFFFFF)})  -- 32-bit reg
;    25 --      :%puthex64                                        printf(1,"%016x\n",{edx:eax|rdx})
;    26 --      :%putsint       putsint(i)      equivalent to     printf(1,"%d\n",{i})
;    27 --                                                        printf(1,"%d\n",{edx|and_bits(rdx,#FFFFFFFF)})
;    28 --      :%getc0         getc0()         equivalent to     {} = getc(0), aka if getc(0) then end if
;    29 --
;    30 --  These routines are used by the likes of pFEH.e and pdiagN.e and therefore form part of
;    31 --  the runtime VM. That means they are always automatically available and further that an
;    32 --  explicit "include builtins\VM\puts1.e" may be quietly ignored when interpreting - any
;    33 --  changes may need a "p -cp" round before coming into effect. It may be easier to make a
;    34 --  copy of this that you can edit/test rather than edit/compile(/compile)/test, though I
;    35 --  would urge you to carefully rename all the global labels in the test copy.
;    36 --
;    37 --  This file was chosen for use in the first steps to getting the optable to work, and
;    38 --  also a key factor in deciding to use :!opCallOnceYeNot instead of :%opRetf/::fin.
;    39 --
;    40 with debug
;    41 
;    42 --/*
;    43 This will not work on RDS Eu/OpenEuphoria!!
;    44 --*/
;    45 
;    46 --include builtins\VM\pStack.e
;    47 include builtins\VM\pUnassigned.e   -- :!opCallOnceYeNot
;    48 
;    49 --#ilASM{ jmp :%opRetf
;    50 --#ilASM{ jmp :fin
;    51 #ilASM{ jmp :!opCallOnceYeNot
                jmp :!opCallOnceYeNot     ;#004627F9: 351 F5FFFFFF               v  00 00  1   1      
;    52 
;    53 --/*
;    54 procedure :%puts1(:%)
;    55 end procedure -- (for Edita/CtrlQ)
;    56 --*/
;    57       :%puts1
;    58 -------------
;    59         [32]
;    60             -- edi loaded
;    61             xor ebx,ebx
                    xor ebx,ebx           ;#004627FE: 061333                     uv 08 08  1   2      
;    62             mov esi,[ebx+edi*4-12]          -- length
                    mov esi,[ebx+edi*4-12]  ;#00462800: 213164273 F4               uv 40 88  1   5 08 *08*
;    63             shl edi,2                       -- ref->raw
                    shl edi,2             ;#00462804: 301347 02                  u  80 80  1   6      
;    64 
;    65 --/*
;    66 procedure :%puts1ediesi(:%)
;    67 end procedure -- (for Edita/CtrlQ)
;    68 --*/
;    69       :%puts1ediesi     -- (edi=raw text, esi=length)
;    70 -------------------
;    71         [PE32]
;    72 --added 14/11/16:
;    73             call "kernel32.dll","AllocConsole"
                    call [#00401028] (AllocConsole)  ;#00462807: 377025 28104000            np 00 00  2   7      
;    74             push -11                        -- nStdHandle (p1) (-11=STD_OUTPUT_HANDLE)
                    push -11              ;#0046280D: 152 F5                     uv 00 00  1   9      
;    75             call "kernel32.dll","GetStdHandle"
                    call [#00401070] (GetStdHandle)  ;#0046280F: 377025 70104000            np 00 00  2  10      
;    76             push ebx                        -- lpOverlapped (NULL)
                    push ebx              ;#00462815: 123                        uv 00 08  1  12      
;    77             push esp                        -- lpNumberOfBytesWritten
                    push esp              ;#00462816: 124                        vu 00 10  1  12      
;    78             push esi                        -- nNumberOfBytesToWrite
                    push esi              ;#00462817: 126                        uv 00 40  1  13      
;    79             push edi                        -- lpBuffer
                    push edi              ;#00462818: 127                        vu 00 80  1  13      
;    80             push eax                        -- hFile,
                    push eax              ;#00462819: 120                        uv 00 01  1  14      
;    81             call "kernel32.dll","WriteFile"
                    call [#004010C0] (WriteFile)  ;#0046281A: 377025 C0104000            np 00 00  2  15      
;    82         [ELF32]
;    83             mov eax,4               -- sys_write(ebx=int fd,ecx=char *buf,edx=int len)
;    84             mov edx,esi             -- length (p3)
;    85             mov ecx,edi             -- raw(hw) (p2)
;    86             mov ebx,1               -- stdout (p1)
;    87             int 0x80
;    88             xor ebx,ebx             -- (common requirement after int 0x80)
;    89 
;    90         [64]
;    91             -- rdi loaded
;    92             xor rbx,rbx
;    93             mov rsi,[rbx+rdi*4-24]          -- length
;    94             shl rdi,2
;    95 
;    96 --/*
;    97 procedure :%puts1rdirsi(:%)
;    98 end procedure -- (for Edita/CtrlQ)
;    99 --*/
;   100       :%puts1rdirsi     -- (rdi=raw text, rsi=length)
;   101 -------------------
;   102         [PE64]
;   103             mov rcx,rsp -- put 2 copies of rsp onto the stack...
;   104             push rsp
;   105             push rcx
;   106             or rsp,8    -- [rsp] is now 1st or 2nd copy:
;   107                         -- if on entry rsp was xxx8: both copies remain on the stack
;   108                         -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them (+8)
;   109                         -- obviously rsp is now xxx8, whatever alignment we started with
;   110             sub rsp,8*7                     -- 5 params and space for target of r9, plus align
;   111 --10/9/22 (!!)
;   112 --          mov rcx,-11                     -- DWORD nStdHandle (p1) (--11=STD_OUTPUT_HANDLE)
;   113 --added 14/1/16:
;   114             call "kernel32.dll","AllocConsole"
;   115             mov rcx,-11                     -- DWORD nStdHandle (p1) (--11=STD_OUTPUT_HANDLE)
;   116             call "kernel32.dll","GetStdHandle"
;   117             mov qword[rsp+4*8],rbx          -- LPOVERLAPPED lpOverlapped (p5) (rbx=NULL)
;   118             lea r9,[rsp+5*8]                -- LPDWORD lpNumberOfBytesWritten (p4)
;   119             mov r8,rsi                      -- DWORD nNumberOfBytesToWrite (p3)
;   120             mov rdx,rdi                     -- LPCVOID lpBuffer (p2)
;   121             mov rcx,rax                     -- HANDLE hFile (p1)
;   122             call "kernel32.dll","WriteFile"
;   123 --          add rsp,8*7
;   124 --          pop rsp     -- restore, equivalent to rsp += (either #08 or #10)
;   125             mov rsp,[rsp+8*7]   -- equivalent to add/pop
;   126         [ELF64]
;   127             mov rdx,rsi             -- length(hw)
;   128             mov rsi,rdi             -- raw(hw)
;   129             mov rdi,1               -- stdout
;   130             mov rax,1               -- sys_write(rdi=unsigned int fd,rsi=const char *buf,rdx=size_t count)
;   131             syscall
;   132 --/*
;   133         [ARM]
;   134             ldr r6,[r7*4-12]
;   135             shl r7,2
;   136 --          lsl r7,2
;   137 
;   138       :%puts1r7r6   -- (r7=raw text, r6=length)
;   139 -------------------
;   140             mov r0,0                -- stdout
;   141             mov r1,r7               -- raw
;   142             mov r2,r6               -- length
;   143 ;           swi 0x900004
;   144             mov r7,4                -- write
;   145             swi 0
;   146 --*/
;   147         []
;   148             ret
                    ret                   ;#00462820: 303                        np 00 00  2  17      
;   149 
;   150 --/*
;   151 procedure :%puthex32a(:%)
;   152 end procedure -- (for Edita/CtrlQ)
;   153 --*/
;   154     :%puthex32a
;   155 ---------------
;   156         [32]
;   157             -- edx loaded (with an integer or phix atom)
;   158             xor ebx,ebx
                    xor ebx,ebx           ;#00462821: 061333                     uv 08 08  1  19      
;   159             sub esp,16      -- build "00000000\r\n" on the stack
                    sub esp,16            ;#00462823: 203354 10                  vu 10 10  1  19      
;   160             cmp edx,h4
                    cmp edx,h4            ;#00462826: 201372 00000040            uv 00 04  1  20      
;   161             jl @f
                    jl #00462837          ;#0046282C: 174 09                     v  00 00  1  20      
;   162                 fld qword[ebx+edx*4]
                        fld qword[ebx+edx*4]  ;#0046282E: 335004223                  np 00 0C  1  21      
;   163                 fistp qword[esp]
                        fistp qword[esp]  ;#00462831: 337074044                  np 00 10  6  22      
;   164                 mov edx,[esp]
                        mov edx,[esp]     ;#00462834: 213024044                  uv 04 10  1  28      
;   165           @@:
;   166             mov edi,esp
                    mov edi,esp           ;#00462837: 213374                     vu 80 10  1  28      
;   167             jmp @f
                    jmp #0046283E         ;#00462839: 353 03                     v  00 00  1  29      
;   168         [64]
;   169             -- rdx loaded (with an integer or phix atom)
;   170             xor rbx,rbx
;   171             mov r15,h4
;   172             sub rsp,16      -- ditto (8 digits), also keeps stack (mis)aligned
;   173             cmp rdx,r15
;   174             jl @f
;   175 --DEV %pLoadMint
;   176                 fld tbyte[rbx+rdx*4]
;   177                 fistp qword[rsp]
;   178                 mov rdx,[rsp]
;   179           @@:
;   180             mov rdi,rsp
;   181             jmp @f
;   182 --/*
;   183         [ARM]
;   184 --          mov ip,h4
;   185             sub sp,16
;   186             cmp r3,h4
;   187             bl @f
;   188                 ???
;   189           @@:
;   190             mov r7,sp
;   191             jmp @f
;   192 --*/
;   193         []
;   194 
;   195 --/*
;   196 procedure :%puthex32(:%)
;   197 end procedure -- (for Edita/CtrlQ)
;   198 --*/
;   199     :%puthex32
;   200 --------------
;   201         [32]
;   202             -- edx loaded (with an absolute 32bit value)
;   203             sub esp,16      -- build "00000000\r\n" on the stack
                    sub esp,16            ;#0046283B: 203354 10                  uv 10 10  1  30      
;   204           @@:
;   205             mov edi,esp
                    mov edi,esp           ;#0046283E: 213374                     uv 80 10  1  31 10   
;   206         [64]
;   207             -- rdx loaded (but only the edx part gets printed)
;   208             sub rsp,16      -- ditto (8 digits), also keeps stack (mis)aligned
;   209           @@:
;   210             mov rdi,rsp
;   211         []
;   212             mov ecx,8
                    mov ecx,8             ;#00462840: 271 08000000               vu 02 00  1  31      
;   213           ::loop8
;   214             xor eax,eax
                    xor eax,eax           ;#00462845: 061300                     uv 01 01  1  32      
;   215             shld eax,edx,4  -- peel off top nibble
                    shld eax,edx,4        ;#00462847: 017244320 04               np 05 05  4  33      
;   216             shl edx,4       -- discard ""/get next nibble into place
                    shl edx,4             ;#0046284B: 301342 04                  u  04 04  1  37      
;   217             add al,0x37     -- + 'A'-9
                    add al,55             ;#0046284E: 200300 37                  vu 01 01  1  37      
;   218             cmp al,0x41     -- cmp 'A'
                    cmp al,65             ;#00462851: 200370 41                  uv 00 01  1  38      
;   219             jge @f
                    jge #00462859         ;#00462854: 175 03                     v  00 00  1  38      
;   220                 sub al,7    -- map '7'..'@' to '0'..'9' (or something like that)
                        sub al,7          ;#00462856: 200350 07                  uv 01 01  1  39      
;   221           @@:
;   222             stosb
                    stosb                 ;#00462859: 252                        np 80 81  3  40      
;   223             sub ecx,1
                    sub ecx,1             ;#0046285A: 203351 01                  uv 02 02  1  43      
;   224             jnz :loop8
                    jnz #00462845         ;#0046285D: 165 E6                     v  00 00  1  43      
;   225             mov word[edi],0x0D0A
                    mov word[edi], word 3338  ;#0046285F: 146:307007 0A0D            uv 00 80  1  44      
;   226         [32]
;   227             mov edi,esp
                    mov edi,esp           ;#00462864: 213374                     vu 80 10  1  44      
;   228             mov esi,10
                    mov esi,10            ;#00462866: 276 0A000000               uv 40 00  1  45      
;   229             cmp dword[esp+20],0 -- putcr
                    cmp dword[esp+20],0   ;#0046286B: 203174044 14 00            u  00 10  2  46      
;   230             jne @f
                    jne #00462877         ;#00462870: 165 05                     v  00 00  1  47      
;   231                 mov esi,8
                        mov esi,8         ;#00462872: 276 08000000               uv 40 00  1  48      
;   232           @@:
;   233             call :%puts1ediesi
                    call #00462807 (:%puts1ediesi)  ;#00462877: 350 8BFFFFFF               v  00 00  1  48      
;   234             add esp,16
                    add esp,16            ;#0046287C: 203304 10                  uv 10 10  1  49      
;   235             ret 4
                    ret 4                 ;#0046287F: 302 0400                   np 00 00  3  50      
;   236         [64]
;   237             mov rdi,rsp
;   238             mov rsi,10
;   239             cmp qword[rsp+24],0
;   240             jne @f
;   241                 mov rsi,8
;   242           @@:
;   243             call :%puts1rdirsi
;   244             add rsp,16
;   245             ret 8
;   246         []
;   247 
;   248 --/*
;   249 procedure :%puthex64(:%)
;   250 end procedure -- (for Edita/CtrlQ)
;   251 --*/
;   252     :%puthex64
;   253 --------------
;   254         [32]    
;   255             -- edx:eax loaded (hi-dword in edx, lo-dword in eax)
;   256             sub esp,32
                    sub esp,32            ;#00462882: 203354 20                  uv 10 10  1  53      
;   257             mov edi,esp
                    mov edi,esp           ;#00462885: 213374                     uv 80 10  1  54 10   
;   258             mov esi,16
                    mov esi,16            ;#00462887: 276 10000000               vu 40 00  1  54      
;   259           ::loop16edxeax
;   260             xor ecx,ecx
                    xor ecx,ecx           ;#0046288C: 061311                     uv 02 02  1  55      
;   261             shld ecx,edx,4  -- peel off top nibble
                    shld ecx,edx,4        ;#0046288E: 017244321 04               np 06 06  4  56      
;   262             shld edx,eax,4  -- peel off top nibble
                    shld edx,eax,4        ;#00462892: 017244302 04               np 05 05  4  60      
;   263             shl eax,4       -- discard ""/get next nibble into place
                    shl eax,4             ;#00462896: 301340 04                  u  01 01  1  64      
;   264             add cl,0x37     -- + 'A'-9
                    add cl,55             ;#00462899: 200301 37                  vu 02 02  1  64      
;   265             cmp cl,0x41     -- cmp 'A'
                    cmp cl,65             ;#0046289C: 200371 41                  uv 00 02  1  65      
;   266             jge @f
                    jge #004628A4         ;#0046289F: 175 03                     v  00 00  1  65      
;   267                 sub cl,7    -- map '7'..'@' to '0'..'9' (or something like that)
                        sub cl,7          ;#004628A1: 200351 07                  uv 02 02  1  66      
;   268           @@:
;   269             mov [edi],cl
                    mov [edi],cl          ;#004628A4: 210017                     uv 00 82  1  67 02   
;   270             add edi,1
                    add edi,1             ;#004628A6: 203307 01                  vu 80 80  1  67      
;   271             sub esi,1
                    sub esi,1             ;#004628A9: 203356 01                  uv 40 40  1  68      
;   272             jnz :loop16edxeax
                    jnz #0046288C         ;#004628AC: 165 DE                     v  00 00  1  68      
;   273             mov word[edi],0x0D0A
                    mov word[edi], word 3338  ;#004628AE: 146:307007 0A0D            uv 00 80  1  69      
;   274             mov edi,esp
                    mov edi,esp           ;#004628B3: 213374                     vu 80 10  1  69      
;   275             mov esi,18
                    mov esi,#12           ;#004628B5: 276 12000000               uv 40 00  1  70      
;   276             cmp dword[esp+36],0
                    cmp dword[esp+36],0   ;#004628BA: 203174044 24 00            u  00 10  2  71      
;   277             jne @f
                    jne #004628C6         ;#004628BF: 165 05                     v  00 00  1  72      
;   278                 mov esi,16
                        mov esi,16        ;#004628C1: 276 10000000               uv 40 00  1  73      
;   279           @@:
;   280             call :%puts1ediesi
                    call #00462807 (:%puts1ediesi)  ;#004628C6: 350 3CFFFFFF               v  00 00  1  73      
;   281             add esp,32
                    add esp,32            ;#004628CB: 203304 20                  uv 10 10  1  74      
;   282             ret 4
                    ret 4                 ;#004628CE: 302 0400                   np 00 00  3  75      
;   283 
;   284         [64]
;   285             -- rdx loaded   -- (or, to show the lo-dword of rdx, aka edx, use :%puthex32)
;   286             sub rsp,32
;   287             mov rdi,rsp
;   288             mov rcx,16
;   289           ::loop16
;   290             xor rax,rax
;   291             shld rax,rdx,4  -- peel off top nibble
;   292             shl rdx,4       -- discard ""/get next nibble into place
;   293             add al,0x37     -- + 'A'-9
;   294             cmp al,0x41     -- cmp 'A'
;   295             jge @f
;   296                 sub al,7    -- map '7'..'@' to '0'..'9' (or something like that)
;   297           @@:
;   298             stosb
;   299             sub rcx,1
;   300             jnz :loop16
;   301             mov word[rdi],0x0D0A
;   302             mov rdi,rsp
;   303             mov rsi,18
;   304 --          cmp qword[rsp+24],0
;   305             cmp qword[rsp+40],0
;   306             jne @f
;   307                 mov rsi,16
;   308           @@:
;   309             call :%puts1rdirsi
;   310             add rsp,32
;   311             ret 8
;   312         []
;   313 
;   314 --/*
;   315 procedure :%putsint(:%)
;   316 end procedure -- (for Edita/CtrlQ)
;   317 --*/
;   318     :%putsint
;   319 -------------
;   320         [32]
;   321             -- eax loaded, putscr on stack
;   322             sub esp,16      -- build "[-]nnn\r\n" on the stack
                    sub esp,16            ;#004628D1: 203354 10                  uv 10 10  1  78      
;   323             mov edi,esp
                    mov edi,esp           ;#004628D4: 213374                     uv 80 10  1  79 10   
;   324             cmp eax,0
                    cmp eax,0             ;#004628D6: 203370 00                  vu 00 01  1  79      
;   325             jge @f
                    jge #004628E3         ;#004628D9: 175 08                     v  00 00  1  80      
;   326                 neg eax
                        neg eax           ;#004628DB: 367330                     np 01 01  1  81      
;   327                 mov byte[edi],'-'
                        mov [edi], byte 45  ;#004628DD: 306007 2D                  uv 00 80  1  82      
;   328                 add edi,1
                        add edi,1         ;#004628E0: 203307 01                  vu 80 80  1  82      
;   329           @@:
;   330         [64]
;   331             -- eax loaded, putscr on stack
;   332             sub rsp,16      -- build "[-]nnn\r\n" on the stack
;   333             mov rdi,rsp
;   334             cmp eax,0
;   335             jge @f
;   336                 neg eax
;   337                 mov byte[rdi],'-'
;   338                 add rdi,1
;   339           @@:
;   340         []
;   341             mov ecx,1000000000  -- repeatedly divided by 10 until it is 1, as we get each digit.
                    mov ecx,1000000000    ;#004628E3: 271 00CA9A3B               uv 02 00  1  83      
;   342             xor edx,edx         -- edx:=0
                    xor edx,edx           ;#004628E8: 061322                     vu 04 04  1  83      
;   343             xor esi,esi         -- clear esi, the 'some digits have already been printed' flag.
                    xor esi,esi           ;#004628EA: 061366                     uv 40 40  1  84      
;   344           @@:
;   345             div ecx             -- eax:=eax/ecx, (so eax=top digit) edx:=remainder
                    div ecx               ;#004628EC: 367361                     np 05 07 41  85      
;   346             push edx            -- save remainder
                    push edx              ;#004628EE: 122                        uv 00 04  1 126      
;   347             cmp ecx,1           -- always print the last digit
                    cmp ecx,1             ;#004628EF: 203371 01                  vu 00 02  1 126      
;   348             je :display_digit
                    je #004628FF          ;#004628F2: 164 0B                     v  00 00  1 127      
;   349             test esi,esi        -- or if any have already been printed
                    test esi,esi          ;#004628F4: 205366                     uv 00 40  1 128      
;   350             jnz :display_digit
                    jnz #004628FF         ;#004628F6: 165 07                     v  00 00  1 128      
;   351 --          test al,al          -- or if this digit is not zero (ie eax)
;   352             test eax,eax        -- or if this digit is not zero (ie eax)
                    test eax,eax          ;#004628F8: 205300                     uv 00 01  1 129      
;   353             jz :digit_skip
                    jz #00462903          ;#004628FA: 164 07                     v  00 00  1 129      
;   354 --          not esi             -- set flag indicating a digit has been printed
;   355             or esi,1            -- set flag indicating a digit has been printed
                    or esi,1              ;#004628FC: 203316 01                  uv 40 40  1 130      
;   356           ::display_digit
;   357             add al,0x30         -- +'0'
                    add al,48             ;#004628FF: 200300 30                  vu 01 01  1 130      
;   358             stosb
                    stosb                 ;#00462902: 252                        np 80 81  3 131      
;   359           ::digit_skip
;   360             mov eax,ecx         -- all divisions must occur in eax
                    mov eax,ecx           ;#00462903: 213301                     uv 01 02  1 134      
;   361             xor edx,edx         -- zero edx
                    xor edx,edx           ;#00462905: 061322                     vu 04 04  1 134      
;   362             mov ecx,10
                    mov ecx,10            ;#00462907: 271 0A000000               uv 02 00  1 135      
;   363             div ecx             -- eax:=eax/10
                    div ecx               ;#0046290C: 367361                     np 05 07 41 136      
;   364             mov ecx,eax         -- save the new, smaller, divisor
                    mov ecx,eax           ;#0046290E: 213310                     uv 02 01  1 177      
;   365             pop eax             -- restore the saved remainder back to eax
                    pop eax               ;#00462910: 130                        vu 01 00  1 177      
;   366             test ecx,ecx        -- all done?
                    test ecx,ecx          ;#00462911: 205311                     uv 00 02  1 178      
;   367             jnz @b
                    jnz #004628EC         ;#00462913: 165 D7                     v  00 00  1 178      
;   368         [32]
;   369             mov eax,[esp+20]    -- putcr
                    mov eax,[esp+20]      ;#00462915: 213104044 14               uv 01 10  1 179      
;   370             mov ecx,edi
                    mov ecx,edi           ;#00462919: 213317                     vu 02 80  1 179      
;   371             test eax,eax
                    test eax,eax          ;#0046291B: 205300                     uv 00 01  1 180      
;   372             jz @f
                    jz #00462927          ;#0046291D: 164 08                     v  00 00  1 180      
;   373                 add ecx,2
                        add ecx,2         ;#0046291F: 203301 02                  uv 02 02  1 181      
;   374                 mov word[edi],0x0D0A
                        mov word[edi], word 3338  ;#00462922: 146:307007 0A0D            vu 00 80  1 181      
;   375           @@:
;   376             sub ecx,esp
                    sub ecx,esp           ;#00462927: 051341                     uv 02 12  1 182      
;   377             mov edi,esp
                    mov edi,esp           ;#00462929: 213374                     vu 80 10  1 182      
;   378             mov esi,ecx -- (improve me, once working)
                    mov esi,ecx           ;#0046292B: 213361                     uv 40 02  1 183      
;   379             call :%puts1ediesi
                    call #00462807 (:%puts1ediesi)  ;#0046292D: 350 D5FEFFFF               v  00 00  1 183      
;   380             add esp,16
                    add esp,16            ;#00462932: 203304 10                  uv 10 10  1 184      
;   381             ret 4
                    ret 4                 ;#00462935: 302 0400                   np 00 00  3 185      
;   382         [64]
;   383             mov rax,[rsp+24]    -- putcr
;   384             mov rcx,rdi
;   385             test rax,rax
;   386             jz @f
;   387                 add rcx,2
;   388                 mov word[rdi],0x0D0A
;   389           @@:
;   390             sub rcx,rsp
;   391             mov rdi,rsp
;   392             mov rsi,rcx
;   393             call :%puts1rdirsi
;   394 --          add rsp,24
;   395             add rsp,16
;   396             ret 8
;   397         []
;   398 
;   399 --/*
;   400 procedure :%getc0(:%)
;   401 end procedure -- (for Edita/CtrlQ)
;   402 --*/
;   403     :%getc0
;   404 -----------
;   405         [PE32]
;   406             push -10                        -- nStdHandle (p1) (-10=STD_INPUT_HANDLE)
                    push -10              ;#00462938: 152 F6                     uv 00 00  1 188      
;   407             call "kernel32.dll","GetStdHandle"
                    call [#00401070] (GetStdHandle)  ;#0046293A: 377025 70104000            np 00 00  2 189      
;   408 -- 23/4/15:
;   409             push eax                        -- save
                    push eax              ;#00462940: 120                        uv 00 01  1 191      
;   410             push 1                          -- fdwMode (1=ENABLE_PROCESSED_INPUT)
                    push 1                ;#00462941: 152 01                     vu 00 00  1 191      
;   411             push eax                        -- hConsole
                    push eax              ;#00462943: 120                        uv 00 01  1 192      
;   412             call "kernel32.dll","SetConsoleMode"
                    call [#0040109C] (SetConsoleMode)  ;#00462944: 377025 9C104000            np 00 00  2 193      
;   413             pop eax                         -- restore
                    pop eax               ;#0046294A: 130                        uv 01 00  1 195      
;   414 
;   415             push ebx            -- reserve space for buffer (1 byte realy)
                    push ebx              ;#0046294B: 123                        vu 00 08  1 195      
;   416             mov esi,esp
                    mov esi,esp           ;#0046294C: 213364                     uv 40 10  1 196      
;   417             push ebx            -- reserve space for NumberOfBytesRead
                    push ebx              ;#0046294E: 123                        vu 00 08  1 196      
;   418             mov edi,esp
                    mov edi,esp           ;#0046294F: 213374                     uv 80 10  1 197      
;   419             push ebx                        -- lpOverlapped
                    push ebx              ;#00462951: 123                        vu 00 08  1 197      
;   420             push edi                        -- lpNumberOfBytesRead
                    push edi              ;#00462952: 127                        uv 00 80  1 198      
;   421             push dword 1                    -- nNumberOfBytesToRead (1)
                    push 1                ;#00462953: 152 01                     vu 00 00  1 198      
;   422             push esi                        -- lbBuffer
                    push esi              ;#00462955: 126                        uv 00 40  1 199      
;   423             push eax                        -- hFile
                    push eax              ;#00462956: 120                        vu 00 01  1 199      
;   424             call "kernel32.dll","ReadFile"
                    call [#00401094] (ReadFile)  ;#00462957: 377025 94104000            np 00 00  2 200      
;   425             add esp,8
                    add esp,8             ;#0046295D: 203304 08                  uv 10 10  1 202      
;   426         [ELF32]
;   427             push ebx                -- char *buf (1 byte)
;   428             mov eax,3               -- sys_read(ebx=int fd,ecx=char *buf,edx=int len)
;   429             mov edx,1               -- length (p3)
;   430             lea ecx,[esp+4]         -- buf (p2)
;   431             mov ebx,0               -- stdin (p1)
;   432             int 0x80
;   433             xor ebx,ebx             -- (common requirement after int 0x80)
;   434             add esp,4
;   435         [PE64]
;   436             mov rcx,rsp -- put 2 copies of rsp onto the stack...
;   437             push rsp
;   438             push rcx
;   439             or rsp,8    -- [rsp] is now 1st or 2nd copy:
;   440                         -- if on entry rsp was xxx8: both copies remain on the stack
;   441                         -- if on entry rsp was xxx0: or rsp,8 effectively pops one of them (+8)
;   442                         -- obviously rsp is now xxx8, whatever alignment we started with
;   443             sub rsp,8*7                     -- 5 params plus buffer and bytesread (no align rqd)
;   444             mov rcx,-10                     -- DWORD nStdHandle (p1) (-10=STD_INPUT_HANDLE)
;   445             call "kernel32.dll","GetStdHandle"
;   446 
;   447 -- 23/4/15:
;   448             mov [rsp+5*8],rax               -- save
;   449             mov rdx,1                       -- fdwMode (1=ENABLE_PROCESSED_INPUT)
;   450             mov rcx,rax                     -- hConsole
;   451             call "kernel32.dll","SetConsoleMode"
;   452             mov rax,[rsp+5*8]               -- restore
;   453 
;   454             mov [rsp+5*8],rbx               -- lbBuffer (zero the high bits)
;   455             mov qword[rsp+4*8],rbx          -- LPOVERLAPPED lpOverlapped (p5) (rbx=NULL)
;   456             lea r9,[rsp+6*8]                -- LPDWORD lpNumberOfBytesRead (p4)
;   457             mov r8,1                        -- nNumberOfBytesToRead (p3) (1)
;   458             lea rdx,[rsp+5*8]               -- lbBuffer (p2)
;   459             mov rcx,rax                     -- hFile (p1)
;   460             call "kernel32.dll","ReadFile"
;   461 --          add rsp,8*7
;   462 --          pop rsp     -- restore, equivalent to rsp += (either #08 or #10)
;   463             mov rsp,[rsp+8*7]   -- equivalent to add/pop
;   464         [ELF64]
;   465             push rbx                -- char *buf (1 byte)
;   466             mov rdx,10              -- length (p3)
;   467             mov rsi,rsp             -- buf (p2)
;   468             mov rdi,0               -- stdin
;   469             mov rax,0               -- sys_read(rdi=unsigned int fd,rsi=char *buf,rdx=size_t count)
;   470             syscall
;   471             add rsp,8
;   472         []
;   473             ret
                    ret                   ;#00462960: 303                        np 00 00  2 203      
;   474 --::fin
;   475     }
;   476 
;   477 
    jmp #00462C8F (:%opRetf)              ;#00462961: 351 29030000               v  00 00  1 205      
;C:\Phix\builtins\VM\pUnassigned.e:
;==================================
;     1 --
;     2 -- pUnassigned.e
;     3 --
;     4 --  Temp. (move to pFEH?)
;     5 
;     6 include builtins\VM\puts1.e         -- low-level console i/o
;     7 --DEV?
;     8 --include builtins\VM\pStack.e
;     9 
;    10 --constant eBadRetf = "eBadRetf called, return address is #\n"
;    11 
;    12 --#ilASM{ jmp :%opRetf
;    13 #ilASM{ jmp :!opCallOnceYeNot
                jmp :!opCallOnceYeNot     ;#0046273F: 351 AF000000               v  00 00  1   1      
;    14 
;    15     :%pUnassigned   -- aka e92vhnbaavesiesp
;    16 -----------------
;    17         -- esi is var no for e92,
;    18         -- edi is var no for type check error 
;    19         -- [ie: if [esi]==h4 then (jz/jnz valid)
;    20         --          varname(esi)&" has not been assigned a value"
;    21         --      else
;    22         --          "type check error:"&varname(edi)&" is "&sprint([edi])
;    23         --           (in which case [esi] and [edi] should be the same, btw)
;    24         --      end if]
;    25     [32]
;    26         pop edx
                pop edx                   ;#00462744: 132                        uv 04 00  1   2      
;    27 --      jne @f
;    28             -- [var]==h4, esi is varno
;    29             mov al,92   -- e92vhnbaav(esi)
                    mov al,92             ;#00462745: 260 5C                     vu 01 00  1   2      
;    30         je @f
                je #0046274D              ;#00462747: 164 04                     v  00 00  1   3      
;    31             -- type check error (edi is varno)
;    32 --          mov al,110  -- e110tce(ecx)
;    33             mov al,1    -- e01tcf(ecx)
                    mov al,1              ;#00462749: 260 01                     uv 01 00  1   4      
;    34             mov ecx,edi -- DEV (minor)
                    mov ecx,edi           ;#0046274B: 213317                     vu 02 80  1   4      
;    35       @@:
;    36         sub edx,1
                sub edx,1                 ;#0046274D: 203352 01                  uv 04 04  1   5      
;    37     [64]
;    38         pop rdx
;    39 --      jne @f
;    40             -- [var]==h4, esi is varno
;    41             mov al,92   -- e92vhnbaav(esi)
;    42         je @f
;    43             -- type check error (edi is varno)
;    44 --          mov al,110  -- e110tce(ecx)
;    45             mov al,1    -- e01tcf(ecx)
;    46             mov rcx,rdi -- DEV (minor)
;    47       @@:
;    48         sub rdx,1
;    49     []
;    50         jmp :!iDiag
                jmp #00463E69 (:!iDiag)   ;#00462750: 351 14170000               v  00 00  1   5      
;    51         int3
                int3                      ;#00462755: 314                        np 00 00 13   6      
;    52 
;    53     :%pBadRetf
;    54         [32]
;    55 --          mov edi,[eBadRetf]          -- "eBadRetf called, return address is #"
;    56 --          call :%puts1
;    57             mov edx,[esp]
                    mov edx,[esp]         ;#00462756: 213024044                  uv 04 10  1  19      
;    58             mov al,13                   -- e13ateafworav
                    mov al,13             ;#00462759: 260 0D                     vu 01 00  1  19      
;    59             sub edx,1
                    sub edx,1             ;#0046275B: 203352 01                  uv 04 04  1  20      
;    60 --          push 1                      -- cr
;    61 --          call :%puthex32
;    62         [64]
;    63 --          mov rdi,[eBadRetf]          -- "eBadRetf called, return address is #"
;    64 --          call :%puts1
;    65 --          mov rdx,[rsp]
;    66 --          push 1                      -- cr
;    67 --          call :%puthex64
;    68             mov rdx,[rsp]
;    69             mov al,13                   -- e13ateafworav
;    70             sub rdx,1
;    71         []
;    72             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#0046275E: 351 06170000               v  00 00  1  20      
;    73             int3
                    int3                  ;#00462763: 314                        np 00 00 13  21      
;    74 
;    75     :%e01tcfAddiii
;    76 --  :%pAddiii
;    77     [32]
;    78         -- [edi] has blown 31-bit int; store as float and typecheck
;    79         pop edx
                pop edx                   ;#00462764: 132                        uv 04 00  1  34      
;    80         fild dword[edi]
                fild dword[edi]           ;#00462765: 333007                     np 00 80  3  35      
;    81         sub edx,1
                sub edx,1                 ;#00462767: 203352 01                  uv 04 04  1  38      
;    82         mov [edi],ebx
                mov [edi],ebx             ;#0046276A: 211037                     vu 00 88  1  38      
;    83         -- edi is ep2, edx is era
;    84         mov ecx,edi
                mov ecx,edi               ;#0046276C: 213317                     uv 02 80  1  39      
;    85     [64]
;    86         -- [rdi] has blown 63-bit int; store as float and typecheck
;    87         pop rdx
;    88         fild qword[rdi]
;    89         sub rdx,1
;    90         mov [rdi],rbx
;    91         -- rdi is ep2, rdx is era
;    92         mov rcx,rdi
;    93     []
;    94         call :%pStoreFlt
                call #0046388C (:%pStoreFlt)  ;#0046276E: 350 19110000               v  00 00  1  39      
;    95         mov al,110  -- e110tce(ecx)
                mov al,110                ;#00462773: 260 6E                     uv 01 00  1  40      
;    96 --      mov al,1    -- e01tcf(ecx)
;    97     [32]
;    98         mov ecx,edi
                mov ecx,edi               ;#00462775: 213317                     vu 02 80  1  40      
;    99     [64]
;   100         mov rcx,rdi
;   101     []
;   102         jmp :!iDiag
                jmp #00463E69 (:!iDiag)   ;#00462777: 351 ED160000               v  00 00  1  41      
;   103         int3
                int3                      ;#0046277C: 314                        np 00 00 13  42      
;   104 
;   105     :%e01tcfediDiv
;   106         -- calculate [edi]=(eax*ecx+edx)/ecx, as a float, and tcf it.
;   107     [32]
;   108         push edx
                push edx                  ;#0046277D: 122                        uv 00 04  1  55      
;   109         fild dword[esp]
                fild dword[esp]           ;#0046277E: 333004044                  np 00 10  3  56      
;   110         mov [esp],eax
                mov [esp],eax             ;#00462781: 211004044                  uv 00 11  1  59      
;   111         fild dword[esp]
                fild dword[esp]           ;#00462784: 333004044                  np 00 10  3  60      
;   112         mov [esp],ecx
                mov [esp],ecx             ;#00462787: 211014044                  uv 00 12  1  63      
;   113         fild dword[esp]
                fild dword[esp]           ;#0046278A: 333004044                  np 00 10  3  64      
;   114         fmulp
                fmulp st1,st0             ;#0046278D: 336311                     np 00 00  3  67      
;   115         faddp
                faddp st1,st0             ;#0046278F: 336301                     np 00 00  3  70      
;   116         fild dword[esp]
                fild dword[esp]           ;#00462791: 333004044                  np 00 10  3  73      
;   117         fdivp
                fdivp st1,st0             ;#00462794: 336371                     np 00 00 39  76      
;   118         add esp,4
                add esp,4                 ;#00462796: 203304 04                  uv 10 10  1 115      
;   119         call :%pStoreFlt
                call #0046388C (:%pStoreFlt)  ;#00462799: 350 EE100000               v  00 00  1 115      
;   120         pop edx
                pop edx                   ;#0046279E: 132                        uv 04 00  1 116      
;   121         mov ecx,edi     
                mov ecx,edi               ;#0046279F: 213317                     vu 02 80  1 116      
;   122         mov al,110  -- e110tcf(ecx)
                mov al,110                ;#004627A1: 260 6E                     uv 01 00  1 117      
;   123         sub edx,1
                sub edx,1                 ;#004627A3: 203352 01                  vu 04 04  1 117      
;   124         jmp :!iDiag
                jmp #00463E69 (:!iDiag)   ;#004627A6: 351 BE160000               v  00 00  1 118      
;   125     [64]
;   126         push rdx
;   127         fild qword[rsp]
;   128         mov [rsp],rax
;   129         fild qword[rsp]
;   130         mov [rsp],rcx
;   131         fild qword[rsp]
;   132         fmulp
;   133         faddp
;   134         fild qword[rsp]
;   135         fdivp
;   136         add rsp,8
;   137         call :%pStoreFlt
;   138         pop rdx
;   139         mov rcx,rdi     
;   140         mov al,110  -- e110tcf(ecx)
;   141         sub rdx,1
;   142         jmp :!iDiag
;   143     []
;   144         int3
                int3                      ;#004627AB: 314                        np 00 00 13 119      
;   145 --  :%pRTErf
;   146 --      int3
;   147 --DEV to go:
;   148     :%pRTErn
;   149         -- error code in al,
;   150         -- ep1 in edi,
;   151         -- ep2 in esi
;   152     [32]
;   153         pop edx -- era
                pop edx                   ;#004627AC: 132                        uv 04 00  1 132      
;   154         sub edx,1
                sub edx,1                 ;#004627AD: 203352 01                  uv 04 04  1 133 04   
;   155     [64]
;   156         pop rdx -- era
;   157         sub rdx,1
;   158     []
;   159         jmp :!iDiag
                jmp #00463E69 (:!iDiag)   ;#004627B0: 351 B4160000               v  00 00  1 133      
;   160         int3
                int3                      ;#004627B5: 314                        np 00 00 13 134      
;   161     :%pDiv0 
;   162 --      int3
;   163     :%e02atdb0
;   164 --      int3
;   165 --or
;   166 --!/*
;   167     [32]
;   168         pop edx
                pop edx                   ;#004627B6: 132                        uv 04 00  1 147      
;   169 --      mov edi,ebp
;   170 --      mov esi,esp
;   171         mov al,2
                mov al,2                  ;#004627B7: 260 02                     vu 01 00  1 147      
;   172         add edx,-1
                add edx,-1                ;#004627B9: 203302 FF                  uv 04 04  1 148      
;   173     [64]
;   174         pop rdx
;   175 --      mov rdi,rbp
;   176 --      mov rsi,rsp
;   177         mov al,2
;   178         add rdx,-1
;   179     []
;   180         jmp :!iDiag
                jmp #00463E69 (:!iDiag)   ;#004627BC: 351 A8160000               v  00 00  1 148      
;   181         int3
                int3                      ;#004627C1: 314                        np 00 00 13 149      
;   182 --!*/
;   183 
;   184     :%e01tcfDivi2   -- (opDivi2)
;   185 --      <int>:=<odd_int>/2 ---> type check error, <int> is x.5:
;   186 --;calling convention:
;   187 --; mov eax,[p2]
;   188 --; mov edx,p1
;   189 --; sar eax,1
;   190 --; jnc @f
;   191 --; call :%e01tcfDivi2  -- type check error, <p1> is xxx.5
;   192     [32]
;   193         push eax
                push eax                  ;#004627C2: 120                        uv 00 01  1 162      
;   194 --  pop ecx             ; return address
;   195         fild dword[esp]
                fild dword[esp]           ;#004627C3: 333004044                  np 00 10  3 163      
;   196 --  mov [era],ecx
;   197 --  fadd [half]
;   198         mov edi,edx
                mov edi,edx               ;#004627C6: 213372                     uv 80 04  1 166      
;   199         add esp,4
                add esp,4                 ;#004627C8: 203304 04                  vu 10 10  1 166      
;   200     [64]
;   201         push rax
;   202         fild qword[rsp]
;   203         mov rdi,rdx
;   204         add rsp,8
;   205     []
;   206         fld1
                fld1                      ;#004627CB: 331350                     np 00 00  2 167      
;   207         fld1
                fld1                      ;#004627CD: 331350                     np 00 00  2 169      
;   208         fld1
                fld1                      ;#004627CF: 331350                     np 00 00  2 171      
;   209         faddp
                faddp st1,st0             ;#004627D1: 336301                     np 00 00  3 173      
;   210         fdivp   -- (0.5)
                fdivp st1,st0             ;#004627D3: 336371                     np 00 00 39 176      
;   211         faddp
                faddp st1,st0             ;#004627D5: 336301                     np 00 00  3 215      
;   212         jmp @f  -- (type check error, <int> is x.5)
                jmp #004627E0             ;#004627D7: 353 07                     v  00 00  1 218      
;   213 
;   214     :%e01tcfediMul -- (opMuliii)
;   215         [32]
;   216 -- this might want to be push eax:ecx; fild qword[esp]...
;   217             push eax
                    push eax              ;#004627D9: 120                        uv 00 01  1 219      
;   218             fild dword[esp]
                    fild dword[esp]       ;#004627DA: 333004044                  np 00 10  3 220      
;   219             add esp,4
                    add esp,4             ;#004627DD: 203304 04                  uv 10 10  1 223      
;   220           @@:
;   221             call :%pStoreFlt        -- [edi]!=st0
                    call #0046388C (:%pStoreFlt)  ;#004627E0: 350 A7100000               v  00 00  1 223      
;   222             pop edx
                    pop edx               ;#004627E5: 132                        uv 04 00  1 224      
;   223             mov al,110              -- e110tce(ecx)
                    mov al,110            ;#004627E6: 260 6E                     vu 01 00  1 224      
;   224             sub edx,1
                    sub edx,1             ;#004627E8: 203352 01                  uv 04 04  1 225      
;   225             mov ecx,edi
                    mov ecx,edi           ;#004627EB: 213317                     vu 02 80  1 225      
;   226             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#004627ED: 351 77160000               v  00 00  1 226      
;   227             int3
                    int3                  ;#004627F2: 314                        np 00 00 13 227      
;   228         [64]
;   229             push rax
;   230             fild qword[rsp]
;   231 --  ::e01tcfst0rdi
;   232             add rsp,8
;   233           @@:
;   234             call :%pStoreFlt        -- [rdi]!=st0
;   235             pop rdx
;   236             mov al,110              -- e110tce(ecx)
;   237             sub rdx,1
;   238             mov rcx,rdi
;   239             jmp :!iDiag
;   240             int3
;   241         []
;   242 --;calling convention:
;   243 --; mov ecx,[p3]
;   244 --; mov eax,[p2]
;   245 --; imul ecx
;   246 --; mov edi,p1
;   247 --; mov ecx,edx
;   248 --; cdq ; eax-> edx:eax
;   249 --; cmp ecx,edx ; blown 32 bits?
;   250 --; je @f
;   251 --; call :%e01tcfediMul
;   252 --; mov esi,eax
;   253 --; shl esi,1
;   254 --; jo (call :%e01tcfediMul) ; blown 31 bits?
;   255 --; mov [edi],eax
;   256 
;   257     :!opCallOnceYeNot
;   258 -- (new error code)
;   259         int3
                int3                      ;#004627F3: 314                        np 00 00 13 240      
;   260 
;   261       }
;   262 
    jmp #00462C8F (:%opRetf)              ;#004627F4: 351 96040000               v  00 00  1 253      
;C:\Phix\builtins\VM\pFPU.e:
;===========================
;     1 --
;     2 -- pFPU.e
;     3 -- ======
;     4 --
;     5 --  Floating point precision control
;     6 --  implements :%down53, :%near53, :%trunc53, :%down64, :%near64, :%trunc64
;     7 --  Used by: pSubseN.e, pMath.e, pHeap.e, etc, etc
;     8 --
;     9 --  The Control Word rounding control is in bits 10..11:
;    10 --      00 = and_bits(ax,0xF3FF) = Round to nearest, or even if equidistant (this is the initialized state)
;    11 --      01 = 0x0400 = Round down (toward -infinity)
;    12 --      10 = 0x0800 = Round up (toward +infinity)
;    13 --      11 = 0x0C00 = Truncate (toward 0)
;    14 --
;    15 --  The Control Word precision control is in bits 8..9 (0x0300)
;    16 --      00 = and_bits(ax,0xFCFF) = 24 bits (REAL4)
;    17 --      01 = Not used
;    18 --      10 = 0x0200 = 53 bits (REAL8)
;    19 --      11 = 0x0300 = 64 bits (REAL10) (this is the initialized state)
;    20 --
;    21 -- Not strictly relevant, but while that web page is open, some interesting Status Word bits (after compare):
;    22 --      C3 = 0x400 = Z flag
;    23 --      C2 = 0x040 = P flag
;    24 --      C1 = 0x020 = ?
;    25 --      C0 = 0x010 = C flag
;    26 --
;    27 --without debug
;    28 
;    29 -- fpu round/precision control: (these are treated as 16-bit words)
;    30 integer near53 = 0  -- usual/default setting for 32-bit
;    31 integer down53 = 0  -- for truncating f.p. idx, etc
;    32 integer trunc53 = 0 -- for poke etc
;    33 integer up53 = 0
;    34 integer near64 = 0  -- usual/default setting for 64-bit, unused in 32-bit
;    35 integer down64 = 0  -- used by (32-bit) opFloor, and 64-bit for idx, etc
;    36 integer trunc64 = 0 -- for poke etc
;    37 integer up64 = 0
;    38 
;    39 #ilASM{ jmp :!opCallOnceYeNot
                jmp :!opCallOnceYeNot     ;#004620E3: 351 0B070000               v  00 00  1   1      
;    40 --/*
;    41 procedure :>initFPU(:>)
;    42 end procedure -- (for Edita/CtrlQ)
;    43 --*/
;    44     :>initFPU
;    45 -------------
;    46         fninit                      -- initialise FPU
                fninit                    ;#004620E8: 333343                     np 00 00 12   2      
;    47     [32]
;    48         sub esp,4
                sub esp,4                 ;#004620EA: 203354 04                  uv 10 10  1  14      
;    49         fnstcw word[esp]            --                                                  -- 7F 03 (NB: le notation)
                fnstcw word[esp]          ;#004620ED: 331074044                  np 00 10  2  17    *10*
;    50         and word[esp],0xF0FF        -- set rounding to nearest or even,                 -- 7F 00
                and word[esp],-3841       ;#004620F0: 146:201044044 FFF0         uv 00 10  3  19      
;    51         or word[esp],0x0200         -- and 53 bit precision as the default              -- 7F 02
                or word[esp],512          ;#004620F6: 146:201014044 0002         vu 00 10  3  21      
;    52         fldcw word[esp]
                fldcw word[esp]           ;#004620FC: 331054044                  np 00 10  8  22      
;    53         mov ax,word[esp]
                mov ax,word[esp]          ;#004620FF: 146:213004044              uv 01 10  1  30      
;    54         add esp,4
                add esp,4                 ;#00462103: 203304 04                  vu 10 10  1  30      
;    55     [64]
;    56         sub rsp,8
;    57         fnstcw word[rsp]            --                                                  -- 7F 03 (NB: le notation)
;    58         and word[rsp],0xF0FF        -- set rounding to nearest or even,                 -- 7F 00
;    59         or word[rsp],0x0200         -- and 53 bit precision                             -- 7F 02
;    60         mov ax,word[rsp]
;    61     []
;    62         mov word[near53],ax         --                                                  -- 7F 02
                mov word[#004021E0] (near53),ax  ;#00462106: 146:243 E0214000           uv 00 01  1  31      
;    63         or ax,0x0600                -- round down, 53 bit precision                     -- 7F 06
                or ax,1536                ;#0046210C: 146:015 0006               vu 01 01  1  31      
;    64         mov word[down53],ax
                mov word[#004021E4] (down53),ax  ;#00462110: 146:243 E4214000           uv 00 01  1  32      
;    65         or ax,0x0700                -- round down, 64 bit precision                     -- 7F 07
                or ax,1792                ;#00462116: 146:015 0007               vu 01 01  1  32      
;    66         mov word[down64],ax
                mov word[#004021F4] (down64),ax  ;#0046211A: 146:243 F4214000           uv 00 01  1  33      
;    67         or ax,0x0E00                -- truncate, 64 bit precision
                or ax,3584                ;#00462120: 146:015 000E               vu 01 01  1  33      
;    68         mov word[trunc64],ax
                mov word[#004021F8] (trunc64),ax  ;#00462124: 146:243 F8214000           uv 00 01  1  34      
;    69         sub ax,0x0100               -- truncate, 53 bit precision
                sub ax,256                ;#0046212A: 146:055 0001               vu 01 01  1  34      
;    70         mov word[trunc53],ax
                mov word[#004021E8] (trunc53),ax  ;#0046212E: 146:243 E8214000           uv 00 01  1  35      
;    71     [64]
;    72         mov ax,word[rsp]
;    73         add rsp,8
;    74         or ax,0x0300
;    75         mov word[near64],ax                                                             -- 7F 03
;    76         fldcw word[near64]
;    77     []
;    78         mov ax,word[down53]         --                                                  -- 7F 06
                mov ax,word[#004021E4] (down53)  ;#00462134: 146:241 E4214000           vu 01 00  1  35      
;    79         xor ax,0x0C00
                xor ax,3072               ;#0046213A: 146:065 000C               uv 01 01  1  36      
;    80         mov word[up53],ax           --                                                  -- 7F 0A
                mov word[#004021EC] (up53),ax  ;#0046213E: 146:243 EC214000           uv 00 01  1  37 01   
;    81         mov ax,word[down64]         --                                                  -- 7F 07
                mov ax,word[#004021F4] (down64)  ;#00462144: 146:241 F4214000           vu 01 00  1  37      
;    82         xor ax,0x0C00
                xor ax,3072               ;#0046214A: 146:065 000C               uv 01 01  1  38      
;    83         mov word[up64],ax           --                                                  -- 7F 0B
                mov word[#004021FC] (up64),ax  ;#0046214E: 146:243 FC214000           uv 00 01  1  39 01   
;    84         ret
                ret                       ;#00462154: 303                        np 00 00  2  40      
;    85 
;    86 --/*
;    87 procedure :%down53(:%)
;    88 end procedure -- (for Edita/CtrlQ)
;    89 --*/
;    90     :%down53
;    91 ------------
;    92         fldcw word[down53]
                fldcw word[#004021E4] (down53)  ;#00462155: 331055 E4214000            np 00 00  8  42      
;    93         ret
                ret                       ;#0046215B: 303                        np 00 00  2  50      
;    94 
;    95 --/*
;    96 procedure :%up53(:%)
;    97 end procedure -- (for Edita/CtrlQ)
;    98 --*/
;    99     :%up53
;   100 ----------
;   101         fldcw word[up53]
                fldcw word[#004021EC] (up53)  ;#0046215C: 331055 EC214000            np 00 00  8  52      
;   102         ret
                ret                       ;#00462162: 303                        np 00 00  2  60      
;   103 
;   104 --/*
;   105 procedure :%near53(:%)
;   106 end procedure -- (for Edita/CtrlQ)
;   107 --*/
;   108     :%near53
;   109 ------------
;   110         fldcw word[near53]
                fldcw word[#004021E0] (near53)  ;#00462163: 331055 E0214000            np 00 00  8  62      
;   111         ret
                ret                       ;#00462169: 303                        np 00 00  2  70      
;   112 
;   113 --/*
;   114 procedure :%trunc53(:%)
;   115 end procedure -- (for Edita/CtrlQ)
;   116 --*/
;   117     :%trunc53
;   118 ------------
;   119         fldcw word[trunc53]
                fldcw word[#004021E8] (trunc53)  ;#0046216A: 331055 E8214000            np 00 00  8  72      
;   120         ret
                ret                       ;#00462170: 303                        np 00 00  2  80      
;   121 
;   122 --/*
;   123 procedure :%down64(:%)
;   124 end procedure -- (for Edita/CtrlQ)
;   125 --*/
;   126     :%down64
;   127 ------------
;   128         fldcw word[down64]
                fldcw word[#004021F4] (down64)  ;#00462171: 331055 F4214000            np 00 00  8  82      
;   129         ret
                ret                       ;#00462177: 303                        np 00 00  2  90      
;   130 
;   131 --/*
;   132 procedure :%up64(:%)
;   133 end procedure -- (for Edita/CtrlQ)
;   134 --*/
;   135     :%up64
;   136 ------------
;   137         fldcw word[up64]
                fldcw word[#004021FC] (up64)  ;#00462178: 331055 FC214000            np 00 00  8  92      
;   138         ret
                ret                       ;#0046217E: 303                        np 00 00  2 100      
;   139 
;   140 --/*
;   141 procedure :%near64(:%)
;   142 end procedure -- (for Edita/CtrlQ)
;   143 --*/
;   144     :%near64
;   145 ------------
;   146         fldcw word[near64]
                fldcw word[#004021F0] (near64)  ;#0046217F: 331055 F0214000            np 00 00  8 102      
;   147         ret
                ret                       ;#00462185: 303                        np 00 00  2 110      
;   148 
;   149 --/*
;   150 procedure :%trunc64(:%)
;   151 end procedure -- (for Edita/CtrlQ)
;   152 --*/
;   153     :%trunc64
;   154 ------------
;   155         fldcw word[trunc64]
                fldcw word[#004021F8] (trunc64)  ;#00462186: 331055 F8214000            np 00 00  8 112      
;   156         ret
                ret                       ;#0046218C: 303                        np 00 00  2 120      
;   157       }
    jmp #00462C8F (:%opRetf)              ;#0046218D: 351 FD0A0000               v  00 00  1 122      
;C:\Phix\builtins\pcurrdir.e: - skipped (without debug)
;=======================================================
;C:\Phix\builtins\pgetpath.e: - skipped (without debug)
;=======================================================
;C:\Phix\builtins\peekstr.e: - skipped (without debug)
;======================================================
;C:\Phix\builtins\pcase.e: - skipped (without debug)
;====================================================
;C:\Phix\builtins\ppp.e:
;=======================
;     1 --
;     2 -- Pete's Pretty Print. (Phix compatible)
;     3 -- ===================
;     4 -- Author Pete Lomax May 2003
;     5 -- thanks to Juergen Luethje for help and suggestions.
;     6 --           Revised August 2003
;     7 --           Revised October 2003
;     8 --           Revised September 2004
;     9 --           Revised June 2010
;    10 --
;    11 --   04/06/10: Added pp_Q22 option
;    12 -- Version 2.0.4
;    13 --   27/03/09: Updated for auto-include, string handling.
;    14 --   12/12/04: added escape char handling to strings (see escBytes)
;    15 -- Version 2.0.3
;    16 --   07/09/04: pp_IntFmt applies to 32-bit integers not just 31-bit
;    17 --      (#80000000..#7FFFFFFF not just #C0000000..#3FFFFFFF)
;    18 --Ahem: -#FFFFFFFF..#FFFFFFFF as requested by JL.
;    19 --
;    20 -- Version 2.0.1
;    21 --   05/06/04: float format default changed to %g (was %3.2g)
;    22 --
;    23 --!/**/without debug -- keep ex.err clean (remove to debug!)
;    24 --!/**/with debug
;    25 --  NB: the "without debug" in pdiag.e overshadows the one here; you may
;    26 --      need to "with debug" here to get a listing, or use -nodiag.
;    27 --without trace -- (covered by without debug)
;    28 
;    29 --
;    30 -- Introduction.
;    31 -- ============
;    32 --
;    33 --  Prints any object to screen, file, or returns a string.
;    34 --  Long sequences are automatically line-wrapped and optionally 
;    35 --  displayed in a neat (vertically aligned) nested format.
;    36 --
;    37 --  Default handling.
;    38 --  ================
;    39 --  All these settings can be changed:
;    40 --   Display to screen (ie file 1, aka stdout).
;    41 --   Lines are wrapped at 78 characters.
;    42 --   Display is paused every 23 lines.
;    43 --   Strings are printed as double-quoted ascii, eg "abc".
;    44 --<   Values in the range #20 to #7F are treated as ascii.
;    45 --    Values in the range #20 to #7D are treated as ascii.
;    46 --   Integers are printed using a "%d" format.
;    47 --   Floating point numbers are printed using a "%g" format.
;    48 --   Date handling is turned off by default.
;    49 --   Sequences are enclosed in curly braces '{' and '}'.
;    50 --
;    51 --  The default behaviour can be changed permanently using ppOpt,
;    52 --  or temporarily using ppEx(object,<option-list>).
;    53 --
;    54 --  Interface.
;    55 --  =========    
;    56 --   pp(object)     Output using the current settings.
;    57 --                  This is the way this routine is normally used.
;    58 --
;    59 --   x=ppf(object)  Return a string representation, (with embedded \n if 
;    60 --                  needed), rather than display to screen or write to file.
;    61 --                  Note there is no trailing \n on the result
;    62 --
;    63 --   ppOpt(options) Permanently (or until next ppOpt call) change
;    64 --                  selected formatting options (see below).
;    65 --
;    66 --   ppEx(object,options) Temporarily apply specified options while
;    67 --                  printing object. Defaults are reset before exit.
;    68 --
;    69 --   x=ppExf(object,options) Return a string representation using the
;    70 --                  specified temporary formatting options.
;    71 --
;    72 --  Formatting options.
;    73 --  ==================
;    74 --   Example:
;    75 --
;    76 --      ppOpt({pp_IntFmt,"%d.00 US$"})
;    77 --      ppOpt({pp_FltFmt,"%.2f US$"})
;    78 --
;    79 --      x=ppf(1) -- returns "1.00 US$"
;    80 --
;    81 --   Notes:
;    82 --    When using this routine to format values which may or may not have a
;    83 --    fractional element, both the integer and float formats should be set.
;    84 --    The following one line can be used instead of the above:
;    85 --
;    86 --      x=ppExf(1,{{pp_IntFmt,"%d.00 US$",pp_FltFmt,"%.2f US$"})
;    87 --
;    88 --   The options are specified as a pair-sequence, selected from:
;    89 --
;    90 --         Odd element:    Even element:
;    91 --          pp_File         0:no output (used by ppf())
;    92 --                          1:display to Screen (the default),
;    93 --                          n:an open file handle
;    94 --          pp_Nest         nest level, eg:
;    95 --                          0: output is {1, {2, {3,3}, 2}, 1}
;    96 --                          1: output is {1,
;    97 --                                        {2, {3,3}, 2},
;    98 --                                        1}
;    99 --                          See below for more examples.
;   100 --          pp_Maxlen       Split lines at column, default 78
;   101 --          pp_Indent       Auto-indent amount, default 0
;   102 --          pp_Pause        Pause every n lines, default=23.
;   103 --                          Specify 0 for no pause
;   104 --          pp_StrFmt       0: print strings as eg "abc" (default)
;   105 --                         -1:  ditto, but without quotes.
;   106 --                         -2:  as 0, but chars number-only like +1                 [DEPRECATED: use pp_IntCh,false instead]
;   107 --                         -3:  as -1, ""                                           [ "" (and pp_StrFmt,-1)]
;   108 --                          1: as number only, eg {97, 98, 99}                      [DEPRECATED: use pp_StrFmt,3,pp_IntCh,false instead]
;   109 --                          3: as number&text, eg {97a, 98b, 99c}
;   110 --          pp_IntCh        show ints as eg 65'A', default false (==just 65)
;   111 --          pp_IntFmt       Integer format, default "%d"
;   112 --                          NB: applies to pp_StrFmt 1 as well.
;   113 --          pp_FltFmt       Float format, default "%.10g"
;   114 --                          Both pp_IntFmt and pp_FltFmt can contain extra text,
;   115 --                          eg "#%08x (integer)", "%04.1 km", or "%.2f US$"
;   116 --          pp_Ascii        Min/max ascii character, default {' ',#7D}
;   117 --                          If sequences are passed, they define ranges.
;   118 --                          Eg, for ISO 8859-1, use {{#20,#A0},{#7E,#FF}},
;   119 --                          since characters 0..31 and 127..159 are system codes.
;   120 --                          (Note it is {start1,start2,...},{end1,end2,...})
;   121 --          pp_Date         "": no special date handling (Default)
;   122 --                          "%04d-%02d-%02d": eg 2003-12-31
;   123 --                          "%02d/%02d/%04d": eg 31/12/2003
;   124 --                          Sequences of 3 integers, in the form {day,month,year} or
;   125 --                          {year,month,day}, with 1<=day<=31, 1<=month<=12, and
;   126 --                          1900<=year<=3000 are recognised as dates.
;   127 --          pp_Brkt         "{}" (default) outputs '{' at the start of a (nested)
;   128 --                          sequence and '}' at the end. Must be two characters.
;   129 --          pp_Q22          Show quotes as #22 (default 0, ie \")
;   130 --
;   131 --   eg ppOpt({pp_StrFmt,0,pp_Nest,2})
;   132 --
;   133 -- More Examples of pp_Nest:
;   134 -- ========================
;   135 --
;   136 -- obj={1,{2,{3,3},2},1}
;   137 -- ppOpt({pp_Nest,0})
;   138 -- pp(obj) gives: 
;   139 -- 
;   140 -- {1, {2, {3,3}, 2}, 1}
;   141 --
;   142 -- ppEx(obj,{pp_Nest,1}) gives:
;   143 --
;   144 -- {1,
;   145 --  {2, {3,3}, 2},
;   146 --  1}
;   147 --
;   148 -- ppEx(obj,{pp_Nest,2}) gives:
;   149 --
;   150 -- {1,
;   151 --  {2,
;   152 --   {3,3},
;   153 --   2},
;   154 --  1}
;   155 --
;   156 -- nest may also be a sequence of {indent,nest_level}.
;   157 --  In the above examples, note how the 1, {, and 1 display in the 
;   158 --  same column. If an indent level is specified, spaces are inserted 
;   159 --  in the "{1" to maintain alignment.
;   160 --
;   161 -- ppEx(obj,{pp_Nest,{2,2}}) gives:
;   162 --
;   163 -- { 1,
;   164 --   { 2,
;   165 --     { 3,3},
;   166 --     2},
;   167 --   1}
;   168 --
;   169 -- ppEx(obj,{pp_Nest,{3,2}}) gives:
;   170 --
;   171 -- {  1,
;   172 --    {  2,
;   173 --       {  3,3},
;   174 --       2},
;   175 --    1}
;   176 --
;   177 -- Naturally, some experimentation may be required to find the 
;   178 -- indent/nest combination which works best with your data.
;   179 --
;   180 -- Also, specifying a nest of -1 suppresses the trailing \n
;   181 --
;   182 -- Programming notes
;   183 -- =================
;   184 --
;   185 --    no spaces in innermost sequences:
;   186 --          if atom(cl[i]) and (i=length(cl) or atom(cl[i+1])) then
;   187 --              -- as req by Juergen Luethje
;   188 --              sep=","
;   189 --          else
;   190 --              sep=", "
;   191 --          end if
;   192 --
;   193 -- If you are interested in how it works, (obviously you need to at 
;   194 -- least skim the rest), the key to understanding is in the recursion:
;   195 --
;   196 --  function prnf(object cl, integer col, integer indent, integer prnt, integer nestlvl)
;   197 --          len+=prnf(cl[i],col+len,col+nindent,[0|prnt],nestlvl-1)
;   198 --
;   199 --  Briefly, cl is the object being printed,
;   200 --  col & indent are column and indent with a few subtle twists ;-),
;   201 --  prnt=0 allows the routine to find out long it would be if printed, so it can make
;   202 --   an informed decision whether it fits or if it needs to break the line,
;   203 --  and nestlvl is the nest level, decremented as we recurse.
;   204 --
;   205 --  Otherwise it is pretty trivial - there is more glue round puts() 
;   206 --  and to set up the parameters than anything else.
;   207 --
;   208 --DEV wrong one for newEmit
;   209 --!/**/include builtins\pprntf.e -- (not strictly necessary, but saves on opCallOnce/fwd calls/onDeclaration)
;   210 
;   211 integer ppp_Maxlen = 78     -- break lines longer than this
;   212 integer ppp_Indent = 0      -- auto-indent all lines this much
;   213 object  ppp_Nest = 0        -- nest level
;   214 integer ppp_Pause = 0       -- pause display after this many lines, 0=never pause
;   215 integer ppp_StrFmt = 0      -- 0=text as strings, -1 without quotes,
;   216                             -- 3 as numbers [each as per pp_IntCh]
;   217 --3/4/21
;   218 --integer ppp_IntCh = true  -- ints as eg 65'A' (false=just 65, (-1 and ' '..'~')=just 'A')
;   219 integer ppp_IntCh = false   -- ints as eg 65 (true=65'A', (-1 with ' '..'~')=just 'A')
;   220 
;   221 integer ppp_Init =  0
;   222 
;   223 object  ppp_Ascii --={#20,#7D}  -- low ascii [ranges]
;   224 sequence ppp_IntFmt --="%d"     -- integer display format
;   225 sequence ppp_FltFmt --="%.10g"  -- float display format
;   226 sequence ppp_Date  --=""        -- date handling
;   227 sequence ppp_Br --="{}"         -- Bracket characters
;   228 integer ppp_Q22 = 0     -- Show quotes as #22 (default 0)
;   229 
;   230 sequence ascii
;   231 
;   232 integer ppp_File = 1        -- default: display to Screen
;   233 
;   234 --!/**/  string ppp_result --/*
;   235 sequence ppp_result         -- print result if ppp_File is 0
;   236 --!*/
;   237 
;   238 --/* Not required for Phix (see psym.e routine syminit)
;   239 global constant pp_File     = 1,
;   240                 pp_Maxlen   = 2,
;   241                 pp_Indent   = 11,
;   242                 pp_Pause    = 3,
;   243                 pp_StrFmt   = 4,
;   244                 pp_IntFmt   = 5,
;   245                 pp_FltFmt   = 6,
;   246                 pp_Nest     = 7,
;   247                 pp_Ascii    = 8,
;   248                 pp_Date     = 9,
;   249                 pp_Brkt     = 10,
;   250                 pp_Q22      = 12,
;   251                 pp_IntCh    = 13
;   252 --*/
;   253 
;   254 --DEV:
;   255 --!/**/ string pline --/*
;   256 sequence pline          -- output line, as built by sput()
;   257 --!*/
;   258 integer  plen  = 0      -- used part of pline; rest is garbage
;   259 integer  sline = 0      -- counter for screen line
;   260 integer  nindent        -- indent increment when nesting
;   261 
;   262 procedure spurge()
;   263 --
;   264 -- display/concatenate the output built so far
;   265 --
;   266     if ppp_File then
    mov ecx,[#00402478] (ppp_File)        ;#00442440: 213015 78244000            uv 02 00  1   1      
    test ecx,ecx                          ;#00442446: 205311                     uv 00 02  1   2 02   
    je #00442492                          ;#00442448: 164 48                     v  00 00  1   2      
;   267         puts(ppp_File,pline[1..plen])
    mov edi,[#00402480] (pline)           ;#0044244A: 213075 80244000            uv 80 00  1   3      
    cmp edi,h4                            ;#00442450: 201377 00000040            uv 00 80  1   4 80   
    jne #00442462                         ;#00442456: 165 0A                     v  00 00  1   4      
    mov esi,948                           ;#00442458: 276 B4030000               uv 40 00  1   5      
    call #00462744 (:%pUnassigned)        ;#0044245D: 350 E2020200               v  00 00  1   5      
    mov edx,ebp                           ;#00442462: 213325                     uv 04 20  1   6      
    mov ecx,1                             ;#00442464: 271 01000000               vu 02 00  1   6      
    push #00442483                        ;#00442469: 150 83244400               uv 00 00  1   7      
    push edx                              ;#0044246E: 122                        vu 00 04  1   7      
    push dword[#00402484] (plen)          ;#0044246F: 377065 84244000            np 00 00  2   8      
    push 1                                ;#00442475: 152 01                     uv 00 00  1  10      
    mov esi,edi                           ;#00442477: 211376                     vu 40 80  1  10      
    mov edx,948                           ;#00442479: 272 B4030000               uv 04 00  1  11      
    jmp #00460A75 (:%pSubss)              ;#0044247E: 351 F2E50100               v  00 00  1  11      
    mov eax,[#00402478] (ppp_File)        ;#00442483: 241 78244000               uv 01 00  1  12      
    mov edx,[ebp] (symtab[953])           ;#00442488: 213125 00                  vu 04 20  1  12      
    call #0045E072 (:%opPuts)             ;#0044248B: 350 E2BB0100               v  00 00  1  13      
    jmp #004424F2                         ;#00442490: 353 60                     v  00 00  1  14      
;   268     else
;   269         ppp_result &= pline[1..plen]
    mov esi,[#00402480] (pline)           ;#00442492: 213065 80244000            uv 40 00  1  15      
    cmp esi,h4                            ;#00442498: 201376 00000040            uv 00 40  1  16 40   
    jne #004424AA                         ;#0044249E: 165 0A                     v  00 00  1  16      
    mov esi,948                           ;#004424A0: 276 B4030000               uv 40 00  1  17      
    call #00462744 (:%pUnassigned)        ;#004424A5: 350 9A020200               v  00 00  1  17      
    mov edx,ebp                           ;#004424AA: 213325                     uv 04 20  1  18      
    mov ecx,1                             ;#004424AC: 271 01000000               vu 02 00  1  18      
    push #004424C9                        ;#004424B1: 150 C9244400               uv 00 00  1  19      
    push edx                              ;#004424B6: 122                        vu 00 04  1  19      
    push dword[#00402484] (plen)          ;#004424B7: 377065 84244000            np 00 00  2  20      
    push 1                                ;#004424BD: 152 01                     uv 00 00  1  22      
    mov edx,948                           ;#004424BF: 272 B4030000               vu 04 00  1  22      
    jmp #00460A75 (:%pSubss)              ;#004424C4: 351 ACE50100               v  00 00  1  23      
    mov ecx,[#0040247C] (ppp_result)      ;#004424C9: 213015 7C244000            uv 02 00  1  24      
    cmp ecx,h4                            ;#004424CF: 201371 00000040            uv 00 02  1  25 02   
    jne #004424E1                         ;#004424D5: 165 0A                     v  00 00  1  25      
    mov esi,947                           ;#004424D7: 276 B3030000               uv 40 00  1  26      
    call #00462744 (:%pUnassigned)        ;#004424DC: 350 63020200               v  00 00  1  26      
    mov edx,#0040247C                     ;#004424E1: 272 7C244000               uv 04 00  1  27      
    mov edi,#0040247C                     ;#004424E6: 277 7C244000               vu 80 00  1  27      
    mov ecx,ebp                           ;#004424EB: 213315                     uv 02 20  1  28      
    call #0045FD65 (:%opConcat)           ;#004424ED: 350 73D80100               v  00 00  1  28      
;   270     end if
;   271     plen = 0
    mov [#00402484] (plen),ebx            ;#004424F2: 211035 84244000            uv 00 08  1  29      
    jmp #00462C8F (:%opRetf)              ;#004424F8: 351 92070200               v  00 00  1  29      
;   272 end procedure
;   273 
;   274 --integer dieonceonly
;   275 --      dieonceonly=1
;   276 
;   277 --/*
;   278 constant M_WAIT_KEY = 26
;   279 --*/
;   280 
;   281 procedure sput(object txt)
;   282 --
;   283 -- bundle "puts(1," calls together for output one line at a time.
;   284 --
;   285     integer p = plen+1
    mov edi,[#00402484] (plen)            ;#004424FD: 213075 84244000            uv 80 00  1   1      
    add edi,1                             ;#00442503: 203307 01                  uv 80 80  1   2 80   
    mov edx,edi                           ;#00442506: 213327                     uv 04 80  1   3 80   
    mov [ebp-4] (p),edi                   ;#00442508: 211175 FC                  vu 00 A0  1   3      
    shl edx,1                             ;#0044250B: 321342                     u  04 04  1   4      
    jno #00442517                         ;#0044250D: 161 08                     v  00 00  1   4      
    lea edi,[ebp-4] (p)                   ;#0044250F: 215175 FC                  uv 80 20  1   5      
    call #00462764 (:%e01tcfAddiii)       ;#00442512: 350 4D020200               v  00 00  1   5      
;   286     if atom(txt) then
    mov eax,[ebp] (txt)                   ;#00442517: 213105 00                  uv 01 20  1   6      
    cmp eax,h4                            ;#0044251A: 075 00000040               uv 00 01  1   7 01   
    jl #00442528                          ;#0044251F: 174 07                     v  00 00  1   7      
    cmp byte[ebx+eax*4-1],#12             ;#00442521: 200174203 FF 12            u  00 09  2   8      
    jne #00442549                         ;#00442526: 165 21                     v  00 00  1   9      
;   287         plen += 1
    mov esi,[#00402484] (plen)            ;#00442528: 213065 84244000            uv 40 00  1  10      
    add esi,1                             ;#0044252E: 203306 01                  uv 40 40  1  11 40   
    mov edx,esi                           ;#00442531: 213326                     uv 04 40  1  12 40   
    mov [#00402484] (plen),esi            ;#00442533: 211065 84244000            vu 00 40  1  12      
    shl edx,1                             ;#00442539: 321342                     u  04 04  1  13      
    jno #0044256E                         ;#0044253B: 161 31                     v  00 00  1  13      
    mov edi,#00402484                     ;#0044253D: 277 84244000               uv 80 00  1  14      
    call #00462764 (:%e01tcfAddiii)       ;#00442542: 350 1D020200               v  00 00  1  14      
    jmp #0044256E                         ;#00442547: 353 25                     v  00 00  1  15      
;   288     else
;   289 --if dieonceonly then
;   290 ------/**/if not string(txt) then ?9/0 end if    --DEV
;   291 --dieonceonly=0
;   292 --end if
;   293         plen += length(txt)
    mov ecx,[ebx+eax*4-12]                ;#00442549: 213114203 F4               uv 02 09  1  16      
    mov [ebp-8] (symtab[957]),ecx         ;#0044254D: 211115 F8                  uv 00 22  1  17 02   
    mov edi,[#00402484] (plen)            ;#00442550: 213075 84244000            vu 80 00  1  17      
    add edi,ecx                           ;#00442556: 001317                     uv 80 82  1  18      
    mov edx,edi                           ;#00442558: 213327                     uv 04 80  1  19 80   
    mov [#00402484] (plen),edi            ;#0044255A: 211075 84244000            vu 00 80  1  19      
    shl edx,1                             ;#00442560: 321342                     u  04 04  1  20      
    jno #0044256E                         ;#00442562: 161 0A                     v  00 00  1  20      
    mov edi,#00402484                     ;#00442564: 277 84244000               uv 80 00  1  21      
    call #00462764 (:%e01tcfAddiii)       ;#00442569: 350 F6010200               v  00 00  1  21      
;   294     end if
;   295     if plen>length(pline) then
    lea edi,[ebp-8] (symtab[957])         ;#0044256E: 215175 F8                  uv 80 20  1  22      
    mov esi,[#00402480] (pline)           ;#00442571: 213065 80244000            vu 40 00  1  22      
    mov edx,948                           ;#00442577: 272 B4030000               uv 04 00  1  23      
    call #0045EFEC (:%opLen)              ;#0044257C: 350 6BCA0100               v  00 00  1  23      
    mov eax,[#00402484] (plen)            ;#00442581: 241 84244000               uv 01 00  1  24      
    cmp eax,ecx                           ;#00442586: 071310                     uv 00 03  1  25 01   
    jle #00442632                         ;#00442588: 017216 A4000000            v  00 00  1  25      
;   296         pline &= repeat(' ',plen-length(pline))
    lea edi,[ebp-8] (symtab[957])         ;#0044258E: 215175 F8                  uv 80 20  1  26      
    mov edx,948                           ;#00442591: 272 B4030000               vu 04 00  1  26      
    call #0045EFEC (:%opLen)              ;#00442596: 350 51CA0100               v  00 00  1  27      
    lea edi,[ebp-12] (symtab[958])        ;#0044259B: 215175 F4                  uv 80 20  1  28      
    mov ecx,eax                           ;#0044259E: 211301                     vu 02 01  1  28      
    mov eax,[ebp-8] (symtab[957])         ;#004425A0: 213105 F8                  uv 01 20  1  29      
    call #0045F299 (:%opSub)              ;#004425A3: 350 F1CC0100               v  00 00  1  29      
    mov ecx,6                             ;#004425A8: 271 06000000               uv 02 00  1  30      
    mov edx,206                           ;#004425AD: 272 CE000000               vu 04 00  1  30      
    call :%opFrame (repeatch)             ;#004425B2: 350 4B060200               v  00 00  1  31      
    mov [ebp] (ch), dword 32              ;#004425B7: 307105 00 20000000         uv 00 20  1  32      
    mov edi,[ebp+20] (prevebp)            ;#004425BE: 213175 14                  vu 80 20  1  32      
    mov eax,[edi-12]                      ;#004425C1: 213107 F4                  uv 01 80  1  35    *80*
    mov [edi-12], dword h4                ;#004425C4: 307107 F4 00000040         vu 00 80  1  35      
    cmp eax,h4                            ;#004425CB: 075 00000040               uv 00 01  1  36      
    jne #004425DC                         ;#004425D0: 165 0A                     v  00 00  1  36      
    mov esi,958                           ;#004425D2: 276 BE030000               uv 40 00  1  37      
    call #00462744 (:%pUnassigned)        ;#004425D7: 350 68010200               v  00 00  1  37      
    mov [ebp-4] (n),eax                   ;#004425DC: 211105 FC                  uv 00 21  1  38      
    mov [ebp+28] (retaddr),#004425EB      ;#004425DF: 307105 1C EB254400         vu 00 20  1  38      
    jmp #0045581E (code:repeatch)         ;#004425E6: 351 33320100               v  00 00  1  39      
    push eax                              ;#004425EB: 120                        uv 00 01  1  40      
    mov edi,[ebp-16] (symtab[959])        ;#004425EC: 213175 F0                  vu 80 20  1  40      
    cmp edi,h4                            ;#004425EF: 201377 00000040            uv 00 80  1  41      
    jle #00442605                         ;#004425F5: 176 0E                     v  00 00  1  41      
    sub dword[ebx+edi*4-8],1              ;#004425F7: 203154273 F8 01            u  00 88  3  42      
    jne #00442605                         ;#004425FC: 165 07                     v  00 00  1  44      
    mov edx,edi                           ;#004425FE: 213327                     uv 04 80  1  45      
    call #004639A8 (:%pDealloc)           ;#00442600: 350 A3130200               v  00 00  1  45      
    pop dword[ebp-16] (symtab[959])       ;#00442605: 217105 F0                  np 00 20  3  46      
    mov esi,[#00402480] (pline)           ;#00442608: 213065 80244000            uv 40 00  1  49      
    cmp esi,h4                            ;#0044260E: 201376 00000040            uv 00 40  1  50 40   
    jne #00442620                         ;#00442614: 165 0A                     v  00 00  1  50      
    mov esi,948                           ;#00442616: 276 B4030000               uv 40 00  1  51      
    call #00462744 (:%pUnassigned)        ;#0044261B: 350 24010200               v  00 00  1  51      
    mov edx,#00402480                     ;#00442620: 272 80244000               uv 04 00  1  52      
    mov edi,#00402480                     ;#00442625: 277 80244000               vu 80 00  1  52      
    lea ecx,[ebp-16] (symtab[959])        ;#0044262A: 215115 F0                  uv 02 20  1  53      
    call #0045FD65 (:%opConcat)           ;#0044262D: 350 33D70100               v  00 00  1  53      
;   297     end if
;   298     pline[p..plen] = txt
    mov ecx,[#00402480] (pline)           ;#00442632: 213015 80244000            uv 02 00  1  54      
    cmp ecx,h4                            ;#00442638: 201371 00000040            uv 00 02  1  55 02   
    jne #0044264A                         ;#0044263E: 165 0A                     v  00 00  1  55      
    mov esi,948                           ;#00442640: 276 B4030000               uv 40 00  1  56      
    call #00462744 (:%pUnassigned)        ;#00442645: 350 FA000200               v  00 00  1  56      
    mov ecx,1                             ;#0044264A: 271 01000000               uv 02 00  1  57      
    push #0044266A                        ;#0044264F: 150 6A264400               vu 00 00  1  57      
    push dword[ebp] (txt)                 ;#00442654: 377165 00                  np 00 20  2  58      
    push dword[#00402484] (plen)          ;#00442657: 377065 84244000            np 00 00  2  60      
    push dword[ebp-4] (p)                 ;#0044265D: 377165 FC                  np 00 20  2  62      
    mov eax,#00402480                     ;#00442660: 270 80244000               uv 01 00  1  64      
    jmp #0046019E (:%pReps)               ;#00442665: 351 34DB0100               v  00 00  1  64      
;   299     if pline[plen]='\n' then
    mov edi,[#00402484] (plen)            ;#0044266A: 213075 84244000            uv 80 00  1  65      
    lea ecx,[ebp-20] (symtab[960])        ;#00442670: 215115 EC                  vu 02 20  1  65      
    mov esi,[#00402480] (pline)           ;#00442673: 213065 80244000            uv 40 00  1  66      
    mov edx,948                           ;#00442679: 272 B4030000               vu 04 00  1  66      
    mov al,0                              ;#0044267E: 260 00                     uv 01 00  1  67      
    call #00460FE5 (:%pSubse1)            ;#00442680: 350 60E90100               v  00 00  1  67      
    mov eax,[ebp-20] (symtab[960])        ;#00442685: 213105 EC                  uv 01 20  1  68      
    cmp eax,10                            ;#00442688: 203370 0A                  uv 00 01  1  69 01   
    jne #00442718                         ;#0044268B: 017205 87000000            v  00 00  1  69      
;   300         spurge()
    mov ecx,1                             ;#00442691: 271 01000000               uv 02 00  1  70      
    mov edx,952                           ;#00442696: 272 B8030000               vu 04 00  1  70      
    call #00462C02 (:%opFrame) (spurge)   ;#0044269B: 350 62050200               v  00 00  1  71      
    mov [ebp+28] (retaddr),#004426AC      ;#004426A0: 307105 1C AC264400         uv 00 20  1  72      
    jmp #00442440 (code:spurge)           ;#004426A7: 351 94FDFFFF               v  00 00  1  72      
;   301         if ppp_File=1 and ppp_Pause then
    mov ecx,[#00402478] (ppp_File)        ;#004426AC: 213015 78244000            uv 02 00  1  73      
    cmp ecx,1                             ;#004426B2: 203371 01                  uv 00 02  1  74 02   
    jne #00442718                         ;#004426B5: 165 61                     v  00 00  1  74      
    mov edi,[#0040244C] (ppp_Pause)       ;#004426B7: 213075 4C244000            uv 80 00  1  75      
    test edi,edi                          ;#004426BD: 205377                     uv 00 80  1  76 80   
    je #00442718                          ;#004426BF: 164 57                     v  00 00  1  76      
;   302             sline += 1+(plen>ppp_Maxlen)
    mov esi,[#00402484] (plen)            ;#004426C1: 213065 84244000            uv 40 00  1  77      
    mov eax,[#0040243C] (ppp_Maxlen)      ;#004426C7: 241 3C244000               vu 01 00  1  77      
    xor ecx,ecx                           ;#004426CC: 061311                     uv 02 02  1  78      
    cmp esi,eax                           ;#004426CE: 071306                     vu 00 41  1  78      
    setg cl                               ;#004426D0: 017237301                  np 02 00  2  79      
    mov [ebp-8] (symtab[957]),ecx         ;#004426D3: 211115 F8                  uv 00 22  1  81      
    lea edi,[ebp-12] (symtab[958])        ;#004426D6: 215175 F4                  vu 80 20  1  81      
    mov ecx,[#0040201C]                   ;#004426D9: 213015 1C204000            uv 02 00  1  82      
    mov eax,[ebp-8] (symtab[957])         ;#004426DF: 213105 F8                  vu 01 20  1  82      
    call #0045F261 (:%opAdd)              ;#004426E2: 350 7ACB0100               v  00 00  1  83      
    mov edi,#00402488                     ;#004426E7: 277 88244000               uv 80 00  1  84      
    mov ecx,[#00402488] (sline)           ;#004426EC: 213015 88244000            vu 02 00  1  84      
    mov eax,[ebp-12] (symtab[958])        ;#004426F2: 213105 F4                  uv 01 20  1  85      
    call #0045F27A (:%opAddi)             ;#004426F5: 350 80CB0100               v  00 00  1  85      
;   303             if sline>=ppp_Pause then
    mov edi,[#00402488] (sline)           ;#004426FA: 213075 88244000            uv 80 00  1  86      
    mov esi,[#0040244C] (ppp_Pause)       ;#00442700: 213065 4C244000            vu 40 00  1  86      
    cmp edi,esi                           ;#00442706: 071367                     uv 00 C0  1  87      
    jl #00442718                          ;#00442708: 174 0E                     v  00 00  1  87      
;   304 --/**/          if wait_key() then end if                   --/*    -- Phix
    lea edi,[ebp-8] (symtab[957])         ;#0044270A: 215175 F8                  uv 80 20  1  88      
    call #0045E4A7 (:%opWaitKey)          ;#0044270D: 350 95BD0100               v  00 00  1  88      
;   305                 if machine_func(M_WAIT_KEY,0) then end if   --      -- RDS --*/
;   306                 sline = 0
    mov [#00402488] (sline),ebx           ;#00442712: 211035 88244000            uv 00 08  1  89      
;   307             end if
;   308         end if
;   309     end if
    jmp #00462C8F (:%opRetf)              ;#00442718: 351 72050200               v  00 00  1  89      
;   310 end procedure
;   311 
;   312 sequence escBytes,escChars
;   313 --constant escBytes = "\t\n\r\\\"\'",
;   314 --       escChars = "tnr\\\"\'"
;   315 
;   316 sequence constants
;   317 --constant constants = {-1.295837195871e307,"NOVALUE"}
;   318 
;   319 --constant maxgraphic = iff(platform()=LINUX?#7E:255)
;   320 
;   321 function graphic(object cl)
;   322     if integer(cl)
    mov edi,[ebp] (cl)                    ;#00444203: 213175 00                  uv 80 20  1   1      
    cmp edi,h4                            ;#00444206: 201377 00000040            uv 00 80  1   2 80   
    jg #0044423C                          ;#0044420C: 177 2E                     v  00 00  1   2      
;   323     and cl>=1
    cmp edi,1                             ;#0044420E: 203377 01                  uv 00 80  1   3      
    jl #0044423C                          ;#00444211: 174 29                     v  00 00  1   3      
;   324 --  and cl>=' '
;   325     and cl<=255
    cmp edi,255                           ;#00444213: 201377 FF000000            uv 00 80  1   4      
    jg #0044423C                          ;#00444219: 177 21                     v  00 00  1   4      
;   326 --DEV fixme:
;   327 --  and cl<=iff(platform()=LINUX?#7E:255)
;   328 --  and cl<=maxgraphic
;   329 --30/1/18:
;   330 --  and ((platform()=LINUX and cl<=#7E) or
;   331 --       (platform()=WINDOWS and cl<=255))
;   332 --  and cl<=#7E
;   333 --  and cl<='}'
;   334     and ascii[cl] then
    mov esi,[#00402474] (ascii)           ;#0044421B: 213065 74244000            uv 40 00  1   5      
    mov ecx,966                           ;#00444221: 271 C6030000               vu 02 00  1   5      
    mov edx,945                           ;#00444226: 272 B1030000               uv 04 00  1   6      
    call #0045BDB3 (:%opJnotx)            ;#0044422B: 350 837B0100               v  00 00  1   6      
    je #0044423C                          ;#00444230: 164 0A                     v  00 00  1   7      
;   335         return 1
    mov eax,1                             ;#00444232: 270 01000000               uv 01 00  1   8      
    jmp #00462C8F (:%opRetf)              ;#00444237: 351 53EA0100               v  00 00  1   8      
;   336     end if
;   337     return 0
    xor eax,eax                           ;#0044423C: 061300                     uv 01 01  1   9      
    jmp #00462C8F (:%opRetf)              ;#0044423E: 351 4CEA0100               v  00 00  1   9      
;   338 end function
;   339 
;   340 without warning -- suppress short-circuit warning
;   341 
;   342 integer cl1q = 0        -- cl[1] was '"'
;   343 integer cllq = 0        -- cl[-1] was '"'
;   344 
;   345 function prnf(object cl, integer col, integer indent, integer prnt, integer nestlvl)
    mov ecx,[ebp-4] (col)                 ;#0044271D: 213115 FC                  uv 02 20  1   1      
    cmp ecx,h4                            ;#00442720: 201371 00000040            uv 00 02  1   2 02   
    jl #00442732                          ;#00442726: 174 0A                     v  00 00  1   2      
    mov ecx,972                           ;#00442728: 271 CC030000               uv 02 00  1   3      
    call #00462D8D (:%opTcFail)           ;#0044272D: 350 5B060200               v  00 00  1   3      
    mov eax,[ebp-8] (indent)              ;#00442732: 213105 F8                  uv 01 20  1   4      
    cmp eax,h4                            ;#00442735: 075 00000040               uv 00 01  1   5 01   
    jl #00442746                          ;#0044273A: 174 0A                     v  00 00  1   5      
    mov ecx,973                           ;#0044273C: 271 CD030000               uv 02 00  1   6      
    call #00462D8D (:%opTcFail)           ;#00442741: 350 47060200               v  00 00  1   6      
    mov edi,[ebp-16] (nestlvl)            ;#00442746: 213175 F0                  uv 80 20  1   7      
    cmp edi,h4                            ;#00442749: 201377 00000040            uv 00 80  1   8 80   
    jl #0044275B                          ;#0044274F: 174 0A                     v  00 00  1   8      
    mov ecx,975                           ;#00442751: 271 CF030000               uv 02 00  1   9      
    call #00462D8D (:%opTcFail)           ;#00442756: 350 32060200               v  00 00  1   9      
;   346     integer len, iplus1, k, ch
;   347     integer aschar, asbacktick
;   348     sequence sep,txt
;   349     object chint
;   350     if sequence(cl) then
    mov esi,[ebp] (cl)                    ;#0044275B: 213165 00                  uv 40 20  1  10      
    cmp esi,h4                            ;#0044275E: 201376 00000040            uv 00 40  1  11 40   
    jl #00443A44                          ;#00442764: 017214 DA120000            v  00 00  1  11      
    test byte[ebx+esi*4-1],#80            ;#0044276A: 366104263 FF 80            u  00 48  2  12      
    je #00443A44                          ;#0044276F: 017204 CF120000            v  00 00  1  13      
;   351 --23/11/19: (I just never want to see {"this",{9,10}} as {"this","\t\n"} ever again, thank you very much!)
;   352 --      if ppp_StrFmt<=0 then
;   353         if string(cl) and ppp_StrFmt<=0 then
    cmp esi,h4                            ;#00442775: 201376 00000040            uv 00 40  1  14      
    jl #00442F0B                          ;#0044277B: 017214 8A070000            v  00 00  1  14      
    cmp byte[ebx+esi*4-1],#82             ;#00442781: 200174263 FF 82            u  00 48  2  15      
    jne #00442F0B                         ;#00442786: 017205 7F070000            v  00 00  1  16      
    mov ecx,[#00402450] (ppp_StrFmt)      ;#0044278C: 213015 50244000            uv 02 00  1  17      
    cmp ecx,0                             ;#00442792: 203371 00                  uv 00 02  1  18 02   
    jg #00442F0B                          ;#00442795: 017217 70070000            v  00 00  1  18      
;   354 
;   355 --put back 26/4/2020:
;   356 --/**/      aschar = string(cl)             --/* -- Phix
    xor eax,eax                           ;#0044279B: 061300                     uv 01 01  1  19      
    cmp esi,h4                            ;#0044279D: 201376 00000040            vu 00 40  1  19      
    jl #004427AF                          ;#004427A3: 174 0A                     v  00 00  1  20      
    cmp byte[ebx+esi*4-1],#82             ;#004427A5: 200174263 FF 82            u  00 48  2  21      
    jne #004427AF                         ;#004427AA: 165 03                     v  00 00  1  22      
    add eax,1                             ;#004427AC: 203300 01                  uv 01 01  1  23      
    mov [ebp-36] (aschar),eax             ;#004427AF: 211105 DC                  uv 00 21  1  24 01   
;   357             aschar = (length(cl)>0)         --*/ -- RDS Eu:
;   358             asbacktick = true
    mov [ebp-40] (asbacktick), dword 1    ;#004427B2: 307105 D8 01000000         vu 00 20  1  24      
;   359 
;   360             for i=1 to length(cl) do
    mov edi,[ebx+esi*4-12]                ;#004427B9: 213174263 F4               uv 80 48  1  25      
    mov [ebp-56] (symtab[985]),edi        ;#004427BD: 211175 C8                  uv 00 A0  1  26 80   
    mov [ebp-60] (i), dword 1             ;#004427C0: 307105 C4 01000000         vu 00 20  1  26      
    cmp edi,1                             ;#004427C7: 201377 01000000            uv 00 80  1  27      
    jl #00442953                          ;#004427CD: 017214 80010000            v  00 00  1  27      
;   361                 chint = cl[i]
    mov edi,[ebp-60] (i)                  ;#004427D3: 213175 C4                  uv 80 20  1  28      
    lea ecx,[ebp-52] (chint)              ;#004427D6: 215115 CC                  vu 02 20  1  28      
    mov esi,[ebp] (cl)                    ;#004427D9: 213165 00                  uv 40 20  1  29      
    mov edx,971                           ;#004427DC: 272 CB030000               vu 04 00  1  29      
    mov al,0                              ;#004427E1: 260 00                     uv 01 00  1  30      
    call #00460FE5 (:%pSubse1)            ;#004427E3: 350 FDE70100               v  00 00  1  30      
;   362 -- 15/3/2010:
;   363 ----                if ppp_StrFmt=0 then
;   364 --              if chint<' ' then   -- "\r\n\t" or escape chars "&'
;   365 ----                    if chint<' ' or find(chint,escBytes) then   -- "\r\n\t" or escape chars "&'
;   366 --                  if not find(chint,escBytes) then    -- "\r\n\t" or escape chars "&'
;   367 --                      aschar = 0
;   368 --                      exit
;   369 --                  end if
;   370 --                  aschar += 1
;   371 --              end if
;   372 --              if find(chint,escBytes) then    -- "\t\n\r\\\"\'"
;   373                 k = find(chint,escBytes)        -- "\t\n\r\\\"\'"
    mov ecx,8                             ;#004427E8: 271 08000000               uv 02 00  1  31      
    mov edx,110                           ;#004427ED: 272 6E000000               vu 04 00  1  31      
    call #00462C02 (:%opFrame) (find)     ;#004427F2: 350 0B040200               v  00 00  1  32      
    mov edi,[ebp+20] (prevebp)            ;#004427F7: 213175 14                  uv 80 20  1  33      
    mov eax,[edi-52]                      ;#004427FA: 213107 CC                  uv 01 80  1  36 80 *80*
    xor ebx,ebx                           ;#004427FD: 061333                     vu 08 08  1  36      
    cmp eax,h4                            ;#004427FF: 075 00000040               uv 00 01  1  37      
    jl #00442810                          ;#00442804: 174 0A                     v  00 00  1  37      
    add dword[ebx+eax*4-8],1              ;#00442806: 203104203 F8 01            u  00 09  3  38      
    cmp eax,984                           ;#0044280B: 075 D8030000               vu 00 01  1  40      
    mov [ebp] (needle),eax                ;#00442810: 211105 00                  uv 00 21  1  41      
    mov ecx,[#00402490] (escBytes)        ;#00442813: 213015 90244000            vu 02 00  1  41      
    mov [ebp-4] (haystack),ecx            ;#00442819: 211115 FC                  uv 00 22  1  42      
    cmp ecx,h4                            ;#0044281C: 201371 00000040            vu 00 02  1  42      
    jl #0044282E                          ;#00442822: 174 0A                     v  00 00  1  43      
    add dword[ebx+ecx*4-8],1              ;#00442824: 203104213 F8 01            u  00 0A  3  44      
    cmp eax,961                           ;#00442829: 075 C1030000               vu 00 01  1  46      
    mov [ebp+28] (retaddr),#0044283A      ;#0044282E: 307105 1C 3A284400         uv 00 20  1  47      
    jmp #0045AADB (code:find)             ;#00442835: 351 A1820100               v  00 00  1  47      
    mov [ebp-28] (k),eax                  ;#0044283A: 211105 E4                  uv 00 21  1  48      
;   374                 if k then
    test eax,eax                          ;#0044283D: 205300                     vu 00 01  1  48      
    je #004428D6                          ;#0044283F: 017204 91000000            v  00 00  1  49      
;   375                     aschar += 1
    mov edi,[ebp-36] (aschar)             ;#00442845: 213175 DC                  uv 80 20  1  50      
    add edi,1                             ;#00442848: 203307 01                  uv 80 80  1  51 80   
    mov edx,edi                           ;#0044284B: 213327                     uv 04 80  1  52 80   
    mov [ebp-36] (aschar),edi             ;#0044284D: 211175 DC                  vu 00 A0  1  52      
    shl edx,1                             ;#00442850: 321342                     u  04 04  1  53      
    jno #0044285C                         ;#00442852: 161 08                     v  00 00  1  53      
    lea edi,[ebp-36] (aschar)             ;#00442854: 215175 DC                  uv 80 20  1  54      
    call #00462764 (:%e01tcfAddiii)       ;#00442857: 350 08FF0100               v  00 00  1  54      
;   376                     if k<3 then asbacktick = false end if
    cmp eax,3                             ;#0044285C: 203370 03                  uv 00 01  1  55      
    jge #00442864                         ;#0044285F: 175 03                     v  00 00  1  55      
    mov [ebp-40] (asbacktick),ebx         ;#00442861: 211135 D8                  uv 00 28  1  56      
;   377                     if ppp_Q22
    mov esi,[#00402470] (ppp_Q22)         ;#00442864: 213065 70244000            vu 40 00  1  56      
    test esi,esi                          ;#0044286A: 205366                     uv 00 40  1  57      
    je #0044293F                          ;#0044286C: 017204 CD000000            v  00 00  1  57      
;   378                     and chint=#22 then  -- ie '"'
    mov ecx,[ebp-52] (chint)              ;#00442872: 213115 CC                  uv 02 20  1  58      
    cmp ecx,34                            ;#00442875: 203371 22                  uv 00 02  1  59 02   
    jne #0044293F                         ;#00442878: 017205 C1000000            v  00 00  1  59      
;   379                         -- \"blah ==> #22&"blah
;   380                         -- blah\"blah ==> blah"&#22&"blah
;   381                         -- blah\" ==> blah"&#22
;   382                         if i=1 or i=length(cl) then
    mov edi,[ebp-60] (i)                  ;#0044287E: 213175 C4                  uv 80 20  1  60      
    cmp edi,1                             ;#00442881: 203377 01                  uv 00 80  1  61 80   
    je #0044289D                          ;#00442884: 164 17                     v  00 00  1  61      
    lea edi,[ebp-64] (symtab[987])        ;#00442886: 215175 C0                  uv 80 20  1  62      
    mov esi,[ebp] (cl)                    ;#00442889: 213165 00                  vu 40 20  1  62      
    mov edx,971                           ;#0044288C: 272 CB030000               uv 04 00  1  63      
    call #0045EFEC (:%opLen)              ;#00442891: 350 56C70100               v  00 00  1  63      
    mov eax,[ebp-60] (i)                  ;#00442896: 213105 C4                  uv 01 20  1  64      
    cmp eax,ecx                           ;#00442899: 071310                     uv 00 03  1  65 01   
    jne #004428BD                         ;#0044289B: 165 20                     v  00 00  1  65      
;   383                             aschar += 4
    mov edi,[ebp-36] (aschar)             ;#0044289D: 213175 DC                  uv 80 20  1  66      
    add edi,4                             ;#004428A0: 203307 04                  uv 80 80  1  67 80   
    mov edx,edi                           ;#004428A3: 213327                     uv 04 80  1  68 80   
    mov [ebp-36] (aschar),edi             ;#004428A5: 211175 DC                  vu 00 A0  1  68      
    shl edx,1                             ;#004428A8: 321342                     u  04 04  1  69      
    jno #0044293F                         ;#004428AA: 017201 8F000000            v  00 00  1  69      
    lea edi,[ebp-36] (aschar)             ;#004428B0: 215175 DC                  uv 80 20  1  70      
    call #00462764 (:%e01tcfAddiii)       ;#004428B3: 350 ACFE0100               v  00 00  1  70      
    jmp #0044293F                         ;#004428B8: 351 82000000               v  00 00  1  71      
;   384                         else
;   385                             aschar += 5
    mov esi,[ebp-36] (aschar)             ;#004428BD: 213165 DC                  uv 40 20  1  72      
    add esi,5                             ;#004428C0: 203306 05                  uv 40 40  1  73 40   
    mov edx,esi                           ;#004428C3: 213326                     uv 04 40  1  74 40   
    mov [ebp-36] (aschar),esi             ;#004428C5: 211165 DC                  vu 00 60  1  74      
    shl edx,1                             ;#004428C8: 321342                     u  04 04  1  75      
    jno #0044293F                         ;#004428CA: 161 73                     v  00 00  1  75      
    lea edi,[ebp-36] (aschar)             ;#004428CC: 215175 DC                  uv 80 20  1  76      
    call #00462764 (:%e01tcfAddiii)       ;#004428CF: 350 90FE0100               v  00 00  1  76      
;   386                         end if
;   387                     end if
    jmp #0044293F                         ;#004428D4: 353 69                     v  00 00  1  77      
;   388                 elsif chint<' ' then
    mov edi,32                            ;#004428D6: 277 20000000               uv 80 00  1  78      
    mov eax,[ebp-52] (chint)              ;#004428DB: 213105 CC                  vu 01 20  1  78      
    mov esi,72                            ;#004428DE: 276 48000000               uv 40 00  1  79      
    mov edx,984                           ;#004428E3: 272 D8030000               vu 04 00  1  79      
    call #0045F8B0 (:%opJcc)              ;#004428E8: 350 C3CF0100               v  00 00  1  80      
    jge #004428F4                         ;#004428ED: 175 05                     v  00 00  1  81      
;   389                     aschar = 0
    mov [ebp-36] (aschar),ebx             ;#004428EF: 211135 DC                  uv 00 28  1  82      
;   390                     exit
    jmp #00442953                         ;#004428F2: 353 5F                     v  00 00  1  82      
;   391                 elsif not graphic(chint) then
    mov ecx,1                             ;#004428F4: 271 01000000               uv 02 00  1  83      
    mov edx,965                           ;#004428F9: 272 C5030000               vu 04 00  1  83      
    call #00462C02 (:%opFrame) (graphic)  ;#004428FE: 350 FF020200               v  00 00  1  84      
    mov edi,[ebp+20] (prevebp)            ;#00442903: 213175 14                  uv 80 20  1  85      
    mov eax,[edi-52]                      ;#00442906: 213107 CC                  uv 01 80  1  88 80 *80*
    xor ebx,ebx                           ;#00442909: 061333                     vu 08 08  1  88      
    cmp eax,h4                            ;#0044290B: 075 00000040               uv 00 01  1  89      
    jl #0044291C                          ;#00442910: 174 0A                     v  00 00  1  89      
    add dword[ebx+eax*4-8],1              ;#00442912: 203104203 F8 01            u  00 09  3  90      
    cmp eax,984                           ;#00442917: 075 D8030000               vu 00 01  1  92      
    mov [ebp] (cl),eax                    ;#0044291C: 211105 00                  uv 00 21  1  93      
    mov [ebp+28] (retaddr),#0044292B      ;#0044291F: 307105 1C 2B294400         vu 00 20  1  93      
    jmp #00444203 (code:graphic)          ;#00442926: 351 D8180000               v  00 00  1  94      
    test eax,eax                          ;#0044292B: 205300                     uv 00 01  1  95      
    jne #00442934                         ;#0044292D: 165 05                     v  00 00  1  95      
;   392                     aschar = 0
    mov [ebp-36] (aschar),ebx             ;#0044292F: 211135 DC                  uv 00 28  1  96      
;   393                     exit
    jmp #00442953                         ;#00442932: 353 1F                     v  00 00  1  96      
;   394                 elsif chint='`' then
    mov ecx,[ebp-52] (chint)              ;#00442934: 213115 CC                  uv 02 20  1  97      
    cmp ecx,96                            ;#00442937: 203371 60                  uv 00 02  1  98 02   
    jne #0044293F                         ;#0044293A: 165 03                     v  00 00  1  98      
;   395                     asbacktick = false
    mov [ebp-40] (asbacktick),ebx         ;#0044293C: 211135 D8                  uv 00 28  1  99      
;   396                 end if
;   397             end for
    mov edi,[ebp-60] (i)                  ;#0044293F: 213175 C4                  vu 80 20  1  99      
    mov esi,[ebp-56] (symtab[985])        ;#00442942: 213165 C8                  uv 40 20  1 100      
    add edi,1                             ;#00442945: 203307 01                  vu 80 80  1 100      
    cmp edi,esi                           ;#00442948: 073376                     uv 00 C0  1 101      
    mov [ebp-60] (i),edi                  ;#0044294A: 211175 C4                  vu 00 A0  1 101      
    jle #004427D3                         ;#0044294D: 017216 80FEFFFF            v  00 00  1 102      
;   398             if aschar then
    mov eax,[ebp-36] (aschar)             ;#00442953: 213105 DC                  uv 01 20  1 103      
    test eax,eax                          ;#00442956: 205300                     uv 00 01  1 104 01   
    je #00442F0B                          ;#00442958: 017204 AD050000            v  00 00  1 104      
;   399 --              len = length(cl)+(aschar-1) -- allow for escape chars
;   400                 len = length(cl)
    lea edi,[ebp-20] (len)                ;#0044295E: 215175 EC                  uv 80 20  1 105      
    mov esi,[ebp] (cl)                    ;#00442961: 213165 00                  vu 40 20  1 105      
    mov edx,971                           ;#00442964: 272 CB030000               uv 04 00  1 106      
    call #0045EFEC (:%opLen)              ;#00442969: 350 7EC60100               v  00 00  1 106      
;   401                 if not asbacktick then
    mov edi,[ebp-40] (asbacktick)         ;#0044296E: 213175 D8                  uv 80 20  1 107      
    test edi,edi                          ;#00442971: 205377                     uv 00 80  1 108 80   
    jne #00442992                         ;#00442973: 165 1D                     v  00 00  1 108      
;   402                     len += (aschar-1) -- allow for escape chars
    lea edi,[ebp-68] (symtab[988])        ;#00442975: 215175 BC                  uv 80 20  1 109      
    mov ecx,eax                           ;#00442978: 211301                     vu 02 01  1 109      
    mov eax,[#0040201C]                   ;#0044297A: 241 1C204000               uv 01 00  1 110      
    call #0045F299 (:%opSub)              ;#0044297F: 350 15C90100               v  00 00  1 110      
    lea edi,[ebp-20] (len)                ;#00442984: 215175 EC                  uv 80 20  1 111      
    mov ecx,[ebp-20] (len)                ;#00442987: 213115 EC                  vu 02 20  1 111      
    mov eax,[ebp-68] (symtab[988])        ;#0044298A: 213105 BC                  uv 01 20  1 112      
    call #0045F27A (:%opAddi)             ;#0044298D: 350 E8C80100               v  00 00  1 112      
;   403                 end if
;   404                 if prnt then
    mov esi,[ebp-12] (prnt)               ;#00442992: 213165 F4                  uv 40 20  1 113      
    test esi,esi                          ;#00442995: 205366                     uv 00 40  1 114 40   
    je #00442EE1                          ;#00442997: 017204 44050000            v  00 00  1 114      
;   405                     if aschar>1     --replace escape chars
    mov edi,[ebp-36] (aschar)             ;#0044299D: 213175 DC                  uv 80 20  1 115      
    cmp edi,1                             ;#004429A0: 203377 01                  uv 00 80  1 116 80   
    jle #00442CB7                         ;#004429A3: 017216 0E030000            v  00 00  1 116      
;   406                     and not asbacktick then
    mov ecx,[ebp-40] (asbacktick)         ;#004429A9: 213115 D8                  uv 02 20  1 117      
    test ecx,ecx                          ;#004429AC: 205311                     uv 00 02  1 118 02   
    jne #00442CB7                         ;#004429AE: 017205 03030000            v  00 00  1 118      
;   407                         for i=length(cl) to 1 by -1 do
    lea edi,[ebp-64] (symtab[987])        ;#004429B4: 215175 C0                  uv 80 20  1 119      
    mov esi,[ebp] (cl)                    ;#004429B7: 213165 00                  vu 40 20  1 119      
    mov edx,971                           ;#004429BA: 272 CB030000               uv 04 00  1 120      
    call #0045EFEC (:%opLen)              ;#004429BF: 350 28C60100               v  00 00  1 120      
    mov [ebp-60] (i),ecx                  ;#004429C4: 211115 C4                  uv 00 22  1 121      
    cmp ecx,1                             ;#004429C7: 201371 01000000            vu 00 02  1 121      
    jl #00442CB7                          ;#004429CD: 017214 E4020000            v  00 00  1 122      
;   408                             ch = cl[i]
    mov edi,[ebp-60] (i)                  ;#004429D3: 213175 C4                  uv 80 20  1 123      
    lea ecx,[ebp-32] (ch)                 ;#004429D6: 215115 E0                  vu 02 20  1 123      
    mov esi,[ebp] (cl)                    ;#004429D9: 213165 00                  uv 40 20  1 124      
    mov edx,971                           ;#004429DC: 272 CB030000               vu 04 00  1 124      
    mov al,0                              ;#004429E1: 260 00                     uv 01 00  1 125      
    call #00460FE5 (:%pSubse1)            ;#004429E3: 350 FDE50100               v  00 00  1 125      
    cmp eax,h4                            ;#004429E8: 075 00000040               uv 00 01  1 126      
    jl #004429F9                          ;#004429ED: 174 0A                     v  00 00  1 126      
    mov ecx,979                           ;#004429EF: 271 D3030000               uv 02 00  1 127      
    call #00462D8D (:%opTcFail)           ;#004429F4: 350 94030200               v  00 00  1 127      
;   409                             if find(ch,escBytes) then -- escape chars
    mov ecx,8                             ;#004429F9: 271 08000000               uv 02 00  1 128      
    mov edx,110                           ;#004429FE: 272 6E000000               vu 04 00  1 128      
    call #00462C02 (:%opFrame) (find)     ;#00442A03: 350 FA010200               v  00 00  1 129      
    mov edi,[ebp+20] (prevebp)            ;#00442A08: 213175 14                  uv 80 20  1 130      
    mov eax,[edi-32]                      ;#00442A0B: 213107 E0                  uv 01 80  1 133 80 *80*
    mov [ebp] (needle),eax                ;#00442A0E: 211105 00                  uv 00 21  1 134 01   
    mov ecx,[#00402490] (escBytes)        ;#00442A11: 213015 90244000            vu 02 00  1 134      
    mov [ebp-4] (haystack),ecx            ;#00442A17: 211115 FC                  uv 00 22  1 135      
    cmp ecx,h4                            ;#00442A1A: 201371 00000040            vu 00 02  1 135      
    jl #00442A2C                          ;#00442A20: 174 0A                     v  00 00  1 136      
    add dword[ebx+ecx*4-8],1              ;#00442A22: 203104213 F8 01            u  00 0A  3 137      
    cmp eax,961                           ;#00442A27: 075 C1030000               vu 00 01  1 139      
    mov [ebp+28] (retaddr),#00442A38      ;#00442A2C: 307105 1C 382A4400         uv 00 20  1 140      
    jmp #0045AADB (code:find)             ;#00442A33: 351 A3800100               v  00 00  1 140      
    test eax,eax                          ;#00442A38: 205300                     uv 00 01  1 141      
    je #00442CA1                          ;#00442A3A: 017204 61020000            v  00 00  1 141      
;   410                                 if ppp_Q22
    mov edi,[#00402470] (ppp_Q22)         ;#00442A40: 213075 70244000            uv 80 00  1 142      
    test edi,edi                          ;#00442A46: 205377                     uv 00 80  1 143 80   
    je #00442BC3                          ;#00442A48: 017204 75010000            v  00 00  1 143      
;   411                                 and ch=#22 then -- ie '"'
    mov esi,[ebp-32] (ch)                 ;#00442A4E: 213165 E0                  uv 40 20  1 144      
    cmp esi,34                            ;#00442A51: 203376 22                  uv 00 40  1 145 40   
    jne #00442BC3                         ;#00442A54: 017205 69010000            v  00 00  1 145      
;   412                                     -- \"blah ==> #22&"blah
;   413                                     -- blah\"blah ==> blah"&#22&"blah
;   414                                     -- blah\" ==> blah"&#22
;   415                                     if i=1 then
    mov ecx,[ebp-60] (i)                  ;#00442A5A: 213115 C4                  uv 02 20  1 146      
    cmp ecx,1                             ;#00442A5D: 203371 01                  uv 00 02  1 147 02   
    jne #00442AAD                         ;#00442A60: 165 4B                     v  00 00  1 147      
;   416 --                                      cl = "#22&\""&cl[2..length(cl)]
;   417                                         cl = `#22&"`&cl[2..length(cl)]
    lea edx,[ebp-72] (symtab[990])        ;#00442A62: 215125 B8                  uv 04 20  1 148      
    mov ecx,1                             ;#00442A65: 271 01000000               vu 02 00  1 148      
    push #00442A81                        ;#00442A6A: 150 812A4400               uv 00 00  1 149      
    push edx                              ;#00442A6F: 122                        vu 00 04  1 149      
    push -1                               ;#00442A70: 152 FF                     uv 00 00  1 150      
    push 2                                ;#00442A72: 152 02                     vu 00 00  1 150      
    mov esi,[ebp] (cl)                    ;#00442A74: 213165 00                  uv 40 20  1 151      
    mov edx,971                           ;#00442A77: 272 CB030000               vu 04 00  1 151      
    jmp #00460A75 (:%pSubss)              ;#00442A7C: 351 F4DF0100               v  00 00  1 152      
    mov edx,ebp                           ;#00442A81: 213325                     uv 04 20  1 153      
    mov edi,#004024A4                     ;#00442A83: 277 A4244000               vu 80 00  1 153      
    lea ecx,[ebp-72] (symtab[990])        ;#00442A88: 215115 B8                  uv 02 20  1 154      
    call #0045FD65 (:%opConcat)           ;#00442A8B: 350 D5D20100               v  00 00  1 154      
;   418 --                                      if ppp_StrFmt!=-1
;   419 --                                      and ppp_StrFmt!=-3 then
;   420                                         if ppp_StrFmt!=-1 then
    mov eax,[#00402450] (ppp_StrFmt)      ;#00442A90: 241 50244000               uv 01 00  1 155      
    cmp eax,-1                            ;#00442A95: 203370 FF                  uv 00 01  1 156 01   
    je #00442CA1                          ;#00442A98: 017204 03020000            v  00 00  1 156      
;   421                                             cl1q = 1
    mov [#0040249C] (cl1q), dword 1       ;#00442A9E: 307005 9C244000 01000000   uv 00 00  1 157      
;   422                                         end if
    jmp #00442CA1                         ;#00442AA8: 351 F4010000               v  00 00  1 157      
;   423                                     elsif i=length(cl) then
    lea edi,[ebp-76] (symtab[991])        ;#00442AAD: 215175 B4                  uv 80 20  1 158      
    mov esi,[ebp] (cl)                    ;#00442AB0: 213165 00                  vu 40 20  1 158      
    mov edx,971                           ;#00442AB3: 272 CB030000               uv 04 00  1 159      
    call #0045EFEC (:%opLen)              ;#00442AB8: 350 2FC50100               v  00 00  1 159      
    mov edi,[ebp-60] (i)                  ;#00442ABD: 213175 C4                  uv 80 20  1 160      
    cmp edi,ecx                           ;#00442AC0: 071317                     uv 00 82  1 161 80   
    jne #00442B41                         ;#00442AC2: 165 7D                     v  00 00  1 161      
;   424 --                                      cl = cl[1..i-1]&"\"&#22"
;   425                                         cl = cl[1..i-1]&`"&#22`
    lea edi,[ebp-68] (symtab[988])        ;#00442AC4: 215175 BC                  uv 80 20  1 162      
    mov ecx,[ebp-60] (i)                  ;#00442AC7: 213115 C4                  vu 02 20  1 162      
    mov eax,[#0040201C]                   ;#00442ACA: 241 1C204000               uv 01 00  1 163      
    call #0045F299 (:%opSub)              ;#00442ACF: 350 C5C70100               v  00 00  1 163      
    lea edx,[ebp-72] (symtab[990])        ;#00442AD4: 215125 B8                  uv 04 20  1 164      
    mov ecx,1                             ;#00442AD7: 271 01000000               vu 02 00  1 164      
    push #00442AF4                        ;#00442ADC: 150 F42A4400               uv 00 00  1 165      
    push edx                              ;#00442AE1: 122                        vu 00 04  1 165      
    push dword[ebp-68] (symtab[988])      ;#00442AE2: 377165 BC                  np 00 20  2 166      
    push 1                                ;#00442AE5: 152 01                     uv 00 00  1 168      
    mov esi,[ebp] (cl)                    ;#00442AE7: 213165 00                  vu 40 20  1 168      
    mov edx,971                           ;#00442AEA: 272 CB030000               uv 04 00  1 169      
    jmp #00460A75 (:%pSubss)              ;#00442AEF: 351 81DF0100               v  00 00  1 169      
    mov edi,[ebp-72] (symtab[990])        ;#00442AF4: 213175 B8                  uv 80 20  1 170      
    mov ecx,[ebp] (cl)                    ;#00442AF7: 213115 00                  vu 02 20  1 170      
    mov [ebp-72] (symtab[990]),ebx        ;#00442AFA: 211135 B8                  uv 00 28  1 171      
    cmp ecx,h4                            ;#00442AFD: 201371 00000040            vu 00 02  1 171      
    mov [ebp] (cl),edi                    ;#00442B03: 211175 00                  uv 00 A0  1 172      
    jle #00442B16                         ;#00442B06: 176 0E                     v  00 00  1 172      
    sub dword[ebx+ecx*4-8],1              ;#00442B08: 203154213 F8 01            u  00 0A  3 173      
    jne #00442B16                         ;#00442B0D: 165 07                     v  00 00  1 175      
    mov edx,ecx                           ;#00442B0F: 213321                     uv 04 02  1 176      
    call #004639A8 (:%pDealloc)           ;#00442B11: 350 920E0200               v  00 00  1 176      
    mov edx,ebp                           ;#00442B16: 213325                     uv 04 20  1 177      
    mov edi,ebp                           ;#00442B18: 213375                     vu 80 20  1 177      
    mov ecx,#004024A8                     ;#00442B1A: 271 A8244000               uv 02 00  1 178      
    call #0045FD65 (:%opConcat)           ;#00442B1F: 350 41D20100               v  00 00  1 178      
;   426 --                                      if ppp_StrFmt!=-1
;   427 --                                      and ppp_StrFmt!=-3 then
;   428                                         if ppp_StrFmt!=-1 then
    mov eax,[#00402450] (ppp_StrFmt)      ;#00442B24: 241 50244000               uv 01 00  1 179      
    cmp eax,-1                            ;#00442B29: 203370 FF                  uv 00 01  1 180 01   
    je #00442CA1                          ;#00442B2C: 017204 6F010000            v  00 00  1 180      
;   429                                             cllq = 1
    mov [#004024A0] (cllq), dword 1       ;#00442B32: 307005 A0244000 01000000   uv 00 00  1 181      
;   430                                         end if
    jmp #00442CA1                         ;#00442B3C: 351 60010000               v  00 00  1 181      
;   431                                     else
;   432 --                                      cl = cl[1..i-1]&"\"&#22&\""&cl[i+1..length(cl)]
;   433                                         cl = cl[1..i-1]&`"&#22&"`&cl[i+1..length(cl)]
    lea edi,[ebp-68] (symtab[988])        ;#00442B41: 215175 BC                  uv 80 20  1 182      
    mov ecx,[ebp-60] (i)                  ;#00442B44: 213115 C4                  vu 02 20  1 182      
    mov eax,[#0040201C]                   ;#00442B47: 241 1C204000               uv 01 00  1 183      
    call #0045F299 (:%opSub)              ;#00442B4C: 350 48C70100               v  00 00  1 183      
    lea edx,[ebp-72] (symtab[990])        ;#00442B51: 215125 B8                  uv 04 20  1 184      
    mov ecx,1                             ;#00442B54: 271 01000000               vu 02 00  1 184      
    push #00442B71                        ;#00442B59: 150 712B4400               uv 00 00  1 185      
    push edx                              ;#00442B5E: 122                        vu 00 04  1 185      
    push dword[ebp-68] (symtab[988])      ;#00442B5F: 377165 BC                  np 00 20  2 186      
    push 1                                ;#00442B62: 152 01                     uv 00 00  1 188      
    mov esi,[ebp] (cl)                    ;#00442B64: 213165 00                  vu 40 20  1 188      
    mov edx,971                           ;#00442B67: 272 CB030000               uv 04 00  1 189      
    jmp #00460A75 (:%pSubss)              ;#00442B6C: 351 04DF0100               v  00 00  1 189      
    lea edi,[ebp-68] (symtab[988])        ;#00442B71: 215175 BC                  uv 80 20  1 190      
    mov ecx,[ebp-60] (i)                  ;#00442B74: 213115 C4                  vu 02 20  1 190      
    mov eax,[#0040201C]                   ;#00442B77: 241 1C204000               uv 01 00  1 191      
    call #0045F261 (:%opAdd)              ;#00442B7C: 350 E0C60100               v  00 00  1 191      
    lea edx,[ebp-80] (symtab[994])        ;#00442B81: 215125 B0                  uv 04 20  1 192      
    mov ecx,1                             ;#00442B84: 271 01000000               vu 02 00  1 192      
    push #00442BA1                        ;#00442B89: 150 A12B4400               uv 00 00  1 193      
    push edx                              ;#00442B8E: 122                        vu 00 04  1 193      
    push -1                               ;#00442B8F: 152 FF                     uv 00 00  1 194      
    push dword[ebp-68] (symtab[988])      ;#00442B91: 377165 BC                  np 00 20  2 195      
    mov esi,[ebp] (cl)                    ;#00442B94: 213165 00                  uv 40 20  1 197      
    mov edx,971                           ;#00442B97: 272 CB030000               vu 04 00  1 197      
    jmp #00460A75 (:%pSubss)              ;#00442B9C: 351 D4DE0100               v  00 00  1 198      
    mov ecx,3                             ;#00442BA1: 271 03000000               uv 02 00  1 199      
    push #00442BBE                        ;#00442BA6: 150 BE2B4400               vu 00 00  1 199      
    push dword[ebp-80] (symtab[994])      ;#00442BAB: 377165 B0                  np 00 20  2 200      
    push dword[#004024AC]                 ;#00442BAE: 377065 AC244000            np 00 00  2 202      
    push dword[ebp-72] (symtab[990])      ;#00442BB4: 377165 B8                  np 00 20  2 204      
    mov eax,ebp                           ;#00442BB7: 213305                     uv 01 20  1 206      
    jmp #0045FF95 (:%opConcatN)           ;#00442BB9: 351 D7D30100               v  00 00  1 206      
;   434                                     end if
;   435 --                              else
;   436 --22/6/19 (-3 is now deprecated, though was not entirely sure what this was meant to be doing anyways...)
;   437 --                              elsif ppp_StrFmt!=-3 then
    jmp #00442CA1                         ;#00442BBE: 351 DE000000               v  00 00  1 207      
;   438                                 else
;   439                                     cl[i] = '\\'
    mov edi,[ebp-60] (i)                  ;#00442BC3: 213175 C4                  uv 80 20  1 208      
    mov ecx,92                            ;#00442BC6: 271 5C000000               vu 02 00  1 208      
    mov esi,[ebp] (cl)                    ;#00442BCB: 213165 00                  uv 40 20  1 209      
    mov eax,ebp                           ;#00442BCE: 213305                     vu 01 20  1 209      
    call #004607F3 (:%pRepe1)             ;#00442BD0: 350 1EDC0100               v  00 00  1 210      
;   440                                     ch = escChars[find(ch,escBytes)]
    mov ecx,8                             ;#00442BD5: 271 08000000               uv 02 00  1 211      
    mov edx,110                           ;#00442BDA: 272 6E000000               vu 04 00  1 211      
    call #00462C02 (:%opFrame) (find)     ;#00442BDF: 350 1E000200               v  00 00  1 212      
    mov edi,[ebp+20] (prevebp)            ;#00442BE4: 213175 14                  uv 80 20  1 213      
    mov eax,[edi-32]                      ;#00442BE7: 213107 E0                  uv 01 80  1 216 80 *80*
    mov [ebp] (needle),eax                ;#00442BEA: 211105 00                  uv 00 21  1 217 01   
    mov ecx,[#00402490] (escBytes)        ;#00442BED: 213015 90244000            vu 02 00  1 217      
    mov [ebp-4] (haystack),ecx            ;#00442BF3: 211115 FC                  uv 00 22  1 218      
    add dword[ebx+ecx*4-8],1              ;#00442BF6: 203104213 F8 01            u  00 0A  3 220    *02*
    mov [ebp+28] (retaddr),#00442C07      ;#00442BFB: 307105 1C 072C4400         vu 00 20  1 222      
    jmp #0045AADB (code:find)             ;#00442C02: 351 D47E0100               v  00 00  1 223      
    mov [ebp-76] (symtab[991]),eax        ;#00442C07: 211105 B4                  uv 00 21  1 224      
    mov edi,[#00402494] (escChars)        ;#00442C0A: 213075 94244000            vu 80 00  1 224      
    cmp edi,h4                            ;#00442C10: 201377 00000040            uv 00 80  1 225      
    jne #00442C22                         ;#00442C16: 165 0A                     v  00 00  1 225      
    mov esi,962                           ;#00442C18: 276 C2030000               uv 40 00  1 226      
    call #00462744 (:%pUnassigned)        ;#00442C1D: 350 22FB0100               v  00 00  1 226      
    mov edi,eax                           ;#00442C22: 211307                     uv 80 01  1 227      
    mov esi,[#00402494] (escChars)        ;#00442C24: 213065 94244000            vu 40 00  1 227      
    mov edx,962                           ;#00442C2A: 272 C2030000               uv 04 00  1 228      
    call #004610CE (:%pSubse1is)          ;#00442C2F: 350 9AE40100               v  00 00  1 228      
    mov [ebp-32] (ch),eax                 ;#00442C34: 211105 E0                  uv 00 21  1 229      
;   441                                     cl = cl[1..i]&ch&cl[i+1..length(cl)]
    lea edx,[ebp-72] (symtab[990])        ;#00442C37: 215125 B8                  vu 04 20  1 229      
    mov ecx,1                             ;#00442C3A: 271 01000000               uv 02 00  1 230      
    push #00442C57                        ;#00442C3F: 150 572C4400               vu 00 00  1 230      
    push edx                              ;#00442C44: 122                        uv 00 04  1 231      
    push dword[ebp-60] (i)                ;#00442C45: 377165 C4                  np 00 20  2 232      
    push 1                                ;#00442C48: 152 01                     uv 00 00  1 234      
    mov esi,[ebp] (cl)                    ;#00442C4A: 213165 00                  vu 40 20  1 234      
    mov edx,971                           ;#00442C4D: 272 CB030000               uv 04 00  1 235      
    jmp #00460A75 (:%pSubss)              ;#00442C52: 351 1EDE0100               v  00 00  1 235      
    lea edi,[ebp-68] (symtab[988])        ;#00442C57: 215175 BC                  uv 80 20  1 236      
    mov ecx,[ebp-60] (i)                  ;#00442C5A: 213115 C4                  vu 02 20  1 236      
    mov eax,[#0040201C]                   ;#00442C5D: 241 1C204000               uv 01 00  1 237      
    call #0045F261 (:%opAdd)              ;#00442C62: 350 FAC50100               v  00 00  1 237      
    lea edx,[ebp-80] (symtab[994])        ;#00442C67: 215125 B0                  uv 04 20  1 238      
    mov ecx,1                             ;#00442C6A: 271 01000000               vu 02 00  1 238      
    push #00442C87                        ;#00442C6F: 150 872C4400               uv 00 00  1 239      
    push edx                              ;#00442C74: 122                        vu 00 04  1 239      
    push -1                               ;#00442C75: 152 FF                     uv 00 00  1 240      
    push dword[ebp-68] (symtab[988])      ;#00442C77: 377165 BC                  np 00 20  2 241      
    mov esi,[ebp] (cl)                    ;#00442C7A: 213165 00                  uv 40 20  1 243      
    mov edx,971                           ;#00442C7D: 272 CB030000               vu 04 00  1 243      
    jmp #00460A75 (:%pSubss)              ;#00442C82: 351 EEDD0100               v  00 00  1 244      
    mov ecx,3                             ;#00442C87: 271 03000000               uv 02 00  1 245      
    push #00442CA1                        ;#00442C8C: 150 A12C4400               vu 00 00  1 245      
    push dword[ebp-80] (symtab[994])      ;#00442C91: 377165 B0                  np 00 20  2 246      
    push dword[ebp-32] (ch)               ;#00442C94: 377165 E0                  np 00 20  2 248      
    push dword[ebp-72] (symtab[990])      ;#00442C97: 377165 B8                  np 00 20  2 250      
    mov eax,ebp                           ;#00442C9A: 213305                     uv 01 20  1 252      
    jmp #0045FF95 (:%opConcatN)           ;#00442C9C: 351 F4D20100               v  00 00  1 252      
;   442                                 end if
;   443                             end if
;   444                         end for
    mov edi,[ebp-60] (i)                  ;#00442CA1: 213175 C4                  uv 80 20  1 253      
    mov edx,1                             ;#00442CA4: 272 01000000               vu 04 00  1 253      
    add edi,-1                            ;#00442CA9: 203307 FF                  uv 80 80  1 254      
    cmp edi,edx                           ;#00442CAC: 073372                     uv 00 84  1 255 80   
    mov [ebp-60] (i),edi                  ;#00442CAE: 211175 C4                  vu 00 A0  1 255      
    jge #004429D3                         ;#00442CB1: 017215 1CFDFFFF            v  00 00  1 256      
;   445                     end if
;   446 --22/6/19:
;   447 --                  if ppp_StrFmt=-1
;   448 --                  or ppp_StrFmt=-3 then
;   449                     if ppp_StrFmt=-1 then
    mov ecx,[#00402450] (ppp_StrFmt)      ;#00442CB7: 213015 50244000            uv 02 00  1 257      
    cmp ecx,-1                            ;#00442CBD: 203371 FF                  uv 00 02  1 258 02   
    jne #00442CFD                         ;#00442CC0: 165 3B                     v  00 00  1 258      
;   450                         sput(cl)
    mov ecx,6                             ;#00442CC2: 271 06000000               uv 02 00  1 259      
    mov edx,954                           ;#00442CC7: 272 BA030000               vu 04 00  1 259      
    call #00462C02 (:%opFrame) (sput)     ;#00442CCC: 350 31FF0100               v  00 00  1 260      
    mov edi,[ebp+20] (prevebp)            ;#00442CD1: 213175 14                  uv 80 20  1 261      
    mov eax,[edi]                         ;#00442CD4: 213007                     uv 01 80  1 264 80 *80*
    xor ebx,ebx                           ;#00442CD6: 061333                     vu 08 08  1 264      
    cmp eax,h4                            ;#00442CD8: 075 00000040               uv 00 01  1 265      
    jl #00442CE9                          ;#00442CDD: 174 0A                     v  00 00  1 265      
    add dword[ebx+eax*4-8],1              ;#00442CDF: 203104203 F8 01            u  00 09  3 266      
    cmp eax,971                           ;#00442CE4: 075 CB030000               vu 00 01  1 268      
    mov [ebp] (txt),eax                   ;#00442CE9: 211105 00                  uv 00 21  1 269      
    mov [ebp+28] (retaddr),#00442CF8      ;#00442CEC: 307105 1C F82C4400         vu 00 20  1 269      
    jmp #004424FD (code:sput)             ;#00442CF3: 351 05F8FFFF               v  00 00  1 270      
    jmp #00442EE1                         ;#00442CF8: 351 E4010000               v  00 00  1 271      
;   451                     elsif asbacktick then
    mov esi,[ebp-40] (asbacktick)         ;#00442CFD: 213165 D8                  uv 40 20  1 272      
    test esi,esi                          ;#00442D00: 205366                     uv 00 40  1 273 40   
    je #00442D66                          ;#00442D02: 164 62                     v  00 00  1 273      
;   452                         sput('`'&cl&'`')
    mov ecx,3                             ;#00442D04: 271 03000000               uv 02 00  1 274      
    push #00442D25                        ;#00442D09: 150 252D4400               vu 00 00  1 274      
    push dword[#00402280]                 ;#00442D0E: 377065 80224000            np 00 00  2 275      
    push dword[ebp] (cl)                  ;#00442D14: 377165 00                  np 00 20  2 277      
    push dword[#00402280]                 ;#00442D17: 377065 80224000            np 00 00  2 279      
    lea eax,[ebp-72] (symtab[990])        ;#00442D1D: 215105 B8                  uv 01 20  1 281      
    jmp #0045FF95 (:%opConcatN)           ;#00442D20: 351 70D20100               v  00 00  1 281      
    mov ecx,6                             ;#00442D25: 271 06000000               uv 02 00  1 282      
    mov edx,954                           ;#00442D2A: 272 BA030000               vu 04 00  1 282      
    call #00462C02 (:%opFrame) (sput)     ;#00442D2F: 350 CEFE0100               v  00 00  1 283      
    mov edi,[ebp+20] (prevebp)            ;#00442D34: 213175 14                  uv 80 20  1 284      
    mov eax,[edi-72]                      ;#00442D37: 213107 B8                  uv 01 80  1 287 80 *80*
    mov [edi-72], dword h4                ;#00442D3A: 307107 B8 00000040         vu 00 80  1 287      
    cmp eax,h4                            ;#00442D41: 075 00000040               uv 00 01  1 288      
    jne #00442D52                         ;#00442D46: 165 0A                     v  00 00  1 288      
    mov esi,990                           ;#00442D48: 276 DE030000               uv 40 00  1 289      
    call #00462744 (:%pUnassigned)        ;#00442D4D: 350 F2F90100               v  00 00  1 289      
    mov [ebp] (txt),eax                   ;#00442D52: 211105 00                  uv 00 21  1 290      
    mov [ebp+28] (retaddr),#00442D61      ;#00442D55: 307105 1C 612D4400         vu 00 20  1 290      
    jmp #004424FD (code:sput)             ;#00442D5C: 351 9CF7FFFF               v  00 00  1 291      
    jmp #00442EE1                         ;#00442D61: 351 7B010000               v  00 00  1 292      
;   453                     else
;   454                         if ppp_Q22 and cl1q then
    mov edi,[#00402470] (ppp_Q22)         ;#00442D66: 213075 70244000            uv 80 00  1 293      
    test edi,edi                          ;#00442D6C: 205377                     uv 00 80  1 294 80   
    je #00442E23                          ;#00442D6E: 017204 AF000000            v  00 00  1 294      
    mov ecx,[#0040249C] (cl1q)            ;#00442D74: 213015 9C244000            uv 02 00  1 295      
    test ecx,ecx                          ;#00442D7A: 205311                     uv 00 02  1 296 02   
    je #00442E23                          ;#00442D7C: 017204 A1000000            v  00 00  1 296      
;   455                             cl1q = 0
    mov [#0040249C] (cl1q),ebx            ;#00442D82: 211035 9C244000            uv 00 08  1 297      
;   456                             if cllq then
    mov esi,[#004024A0] (cllq)            ;#00442D88: 213065 A0244000            vu 40 00  1 297      
    test esi,esi                          ;#00442D8E: 205366                     uv 00 40  1 298      
    je #00442DD3                          ;#00442D90: 164 41                     v  00 00  1 298      
;   457                                 sput(cl)
    mov ecx,6                             ;#00442D92: 271 06000000               uv 02 00  1 299      
    mov edx,954                           ;#00442D97: 272 BA030000               vu 04 00  1 299      
    call #00462C02 (:%opFrame) (sput)     ;#00442D9C: 350 61FE0100               v  00 00  1 300      
    mov edi,[ebp+20] (prevebp)            ;#00442DA1: 213175 14                  uv 80 20  1 301      
    mov eax,[edi]                         ;#00442DA4: 213007                     uv 01 80  1 304 80 *80*
    xor ebx,ebx                           ;#00442DA6: 061333                     vu 08 08  1 304      
    cmp eax,h4                            ;#00442DA8: 075 00000040               uv 00 01  1 305      
    jl #00442DB9                          ;#00442DAD: 174 0A                     v  00 00  1 305      
    add dword[ebx+eax*4-8],1              ;#00442DAF: 203104203 F8 01            u  00 09  3 306      
    cmp eax,971                           ;#00442DB4: 075 CB030000               vu 00 01  1 308      
    mov [ebp] (txt),eax                   ;#00442DB9: 211105 00                  uv 00 21  1 309      
    mov [ebp+28] (retaddr),#00442DC8      ;#00442DBC: 307105 1C C82D4400         vu 00 20  1 309      
    jmp #004424FD (code:sput)             ;#00442DC3: 351 35F7FFFF               v  00 00  1 310      
;   458                                 cllq = 0
    mov [#004024A0] (cllq),ebx            ;#00442DC8: 211035 A0244000            uv 00 08  1 311      
    jmp #00442EE1                         ;#00442DCE: 351 0E010000               v  00 00  1 311      
;   459                             else
;   460                                 sput(cl&'"')
    lea edx,[ebp-72] (symtab[990])        ;#00442DD3: 215125 B8                  uv 04 20  1 312      
    mov edi,ebp                           ;#00442DD6: 213375                     vu 80 20  1 312      
    mov ecx,#0040226C                     ;#00442DD8: 271 6C224000               uv 02 00  1 313      
    call #0045FD65 (:%opConcat)           ;#00442DDD: 350 83CF0100               v  00 00  1 313      
    mov ecx,6                             ;#00442DE2: 271 06000000               uv 02 00  1 314      
    mov edx,954                           ;#00442DE7: 272 BA030000               vu 04 00  1 314      
    call #00462C02 (:%opFrame) (sput)     ;#00442DEC: 350 11FE0100               v  00 00  1 315      
    mov edi,[ebp+20] (prevebp)            ;#00442DF1: 213175 14                  uv 80 20  1 316      
    mov eax,[edi-72]                      ;#00442DF4: 213107 B8                  uv 01 80  1 319 80 *80*
    mov [edi-72], dword h4                ;#00442DF7: 307107 B8 00000040         vu 00 80  1 319      
    cmp eax,h4                            ;#00442DFE: 075 00000040               uv 00 01  1 320      
    jne #00442E0F                         ;#00442E03: 165 0A                     v  00 00  1 320      
    mov esi,990                           ;#00442E05: 276 DE030000               uv 40 00  1 321      
    call #00462744 (:%pUnassigned)        ;#00442E0A: 350 35F90100               v  00 00  1 321      
    mov [ebp] (txt),eax                   ;#00442E0F: 211105 00                  uv 00 21  1 322      
    mov [ebp+28] (retaddr),#00442E1E      ;#00442E12: 307105 1C 1E2E4400         vu 00 20  1 322      
    jmp #004424FD (code:sput)             ;#00442E19: 351 DFF6FFFF               v  00 00  1 323      
;   461                             end if
    jmp #00442EE1                         ;#00442E1E: 351 BE000000               v  00 00  1 324      
;   462                         elsif ppp_Q22 and cllq then
    test edi,edi                          ;#00442E23: 205377                     uv 00 80  1 325      
    je #00442E84                          ;#00442E25: 164 5D                     v  00 00  1 325      
    mov ecx,[#004024A0] (cllq)            ;#00442E27: 213015 A0244000            uv 02 00  1 326      
    test ecx,ecx                          ;#00442E2D: 205311                     uv 00 02  1 327 02   
    je #00442E84                          ;#00442E2F: 164 53                     v  00 00  1 327      
;   463                             cllq = 0
    mov [#004024A0] (cllq),ebx            ;#00442E31: 211035 A0244000            uv 00 08  1 328      
;   464                             sput('"'&cl)
    lea edx,[ebp-72] (symtab[990])        ;#00442E37: 215125 B8                  vu 04 20  1 328      
    mov edi,#0040226C                     ;#00442E3A: 277 6C224000               uv 80 00  1 329      
    mov ecx,ebp                           ;#00442E3F: 213315                     vu 02 20  1 329      
    call #0045FD65 (:%opConcat)           ;#00442E41: 350 1FCF0100               v  00 00  1 330      
    mov ecx,6                             ;#00442E46: 271 06000000               uv 02 00  1 331      
    mov edx,954                           ;#00442E4B: 272 BA030000               vu 04 00  1 331      
    call #00462C02 (:%opFrame) (sput)     ;#00442E50: 350 ADFD0100               v  00 00  1 332      
    mov edi,[ebp+20] (prevebp)            ;#00442E55: 213175 14                  uv 80 20  1 333      
    mov eax,[edi-72]                      ;#00442E58: 213107 B8                  uv 01 80  1 336 80 *80*
    mov [edi-72], dword h4                ;#00442E5B: 307107 B8 00000040         vu 00 80  1 336      
    cmp eax,h4                            ;#00442E62: 075 00000040               uv 00 01  1 337      
    jne #00442E73                         ;#00442E67: 165 0A                     v  00 00  1 337      
    mov esi,990                           ;#00442E69: 276 DE030000               uv 40 00  1 338      
    call #00462744 (:%pUnassigned)        ;#00442E6E: 350 D1F80100               v  00 00  1 338      
    mov [ebp] (txt),eax                   ;#00442E73: 211105 00                  uv 00 21  1 339      
    mov [ebp+28] (retaddr),#00442E82      ;#00442E76: 307105 1C 822E4400         vu 00 20  1 339      
    jmp #004424FD (code:sput)             ;#00442E7D: 351 7BF6FFFF               v  00 00  1 340      
    jmp #00442EE1                         ;#00442E82: 353 5D                     v  00 00  1 341      
;   465                         else
;   466                             sput('"'&cl&'"')
    mov ecx,3                             ;#00442E84: 271 03000000               uv 02 00  1 342      
    push #00442EA5                        ;#00442E89: 150 A52E4400               vu 00 00  1 342      
    push dword[#0040226C]                 ;#00442E8E: 377065 6C224000            np 00 00  2 343      
    push dword[ebp] (cl)                  ;#00442E94: 377165 00                  np 00 20  2 345      
    push dword[#0040226C]                 ;#00442E97: 377065 6C224000            np 00 00  2 347      
    lea eax,[ebp-72] (symtab[990])        ;#00442E9D: 215105 B8                  uv 01 20  1 349      
    jmp #0045FF95 (:%opConcatN)           ;#00442EA0: 351 F0D00100               v  00 00  1 349      
    mov ecx,6                             ;#00442EA5: 271 06000000               uv 02 00  1 350      
    mov edx,954                           ;#00442EAA: 272 BA030000               vu 04 00  1 350      
    call #00462C02 (:%opFrame) (sput)     ;#00442EAF: 350 4EFD0100               v  00 00  1 351      
    mov edi,[ebp+20] (prevebp)            ;#00442EB4: 213175 14                  uv 80 20  1 352      
    mov eax,[edi-72]                      ;#00442EB7: 213107 B8                  uv 01 80  1 355 80 *80*
    mov [edi-72], dword h4                ;#00442EBA: 307107 B8 00000040         vu 00 80  1 355      
    cmp eax,h4                            ;#00442EC1: 075 00000040               uv 00 01  1 356      
    jne #00442ED2                         ;#00442EC6: 165 0A                     v  00 00  1 356      
    mov esi,990                           ;#00442EC8: 276 DE030000               uv 40 00  1 357      
    call #00462744 (:%pUnassigned)        ;#00442ECD: 350 72F80100               v  00 00  1 357      
    mov [ebp] (txt),eax                   ;#00442ED2: 211105 00                  uv 00 21  1 358      
    mov [ebp+28] (retaddr),#00442EE1      ;#00442ED5: 307105 1C E12E4400         vu 00 20  1 358      
    jmp #004424FD (code:sput)             ;#00442EDC: 351 1CF6FFFF               v  00 00  1 359      
;   467                         end if
;   468                     end if
;   469                 end if
;   470 --              if ppp_StrFmt!=-1
;   471 --              and ppp_StrFmt!=-3 then
;   472                 if ppp_StrFmt!=-1 then
    mov esi,[#00402450] (ppp_StrFmt)      ;#00442EE1: 213065 50244000            uv 40 00  1 360      
    cmp esi,-1                            ;#00442EE7: 203376 FF                  uv 00 40  1 361 40   
    je #00442F03                          ;#00442EEA: 164 17                     v  00 00  1 361      
;   473                     len += 2
    mov edi,[ebp-20] (len)                ;#00442EEC: 213175 EC                  uv 80 20  1 362      
    add edi,2                             ;#00442EEF: 203307 02                  uv 80 80  1 363 80   
    mov edx,edi                           ;#00442EF2: 213327                     uv 04 80  1 364 80   
    mov [ebp-20] (len),edi                ;#00442EF4: 211175 EC                  vu 00 A0  1 364      
    shl edx,1                             ;#00442EF7: 321342                     u  04 04  1 365      
    jno #00442F03                         ;#00442EF9: 161 08                     v  00 00  1 365      
    lea edi,[ebp-20] (len)                ;#00442EFB: 215175 EC                  uv 80 20  1 366      
    call #00462764 (:%e01tcfAddiii)       ;#00442EFE: 350 61F80100               v  00 00  1 366      
;   474                 end if
;   475                 return len
    mov eax,[ebp-20] (len)                ;#00442F03: 213105 EC                  uv 01 20  1 367      
    jmp #00462C8F (:%opRetf)              ;#00442F06: 351 84FD0100               v  00 00  1 367      
;   476             end if
;   477         end if
;   478         -- date handling added for George Walters 12/10/2003
;   479         if length(ppp_Date) and length(cl)=3
    lea edi,[ebp-76] (symtab[991])        ;#00442F0B: 215175 B4                  uv 80 20  1 368      
    mov esi,[#00402468] (ppp_Date)        ;#00442F0E: 213065 68244000            vu 40 00  1 368      
    mov edx,942                           ;#00442F14: 272 AE030000               uv 04 00  1 369      
    call #0045EFEC (:%opLen)              ;#00442F19: 350 CEC00100               v  00 00  1 369      
    test ecx,ecx                          ;#00442F1E: 205311                     uv 00 02  1 370      
    je #0044329E                          ;#00442F20: 017204 78030000            v  00 00  1 370      
    lea edi,[ebp-84] (symtab[995])        ;#00442F26: 215175 AC                  uv 80 20  1 371      
    mov esi,[ebp] (cl)                    ;#00442F29: 213165 00                  vu 40 20  1 371      
    mov edx,971                           ;#00442F2C: 272 CB030000               uv 04 00  1 372      
    call #0045EFEC (:%opLen)              ;#00442F31: 350 B6C00100               v  00 00  1 372      
    cmp ecx,3                             ;#00442F36: 203371 03                  uv 00 02  1 373      
    jne #0044329E                         ;#00442F39: 017205 5F030000            v  00 00  1 373      
;   480         and integer(cl[1]) and integer(cl[2]) and integer(cl[3])
    mov edi,1                             ;#00442F3F: 277 01000000               uv 80 00  1 374      
    lea ecx,[ebp-88] (symtab[996])        ;#00442F44: 215115 A8                  vu 02 20  1 374      
    mov edx,971                           ;#00442F47: 272 CB030000               uv 04 00  1 375      
    mov al,0                              ;#00442F4C: 260 00                     vu 01 00  1 375      
    call #00460FE5 (:%pSubse1)            ;#00442F4E: 350 92E00100               v  00 00  1 376      
    mov edi,[ebp-88] (symtab[996])        ;#00442F53: 213175 A8                  uv 80 20  1 377      
    cmp edi,h4                            ;#00442F56: 201377 00000040            uv 00 80  1 378 80   
    jg #0044329E                          ;#00442F5C: 017217 3C030000            v  00 00  1 378      
    mov edi,2                             ;#00442F62: 277 02000000               uv 80 00  1 379      
    lea ecx,[ebp-88] (symtab[996])        ;#00442F67: 215115 A8                  vu 02 20  1 379      
    mov esi,[ebp] (cl)                    ;#00442F6A: 213165 00                  uv 40 20  1 380      
    mov edx,971                           ;#00442F6D: 272 CB030000               vu 04 00  1 380      
    mov al,0                              ;#00442F72: 260 00                     uv 01 00  1 381      
    call #00460FE5 (:%pSubse1)            ;#00442F74: 350 6CE00100               v  00 00  1 381      
    mov eax,[ebp-88] (symtab[996])        ;#00442F79: 213105 A8                  uv 01 20  1 382      
    cmp eax,h4                            ;#00442F7C: 075 00000040               uv 00 01  1 383 01   
    jg #0044329E                          ;#00442F81: 017217 17030000            v  00 00  1 383      
    mov edi,3                             ;#00442F87: 277 03000000               uv 80 00  1 384      
    lea ecx,[ebp-88] (symtab[996])        ;#00442F8C: 215115 A8                  vu 02 20  1 384      
    mov esi,[ebp] (cl)                    ;#00442F8F: 213165 00                  uv 40 20  1 385      
    mov edx,971                           ;#00442F92: 272 CB030000               vu 04 00  1 385      
    mov al,0                              ;#00442F97: 260 00                     uv 01 00  1 386      
    call #00460FE5 (:%pSubse1)            ;#00442F99: 350 47E00100               v  00 00  1 386      
    mov ecx,[ebp-88] (symtab[996])        ;#00442F9E: 213115 A8                  uv 02 20  1 387      
    cmp ecx,h4                            ;#00442FA1: 201371 00000040            uv 00 02  1 388 02   
    jg #0044329E                          ;#00442FA7: 017217 F1020000            v  00 00  1 388      
;   481         and ((cl[1]>=1 and cl[1]<=31 and cl[3]>=1900 and cl[3]<=3000) or
    mov edi,1                             ;#00442FAD: 277 01000000               uv 80 00  1 389      
    lea ecx,[ebp-88] (symtab[996])        ;#00442FB2: 215115 A8                  vu 02 20  1 389      
    mov esi,[ebp] (cl)                    ;#00442FB5: 213165 00                  uv 40 20  1 390      
    mov edx,971                           ;#00442FB8: 272 CB030000               vu 04 00  1 390      
    mov al,0                              ;#00442FBD: 260 00                     uv 01 00  1 391      
    call #00460FE5 (:%pSubse1)            ;#00442FBF: 350 21E00100               v  00 00  1 391      
    mov edi,1                             ;#00442FC4: 277 01000000               uv 80 00  1 392      
    mov eax,[ebp-88] (symtab[996])        ;#00442FC9: 213105 A8                  vu 01 20  1 392      
    mov esi,26                            ;#00442FCC: 276 1A000000               uv 40 00  1 393      
    mov edx,996                           ;#00442FD1: 272 E4030000               vu 04 00  1 393      
    call #0045F8B0 (:%opJcc)              ;#00442FD6: 350 D5C80100               v  00 00  1 394      
    jl #00443075                          ;#00442FDB: 017214 94000000            v  00 00  1 395      
    mov edi,1                             ;#00442FE1: 277 01000000               uv 80 00  1 396      
    lea ecx,[ebp-88] (symtab[996])        ;#00442FE6: 215115 A8                  vu 02 20  1 396      
    mov esi,[ebp] (cl)                    ;#00442FE9: 213165 00                  uv 40 20  1 397      
    mov edx,971                           ;#00442FEC: 272 CB030000               vu 04 00  1 397      
    mov al,0                              ;#00442FF1: 260 00                     uv 01 00  1 398      
    call #00460FE5 (:%pSubse1)            ;#00442FF3: 350 EDDF0100               v  00 00  1 398      
    mov edi,31                            ;#00442FF8: 277 1F000000               uv 80 00  1 399      
    mov eax,[ebp-88] (symtab[996])        ;#00442FFD: 213105 A8                  vu 01 20  1 399      
    mov esi,997                           ;#00443000: 276 E5030000               uv 40 00  1 400      
    mov edx,996                           ;#00443005: 272 E4030000               vu 04 00  1 400      
    call #0045F8B0 (:%opJcc)              ;#0044300A: 350 A1C80100               v  00 00  1 401      
    jg #00443075                          ;#0044300F: 177 64                     v  00 00  1 402      
    mov edi,3                             ;#00443011: 277 03000000               uv 80 00  1 403      
    lea ecx,[ebp-88] (symtab[996])        ;#00443016: 215115 A8                  vu 02 20  1 403      
    mov esi,[ebp] (cl)                    ;#00443019: 213165 00                  uv 40 20  1 404      
    mov edx,971                           ;#0044301C: 272 CB030000               vu 04 00  1 404      
    mov al,0                              ;#00443021: 260 00                     uv 01 00  1 405      
    call #00460FE5 (:%pSubse1)            ;#00443023: 350 BDDF0100               v  00 00  1 405      
    mov edi,1900                          ;#00443028: 277 6C070000               uv 80 00  1 406      
    mov eax,[ebp-88] (symtab[996])        ;#0044302D: 213105 A8                  vu 01 20  1 406      
    mov esi,998                           ;#00443030: 276 E6030000               uv 40 00  1 407      
    mov edx,996                           ;#00443035: 272 E4030000               vu 04 00  1 407      
    call #0045F8B0 (:%opJcc)              ;#0044303A: 350 71C80100               v  00 00  1 408      
    jl #00443075                          ;#0044303F: 174 34                     v  00 00  1 409      
    mov edi,3                             ;#00443041: 277 03000000               uv 80 00  1 410      
    lea ecx,[ebp-88] (symtab[996])        ;#00443046: 215115 A8                  vu 02 20  1 410      
    mov esi,[ebp] (cl)                    ;#00443049: 213165 00                  uv 40 20  1 411      
    mov edx,971                           ;#0044304C: 272 CB030000               vu 04 00  1 411      
    mov al,0                              ;#00443051: 260 00                     uv 01 00  1 412      
    call #00460FE5 (:%pSubse1)            ;#00443053: 350 8DDF0100               v  00 00  1 412      
    mov edi,3000                          ;#00443058: 277 B80B0000               uv 80 00  1 413      
    mov eax,[ebp-88] (symtab[996])        ;#0044305D: 213105 A8                  vu 01 20  1 413      
    mov esi,999                           ;#00443060: 276 E7030000               uv 40 00  1 414      
    mov edx,996                           ;#00443065: 272 E4030000               vu 04 00  1 414      
    call #0045F8B0 (:%opJcc)              ;#0044306A: 350 41C80100               v  00 00  1 415      
    jle #00443145                         ;#0044306F: 017216 D0000000            v  00 00  1 416      
;   482              (cl[3]>=1 and cl[3]<=31 and cl[1]>=1900 and cl[1]<=3000))
    mov edi,3                             ;#00443075: 277 03000000               uv 80 00  1 417      
    lea ecx,[ebp-88] (symtab[996])        ;#0044307A: 215115 A8                  vu 02 20  1 417      
    mov esi,[ebp] (cl)                    ;#0044307D: 213165 00                  uv 40 20  1 418      
    mov edx,971                           ;#00443080: 272 CB030000               vu 04 00  1 418      
    mov al,0                              ;#00443085: 260 00                     uv 01 00  1 419      
    call #00460FE5 (:%pSubse1)            ;#00443087: 350 59DF0100               v  00 00  1 419      
    mov edi,1                             ;#0044308C: 277 01000000               uv 80 00  1 420      
    mov eax,[ebp-88] (symtab[996])        ;#00443091: 213105 A8                  vu 01 20  1 420      
    mov esi,26                            ;#00443094: 276 1A000000               uv 40 00  1 421      
    mov edx,996                           ;#00443099: 272 E4030000               vu 04 00  1 421      
    call #0045F8B0 (:%opJcc)              ;#0044309E: 350 0DC80100               v  00 00  1 422      
    jl #0044329E                          ;#004430A3: 017214 F5010000            v  00 00  1 423      
    mov edi,3                             ;#004430A9: 277 03000000               uv 80 00  1 424      
    lea ecx,[ebp-88] (symtab[996])        ;#004430AE: 215115 A8                  vu 02 20  1 424      
    mov esi,[ebp] (cl)                    ;#004430B1: 213165 00                  uv 40 20  1 425      
    mov edx,971                           ;#004430B4: 272 CB030000               vu 04 00  1 425      
    mov al,0                              ;#004430B9: 260 00                     uv 01 00  1 426      
    call #00460FE5 (:%pSubse1)            ;#004430BB: 350 25DF0100               v  00 00  1 426      
    mov edi,31                            ;#004430C0: 277 1F000000               uv 80 00  1 427      
    mov eax,[ebp-88] (symtab[996])        ;#004430C5: 213105 A8                  vu 01 20  1 427      
    mov esi,997                           ;#004430C8: 276 E5030000               uv 40 00  1 428      
    mov edx,996                           ;#004430CD: 272 E4030000               vu 04 00  1 428      
    call #0045F8B0 (:%opJcc)              ;#004430D2: 350 D9C70100               v  00 00  1 429      
    jg #0044329E                          ;#004430D7: 017217 C1010000            v  00 00  1 430      
    mov edi,1                             ;#004430DD: 277 01000000               uv 80 00  1 431      
    lea ecx,[ebp-88] (symtab[996])        ;#004430E2: 215115 A8                  vu 02 20  1 431      
    mov esi,[ebp] (cl)                    ;#004430E5: 213165 00                  uv 40 20  1 432      
    mov edx,971                           ;#004430E8: 272 CB030000               vu 04 00  1 432      
    mov al,0                              ;#004430ED: 260 00                     uv 01 00  1 433      
    call #00460FE5 (:%pSubse1)            ;#004430EF: 350 F1DE0100               v  00 00  1 433      
    mov edi,1900                          ;#004430F4: 277 6C070000               uv 80 00  1 434      
    mov eax,[ebp-88] (symtab[996])        ;#004430F9: 213105 A8                  vu 01 20  1 434      
    mov esi,998                           ;#004430FC: 276 E6030000               uv 40 00  1 435      
    mov edx,996                           ;#00443101: 272 E4030000               vu 04 00  1 435      
    call #0045F8B0 (:%opJcc)              ;#00443106: 350 A5C70100               v  00 00  1 436      
    jl #0044329E                          ;#0044310B: 017214 8D010000            v  00 00  1 437      
    mov edi,1                             ;#00443111: 277 01000000               uv 80 00  1 438      
    lea ecx,[ebp-88] (symtab[996])        ;#00443116: 215115 A8                  vu 02 20  1 438      
    mov esi,[ebp] (cl)                    ;#00443119: 213165 00                  uv 40 20  1 439      
    mov edx,971                           ;#0044311C: 272 CB030000               vu 04 00  1 439      
    mov al,0                              ;#00443121: 260 00                     uv 01 00  1 440      
    call #00460FE5 (:%pSubse1)            ;#00443123: 350 BDDE0100               v  00 00  1 440      
    mov edi,3000                          ;#00443128: 277 B80B0000               uv 80 00  1 441      
    mov eax,[ebp-88] (symtab[996])        ;#0044312D: 213105 A8                  vu 01 20  1 441      
    mov esi,999                           ;#00443130: 276 E7030000               uv 40 00  1 442      
    mov edx,996                           ;#00443135: 272 E4030000               vu 04 00  1 442      
    call #0045F8B0 (:%opJcc)              ;#0044313A: 350 71C70100               v  00 00  1 443      
    jg #0044329E                          ;#0044313F: 017217 59010000            v  00 00  1 444      
;   483         and (cl[2]>=1 and cl[2]<=12) then
    mov edi,2                             ;#00443145: 277 02000000               uv 80 00  1 445      
    lea ecx,[ebp-88] (symtab[996])        ;#0044314A: 215115 A8                  vu 02 20  1 445      
    mov esi,[ebp] (cl)                    ;#0044314D: 213165 00                  uv 40 20  1 446      
    mov edx,971                           ;#00443150: 272 CB030000               vu 04 00  1 446      
    mov al,0                              ;#00443155: 260 00                     uv 01 00  1 447      
    call #00460FE5 (:%pSubse1)            ;#00443157: 350 89DE0100               v  00 00  1 447      
    mov edi,1                             ;#0044315C: 277 01000000               uv 80 00  1 448      
    mov eax,[ebp-88] (symtab[996])        ;#00443161: 213105 A8                  vu 01 20  1 448      
    mov esi,26                            ;#00443164: 276 1A000000               uv 40 00  1 449      
    mov edx,996                           ;#00443169: 272 E4030000               vu 04 00  1 449      
    call #0045F8B0 (:%opJcc)              ;#0044316E: 350 3DC70100               v  00 00  1 450      
    jl #0044329E                          ;#00443173: 017214 25010000            v  00 00  1 451      
    mov edi,2                             ;#00443179: 277 02000000               uv 80 00  1 452      
    lea ecx,[ebp-88] (symtab[996])        ;#0044317E: 215115 A8                  vu 02 20  1 452      
    mov esi,[ebp] (cl)                    ;#00443181: 213165 00                  uv 40 20  1 453      
    mov edx,971                           ;#00443184: 272 CB030000               vu 04 00  1 453      
    mov al,0                              ;#00443189: 260 00                     uv 01 00  1 454      
    call #00460FE5 (:%pSubse1)            ;#0044318B: 350 55DE0100               v  00 00  1 454      
    mov edi,12                            ;#00443190: 277 0C000000               uv 80 00  1 455      
    mov eax,[ebp-88] (symtab[996])        ;#00443195: 213105 A8                  vu 01 20  1 455      
    mov esi,0                             ;#00443198: 276 00000000               uv 40 00  1 456      
    mov edx,996                           ;#0044319D: 272 E4030000               vu 04 00  1 456      
    call #0045F8B0 (:%opJcc)              ;#004431A2: 350 09C70100               v  00 00  1 457      
    jg #0044329E                          ;#004431A7: 017217 F1000000            v  00 00  1 458      
;   484             txt = sprintf(ppp_Date,cl)
    mov ecx,2                             ;#004431AD: 271 02000000               uv 02 00  1 459      
    mov edx,210                           ;#004431B2: 272 D2000000               vu 04 00  1 459      
    call #00462C02 (:%opFrame) (sprintf)  ;#004431B7: 350 46FA0100               v  00 00  1 460      
    mov edi,[#00402468] (ppp_Date)        ;#004431BC: 213075 68244000            uv 80 00  1 461      
    mov [ebp] (fmt),edi                   ;#004431C2: 211175 00                  uv 00 A0  1 462 80   
    cmp edi,h4                            ;#004431C5: 201377 00000040            vu 00 80  1 462      
    jl #004431D7                          ;#004431CB: 174 0A                     v  00 00  1 463      
    add dword[ebx+edi*4-8],1              ;#004431CD: 203104273 F8 01            u  00 88  3 464      
    cmp eax,942                           ;#004431D2: 075 AE030000               vu 00 01  1 466      
    mov edi,[ebp+20] (prevebp)            ;#004431D7: 213175 14                  uv 80 20  1 467      
    mov eax,[edi]                         ;#004431DA: 213007                     uv 01 80  1 470 80 *80*
    xor ebx,ebx                           ;#004431DC: 061333                     vu 08 08  1 470      
    cmp eax,h4                            ;#004431DE: 075 00000040               uv 00 01  1 471      
    jl #004431EF                          ;#004431E3: 174 0A                     v  00 00  1 471      
    add dword[ebx+eax*4-8],1              ;#004431E5: 203104203 F8 01            u  00 09  3 472      
    cmp eax,971                           ;#004431EA: 075 CB030000               vu 00 01  1 474      
    mov [ebp-4] (args),eax                ;#004431EF: 211105 FC                  uv 00 21  1 475      
    mov [ebp+28] (retaddr),#004431FE      ;#004431F2: 307105 1C FE314400         vu 00 20  1 475      
    jmp #00454E9A (code:sprintf)          ;#004431F9: 351 9C1C0100               v  00 00  1 476      
    push eax                              ;#004431FE: 120                        uv 00 01  1 477      
    mov ecx,[ebp-48] (txt)                ;#004431FF: 213115 D0                  vu 02 20  1 477      
    cmp ecx,h4                            ;#00443202: 201371 00000040            uv 00 02  1 478      
    jle #00443218                         ;#00443208: 176 0E                     v  00 00  1 478      
    sub dword[ebx+ecx*4-8],1              ;#0044320A: 203154213 F8 01            u  00 0A  3 479      
    jne #00443218                         ;#0044320F: 165 07                     v  00 00  1 481      
    mov edx,ecx                           ;#00443211: 213321                     uv 04 02  1 482      
    call #004639A8 (:%pDealloc)           ;#00443213: 350 90070200               v  00 00  1 482      
    pop dword[ebp-48] (txt)               ;#00443218: 217105 D0                  np 00 20  3 483      
;   485             if prnt then sput('"'&txt&'"') end if
    mov esi,[ebp-12] (prnt)               ;#0044321B: 213165 F4                  uv 40 20  1 486      
    test esi,esi                          ;#0044321E: 205366                     uv 00 40  1 487 40   
    je #0044327F                          ;#00443220: 164 5D                     v  00 00  1 487      
    mov ecx,3                             ;#00443222: 271 03000000               uv 02 00  1 488      
    push #00443243                        ;#00443227: 150 43324400               vu 00 00  1 488      
    push dword[#0040226C]                 ;#0044322C: 377065 6C224000            np 00 00  2 489      
    push dword[ebp-48] (txt)              ;#00443232: 377165 D0                  np 00 20  2 491      
    push dword[#0040226C]                 ;#00443235: 377065 6C224000            np 00 00  2 493      
    lea eax,[ebp-92] (symtab[1000])       ;#0044323B: 215105 A4                  uv 01 20  1 495      
    jmp #0045FF95 (:%opConcatN)           ;#0044323E: 351 52CD0100               v  00 00  1 495      
    mov ecx,6                             ;#00443243: 271 06000000               uv 02 00  1 496      
    mov edx,954                           ;#00443248: 272 BA030000               vu 04 00  1 496      
    call #00462C02 (:%opFrame) (sput)     ;#0044324D: 350 B0F90100               v  00 00  1 497      
    mov edi,[ebp+20] (prevebp)            ;#00443252: 213175 14                  uv 80 20  1 498      
    mov eax,[edi-92]                      ;#00443255: 213107 A4                  uv 01 80  1 501 80 *80*
    mov [edi-92], dword h4                ;#00443258: 307107 A4 00000040         vu 00 80  1 501      
    cmp eax,h4                            ;#0044325F: 075 00000040               uv 00 01  1 502      
    jne #00443270                         ;#00443264: 165 0A                     v  00 00  1 502      
    mov esi,1000                          ;#00443266: 276 E8030000               uv 40 00  1 503      
    call #00462744 (:%pUnassigned)        ;#0044326B: 350 D4F40100               v  00 00  1 503      
    mov [ebp] (txt),eax                   ;#00443270: 211105 00                  uv 00 21  1 504      
    mov [ebp+28] (retaddr),#0044327F      ;#00443273: 307105 1C 7F324400         vu 00 20  1 504      
    jmp #004424FD (code:sput)             ;#0044327A: 351 7EF2FFFF               v  00 00  1 505      
;   486             return length(txt)+2
    mov edi,[ebp-48] (txt)                ;#0044327F: 213175 D0                  uv 80 20  1 506      
    mov ecx,[ebx+edi*4-12]                ;#00443282: 213114273 F4               uv 02 88  1 509 80 *80*
    mov [ebp-84] (symtab[995]),ecx        ;#00443286: 211115 AC                  uv 00 22  1 510 02   
    lea edi,[ebp-68] (symtab[988])        ;#00443289: 215175 BC                  vu 80 20  1 510      
    mov eax,[DLL_THREAD_ATTACH]           ;#0044328C: 241 40204000               uv 01 00  1 511      
    call #0045F261 (:%opAdd)              ;#00443291: 350 CBBF0100               v  00 00  1 511      
    mov eax,[ebp-68] (symtab[988])        ;#00443296: 213105 BC                  uv 01 20  1 512      
    jmp #00462C8F (:%opRetf)              ;#00443299: 351 F1F90100               v  00 00  1 512      
;   487         end if
;   488         len = nindent
    mov esi,[#0040248C] (nindent)         ;#0044329E: 213065 8C244000            uv 40 00  1 513      
    cmp esi,h4                            ;#004432A4: 201376 00000040            uv 00 40  1 514 40   
    jne #004432B6                         ;#004432AA: 165 0A                     v  00 00  1 514      
    mov esi,951                           ;#004432AC: 276 B7030000               uv 40 00  1 515      
    call #00462744 (:%pUnassigned)        ;#004432B1: 350 8EF40100               v  00 00  1 515      
    mov [ebp-20] (len),esi                ;#004432B6: 211165 EC                  uv 00 60  1 516      
    cmp esi,h4                            ;#004432B9: 201376 00000040            vu 00 40  1 516      
    jl #004432D0                          ;#004432BF: 174 0F                     v  00 00  1 517      
    mov esi,951                           ;#004432C1: 276 B7030000               uv 40 00  1 518      
    mov edi,976                           ;#004432C6: 277 D0030000               vu 80 00  1 518      
    call #00462744 (:%pUnassigned)        ;#004432CB: 350 74F40100               v  00 00  1 519      
;   489         if prnt then
    mov edi,[ebp-12] (prnt)               ;#004432D0: 213175 F4                  uv 80 20  1 520      
    test edi,edi                          ;#004432D3: 205377                     uv 00 80  1 521 80   
    je #004433B3                          ;#004432D5: 017204 D8000000            v  00 00  1 521      
;   490             txt = repeat(' ',nindent)
    mov ecx,6                             ;#004432DB: 271 06000000               uv 02 00  1 522      
    mov edx,206                           ;#004432E0: 272 CE000000               vu 04 00  1 522      
    call :%opFrame (repeatch)             ;#004432E5: 350 18F90100               v  00 00  1 523      
    mov [ebp] (ch), dword 32              ;#004432EA: 307105 00 20000000         uv 00 20  1 524      
    mov ecx,[#0040248C] (nindent)         ;#004432F1: 213015 8C244000            vu 02 00  1 524      
    mov [ebp-4] (n),ecx                   ;#004432F7: 211115 FC                  uv 00 22  1 525      
    mov [ebp+28] (retaddr),#00443306      ;#004432FA: 307105 1C 06334400         vu 00 20  1 525      
    jmp #0045581E (code:repeatch)         ;#00443301: 351 18250100               v  00 00  1 526      
    push eax                              ;#00443306: 120                        uv 00 01  1 527      
    mov eax,[ebp-48] (txt)                ;#00443307: 213105 D0                  vu 01 20  1 527      
    cmp eax,h4                            ;#0044330A: 075 00000040               uv 00 01  1 528      
    jle #0044331F                         ;#0044330F: 176 0E                     v  00 00  1 528      
    sub dword[ebx+eax*4-8],1              ;#00443311: 203154203 F8 01            u  00 09  3 529      
    jne #0044331F                         ;#00443316: 165 07                     v  00 00  1 531      
    mov edx,eax                           ;#00443318: 213320                     uv 04 01  1 532      
    call #004639A8 (:%pDealloc)           ;#0044331A: 350 89060200               v  00 00  1 532      
    pop dword[ebp-48] (txt)               ;#0044331F: 217105 D0                  np 00 20  3 533      
;   491             txt[1] = ppp_Br[1]
    mov esi,[#0040246C] (ppp_Br)          ;#00443322: 213065 6C244000            uv 40 00  1 536      
    cmp esi,h4                            ;#00443328: 201376 00000040            uv 00 40  1 537 40   
    jne #0044333A                         ;#0044332E: 165 0A                     v  00 00  1 537      
    mov esi,943                           ;#00443330: 276 AF030000               uv 40 00  1 538      
    call #00462744 (:%pUnassigned)        ;#00443335: 350 0AF40100               v  00 00  1 538      
    mov edi,1                             ;#0044333A: 277 01000000               uv 80 00  1 539      
    lea ecx,[ebp-88] (symtab[996])        ;#0044333F: 215115 A8                  vu 02 20  1 539      
    mov edx,943                           ;#00443342: 272 AF030000               uv 04 00  1 540      
    mov al,0                              ;#00443347: 260 00                     vu 01 00  1 540      
    call #00460FE5 (:%pSubse1)            ;#00443349: 350 97DC0100               v  00 00  1 541      
    mov edi,[#0040201C]                   ;#0044334E: 213075 1C204000            uv 80 00  1 542      
    mov ecx,[ebp-88] (symtab[996])        ;#00443354: 213115 A8                  vu 02 20  1 542      
    mov esi,[ebp-48] (txt)                ;#00443357: 213165 D0                  uv 40 20  1 543      
    lea eax,[ebp-48] (txt)                ;#0044335A: 215105 D0                  vu 01 20  1 543      
    call #004607F3 (:%pRepe1)             ;#0044335D: 350 91D40100               v  00 00  1 544      
    mov edx,[ebp-88] (symtab[996])        ;#00443362: 213125 A8                  uv 04 20  1 545      
    cmp edx,h4                            ;#00443365: 201372 00000040            uv 00 04  1 546 04   
    mov [ebp-88] (symtab[996]),ebx        ;#0044336B: 211135 A8                  vu 00 28  1 546      
    jle #0044337C                         ;#0044336E: 176 0C                     v  00 00  1 547      
    sub dword[ebx+edx*4-8],1              ;#00443370: 203154223 F8 01            u  00 0C  3 548      
    jne #0044337C                         ;#00443375: 165 05                     v  00 00  1 550      
    call #004639A8 (:%pDealloc)           ;#00443377: 350 2C060200               v  00 00  1 551      
;   492             sput(txt)
    mov ecx,6                             ;#0044337C: 271 06000000               uv 02 00  1 552      
    mov edx,954                           ;#00443381: 272 BA030000               vu 04 00  1 552      
    call #00462C02 (:%opFrame) (sput)     ;#00443386: 350 77F80100               v  00 00  1 553      
    mov edi,[ebp+20] (prevebp)            ;#0044338B: 213175 14                  uv 80 20  1 554      
    mov eax,[edi-48]                      ;#0044338E: 213107 D0                  uv 01 80  1 557 80 *80*
    xor ebx,ebx                           ;#00443391: 061333                     vu 08 08  1 557      
    cmp eax,h4                            ;#00443393: 075 00000040               uv 00 01  1 558      
    jl #004433A4                          ;#00443398: 174 0A                     v  00 00  1 558      
    add dword[ebx+eax*4-8],1              ;#0044339A: 203104203 F8 01            u  00 09  3 559      
    cmp eax,983                           ;#0044339F: 075 D7030000               vu 00 01  1 561      
    mov [ebp] (txt),eax                   ;#004433A4: 211105 00                  uv 00 21  1 562      
    mov [ebp+28] (retaddr),#004433B3      ;#004433A7: 307105 1C B3334400         vu 00 20  1 562      
    jmp #004424FD (code:sput)             ;#004433AE: 351 4AF1FFFF               v  00 00  1 563      
;   493         end if
;   494         if nestlvl<0 then nestlvl = 0 end if
    mov edi,[ebp-16] (nestlvl)            ;#004433B3: 213175 F0                  uv 80 20  1 564      
    cmp edi,0                             ;#004433B6: 203377 00                  uv 00 80  1 565 80   
    jge #004433BE                         ;#004433B9: 175 03                     v  00 00  1 565      
    mov [ebp-16] (nestlvl),ebx            ;#004433BB: 211135 F0                  uv 00 28  1 566      
;   495         sep = ""
    mov ecx,[#004022A4]                   ;#004433BE: 213015 A4224000            vu 02 00  1 566      
    mov edx,[ebp-44] (sep)                ;#004433C4: 213125 D4                  uv 04 20  1 567      
    cmp ecx,h4                            ;#004433C7: 201371 00000040            vu 00 02  1 567      
    jl #004433D4                          ;#004433CD: 174 05                     v  00 00  1 568      
    add dword[ebx+ecx*4-8],1              ;#004433CF: 203104213 F8 01            u  00 0A  3 569      
    mov [ebp-44] (sep),ecx                ;#004433D4: 211115 D4                  vu 00 22  1 571      
    cmp edx,h4                            ;#004433D7: 201372 00000040            uv 00 04  1 572      
    jle #004433EB                         ;#004433DD: 176 0C                     v  00 00  1 572      
    sub dword[ebx+edx*4-8],1              ;#004433DF: 203154223 F8 01            u  00 0C  3 573      
    jne #004433EB                         ;#004433E4: 165 05                     v  00 00  1 575      
    call #004639A8 (:%pDealloc)           ;#004433E6: 350 BD050200               v  00 00  1 576      
;   496         for i=1 to length(cl) do
    lea edi,[ebp-84] (symtab[995])        ;#004433EB: 215175 AC                  uv 80 20  1 577      
    mov esi,[ebp] (cl)                    ;#004433EE: 213165 00                  vu 40 20  1 577      
    mov edx,971                           ;#004433F1: 272 CB030000               uv 04 00  1 578      
    call #0045EFEC (:%opLen)              ;#004433F6: 350 F1BB0100               v  00 00  1 578      
    mov [ebp-60] (i), dword 1             ;#004433FB: 307105 C4 01000000         uv 00 20  1 579      
    cmp ecx,1                             ;#00443402: 201371 01000000            vu 00 02  1 579      
    jl #004439B4                          ;#00443408: 017214 A6050000            v  00 00  1 580      
;   497             if col+len>nindent*(ppp_Nest[2]+1-nestlvl) then
    lea edi,[ebp-68] (symtab[988])        ;#0044340E: 215175 BC                  uv 80 20  1 581      
    mov ecx,[ebp-4] (col)                 ;#00443411: 213115 FC                  vu 02 20  1 581      
    mov eax,[ebp-20] (len)                ;#00443414: 213105 EC                  uv 01 20  1 582      
    call #0045F261 (:%opAdd)              ;#00443417: 350 45BE0100               v  00 00  1 582      
    mov edi,2                             ;#0044341C: 277 02000000               uv 80 00  1 583      
    lea ecx,[ebp-88] (symtab[996])        ;#00443421: 215115 A8                  vu 02 20  1 583      
    mov esi,[#00402448] (ppp_Nest)        ;#00443424: 213065 48244000            uv 40 00  1 584      
    mov edx,934                           ;#0044342A: 272 A6030000               vu 04 00  1 584      
    mov al,0                              ;#0044342F: 260 00                     uv 01 00  1 585      
    call #00460FE5 (:%pSubse1)            ;#00443431: 350 AFDB0100               v  00 00  1 585      
    lea edi,[ebp-96] (symtab[1001])       ;#00443436: 215175 A0                  uv 80 20  1 586      
    mov ecx,[ebp-88] (symtab[996])        ;#00443439: 213115 A8                  vu 02 20  1 586      
    mov eax,[#0040201C]                   ;#0044343C: 241 1C204000               uv 01 00  1 587      
    call #0045F261 (:%opAdd)              ;#00443441: 350 1BBE0100               v  00 00  1 587      
    lea edi,[ebp-100] (symtab[1002])      ;#00443446: 215175 9C                  uv 80 20  1 588      
    mov ecx,[ebp-96] (symtab[1001])       ;#00443449: 213115 A0                  vu 02 20  1 588      
    mov eax,[ebp-16] (nestlvl)            ;#0044344C: 213105 F0                  uv 01 20  1 589      
    call #0045F299 (:%opSub)              ;#0044344F: 350 45BE0100               v  00 00  1 589      
    lea edi,[ebp-96] (symtab[1001])       ;#00443454: 215175 A0                  uv 80 20  1 590      
    mov ecx,[#0040248C] (nindent)         ;#00443457: 213015 8C244000            vu 02 00  1 590      
    mov eax,[ebp-100] (symtab[1002])      ;#0044345D: 213105 9C                  uv 01 20  1 591      
    call #0045F412 (:%opMul)              ;#00443460: 350 ADBF0100               v  00 00  1 591      
    mov edi,[ebp-96] (symtab[1001])       ;#00443465: 213175 A0                  uv 80 20  1 592      
    mov eax,[ebp-68] (symtab[988])        ;#00443468: 213105 BC                  vu 01 20  1 592      
    mov esi,1001                          ;#0044346B: 276 E9030000               uv 40 00  1 593      
    mov edx,988                           ;#00443470: 272 DC030000               vu 04 00  1 593      
    call #0045F8B0 (:%opJcc)              ;#00443475: 350 36C40100               v  00 00  1 594      
    jle #0044375B                         ;#0044347A: 017216 DB020000            v  00 00  1 595      
;   498                 if (i>1 and nestlvl>0)
    mov esi,[ebp-60] (i)                  ;#00443480: 213165 C4                  uv 40 20  1 596      
    cmp esi,1                             ;#00443483: 203376 01                  uv 00 40  1 597 40   
    jle #00443494                         ;#00443486: 176 0C                     v  00 00  1 597      
    mov ecx,[ebp-16] (nestlvl)            ;#00443488: 213115 F0                  uv 02 20  1 598      
    cmp ecx,0                             ;#0044348B: 203371 00                  uv 00 02  1 599 02   
    jg #00443606                          ;#0044348E: 017217 72010000            v  00 00  1 599      
;   499                 or ppp_Maxlen<=prnf(cl[i],col+len,col+nindent,0,nestlvl-1)
    mov edi,esi                           ;#00443494: 211367                     uv 80 40  1 600      
    lea ecx,[ebp-88] (symtab[996])        ;#00443496: 215115 A8                  vu 02 20  1 600      
    mov esi,[ebp] (cl)                    ;#00443499: 213165 00                  uv 40 20  1 601      
    mov edx,971                           ;#0044349C: 272 CB030000               vu 04 00  1 601      
    mov al,0                              ;#004434A1: 260 00                     uv 01 00  1 602      
    call #00460FE5 (:%pSubse1)            ;#004434A3: 350 3DDB0100               v  00 00  1 602      
    lea edi,[ebp-68] (symtab[988])        ;#004434A8: 215175 BC                  uv 80 20  1 603      
    mov ecx,[ebp-4] (col)                 ;#004434AB: 213115 FC                  vu 02 20  1 603      
    mov eax,[ebp-20] (len)                ;#004434AE: 213105 EC                  uv 01 20  1 604      
    call #0045F261 (:%opAdd)              ;#004434B1: 350 ABBD0100               v  00 00  1 604      
    lea edi,[ebp-96] (symtab[1001])       ;#004434B6: 215175 A0                  uv 80 20  1 605      
    mov ecx,[ebp-4] (col)                 ;#004434B9: 213115 FC                  vu 02 20  1 605      
    mov eax,[#0040248C] (nindent)         ;#004434BC: 241 8C244000               uv 01 00  1 606      
    call #0045F261 (:%opAdd)              ;#004434C1: 350 9BBD0100               v  00 00  1 606      
    lea edi,[ebp-100] (symtab[1002])      ;#004434C6: 215175 9C                  uv 80 20  1 607      
    mov ecx,[ebp-16] (nestlvl)            ;#004434C9: 213115 F0                  vu 02 20  1 607      
    mov eax,[#0040201C]                   ;#004434CC: 241 1C204000               uv 01 00  1 608      
    call #0045F299 (:%opSub)              ;#004434D1: 350 C3BD0100               v  00 00  1 608      
    mov ecx,28                            ;#004434D6: 271 1C000000               uv 02 00  1 609      
    mov edx,970                           ;#004434DB: 272 CA030000               vu 04 00  1 609      
    call #00462C02 (:%opFrame) (prnf)     ;#004434E0: 350 1DF70100               v  00 00  1 610      
    mov edi,[ebp+20] (prevebp)            ;#004434E5: 213175 14                  uv 80 20  1 611      
    mov eax,[edi-88]                      ;#004434E8: 213107 A8                  uv 01 80  1 614 80 *80*
    mov [edi-88], dword h4                ;#004434EB: 307107 A8 00000040         vu 00 80  1 614      
    cmp eax,h4                            ;#004434F2: 075 00000040               uv 00 01  1 615      
    jne #00443503                         ;#004434F7: 165 0A                     v  00 00  1 615      
    mov esi,996                           ;#004434F9: 276 E4030000               uv 40 00  1 616      
    call #00462744 (:%pUnassigned)        ;#004434FE: 350 41F20100               v  00 00  1 616      
    mov [ebp] (cl),eax                    ;#00443503: 211105 00                  uv 00 21  1 617      
    mov edi,[ebp+20] (prevebp)            ;#00443506: 213175 14                  vu 80 20  1 617      
    mov eax,[edi-68]                      ;#00443509: 213107 BC                  uv 01 80  1 620    *80*
    mov [edi-68], dword h4                ;#0044350C: 307107 BC 00000040         vu 00 80  1 620      
    cmp eax,h4                            ;#00443513: 075 00000040               uv 00 01  1 621      
    jne #00443524                         ;#00443518: 165 0A                     v  00 00  1 621      
    mov esi,988                           ;#0044351A: 276 DC030000               uv 40 00  1 622      
    call #00462744 (:%pUnassigned)        ;#0044351F: 350 20F20100               v  00 00  1 622      
    mov [ebp-4] (col),eax                 ;#00443524: 211105 FC                  uv 00 21  1 623      
    mov edi,[ebp+20] (prevebp)            ;#00443527: 213175 14                  vu 80 20  1 623      
    mov eax,[edi-96]                      ;#0044352A: 213107 A0                  uv 01 80  1 626    *80*
    mov [edi-96], dword h4                ;#0044352D: 307107 A0 00000040         vu 00 80  1 626      
    cmp eax,h4                            ;#00443534: 075 00000040               uv 00 01  1 627      
    jne #00443545                         ;#00443539: 165 0A                     v  00 00  1 627      
    mov esi,1001                          ;#0044353B: 276 E9030000               uv 40 00  1 628      
    call #00462744 (:%pUnassigned)        ;#00443540: 350 FFF10100               v  00 00  1 628      
    mov [ebp-8] (indent),eax              ;#00443545: 211105 F8                  uv 00 21  1 629      
    mov [ebp-12] (prnt),ebx               ;#00443548: 211135 F4                  vu 00 28  1 629      
    mov edi,[ebp+20] (prevebp)            ;#0044354B: 213175 14                  uv 80 20  1 630      
    mov eax,[edi-100]                     ;#0044354E: 213107 9C                  uv 01 80  1 633 80 *80*
    mov [edi-100], dword h4               ;#00443551: 307107 9C 00000040         vu 00 80  1 633      
    cmp eax,h4                            ;#00443558: 075 00000040               uv 00 01  1 634      
    jne #00443569                         ;#0044355D: 165 0A                     v  00 00  1 634      
    mov esi,1002                          ;#0044355F: 276 EA030000               uv 40 00  1 635      
    call #00462744 (:%pUnassigned)        ;#00443564: 350 DBF10100               v  00 00  1 635      
    mov [ebp-16] (nestlvl),eax            ;#00443569: 211105 F0                  uv 00 21  1 636      
    mov [ebp+28] (retaddr),#00443578      ;#0044356C: 307105 1C 78354400         vu 00 20  1 636      
    jmp #0044271D (code:prnf)             ;#00443573: 351 A5F1FFFF               v  00 00  1 637      
    push eax                              ;#00443578: 120                        uv 00 01  1 638      
    mov edi,[ebp-88] (symtab[996])        ;#00443579: 213175 A8                  vu 80 20  1 638      
    cmp edi,h4                            ;#0044357C: 201377 00000040            uv 00 80  1 639      
    jle #00443592                         ;#00443582: 176 0E                     v  00 00  1 639      
    sub dword[ebx+edi*4-8],1              ;#00443584: 203154273 F8 01            u  00 88  3 640      
    jne #00443592                         ;#00443589: 165 07                     v  00 00  1 642      
    mov edx,edi                           ;#0044358B: 213327                     uv 04 80  1 643      
    call #004639A8 (:%pDealloc)           ;#0044358D: 350 16040200               v  00 00  1 643      
    pop dword[ebp-88] (symtab[996])       ;#00443592: 217105 A8                  np 00 20  3 644      
;   500                                +col+len+length(sep)+2+ppp_Indent then
    lea edi,[ebp-68] (symtab[988])        ;#00443595: 215175 BC                  uv 80 20  1 647      
    mov ecx,[ebp-88] (symtab[996])        ;#00443598: 213115 A8                  vu 02 20  1 647      
    mov eax,[ebp-4] (col)                 ;#0044359B: 213105 FC                  uv 01 20  1 648      
    call #0045F261 (:%opAdd)              ;#0044359E: 350 BEBC0100               v  00 00  1 648      
    lea edi,[ebp-96] (symtab[1001])       ;#004435A3: 215175 A0                  uv 80 20  1 649      
    mov ecx,[ebp-68] (symtab[988])        ;#004435A6: 213115 BC                  vu 02 20  1 649      
    mov eax,[ebp-20] (len)                ;#004435A9: 213105 EC                  uv 01 20  1 650      
    call #0045F261 (:%opAdd)              ;#004435AC: 350 B0BC0100               v  00 00  1 650      
    mov esi,[ebp-44] (sep)                ;#004435B1: 213165 D4                  uv 40 20  1 651      
    mov edi,[ebx+esi*4-12]                ;#004435B4: 213174263 F4               uv 80 48  1 654 40 *40*
    mov [ebp-104] (symtab[1003]),edi      ;#004435B8: 211175 98                  uv 00 A0  1 655 80   
    lea edi,[ebp-68] (symtab[988])        ;#004435BB: 215175 BC                  vu 80 20  1 655      
    mov ecx,[ebp-96] (symtab[1001])       ;#004435BE: 213115 A0                  uv 02 20  1 656      
    mov eax,[ebp-104] (symtab[1003])      ;#004435C1: 213105 98                  vu 01 20  1 656      
    call #0045F261 (:%opAdd)              ;#004435C4: 350 98BC0100               v  00 00  1 657      
    lea edi,[ebp-96] (symtab[1001])       ;#004435C9: 215175 A0                  uv 80 20  1 658      
    mov ecx,[ebp-68] (symtab[988])        ;#004435CC: 213115 BC                  vu 02 20  1 658      
    mov eax,[DLL_THREAD_ATTACH]           ;#004435CF: 241 40204000               uv 01 00  1 659      
    call #0045F261 (:%opAdd)              ;#004435D4: 350 88BC0100               v  00 00  1 659      
    lea edi,[ebp-68] (symtab[988])        ;#004435D9: 215175 BC                  uv 80 20  1 660      
    mov ecx,[ebp-96] (symtab[1001])       ;#004435DC: 213115 A0                  vu 02 20  1 660      
    mov eax,[#00402444] (ppp_Indent)      ;#004435DF: 241 44244000               uv 01 00  1 661      
    call #0045F261 (:%opAdd)              ;#004435E4: 350 78BC0100               v  00 00  1 661      
    mov edi,[ebp-68] (symtab[988])        ;#004435E9: 213175 BC                  uv 80 20  1 662      
    mov eax,[#0040243C] (ppp_Maxlen)      ;#004435EC: 241 3C244000               vu 01 00  1 662      
    mov esi,988                           ;#004435F1: 276 DC030000               uv 40 00  1 663      
    mov edx,931                           ;#004435F6: 272 A3030000               vu 04 00  1 663      
    call #0045F8B0 (:%opJcc)              ;#004435FB: 350 B0C20100               v  00 00  1 664      
    jg #0044375B                          ;#00443600: 017217 55010000            v  00 00  1 665      
;   501                     if not prnt then return ppp_Maxlen+1 end if -- force linebreak
    mov esi,[ebp-12] (prnt)               ;#00443606: 213165 F4                  uv 40 20  1 666      
    test esi,esi                          ;#00443609: 205366                     uv 00 40  1 667 40   
    jne #0044362B                         ;#0044360B: 165 1E                     v  00 00  1 667      
    lea edi,[ebp-68] (symtab[988])        ;#0044360D: 215175 BC                  uv 80 20  1 668      
    mov ecx,[#0040243C] (ppp_Maxlen)      ;#00443610: 213015 3C244000            vu 02 00  1 668      
    mov eax,[#0040201C]                   ;#00443616: 241 1C204000               uv 01 00  1 669      
    call #0045F261 (:%opAdd)              ;#0044361B: 350 41BC0100               v  00 00  1 669      
    mov eax,[ebp-68] (symtab[988])        ;#00443620: 213105 BC                  uv 01 20  1 670      
    mov [ebp-68] (symtab[988]),ebx        ;#00443623: 211135 BC                  vu 00 28  1 670      
    jmp #00462C8F (:%opRetf)              ;#00443626: 351 64F60100               v  00 00  1 671      
;   502                     if length(sep) then
    mov edi,[ebp-44] (sep)                ;#0044362B: 213175 D4                  uv 80 20  1 672      
    mov edx,[ebx+edi*4-12]                ;#0044362E: 213124273 F4               uv 04 88  1 675 80 *80*
    test edx,edx                          ;#00443632: 205322                     uv 00 04  1 676 04   
    je #0044371F                          ;#00443634: 017204 E5000000            v  00 00  1 676      
;   503                         sput(",\n")
    mov ecx,6                             ;#0044363A: 271 06000000               uv 02 00  1 677      
    mov edx,954                           ;#0044363F: 272 BA030000               vu 04 00  1 677      
    call #00462C02 (:%opFrame) (sput)     ;#00443644: 350 B9F50100               v  00 00  1 678      
    mov esi,[#004024BC]                   ;#00443649: 213065 BC244000            uv 40 00  1 679      
    mov [ebp] (txt),esi                   ;#0044364F: 211165 00                  uv 00 60  1 680 40   
    add dword[ebx+esi*4-8],1              ;#00443652: 203104263 F8 01            u  00 48  3 682    *40*
    mov [ebp+28] (retaddr),#00443663      ;#00443657: 307105 1C 63364400         vu 00 20  1 684      
    jmp #004424FD (code:sput)             ;#0044365E: 351 9AEEFFFF               v  00 00  1 685      
;   504                         sput(repeat(' ',indent+nindent+ppp_Indent))
    lea edi,[ebp-68] (symtab[988])        ;#00443663: 215175 BC                  uv 80 20  1 686      
    mov ecx,[ebp-8] (indent)              ;#00443666: 213115 F8                  vu 02 20  1 686      
    mov eax,[#0040248C] (nindent)         ;#00443669: 241 8C244000               uv 01 00  1 687      
    call #0045F261 (:%opAdd)              ;#0044366E: 350 EEBB0100               v  00 00  1 687      
    lea edi,[ebp-96] (symtab[1001])       ;#00443673: 215175 A0                  uv 80 20  1 688      
    mov ecx,[ebp-68] (symtab[988])        ;#00443676: 213115 BC                  vu 02 20  1 688      
    mov eax,[#00402444] (ppp_Indent)      ;#00443679: 241 44244000               uv 01 00  1 689      
    call #0045F261 (:%opAdd)              ;#0044367E: 350 DEBB0100               v  00 00  1 689      
    mov ecx,6                             ;#00443683: 271 06000000               uv 02 00  1 690      
    mov edx,206                           ;#00443688: 272 CE000000               vu 04 00  1 690      
    call :%opFrame (repeatch)             ;#0044368D: 350 70F50100               v  00 00  1 691      
    mov [ebp] (ch), dword 32              ;#00443692: 307105 00 20000000         uv 00 20  1 692      
    mov edi,[ebp+20] (prevebp)            ;#00443699: 213175 14                  vu 80 20  1 692      
    mov eax,[edi-96]                      ;#0044369C: 213107 A0                  uv 01 80  1 695    *80*
    mov [edi-96], dword h4                ;#0044369F: 307107 A0 00000040         vu 00 80  1 695      
    cmp eax,h4                            ;#004436A6: 075 00000040               uv 00 01  1 696      
    jne #004436B7                         ;#004436AB: 165 0A                     v  00 00  1 696      
    mov esi,1001                          ;#004436AD: 276 E9030000               uv 40 00  1 697      
    call #00462744 (:%pUnassigned)        ;#004436B2: 350 8DF00100               v  00 00  1 697      
    mov [ebp-4] (n),eax                   ;#004436B7: 211105 FC                  uv 00 21  1 698      
    mov [ebp+28] (retaddr),#004436C6      ;#004436BA: 307105 1C C6364400         vu 00 20  1 698      
    jmp #0045581E (code:repeatch)         ;#004436C1: 351 58210100               v  00 00  1 699      
    push eax                              ;#004436C6: 120                        uv 00 01  1 700      
    mov edi,[ebp-92] (symtab[1000])       ;#004436C7: 213175 A4                  vu 80 20  1 700      
    cmp edi,h4                            ;#004436CA: 201377 00000040            uv 00 80  1 701      
    jle #004436E0                         ;#004436D0: 176 0E                     v  00 00  1 701      
    sub dword[ebx+edi*4-8],1              ;#004436D2: 203154273 F8 01            u  00 88  3 702      
    jne #004436E0                         ;#004436D7: 165 07                     v  00 00  1 704      
    mov edx,edi                           ;#004436D9: 213327                     uv 04 80  1 705      
    call #004639A8 (:%pDealloc)           ;#004436DB: 350 C8020200               v  00 00  1 705      
    pop dword[ebp-92] (symtab[1000])      ;#004436E0: 217105 A4                  np 00 20  3 706      
    mov ecx,6                             ;#004436E3: 271 06000000               uv 02 00  1 709      
    mov edx,954                           ;#004436E8: 272 BA030000               vu 04 00  1 709      
    call #00462C02 (:%opFrame) (sput)     ;#004436ED: 350 10F50100               v  00 00  1 710      
    mov edi,[ebp+20] (prevebp)            ;#004436F2: 213175 14                  uv 80 20  1 711      
    mov eax,[edi-92]                      ;#004436F5: 213107 A4                  uv 01 80  1 714 80 *80*
    mov [edi-92], dword h4                ;#004436F8: 307107 A4 00000040         vu 00 80  1 714      
    cmp eax,h4                            ;#004436FF: 075 00000040               uv 00 01  1 715      
    jne #00443710                         ;#00443704: 165 0A                     v  00 00  1 715      
    mov esi,1000                          ;#00443706: 276 E8030000               uv 40 00  1 716      
    call #00462744 (:%pUnassigned)        ;#0044370B: 350 34F00100               v  00 00  1 716      
    mov [ebp] (txt),eax                   ;#00443710: 211105 00                  uv 00 21  1 717      
    mov [ebp+28] (retaddr),#0044371F      ;#00443713: 307105 1C 1F374400         vu 00 20  1 717      
    jmp #004424FD (code:sput)             ;#0044371A: 351 DEEDFFFF               v  00 00  1 718      
;   505                     end if
;   506                     len = nindent
    mov esi,[#0040248C] (nindent)         ;#0044371F: 213065 8C244000            uv 40 00  1 719      
    mov [ebp-20] (len),esi                ;#00443725: 211165 EC                  uv 00 60  1 720 40   
;   507                     col = indent
    mov ecx,[ebp-8] (indent)              ;#00443728: 213115 F8                  vu 02 20  1 720      
    mov [ebp-4] (col),ecx                 ;#0044372B: 211115 FC                  uv 00 22  1 721      
;   508                     sep = ""
    mov edi,[#004022A4]                   ;#0044372E: 213075 A4224000            vu 80 00  1 721      
    mov edx,[ebp-44] (sep)                ;#00443734: 213125 D4                  uv 04 20  1 722      
    cmp edi,h4                            ;#00443737: 201377 00000040            vu 00 80  1 722      
    jl #00443744                          ;#0044373D: 174 05                     v  00 00  1 723      
    add dword[ebx+edi*4-8],1              ;#0044373F: 203104273 F8 01            u  00 88  3 724      
    mov [ebp-44] (sep),edi                ;#00443744: 211175 D4                  vu 00 A0  1 726      
    cmp edx,h4                            ;#00443747: 201372 00000040            uv 00 04  1 727      
    jle #0044375B                         ;#0044374D: 176 0C                     v  00 00  1 727      
    sub dword[ebx+edx*4-8],1              ;#0044374F: 203154223 F8 01            u  00 0C  3 728      
    jne #0044375B                         ;#00443754: 165 05                     v  00 00  1 730      
    call #004639A8 (:%pDealloc)           ;#00443756: 350 4D020200               v  00 00  1 731      
;   509                 end if
;   510             end if
;   511             if prnt and length(sep) then sput(sep) end if
    mov eax,[ebp-12] (prnt)               ;#0044375B: 213105 F4                  uv 01 20  1 732      
    test eax,eax                          ;#0044375E: 205300                     uv 00 01  1 733 01   
    je #004437A4                          ;#00443760: 164 42                     v  00 00  1 733      
    mov esi,[ebp-44] (sep)                ;#00443762: 213165 D4                  uv 40 20  1 734      
    mov ecx,[ebx+esi*4-12]                ;#00443765: 213114263 F4               uv 02 48  1 737 40 *40*
    test ecx,ecx                          ;#00443769: 205311                     uv 00 02  1 738 02   
    je #004437A4                          ;#0044376B: 164 37                     v  00 00  1 738      
    mov ecx,6                             ;#0044376D: 271 06000000               uv 02 00  1 739      
    mov edx,954                           ;#00443772: 272 BA030000               vu 04 00  1 739      
    call #00462C02 (:%opFrame) (sput)     ;#00443777: 350 86F40100               v  00 00  1 740      
    mov edi,[ebp+20] (prevebp)            ;#0044377C: 213175 14                  uv 80 20  1 741      
    mov eax,[edi-44]                      ;#0044377F: 213107 D4                  uv 01 80  1 744 80 *80*
    xor ebx,ebx                           ;#00443782: 061333                     vu 08 08  1 744      
    cmp eax,h4                            ;#00443784: 075 00000040               uv 00 01  1 745      
    jl #00443795                          ;#00443789: 174 0A                     v  00 00  1 745      
    add dword[ebx+eax*4-8],1              ;#0044378B: 203104203 F8 01            u  00 09  3 746      
    cmp eax,982                           ;#00443790: 075 D6030000               vu 00 01  1 748      
    mov [ebp] (txt),eax                   ;#00443795: 211105 00                  uv 00 21  1 749      
    mov [ebp+28] (retaddr),#004437A4      ;#00443798: 307105 1C A4374400         vu 00 20  1 749      
    jmp #004424FD (code:sput)             ;#0044379F: 351 59EDFFFF               v  00 00  1 750      
;   512             len += length(sep)
    mov edi,[ebp-44] (sep)                ;#004437A4: 213175 D4                  uv 80 20  1 751      
    mov esi,[ebx+edi*4-12]                ;#004437A7: 213164273 F4               uv 40 88  1 754 80 *80*
    mov [ebp-104] (symtab[1003]),esi      ;#004437AB: 211165 98                  uv 00 60  1 755 40   
    mov ecx,[ebp-20] (len)                ;#004437AE: 213115 EC                  vu 02 20  1 755      
    add ecx,esi                           ;#004437B1: 001361                     uv 02 42  1 756      
    mov edx,ecx                           ;#004437B3: 213321                     uv 04 02  1 757 02   
    mov [ebp-20] (len),ecx                ;#004437B5: 211115 EC                  vu 00 22  1 757      
    shl edx,1                             ;#004437B8: 321342                     u  04 04  1 758      
    jno #004437C4                         ;#004437BA: 161 08                     v  00 00  1 758      
    lea edi,[ebp-20] (len)                ;#004437BC: 215175 EC                  uv 80 20  1 759      
    call #00462764 (:%e01tcfAddiii)       ;#004437BF: 350 A0EF0100               v  00 00  1 759      
;   513             len += prnf(cl[i],col+len,col+nindent,prnt,nestlvl-1)
    mov edi,[ebp-60] (i)                  ;#004437C4: 213175 C4                  uv 80 20  1 760      
    lea ecx,[ebp-88] (symtab[996])        ;#004437C7: 215115 A8                  vu 02 20  1 760      
    mov esi,[ebp] (cl)                    ;#004437CA: 213165 00                  uv 40 20  1 761      
    mov edx,971                           ;#004437CD: 272 CB030000               vu 04 00  1 761      
    mov al,0                              ;#004437D2: 260 00                     uv 01 00  1 762      
    call #00460FE5 (:%pSubse1)            ;#004437D4: 350 0CD80100               v  00 00  1 762      
    lea edi,[ebp-96] (symtab[1001])       ;#004437D9: 215175 A0                  uv 80 20  1 763      
    mov ecx,[ebp-4] (col)                 ;#004437DC: 213115 FC                  vu 02 20  1 763      
    mov eax,[ebp-20] (len)                ;#004437DF: 213105 EC                  uv 01 20  1 764      
    call #0045F261 (:%opAdd)              ;#004437E2: 350 7ABA0100               v  00 00  1 764      
    lea edi,[ebp-68] (symtab[988])        ;#004437E7: 215175 BC                  uv 80 20  1 765      
    mov ecx,[ebp-4] (col)                 ;#004437EA: 213115 FC                  vu 02 20  1 765      
    mov eax,[#0040248C] (nindent)         ;#004437ED: 241 8C244000               uv 01 00  1 766      
    call #0045F261 (:%opAdd)              ;#004437F2: 350 6ABA0100               v  00 00  1 766      
    lea edi,[ebp-100] (symtab[1002])      ;#004437F7: 215175 9C                  uv 80 20  1 767      
    mov ecx,[ebp-16] (nestlvl)            ;#004437FA: 213115 F0                  vu 02 20  1 767      
    mov eax,[#0040201C]                   ;#004437FD: 241 1C204000               uv 01 00  1 768      
    call #0045F299 (:%opSub)              ;#00443802: 350 92BA0100               v  00 00  1 768      
    mov ecx,28                            ;#00443807: 271 1C000000               uv 02 00  1 769      
    mov edx,970                           ;#0044380C: 272 CA030000               vu 04 00  1 769      
    call #00462C02 (:%opFrame) (prnf)     ;#00443811: 350 ECF30100               v  00 00  1 770      
    mov edi,[ebp+20] (prevebp)            ;#00443816: 213175 14                  uv 80 20  1 771      
    mov eax,[edi-88]                      ;#00443819: 213107 A8                  uv 01 80  1 774 80 *80*
    mov [edi-88], dword h4                ;#0044381C: 307107 A8 00000040         vu 00 80  1 774      
    cmp eax,h4                            ;#00443823: 075 00000040               uv 00 01  1 775      
    jne #00443834                         ;#00443828: 165 0A                     v  00 00  1 775      
    mov esi,996                           ;#0044382A: 276 E4030000               uv 40 00  1 776      
    call #00462744 (:%pUnassigned)        ;#0044382F: 350 10EF0100               v  00 00  1 776      
    mov [ebp] (cl),eax                    ;#00443834: 211105 00                  uv 00 21  1 777      
    mov edi,[ebp+20] (prevebp)            ;#00443837: 213175 14                  vu 80 20  1 777      
    mov eax,[edi-96]                      ;#0044383A: 213107 A0                  uv 01 80  1 780    *80*
    mov [edi-96], dword h4                ;#0044383D: 307107 A0 00000040         vu 00 80  1 780      
    cmp eax,h4                            ;#00443844: 075 00000040               uv 00 01  1 781      
    jne #00443855                         ;#00443849: 165 0A                     v  00 00  1 781      
    mov esi,1001                          ;#0044384B: 276 E9030000               uv 40 00  1 782      
    call #00462744 (:%pUnassigned)        ;#00443850: 350 EFEE0100               v  00 00  1 782      
    mov [ebp-4] (col),eax                 ;#00443855: 211105 FC                  uv 00 21  1 783      
    mov edi,[ebp+20] (prevebp)            ;#00443858: 213175 14                  vu 80 20  1 783      
    mov eax,[edi-68]                      ;#0044385B: 213107 BC                  uv 01 80  1 786    *80*
    mov [edi-68], dword h4                ;#0044385E: 307107 BC 00000040         vu 00 80  1 786      
    cmp eax,h4                            ;#00443865: 075 00000040               uv 00 01  1 787      
    jne #00443876                         ;#0044386A: 165 0A                     v  00 00  1 787      
    mov esi,988                           ;#0044386C: 276 DC030000               uv 40 00  1 788      
    call #00462744 (:%pUnassigned)        ;#00443871: 350 CEEE0100               v  00 00  1 788      
    mov [ebp-8] (indent),eax              ;#00443876: 211105 F8                  uv 00 21  1 789      
    mov edi,[ebp+20] (prevebp)            ;#00443879: 213175 14                  vu 80 20  1 789      
    mov eax,[edi-12]                      ;#0044387C: 213107 F4                  uv 01 80  1 792    *80*
    mov [ebp-12] (prnt),eax               ;#0044387F: 211105 F4                  uv 00 21  1 793 01   
    mov edi,[ebp+20] (prevebp)            ;#00443882: 213175 14                  vu 80 20  1 793      
    mov eax,[edi-100]                     ;#00443885: 213107 9C                  uv 01 80  1 796    *80*
    mov [edi-100], dword h4               ;#00443888: 307107 9C 00000040         vu 00 80  1 796      
    cmp eax,h4                            ;#0044388F: 075 00000040               uv 00 01  1 797      
    jne #004438A0                         ;#00443894: 165 0A                     v  00 00  1 797      
    mov esi,1002                          ;#00443896: 276 EA030000               uv 40 00  1 798      
    call #00462744 (:%pUnassigned)        ;#0044389B: 350 A4EE0100               v  00 00  1 798      
    mov [ebp-16] (nestlvl),eax            ;#004438A0: 211105 F0                  uv 00 21  1 799      
    mov [ebp+28] (retaddr),#004438AF      ;#004438A3: 307105 1C AF384400         vu 00 20  1 799      
    jmp #0044271D (code:prnf)             ;#004438AA: 351 6EEEFFFF               v  00 00  1 800      
    push eax                              ;#004438AF: 120                        uv 00 01  1 801      
    mov edi,[ebp-88] (symtab[996])        ;#004438B0: 213175 A8                  vu 80 20  1 801      
    cmp edi,h4                            ;#004438B3: 201377 00000040            uv 00 80  1 802      
    jle #004438C9                         ;#004438B9: 176 0E                     v  00 00  1 802      
    sub dword[ebx+edi*4-8],1              ;#004438BB: 203154273 F8 01            u  00 88  3 803      
    jne #004438C9                         ;#004438C0: 165 07                     v  00 00  1 805      
    mov edx,edi                           ;#004438C2: 213327                     uv 04 80  1 806      
    call #004639A8 (:%pDealloc)           ;#004438C4: 350 DF000200               v  00 00  1 806      
    pop dword[ebp-88] (symtab[996])       ;#004438C9: 217105 A8                  np 00 20  3 807      
    lea edi,[ebp-20] (len)                ;#004438CC: 215175 EC                  uv 80 20  1 810      
    mov ecx,[ebp-20] (len)                ;#004438CF: 213115 EC                  vu 02 20  1 810      
    mov eax,[ebp-88] (symtab[996])        ;#004438D2: 213105 A8                  uv 01 20  1 811      
    call #0045F27A (:%opAddi)             ;#004438D5: 350 A0B90100               v  00 00  1 811      
;   514             iplus1 = i+1
    mov esi,[ebp-60] (i)                  ;#004438DA: 213165 C4                  uv 40 20  1 812      
    add esi,1                             ;#004438DD: 203306 01                  uv 40 40  1 813 40   
    mov [ebp-24] (iplus1),esi             ;#004438E0: 211165 E8                  uv 00 60  1 814 40   
;   515             if atom(cl[i]) and (i=length(cl) or atom(cl[iplus1])) then
    mov edi,[ebp-60] (i)                  ;#004438E3: 213175 C4                  vu 80 20  1 814      
    lea ecx,[ebp-88] (symtab[996])        ;#004438E6: 215115 A8                  uv 02 20  1 815      
    mov esi,[ebp] (cl)                    ;#004438E9: 213165 00                  vu 40 20  1 815      
    mov edx,971                           ;#004438EC: 272 CB030000               uv 04 00  1 816      
    mov al,0                              ;#004438F1: 260 00                     vu 01 00  1 816      
    call #00460FE5 (:%pSubse1)            ;#004438F3: 350 EDD60100               v  00 00  1 817      
    mov ecx,[ebp-88] (symtab[996])        ;#004438F8: 213115 A8                  uv 02 20  1 818      
    cmp ecx,h4                            ;#004438FB: 201371 00000040            uv 00 02  1 819 02   
    jl #0044390A                          ;#00443901: 174 07                     v  00 00  1 819      
    cmp byte[ebx+ecx*4-1],#12             ;#00443903: 200174213 FF 12            u  00 0A  2 820      
    jne #00443973                         ;#00443908: 165 69                     v  00 00  1 821      
    lea edi,[ebp-104] (symtab[1003])      ;#0044390A: 215175 98                  uv 80 20  1 822      
    mov esi,[ebp] (cl)                    ;#0044390D: 213165 00                  vu 40 20  1 822      
    mov edx,971                           ;#00443910: 272 CB030000               uv 04 00  1 823      
    call #0045EFEC (:%opLen)              ;#00443915: 350 D2B60100               v  00 00  1 823      
    mov eax,[ebp-60] (i)                  ;#0044391A: 213105 C4                  uv 01 20  1 824      
    cmp eax,ecx                           ;#0044391D: 071310                     uv 00 03  1 825 01   
    je #00443944                          ;#0044391F: 164 23                     v  00 00  1 825      
    mov edi,[ebp-24] (iplus1)             ;#00443921: 213175 E8                  uv 80 20  1 826      
    lea ecx,[ebp-88] (symtab[996])        ;#00443924: 215115 A8                  vu 02 20  1 826      
    mov edx,971                           ;#00443927: 272 CB030000               uv 04 00  1 827      
    mov al,0                              ;#0044392C: 260 00                     vu 01 00  1 827      
    call #00460FE5 (:%pSubse1)            ;#0044392E: 350 B2D60100               v  00 00  1 828      
    mov eax,[ebp-88] (symtab[996])        ;#00443933: 213105 A8                  uv 01 20  1 829      
    cmp eax,h4                            ;#00443936: 075 00000040               uv 00 01  1 830 01   
    jl #00443944                          ;#0044393B: 174 07                     v  00 00  1 830      
    cmp byte[ebx+eax*4-1],#12             ;#0044393D: 200174203 FF 12            u  00 09  2 831      
    jne #00443973                         ;#00443942: 165 2F                     v  00 00  1 832      
;   516                 -- as req by Juergen Luethje
;   517                 sep = ","
    mov ecx,[#004024C0]                   ;#00443944: 213015 C0244000            uv 02 00  1 833      
    mov edx,[ebp-44] (sep)                ;#0044394A: 213125 D4                  vu 04 20  1 833      
    cmp ecx,h4                            ;#0044394D: 201371 00000040            uv 00 02  1 834      
    jl #0044395A                          ;#00443953: 174 05                     v  00 00  1 834      
    add dword[ebx+ecx*4-8],1              ;#00443955: 203104213 F8 01            u  00 0A  3 835      
    mov [ebp-44] (sep),ecx                ;#0044395A: 211115 D4                  vu 00 22  1 837      
    cmp edx,h4                            ;#0044395D: 201372 00000040            uv 00 04  1 838      
    jle #004439A0                         ;#00443963: 176 3B                     v  00 00  1 838      
    sub dword[ebx+edx*4-8],1              ;#00443965: 203154223 F8 01            u  00 0C  3 839      
    jne #004439A0                         ;#0044396A: 165 34                     v  00 00  1 841      
    call #004639A8 (:%pDealloc)           ;#0044396C: 350 37000200               v  00 00  1 842      
    jmp #004439A0                         ;#00443971: 353 2D                     v  00 00  1 843      
;   518             else
;   519                 sep = ", "
    mov edi,[#004024C4]                   ;#00443973: 213075 C4244000            uv 80 00  1 844      
    mov edx,[ebp-44] (sep)                ;#00443979: 213125 D4                  vu 04 20  1 844      
    cmp edi,h4                            ;#0044397C: 201377 00000040            uv 00 80  1 845      
    jl #00443989                          ;#00443982: 174 05                     v  00 00  1 845      
    add dword[ebx+edi*4-8],1              ;#00443984: 203104273 F8 01            u  00 88  3 846      
    mov [ebp-44] (sep),edi                ;#00443989: 211175 D4                  vu 00 A0  1 848      
    cmp edx,h4                            ;#0044398C: 201372 00000040            uv 00 04  1 849      
    jle #004439A0                         ;#00443992: 176 0C                     v  00 00  1 849      
    sub dword[ebx+edx*4-8],1              ;#00443994: 203154223 F8 01            u  00 0C  3 850      
    jne #004439A0                         ;#00443999: 165 05                     v  00 00  1 852      
    call #004639A8 (:%pDealloc)           ;#0044399B: 350 08000200               v  00 00  1 853      
;   520             end if
;   521         end for
    mov esi,[ebp-60] (i)                  ;#004439A0: 213165 C4                  uv 40 20  1 854      
    mov eax,[ebp-84] (symtab[995])        ;#004439A3: 213105 AC                  vu 01 20  1 854      
    add esi,1                             ;#004439A6: 203306 01                  uv 40 40  1 855      
    cmp esi,eax                           ;#004439A9: 073360                     uv 00 41  1 856 40   
    mov [ebp-60] (i),esi                  ;#004439AB: 211165 C4                  vu 00 60  1 856      
    jle #0044340E                         ;#004439AE: 017216 5AFAFFFF            v  00 00  1 857      
;   522         if prnt then sput(ppp_Br[2]) end if
    mov ecx,[ebp-12] (prnt)               ;#004439B4: 213115 F4                  uv 02 20  1 858      
    test ecx,ecx                          ;#004439B7: 205311                     uv 00 02  1 859 02   
    je #00443A29                          ;#004439B9: 164 6E                     v  00 00  1 859      
    mov edi,[#0040246C] (ppp_Br)          ;#004439BB: 213075 6C244000            uv 80 00  1 860      
    cmp edi,h4                            ;#004439C1: 201377 00000040            uv 00 80  1 861 80   
    jne #004439D3                         ;#004439C7: 165 0A                     v  00 00  1 861      
    mov esi,943                           ;#004439C9: 276 AF030000               uv 40 00  1 862      
    call #00462744 (:%pUnassigned)        ;#004439CE: 350 71ED0100               v  00 00  1 862      
    mov edi,2                             ;#004439D3: 277 02000000               uv 80 00  1 863      
    lea ecx,[ebp-88] (symtab[996])        ;#004439D8: 215115 A8                  vu 02 20  1 863      
    mov esi,[#0040246C] (ppp_Br)          ;#004439DB: 213065 6C244000            uv 40 00  1 864      
    mov edx,943                           ;#004439E1: 272 AF030000               vu 04 00  1 864      
    mov al,0                              ;#004439E6: 260 00                     uv 01 00  1 865      
    call #00460FE5 (:%pSubse1)            ;#004439E8: 350 F8D50100               v  00 00  1 865      
    mov ecx,6                             ;#004439ED: 271 06000000               uv 02 00  1 866      
    mov edx,954                           ;#004439F2: 272 BA030000               vu 04 00  1 866      
    call #00462C02 (:%opFrame) (sput)     ;#004439F7: 350 06F20100               v  00 00  1 867      
    mov edi,[ebp+20] (prevebp)            ;#004439FC: 213175 14                  uv 80 20  1 868      
    mov eax,[edi-88]                      ;#004439FF: 213107 A8                  uv 01 80  1 871 80 *80*
    mov [edi-88], dword h4                ;#00443A02: 307107 A8 00000040         vu 00 80  1 871      
    cmp eax,h4                            ;#00443A09: 075 00000040               uv 00 01  1 872      
    jne #00443A1A                         ;#00443A0E: 165 0A                     v  00 00  1 872      
    mov esi,996                           ;#00443A10: 276 E4030000               uv 40 00  1 873      
    call #00462744 (:%pUnassigned)        ;#00443A15: 350 2AED0100               v  00 00  1 873      
    mov [ebp] (txt),eax                   ;#00443A1A: 211105 00                  uv 00 21  1 874      
    mov [ebp+28] (retaddr),#00443A29      ;#00443A1D: 307105 1C 293A4400         vu 00 20  1 874      
    jmp #004424FD (code:sput)             ;#00443A24: 351 D4EAFFFF               v  00 00  1 875      
;   523         return len+1
    lea edi,[ebp-96] (symtab[1001])       ;#00443A29: 215175 A0                  uv 80 20  1 876      
    mov ecx,[ebp-20] (len)                ;#00443A2C: 213115 EC                  vu 02 20  1 876      
    mov eax,[#0040201C]                   ;#00443A2F: 241 1C204000               uv 01 00  1 877      
    call #0045F261 (:%opAdd)              ;#00443A34: 350 28B80100               v  00 00  1 877      
    mov eax,[ebp-96] (symtab[1001])       ;#00443A39: 213105 A0                  uv 01 20  1 878      
    mov [ebp-96] (symtab[1001]),ebx       ;#00443A3C: 211135 A0                  vu 00 28  1 878      
    jmp #00462C8F (:%opRetf)              ;#00443A3F: 351 4BF20100               v  00 00  1 879      
;   524     end if
;   525     if integer(cl)
    cmp esi,h4                            ;#00443A44: 201376 00000040            uv 00 40  1 880      
    jl #00443AAD                          ;#00443A4A: 174 61                     v  00 00  1 880      
;   526     or (cl>=-#FFFFFFFF and cl<=#FFFFFFFF and cl=floor(cl)) then
    mov edi,[#004024C8]                   ;#00443A4C: 213075 C8244000            uv 80 00  1 881      
    mov eax,esi                           ;#00443A52: 211360                     vu 01 40  1 881      
    mov esi,1007                          ;#00443A54: 276 EF030000               uv 40 00  1 882      
    mov edx,971                           ;#00443A59: 272 CB030000               vu 04 00  1 882      
    call #0045F8B0 (:%opJcc)              ;#00443A5E: 350 4DBE0100               v  00 00  1 883      
    jl #00443F76                          ;#00443A63: 017214 0D050000            v  00 00  1 884      
    mov edi,[#00402100] (INFINITE)        ;#00443A69: 213075 00214000            uv 80 00  1 885      
    mov eax,[ebp] (cl)                    ;#00443A6F: 213105 00                  vu 01 20  1 885      
    mov esi,83                            ;#00443A72: 276 53000000               uv 40 00  1 886      
    mov edx,971                           ;#00443A77: 272 CB030000               vu 04 00  1 886      
    call #0045F8B0 (:%opJcc)              ;#00443A7C: 350 2FBE0100               v  00 00  1 887      
    jg #00443F76                          ;#00443A81: 017217 EF040000            v  00 00  1 888      
    lea edi,[ebp-96] (symtab[1001])       ;#00443A87: 215175 A0                  uv 80 20  1 889      
    mov eax,[ebp] (cl)                    ;#00443A8A: 213105 00                  vu 01 20  1 889      
    call #0045F5DE (:%opFloor)            ;#00443A8D: 350 4CBB0100               v  00 00  1 890      
    mov edi,[ebp-96] (symtab[1001])       ;#00443A92: 213175 A0                  uv 80 20  1 891      
    mov eax,[ebp] (cl)                    ;#00443A95: 213105 00                  vu 01 20  1 891      
    mov esi,1001                          ;#00443A98: 276 E9030000               uv 40 00  1 892      
    mov edx,971                           ;#00443A9D: 272 CB030000               vu 04 00  1 892      
    call #0045F91F (:%opJccE)             ;#00443AA2: 350 78BE0100               v  00 00  1 893      
    jne #00443F76                         ;#00443AA7: 017205 C9040000            v  00 00  1 894      
;   527         if graphic(cl)
    mov ecx,1                             ;#00443AAD: 271 01000000               uv 02 00  1 895      
    mov edx,965                           ;#00443AB2: 272 C5030000               vu 04 00  1 895      
    call #00462C02 (:%opFrame) (graphic)  ;#00443AB7: 350 46F10100               v  00 00  1 896      
    mov edi,[ebp+20] (prevebp)            ;#00443ABC: 213175 14                  uv 80 20  1 897      
    mov eax,[edi]                         ;#00443ABF: 213007                     uv 01 80  1 900 80 *80*
    xor ebx,ebx                           ;#00443AC1: 061333                     vu 08 08  1 900      
    cmp eax,h4                            ;#00443AC3: 075 00000040               uv 00 01  1 901      
    jl #00443AD4                          ;#00443AC8: 174 0A                     v  00 00  1 901      
    add dword[ebx+eax*4-8],1              ;#00443ACA: 203104203 F8 01            u  00 09  3 902      
    cmp eax,971                           ;#00443ACF: 075 CB030000               vu 00 01  1 904      
    mov [ebp] (cl),eax                    ;#00443AD4: 211105 00                  uv 00 21  1 905      
    mov [ebp+28] (retaddr),#00443AE3      ;#00443AD7: 307105 1C E33A4400         vu 00 20  1 905      
    jmp #00444203 (code:graphic)          ;#00443ADE: 351 20070000               v  00 00  1 906      
    test eax,eax                          ;#00443AE3: 205300                     uv 00 01  1 907      
    je #00443DDE                          ;#00443AE5: 017204 F3020000            v  00 00  1 907      
;   528         and ppp_IntCh
    mov ecx,[#00402454] (ppp_IntCh)       ;#00443AEB: 213015 54244000            uv 02 00  1 908      
    test ecx,ecx                          ;#00443AF1: 205311                     uv 00 02  1 909 02   
    je #00443DDE                          ;#00443AF3: 017204 E5020000            v  00 00  1 909      
;   529         and (not find(cl,escBytes) or cl>=' ') then
    mov ecx,8                             ;#00443AF9: 271 08000000               uv 02 00  1 910      
    mov edx,110                           ;#00443AFE: 272 6E000000               vu 04 00  1 910      
    call #00462C02 (:%opFrame) (find)     ;#00443B03: 350 FAF00100               v  00 00  1 911      
    mov edi,[ebp+20] (prevebp)            ;#00443B08: 213175 14                  uv 80 20  1 912      
    mov eax,[edi]                         ;#00443B0B: 213007                     uv 01 80  1 915 80 *80*
    xor ebx,ebx                           ;#00443B0D: 061333                     vu 08 08  1 915      
    cmp eax,h4                            ;#00443B0F: 075 00000040               uv 00 01  1 916      
    jl #00443B20                          ;#00443B14: 174 0A                     v  00 00  1 916      
    add dword[ebx+eax*4-8],1              ;#00443B16: 203104203 F8 01            u  00 09  3 917      
    cmp eax,971                           ;#00443B1B: 075 CB030000               vu 00 01  1 919      
    mov [ebp] (needle),eax                ;#00443B20: 211105 00                  uv 00 21  1 920      
    mov esi,[#00402490] (escBytes)        ;#00443B23: 213065 90244000            vu 40 00  1 920      
    mov [ebp-4] (haystack),esi            ;#00443B29: 211165 FC                  uv 00 60  1 921      
    cmp esi,h4                            ;#00443B2C: 201376 00000040            vu 00 40  1 921      
    jl #00443B3E                          ;#00443B32: 174 0A                     v  00 00  1 922      
    add dword[ebx+esi*4-8],1              ;#00443B34: 203104263 F8 01            u  00 48  3 923      
    cmp eax,961                           ;#00443B39: 075 C1030000               vu 00 01  1 925      
    mov [ebp+28] (retaddr),#00443B4A      ;#00443B3E: 307105 1C 4A3B4400         uv 00 20  1 926      
    jmp #0045AADB (code:find)             ;#00443B45: 351 916F0100               v  00 00  1 926      
    test eax,eax                          ;#00443B4A: 205300                     uv 00 01  1 927      
    je #00443B6B                          ;#00443B4C: 164 1D                     v  00 00  1 927      
    mov edi,32                            ;#00443B4E: 277 20000000               uv 80 00  1 928      
    mov eax,[ebp] (cl)                    ;#00443B53: 213105 00                  vu 01 20  1 928      
    mov esi,72                            ;#00443B56: 276 48000000               uv 40 00  1 929      
    mov edx,971                           ;#00443B5B: 272 CB030000               vu 04 00  1 929      
    call #0045F8B0 (:%opJcc)              ;#00443B60: 350 4BBD0100               v  00 00  1 930      
    jl #00443DDE                          ;#00443B65: 017214 73020000            v  00 00  1 931      
;   530 --22/6/19:
;   531 --          if ppp_StrFmt=1
;   532 --          or ppp_StrFmt=-2
;   533 --          or ppp_StrFmt=-3 then
;   534 --              txt = sprintf(ppp_IntFmt,cl)
;   535 --30/1/18:
;   536 --          elsif find(cl,escBytes) then
;   537             if find(cl,escBytes) then
    mov ecx,8                             ;#00443B6B: 271 08000000               uv 02 00  1 932      
    mov edx,110                           ;#00443B70: 272 6E000000               vu 04 00  1 932      
    call #00462C02 (:%opFrame) (find)     ;#00443B75: 350 88F00100               v  00 00  1 933      
    mov edi,[ebp+20] (prevebp)            ;#00443B7A: 213175 14                  uv 80 20  1 934      
    mov eax,[edi]                         ;#00443B7D: 213007                     uv 01 80  1 937 80 *80*
    xor ebx,ebx                           ;#00443B7F: 061333                     vu 08 08  1 937      
    cmp eax,h4                            ;#00443B81: 075 00000040               uv 00 01  1 938      
    jl #00443B92                          ;#00443B86: 174 0A                     v  00 00  1 938      
    add dword[ebx+eax*4-8],1              ;#00443B88: 203104203 F8 01            u  00 09  3 939      
    cmp eax,971                           ;#00443B8D: 075 CB030000               vu 00 01  1 941      
    mov [ebp] (needle),eax                ;#00443B92: 211105 00                  uv 00 21  1 942      
    mov edi,[#00402490] (escBytes)        ;#00443B95: 213075 90244000            vu 80 00  1 942      
    mov [ebp-4] (haystack),edi            ;#00443B9B: 211175 FC                  uv 00 A0  1 943      
    cmp edi,h4                            ;#00443B9E: 201377 00000040            vu 00 80  1 943      
    jl #00443BB0                          ;#00443BA4: 174 0A                     v  00 00  1 944      
    add dword[ebx+edi*4-8],1              ;#00443BA6: 203104273 F8 01            u  00 88  3 945      
    cmp eax,961                           ;#00443BAB: 075 C1030000               vu 00 01  1 947      
    mov [ebp+28] (retaddr),#00443BBC      ;#00443BB0: 307105 1C BC3B4400         uv 00 20  1 948      
    jmp #0045AADB (code:find)             ;#00443BB7: 351 1F6F0100               v  00 00  1 948      
    test eax,eax                          ;#00443BBC: 205300                     uv 00 01  1 949      
    je #00443C6F                          ;#00443BBE: 017204 AB000000            v  00 00  1 949      
;   538                 -- (just `"'\`, aka "\"\'\\", not "\r\n\t\e\0":)
;   539 --              txt = sprintf("%d'\\%s'",{cl,cl})
;   540                 txt = sprintf(`%d'\%s'`,{cl,cl})
    lea eax,[ebp-108] (symtab[1009])      ;#00443BC4: 215105 94                  uv 01 20  1 950      
    mov edx,2                             ;#00443BC7: 272 02000000               vu 04 00  1 950      
    push #00443C03                        ;#00443BCC: 150 033C4400               uv 00 00  1 951      
    push eax                              ;#00443BD1: 120                        vu 00 01  1 951      
    mov ecx,[ebp] (cl)                    ;#00443BD2: 213115 00                  uv 02 20  1 952      
    cmp ecx,h4                            ;#00443BD5: 201371 00000040            uv 00 02  1 953 02   
    jl #00443BE7                          ;#00443BDB: 174 0A                     v  00 00  1 953      
    add dword[ebx+ecx*4-8],1              ;#00443BDD: 203104213 F8 01            u  00 0A  3 954      
    cmp eax,971                           ;#00443BE2: 075 CB030000               vu 00 01  1 956      
    push ecx                              ;#00443BE7: 121                        uv 00 02  1 957      
    cmp ecx,h4                            ;#00443BE8: 201371 00000040            vu 00 02  1 957      
    jl #00443BFA                          ;#00443BEE: 174 0A                     v  00 00  1 958      
    add dword[ebx+ecx*4-8],1              ;#00443BF0: 203104213 F8 01            u  00 0A  3 959      
    cmp eax,971                           ;#00443BF5: 075 CB030000               vu 00 01  1 961      
    push ecx                              ;#00443BFA: 121                        uv 00 02  1 962      
    mov edi,[ebp-108] (symtab[1009])      ;#00443BFB: 213175 94                  vu 80 20  1 962      
    jmp #00460143 (:%pMkSq)               ;#00443BFE: 351 40C50100               v  00 00  1 963      
    mov ecx,2                             ;#00443C03: 271 02000000               uv 02 00  1 964      
    mov edx,210                           ;#00443C08: 272 D2000000               vu 04 00  1 964      
    call #00462C02 (:%opFrame) (sprintf)  ;#00443C0D: 350 F0EF0100               v  00 00  1 965      
    mov esi,[#004024CC]                   ;#00443C12: 213065 CC244000            uv 40 00  1 966      
    mov [ebp] (fmt),esi                   ;#00443C18: 211165 00                  uv 00 60  1 967 40   
    add dword[ebx+esi*4-8],1              ;#00443C1B: 203104263 F8 01            u  00 48  3 969    *40*
    mov edi,[ebp+20] (prevebp)            ;#00443C20: 213175 14                  vu 80 20  1 971      
    mov eax,[edi-108]                     ;#00443C23: 213107 94                  uv 01 80  1 974    *80*
    mov [edi-108], dword h4               ;#00443C26: 307107 94 00000040         vu 00 80  1 974      
    cmp eax,h4                            ;#00443C2D: 075 00000040               uv 00 01  1 975      
    jne #00443C3E                         ;#00443C32: 165 0A                     v  00 00  1 975      
    mov esi,1009                          ;#00443C34: 276 F1030000               uv 40 00  1 976      
    call #00462744 (:%pUnassigned)        ;#00443C39: 350 06EB0100               v  00 00  1 976      
    mov [ebp-4] (args),eax                ;#00443C3E: 211105 FC                  uv 00 21  1 977      
    mov [ebp+28] (retaddr),#00443C4D      ;#00443C41: 307105 1C 4D3C4400         vu 00 20  1 977      
    jmp #00454E9A (code:sprintf)          ;#00443C48: 351 4D120100               v  00 00  1 978      
    push eax                              ;#00443C4D: 120                        uv 00 01  1 979      
    mov ecx,[ebp-48] (txt)                ;#00443C4E: 213115 D0                  vu 02 20  1 979      
    cmp ecx,h4                            ;#00443C51: 201371 00000040            uv 00 02  1 980      
    jle #00443C67                         ;#00443C57: 176 0E                     v  00 00  1 980      
    sub dword[ebx+ecx*4-8],1              ;#00443C59: 203154213 F8 01            u  00 0A  3 981      
    jne #00443C67                         ;#00443C5E: 165 07                     v  00 00  1 983      
    mov edx,ecx                           ;#00443C60: 213321                     uv 04 02  1 984      
    call #004639A8 (:%pDealloc)           ;#00443C62: 350 41FD0100               v  00 00  1 984      
    pop dword[ebp-48] (txt)               ;#00443C67: 217105 D0                  np 00 20  3 985      
    jmp #004441AE                         ;#00443C6A: 351 3F050000               v  00 00  1 988      
;   541             elsif ppp_IntCh=-1 and cl<='~' then
    mov edi,[#00402454] (ppp_IntCh)       ;#00443C6F: 213075 54244000            uv 80 00  1 989      
    cmp edi,-1                            ;#00443C75: 203377 FF                  uv 00 80  1 990 80   
    jne #00443D33                         ;#00443C78: 017205 B5000000            v  00 00  1 990      
    mov edi,126                           ;#00443C7E: 277 7E000000               uv 80 00  1 991      
    mov eax,[ebp] (cl)                    ;#00443C83: 213105 00                  vu 01 20  1 991      
    mov esi,760                           ;#00443C86: 276 F8020000               uv 40 00  1 992      
    mov edx,971                           ;#00443C8B: 272 CB030000               vu 04 00  1 992      
    call #0045F8B0 (:%opJcc)              ;#00443C90: 350 1BBC0100               v  00 00  1 993      
    jg #00443D33                          ;#00443C95: 017217 98000000            v  00 00  1 994      
;   542                 txt = sprintf(`'%s'`,{cl})
    lea eax,[ebp-108] (symtab[1009])      ;#00443C9B: 215105 94                  uv 01 20  1 995      
    mov edx,1                             ;#00443C9E: 272 01000000               vu 04 00  1 995      
    push #00443CC7                        ;#00443CA3: 150 C73C4400               uv 00 00  1 996      
    push eax                              ;#00443CA8: 120                        vu 00 01  1 996      
    mov esi,[ebp] (cl)                    ;#00443CA9: 213165 00                  uv 40 20  1 997      
    cmp esi,h4                            ;#00443CAC: 201376 00000040            uv 00 40  1 998 40   
    jl #00443CBE                          ;#00443CB2: 174 0A                     v  00 00  1 998      
    add dword[ebx+esi*4-8],1              ;#00443CB4: 203104263 F8 01            u  00 48  3 999      
    cmp eax,971                           ;#00443CB9: 075 CB030000               vu 00 01  1 1001      
    push esi                              ;#00443CBE: 126                        uv 00 40  1 1002      
    mov edi,[ebp-108] (symtab[1009])      ;#00443CBF: 213175 94                  vu 80 20  1 1002      
    jmp #00460143 (:%pMkSq)               ;#00443CC2: 351 7CC40100               v  00 00  1 1003      
    mov ecx,2                             ;#00443CC7: 271 02000000               uv 02 00  1 1004      
    mov edx,210                           ;#00443CCC: 272 D2000000               vu 04 00  1 1004      
    call #00462C02 (:%opFrame) (sprintf)  ;#00443CD1: 350 2CEF0100               v  00 00  1 1005      
    mov ecx,[#004024D0]                   ;#00443CD6: 213015 D0244000            uv 02 00  1 1006      
    mov [ebp] (fmt),ecx                   ;#00443CDC: 211115 00                  uv 00 22  1 1007 02   
    add dword[ebx+ecx*4-8],1              ;#00443CDF: 203104213 F8 01            u  00 0A  3 1009    *02*
    mov edi,[ebp+20] (prevebp)            ;#00443CE4: 213175 14                  vu 80 20  1 1011      
    mov eax,[edi-108]                     ;#00443CE7: 213107 94                  uv 01 80  1 1014    *80*
    mov [edi-108], dword h4               ;#00443CEA: 307107 94 00000040         vu 00 80  1 1014      
    cmp eax,h4                            ;#00443CF1: 075 00000040               uv 00 01  1 1015      
    jne #00443D02                         ;#00443CF6: 165 0A                     v  00 00  1 1015      
    mov esi,1009                          ;#00443CF8: 276 F1030000               uv 40 00  1 1016      
    call #00462744 (:%pUnassigned)        ;#00443CFD: 350 42EA0100               v  00 00  1 1016      
    mov [ebp-4] (args),eax                ;#00443D02: 211105 FC                  uv 00 21  1 1017      
    mov [ebp+28] (retaddr),#00443D11      ;#00443D05: 307105 1C 113D4400         vu 00 20  1 1017      
    jmp #00454E9A (code:sprintf)          ;#00443D0C: 351 89110100               v  00 00  1 1018      
    push eax                              ;#00443D11: 120                        uv 00 01  1 1019      
    mov esi,[ebp-48] (txt)                ;#00443D12: 213165 D0                  vu 40 20  1 1019      
    cmp esi,h4                            ;#00443D15: 201376 00000040            uv 00 40  1 1020      
    jle #00443D2B                         ;#00443D1B: 176 0E                     v  00 00  1 1020      
    sub dword[ebx+esi*4-8],1              ;#00443D1D: 203154263 F8 01            u  00 48  3 1021      
    jne #00443D2B                         ;#00443D22: 165 07                     v  00 00  1 1023      
    mov edx,esi                           ;#00443D24: 213326                     uv 04 40  1 1024      
    call #004639A8 (:%pDealloc)           ;#00443D26: 350 7DFC0100               v  00 00  1 1024      
    pop dword[ebp-48] (txt)               ;#00443D2B: 217105 D0                  np 00 20  3 1025      
    jmp #004441AE                         ;#00443D2E: 351 7B040000               v  00 00  1 1028      
;   543             else
;   544                 txt = sprintf("%d'%s'",{cl,cl})
    lea eax,[ebp-108] (symtab[1009])      ;#00443D33: 215105 94                  uv 01 20  1 1029      
    mov edx,2                             ;#00443D36: 272 02000000               vu 04 00  1 1029      
    push #00443D72                        ;#00443D3B: 150 723D4400               uv 00 00  1 1030      
    push eax                              ;#00443D40: 120                        vu 00 01  1 1030      
    mov edi,[ebp] (cl)                    ;#00443D41: 213175 00                  uv 80 20  1 1031      
    cmp edi,h4                            ;#00443D44: 201377 00000040            uv 00 80  1 1032 80   
    jl #00443D56                          ;#00443D4A: 174 0A                     v  00 00  1 1032      
    add dword[ebx+edi*4-8],1              ;#00443D4C: 203104273 F8 01            u  00 88  3 1033      
    cmp eax,971                           ;#00443D51: 075 CB030000               vu 00 01  1 1035      
    push edi                              ;#00443D56: 127                        uv 00 80  1 1036      
    cmp edi,h4                            ;#00443D57: 201377 00000040            vu 00 80  1 1036      
    jl #00443D69                          ;#00443D5D: 174 0A                     v  00 00  1 1037      
    add dword[ebx+edi*4-8],1              ;#00443D5F: 203104273 F8 01            u  00 88  3 1038      
    cmp eax,971                           ;#00443D64: 075 CB030000               vu 00 01  1 1040      
    push edi                              ;#00443D69: 127                        uv 00 80  1 1041      
    mov edi,[ebp-108] (symtab[1009])      ;#00443D6A: 213175 94                  vu 80 20  1 1041      
    jmp #00460143 (:%pMkSq)               ;#00443D6D: 351 D1C30100               v  00 00  1 1042      
    mov ecx,2                             ;#00443D72: 271 02000000               uv 02 00  1 1043      
    mov edx,210                           ;#00443D77: 272 D2000000               vu 04 00  1 1043      
    call #00462C02 (:%opFrame) (sprintf)  ;#00443D7C: 350 81EE0100               v  00 00  1 1044      
    mov ecx,[#004024D4]                   ;#00443D81: 213015 D4244000            uv 02 00  1 1045      
    mov [ebp] (fmt),ecx                   ;#00443D87: 211115 00                  uv 00 22  1 1046 02   
    add dword[ebx+ecx*4-8],1              ;#00443D8A: 203104213 F8 01            u  00 0A  3 1048    *02*
    mov edi,[ebp+20] (prevebp)            ;#00443D8F: 213175 14                  vu 80 20  1 1050      
    mov eax,[edi-108]                     ;#00443D92: 213107 94                  uv 01 80  1 1053    *80*
    mov [edi-108], dword h4               ;#00443D95: 307107 94 00000040         vu 00 80  1 1053      
    cmp eax,h4                            ;#00443D9C: 075 00000040               uv 00 01  1 1054      
    jne #00443DAD                         ;#00443DA1: 165 0A                     v  00 00  1 1054      
    mov esi,1009                          ;#00443DA3: 276 F1030000               uv 40 00  1 1055      
    call #00462744 (:%pUnassigned)        ;#00443DA8: 350 97E90100               v  00 00  1 1055      
    mov [ebp-4] (args),eax                ;#00443DAD: 211105 FC                  uv 00 21  1 1056      
    mov [ebp+28] (retaddr),#00443DBC      ;#00443DB0: 307105 1C BC3D4400         vu 00 20  1 1056      
    jmp #00454E9A (code:sprintf)          ;#00443DB7: 351 DE100100               v  00 00  1 1057      
    push eax                              ;#00443DBC: 120                        uv 00 01  1 1058      
    mov esi,[ebp-48] (txt)                ;#00443DBD: 213165 D0                  vu 40 20  1 1058      
    cmp esi,h4                            ;#00443DC0: 201376 00000040            uv 00 40  1 1059      
    jle #00443DD6                         ;#00443DC6: 176 0E                     v  00 00  1 1059      
    sub dword[ebx+esi*4-8],1              ;#00443DC8: 203154263 F8 01            u  00 48  3 1060      
    jne #00443DD6                         ;#00443DCD: 165 07                     v  00 00  1 1062      
    mov edx,esi                           ;#00443DCF: 213326                     uv 04 40  1 1063      
    call #004639A8 (:%pDealloc)           ;#00443DD1: 350 D2FB0100               v  00 00  1 1063      
    pop dword[ebp-48] (txt)               ;#00443DD6: 217105 D0                  np 00 20  3 1064      
;   545             end if
;   546 --3/12/18:
;   547 --      elsif cl<0 then
    jmp #004441AE                         ;#00443DD9: 351 D0030000               v  00 00  1 1067      
;   548         elsif cl<0 and ppp_IntFmt[1]!='%' then
    xor edi,edi                           ;#00443DDE: 061377                     uv 80 80  1 1068      
    mov eax,[ebp] (cl)                    ;#00443DE0: 213105 00                  vu 01 20  1 1068      
    mov esi,25                            ;#00443DE3: 276 19000000               uv 40 00  1 1069      
    mov edx,971                           ;#00443DE8: 272 CB030000               vu 04 00  1 1069      
    call #0045F8B0 (:%opJcc)              ;#00443DED: 350 BEBA0100               v  00 00  1 1070      
    jge #00443F03                         ;#00443DF2: 017215 0B010000            v  00 00  1 1071      
    mov edi,[#00402460] (ppp_IntFmt)      ;#00443DF8: 213075 60244000            uv 80 00  1 1072      
    cmp edi,h4                            ;#00443DFE: 201377 00000040            uv 00 80  1 1073 80   
    jne #00443E10                         ;#00443E04: 165 0A                     v  00 00  1 1073      
    mov esi,940                           ;#00443E06: 276 AC030000               uv 40 00  1 1074      
    call #00462744 (:%pUnassigned)        ;#00443E0B: 350 34E90100               v  00 00  1 1074      
    mov edi,1                             ;#00443E10: 277 01000000               uv 80 00  1 1075      
    lea ecx,[ebp-88] (symtab[996])        ;#00443E15: 215115 A8                  vu 02 20  1 1075      
    mov esi,[#00402460] (ppp_IntFmt)      ;#00443E18: 213065 60244000            uv 40 00  1 1076      
    mov edx,940                           ;#00443E1E: 272 AC030000               vu 04 00  1 1076      
    mov al,0                              ;#00443E23: 260 00                     uv 01 00  1 1077      
    call #00460FE5 (:%pSubse1)            ;#00443E25: 350 BBD10100               v  00 00  1 1077      
    mov ecx,[ebp-88] (symtab[996])        ;#00443E2A: 213115 A8                  uv 02 20  1 1078      
    cmp ecx,37                            ;#00443E2D: 203371 25                  uv 00 02  1 1079 02   
    je #00443F03                          ;#00443E30: 017204 CD000000            v  00 00  1 1079      
;   549             -- we may want eg -$14, not $-14
;   550             txt = '-'&sprintf(ppp_IntFmt,-cl)
    lea edi,[ebp-96] (symtab[1001])       ;#00443E36: 215175 A0                  uv 80 20  1 1080      
    mov ecx,[ebp] (cl)                    ;#00443E39: 213115 00                  vu 02 20  1 1080      
    call #0045F51F (:%opUminus)           ;#00443E3C: 350 DEB60100               v  00 00  1 1081      
    mov ecx,2                             ;#00443E41: 271 02000000               uv 02 00  1 1082      
    mov edx,210                           ;#00443E46: 272 D2000000               vu 04 00  1 1082      
    call #00462C02 (:%opFrame) (sprintf)  ;#00443E4B: 350 B2ED0100               v  00 00  1 1083      
    mov eax,[#00402460] (ppp_IntFmt)      ;#00443E50: 241 60244000               uv 01 00  1 1084      
    mov [ebp] (fmt),eax                   ;#00443E55: 211105 00                  uv 00 21  1 1085 01   
    cmp eax,h4                            ;#00443E58: 075 00000040               vu 00 01  1 1085      
    jl #00443E69                          ;#00443E5D: 174 0A                     v  00 00  1 1086      
    add dword[ebx+eax*4-8],1              ;#00443E5F: 203104203 F8 01            u  00 09  3 1087      
    cmp eax,940                           ;#00443E64: 075 AC030000               vu 00 01  1 1089      
    mov edi,[ebp+20] (prevebp)            ;#00443E69: 213175 14                  uv 80 20  1 1090      
    mov eax,[edi-96]                      ;#00443E6C: 213107 A0                  uv 01 80  1 1093 80 *80*
    mov [edi-96], dword h4                ;#00443E6F: 307107 A0 00000040         vu 00 80  1 1093      
    cmp eax,h4                            ;#00443E76: 075 00000040               uv 00 01  1 1094      
    jne #00443E87                         ;#00443E7B: 165 0A                     v  00 00  1 1094      
    mov esi,1001                          ;#00443E7D: 276 E9030000               uv 40 00  1 1095      
    call #00462744 (:%pUnassigned)        ;#00443E82: 350 BDE80100               v  00 00  1 1095      
    mov [ebp-4] (args),eax                ;#00443E87: 211105 FC                  uv 00 21  1 1096      
    mov [ebp+28] (retaddr),#00443E96      ;#00443E8A: 307105 1C 963E4400         vu 00 20  1 1096      
    jmp #00454E9A (code:sprintf)          ;#00443E91: 351 04100100               v  00 00  1 1097      
    push eax                              ;#00443E96: 120                        uv 00 01  1 1098      
    mov edi,[ebp-92] (symtab[1000])       ;#00443E97: 213175 A4                  vu 80 20  1 1098      
    cmp edi,h4                            ;#00443E9A: 201377 00000040            uv 00 80  1 1099      
    jle #00443EB0                         ;#00443EA0: 176 0E                     v  00 00  1 1099      
    sub dword[ebx+edi*4-8],1              ;#00443EA2: 203154273 F8 01            u  00 88  3 1100      
    jne #00443EB0                         ;#00443EA7: 165 07                     v  00 00  1 1102      
    mov edx,edi                           ;#00443EA9: 213327                     uv 04 80  1 1103      
    call #004639A8 (:%pDealloc)           ;#00443EAB: 350 F8FA0100               v  00 00  1 1103      
    pop dword[ebp-92] (symtab[1000])      ;#00443EB0: 217105 A4                  np 00 20  3 1104      
    mov esi,[ebp-92] (symtab[1000])       ;#00443EB3: 213165 A4                  uv 40 20  1 1107      
    mov ecx,[ebp-48] (txt)                ;#00443EB6: 213115 D0                  vu 02 20  1 1107      
    mov [ebp-92] (symtab[1000]),ebx       ;#00443EB9: 211135 A4                  uv 00 28  1 1108      
    cmp ecx,h4                            ;#00443EBC: 201371 00000040            vu 00 02  1 1108      
    mov [ebp-48] (txt),esi                ;#00443EC2: 211165 D0                  uv 00 60  1 1109      
    jle #00443ED5                         ;#00443EC5: 176 0E                     v  00 00  1 1109      
    sub dword[ebx+ecx*4-8],1              ;#00443EC7: 203154213 F8 01            u  00 0A  3 1110      
    jne #00443ED5                         ;#00443ECC: 165 07                     v  00 00  1 1112      
    mov edx,ecx                           ;#00443ECE: 213321                     uv 04 02  1 1113      
    call #004639A8 (:%pDealloc)           ;#00443ED0: 350 D3FA0100               v  00 00  1 1113      
    mov eax,[ebp-48] (txt)                ;#00443ED5: 213105 D0                  uv 01 20  1 1114      
    cmp eax,h4                            ;#00443ED8: 075 00000040               uv 00 01  1 1115 01   
    jne #00443EE9                         ;#00443EDD: 165 0A                     v  00 00  1 1115      
    mov esi,983                           ;#00443EDF: 276 D7030000               uv 40 00  1 1116      
    call #00462744 (:%pUnassigned)        ;#00443EE4: 350 5BE80100               v  00 00  1 1116      
    lea edx,[ebp-48] (txt)                ;#00443EE9: 215125 D0                  uv 04 20  1 1117      
    lea edi,[ebp-48] (txt)                ;#00443EEC: 215175 D0                  vu 80 20  1 1117      
    mov ecx,#00402210                     ;#00443EEF: 271 10224000               uv 02 00  1 1118      
    mov eax,1                             ;#00443EF4: 270 01000000               vu 01 00  1 1118      
    call #0045F9F7 (:%opApnd)             ;#00443EF9: 350 F9BA0100               v  00 00  1 1119      
    jmp #004441AE                         ;#00443EFE: 351 AB020000               v  00 00  1 1120      
;   551         else
;   552             txt = sprintf(ppp_IntFmt,cl)
    mov ecx,2                             ;#00443F03: 271 02000000               uv 02 00  1 1121      
    mov edx,210                           ;#00443F08: 272 D2000000               vu 04 00  1 1121      
    call #00462C02 (:%opFrame) (sprintf)  ;#00443F0D: 350 F0EC0100               v  00 00  1 1122      
    mov edi,[#00402460] (ppp_IntFmt)      ;#00443F12: 213075 60244000            uv 80 00  1 1123      
    mov [ebp] (fmt),edi                   ;#00443F18: 211175 00                  uv 00 A0  1 1124 80   
    cmp edi,h4                            ;#00443F1B: 201377 00000040            vu 00 80  1 1124      
    jl #00443F2D                          ;#00443F21: 174 0A                     v  00 00  1 1125      
    add dword[ebx+edi*4-8],1              ;#00443F23: 203104273 F8 01            u  00 88  3 1126      
    cmp eax,940                           ;#00443F28: 075 AC030000               vu 00 01  1 1128      
    mov edi,[ebp+20] (prevebp)            ;#00443F2D: 213175 14                  uv 80 20  1 1129      
    mov eax,[edi]                         ;#00443F30: 213007                     uv 01 80  1 1132 80 *80*
    xor ebx,ebx                           ;#00443F32: 061333                     vu 08 08  1 1132      
    cmp eax,h4                            ;#00443F34: 075 00000040               uv 00 01  1 1133      
    jl #00443F45                          ;#00443F39: 174 0A                     v  00 00  1 1133      
    add dword[ebx+eax*4-8],1              ;#00443F3B: 203104203 F8 01            u  00 09  3 1134      
    cmp eax,971                           ;#00443F40: 075 CB030000               vu 00 01  1 1136      
    mov [ebp-4] (args),eax                ;#00443F45: 211105 FC                  uv 00 21  1 1137      
    mov [ebp+28] (retaddr),#00443F54      ;#00443F48: 307105 1C 543F4400         vu 00 20  1 1137      
    jmp #00454E9A (code:sprintf)          ;#00443F4F: 351 460F0100               v  00 00  1 1138      
    push eax                              ;#00443F54: 120                        uv 00 01  1 1139      
    mov ecx,[ebp-48] (txt)                ;#00443F55: 213115 D0                  vu 02 20  1 1139      
    cmp ecx,h4                            ;#00443F58: 201371 00000040            uv 00 02  1 1140      
    jle #00443F6E                         ;#00443F5E: 176 0E                     v  00 00  1 1140      
    sub dword[ebx+ecx*4-8],1              ;#00443F60: 203154213 F8 01            u  00 0A  3 1141      
    jne #00443F6E                         ;#00443F65: 165 07                     v  00 00  1 1143      
    mov edx,ecx                           ;#00443F67: 213321                     uv 04 02  1 1144      
    call #004639A8 (:%pDealloc)           ;#00443F69: 350 3AFA0100               v  00 00  1 1144      
    pop dword[ebp-48] (txt)               ;#00443F6E: 217105 D0                  np 00 20  3 1145      
;   553         end if
    jmp #004441AE                         ;#00443F71: 351 38020000               v  00 00  1 1148      
;   554     else
;   555         k = find(cl,constants)
    mov ecx,8                             ;#00443F76: 271 08000000               uv 02 00  1 1149      
    mov edx,110                           ;#00443F7B: 272 6E000000               vu 04 00  1 1149      
    call #00462C02 (:%opFrame) (find)     ;#00443F80: 350 7DEC0100               v  00 00  1 1150      
    mov edi,[ebp+20] (prevebp)            ;#00443F85: 213175 14                  uv 80 20  1 1151      
    mov eax,[edi]                         ;#00443F88: 213007                     uv 01 80  1 1154 80 *80*
    xor ebx,ebx                           ;#00443F8A: 061333                     vu 08 08  1 1154      
    cmp eax,h4                            ;#00443F8C: 075 00000040               uv 00 01  1 1155      
    jl #00443F9D                          ;#00443F91: 174 0A                     v  00 00  1 1155      
    add dword[ebx+eax*4-8],1              ;#00443F93: 203104203 F8 01            u  00 09  3 1156      
    cmp eax,971                           ;#00443F98: 075 CB030000               vu 00 01  1 1158      
    mov [ebp] (needle),eax                ;#00443F9D: 211105 00                  uv 00 21  1 1159      
    mov esi,[#00402498] (constants)       ;#00443FA0: 213065 98244000            vu 40 00  1 1159      
    mov [ebp-4] (haystack),esi            ;#00443FA6: 211165 FC                  uv 00 60  1 1160      
    cmp esi,h4                            ;#00443FA9: 201376 00000040            vu 00 40  1 1160      
    jl #00443FBB                          ;#00443FAF: 174 0A                     v  00 00  1 1161      
    add dword[ebx+esi*4-8],1              ;#00443FB1: 203104263 F8 01            u  00 48  3 1162      
    cmp eax,963                           ;#00443FB6: 075 C3030000               vu 00 01  1 1164      
    mov [ebp+28] (retaddr),#00443FC7      ;#00443FBB: 307105 1C C73F4400         uv 00 20  1 1165      
    jmp #0045AADB (code:find)             ;#00443FC2: 351 146B0100               v  00 00  1 1165      
    mov [ebp-28] (k),eax                  ;#00443FC7: 211105 E4                  uv 00 21  1 1166      
;   556         if k then
    test eax,eax                          ;#00443FCA: 205300                     vu 00 01  1 1166      
    je #0044401E                          ;#00443FCC: 164 50                     v  00 00  1 1167      
;   557             k += 1
    add eax,1                             ;#00443FCE: 203300 01                  uv 01 01  1 1168      
    mov edx,eax                           ;#00443FD1: 213320                     uv 04 01  1 1169 01   
    mov [ebp-28] (k),eax                  ;#00443FD3: 211105 E4                  vu 00 21  1 1169      
    shl edx,1                             ;#00443FD6: 321342                     u  04 04  1 1170      
    jno #00443FE2                         ;#00443FD8: 161 08                     v  00 00  1 1170      
    lea edi,[ebp-28] (k)                  ;#00443FDA: 215175 E4                  uv 80 20  1 1171      
    call #00462764 (:%e01tcfAddiii)       ;#00443FDD: 350 82E70100               v  00 00  1 1171      
;   558             txt = constants[k]
    mov edi,eax                           ;#00443FE2: 211307                     uv 80 01  1 1172      
    lea ecx,[ebp-48] (txt)                ;#00443FE4: 215115 D0                  vu 02 20  1 1172      
    mov esi,[#00402498] (constants)       ;#00443FE7: 213065 98244000            uv 40 00  1 1173      
    mov edx,963                           ;#00443FED: 272 C3030000               vu 04 00  1 1173      
    mov al,0                              ;#00443FF2: 260 00                     uv 01 00  1 1174      
    call #00460FE5 (:%pSubse1)            ;#00443FF4: 350 ECCF0100               v  00 00  1 1174      
    mov edi,[ebp-48] (txt)                ;#00443FF9: 213175 D0                  uv 80 20  1 1175      
    cmp edi,h4                            ;#00443FFC: 201377 00000040            uv 00 80  1 1176 80   
    jl #0044400F                          ;#00444002: 174 0B                     v  00 00  1 1176      
    test byte[ebx+edi*4-1],#80            ;#00444004: 366104273 FF 80            u  00 88  2 1177      
    jne #004441AE                         ;#00444009: 017205 9F010000            v  00 00  1 1178      
    mov ecx,983                           ;#0044400F: 271 D7030000               uv 02 00  1 1179      
    call #00462D8D (:%opTcFail)           ;#00444014: 350 74ED0100               v  00 00  1 1179      
;   559 --25/11/18:
;   560 --      elsif cl<0 then
;   561 --      elsif cl<0 and ppp_FltFmt[2]='.' then
    jmp #004441AE                         ;#00444019: 351 90010000               v  00 00  1 1180      
;   562         elsif cl<0 and ppp_FltFmt[1]!='%' then
    xor edi,edi                           ;#0044401E: 061377                     uv 80 80  1 1181      
    mov eax,[ebp] (cl)                    ;#00444020: 213105 00                  vu 01 20  1 1181      
    mov esi,25                            ;#00444023: 276 19000000               uv 40 00  1 1182      
    mov edx,971                           ;#00444028: 272 CB030000               vu 04 00  1 1182      
    call #0045F8B0 (:%opJcc)              ;#0044402D: 350 7EB80100               v  00 00  1 1183      
    jge #00444140                         ;#00444032: 017215 08010000            v  00 00  1 1184      
    mov ecx,[#00402464] (ppp_FltFmt)      ;#00444038: 213015 64244000            uv 02 00  1 1185      
    cmp ecx,h4                            ;#0044403E: 201371 00000040            uv 00 02  1 1186 02   
    jne #00444050                         ;#00444044: 165 0A                     v  00 00  1 1186      
    mov esi,941                           ;#00444046: 276 AD030000               uv 40 00  1 1187      
    call #00462744 (:%pUnassigned)        ;#0044404B: 350 F4E60100               v  00 00  1 1187      
    mov edi,1                             ;#00444050: 277 01000000               uv 80 00  1 1188      
    lea ecx,[ebp-88] (symtab[996])        ;#00444055: 215115 A8                  vu 02 20  1 1188      
    mov esi,[#00402464] (ppp_FltFmt)      ;#00444058: 213065 64244000            uv 40 00  1 1189      
    mov edx,941                           ;#0044405E: 272 AD030000               vu 04 00  1 1189      
    mov al,0                              ;#00444063: 260 00                     uv 01 00  1 1190      
    call #00460FE5 (:%pSubse1)            ;#00444065: 350 7BCF0100               v  00 00  1 1190      
    mov edi,[ebp-88] (symtab[996])        ;#0044406A: 213175 A8                  uv 80 20  1 1191      
    cmp edi,37                            ;#0044406D: 203377 25                  uv 00 80  1 1192 80   
    je #00444140                          ;#00444070: 017204 CA000000            v  00 00  1 1192      
;   563             -- we may want eg -$14.99, not $-14.99
;   564             txt = '-'&sprintf(ppp_FltFmt,-cl)
    lea edi,[ebp-96] (symtab[1001])       ;#00444076: 215175 A0                  uv 80 20  1 1193      
    mov ecx,[ebp] (cl)                    ;#00444079: 213115 00                  vu 02 20  1 1193      
    call #0045F51F (:%opUminus)           ;#0044407C: 350 9EB40100               v  00 00  1 1194      
    mov ecx,2                             ;#00444081: 271 02000000               uv 02 00  1 1195      
    mov edx,210                           ;#00444086: 272 D2000000               vu 04 00  1 1195      
    call #00462C02 (:%opFrame) (sprintf)  ;#0044408B: 350 72EB0100               v  00 00  1 1196      
    mov eax,[#00402464] (ppp_FltFmt)      ;#00444090: 241 64244000               uv 01 00  1 1197      
    mov [ebp] (fmt),eax                   ;#00444095: 211105 00                  uv 00 21  1 1198 01   
    cmp eax,h4                            ;#00444098: 075 00000040               vu 00 01  1 1198      
    jl #004440A9                          ;#0044409D: 174 0A                     v  00 00  1 1199      
    add dword[ebx+eax*4-8],1              ;#0044409F: 203104203 F8 01            u  00 09  3 1200      
    cmp eax,941                           ;#004440A4: 075 AD030000               vu 00 01  1 1202      
    mov edi,[ebp+20] (prevebp)            ;#004440A9: 213175 14                  uv 80 20  1 1203      
    mov eax,[edi-96]                      ;#004440AC: 213107 A0                  uv 01 80  1 1206 80 *80*
    mov [edi-96], dword h4                ;#004440AF: 307107 A0 00000040         vu 00 80  1 1206      
    cmp eax,h4                            ;#004440B6: 075 00000040               uv 00 01  1 1207      
    jne #004440C7                         ;#004440BB: 165 0A                     v  00 00  1 1207      
    mov esi,1001                          ;#004440BD: 276 E9030000               uv 40 00  1 1208      
    call #00462744 (:%pUnassigned)        ;#004440C2: 350 7DE60100               v  00 00  1 1208      
    mov [ebp-4] (args),eax                ;#004440C7: 211105 FC                  uv 00 21  1 1209      
    mov [ebp+28] (retaddr),#004440D6      ;#004440CA: 307105 1C D6404400         vu 00 20  1 1209      
    jmp #00454E9A (code:sprintf)          ;#004440D1: 351 C40D0100               v  00 00  1 1210      
    push eax                              ;#004440D6: 120                        uv 00 01  1 1211      
    mov esi,[ebp-92] (symtab[1000])       ;#004440D7: 213165 A4                  vu 40 20  1 1211      
    cmp esi,h4                            ;#004440DA: 201376 00000040            uv 00 40  1 1212      
    jle #004440F0                         ;#004440E0: 176 0E                     v  00 00  1 1212      
    sub dword[ebx+esi*4-8],1              ;#004440E2: 203154263 F8 01            u  00 48  3 1213      
    jne #004440F0                         ;#004440E7: 165 07                     v  00 00  1 1215      
    mov edx,esi                           ;#004440E9: 213326                     uv 04 40  1 1216      
    call #004639A8 (:%pDealloc)           ;#004440EB: 350 B8F80100               v  00 00  1 1216      
    pop dword[ebp-92] (symtab[1000])      ;#004440F0: 217105 A4                  np 00 20  3 1217      
    mov edi,[ebp-92] (symtab[1000])       ;#004440F3: 213175 A4                  uv 80 20  1 1220      
    mov ecx,[ebp-48] (txt)                ;#004440F6: 213115 D0                  vu 02 20  1 1220      
    mov [ebp-92] (symtab[1000]),ebx       ;#004440F9: 211135 A4                  uv 00 28  1 1221      
    cmp ecx,h4                            ;#004440FC: 201371 00000040            vu 00 02  1 1221      
    mov [ebp-48] (txt),edi                ;#00444102: 211175 D0                  uv 00 A0  1 1222      
    jle #00444115                         ;#00444105: 176 0E                     v  00 00  1 1222      
    sub dword[ebx+ecx*4-8],1              ;#00444107: 203154213 F8 01            u  00 0A  3 1223      
    jne #00444115                         ;#0044410C: 165 07                     v  00 00  1 1225      
    mov edx,ecx                           ;#0044410E: 213321                     uv 04 02  1 1226      
    call #004639A8 (:%pDealloc)           ;#00444110: 350 93F80100               v  00 00  1 1226      
    mov eax,[ebp-48] (txt)                ;#00444115: 213105 D0                  uv 01 20  1 1227      
    cmp eax,h4                            ;#00444118: 075 00000040               uv 00 01  1 1228 01   
    jne #00444129                         ;#0044411D: 165 0A                     v  00 00  1 1228      
    mov esi,983                           ;#0044411F: 276 D7030000               uv 40 00  1 1229      
    call #00462744 (:%pUnassigned)        ;#00444124: 350 1BE60100               v  00 00  1 1229      
    lea edx,[ebp-48] (txt)                ;#00444129: 215125 D0                  uv 04 20  1 1230      
    lea edi,[ebp-48] (txt)                ;#0044412C: 215175 D0                  vu 80 20  1 1230      
    mov ecx,#00402210                     ;#0044412F: 271 10224000               uv 02 00  1 1231      
    mov eax,1                             ;#00444134: 270 01000000               vu 01 00  1 1231      
    call #0045F9F7 (:%opApnd)             ;#00444139: 350 B9B80100               v  00 00  1 1232      
    jmp #004441AE                         ;#0044413E: 353 6E                     v  00 00  1 1233      
;   565         else
;   566             txt = sprintf(ppp_FltFmt,cl)
    mov ecx,2                             ;#00444140: 271 02000000               uv 02 00  1 1234      
    mov edx,210                           ;#00444145: 272 D2000000               vu 04 00  1 1234      
    call #00462C02 (:%opFrame) (sprintf)  ;#0044414A: 350 B3EA0100               v  00 00  1 1235      
    mov esi,[#00402464] (ppp_FltFmt)      ;#0044414F: 213065 64244000            uv 40 00  1 1236      
    mov [ebp] (fmt),esi                   ;#00444155: 211165 00                  uv 00 60  1 1237 40   
    cmp esi,h4                            ;#00444158: 201376 00000040            vu 00 40  1 1237      
    jl #0044416A                          ;#0044415E: 174 0A                     v  00 00  1 1238      
    add dword[ebx+esi*4-8],1              ;#00444160: 203104263 F8 01            u  00 48  3 1239      
    cmp eax,941                           ;#00444165: 075 AD030000               vu 00 01  1 1241      
    mov edi,[ebp+20] (prevebp)            ;#0044416A: 213175 14                  uv 80 20  1 1242      
    mov eax,[edi]                         ;#0044416D: 213007                     uv 01 80  1 1245 80 *80*
    xor ebx,ebx                           ;#0044416F: 061333                     vu 08 08  1 1245      
    cmp eax,h4                            ;#00444171: 075 00000040               uv 00 01  1 1246      
    jl #00444182                          ;#00444176: 174 0A                     v  00 00  1 1246      
    add dword[ebx+eax*4-8],1              ;#00444178: 203104203 F8 01            u  00 09  3 1247      
    cmp eax,971                           ;#0044417D: 075 CB030000               vu 00 01  1 1249      
    mov [ebp-4] (args),eax                ;#00444182: 211105 FC                  uv 00 21  1 1250      
    mov [ebp+28] (retaddr),#00444191      ;#00444185: 307105 1C 91414400         vu 00 20  1 1250      
    jmp #00454E9A (code:sprintf)          ;#0044418C: 351 090D0100               v  00 00  1 1251      
    push eax                              ;#00444191: 120                        uv 00 01  1 1252      
    mov ecx,[ebp-48] (txt)                ;#00444192: 213115 D0                  vu 02 20  1 1252      
    cmp ecx,h4                            ;#00444195: 201371 00000040            uv 00 02  1 1253      
    jle #004441AB                         ;#0044419B: 176 0E                     v  00 00  1 1253      
    sub dword[ebx+ecx*4-8],1              ;#0044419D: 203154213 F8 01            u  00 0A  3 1254      
    jne #004441AB                         ;#004441A2: 165 07                     v  00 00  1 1256      
    mov edx,ecx                           ;#004441A4: 213321                     uv 04 02  1 1257      
    call #004639A8 (:%pDealloc)           ;#004441A6: 350 FDF70100               v  00 00  1 1257      
    pop dword[ebp-48] (txt)               ;#004441AB: 217105 D0                  np 00 20  3 1258      
;   567         end if
;   568     end if
;   569     if prnt then sput(txt) end if
    mov edi,[ebp-12] (prnt)               ;#004441AE: 213175 F4                  uv 80 20  1 1261      
    test edi,edi                          ;#004441B1: 205377                     uv 00 80  1 1262 80   
    je #004441EC                          ;#004441B3: 164 37                     v  00 00  1 1262      
    mov ecx,6                             ;#004441B5: 271 06000000               uv 02 00  1 1263      
    mov edx,954                           ;#004441BA: 272 BA030000               vu 04 00  1 1263      
    call #00462C02 (:%opFrame) (sput)     ;#004441BF: 350 3EEA0100               v  00 00  1 1264      
    mov edi,[ebp+20] (prevebp)            ;#004441C4: 213175 14                  uv 80 20  1 1265      
    mov eax,[edi-48]                      ;#004441C7: 213107 D0                  uv 01 80  1 1268 80 *80*
    xor ebx,ebx                           ;#004441CA: 061333                     vu 08 08  1 1268      
    cmp eax,h4                            ;#004441CC: 075 00000040               uv 00 01  1 1269      
    jl #004441DD                          ;#004441D1: 174 0A                     v  00 00  1 1269      
    add dword[ebx+eax*4-8],1              ;#004441D3: 203104203 F8 01            u  00 09  3 1270      
    cmp eax,983                           ;#004441D8: 075 D7030000               vu 00 01  1 1272      
    mov [ebp] (txt),eax                   ;#004441DD: 211105 00                  uv 00 21  1 1273      
    mov [ebp+28] (retaddr),#004441EC      ;#004441E0: 307105 1C EC414400         vu 00 20  1 1273      
    jmp #004424FD (code:sput)             ;#004441E7: 351 11E3FFFF               v  00 00  1 1274      
;   570     return length(txt)
    lea edi,[ebp-104] (symtab[1003])      ;#004441EC: 215175 98                  uv 80 20  1 1275      
    mov esi,[ebp-48] (txt)                ;#004441EF: 213165 D0                  vu 40 20  1 1275      
    mov edx,983                           ;#004441F2: 272 D7030000               uv 04 00  1 1276      
    call #0045EFEC (:%opLen)              ;#004441F7: 350 F0AD0100               v  00 00  1 1276      
    mov eax,ecx                           ;#004441FC: 211310                     uv 01 02  1 1277      
    jmp #00462C8F (:%opRetf)              ;#004441FE: 351 8CEA0100               v  00 00  1 1277      
;   571 end function
;   572 with warning
;   573 
;   574 procedure setAscii()
;   575     ascii = repeat(0,255)
    mov ecx,12                            ;#004448F3: 271 0C000000               uv 02 00  1   1      
    mov edx,240                           ;#004448F8: 272 F0000000               vu 04 00  1   1      
    call #00462C02 (:%opFrame) (repeat)   ;#004448FD: 350 00E30100               v  00 00  1   2      
    mov [ebp] (x),ebx                     ;#00444902: 211135 00                  uv 00 28  1   3      
    mov [ebp-4] (n), dword 255            ;#00444905: 307105 FC FF000000         vu 00 20  1   3      
    mov [ebp+28] (retaddr),#00444918      ;#0044490C: 307105 1C 18494400         uv 00 20  1   4      
    jmp #00451195 (code:repeat)           ;#00444913: 351 7DC80000               v  00 00  1   4      
    push eax                              ;#00444918: 120                        uv 00 01  1   5      
    mov esi,[#00402474] (ascii)           ;#00444919: 213065 74244000            vu 40 00  1   5      
    cmp esi,h4                            ;#0044491F: 201376 00000040            uv 00 40  1   6      
    jle #00444935                         ;#00444925: 176 0E                     v  00 00  1   6      
    sub dword[ebx+esi*4-8],1              ;#00444927: 203154263 F8 01            u  00 48  3   7      
    jne #00444935                         ;#0044492C: 165 07                     v  00 00  1   9      
    mov edx,esi                           ;#0044492E: 213326                     uv 04 40  1  10      
    call #004639A8 (:%pDealloc)           ;#00444930: 350 73F00100               v  00 00  1  10      
    pop [#00402474] (ascii)               ;#00444935: 217005 74244000            np 00 00  3  11      
;   576     if length(ppp_Ascii)!=2 then crash("length(ascii) must be 2",nFrames:=4) end if
    mov edi,ebp                           ;#0044493B: 213375                     uv 80 20  1  14      
    mov esi,[#0040245C] (ppp_Ascii)       ;#0044493D: 213065 5C244000            vu 40 00  1  14      
    mov edx,939                           ;#00444943: 272 AB030000               uv 04 00  1  15      
    call #0045EFEC (:%opLen)              ;#00444948: 350 9FA60100               v  00 00  1  15      
    cmp ecx,2                             ;#0044494D: 203371 02                  uv 00 02  1  16      
    je #00444982                          ;#00444950: 164 30                     v  00 00  1  16      
    mov ecx,4                             ;#00444952: 271 04000000               uv 02 00  1  17      
    mov edx,397                           ;#00444957: 272 8D010000               vu 04 00  1  17      
    call #00462C02 (:%opFrame) (crash)    ;#0044495C: 350 A1E20100               v  00 00  1  18      
    mov edi,[#004024D8]                   ;#00444961: 213075 D8244000            uv 80 00  1  19      
    mov [ebp] (msg),edi                   ;#00444967: 211175 00                  uv 00 A0  1  20 80   
    add dword[ebx+edi*4-8],1              ;#0044496A: 203104273 F8 01            u  00 88  3  22    *80*
    mov [ebp-8] (nFrames), dword 4        ;#0044496F: 307105 F8 04000000         vu 00 20  1  24      
    mov [ebp+28] (retaddr),#00444982      ;#00444976: 307105 1C 82494400         uv 00 20  1  25      
    jmp #0044AB92 (code:crash)            ;#0044497D: 351 10620000               v  00 00  1  25      
;   577     object {minasc,maxasc} = ppp_Ascii
    mov edi,2                             ;#00444982: 277 02000000               uv 80 00  1  26      
    lea ecx,[ebp-8] (maxasc)              ;#00444987: 215115 F8                  vu 02 20  1  26      
    mov esi,[#0040245C] (ppp_Ascii)       ;#0044498A: 213065 5C244000            uv 40 00  1  27      
    mov edx,939                           ;#00444990: 272 AB030000               vu 04 00  1  27      
    mov al,0                              ;#00444995: 260 00                     uv 01 00  1  28      
    call #00460FE5 (:%pSubse1)            ;#00444997: 350 49C60100               v  00 00  1  28      
    mov edi,1                             ;#0044499C: 277 01000000               uv 80 00  1  29      
    lea ecx,[ebp-4] (minasc)              ;#004449A1: 215115 FC                  vu 02 20  1  29      
    mov esi,[#0040245C] (ppp_Ascii)       ;#004449A4: 213065 5C244000            uv 40 00  1  30      
    mov edx,939                           ;#004449AA: 272 AB030000               vu 04 00  1  30      
    mov al,0                              ;#004449AF: 260 00                     uv 01 00  1  31      
    call #00460FE5 (:%pSubse1)            ;#004449B1: 350 2FC60100               v  00 00  1  31      
;   578     if not sequence(minasc) then minasc = {minasc} end if
    mov eax,[ebp-4] (minasc)              ;#004449B6: 213105 FC                  uv 01 20  1  32      
    cmp eax,h4                            ;#004449B9: 075 00000040               uv 00 01  1  33 01   
    jl #004449C7                          ;#004449BE: 174 07                     v  00 00  1  33      
    test byte[ebx+eax*4-1],#80            ;#004449C0: 366104203 FF 80            u  00 09  2  34      
    jne #004449F2                         ;#004449C5: 165 2B                     v  00 00  1  35      
    lea eax,[ebp-4] (minasc)              ;#004449C7: 215105 FC                  uv 01 20  1  36      
    mov edx,1                             ;#004449CA: 272 01000000               vu 04 00  1  36      
    push #004449F2                        ;#004449CF: 150 F2494400               uv 00 00  1  37      
    push eax                              ;#004449D4: 120                        vu 00 01  1  37      
    mov ecx,[ebp-4] (minasc)              ;#004449D5: 213115 FC                  uv 02 20  1  38      
    cmp ecx,h4                            ;#004449D8: 201371 00000040            uv 00 02  1  39 02   
    jl #004449EA                          ;#004449DE: 174 0A                     v  00 00  1  39      
    add dword[ebx+ecx*4-8],1              ;#004449E0: 203104213 F8 01            u  00 0A  3  40      
    cmp eax,1015                          ;#004449E5: 075 F7030000               vu 00 01  1  42      
    push ecx                              ;#004449EA: 121                        uv 00 02  1  43      
    mov edi,ecx                           ;#004449EB: 211317                     vu 80 02  1  43      
    jmp #00460143 (:%pMkSq)               ;#004449ED: 351 51B70100               v  00 00  1  44      
;   579     if not sequence(maxasc) then maxasc = {maxasc} end if
    mov edi,[ebp-8] (maxasc)              ;#004449F2: 213175 F8                  uv 80 20  1  45      
    cmp edi,h4                            ;#004449F5: 201377 00000040            uv 00 80  1  46 80   
    jl #00444A04                          ;#004449FB: 174 07                     v  00 00  1  46      
    test byte[ebx+edi*4-1],#80            ;#004449FD: 366104273 FF 80            u  00 88  2  47      
    jne #00444A2A                         ;#00444A02: 165 26                     v  00 00  1  48      
    lea eax,[ebp-8] (maxasc)              ;#00444A04: 215105 F8                  uv 01 20  1  49      
    mov edx,1                             ;#00444A07: 272 01000000               vu 04 00  1  49      
    push #00444A2A                        ;#00444A0C: 150 2A4A4400               uv 00 00  1  50      
    push eax                              ;#00444A11: 120                        vu 00 01  1  50      
    cmp edi,h4                            ;#00444A12: 201377 00000040            uv 00 80  1  51      
    jl #00444A24                          ;#00444A18: 174 0A                     v  00 00  1  51      
    add dword[ebx+edi*4-8],1              ;#00444A1A: 203104273 F8 01            u  00 88  3  52      
    cmp eax,1016                          ;#00444A1F: 075 F8030000               vu 00 01  1  54      
    push edi                              ;#00444A24: 127                        uv 00 80  1  55      
    jmp #00460143 (:%pMkSq)               ;#00444A25: 351 19B70100               v  00 00  1  55      
;   580     if length(minasc)!=length(maxasc) then crash("length(minasc)!=length(maxasc)",nFrames:=4) end if
    mov edi,ebp                           ;#00444A2A: 213375                     uv 80 20  1  56      
    mov esi,[ebp-4] (minasc)              ;#00444A2C: 213165 FC                  vu 40 20  1  56      
    mov edx,1015                          ;#00444A2F: 272 F7030000               uv 04 00  1  57      
    call #0045EFEC (:%opLen)              ;#00444A34: 350 B3A50100               v  00 00  1  57      
    lea edi,[ebp-12] (symtab[1017])       ;#00444A39: 215175 F4                  uv 80 20  1  58      
    mov esi,[ebp-8] (maxasc)              ;#00444A3C: 213165 F8                  vu 40 20  1  58      
    mov edx,1016                          ;#00444A3F: 272 F8030000               uv 04 00  1  59      
    call #0045EFEC (:%opLen)              ;#00444A44: 350 A3A50100               v  00 00  1  59      
    mov eax,[ebp] (symtab[1013])          ;#00444A49: 213105 00                  uv 01 20  1  60      
    cmp eax,ecx                           ;#00444A4C: 071310                     uv 00 03  1  61 01   
    je #00444A80                          ;#00444A4E: 164 30                     v  00 00  1  61      
    mov ecx,4                             ;#00444A50: 271 04000000               uv 02 00  1  62      
    mov edx,397                           ;#00444A55: 272 8D010000               vu 04 00  1  62      
    call #00462C02 (:%opFrame) (crash)    ;#00444A5A: 350 A3E10100               v  00 00  1  63      
    mov edi,[#004024DC]                   ;#00444A5F: 213075 DC244000            uv 80 00  1  64      
    mov [ebp] (msg),edi                   ;#00444A65: 211175 00                  uv 00 A0  1  65 80   
    add dword[ebx+edi*4-8],1              ;#00444A68: 203104273 F8 01            u  00 88  3  67    *80*
    mov [ebp-8] (nFrames), dword 4        ;#00444A6D: 307105 F8 04000000         vu 00 20  1  69      
    mov [ebp+28] (retaddr),#00444A80      ;#00444A74: 307105 1C 804A4400         uv 00 20  1  70      
    jmp #0044AB92 (code:crash)            ;#00444A7B: 351 12610000               v  00 00  1  70      
;   581     if find(0,minasc) or find(0,maxasc) then crash("find(0,minasc) or find(0,maxasc)",nFrames:=4) end if
    mov ecx,8                             ;#00444A80: 271 08000000               uv 02 00  1  71      
    mov edx,110                           ;#00444A85: 272 6E000000               vu 04 00  1  71      
    call #00462C02 (:%opFrame) (find)     ;#00444A8A: 350 73E10100               v  00 00  1  72      
    mov [ebp] (needle),ebx                ;#00444A8F: 211135 00                  uv 00 28  1  73      
    mov edi,[ebp+20] (prevebp)            ;#00444A92: 213175 14                  vu 80 20  1  73      
    mov eax,[edi-4]                       ;#00444A95: 213107 FC                  uv 01 80  1  76    *80*
    xor ebx,ebx                           ;#00444A98: 061333                     vu 08 08  1  76      
    cmp eax,h4                            ;#00444A9A: 075 00000040               uv 00 01  1  77      
    jl #00444AAB                          ;#00444A9F: 174 0A                     v  00 00  1  77      
    add dword[ebx+eax*4-8],1              ;#00444AA1: 203104203 F8 01            u  00 09  3  78      
    cmp eax,1015                          ;#00444AA6: 075 F7030000               vu 00 01  1  80      
    mov [ebp-4] (haystack),eax            ;#00444AAB: 211105 FC                  uv 00 21  1  81      
    mov [ebp+28] (retaddr),#00444ABA      ;#00444AAE: 307105 1C BA4A4400         vu 00 20  1  81      
    jmp #0045AADB (code:find)             ;#00444AB5: 351 21600100               v  00 00  1  82      
    test eax,eax                          ;#00444ABA: 205300                     uv 00 01  1  83      
    jne #00444AFC                         ;#00444ABC: 165 3E                     v  00 00  1  83      
    mov ecx,8                             ;#00444ABE: 271 08000000               uv 02 00  1  84      
    mov edx,110                           ;#00444AC3: 272 6E000000               vu 04 00  1  84      
    call #00462C02 (:%opFrame) (find)     ;#00444AC8: 350 35E10100               v  00 00  1  85      
    mov [ebp] (needle),ebx                ;#00444ACD: 211135 00                  uv 00 28  1  86      
    mov edi,[ebp+20] (prevebp)            ;#00444AD0: 213175 14                  vu 80 20  1  86      
    mov eax,[edi-8]                       ;#00444AD3: 213107 F8                  uv 01 80  1  89    *80*
    xor ebx,ebx                           ;#00444AD6: 061333                     vu 08 08  1  89      
    cmp eax,h4                            ;#00444AD8: 075 00000040               uv 00 01  1  90      
    jl #00444AE9                          ;#00444ADD: 174 0A                     v  00 00  1  90      
    add dword[ebx+eax*4-8],1              ;#00444ADF: 203104203 F8 01            u  00 09  3  91      
    cmp eax,1016                          ;#00444AE4: 075 F8030000               vu 00 01  1  93      
    mov [ebp-4] (haystack),eax            ;#00444AE9: 211105 FC                  uv 00 21  1  94      
    mov [ebp+28] (retaddr),#00444AF8      ;#00444AEC: 307105 1C F84A4400         vu 00 20  1  94      
    jmp #0045AADB (code:find)             ;#00444AF3: 351 E35F0100               v  00 00  1  95      
    test eax,eax                          ;#00444AF8: 205300                     uv 00 01  1  96      
    je #00444B2C                          ;#00444AFA: 164 30                     v  00 00  1  96      
    mov ecx,4                             ;#00444AFC: 271 04000000               uv 02 00  1  97      
    mov edx,397                           ;#00444B01: 272 8D010000               vu 04 00  1  97      
    call #00462C02 (:%opFrame) (crash)    ;#00444B06: 350 F7E00100               v  00 00  1  98      
    mov esi,[#004024E0]                   ;#00444B0B: 213065 E0244000            uv 40 00  1  99      
    mov [ebp] (msg),esi                   ;#00444B11: 211165 00                  uv 00 60  1 100 40   
    add dword[ebx+esi*4-8],1              ;#00444B14: 203104263 F8 01            u  00 48  3 102    *40*
    mov [ebp-8] (nFrames), dword 4        ;#00444B19: 307105 F8 04000000         vu 00 20  1 104      
    mov [ebp+28] (retaddr),#00444B2C      ;#00444B20: 307105 1C 2C4B4400         uv 00 20  1 105      
    jmp #0044AB92 (code:crash)            ;#00444B27: 351 66600000               v  00 00  1 105      
;   582     for i=1 to length(minasc) do
    mov edi,ebp                           ;#00444B2C: 213375                     uv 80 20  1 106      
    mov esi,[ebp-4] (minasc)              ;#00444B2E: 213165 FC                  vu 40 20  1 106      
    mov edx,1015                          ;#00444B31: 272 F7030000               uv 04 00  1 107      
    call #0045EFEC (:%opLen)              ;#00444B36: 350 B1A40100               v  00 00  1 107      
    mov [ebp-16] (i), dword 1             ;#00444B3B: 307105 F0 01000000         uv 00 20  1 108      
    cmp ecx,1                             ;#00444B42: 201371 01000000            vu 00 02  1 108      
    jl #00444BA4                          ;#00444B48: 174 5A                     v  00 00  1 109      
;   583         ascii[minasc[i]..maxasc[i]] = 1
    mov edi,[ebp-16] (i)                  ;#00444B4A: 213175 F0                  uv 80 20  1 110      
    lea ecx,[ebp-20] (symtab[1021])       ;#00444B4D: 215115 EC                  vu 02 20  1 110      
    mov esi,[ebp-4] (minasc)              ;#00444B50: 213165 FC                  uv 40 20  1 111      
    mov edx,1015                          ;#00444B53: 272 F7030000               vu 04 00  1 111      
    mov al,0                              ;#00444B58: 260 00                     uv 01 00  1 112      
    call #00460FE5 (:%pSubse1)            ;#00444B5A: 350 86C40100               v  00 00  1 112      
    mov edi,[ebp-16] (i)                  ;#00444B5F: 213175 F0                  uv 80 20  1 113      
    lea ecx,[ebp-24] (symtab[1022])       ;#00444B62: 215115 E8                  vu 02 20  1 113      
    mov esi,[ebp-8] (maxasc)              ;#00444B65: 213165 F8                  uv 40 20  1 114      
    mov edx,1016                          ;#00444B68: 272 F8030000               vu 04 00  1 114      
    mov al,0                              ;#00444B6D: 260 00                     uv 01 00  1 115      
    call #00460FE5 (:%pSubse1)            ;#00444B6F: 350 71C40100               v  00 00  1 115      
    mov ecx,1                             ;#00444B74: 271 01000000               uv 02 00  1 116      
    push #00444B94                        ;#00444B79: 150 944B4400               vu 00 00  1 116      
    push dword[#0040201C]                 ;#00444B7E: 377065 1C204000            np 00 00  2 117      
    push dword[ebp-24] (symtab[1022])     ;#00444B84: 377165 E8                  np 00 20  2 119      
    push dword[ebp-20] (symtab[1021])     ;#00444B87: 377165 EC                  np 00 20  2 121      
    mov eax,#00402474                     ;#00444B8A: 270 74244000               uv 01 00  1 123      
    jmp #0046019E (:%pReps)               ;#00444B8F: 351 0AB60100               v  00 00  1 123      
;   584     end for
    mov eax,[ebp-16] (i)                  ;#00444B94: 213105 F0                  uv 01 20  1 124      
    mov ecx,[ebp] (symtab[1013])          ;#00444B97: 213115 00                  vu 02 20  1 124      
    add eax,1                             ;#00444B9A: 203300 01                  uv 01 01  1 125      
    cmp eax,ecx                           ;#00444B9D: 073301                     uv 00 03  1 126 01   
    mov [ebp-16] (i),eax                  ;#00444B9F: 211105 F0                  vu 00 21  1 126      
    jle #00444B4A                         ;#00444BA2: 176 A6                     v  00 00  1 127      
;   585     for i=1 to length(escBytes) do
    lea edi,[ebp-12] (symtab[1017])       ;#00444BA4: 215175 F4                  uv 80 20  1 128      
    mov esi,[#00402490] (escBytes)        ;#00444BA7: 213065 90244000            vu 40 00  1 128      
    mov edx,961                           ;#00444BAD: 272 C1030000               uv 04 00  1 129      
    call #0045EFEC (:%opLen)              ;#00444BB2: 350 35A40100               v  00 00  1 129      
    mov [ebp-16] (i), dword 1             ;#00444BB7: 307105 F0 01000000         uv 00 20  1 130      
;   586         ascii[escBytes[i]] = 1
    mov edi,[#00402490] (escBytes)        ;#00444BBE: 213075 90244000            vu 80 00  1 130      
    cmp edi,h4                            ;#00444BC4: 201377 00000040            uv 00 80  1 131      
    jne #00444BD6                         ;#00444BCA: 165 0A                     v  00 00  1 131      
    mov esi,961                           ;#00444BCC: 276 C1030000               uv 40 00  1 132      
    call #00462744 (:%pUnassigned)        ;#00444BD1: 350 6EDB0100               v  00 00  1 132      
    mov edi,[ebp-16] (i)                  ;#00444BD6: 213175 F0                  uv 80 20  1 133      
    lea ecx,[ebp-20] (symtab[1021])       ;#00444BD9: 215115 EC                  vu 02 20  1 133      
    mov esi,[#00402490] (escBytes)        ;#00444BDC: 213065 90244000            uv 40 00  1 134      
    mov edx,961                           ;#00444BE2: 272 C1030000               vu 04 00  1 134      
    mov al,0                              ;#00444BE7: 260 00                     uv 01 00  1 135      
    call #00460FE5 (:%pSubse1)            ;#00444BE9: 350 F7C30100               v  00 00  1 135      
    mov edi,[ebp-20] (symtab[1021])       ;#00444BEE: 213175 EC                  uv 80 20  1 136      
    mov ecx,1                             ;#00444BF1: 271 01000000               vu 02 00  1 136      
    mov esi,[#00402474] (ascii)           ;#00444BF6: 213065 74244000            uv 40 00  1 137      
    mov eax,#00402474                     ;#00444BFC: 270 74244000               vu 01 00  1 137      
    call #004607F3 (:%pRepe1)             ;#00444C01: 350 EDBB0100               v  00 00  1 138      
;   587     end for
    mov eax,[ebp-16] (i)                  ;#00444C06: 213105 F0                  uv 01 20  1 139      
    mov edx,8                             ;#00444C09: 272 08000000               vu 04 00  1 139      
    add eax,1                             ;#00444C0E: 203300 01                  uv 01 01  1 140      
    cmp eax,edx                           ;#00444C11: 073302                     uv 00 05  1 141 01   
    mov [ebp-16] (i),eax                  ;#00444C13: 211105 F0                  vu 00 21  1 141      
    jle #00444BBE                         ;#00444C16: 176 A6                     v  00 00  1 142      
    jmp #00462C8F (:%opRetf)              ;#00444C18: 351 72E00100               v  00 00  1 143      
;   588 end procedure
;   589 
;   590 procedure pp_Init()
;   591     ppp_Nest = 0
    mov edx,[#00402448] (ppp_Nest)        ;#00444C1D: 213025 48244000            uv 04 00  1   1      
    cmp edx,h4                            ;#00444C23: 201372 00000040            uv 00 04  1   2 04   
    mov [#00402448] (ppp_Nest),ebx        ;#00444C29: 211035 48244000            vu 00 08  1   2      
    jle #00444C3D                         ;#00444C2F: 176 0C                     v  00 00  1   3      
    sub dword[ebx+edx*4-8],1              ;#00444C31: 203154223 F8 01            u  00 0C  3   4      
    jne #00444C3D                         ;#00444C36: 165 05                     v  00 00  1   6      
    call #004639A8 (:%pDealloc)           ;#00444C38: 350 6BED0100               v  00 00  1   7      
;   592 --simplified 24/11/16:
;   593 --  ppp_Ascii = {#20,#FF}
;   594 --DEV/SUG
;   595 --  if platform()=LINUX then
;   596 --      ppp_Ascii = {{#20,#A0},{#7E,#FF}}
;   597 --      ppp_Ascii = {#20,#7F}
;   598         ppp_Ascii = {#20,#7D}
    mov eax,#0040245C                     ;#00444C3D: 270 5C244000               uv 01 00  1   8      
    mov edx,2                             ;#00444C42: 272 02000000               vu 04 00  1   8      
    push #00444C5C                        ;#00444C47: 150 5C4C4400               uv 00 00  1   9      
    push eax                              ;#00444C4C: 120                        vu 00 01  1   9      
    push 125                              ;#00444C4D: 152 7D                     uv 00 00  1  10      
    push 32                               ;#00444C4F: 152 20                     vu 00 00  1  10      
    mov edi,[#0040245C] (ppp_Ascii)       ;#00444C51: 213075 5C244000            uv 80 00  1  11      
    jmp #00460143 (:%pMkSq)               ;#00444C57: 351 E7B40100               v  00 00  1  11      
;   599 --  end if
;   600     ppp_IntFmt = "%d"
    mov ecx,[#004024E4]                   ;#00444C5C: 213015 E4244000            uv 02 00  1  12      
    mov edx,[#00402460] (ppp_IntFmt)      ;#00444C62: 213025 60244000            vu 04 00  1  12      
    cmp ecx,h4                            ;#00444C68: 201371 00000040            uv 00 02  1  13      
    jl #00444C75                          ;#00444C6E: 174 05                     v  00 00  1  13      
    add dword[ebx+ecx*4-8],1              ;#00444C70: 203104213 F8 01            u  00 0A  3  14      
    mov [#00402460] (ppp_IntFmt),ecx      ;#00444C75: 211015 60244000            vu 00 02  1  16      
    cmp edx,h4                            ;#00444C7B: 201372 00000040            uv 00 04  1  17      
    jle #00444C8F                         ;#00444C81: 176 0C                     v  00 00  1  17      
    sub dword[ebx+edx*4-8],1              ;#00444C83: 203154223 F8 01            u  00 0C  3  18      
    jne #00444C8F                         ;#00444C88: 165 05                     v  00 00  1  20      
    call #004639A8 (:%pDealloc)           ;#00444C8A: 350 19ED0100               v  00 00  1  21      
;   601     ppp_FltFmt = "%.10g"
    mov esi,[#004024E8]                   ;#00444C8F: 213065 E8244000            uv 40 00  1  22      
    mov edx,[#00402464] (ppp_FltFmt)      ;#00444C95: 213025 64244000            vu 04 00  1  22      
    cmp esi,h4                            ;#00444C9B: 201376 00000040            uv 00 40  1  23      
    jl #00444CA8                          ;#00444CA1: 174 05                     v  00 00  1  23      
    add dword[ebx+esi*4-8],1              ;#00444CA3: 203104263 F8 01            u  00 48  3  24      
    mov [#00402464] (ppp_FltFmt),esi      ;#00444CA8: 211065 64244000            vu 00 40  1  26      
    cmp edx,h4                            ;#00444CAE: 201372 00000040            uv 00 04  1  27      
    jle #00444CC2                         ;#00444CB4: 176 0C                     v  00 00  1  27      
    sub dword[ebx+edx*4-8],1              ;#00444CB6: 203154223 F8 01            u  00 0C  3  28      
    jne #00444CC2                         ;#00444CBB: 165 05                     v  00 00  1  30      
    call #004639A8 (:%pDealloc)           ;#00444CBD: 350 E6EC0100               v  00 00  1  31      
;   602     ppp_Date = ""
    mov eax,[#004022A4]                   ;#00444CC2: 241 A4224000               uv 01 00  1  32      
    mov edx,[#00402468] (ppp_Date)        ;#00444CC7: 213025 68244000            vu 04 00  1  32      
    cmp eax,h4                            ;#00444CCD: 075 00000040               uv 00 01  1  33      
    jl #00444CD9                          ;#00444CD2: 174 05                     v  00 00  1  33      
    add dword[ebx+eax*4-8],1              ;#00444CD4: 203104203 F8 01            u  00 09  3  34      
    mov [#00402468] (ppp_Date),eax        ;#00444CD9: 243 68244000               vu 00 01  1  36      
    cmp edx,h4                            ;#00444CDE: 201372 00000040            uv 00 04  1  37      
    jle #00444CF2                         ;#00444CE4: 176 0C                     v  00 00  1  37      
    sub dword[ebx+edx*4-8],1              ;#00444CE6: 203154223 F8 01            u  00 0C  3  38      
    jne #00444CF2                         ;#00444CEB: 165 05                     v  00 00  1  40      
    call #004639A8 (:%pDealloc)           ;#00444CED: 350 B6EC0100               v  00 00  1  41      
;   603     ppp_Br = "{}"
    mov edi,[#004024EC]                   ;#00444CF2: 213075 EC244000            uv 80 00  1  42      
    mov edx,[#0040246C] (ppp_Br)          ;#00444CF8: 213025 6C244000            vu 04 00  1  42      
    cmp edi,h4                            ;#00444CFE: 201377 00000040            uv 00 80  1  43      
    jl #00444D0B                          ;#00444D04: 174 05                     v  00 00  1  43      
    add dword[ebx+edi*4-8],1              ;#00444D06: 203104273 F8 01            u  00 88  3  44      
    mov [#0040246C] (ppp_Br),edi          ;#00444D0B: 211075 6C244000            vu 00 80  1  46      
    cmp edx,h4                            ;#00444D11: 201372 00000040            uv 00 04  1  47      
    jle #00444D25                         ;#00444D17: 176 0C                     v  00 00  1  47      
    sub dword[ebx+edx*4-8],1              ;#00444D19: 203154223 F8 01            u  00 0C  3  48      
    jne #00444D25                         ;#00444D1E: 165 05                     v  00 00  1  50      
    call #004639A8 (:%pDealloc)           ;#00444D20: 350 83EC0100               v  00 00  1  51      
;   604 --  escBytes = "\t\n\r\\\"\'\e\E"
;   605 --  escBytes = {'\t','\n','\r','\\','\"','\'','\e','\E'}
;   606     escBytes = {9,'\n','\r','\\','\"','\'','\e','\E'}
    mov eax,#00402490                     ;#00444D25: 270 90244000               uv 01 00  1  52      
    mov edx,8                             ;#00444D2A: 272 08000000               vu 04 00  1  52      
    push #00444D50                        ;#00444D2F: 150 504D4400               uv 00 00  1  53      
    push eax                              ;#00444D34: 120                        vu 00 01  1  53      
    push 27                               ;#00444D35: 152 1B                     uv 00 00  1  54      
    push 27                               ;#00444D37: 152 1B                     vu 00 00  1  54      
    push 39                               ;#00444D39: 152 27                     uv 00 00  1  55      
    push 34                               ;#00444D3B: 152 22                     vu 00 00  1  55      
    push 92                               ;#00444D3D: 152 5C                     uv 00 00  1  56      
    push 13                               ;#00444D3F: 152 0D                     vu 00 00  1  56      
    push 10                               ;#00444D41: 152 0A                     uv 00 00  1  57      
    push 9                                ;#00444D43: 152 09                     vu 00 00  1  57      
    mov edi,[#00402490] (escBytes)        ;#00444D45: 213075 90244000            uv 80 00  1  58      
    jmp #00460143 (:%pMkSq)               ;#00444D4B: 351 F3B30100               v  00 00  1  58      
;   607     escChars = "tnr\\\"\'eE"
    mov ecx,[#004024F0]                   ;#00444D50: 213015 F0244000            uv 02 00  1  59      
    mov edx,[#00402494] (escChars)        ;#00444D56: 213025 94244000            vu 04 00  1  59      
    cmp ecx,h4                            ;#00444D5C: 201371 00000040            uv 00 02  1  60      
    jl #00444D69                          ;#00444D62: 174 05                     v  00 00  1  60      
    add dword[ebx+ecx*4-8],1              ;#00444D64: 203104213 F8 01            u  00 0A  3  61      
    mov [#00402494] (escChars),ecx        ;#00444D69: 211015 94244000            vu 00 02  1  63      
    cmp edx,h4                            ;#00444D6F: 201372 00000040            uv 00 04  1  64      
    jle #00444D83                         ;#00444D75: 176 0C                     v  00 00  1  64      
    sub dword[ebx+edx*4-8],1              ;#00444D77: 203154223 F8 01            u  00 0C  3  65      
    jne #00444D83                         ;#00444D7C: 165 05                     v  00 00  1  67      
    call #004639A8 (:%pDealloc)           ;#00444D7E: 350 25EC0100               v  00 00  1  68      
;   608 --DEV you should have to explicitly load this sort of thing with a ppOpt() call...
;   609     constants = {-1.295837195871e307,"NOVALUE"}
    mov eax,#00402498                     ;#00444D83: 270 98244000               uv 01 00  1  69      
    mov edx,2                             ;#00444D88: 272 02000000               vu 04 00  1  69      
    push #00444DCE                        ;#00444D8D: 150 CE4D4400               uv 00 00  1  70      
    push eax                              ;#00444D92: 120                        vu 00 01  1  70      
    mov esi,[#004024FC]                   ;#00444D93: 213065 FC244000            uv 40 00  1  71      
    cmp esi,h4                            ;#00444D99: 201376 00000040            uv 00 40  1  72 40   
    jl #00444DAB                          ;#00444D9F: 174 0A                     v  00 00  1  72      
    add dword[ebx+esi*4-8],1              ;#00444DA1: 203104263 F8 01            u  00 48  3  73      
    cmp eax,1030                          ;#00444DA6: 075 06040000               vu 00 01  1  75      
    push esi                              ;#00444DAB: 126                        uv 00 40  1  76      
    mov eax,[#004024F8]                   ;#00444DAC: 241 F8244000               vu 01 00  1  76      
    cmp eax,h4                            ;#00444DB1: 075 00000040               uv 00 01  1  77      
    jl #00444DC2                          ;#00444DB6: 174 0A                     v  00 00  1  77      
    add dword[ebx+eax*4-8],1              ;#00444DB8: 203104203 F8 01            u  00 09  3  78      
    cmp eax,1029                          ;#00444DBD: 075 05040000               vu 00 01  1  80      
    push eax                              ;#00444DC2: 120                        uv 00 01  1  81      
    mov edi,[#00402498] (constants)       ;#00444DC3: 213075 98244000            vu 80 00  1  81      
    jmp #00460143 (:%pMkSq)               ;#00444DC9: 351 75B30100               v  00 00  1  82      
;   610     setAscii()
    mov ecx,7                             ;#00444DCE: 271 07000000               uv 02 00  1  83      
    mov edx,1012                          ;#00444DD3: 272 F4030000               vu 04 00  1  83      
    call :%opFrame (setAscii)             ;#00444DD8: 350 25DE0100               v  00 00  1  84      
    mov [ebp+28] (retaddr),#00444DE9      ;#00444DDD: 307105 1C E94D4400         uv 00 20  1  85      
    jmp #004448F3 (code:setAscii)         ;#00444DE4: 351 0AFBFFFF               v  00 00  1  85      
;   611     ppp_Init = 1
    mov [#00402458] (ppp_Init), dword 1   ;#00444DE9: 307005 58244000 01000000   uv 00 00  1  86      
    jmp #00462C8F (:%opRetf)              ;#00444DF3: 351 97DE0100               v  00 00  1  86      
;   612 end procedure
;   613 
;   614 function setOpt(sequence options)
    mov eax,[ebp] (options)               ;#00444243: 213105 00                  uv 01 20  1   1      
    cmp eax,h4                            ;#00444246: 075 00000040               uv 00 01  1   2 01   
    jl #00444254                          ;#0044424B: 174 07                     v  00 00  1   2      
    test byte[ebx+eax*4-1],#80            ;#0044424D: 366104203 FF 80            u  00 09  2   3      
    jne #0044425E                         ;#00444252: 165 0A                     v  00 00  1   4      
    mov ecx,1033                          ;#00444254: 271 09040000               uv 02 00  1   5      
    call #00462D8D (:%opTcFail)           ;#00444259: 350 2FEB0100               v  00 00  1   5      
;   615     integer f, ip1, flvl = 4
    mov [ebp-12] (flvl), dword 4          ;#0044425E: 307105 F4 04000000         uv 00 20  1   6      
;   616     object tmp
;   617     if not ppp_Init then pp_Init() end if
    mov ecx,[#00402458] (ppp_Init)        ;#00444265: 213015 58244000            vu 02 00  1   6      
    test ecx,ecx                          ;#0044426B: 205311                     uv 00 02  1   7      
    jne #00444287                         ;#0044426D: 165 18                     v  00 00  1   7      
    xor ecx,ecx                           ;#0044426F: 061311                     uv 02 02  1   8      
    mov edx,1023                          ;#00444271: 272 FF030000               vu 04 00  1   8      
    call #00462C02 (:%opFrame) (pp_Init)  ;#00444276: 350 87E90100               v  00 00  1   9      
    mov [ebp+28] (retaddr),#00444287      ;#0044427B: 307105 1C 87424400         uv 00 20  1  10      
    jmp #00444C1D (code:pp_Init)          ;#00444282: 351 96090000               v  00 00  1  10      
;   618     if and_bits(1,length(options)) then crash("length(options) not even",nFrames:=flvl) end if
    mov edi,[ebp] (options)               ;#00444287: 213175 00                  uv 80 20  1  11      
    mov esi,[ebx+edi*4-12]                ;#0044428A: 213164273 F4               uv 40 88  1  14 80 *80*
    mov [ebp-20] (symtab[1038]),esi       ;#0044428E: 211165 EC                  uv 00 60  1  15 40   
    mov eax,1                             ;#00444291: 270 01000000               vu 01 00  1  15      
    and eax,esi                           ;#00444296: 041360                     uv 01 41  1  16      
    je #004442CC                          ;#00444298: 164 32                     v  00 00  1  16      
    mov ecx,4                             ;#0044429A: 271 04000000               uv 02 00  1  17      
    mov edx,397                           ;#0044429F: 272 8D010000               vu 04 00  1  17      
    call #00462C02 (:%opFrame) (crash)    ;#004442A4: 350 59E90100               v  00 00  1  18      
    mov ecx,[#00402500]                   ;#004442A9: 213015 00254000            uv 02 00  1  19      
    mov [ebp] (msg),ecx                   ;#004442AF: 211115 00                  uv 00 22  1  20 02   
    add dword[ebx+ecx*4-8],1              ;#004442B2: 203104213 F8 01            u  00 0A  3  22    *02*
    mov edi,[ebp+20] (prevebp)            ;#004442B7: 213175 14                  vu 80 20  1  24      
    mov eax,[edi-12]                      ;#004442BA: 213107 F4                  uv 01 80  1  27    *80*
    mov [ebp-8] (nFrames),eax             ;#004442BD: 211105 F8                  uv 00 21  1  28 01   
    mov [ebp+28] (retaddr),#004442CC      ;#004442C0: 307105 1C CC424400         vu 00 20  1  28      
    jmp #0044AB92 (code:crash)            ;#004442C7: 351 C6680000               v  00 00  1  29      
;   619     options = deep_copy(options)
    mov ecx,8                             ;#004442CC: 271 08000000               uv 02 00  1  30      
    mov edx,266                           ;#004442D1: 272 0A010000               vu 04 00  1  30      
    call :%opFrame (deep_copy)            ;#004442D6: 350 27E90100               v  00 00  1  31      
    mov edi,[ebp+20] (prevebp)            ;#004442DB: 213175 14                  uv 80 20  1  32      
    mov eax,[edi]                         ;#004442DE: 213007                     uv 01 80  1  35 80 *80*
    mov [edi], dword h4                   ;#004442E0: 307007 00000040            vu 00 80  1  35      
    cmp eax,h4                            ;#004442E6: 075 00000040               uv 00 01  1  36      
    jne #004442F7                         ;#004442EB: 165 0A                     v  00 00  1  36      
    mov esi,1033                          ;#004442ED: 276 09040000               uv 40 00  1  37      
    call #00462744 (:%pUnassigned)        ;#004442F2: 350 4DE40100               v  00 00  1  37      
    mov [ebp] (o),eax                     ;#004442F7: 211105 00                  uv 00 21  1  38      
    mov [ebp+28] (retaddr),#00444306      ;#004442FA: 307105 1C 06434400         vu 00 20  1  38      
    jmp #0044FA59 (code:deep_copy)        ;#00444301: 351 53B70000               v  00 00  1  39      
    push eax                              ;#00444306: 120                        uv 00 01  1  40      
    mov edi,[ebp] (options)               ;#00444307: 213175 00                  vu 80 20  1  40      
    cmp edi,h4                            ;#0044430A: 201377 00000040            uv 00 80  1  41      
    jle #00444320                         ;#00444310: 176 0E                     v  00 00  1  41      
    sub dword[ebx+edi*4-8],1              ;#00444312: 203154273 F8 01            u  00 88  3  42      
    jne #00444320                         ;#00444317: 165 07                     v  00 00  1  44      
    mov edx,edi                           ;#00444319: 213327                     uv 04 80  1  45      
    call #004639A8 (:%pDealloc)           ;#0044431B: 350 88F60100               v  00 00  1  45      
    pop dword[ebp] (options)              ;#00444320: 217105 00                  np 00 20  3  46      
    mov esi,[ebp] (options)               ;#00444323: 213165 00                  uv 40 20  1  49      
    cmp esi,h4                            ;#00444326: 201376 00000040            uv 00 40  1  50 40   
    jl #00444335                          ;#0044432C: 174 07                     v  00 00  1  50      
    test byte[ebx+esi*4-1],#80            ;#0044432E: 366104263 FF 80            u  00 48  2  51      
    jne #0044433F                         ;#00444333: 165 0A                     v  00 00  1  52      
    mov ecx,1033                          ;#00444335: 271 09040000               uv 02 00  1  53      
    call #00462D8D (:%opTcFail)           ;#0044433A: 350 4EEA0100               v  00 00  1  53      
;   620     for i=1 to length(options) by 2 do
    mov ecx,[ebx+esi*4-12]                ;#0044433F: 213114263 F4               uv 02 48  1  54      
    mov [ebp-20] (symtab[1038]),ecx       ;#00444343: 211115 EC                  uv 00 22  1  55 02   
    mov [ebp-24] (i), dword 1             ;#00444346: 307105 E8 01000000         vu 00 20  1  55      
    cmp ecx,1                             ;#0044434D: 201371 01000000            uv 00 02  1  56      
    jl #004448E8                          ;#00444353: 017214 8F050000            v  00 00  1  56      
;   621         f = options[i]
    mov edi,[ebp-24] (i)                  ;#00444359: 213175 E8                  uv 80 20  1  57      
    lea ecx,[ebp-4] (f)                   ;#0044435C: 215115 FC                  vu 02 20  1  57      
    mov esi,[ebp] (options)               ;#0044435F: 213165 00                  uv 40 20  1  58      
    mov edx,1033                          ;#00444362: 272 09040000               vu 04 00  1  58      
    call #0046106B (:%pSubse1i)           ;#00444367: 350 FFCC0100               v  00 00  1  59      
;   622         ip1 = i+1
    mov ecx,[ebp-24] (i)                  ;#0044436C: 213115 E8                  uv 02 20  1  60      
    add ecx,1                             ;#0044436F: 203301 01                  uv 02 02  1  61 02   
    mov [ebp-8] (ip1),ecx                 ;#00444372: 211115 F8                  uv 00 22  1  62 02   
;   623         tmp = options[ip1]
    mov edi,ecx                           ;#00444375: 211317                     vu 80 02  1  62      
    lea ecx,[ebp-16] (tmp)                ;#00444377: 215115 F0                  uv 02 20  1  63      
    mov esi,[ebp] (options)               ;#0044437A: 213165 00                  vu 40 20  1  63      
    mov edx,1033                          ;#0044437D: 272 09040000               uv 04 00  1  64      
    mov al,0                              ;#00444382: 260 00                     vu 01 00  1  64      
    call #00460FE5 (:%pSubse1)            ;#00444384: 350 5CCC0100               v  00 00  1  65      
;   624         if f=pp_File then
    mov edi,[ebp-4] (f)                   ;#00444389: 213175 FC                  uv 80 20  1  66      
    cmp edi,1                             ;#0044438C: 203377 01                  uv 00 80  1  67 80   
    jl #004448D4                          ;#0044438F: 017214 3F050000            v  00 00  1  67      
    cmp edi,13                            ;#00444395: 203377 0D                  uv 00 80  1  68      
    jg #004448D4                          ;#00444398: 017217 36050000            v  00 00  1  68      
    jmp dword[edi*4+#004443A1]            ;#0044439E: 377044275 A1434400         np 00 80  2  69      
    #004443D9 [1]                         ;#004443A5:  D9434400                  
    #00444413 [2]                         ;#004443A9:  13444400                  
    #00444498 [3]                         ;#004443AD:  98444400                  
    #004444D2 [4]                         ;#004443B1:  D2444400                  
    #004445BB [5]                         ;#004443B5:  BB454400                  
    #00444672 [6]                         ;#004443B9:  72464400                  
    #004446EF [7]                         ;#004443BD:  EF464400                  
    #0044473D [8]                         ;#004443C1:  3D474400                  
    #004447B2 [9]                         ;#004443C5:  B2474400                  
    #0044482D [10]                        ;#004443C9:  2D484400                  
    #0044445E [11]                        ;#004443CD:  5E444400                  
    #004448A3 [12]                        ;#004443D1:  A3484400                  
    #00444638 [13]                        ;#004443D5:  38464400                  
;   625             options[ip1] = ppp_File
    mov edi,[ebp-8] (ip1)                 ;#004443D9: 213175 F8                  uv 80 20  1  71      
    mov ecx,[#00402478] (ppp_File)        ;#004443DC: 213015 78244000            vu 02 00  1  71      
    mov esi,[ebp] (options)               ;#004443E2: 213165 00                  uv 40 20  1  72      
    mov eax,ebp                           ;#004443E5: 213305                     vu 01 20  1  72      
    call #004607F3 (:%pRepe1)             ;#004443E7: 350 07C40100               v  00 00  1  73      
;   626             ppp_File = tmp
    mov eax,[ebp-16] (tmp)                ;#004443EC: 213105 F0                  uv 01 20  1  74      
    mov [#00402478] (ppp_File),eax        ;#004443EF: 243 78244000               uv 00 01  1  75 01   
    cmp eax,h4                            ;#004443F4: 075 00000040               vu 00 01  1  75      
    jl #004448D4                          ;#004443F9: 017214 D5040000            v  00 00  1  76      
    mov esi,1037                          ;#004443FF: 276 0D040000               uv 40 00  1  77      
    mov edi,946                           ;#00444404: 277 B2030000               vu 80 00  1  77      
    call #00462744 (:%pUnassigned)        ;#00444409: 350 36E30100               v  00 00  1  78      
    jmp #004448D4                         ;#0044440E: 351 C1040000               v  00 00  1  79      
;   627         elsif f=pp_Maxlen then
;   628             options[ip1] = ppp_Maxlen
    mov edi,[ebp-8] (ip1)                 ;#00444413: 213175 F8                  uv 80 20  1  80      
    mov ecx,[#0040243C] (ppp_Maxlen)      ;#00444416: 213015 3C244000            vu 02 00  1  80      
    mov esi,[ebp] (options)               ;#0044441C: 213165 00                  uv 40 20  1  81      
    mov eax,ebp                           ;#0044441F: 213305                     vu 01 20  1  81      
    call #004607F3 (:%pRepe1)             ;#00444421: 350 CDC30100               v  00 00  1  82      
;   629             if tmp=0 then tmp = 78 end if
    mov eax,[ebp-16] (tmp)                ;#00444426: 213105 F0                  uv 01 20  1  83      
    cmp eax,0                             ;#00444429: 203370 00                  uv 00 01  1  84 01   
    jne #00444435                         ;#0044442C: 165 07                     v  00 00  1  84      
    mov [ebp-16] (tmp), dword 78          ;#0044442E: 307105 F0 4E000000         uv 00 20  1  85      
;   630             ppp_Maxlen = tmp
    mov edi,[ebp-16] (tmp)                ;#00444435: 213175 F0                  vu 80 20  1  85      
    mov [#0040243C] (ppp_Maxlen),edi      ;#00444438: 211075 3C244000            uv 00 80  1  86      
    cmp edi,h4                            ;#0044443E: 201377 00000040            vu 00 80  1  86      
    jl #004448D4                          ;#00444444: 017214 8A040000            v  00 00  1  87      
    mov esi,1037                          ;#0044444A: 276 0D040000               uv 40 00  1  88      
    mov edi,931                           ;#0044444F: 277 A3030000               vu 80 00  1  88      
    call #00462744 (:%pUnassigned)        ;#00444454: 350 EBE20100               v  00 00  1  89      
    jmp #004448D4                         ;#00444459: 351 76040000               v  00 00  1  90      
;   631         elsif f=pp_Indent then
;   632             options[ip1] = ppp_Indent
    mov edi,[ebp-8] (ip1)                 ;#0044445E: 213175 F8                  uv 80 20  1  91      
    mov ecx,[#00402444] (ppp_Indent)      ;#00444461: 213015 44244000            vu 02 00  1  91      
    mov esi,[ebp] (options)               ;#00444467: 213165 00                  uv 40 20  1  92      
    mov eax,ebp                           ;#0044446A: 213305                     vu 01 20  1  92      
    call #004607F3 (:%pRepe1)             ;#0044446C: 350 82C30100               v  00 00  1  93      
;   633             ppp_Indent = tmp
    mov eax,[ebp-16] (tmp)                ;#00444471: 213105 F0                  uv 01 20  1  94      
    mov [#00402444] (ppp_Indent),eax      ;#00444474: 243 44244000               uv 00 01  1  95 01   
    cmp eax,h4                            ;#00444479: 075 00000040               vu 00 01  1  95      
    jl #004448D4                          ;#0044447E: 017214 50040000            v  00 00  1  96      
    mov esi,1037                          ;#00444484: 276 0D040000               uv 40 00  1  97      
    mov edi,933                           ;#00444489: 277 A5030000               vu 80 00  1  97      
    call #00462744 (:%pUnassigned)        ;#0044448E: 350 B1E20100               v  00 00  1  98      
    jmp #004448D4                         ;#00444493: 351 3C040000               v  00 00  1  99      
;   634         elsif f=pp_Pause then
;   635             options[ip1] = ppp_Pause
    mov edi,[ebp-8] (ip1)                 ;#00444498: 213175 F8                  uv 80 20  1 100      
    mov ecx,[#0040244C] (ppp_Pause)       ;#0044449B: 213015 4C244000            vu 02 00  1 100      
    mov esi,[ebp] (options)               ;#004444A1: 213165 00                  uv 40 20  1 101      
    mov eax,ebp                           ;#004444A4: 213305                     vu 01 20  1 101      
    call #004607F3 (:%pRepe1)             ;#004444A6: 350 48C30100               v  00 00  1 102      
;   636             ppp_Pause = tmp
    mov eax,[ebp-16] (tmp)                ;#004444AB: 213105 F0                  uv 01 20  1 103      
    mov [#0040244C] (ppp_Pause),eax       ;#004444AE: 243 4C244000               uv 00 01  1 104 01   
    cmp eax,h4                            ;#004444B3: 075 00000040               vu 00 01  1 104      
    jl #004448D4                          ;#004444B8: 017214 16040000            v  00 00  1 105      
    mov esi,1037                          ;#004444BE: 276 0D040000               uv 40 00  1 106      
    mov edi,935                           ;#004444C3: 277 A7030000               vu 80 00  1 106      
    call #00462744 (:%pUnassigned)        ;#004444C8: 350 77E20100               v  00 00  1 107      
    jmp #004448D4                         ;#004444CD: 351 02040000               v  00 00  1 108      
;   637         elsif f=pp_StrFmt then
;   638             options[ip1] = ppp_StrFmt
    mov edi,[ebp-8] (ip1)                 ;#004444D2: 213175 F8                  uv 80 20  1 109      
    mov ecx,[#00402450] (ppp_StrFmt)      ;#004444D5: 213015 50244000            vu 02 00  1 109      
    mov esi,[ebp] (options)               ;#004444DB: 213165 00                  uv 40 20  1 110      
    mov eax,ebp                           ;#004444DE: 213305                     vu 01 20  1 110      
    call #004607F3 (:%pRepe1)             ;#004444E0: 350 0EC30100               v  00 00  1 111      
;   639             ppp_StrFmt = tmp
    mov eax,[ebp-16] (tmp)                ;#004444E5: 213105 F0                  uv 01 20  1 112      
    mov [#00402450] (ppp_StrFmt),eax      ;#004444E8: 243 50244000               uv 00 01  1 113 01   
    cmp eax,h4                            ;#004444ED: 075 00000040               vu 00 01  1 113      
    jl #00444503                          ;#004444F2: 174 0F                     v  00 00  1 114      
    mov esi,1037                          ;#004444F4: 276 0D040000               uv 40 00  1 115      
    mov edi,936                           ;#004444F9: 277 A8030000               vu 80 00  1 115      
    call #00462744 (:%pUnassigned)        ;#004444FE: 350 41E20100               v  00 00  1 116      
;   640             if tmp=-2 then
    cmp eax,-2                            ;#00444503: 203370 FE                  uv 00 01  1 117      
    jne #0044453F                         ;#00444506: 165 37                     v  00 00  1 117      
;   641                 crash("pp_StrFmt,-2 deprecated: use pp_IntCh,false instead",nFrames:=flvl)
    mov ecx,4                             ;#00444508: 271 04000000               uv 02 00  1 118      
    mov edx,397                           ;#0044450D: 272 8D010000               vu 04 00  1 118      
    call #00462C02 (:%opFrame) (crash)    ;#00444512: 350 EBE60100               v  00 00  1 119      
    mov edi,[#00402504]                   ;#00444517: 213075 04254000            uv 80 00  1 120      
    mov [ebp] (msg),edi                   ;#0044451D: 211175 00                  uv 00 A0  1 121 80   
    add dword[ebx+edi*4-8],1              ;#00444520: 203104273 F8 01            u  00 88  3 123    *80*
    mov edi,[ebp+20] (prevebp)            ;#00444525: 213175 14                  vu 80 20  1 125      
    mov eax,[edi-12]                      ;#00444528: 213107 F4                  uv 01 80  1 128    *80*
    mov [ebp-8] (nFrames),eax             ;#0044452B: 211105 F8                  uv 00 21  1 129 01   
    mov [ebp+28] (retaddr),#0044453A      ;#0044452E: 307105 1C 3A454400         vu 00 20  1 129      
    jmp #0044AB92 (code:crash)            ;#00444535: 351 58660000               v  00 00  1 130      
    jmp #004448D4                         ;#0044453A: 351 95030000               v  00 00  1 131      
;   642             elsif tmp=-3 then
    cmp eax,-3                            ;#0044453F: 203370 FD                  uv 00 01  1 132      
    jne #0044457B                         ;#00444542: 165 37                     v  00 00  1 132      
;   643                 crash("pp_StrFmt,-3 deprecated: use pp_StrFmt,-1,pp_IntCh,false instead",nFrames:=flvl)
    mov ecx,4                             ;#00444544: 271 04000000               uv 02 00  1 133      
    mov edx,397                           ;#00444549: 272 8D010000               vu 04 00  1 133      
    call #00462C02 (:%opFrame) (crash)    ;#0044454E: 350 AFE60100               v  00 00  1 134      
    mov ecx,[#00402508]                   ;#00444553: 213015 08254000            uv 02 00  1 135      
    mov [ebp] (msg),ecx                   ;#00444559: 211115 00                  uv 00 22  1 136 02   
    add dword[ebx+ecx*4-8],1              ;#0044455C: 203104213 F8 01            u  00 0A  3 138    *02*
    mov edi,[ebp+20] (prevebp)            ;#00444561: 213175 14                  vu 80 20  1 140      
    mov eax,[edi-12]                      ;#00444564: 213107 F4                  uv 01 80  1 143    *80*
    mov [ebp-8] (nFrames),eax             ;#00444567: 211105 F8                  uv 00 21  1 144 01   
    mov [ebp+28] (retaddr),#00444576      ;#0044456A: 307105 1C 76454400         vu 00 20  1 144      
    jmp #0044AB92 (code:crash)            ;#00444571: 351 1C660000               v  00 00  1 145      
    jmp #004448D4                         ;#00444576: 351 59030000               v  00 00  1 146      
;   644             elsif tmp=1 then
    cmp eax,1                             ;#0044457B: 203370 01                  uv 00 01  1 147      
    jne #004448D4                         ;#0044457E: 017205 50030000            v  00 00  1 147      
;   645                 crash("pp_StrFmt,1 behaves as 3: use pp_StrFmt,3,pp_IntCh,false instead",nFrames:=flvl)
    mov ecx,4                             ;#00444584: 271 04000000               uv 02 00  1 148      
    mov edx,397                           ;#00444589: 272 8D010000               vu 04 00  1 148      
    call #00462C02 (:%opFrame) (crash)    ;#0044458E: 350 6FE60100               v  00 00  1 149      
    mov esi,[#0040250C]                   ;#00444593: 213065 0C254000            uv 40 00  1 150      
    mov [ebp] (msg),esi                   ;#00444599: 211165 00                  uv 00 60  1 151 40   
    add dword[ebx+esi*4-8],1              ;#0044459C: 203104263 F8 01            u  00 48  3 153    *40*
    mov edi,[ebp+20] (prevebp)            ;#004445A1: 213175 14                  vu 80 20  1 155      
    mov eax,[edi-12]                      ;#004445A4: 213107 F4                  uv 01 80  1 158    *80*
    mov [ebp-8] (nFrames),eax             ;#004445A7: 211105 F8                  uv 00 21  1 159 01   
    mov [ebp+28] (retaddr),#004445B6      ;#004445AA: 307105 1C B6454400         vu 00 20  1 159      
    jmp #0044AB92 (code:crash)            ;#004445B1: 351 DC650000               v  00 00  1 160      
;   646             end if
;   647 --             -2:  as 0, but chars number-only like +1                 [DEPRECATED: use pp_IntCh,false instead]
;   648 --             -3:  as -1, ""                                           [ "" (and pp_StrFmt,-1)]
;   649 --              1: as number only, eg {97, 98, 99}                      [DEPRECATED: use pp_StrFmt,3,pp_IntCh,false instead]
    jmp #004448D4                         ;#004445B6: 351 19030000               v  00 00  1 161      
;   650         elsif f=pp_IntFmt then
;   651             options[ip1] = ppp_IntFmt
    mov edi,[#00402460] (ppp_IntFmt)      ;#004445BB: 213075 60244000            uv 80 00  1 162      
    cmp edi,h4                            ;#004445C1: 201377 00000040            uv 00 80  1 163 80   
    jne #004445D3                         ;#004445C7: 165 0A                     v  00 00  1 163      
    mov esi,940                           ;#004445C9: 276 AC030000               uv 40 00  1 164      
    call #00462744 (:%pUnassigned)        ;#004445CE: 350 71E10100               v  00 00  1 164      
    mov ecx,edi                           ;#004445D3: 211371                     uv 02 80  1 165      
    mov edi,[ebp-8] (ip1)                 ;#004445D5: 213175 F8                  vu 80 20  1 165      
    mov esi,[ebp] (options)               ;#004445D8: 213165 00                  uv 40 20  1 166      
    mov eax,ebp                           ;#004445DB: 213305                     vu 01 20  1 166      
    call #004607F3 (:%pRepe1)             ;#004445DD: 350 11C20100               v  00 00  1 167      
;   652             ppp_IntFmt = tmp
    mov eax,[ebp-16] (tmp)                ;#004445E2: 213105 F0                  uv 01 20  1 168      
    mov edx,[#00402460] (ppp_IntFmt)      ;#004445E5: 213025 60244000            vu 04 00  1 168      
    cmp eax,h4                            ;#004445EB: 075 00000040               uv 00 01  1 169      
    jl #004445F7                          ;#004445F0: 174 05                     v  00 00  1 169      
    add dword[ebx+eax*4-8],1              ;#004445F2: 203104203 F8 01            u  00 09  3 170      
    mov [#00402460] (ppp_IntFmt),eax      ;#004445F7: 243 60244000               vu 00 01  1 172      
    cmp edx,h4                            ;#004445FC: 201372 00000040            uv 00 04  1 173      
    jle #00444610                         ;#00444602: 176 0C                     v  00 00  1 173      
    sub dword[ebx+edx*4-8],1              ;#00444604: 203154223 F8 01            u  00 0C  3 174      
    jne #00444610                         ;#00444609: 165 05                     v  00 00  1 176      
    call #004639A8 (:%pDealloc)           ;#0044460B: 350 98F30100               v  00 00  1 177      
    mov ecx,[#00402460] (ppp_IntFmt)      ;#00444610: 213015 60244000            uv 02 00  1 178      
    cmp ecx,h4                            ;#00444616: 201371 00000040            uv 00 02  1 179 02   
    jl #00444629                          ;#0044461C: 174 0B                     v  00 00  1 179      
    test byte[ebx+ecx*4-1],#80            ;#0044461E: 366104213 FF 80            u  00 0A  2 180      
    jne #004448D4                         ;#00444623: 017205 AB020000            v  00 00  1 181      
    mov ecx,940                           ;#00444629: 271 AC030000               uv 02 00  1 182      
    call #00462D8D (:%opTcFail)           ;#0044462E: 350 5AE70100               v  00 00  1 182      
    jmp #004448D4                         ;#00444633: 351 9C020000               v  00 00  1 183      
;   653         elsif f=pp_IntCh then
;   654             options[ip1] = ppp_IntCh
    mov edi,[ebp-8] (ip1)                 ;#00444638: 213175 F8                  uv 80 20  1 184      
    mov ecx,[#00402454] (ppp_IntCh)       ;#0044463B: 213015 54244000            vu 02 00  1 184      
    mov esi,[ebp] (options)               ;#00444641: 213165 00                  uv 40 20  1 185      
    mov eax,ebp                           ;#00444644: 213305                     vu 01 20  1 185      
    call #004607F3 (:%pRepe1)             ;#00444646: 350 A8C10100               v  00 00  1 186      
;   655             ppp_IntCh = tmp
    mov eax,[ebp-16] (tmp)                ;#0044464B: 213105 F0                  uv 01 20  1 187      
    mov [#00402454] (ppp_IntCh),eax       ;#0044464E: 243 54244000               uv 00 01  1 188 01   
    cmp eax,h4                            ;#00444653: 075 00000040               vu 00 01  1 188      
    jl #004448D4                          ;#00444658: 017214 76020000            v  00 00  1 189      
    mov esi,1037                          ;#0044465E: 276 0D040000               uv 40 00  1 190      
    mov edi,937                           ;#00444663: 277 A9030000               vu 80 00  1 190      
    call #00462744 (:%pUnassigned)        ;#00444668: 350 D7E00100               v  00 00  1 191      
    jmp #004448D4                         ;#0044466D: 351 62020000               v  00 00  1 192      
;   656         elsif f=pp_FltFmt then
;   657             options[ip1] = ppp_FltFmt
    mov edi,[#00402464] (ppp_FltFmt)      ;#00444672: 213075 64244000            uv 80 00  1 193      
    cmp edi,h4                            ;#00444678: 201377 00000040            uv 00 80  1 194 80   
    jne #0044468A                         ;#0044467E: 165 0A                     v  00 00  1 194      
    mov esi,941                           ;#00444680: 276 AD030000               uv 40 00  1 195      
    call #00462744 (:%pUnassigned)        ;#00444685: 350 BAE00100               v  00 00  1 195      
    mov ecx,edi                           ;#0044468A: 211371                     uv 02 80  1 196      
    mov edi,[ebp-8] (ip1)                 ;#0044468C: 213175 F8                  vu 80 20  1 196      
    mov esi,[ebp] (options)               ;#0044468F: 213165 00                  uv 40 20  1 197      
    mov eax,ebp                           ;#00444692: 213305                     vu 01 20  1 197      
    call #004607F3 (:%pRepe1)             ;#00444694: 350 5AC10100               v  00 00  1 198      
;   658             ppp_FltFmt = tmp
    mov eax,[ebp-16] (tmp)                ;#00444699: 213105 F0                  uv 01 20  1 199      
    mov edx,[#00402464] (ppp_FltFmt)      ;#0044469C: 213025 64244000            vu 04 00  1 199      
    cmp eax,h4                            ;#004446A2: 075 00000040               uv 00 01  1 200      
    jl #004446AE                          ;#004446A7: 174 05                     v  00 00  1 200      
    add dword[ebx+eax*4-8],1              ;#004446A9: 203104203 F8 01            u  00 09  3 201      
    mov [#00402464] (ppp_FltFmt),eax      ;#004446AE: 243 64244000               vu 00 01  1 203      
    cmp edx,h4                            ;#004446B3: 201372 00000040            uv 00 04  1 204      
    jle #004446C7                         ;#004446B9: 176 0C                     v  00 00  1 204      
    sub dword[ebx+edx*4-8],1              ;#004446BB: 203154223 F8 01            u  00 0C  3 205      
    jne #004446C7                         ;#004446C0: 165 05                     v  00 00  1 207      
    call #004639A8 (:%pDealloc)           ;#004446C2: 350 E1F20100               v  00 00  1 208      
    mov ecx,[#00402464] (ppp_FltFmt)      ;#004446C7: 213015 64244000            uv 02 00  1 209      
    cmp ecx,h4                            ;#004446CD: 201371 00000040            uv 00 02  1 210 02   
    jl #004446E0                          ;#004446D3: 174 0B                     v  00 00  1 210      
    test byte[ebx+ecx*4-1],#80            ;#004446D5: 366104213 FF 80            u  00 0A  2 211      
    jne #004448D4                         ;#004446DA: 017205 F4010000            v  00 00  1 212      
    mov ecx,941                           ;#004446E0: 271 AD030000               uv 02 00  1 213      
    call #00462D8D (:%opTcFail)           ;#004446E5: 350 A3E60100               v  00 00  1 213      
    jmp #004448D4                         ;#004446EA: 351 E5010000               v  00 00  1 214      
;   659         elsif f=pp_Nest then
;   660             options[ip1] = ppp_Nest
    mov edi,[ebp-8] (ip1)                 ;#004446EF: 213175 F8                  uv 80 20  1 215      
    mov ecx,[#00402448] (ppp_Nest)        ;#004446F2: 213015 48244000            vu 02 00  1 215      
    mov esi,[ebp] (options)               ;#004446F8: 213165 00                  uv 40 20  1 216      
    mov eax,ebp                           ;#004446FB: 213305                     vu 01 20  1 216      
    call #004607F3 (:%pRepe1)             ;#004446FD: 350 F1C00100               v  00 00  1 217      
;   661             ppp_Nest = tmp
    mov eax,[ebp-16] (tmp)                ;#00444702: 213105 F0                  uv 01 20  1 218      
    mov edx,[#00402448] (ppp_Nest)        ;#00444705: 213025 48244000            vu 04 00  1 218      
    cmp eax,h4                            ;#0044470B: 075 00000040               uv 00 01  1 219      
    jl #00444717                          ;#00444710: 174 05                     v  00 00  1 219      
    add dword[ebx+eax*4-8],1              ;#00444712: 203104203 F8 01            u  00 09  3 220      
    mov [#00402448] (ppp_Nest),eax        ;#00444717: 243 48244000               vu 00 01  1 222      
    cmp edx,h4                            ;#0044471C: 201372 00000040            uv 00 04  1 223      
    jle #004448D4                         ;#00444722: 017216 AC010000            v  00 00  1 223      
    sub dword[ebx+edx*4-8],1              ;#00444728: 203154223 F8 01            u  00 0C  3 224      
    jne #004448D4                         ;#0044472D: 017205 A1010000            v  00 00  1 226      
    call #004639A8 (:%pDealloc)           ;#00444733: 350 70F20100               v  00 00  1 227      
    jmp #004448D4                         ;#00444738: 351 97010000               v  00 00  1 228      
;   662         elsif f=pp_Ascii then
;   663             options[ip1] = ppp_Ascii
    mov edi,[#0040245C] (ppp_Ascii)       ;#0044473D: 213075 5C244000            uv 80 00  1 229      
    cmp edi,h4                            ;#00444743: 201377 00000040            uv 00 80  1 230 80   
    jne #00444755                         ;#00444749: 165 0A                     v  00 00  1 230      
    mov esi,939                           ;#0044474B: 276 AB030000               uv 40 00  1 231      
    call #00462744 (:%pUnassigned)        ;#00444750: 350 EFDF0100               v  00 00  1 231      
    mov ecx,edi                           ;#00444755: 211371                     uv 02 80  1 232      
    mov edi,[ebp-8] (ip1)                 ;#00444757: 213175 F8                  vu 80 20  1 232      
    mov esi,[ebp] (options)               ;#0044475A: 213165 00                  uv 40 20  1 233      
    mov eax,ebp                           ;#0044475D: 213305                     vu 01 20  1 233      
    call #004607F3 (:%pRepe1)             ;#0044475F: 350 8FC00100               v  00 00  1 234      
;   664             ppp_Ascii = tmp
    mov eax,[ebp-16] (tmp)                ;#00444764: 213105 F0                  uv 01 20  1 235      
    mov edx,[#0040245C] (ppp_Ascii)       ;#00444767: 213025 5C244000            vu 04 00  1 235      
    cmp eax,h4                            ;#0044476D: 075 00000040               uv 00 01  1 236      
    jl #00444779                          ;#00444772: 174 05                     v  00 00  1 236      
    add dword[ebx+eax*4-8],1              ;#00444774: 203104203 F8 01            u  00 09  3 237      
    mov [#0040245C] (ppp_Ascii),eax       ;#00444779: 243 5C244000               vu 00 01  1 239      
    cmp edx,h4                            ;#0044477E: 201372 00000040            uv 00 04  1 240      
    jle #00444792                         ;#00444784: 176 0C                     v  00 00  1 240      
    sub dword[ebx+edx*4-8],1              ;#00444786: 203154223 F8 01            u  00 0C  3 241      
    jne #00444792                         ;#0044478B: 165 05                     v  00 00  1 243      
    call #004639A8 (:%pDealloc)           ;#0044478D: 350 16F20100               v  00 00  1 244      
;   665             setAscii()
    mov ecx,7                             ;#00444792: 271 07000000               uv 02 00  1 245      
    mov edx,1012                          ;#00444797: 272 F4030000               vu 04 00  1 245      
    call :%opFrame (setAscii)             ;#0044479C: 350 61E40100               v  00 00  1 246      
    mov [ebp+28] (retaddr),#004447AD      ;#004447A1: 307105 1C AD474400         uv 00 20  1 247      
    jmp #004448F3 (code:setAscii)         ;#004447A8: 351 46010000               v  00 00  1 247      
    jmp #004448D4                         ;#004447AD: 351 22010000               v  00 00  1 248      
;   666         elsif f=pp_Date then
;   667             options[ip1] = ppp_Date
    mov ecx,[#00402468] (ppp_Date)        ;#004447B2: 213015 68244000            uv 02 00  1 249      
    cmp ecx,h4                            ;#004447B8: 201371 00000040            uv 00 02  1 250 02   
    jne #004447CA                         ;#004447BE: 165 0A                     v  00 00  1 250      
    mov esi,942                           ;#004447C0: 276 AE030000               uv 40 00  1 251      
    call #00462744 (:%pUnassigned)        ;#004447C5: 350 7ADF0100               v  00 00  1 251      
    mov edi,[ebp-8] (ip1)                 ;#004447CA: 213175 F8                  uv 80 20  1 252      
    mov esi,[ebp] (options)               ;#004447CD: 213165 00                  vu 40 20  1 252      
    mov eax,ebp                           ;#004447D0: 213305                     uv 01 20  1 253      
    call #004607F3 (:%pRepe1)             ;#004447D2: 350 1CC00100               v  00 00  1 253      
;   668             ppp_Date = tmp
    mov eax,[ebp-16] (tmp)                ;#004447D7: 213105 F0                  uv 01 20  1 254      
    mov edx,[#00402468] (ppp_Date)        ;#004447DA: 213025 68244000            vu 04 00  1 254      
    cmp eax,h4                            ;#004447E0: 075 00000040               uv 00 01  1 255      
    jl #004447EC                          ;#004447E5: 174 05                     v  00 00  1 255      
    add dword[ebx+eax*4-8],1              ;#004447E7: 203104203 F8 01            u  00 09  3 256      
    mov [#00402468] (ppp_Date),eax        ;#004447EC: 243 68244000               vu 00 01  1 258      
    cmp edx,h4                            ;#004447F1: 201372 00000040            uv 00 04  1 259      
    jle #00444805                         ;#004447F7: 176 0C                     v  00 00  1 259      
    sub dword[ebx+edx*4-8],1              ;#004447F9: 203154223 F8 01            u  00 0C  3 260      
    jne #00444805                         ;#004447FE: 165 05                     v  00 00  1 262      
    call #004639A8 (:%pDealloc)           ;#00444800: 350 A3F10100               v  00 00  1 263      
    mov ecx,[#00402468] (ppp_Date)        ;#00444805: 213015 68244000            uv 02 00  1 264      
    cmp ecx,h4                            ;#0044480B: 201371 00000040            uv 00 02  1 265 02   
    jl #0044481E                          ;#00444811: 174 0B                     v  00 00  1 265      
    test byte[ebx+ecx*4-1],#80            ;#00444813: 366104213 FF 80            u  00 0A  2 266      
    jne #004448D4                         ;#00444818: 017205 B6000000            v  00 00  1 267      
    mov ecx,942                           ;#0044481E: 271 AE030000               uv 02 00  1 268      
    call #00462D8D (:%opTcFail)           ;#00444823: 350 65E50100               v  00 00  1 268      
    jmp #004448D4                         ;#00444828: 351 A7000000               v  00 00  1 269      
;   669         elsif f=pp_Brkt then
;   670             options[ip1] = ppp_Br
    mov edi,[#0040246C] (ppp_Br)          ;#0044482D: 213075 6C244000            uv 80 00  1 270      
    cmp edi,h4                            ;#00444833: 201377 00000040            uv 00 80  1 271 80   
    jne #00444845                         ;#00444839: 165 0A                     v  00 00  1 271      
    mov esi,943                           ;#0044483B: 276 AF030000               uv 40 00  1 272      
    call #00462744 (:%pUnassigned)        ;#00444840: 350 FFDE0100               v  00 00  1 272      
    mov ecx,edi                           ;#00444845: 211371                     uv 02 80  1 273      
    mov edi,[ebp-8] (ip1)                 ;#00444847: 213175 F8                  vu 80 20  1 273      
    mov esi,[ebp] (options)               ;#0044484A: 213165 00                  uv 40 20  1 274      
    mov eax,ebp                           ;#0044484D: 213305                     vu 01 20  1 274      
    call #004607F3 (:%pRepe1)             ;#0044484F: 350 9FBF0100               v  00 00  1 275      
;   671             ppp_Br = tmp
    mov eax,[ebp-16] (tmp)                ;#00444854: 213105 F0                  uv 01 20  1 276      
    mov edx,[#0040246C] (ppp_Br)          ;#00444857: 213025 6C244000            vu 04 00  1 276      
    cmp eax,h4                            ;#0044485D: 075 00000040               uv 00 01  1 277      
    jl #00444869                          ;#00444862: 174 05                     v  00 00  1 277      
    add dword[ebx+eax*4-8],1              ;#00444864: 203104203 F8 01            u  00 09  3 278      
    mov [#0040246C] (ppp_Br),eax          ;#00444869: 243 6C244000               vu 00 01  1 280      
    cmp edx,h4                            ;#0044486E: 201372 00000040            uv 00 04  1 281      
    jle #00444882                         ;#00444874: 176 0C                     v  00 00  1 281      
    sub dword[ebx+edx*4-8],1              ;#00444876: 203154223 F8 01            u  00 0C  3 282      
    jne #00444882                         ;#0044487B: 165 05                     v  00 00  1 284      
    call #004639A8 (:%pDealloc)           ;#0044487D: 350 26F10100               v  00 00  1 285      
    mov ecx,[#0040246C] (ppp_Br)          ;#00444882: 213015 6C244000            uv 02 00  1 286      
    cmp ecx,h4                            ;#00444888: 201371 00000040            uv 00 02  1 287 02   
    jl #00444897                          ;#0044488E: 174 07                     v  00 00  1 287      
    test byte[ebx+ecx*4-1],#80            ;#00444890: 366104213 FF 80            u  00 0A  2 288      
    jne #004448D4                         ;#00444895: 165 3D                     v  00 00  1 289      
    mov ecx,943                           ;#00444897: 271 AF030000               uv 02 00  1 290      
    call #00462D8D (:%opTcFail)           ;#0044489C: 350 ECE40100               v  00 00  1 290      
    jmp #004448D4                         ;#004448A1: 353 31                     v  00 00  1 291      
;   672         elsif f=pp_Q22 then
;   673             options[ip1] = ppp_Q22
    mov edi,[ebp-8] (ip1)                 ;#004448A3: 213175 F8                  uv 80 20  1 292      
    mov ecx,[#00402470] (ppp_Q22)         ;#004448A6: 213015 70244000            vu 02 00  1 292      
    mov esi,[ebp] (options)               ;#004448AC: 213165 00                  uv 40 20  1 293      
    mov eax,ebp                           ;#004448AF: 213305                     vu 01 20  1 293      
    call #004607F3 (:%pRepe1)             ;#004448B1: 350 3DBF0100               v  00 00  1 294      
;   674             ppp_Q22 = tmp
    mov eax,[ebp-16] (tmp)                ;#004448B6: 213105 F0                  uv 01 20  1 295      
    mov [#00402470] (ppp_Q22),eax         ;#004448B9: 243 70244000               uv 00 01  1 296 01   
    cmp eax,h4                            ;#004448BE: 075 00000040               vu 00 01  1 296      
    jl #004448D4                          ;#004448C3: 174 0F                     v  00 00  1 297      
    mov esi,1037                          ;#004448C5: 276 0D040000               uv 40 00  1 298      
    mov edi,944                           ;#004448CA: 277 B0030000               vu 80 00  1 298      
    call #00462744 (:%pUnassigned)        ;#004448CF: 350 70DE0100               v  00 00  1 299      
;   675         end if
;   676     end for
    mov edi,[ebp-24] (i)                  ;#004448D4: 213175 E8                  uv 80 20  1 300      
    mov ecx,[ebp-20] (symtab[1038])       ;#004448D7: 213115 EC                  vu 02 20  1 300      
    add edi,2                             ;#004448DA: 203307 02                  uv 80 80  1 301      
    cmp edi,ecx                           ;#004448DD: 073371                     uv 00 82  1 302 80   
    mov [ebp-24] (i),edi                  ;#004448DF: 211175 E8                  vu 00 A0  1 302      
    jle #00444359                         ;#004448E2: 017216 71FAFFFF            v  00 00  1 303      
;   677     return options
    mov eax,[ebp] (options)               ;#004448E8: 213105 00                  uv 01 20  1 304      
    mov [ebp] (options),ebx               ;#004448EB: 211135 00                  vu 00 28  1 304      
    jmp #00462C8F (:%opRetf)              ;#004448EE: 351 9CE30100               v  00 00  1 305      
;   678 end function
;   679 
;   680 global procedure ppOpt(sequence options)
    mov ecx,[ebp] (options)               ;#00444DF8: 213115 00                  uv 02 20  1   1      
    cmp ecx,h4                            ;#00444DFB: 201371 00000040            uv 00 02  1   2 02   
    jl #00444E0A                          ;#00444E01: 174 07                     v  00 00  1   2      
    test byte[ebx+ecx*4-1],#80            ;#00444E03: 366104213 FF 80            u  00 0A  2   3      
    jne #00444E14                         ;#00444E08: 165 0A                     v  00 00  1   4      
    mov ecx,1044                          ;#00444E0A: 271 14040000               uv 02 00  1   5      
    call #00462D8D (:%opTcFail)           ;#00444E0F: 350 79DF0100               v  00 00  1   5      
;   681 -- Permanently (or until next ppOpt call) change selected formatting options.
;   682 -- options is a pair-sequence, selected from:
;   683 --   Odd element:      Even element:
;   684 --      pp_File         0:no output (used by ppf())
;   685 --                      1:display to Screen (the default),
;   686 --                      n=an open file handle
;   687 --      pp_Nest         nest level, eg:
;   688 --                      0: output is {1, {2, {3,3}, 2}, 1}
;   689 --                      1: output is {1,
;   690 --                                    {2, {3,3}, 2},
;   691 --                                    1}
;   692 --      pp_Maxlen       split lines at column, default 78
;   693 --      pp_Indent       Auto-indent amount, default 0
;   694 --      pp_Pause        pause every n lines, default=23.
;   695 --                      specify 0 for no pause
;   696 --      pp_StrFmt       0: print strings as eg "abc" (default)
;   697 --                     -1:  ditto, but without quotes.
;   698 --                     -2:  as 0, but chars number-only like +1                 [DEPRECATED: use pp_IntCh,false instead]
;   699 --                     -3:  as -1, ""                                           [ "" (and pp_StrFmt,-1)]
;   700 --                      1: as number only, eg {97, 98, 99}                      [DEPRECATED: use pp_StrFmt,3,pp_IntCh,false instead]
;   701 --                      3: as number&text, eg {97a, 98b, 99c}
;   702 --      pp_IntCh        show ints as eg 65'A', default false (==just 65)
;   703 --      pp_IntFmt       integer format, default "%d"
;   704 --                      NB: applies to pp_StrFmt 1 as well.
;   705 --      pp_FltFmt       float format, default "%g"
;   706 --                      Both pp_IntFmt and pp_FltFmt can contain extra text,
;   707 --                      eg "#%08x (integer)", "%04.1 km", or "%.2f US$"
;   708 --
;   709 --      pp_Ascii        min/max ascii character, default {' ',#7D}
;   710 --                      if sequences are passed, they define ranges.
;   711 --                      Eg, for ISO 8859-1, use {{#20,#A0},{#7E,#FF}},
;   712 --                      since characters 0..31 and 127..159 are system codes.
;   713 --
;   714 --      pp_Date         "": no special date handling (Default)
;   715 --                      "%04d-%02d-%02d": eg 2003-12-31
;   716 --                      "%02d/%02d/%04d": eg 31/12/2003
;   717 --                      Sequences of 3 integers, in the form {day,month,year} or
;   718 --                      {year,month,day}, with 1<=day<=31, 1<=month<=12, and
;   719 --                      1900<=year<=3000 are recognised as dates.
;   720 --
;   721 --      pp_Brkt         "{}" (default) outputs '{' at the start of a (nested)
;   722 --                      sequence and '}' at the end. Must be two characters.
;   723 --
;   724 --      pp_Q22          Show quotes as #22 (default 0, ie \")
;   725 --
;   726 --   eg ppOpt({pp_StrFmt,0,pp_Nest,2})
;   727 --
;   728     options = setOpt(options)
    mov ecx,7                             ;#00444E14: 271 07000000               uv 02 00  1   6      
    mov edx,1032                          ;#00444E19: 272 08040000               vu 04 00  1   6      
    call #00462C02 (:%opFrame) (setOpt)   ;#00444E1E: 350 DFDD0100               v  00 00  1   7      
    mov edi,[ebp+20] (prevebp)            ;#00444E23: 213175 14                  uv 80 20  1   8      
    mov eax,[edi]                         ;#00444E26: 213007                     uv 01 80  1  11 80 *80*
    mov [edi], dword h4                   ;#00444E28: 307007 00000040            vu 00 80  1  11      
    cmp eax,h4                            ;#00444E2E: 075 00000040               uv 00 01  1  12      
    jne #00444E3F                         ;#00444E33: 165 0A                     v  00 00  1  12      
    mov esi,1044                          ;#00444E35: 276 14040000               uv 40 00  1  13      
    call #00462744 (:%pUnassigned)        ;#00444E3A: 350 05D90100               v  00 00  1  13      
    mov [ebp] (options),eax               ;#00444E3F: 211105 00                  uv 00 21  1  14      
    mov [ebp+28] (retaddr),#00444E4E      ;#00444E42: 307105 1C 4E4E4400         vu 00 20  1  14      
    jmp #00444243 (code:setOpt)           ;#00444E49: 351 F5F3FFFF               v  00 00  1  15      
    push eax                              ;#00444E4E: 120                        uv 00 01  1  16      
    mov esi,[ebp] (options)               ;#00444E4F: 213165 00                  vu 40 20  1  16      
    cmp esi,h4                            ;#00444E52: 201376 00000040            uv 00 40  1  17      
    jle #00444E68                         ;#00444E58: 176 0E                     v  00 00  1  17      
    sub dword[ebx+esi*4-8],1              ;#00444E5A: 203154263 F8 01            u  00 48  3  18      
    jne #00444E68                         ;#00444E5F: 165 07                     v  00 00  1  20      
    mov edx,esi                           ;#00444E61: 213326                     uv 04 40  1  21      
    call #004639A8 (:%pDealloc)           ;#00444E63: 350 40EB0100               v  00 00  1  21      
    pop dword[ebp] (options)              ;#00444E68: 217105 00                  np 00 20  3  22      
    jmp #00462C8F (:%opRetf)              ;#00444E6B: 351 1FDE0100               v  00 00  1  25      
;   729 end procedure
;   730 
;   731 -- internal, so that pp() and ppEx() have same nesting/fatal error level:
;   732 procedure pp_Ex(object o, sequence options)
;   733 -- pretty print object with selected options (as per ppOpt)
;   734 -- The previous pretty_print options are restored on exit.
;   735     options = setOpt(options)
    mov ecx,7                             ;#004421B5: 271 07000000               uv 02 00  1   1      
    mov edx,1032                          ;#004421BA: 272 08040000               vu 04 00  1   1      
    call #00462C02 (:%opFrame) (setOpt)   ;#004421BF: 350 3E0A0200               v  00 00  1   2      
    mov edi,[ebp+20] (prevebp)            ;#004421C4: 213175 14                  uv 80 20  1   3      
    mov eax,[edi-4]                       ;#004421C7: 213107 FC                  uv 01 80  1   6 80 *80*
    mov [edi-4], dword h4                 ;#004421CA: 307107 FC 00000040         vu 00 80  1   6      
    cmp eax,h4                            ;#004421D1: 075 00000040               uv 00 01  1   7      
    jne #004421E2                         ;#004421D6: 165 0A                     v  00 00  1   7      
    mov esi,1047                          ;#004421D8: 276 17040000               uv 40 00  1   8      
    call #00462744 (:%pUnassigned)        ;#004421DD: 350 62050200               v  00 00  1   8      
    mov [ebp] (options),eax               ;#004421E2: 211105 00                  uv 00 21  1   9      
    mov [ebp+28] (retaddr),#004421F1      ;#004421E5: 307105 1C F1214400         vu 00 20  1   9      
    jmp #00444243 (code:setOpt)           ;#004421EC: 351 52200000               v  00 00  1  10      
    push eax                              ;#004421F1: 120                        uv 00 01  1  11      
    mov edi,[ebp-4] (options)             ;#004421F2: 213175 FC                  vu 80 20  1  11      
    cmp edi,h4                            ;#004421F5: 201377 00000040            uv 00 80  1  12      
    jle #0044220B                         ;#004421FB: 176 0E                     v  00 00  1  12      
    sub dword[ebx+edi*4-8],1              ;#004421FD: 203154273 F8 01            u  00 88  3  13      
    jne #0044220B                         ;#00442202: 165 07                     v  00 00  1  15      
    mov edx,edi                           ;#00442204: 213327                     uv 04 80  1  16      
    call #004639A8 (:%pDealloc)           ;#00442206: 350 9D170200               v  00 00  1  16      
    pop dword[ebp-4] (options)            ;#0044220B: 217105 FC                  np 00 20  3  17      
;   736     pline = ""
    mov esi,[#004022A4]                   ;#0044220E: 213065 A4224000            uv 40 00  1  20      
    mov edx,[#00402480] (pline)           ;#00442214: 213025 80244000            vu 04 00  1  20      
    cmp esi,h4                            ;#0044221A: 201376 00000040            uv 00 40  1  21      
    jl #00442227                          ;#00442220: 174 05                     v  00 00  1  21      
    add dword[ebx+esi*4-8],1              ;#00442222: 203104263 F8 01            u  00 48  3  22      
    mov [#00402480] (pline),esi           ;#00442227: 211065 80244000            vu 00 40  1  24      
    cmp edx,h4                            ;#0044222D: 201372 00000040            uv 00 04  1  25      
    jle #00442241                         ;#00442233: 176 0C                     v  00 00  1  25      
    sub dword[ebx+edx*4-8],1              ;#00442235: 203154223 F8 01            u  00 0C  3  26      
    jne #00442241                         ;#0044223A: 165 05                     v  00 00  1  28      
    call #004639A8 (:%pDealloc)           ;#0044223C: 350 67170200               v  00 00  1  29      
;   737     ppp_result = ""
    mov ecx,[#004022A4]                   ;#00442241: 213015 A4224000            uv 02 00  1  30      
    mov edx,[#0040247C] (ppp_result)      ;#00442247: 213025 7C244000            vu 04 00  1  30      
    cmp ecx,h4                            ;#0044224D: 201371 00000040            uv 00 02  1  31      
    jl #0044225A                          ;#00442253: 174 05                     v  00 00  1  31      
    add dword[ebx+ecx*4-8],1              ;#00442255: 203104213 F8 01            u  00 0A  3  32      
    mov [#0040247C] (ppp_result),ecx      ;#0044225A: 211015 7C244000            vu 00 02  1  34      
    cmp edx,h4                            ;#00442260: 201372 00000040            uv 00 04  1  35      
    jle #00442274                         ;#00442266: 176 0C                     v  00 00  1  35      
    sub dword[ebx+edx*4-8],1              ;#00442268: 203154223 F8 01            u  00 0C  3  36      
    jne #00442274                         ;#0044226D: 165 05                     v  00 00  1  38      
    call #004639A8 (:%pDealloc)           ;#0044226F: 350 34170200               v  00 00  1  39      
;   738     if not sequence(ppp_Nest) then
    mov eax,[#00402448] (ppp_Nest)        ;#00442274: 241 48244000               uv 01 00  1  40      
    cmp eax,h4                            ;#00442279: 075 00000040               uv 00 01  1  41 01   
    jl #00442287                          ;#0044227E: 174 07                     v  00 00  1  41      
    test byte[ebx+eax*4-1],#80            ;#00442280: 366104203 FF 80            u  00 09  2  42      
    jne #004422B7                         ;#00442285: 165 30                     v  00 00  1  43      
;   739         ppp_Nest = {1,ppp_Nest}
    mov eax,#00402448                     ;#00442287: 270 48244000               uv 01 00  1  44      
    mov edx,2                             ;#0044228C: 272 02000000               vu 04 00  1  44      
    push #004422B7                        ;#00442291: 150 B7224400               uv 00 00  1  45      
    push eax                              ;#00442296: 120                        vu 00 01  1  45      
    mov edi,[#00402448] (ppp_Nest)        ;#00442297: 213075 48244000            uv 80 00  1  46      
    cmp edi,h4                            ;#0044229D: 201377 00000040            uv 00 80  1  47 80   
    jl #004422AF                          ;#004422A3: 174 0A                     v  00 00  1  47      
    add dword[ebx+edi*4-8],1              ;#004422A5: 203104273 F8 01            u  00 88  3  48      
    cmp eax,934                           ;#004422AA: 075 A6030000               vu 00 01  1  50      
    push edi                              ;#004422AF: 127                        uv 00 80  1  51      
    push 1                                ;#004422B0: 152 01                     vu 00 00  1  51      
    jmp #00460143 (:%pMkSq)               ;#004422B2: 351 8CDE0100               v  00 00  1  52      
;   740     end if
;   741     nindent = ppp_Nest[1]
    mov edi,1                             ;#004422B7: 277 01000000               uv 80 00  1  53      
    mov ecx,#0040248C                     ;#004422BC: 271 8C244000               vu 02 00  1  53      
    mov esi,[#00402448] (ppp_Nest)        ;#004422C1: 213065 48244000            uv 40 00  1  54      
    mov edx,934                           ;#004422C7: 272 A6030000               vu 04 00  1  54      
    mov al,0                              ;#004422CC: 260 00                     uv 01 00  1  55      
    call #00460FE5 (:%pSubse1)            ;#004422CE: 350 12ED0100               v  00 00  1  55      
    cmp eax,h4                            ;#004422D3: 075 00000040               uv 00 01  1  56      
    jl #004422E4                          ;#004422D8: 174 0A                     v  00 00  1  56      
    mov ecx,951                           ;#004422DA: 271 B7030000               uv 02 00  1  57      
    call #00462D8D (:%opTcFail)           ;#004422DF: 350 A90A0200               v  00 00  1  57      
;   742     if prnf(o,0,0,1,ppp_Nest[2]) then end if
    mov edi,2                             ;#004422E4: 277 02000000               uv 80 00  1  58      
    lea ecx,[ebp-8] (symtab[1048])        ;#004422E9: 215115 F8                  vu 02 20  1  58      
    mov esi,[#00402448] (ppp_Nest)        ;#004422EC: 213065 48244000            uv 40 00  1  59      
    mov edx,934                           ;#004422F2: 272 A6030000               vu 04 00  1  59      
    mov al,0                              ;#004422F7: 260 00                     uv 01 00  1  60      
    call #00460FE5 (:%pSubse1)            ;#004422F9: 350 E7EC0100               v  00 00  1  60      
    mov ecx,28                            ;#004422FE: 271 1C000000               uv 02 00  1  61      
    mov edx,970                           ;#00442303: 272 CA030000               vu 04 00  1  61      
    call #00462C02 (:%opFrame) (prnf)     ;#00442308: 350 F5080200               v  00 00  1  62      
    mov edi,[ebp+20] (prevebp)            ;#0044230D: 213175 14                  uv 80 20  1  63      
    mov eax,[edi]                         ;#00442310: 213007                     uv 01 80  1  66 80 *80*
    xor ebx,ebx                           ;#00442312: 061333                     vu 08 08  1  66      
    cmp eax,h4                            ;#00442314: 075 00000040               uv 00 01  1  67      
    jl #00442325                          ;#00442319: 174 0A                     v  00 00  1  67      
    add dword[ebx+eax*4-8],1              ;#0044231B: 203104203 F8 01            u  00 09  3  68      
    cmp eax,1046                          ;#00442320: 075 16040000               vu 00 01  1  70      
    mov [ebp] (cl),eax                    ;#00442325: 211105 00                  uv 00 21  1  71      
    mov [ebp-4] (col),ebx                 ;#00442328: 211135 FC                  vu 00 28  1  71      
    mov [ebp-8] (indent),ebx              ;#0044232B: 211135 F8                  uv 00 28  1  72      
    mov [ebp-12] (prnt), dword 1          ;#0044232E: 307105 F4 01000000         vu 00 20  1  72      
    mov edi,[ebp+20] (prevebp)            ;#00442335: 213175 14                  uv 80 20  1  73      
    mov eax,[edi-8]                       ;#00442338: 213107 F8                  uv 01 80  1  76 80 *80*
    mov [edi-8], dword h4                 ;#0044233B: 307107 F8 00000040         vu 00 80  1  76      
    cmp eax,h4                            ;#00442342: 075 00000040               uv 00 01  1  77      
    jne #00442353                         ;#00442347: 165 0A                     v  00 00  1  77      
    mov esi,1048                          ;#00442349: 276 18040000               uv 40 00  1  78      
    call #00462744 (:%pUnassigned)        ;#0044234E: 350 F1030200               v  00 00  1  78      
    mov [ebp-16] (nestlvl),eax            ;#00442353: 211105 F0                  uv 00 21  1  79      
    mov [ebp+28] (retaddr),#00442362      ;#00442356: 307105 1C 62234400         vu 00 20  1  79      
    jmp #0044271D (code:prnf)             ;#0044235D: 351 BB030000               v  00 00  1  80      
;   743     if ppp_Nest[2]>=0 then
    mov edi,2                             ;#00442362: 277 02000000               uv 80 00  1  81      
    lea ecx,[ebp-8] (symtab[1048])        ;#00442367: 215115 F8                  vu 02 20  1  81      
    mov esi,[#00402448] (ppp_Nest)        ;#0044236A: 213065 48244000            uv 40 00  1  82      
    mov edx,934                           ;#00442370: 272 A6030000               vu 04 00  1  82      
    mov al,0                              ;#00442375: 260 00                     uv 01 00  1  83      
    call #00460FE5 (:%pSubse1)            ;#00442377: 350 69EC0100               v  00 00  1  83      
    xor edi,edi                           ;#0044237C: 061377                     uv 80 80  1  84      
    mov eax,[ebp-8] (symtab[1048])        ;#0044237E: 213105 F8                  vu 01 20  1  84      
    mov esi,25                            ;#00442381: 276 19000000               uv 40 00  1  85      
    mov edx,1048                          ;#00442386: 272 18040000               vu 04 00  1  85      
    call #0045F8B0 (:%opJcc)              ;#0044238B: 350 20D50100               v  00 00  1  86      
    jl #004423BD                          ;#00442390: 174 2B                     v  00 00  1  87      
;   744         sput("\n")
    mov ecx,6                             ;#00442392: 271 06000000               uv 02 00  1  88      
    mov edx,954                           ;#00442397: 272 BA030000               vu 04 00  1  88      
    call #00462C02 (:%opFrame) (sput)     ;#0044239C: 350 61080200               v  00 00  1  89      
    mov ecx,[#00402330]                   ;#004423A1: 213015 30234000            uv 02 00  1  90      
    mov [ebp] (txt),ecx                   ;#004423A7: 211115 00                  uv 00 22  1  91 02   
    add dword[ebx+ecx*4-8],1              ;#004423AA: 203104213 F8 01            u  00 0A  3  93    *02*
    mov [ebp+28] (retaddr),#004423BB      ;#004423AF: 307105 1C BB234400         vu 00 20  1  95      
    jmp #004424FD (code:sput)             ;#004423B6: 351 42010000               v  00 00  1  96      
    jmp #004423E2                         ;#004423BB: 353 25                     v  00 00  1  97      
;   745     elsif plen then
    mov edi,[#00402484] (plen)            ;#004423BD: 213075 84244000            uv 80 00  1  98      
    test edi,edi                          ;#004423C3: 205377                     uv 00 80  1  99 80   
    je #004423E2                          ;#004423C5: 164 1B                     v  00 00  1  99      
;   746         spurge()
    mov ecx,1                             ;#004423C7: 271 01000000               uv 02 00  1 100      
    mov edx,952                           ;#004423CC: 272 B8030000               vu 04 00  1 100      
    call #00462C02 (:%opFrame) (spurge)   ;#004423D1: 350 2C080200               v  00 00  1 101      
    mov [ebp+28] (retaddr),#004423E2      ;#004423D6: 307105 1C E2234400         uv 00 20  1 102      
    jmp #00442440 (code:spurge)           ;#004423DD: 351 5E000000               v  00 00  1 102      
;   747     end if
;   748     options = setOpt(options) -- restore
    mov ecx,7                             ;#004423E2: 271 07000000               uv 02 00  1 103      
    mov edx,1032                          ;#004423E7: 272 08040000               vu 04 00  1 103      
    call #00462C02 (:%opFrame) (setOpt)   ;#004423EC: 350 11080200               v  00 00  1 104      
    mov edi,[ebp+20] (prevebp)            ;#004423F1: 213175 14                  uv 80 20  1 105      
    mov eax,[edi-4]                       ;#004423F4: 213107 FC                  uv 01 80  1 108 80 *80*
    mov [edi-4], dword h4                 ;#004423F7: 307107 FC 00000040         vu 00 80  1 108      
    cmp eax,h4                            ;#004423FE: 075 00000040               uv 00 01  1 109      
    jne #0044240F                         ;#00442403: 165 0A                     v  00 00  1 109      
    mov esi,1047                          ;#00442405: 276 17040000               uv 40 00  1 110      
    call #00462744 (:%pUnassigned)        ;#0044240A: 350 35030200               v  00 00  1 110      
    mov [ebp] (options),eax               ;#0044240F: 211105 00                  uv 00 21  1 111      
    mov [ebp+28] (retaddr),#0044241E      ;#00442412: 307105 1C 1E244400         vu 00 20  1 111      
    jmp #00444243 (code:setOpt)           ;#00442419: 351 251E0000               v  00 00  1 112      
    push eax                              ;#0044241E: 120                        uv 00 01  1 113      
    mov esi,[ebp-4] (options)             ;#0044241F: 213165 FC                  vu 40 20  1 113      
    cmp esi,h4                            ;#00442422: 201376 00000040            uv 00 40  1 114      
    jle #00442438                         ;#00442428: 176 0E                     v  00 00  1 114      
    sub dword[ebx+esi*4-8],1              ;#0044242A: 203154263 F8 01            u  00 48  3 115      
    jne #00442438                         ;#0044242F: 165 07                     v  00 00  1 117      
    mov edx,esi                           ;#00442431: 213326                     uv 04 40  1 118      
    call #004639A8 (:%pDealloc)           ;#00442433: 350 70150200               v  00 00  1 118      
    pop dword[ebp-4] (options)            ;#00442438: 217105 FC                  np 00 20  3 119      
    jmp #00462C8F (:%opRetf)              ;#0044243B: 351 4F080200               v  00 00  1 122      
;   749 end procedure
;   750 
;   751 global procedure ppEx(object o, sequence options)
    mov eax,[ebp-4] (options)             ;#00442143: 213105 FC                  uv 01 20  1   1      
    cmp eax,h4                            ;#00442146: 075 00000040               uv 00 01  1   2 01   
    jl #00442154                          ;#0044214B: 174 07                     v  00 00  1   2      
    test byte[ebx+eax*4-1],#80            ;#0044214D: 366104203 FF 80            u  00 09  2   3      
    jne #0044215E                         ;#00442152: 165 0A                     v  00 00  1   4      
    mov ecx,1050                          ;#00442154: 271 1A040000               uv 02 00  1   5      
    call #00462D8D (:%opTcFail)           ;#00442159: 350 2F0C0200               v  00 00  1   5      
;   752 -- pretty print object with selected options (as per ppOpt)
;   753 -- The previous pretty_print options are restored on exit.
;   754     pp_Ex(o,options)
    mov ecx,3                             ;#0044215E: 271 03000000               uv 02 00  1   6      
    mov edx,1045                          ;#00442163: 272 15040000               vu 04 00  1   6      
    call #00462C02 (:%opFrame) (pp_Ex)    ;#00442168: 350 950A0200               v  00 00  1   7      
    mov edi,[ebp+20] (prevebp)            ;#0044216D: 213175 14                  uv 80 20  1   8      
    mov eax,[edi]                         ;#00442170: 213007                     uv 01 80  1  11 80 *80*
    xor ebx,ebx                           ;#00442172: 061333                     vu 08 08  1  11      
    cmp eax,h4                            ;#00442174: 075 00000040               uv 00 01  1  12      
    jl #00442185                          ;#00442179: 174 0A                     v  00 00  1  12      
    add dword[ebx+eax*4-8],1              ;#0044217B: 203104203 F8 01            u  00 09  3  13      
    cmp eax,1049                          ;#00442180: 075 19040000               vu 00 01  1  15      
    mov [ebp] (o),eax                     ;#00442185: 211105 00                  uv 00 21  1  16      
    mov edi,[ebp+20] (prevebp)            ;#00442188: 213175 14                  vu 80 20  1  16      
    mov eax,[edi-4]                       ;#0044218B: 213107 FC                  uv 01 80  1  19    *80*
    xor ebx,ebx                           ;#0044218E: 061333                     vu 08 08  1  19      
    cmp eax,h4                            ;#00442190: 075 00000040               uv 00 01  1  20      
    jl #004421A1                          ;#00442195: 174 0A                     v  00 00  1  20      
    add dword[ebx+eax*4-8],1              ;#00442197: 203104203 F8 01            u  00 09  3  21      
    cmp eax,1050                          ;#0044219C: 075 1A040000               vu 00 01  1  23      
    mov [ebp-4] (options),eax             ;#004421A1: 211105 FC                  uv 00 21  1  24      
    mov [ebp+28] (retaddr),#004421B0      ;#004421A4: 307105 1C B0214400         vu 00 20  1  24      
    jmp #004421B5 (code:pp_Ex)            ;#004421AB: 351 05000000               v  00 00  1  25      
    jmp #00462C8F (:%opRetf)              ;#004421B0: 351 DA0A0200               v  00 00  1  26      
;   755 end procedure
;   756 
;   757 global procedure pp(object o, sequence options={})
    mov edi,[ebp-4] (options)             ;#00444E70: 213175 FC                  uv 80 20  1   1      
    cmp edi,h4                            ;#00444E73: 201377 00000040            uv 00 80  1   2 80   
    jne #00444E8D                         ;#00444E79: 165 12                     v  00 00  1   2      
    lea eax,[ebp-4] (options)             ;#00444E7B: 215105 FC                  uv 01 20  1   3      
    xor edx,edx                           ;#00444E7E: 061322                     vu 04 04  1   3      
    push #00444E8B                        ;#00444E80: 150 8B4E4400               uv 00 00  1   4      
    push eax                              ;#00444E85: 120                        vu 00 01  1   4      
    jmp #00460143 (:%pMkSq)               ;#00444E86: 351 B8B20100               v  00 00  1   5      
    jmp #00444EA0                         ;#00444E8B: 353 13                     v  00 00  1   6      
    jl #00444E96                          ;#00444E8D: 174 07                     v  00 00  1   7      
    test byte[ebx+edi*4-1],#80            ;#00444E8F: 366104273 FF 80            u  00 88  2   8      
    jne #00444EA0                         ;#00444E94: 165 0A                     v  00 00  1   9      
    mov ecx,1052                          ;#00444E96: 271 1C040000               uv 02 00  1  10      
    call #00462D8D (:%opTcFail)           ;#00444E9B: 350 EDDE0100               v  00 00  1  10      
;   758 -- pretty print
;   759 -- For options see ppEx, ppOpt, and ppExf
;   760     pp_Ex(o,options)
    mov ecx,3                             ;#00444EA0: 271 03000000               uv 02 00  1  11      
    mov edx,1045                          ;#00444EA5: 272 15040000               vu 04 00  1  11      
    call #00462C02 (:%opFrame) (pp_Ex)    ;#00444EAA: 350 53DD0100               v  00 00  1  12      
    mov edi,[ebp+20] (prevebp)            ;#00444EAF: 213175 14                  uv 80 20  1  13      
    mov eax,[edi]                         ;#00444EB2: 213007                     uv 01 80  1  16 80 *80*
    xor ebx,ebx                           ;#00444EB4: 061333                     vu 08 08  1  16      
    cmp eax,h4                            ;#00444EB6: 075 00000040               uv 00 01  1  17      
    jl #00444EC7                          ;#00444EBB: 174 0A                     v  00 00  1  17      
    add dword[ebx+eax*4-8],1              ;#00444EBD: 203104203 F8 01            u  00 09  3  18      
    cmp eax,1051                          ;#00444EC2: 075 1B040000               vu 00 01  1  20      
    mov [ebp] (o),eax                     ;#00444EC7: 211105 00                  uv 00 21  1  21      
    mov edi,[ebp+20] (prevebp)            ;#00444ECA: 213175 14                  vu 80 20  1  21      
    mov eax,[edi-4]                       ;#00444ECD: 213107 FC                  uv 01 80  1  24    *80*
    xor ebx,ebx                           ;#00444ED0: 061333                     vu 08 08  1  24      
    cmp eax,h4                            ;#00444ED2: 075 00000040               uv 00 01  1  25      
    jl #00444EE3                          ;#00444ED7: 174 0A                     v  00 00  1  25      
    add dword[ebx+eax*4-8],1              ;#00444ED9: 203104203 F8 01            u  00 09  3  26      
    cmp eax,1052                          ;#00444EDE: 075 1C040000               vu 00 01  1  28      
    mov [ebp-4] (options),eax             ;#00444EE3: 211105 FC                  uv 00 21  1  29      
    mov [ebp+28] (retaddr),#00444EF2      ;#00444EE6: 307105 1C F24E4400         vu 00 20  1  29      
    jmp #004421B5 (code:pp_Ex)            ;#00444EED: 351 C3D2FFFF               v  00 00  1  30      
    jmp #00462C8F (:%opRetf)              ;#00444EF2: 351 98DD0100               v  00 00  1  31      
;   761 end procedure
;   762 
;   763 global function ppExf(object o, sequence options)
    mov esi,[ebp-4] (options)             ;#0044FFD9: 213165 FC                  uv 40 20  1   1      
    cmp esi,h4                            ;#0044FFDC: 201376 00000040            uv 00 40  1   2 40   
    jl #0044FFEB                          ;#0044FFE2: 174 07                     v  00 00  1   2      
    test byte[ebx+esi*4-1],#80            ;#0044FFE4: 366104263 FF 80            u  00 48  2   3      
    jne #0044FFF5                         ;#0044FFE9: 165 0A                     v  00 00  1   4      
    mov ecx,1054                          ;#0044FFEB: 271 1E040000               uv 02 00  1   5      
    call #00462D8D (:%opTcFail)           ;#0044FFF0: 350 982D0100               v  00 00  1   5      
;   764 -- return object pretty printed, with options (as per ppOpt)
;   765 -- The previous pretty_print options are restored on exit.
;   766 --3/4/24: (changed my mind)
;   767 --  bool ppNestFound = false
;   768     for i=1 to length(options) by 2 do
    mov ecx,[ebx+esi*4-12]                ;#0044FFF5: 213114263 F4               uv 02 48  1   6      
    mov [ebp-8] (symtab[1055]),ecx        ;#0044FFF9: 211115 F8                  uv 00 22  1   7 02   
    mov [ebp-12] (i), dword 1             ;#0044FFFC: 307105 F4 01000000         vu 00 20  1   7      
    cmp ecx,1                             ;#00450003: 201371 01000000            uv 00 02  1   8      
    jl #004500EE                          ;#00450009: 017214 DF000000            v  00 00  1   8      
;   769         if options[i]=pp_Nest then
    mov edi,[ebp-12] (i)                  ;#0045000F: 213175 F4                  uv 80 20  1   9      
    lea ecx,[ebp-16] (symtab[1057])       ;#00450012: 215115 F0                  vu 02 20  1   9      
    mov esi,[ebp-4] (options)             ;#00450015: 213165 FC                  uv 40 20  1  10      
    mov edx,1054                          ;#00450018: 272 1E040000               vu 04 00  1  10      
    mov al,0                              ;#0045001D: 260 00                     uv 01 00  1  11      
    call #00460FE5 (:%pSubse1)            ;#0045001F: 350 C10F0100               v  00 00  1  11      
    mov eax,[ebp-16] (symtab[1057])       ;#00450024: 213105 F0                  uv 01 20  1  12      
    cmp eax,7                             ;#00450027: 203370 07                  uv 00 01  1  13 01   
    jne #004500DA                         ;#0045002A: 017205 AA000000            v  00 00  1  13      
;   770             ppEx(o,options&{pp_File,0})
    mov ecx,3                             ;#00450030: 271 03000000               uv 02 00  1  14      
    push #00450051                        ;#00450035: 150 51004500               vu 00 00  1  14      
    push dword[#00402018]                 ;#0045003A: 377065 18204000            np 00 00  2  15      
    push dword[#004020A0] (pp_File)       ;#00450040: 377065 A0204000            np 00 00  2  17      
    push dword[ebp-4] (options)           ;#00450046: 377165 FC                  np 00 20  2  19      
    lea eax,[ebp-20] (symtab[1058])       ;#00450049: 215105 EC                  uv 01 20  1  21      
    jmp #0045FF95 (:%opConcatN)           ;#0045004C: 351 44FF0000               v  00 00  1  21      
    mov ecx,2                             ;#00450051: 271 02000000               uv 02 00  1  22      
    mov edx,404                           ;#00450056: 272 94010000               vu 04 00  1  22      
    call #00462C02 (:%opFrame) (ppEx)     ;#0045005B: 350 A22B0100               v  00 00  1  23      
    mov edi,[ebp+20] (prevebp)            ;#00450060: 213175 14                  uv 80 20  1  24      
    mov eax,[edi]                         ;#00450063: 213007                     uv 01 80  1  27 80 *80*
    xor ebx,ebx                           ;#00450065: 061333                     vu 08 08  1  27      
    cmp eax,h4                            ;#00450067: 075 00000040               uv 00 01  1  28      
    jl #00450078                          ;#0045006C: 174 0A                     v  00 00  1  28      
    add dword[ebx+eax*4-8],1              ;#0045006E: 203104203 F8 01            u  00 09  3  29      
    cmp eax,1053                          ;#00450073: 075 1D040000               vu 00 01  1  31      
    mov [ebp] (o),eax                     ;#00450078: 211105 00                  uv 00 21  1  32      
    mov edi,[ebp+20] (prevebp)            ;#0045007B: 213175 14                  vu 80 20  1  32      
    mov eax,[edi-20]                      ;#0045007E: 213107 EC                  uv 01 80  1  35    *80*
    mov [edi-20], dword h4                ;#00450081: 307107 EC 00000040         vu 00 80  1  35      
    cmp eax,h4                            ;#00450088: 075 00000040               uv 00 01  1  36      
    jne #00450099                         ;#0045008D: 165 0A                     v  00 00  1  36      
    mov esi,1058                          ;#0045008F: 276 22040000               uv 40 00  1  37      
    call #00462744 (:%pUnassigned)        ;#00450094: 350 AB260100               v  00 00  1  37      
    mov [ebp-4] (options),eax             ;#00450099: 211105 FC                  uv 00 21  1  38      
    mov [ebp+28] (retaddr),#004500A8      ;#0045009C: 307105 1C A8004500         vu 00 20  1  38      
    jmp #00442143 (code:ppEx)             ;#004500A3: 351 9B20FFFF               v  00 00  1  39      
;   771             return ppp_result
    mov ecx,[#0040247C] (ppp_result)      ;#004500A8: 213015 7C244000            uv 02 00  1  40      
    cmp ecx,h4                            ;#004500AE: 201371 00000040            uv 00 02  1  41 02   
    jne #004500C0                         ;#004500B4: 165 0A                     v  00 00  1  41      
    mov esi,947                           ;#004500B6: 276 B3030000               uv 40 00  1  42      
    call #00462744 (:%pUnassigned)        ;#004500BB: 350 84260100               v  00 00  1  42      
    mov eax,ecx                           ;#004500C0: 211310                     uv 01 02  1  43      
    cmp eax,h4                            ;#004500C2: 075 00000040               uv 00 01  1  44 01   
    jl #004500D3                          ;#004500C7: 174 0A                     v  00 00  1  44      
    add dword[ebx+eax*4-8],1              ;#004500C9: 203104203 F8 01            u  00 09  3  45      
    cmp eax,947                           ;#004500CE: 075 B3030000               vu 00 01  1  47      
    jmp #00462C8F (:%opRetf)              ;#004500D3: 351 B72B0100               v  00 00  1  48      
;   772 --          ppNestFound = true
;   773             exit
    jmp #004500EE                         ;#004500D8: 353 14                     v  00 00  1  49      
;   774         end if
;   775     end for
    mov edi,[ebp-12] (i)                  ;#004500DA: 213175 F4                  uv 80 20  1  50      
    mov esi,[ebp-8] (symtab[1055])        ;#004500DD: 213165 F8                  vu 40 20  1  50      
    add edi,2                             ;#004500E0: 203307 02                  uv 80 80  1  51      
    cmp edi,esi                           ;#004500E3: 073376                     uv 00 C0  1  52 80   
    mov [ebp-12] (i),edi                  ;#004500E5: 211175 F4                  vu 00 A0  1  52      
    jle #0045000F                         ;#004500E8: 017216 21FFFFFF            v  00 00  1  53      
;   776 --  if not ppNestFound and (not ppp_Init or ppp_Nest==0 or ppp_Nest=={1,0}) then
;   777 --3/4/24:
;   778     if not ppp_Init or ppp_Nest==0 or ppp_Nest=={1,0} then
    mov eax,[#00402458] (ppp_Init)        ;#004500EE: 241 58244000               uv 01 00  1  54      
    test eax,eax                          ;#004500F3: 205300                     uv 00 01  1  55 01   
    je #00450139                          ;#004500F5: 164 42                     v  00 00  1  55      
    mov ecx,[#00402448] (ppp_Nest)        ;#004500F7: 213015 48244000            uv 02 00  1  56      
    cmp ecx,0                             ;#004500FD: 203371 00                  uv 00 02  1  57 02   
    je #00450139                          ;#00450100: 164 37                     v  00 00  1  57      
    lea eax,[ebp-24] (symtab[1059])       ;#00450102: 215105 E8                  uv 01 20  1  58      
    mov edx,2                             ;#00450105: 272 02000000               vu 04 00  1  58      
    push #0045011C                        ;#0045010A: 150 1C014500               uv 00 00  1  59      
    push eax                              ;#0045010F: 120                        vu 00 01  1  59      
    push 0                                ;#00450110: 152 00                     uv 00 00  1  60      
    push 1                                ;#00450112: 152 01                     vu 00 00  1  60      
    mov edi,[ebp-24] (symtab[1059])       ;#00450114: 213175 E8                  uv 80 20  1  61      
    jmp #00460143 (:%pMkSq)               ;#00450117: 351 27000100               v  00 00  1  61      
    mov edi,[ebp-24] (symtab[1059])       ;#0045011C: 213175 E8                  uv 80 20  1  62      
    mov eax,[#00402448] (ppp_Nest)        ;#0045011F: 241 48244000               vu 01 00  1  62      
    mov esi,1059                          ;#00450124: 276 23040000               uv 40 00  1  63      
    mov edx,934                           ;#00450129: 272 A6030000               vu 04 00  1  63      
    call #0045F91F (:%opJccE)             ;#0045012E: 350 ECF70000               v  00 00  1  64      
    jne #004501BF                         ;#00450133: 017205 86000000            v  00 00  1  65      
;   779         ppEx(o,options&{pp_File,0,pp_Nest,-1})
    mov ecx,5                             ;#00450139: 271 05000000               uv 02 00  1  66      
    push #00450166                        ;#0045013E: 150 66014500               vu 00 00  1  66      
    push dword[#00402014]                 ;#00450143: 377065 14204000            np 00 00  2  67      
    push dword[#004020B8] (pp_Nest)       ;#00450149: 377065 B8204000            np 00 00  2  69      
    push dword[#00402018]                 ;#0045014F: 377065 18204000            np 00 00  2  71      
    push dword[#004020A0] (pp_File)       ;#00450155: 377065 A0204000            np 00 00  2  73      
    push dword[ebp-4] (options)           ;#0045015B: 377165 FC                  np 00 20  2  75      
    lea eax,[ebp-20] (symtab[1058])       ;#0045015E: 215105 EC                  uv 01 20  1  77      
    jmp #0045FF95 (:%opConcatN)           ;#00450161: 351 2FFE0000               v  00 00  1  77      
    mov ecx,2                             ;#00450166: 271 02000000               uv 02 00  1  78      
    mov edx,404                           ;#0045016B: 272 94010000               vu 04 00  1  78      
    call #00462C02 (:%opFrame) (ppEx)     ;#00450170: 350 8D2A0100               v  00 00  1  79      
    mov edi,[ebp+20] (prevebp)            ;#00450175: 213175 14                  uv 80 20  1  80      
    mov eax,[edi]                         ;#00450178: 213007                     uv 01 80  1  83 80 *80*
    xor ebx,ebx                           ;#0045017A: 061333                     vu 08 08  1  83      
    cmp eax,h4                            ;#0045017C: 075 00000040               uv 00 01  1  84      
    jl #0045018D                          ;#00450181: 174 0A                     v  00 00  1  84      
    add dword[ebx+eax*4-8],1              ;#00450183: 203104203 F8 01            u  00 09  3  85      
    cmp eax,1053                          ;#00450188: 075 1D040000               vu 00 01  1  87      
    mov [ebp] (o),eax                     ;#0045018D: 211105 00                  uv 00 21  1  88      
    mov edi,[ebp+20] (prevebp)            ;#00450190: 213175 14                  vu 80 20  1  88      
    mov eax,[edi-20]                      ;#00450193: 213107 EC                  uv 01 80  1  91    *80*
    mov [edi-20], dword h4                ;#00450196: 307107 EC 00000040         vu 00 80  1  91      
    cmp eax,h4                            ;#0045019D: 075 00000040               uv 00 01  1  92      
    jne #004501AE                         ;#004501A2: 165 0A                     v  00 00  1  92      
    mov esi,1058                          ;#004501A4: 276 22040000               uv 40 00  1  93      
    call #00462744 (:%pUnassigned)        ;#004501A9: 350 96250100               v  00 00  1  93      
    mov [ebp-4] (options),eax             ;#004501AE: 211105 FC                  uv 00 21  1  94      
    mov [ebp+28] (retaddr),#004501BD      ;#004501B1: 307105 1C BD014500         vu 00 20  1  94      
    jmp #00442143 (code:ppEx)             ;#004501B8: 351 861FFFFF               v  00 00  1  95      
    jmp #00450229                         ;#004501BD: 353 6A                     v  00 00  1  96      
;   780     else
;   781         integer was_pp_File = ppp_File
    mov esi,[#00402478] (ppp_File)        ;#004501BF: 213065 78244000            uv 40 00  1  97      
    mov [ebp-28] (was_pp_File),esi        ;#004501C5: 211165 E4                  uv 00 60  1  98 40   
;   782         ppp_File = 0
    mov [#00402478] (ppp_File),ebx        ;#004501C8: 211035 78244000            vu 00 08  1  98      
;   783         ppEx(o,options)
    mov ecx,2                             ;#004501CE: 271 02000000               uv 02 00  1  99      
    mov edx,404                           ;#004501D3: 272 94010000               vu 04 00  1  99      
    call #00462C02 (:%opFrame) (ppEx)     ;#004501D8: 350 252A0100               v  00 00  1 100      
    mov edi,[ebp+20] (prevebp)            ;#004501DD: 213175 14                  uv 80 20  1 101      
    mov eax,[edi]                         ;#004501E0: 213007                     uv 01 80  1 104 80 *80*
    xor ebx,ebx                           ;#004501E2: 061333                     vu 08 08  1 104      
    cmp eax,h4                            ;#004501E4: 075 00000040               uv 00 01  1 105      
    jl #004501F5                          ;#004501E9: 174 0A                     v  00 00  1 105      
    add dword[ebx+eax*4-8],1              ;#004501EB: 203104203 F8 01            u  00 09  3 106      
    cmp eax,1053                          ;#004501F0: 075 1D040000               vu 00 01  1 108      
    mov [ebp] (o),eax                     ;#004501F5: 211105 00                  uv 00 21  1 109      
    mov edi,[ebp+20] (prevebp)            ;#004501F8: 213175 14                  vu 80 20  1 109      
    mov eax,[edi-4]                       ;#004501FB: 213107 FC                  uv 01 80  1 112    *80*
    xor ebx,ebx                           ;#004501FE: 061333                     vu 08 08  1 112      
    cmp eax,h4                            ;#00450200: 075 00000040               uv 00 01  1 113      
    jl #00450211                          ;#00450205: 174 0A                     v  00 00  1 113      
    add dword[ebx+eax*4-8],1              ;#00450207: 203104203 F8 01            u  00 09  3 114      
    cmp eax,1054                          ;#0045020C: 075 1E040000               vu 00 01  1 116      
    mov [ebp-4] (options),eax             ;#00450211: 211105 FC                  uv 00 21  1 117      
    mov [ebp+28] (retaddr),#00450220      ;#00450214: 307105 1C 20024500         vu 00 20  1 117      
    jmp #00442143 (code:ppEx)             ;#0045021B: 351 231FFFFF               v  00 00  1 118      
;   784         ppp_File = was_pp_File
    mov ecx,[ebp-28] (was_pp_File)        ;#00450220: 213115 E4                  uv 02 20  1 119      
    mov [#00402478] (ppp_File),ecx        ;#00450223: 211015 78244000            uv 00 02  1 120 02   
;   785     end if
;   786     return ppp_result
    mov edi,[#0040247C] (ppp_result)      ;#00450229: 213075 7C244000            vu 80 00  1 120      
    cmp edi,h4                            ;#0045022F: 201377 00000040            uv 00 80  1 121      
    jne #00450241                         ;#00450235: 165 0A                     v  00 00  1 121      
    mov esi,947                           ;#00450237: 276 B3030000               uv 40 00  1 122      
    call #00462744 (:%pUnassigned)        ;#0045023C: 350 03250100               v  00 00  1 122      
    mov eax,edi                           ;#00450241: 211370                     uv 01 80  1 123      
    cmp eax,h4                            ;#00450243: 075 00000040               uv 00 01  1 124 01   
    jl #00450254                          ;#00450248: 174 0A                     v  00 00  1 124      
    add dword[ebx+eax*4-8],1              ;#0045024A: 203104203 F8 01            u  00 09  3 125      
    cmp eax,947                           ;#0045024F: 075 B3030000               vu 00 01  1 127      
    jmp #00462C8F (:%opRetf)              ;#00450254: 351 362A0100               v  00 00  1 128      
;   787 end function
;   788 
;   789 global function ppf(object o, sequence options={})
    mov esi,[ebp-4] (options)             ;#00450259: 213165 FC                  uv 40 20  1   1      
    cmp esi,h4                            ;#0045025C: 201376 00000040            uv 00 40  1   2 40   
    jne #00450278                         ;#00450262: 165 14                     v  00 00  1   2      
    lea eax,[ebp-4] (options)             ;#00450264: 215105 FC                  uv 01 20  1   3      
    xor edx,edx                           ;#00450267: 061322                     vu 04 04  1   3      
    push #00450276                        ;#00450269: 150 76024500               uv 00 00  1   4      
    push eax                              ;#0045026E: 120                        vu 00 01  1   4      
    mov edi,esi                           ;#0045026F: 211367                     uv 80 40  1   5      
    jmp #00460143 (:%pMkSq)               ;#00450271: 351 CDFE0000               v  00 00  1   5      
    jmp #0045028B                         ;#00450276: 353 13                     v  00 00  1   6      
    jl #00450281                          ;#00450278: 174 07                     v  00 00  1   7      
    test byte[ebx+esi*4-1],#80            ;#0045027A: 366104263 FF 80            u  00 48  2   8      
    jne #0045028B                         ;#0045027F: 165 0A                     v  00 00  1   9      
    mov ecx,1062                          ;#00450281: 271 26040000               uv 02 00  1  10      
    call #00462D8D (:%opTcFail)           ;#00450286: 350 022B0100               v  00 00  1  10      
;   790 -- return object pretty printed (with embedded \n), no trailing \n
;   791     return ppExf(o,options)
    mov ecx,8                             ;#0045028B: 271 08000000               uv 02 00  1  11      
    mov edx,262                           ;#00450290: 272 06010000               vu 04 00  1  11      
    call #00462C02 (:%opFrame) (ppExf)    ;#00450295: 350 68290100               v  00 00  1  12      
    mov edi,[ebp+20] (prevebp)            ;#0045029A: 213175 14                  uv 80 20  1  13      
    mov eax,[edi]                         ;#0045029D: 213007                     uv 01 80  1  16 80 *80*
    xor ebx,ebx                           ;#0045029F: 061333                     vu 08 08  1  16      
    cmp eax,h4                            ;#004502A1: 075 00000040               uv 00 01  1  17      
    jl #004502B2                          ;#004502A6: 174 0A                     v  00 00  1  17      
    add dword[ebx+eax*4-8],1              ;#004502A8: 203104203 F8 01            u  00 09  3  18      
    cmp eax,1061                          ;#004502AD: 075 25040000               vu 00 01  1  20      
    mov [ebp] (o),eax                     ;#004502B2: 211105 00                  uv 00 21  1  21      
    mov edi,[ebp+20] (prevebp)            ;#004502B5: 213175 14                  vu 80 20  1  21      
    mov eax,[edi-4]                       ;#004502B8: 213107 FC                  uv 01 80  1  24    *80*
    xor ebx,ebx                           ;#004502BB: 061333                     vu 08 08  1  24      
    cmp eax,h4                            ;#004502BD: 075 00000040               uv 00 01  1  25      
    jl #004502CE                          ;#004502C2: 174 0A                     v  00 00  1  25      
    add dword[ebx+eax*4-8],1              ;#004502C4: 203104203 F8 01            u  00 09  3  26      
    cmp eax,1062                          ;#004502C9: 075 26040000               vu 00 01  1  28      
    mov [ebp-4] (options),eax             ;#004502CE: 211105 FC                  uv 00 21  1  29      
    mov [ebp+28] (retaddr),#004502DD      ;#004502D1: 307105 1C DD024500         vu 00 20  1  29      
    jmp #0044FFD9 (code:ppExf)            ;#004502D8: 351 FCFCFFFF               v  00 00  1  30      
    jmp #00462C8F (:%opRetf)              ;#004502DD: 351 AD290100               v  00 00  1  31      
;   792 end function
;   793 
;   794 --sequence s 
;   795 --s={{{"blue", "red"}, {"cyan", "white"}},
;   796 --   {{"blue", "red"}, {"cyan", "white"}}}
;   797 --
;   798 ---- s={1,{2,{3,3},2},1}
;   799 --ppEx(s,{pp_Nest,0})
;   800 --puts(1, "---------------------------\n")
;   801 --ppEx(s,{pp_Nest,1})
;   802 --puts(1, "---------------------------\n")
;   803 --ppEx(s,{pp_Nest,2})
;   804 --puts(1, "---------------------------\n")
;   805 --ppEx(s,{pp_Nest,{2,2}})
;   806 --puts(1, "---------------------------\n")
;   807 --ppEx(s,{pp_Nest,3})
;   808 --if getc(0) then end if
;   809 --s={{1, 2, 3, 4}, {1, 2, 4, 3}, {1, 3, 2, 4}, {1, 3, 4, 2}, {1, 4, 2, 3},
;   810 -- {1, {4, 3}, 2}, {2, 1, 3, 4}, {2, 1, 4, 3}, {2, 3, 1, 4}, {2, 3, 4, 1},
;   811 -- {{2, 4, 1, 3}, {2, 4, 3, 1}}, {3, 1, 2, 4}, {3, 1, 4, 2}, {3, 2, 1, 4},
;   812 -- {3, 2, 4, 1}, {3, 4, 1, 2}, {3, 4, 2, 1}, {4, 1, 2, 3}, {4, 1, 3, 2},
;   813 -- {4, 2, 1, 3}, {4, 2, 3, 1}, {4, 3, 1, 2}, {4, 3, 2, 1}}
;   814 --ppEx(s,{pp_Nest,0})
;   815 --puts(1, "---------------------------\n")
;   816 --ppEx(s,{pp_Nest,1})
;   817 --pp("Hello World\n")
;   818 --if getc(0) then end if
;C:\Phix\builtins\puts1h.e:
;==========================
;     1 --
;     2 -- puts1h.e
;     3 -- ========
;     4 --
;     5 --  Low-level (/temp/test/diag) simplistic console i/o hll wrapper routines.
;     6 --
;     7 --  This is /NOT/ an autoinclude, and there are no plans to ever make it one, whereas
;     8 --  builtins\VM\puts1.e (which this file uses) /IS/ a proper optable'd autoinclude.
;     9 --
;    10 --  The hll routines below should also serve as all the documentation you could ever possibly
;    11 --  need, including precise instructions for/examples of invoking things from inline assembly.
;    12 --
;    13 
;    14 include builtins\VM\puts1.e     -- the low-level #ilASM that the following routines call.
;    15 
;    16 global procedure puts1(string s)
;    17 -- Equivalent to puts(1,s)
;    18 --  if not string(s) then s = toString(s) end if    -- (maybe one day, but probably better off being done in the calling routine)
;    19     #ilASM{ 
;    20         [32]
;    21             mov edi,[s]
                    mov edi,[ebp] (s)     ;#00442136: 213175 00                  uv 80 20  1   1      
;    22             call :%puts1    -- (nb use :%puts1ediesi if edi is not a phix string)
                    call #004627FE (:%puts1)  ;#00442139: 350 C0060200               v  00 00  1   1      
;    23         [64]
;    24             mov rdi,[s]
;    25             call :%puts1    -- (nb use :%puts1rdirsi if rdi is not a phix string)
;    26 --/*
;    27         [ARM]
;    28             lea r0,[s]
;    29             mov r7,[r0]
;    30             call :%puts1    -- (nb use :%puts1r7r6 if r7 is not a phix string)
;    31 --*/
;    32         []
;    33     }
    jmp #00462C8F (:%opRetf)              ;#0044213E: 351 4C0B0200               v  00 00  1   2      
;    34 end procedure
;    35 
;    36 global procedure puthex32(atom a, integer showcr=1)
    mov ecx,[ebp-4] (showcr)              ;#00442114: 213115 FC                  uv 02 20  1   1      
    cmp ecx,h4                            ;#00442117: 201371 00000040            uv 00 02  1   2 02   
    jne #00442126                         ;#0044211D: 165 07                     v  00 00  1   2      
    mov [ebp-4] (showcr), dword 1         ;#0044211F: 307105 FC 01000000         uv 00 20  1   3      
;    37 --
;    38 -- Display an unsigned integer on the console in hexadecimal.
;    39 -- Equivalent to printf(1,"%08x%s",{a,(""|"\n")}))
;    40 -- Note that a is only an atom to cover (32-bit integer) values #3FFFFFFF..#FFFFFFFF, ...
;    41 --  a = and_bits(a,#FFFFFFFF) -- ... and it behaves as if this line was not commented out.
;    42 --
;    43     #ilASM{ 
;    44         [32]
;    45             mov edx,[a]
                    mov edx,[ebp] (a)     ;#00442126: 213125 00                  vu 04 20  1   3      
;    46             push [showcr]       -- (0 or 1)
                    push dword[ebp-4] (showcr)  ;#00442129: 377165 FC                  np 00 20  2   4      
;    47         [64]
;    48             mov rdx,[a]
;    49             push [showcr]       -- (0 or 1)
;    50 --/*
;    51         [ARM]
;    52 --DEV ldr should cope for local [fp-relative] vars... [erm, no!, but maybe mov???]
;    53             lea r0,[a]
;    54             mov r3,[r0]
;    55 --          ldr r3,[a]  
;    56             ldr r6,[showcr] 
;    57             mov r6,[r6]
;    58 --*/
;    59         []
;    60             call :%puthex32a    -- (nb use :%puthex32 (no "a") if edx/rdx is not a phix atom)
                    call #00462821 (:%puthex32a)  ;#0044212C: 350 F0060200               v  00 00  1   6      
;    61                                 --      (there is also a #ilASM-only :%puthex64 (no "a").)
;    62     }
    jmp #00462C8F (:%opRetf)              ;#00442131: 351 590B0200               v  00 00  1   7      
;    63 end procedure
;    64 
;    65 global procedure putsint(integer i, integer showcr=1)
    mov esi,[ebp-4] (showcr)              ;#004420F2: 213165 FC                  uv 40 20  1   1      
    cmp esi,h4                            ;#004420F5: 201376 00000040            uv 00 40  1   2 40   
    jne #00442104                         ;#004420FB: 165 07                     v  00 00  1   2      
    mov [ebp-4] (showcr), dword 1         ;#004420FD: 307105 FC 01000000         uv 00 20  1   3      
;    66 --
;    67 -- Display a signed integer on the console in decimal, optionally with a trailing cr
;    68 -- Equivalent to printf(1,"%d%s",{i,iff(showcr,"\n","")})
;    69 -- NB it is not meant to display (/work on) anything outside +/-9,999,999,999, if
;    70 --    you have any issues, use puthex32 instead and do the conversions yourself.
;    71 --
;    72     #ilASM{ 
;    73         [32]
;    74             mov eax,[i]
                    mov eax,[ebp] (i)     ;#00442104: 213105 00                  vu 01 20  1   3      
;    75             push [showcr]       -- 0 or 1, 32 or 64 bit.
                    push dword[ebp-4] (showcr)  ;#00442107: 377165 FC                  np 00 20  2   4      
;    76         [64]
;    77             mov rax,[i]
;    78             push [showcr]       -- 0 or 1, 32 or 64 bit.
;    79 --/*
;    80         [ARM]
;    81             lea r0,[i]  
;    82             mov r0,[r0]
;    83             lea r6,[showcr] 
;    84             mov r6,[r6]
;    85 --*/
;    86         []
;    87             call :%putsint      -- (ps should be ok for any 32-bit integer, including > h4)
                    call #004628D1 (:%putsint)  ;#0044210A: 350 C2070200               v  00 00  1   6      
;    88                                 -- ( - by which I mean in e/rax, rather than in integer i)
;    89           }
    jmp #00462C8F (:%opRetf)              ;#0044210F: 351 7B0B0200               v  00 00  1   7      
;    90 end procedure
;    91 
;    92 global procedure getc0()
;    93 --
;    94 -- Equivalent to {} = getc(0)
;    95 --           aka if getc(0) then end if
;    96 --
;    97     #ilASM{ 
;    98             call :%getc0
                    call #00462938 (:%getc0)  ;#004420E8: 350 4B080200               v  00 00  1   1      
;    99           }
    jmp #00462C8F (:%opRetf)              ;#004420ED: 351 9D0B0200               v  00 00  1   2      
;   100 end procedure
;   101 
;C:\Phix\builtins\VM\pSubseN.e:
;==============================
;     1 --
;     2 -- pSubseN.e
;     3 -- =========
;     4 --
;     5 --  Various subscripting routines:
;     6 --
;     7 --      :%pSubse            -- res = ref[idx1][idx2]..[idxn]
;     8 --      :%pSubse1           -- [ecx]=esi[edi], aka p3=p1[p2]
;     9 --      :%pSubse1i          -- [ecx]=esi[edi], aka p3=p1[p2] when [ecx] is integer (no dealloc)
;    10 --      :%pSubse1ip         -- as opSubse1i when p1 is dword-sequence of integer, and p3 is integer
;    11 --      :%pSubse1is         -- eax=esi[edi], aka p3=p1[p2] when esi is string and result is integer
;    12 --
;    13 --  The latter four are optimised forms of :%pSubse, with exactly 1 index and other strict rules.
;    14 --  If porting, you could just (temporarily) implement :%pSubse and use it for everything, but 
;    15 --  that would require matching (temp) changes to psym.e, pmain.e, and pilx86.e.
;    16 --
;    17 
;    18 include builtins\VM\pHeap.e     -- :%pDealloc
;    19 
;    20 include builtins\VM\pFixup.e    -- negative and floating point index handling (:%fixupIndex)
;    21 
;    22 bool ma_ip = false      -- Set true under with js during {a,b} = x operations, to catch any
;    23                         -- attempts to part-modify strings, as in {s[i]} := {ch}, since the
;    24                         -- otherwise excellent JavaScript desequencing will just not cope,
;    25                         -- because strings are immutable in JavaScript. (For eg s[i] = ch
;    26                         -- when not part of multiple assignment, it gets transpiled into
;    27                         -- s=$repe(s,i,ch) which uses substring + fromCharCode + substring 
;    28                         -- in order to get round the whole immutable strings thingymajig.)
;    29                         -- (shadows the one in opRepeN.e via :%pDeSeqip2)
;    30 
;    31 --26/8/22 (spotted in passing)
;    32 --#ilASM{ jmp :%opRetf
;    33 #ilASM{ jmp :!opCallOnceYeNot
                jmp :!opCallOnceYeNot     ;#00460EF6: 351 F8180000               v  00 00  1   1      
;    34 
;    35 --DEV FIXME: (and the :!bang labels below)
;    36 --  ::e04atsaa8
;    37 --      int3
;    38 --  ::e04atsaa0
;    39 --      int3
;    40 --  ::e110ecxesp
;    41 --      int3
;    42     ::e93edx
;    43     [32]
;    44         mov edi,edx
                mov edi,edx               ;#00460EFB: 213372                     uv 80 04  1   2      
;    45         pop edx
                pop edx                   ;#00460EFD: 132                        vu 04 00  1   2      
;    46         mov al,93       -- e93vhnbaav(edi)
                mov al,93                 ;#00460EFE: 260 5D                     uv 01 00  1   3      
;    47         sub edx,1
                sub edx,1                 ;#00460F00: 203352 01                  vu 04 04  1   3      
;    48     [64]
;    49         mov rdi,rdx
;    50         pop rdx
;    51         mov al,93       -- e93vhnbaav(rdi)
;    52         sub rdx,1
;    53     []
;    54         jmp :!iDiag
                jmp #00463E69 (:!iDiag)   ;#00460F03: 351 612F0000               v  00 00  1   4      
;    55         int3
                int3                      ;#00460F08: 314                        np 00 00 13   5      
;    56 
;    57 --Fine, tested:
;    58     [32]
;    59      ::e52jsdnssd
;    60         pop edx
                pop edx                   ;#00460F09: 132                        uv 04 00  1  18      
;    61         xor eax,eax
                xor eax,eax               ;#00460F0A: 061300                     vu 01 01  1  18      
;    62         call :%pDeSeqip
                call #00460A46 (:%pDeSeqip)  ;#00460F0C: 350 35FBFFFF               v  00 00  1  19      
;    63         mov al,52           -- e52jsdnssd
                mov al,52                 ;#00460F11: 260 34                     uv 01 00  1  20      
;    64         sub edx,1
                sub edx,1                 ;#00460F13: 203352 01                  vu 04 04  1  20      
;    65 --      mov [ma_ip],ebx
;    66         jmp :!iDiag
                jmp #00463E69 (:!iDiag)   ;#00460F16: 351 4E2F0000               v  00 00  1  21      
;    67         int3
                int3                      ;#00460F1B: 314                        np 00 00 13  22      
;    68     [64]
;    69      ::e52jsdnssd
;    70         pop rdx
;    71         xor rax,rax
;    72         call :%pDeSeqip
;    73         mov al,52           -- e52jsdnssd
;    74         sub rdx,1
;    75 --      mov [ma_ip],rbx
;    76         jmp :!iDiag
;    77         int3
;    78     []
;    79 
;    80 --/*
;    81 procedure :%pSubse(:%)
;    82 end procedure -- (for Edita/CtrlQ)
;    83 --*/
;    84     :%pSubse    -- res = ref[idx1][idx2]..[idxn]
;    85 ------------
;    86     [32]
;    87         -- calling convention (as hard-coded in pilx86.e):
;    88         --  push <return address>
;    89         --  push <addr res>                                 (or lea reg [ebp-NN], push reg)
;    90         --  push [idxn]..[idx1]     (opUnassign'd)			(or push dword[m32 or ebp+d8/32])
;    91         --  mov ecx,n
;    92         --  mov edx,<addr ref>                              (or lea edx,[ebp+d8/32]
;    93         --  jmp :%pSubse            (actually a call)
;    94         --<return address>
;    95         --  callee must ensure ref(edx) and all indexes are assigned beforehand (ie pmain.e 
;    96         --  should emit any required opUnassigned instructions before the opSubse).
;    97         --  if result is integer, left in eax, otherwise all registers clobbered.
;    98         pop edi
                pop edi                   ;#00460F1C: 137                        uv 80 00  1  35      
;    99         mov eax,[edx]
                mov eax,[edx]             ;#00460F1D: 213002                     vu 01 04  1  35      
;   100     ::opSubseWhile
;   101         cmp eax,h4
                cmp eax,h4                ;#00460F1F: 075 00000040               uv 00 01  1  36      
;   102 --      jl :e04atsaa8           -- attempt to subscript an atom, era @ [esp+ecx*4]
;   103         jg @f
                jg #00460F37              ;#00460F24: 177 11                     v  00 00  1  36      
;   104 --          mov e?dx,[esp+ecx*4+4]
;   105 --          mov e??,[esp+ecx*4]
;   106 --          lea esp,[esp+ecx*4+4]
;   107             lea esp,[esp+ecx*4]
                    lea esp,[esp+ecx*4]   ;#00460F26: 215044214                  uv 10 12  1  37      
;   108             je :e93edx
                    je #00460EFB          ;#00460F29: 164 D0                     v  00 00  1  37      
;   109             pop edx
                    pop edx               ;#00460F2B: 132                        uv 04 00  1  38      
;   110             mov al,4            -- e04atssaa
                    mov al,4              ;#00460F2C: 260 04                     vu 01 00  1  38      
;   111             sub edx,1
                    sub edx,1             ;#00460F2E: 203352 01                  uv 04 04  1  39      
;   112             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00460F31: 351 332F0000               v  00 00  1  39      
;   113             int3
                    int3                  ;#00460F36: 314                        np 00 00 13  40      
;   114       @@:
;   115 --DEV
;   116 --    :!opSubsee92a             -- exception here mapped to opSubsee92aedxfeh
;   117         mov edx,[ebx+eax*4-12]  -- length
                mov edx,[ebx+eax*4-12]    ;#00460F37: 213124203 F4               uv 04 09  1  53      
;   118         lea edi,[edi-1]         -- decrement edi (oh, nice comment!! :-)
                lea edi,[edi-1]           ;#00460F3B: 215177 FF                  vu 80 80  1  53      
;   119         cmp byte[ebx+eax*4-1],0x80
                cmp byte[ebx+eax*4-1],#80  ;#00460F3E: 200174203 FF 80            u  00 09  2  54      
;   120         lea eax,[ebx+eax*4]
                lea eax,[ebx+eax*4]       ;#00460F43: 215004203                  vu 01 09  1  55      
;   121         jne :opSubseStr
                jne #00460F88             ;#00460F46: 165 40                     v  00 00  1  56      
;   122         cmp edi,edx
                cmp edi,edx               ;#00460F48: 071327                     uv 00 84  1  57      
;   123         jb @f                   -- unsigned jump, lets 0..len-1 through
                jb #00460F5B              ;#00460F4A: 162 0F                     v  00 00  1  57      
;   124                                 --              (we just decremented edi)
;   125             push eax
                    push eax              ;#00460F4C: 120                        uv 00 01  1  58      
;   126             add ecx,1
                    add ecx,1             ;#00460F4D: 203301 01                  vu 02 02  1  58      
;   127             mov al,8+4+1        -- [era] @ [esp+ecx*4], "reading from"
                    mov al,13             ;#00460F50: 260 0D                     uv 01 00  1  59      
;   128             call :%fixupIndex   -- idx-1 in edi, len in edx, (not: idx addr in ebx), al set
                    call #00460DED (:%fixupIndex)  ;#00460F52: 350 96FEFFFF               v  00 00  1  59      
;   129                                 -- (we have opUnassign'd all idx that we need to, because
;   130                                 --  the new calling convention has no var addr, thus ebx 
;   131                                 --  would not be useful here anyway)
;   132             sub ecx,1
                    sub ecx,1             ;#00460F57: 203351 01                  uv 02 02  1  60      
;   133             pop eax
                    pop eax               ;#00460F5A: 130                        vu 01 00  1  60      
;   134       @@:
;   135         mov eax,[eax+edi*4]
                mov eax,[eax+edi*4]       ;#00460F5B: 213004270                  uv 01 81  1  63    *01*
;   136         pop edi
                pop edi                   ;#00460F5E: 137                        vu 80 00  1  63      
;   137         sub ecx,1
                sub ecx,1                 ;#00460F5F: 203351 01                  uv 02 02  1  64      
;   138         jnz :opSubseWhile
                jnz #00460F1F             ;#00460F62: 165 BB                     v  00 00  1  64      
;   139 
;   140         mov edx,[edi]
                mov edx,[edi]             ;#00460F64: 213027                     uv 04 80  1  65      
;   141         cmp eax,h4
                cmp eax,h4                ;#00460F66: 075 00000040               vu 00 01  1  65      
;   142         mov [edi],eax
                mov [edi],eax             ;#00460F6B: 211007                     uv 00 81  1  66      
;   143         jl :opSubseEndWhile
                jl #00460F74              ;#00460F6D: 174 05                     v  00 00  1  66      
;   144             add dword[ebx+eax*4-8],1
                    add dword[ebx+eax*4-8],1  ;#00460F6F: 203104203 F8 01            u  00 09  3  67      
;   145       ::opSubseEndWhile
;   146         cmp edx,h4
                cmp edx,h4                ;#00460F74: 201372 00000040            vu 00 04  1  69      
;   147         jle @f
                jle #00460F87             ;#00460F7A: 176 0B                     v  00 00  1  70      
;   148             sub dword[ebx+edx*4-8],1
                    sub dword[ebx+edx*4-8],1  ;#00460F7C: 203154223 F8 01            u  00 0C  3  71      
;   149             jz :%pDealloc
                    jz #004639A8 (:%pDealloc)  ;#00460F81: 017204 212A0000            v  00 00  1  73      
;   150       @@:
;   151         ret
                ret                       ;#00460F87: 303                        np 00 00  2  74      
;   152 
;   153       ::opSubseStr
;   154         cmp ecx,1
                cmp ecx,1                 ;#00460F88: 203371 01                  uv 00 02  1  76      
;   155 --      jne :e04atsaa8          -- attempt to subscript an atom, era @ [esp+ecx*4]
;   156         je @f
                je #00460F9B              ;#00460F8B: 164 0E                     v  00 00  1  76      
;   157             mov edx,[esp+ecx*4]
                    mov edx,[esp+ecx*4]   ;#00460F8D: 213024214                  uv 04 12  1  77      
;   158             mov al,4            -- e04atssaa
                    mov al,4              ;#00460F90: 260 04                     vu 01 00  1  77      
;   159             sub edx,1
                    sub edx,1             ;#00460F92: 203352 01                  uv 04 04  1  78      
;   160             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00460F95: 351 CF2E0000               v  00 00  1  78      
;   161             int3
                    int3                  ;#00460F9A: 314                        np 00 00 13  79      
;   162       @@:
;   163         pop ecx
                pop ecx                   ;#00460F9B: 131                        uv 02 00  1  92      
;   164         cmp byte[eax-1],0x82
                cmp byte[eax-1],#82       ;#00460F9C: 200170 FF 82               u  00 01  2  93      
;   165 --      jne :e04atsaa8          -- attempt to subscript an atom, era @ [esp+ecx*4]
;   166         je @f
                je #00460FAE              ;#00460FA0: 164 0C                     v  00 00  1  94      
;   167             pop edx
                    pop edx               ;#00460FA2: 132                        uv 04 00  1  95      
;   168             mov al,4            -- e04atssaa
                    mov al,4              ;#00460FA3: 260 04                     vu 01 00  1  95      
;   169             sub edx,1
                    sub edx,1             ;#00460FA5: 203352 01                  uv 04 04  1  96      
;   170             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00460FA8: 351 BC2E0000               v  00 00  1  96      
;   171             int3
                    int3                  ;#00460FAD: 314                        np 00 00 13  97      
;   172       @@:
;   173         cmp edi,edx
                cmp edi,edx               ;#00460FAE: 071327                     uv 00 84  1 110      
;   174         jb @f                   -- unsigned jump, lets 0..len-1 through
                jb #00460FBB              ;#00460FB0: 162 09                     v  00 00  1 110      
;   175                                 --               (we just decremented edi)
;   176             push eax
                    push eax              ;#00460FB2: 120                        uv 00 01  1 111      
;   177             mov al,4+1          -- [era] @ [esp+8], "reading from"
                    mov al,5              ;#00460FB3: 260 05                     vu 01 00  1 111      
;   178             call :%fixupIndex   -- idx-1 in edi, len in edx, (not: idx addr in ebx), al set
                    call #00460DED (:%fixupIndex)  ;#00460FB5: 350 33FEFFFF               v  00 00  1 112      
;   179                                 -- (ditto note above)
;   180             pop eax
                    pop eax               ;#00460FBA: 130                        uv 01 00  1 113      
;   181        @@:
;   182         cmp [ma_ip],ebx
                cmp [#00402A20] (ma_ip),ebx  ;#00460FBB: 071035 202A4000            vu 00 08  2 113      
;   183         jne :e52jsdnssd
                jne #00460F09             ;#00460FC1: 017205 42FFFFFF            v  00 00  1 114      
;   184         add edi,eax
                add edi,eax               ;#00460FC7: 001307                     uv 80 81  1 115      
;   185         xor eax,eax
                xor eax,eax               ;#00460FC9: 061300                     vu 01 01  1 115      
;   186         mov edx,[ecx]
                mov edx,[ecx]             ;#00460FCB: 213021                     uv 04 02  1 116      
;   187         mov al,[edi]
                mov al,[edi]              ;#00460FCD: 212007                     uv 01 80  1 118    *80*
;   188         cmp edx,h4
                cmp edx,h4                ;#00460FCF: 201372 00000040            vu 00 04  1 118      
;   189         mov [ecx],eax
                mov [ecx],eax             ;#00460FD5: 211001                     uv 00 03  1 119      
;   190         jle @f
                jle #00460FE4             ;#00460FD7: 176 0B                     v  00 00  1 119      
;   191             sub dword[ebx+edx*4-8],1
                    sub dword[ebx+edx*4-8],1  ;#00460FD9: 203154223 F8 01            u  00 0C  3 120      
;   192             jz :%pDealloc
                    jz #004639A8 (:%pDealloc)  ;#00460FDE: 017204 C4290000            v  00 00  1 122      
;   193       @@:
;   194         ret
                ret                       ;#00460FE4: 303                        np 00 00  2 123      
;   195     [64]
;   196         -- calling convention (as hard-coded in pilx86.e):
;   197         --  push <return address>
;   198         --  push <addr res>                                 (or lea reg [rbp-NN], push reg)
;   199         --  push [idxn]..[idx1]     (opUnassign'd)			(or push qword[m32 or rbp+d8/32])
;   200         --  mov rcx,n
;   201         --  mov rdx,<addr ref>                              (or lea rdx,[rbp+d8/32]
;   202         --  jmp :%pSubse            (actually a call)
;   203         --<return address>
;   204         --  callee must ensure ref(rdx) and all indexes are assigned beforehand (ie pmain.e 
;   205         --  should emit any required opUnassigned instructions before the opSubse).
;   206         --  if result is integer, left in rax, otherwise all registers clobbered.
;   207         pop rdi
;   208         mov rax,[rdx]
;   209         mov r15,h4
;   210     ::opSubseWhile
;   211 --      cmp rax,h4
;   212         cmp rax,r15
;   213 --      jl :e04atsaa8           -- attempt to subscript an atom, era @ [esp+ecx*4]
;   214         jg @f
;   215 --          mov e?dx,[esp+ecx*4+4]
;   216 --          mov e??,[esp+ecx*4]
;   217             lea rsp,[rsp+rcx*8]
;   218             je :e93edx
;   219             pop rdx
;   220             mov al,4            -- e04atssaa
;   221             sub rdx,1
;   222             jmp :!iDiag
;   223             int3
;   224       @@:
;   225 --      mov rdx,[rbx+rax*4-12]  -- length
;   226         mov rdx,[rbx+rax*4-24]  -- length
;   227         lea rdi,[rdi-1]         -- decrement rdi (oh, nice comment!! :-)
;   228         cmp byte[rbx+rax*4-1],0x80
;   229         lea rax,[rbx+rax*4]
;   230         jne :opSubseStr
;   231         cmp rdi,rdx
;   232         jb @f                   -- unsigned jump, lets 0..len-1 through
;   233                                 --              (we just decremented rdi)
;   234             push rax
;   235             add rcx,1
;   236             mov al,8+4+1        -- [era] @ [rsp+rcx*8], "reading from"
;   237             call :%fixupIndex   -- idx-1 in rdi, len in rdx, (not: idx addr in rbx), al set
;   238                                 -- (we have opUnassign'd all idx that we need to, because
;   239                                 --  the new calling convention has no var addr, thus ebx 
;   240                                 --  would not be useful here anyway)
;   241             sub rcx,1
;   242             pop rax
;   243       @@:
;   244         mov rax,[rax+rdi*8]
;   245         pop rdi
;   246         sub rcx,1
;   247         jnz :opSubseWhile
;   248 
;   249         mov rdx,[rdi]
;   250 --      cmp rax,h4
;   251 --      mov r15,h4
;   252         cmp rax,r15
;   253         mov [rdi],rax
;   254         jl :opSubseEndWhile
;   255             add qword[rbx+rax*4-16],1
;   256       ::opSubseEndWhile
;   257 --      cmp rdx,h4
;   258         mov r15,h4
;   259         cmp rdx,r15
;   260         jle @f
;   261             sub qword[rbx+rdx*4-16],1
;   262             jz :%pDealloc
;   263       @@:
;   264         ret
;   265 
;   266       ::opSubseStr
;   267         cmp rcx,1
;   268 --      jne :e04atsaa8          -- attempt to subscript an atom, era @ [rsp+rcx*8]
;   269         je @f
;   270             mov rdx,[rsp+rcx*8]
;   271             mov al,4            -- e04atssaa
;   272             sub rdx,1
;   273             jmp :!iDiag
;   274             int3
;   275       @@:
;   276         pop rcx
;   277         cmp byte[rax-1],0x82
;   278 --      jne :e04atsaa8          -- attempt to subscript an atom, era @ [rsp+rcx*4]
;   279         je @f
;   280             pop rdx
;   281             mov al,4            -- e04atssaa
;   282             sub rdx,1
;   283             jmp :!iDiag
;   284             int3
;   285       @@:
;   286         cmp rdi,rdx
;   287         jb @f                   -- unsigned jump, lets 0..len-1 through
;   288                                 --               (we just decremented rdi)
;   289             push rax
;   290             mov al,4+1          -- [era] @ [rsp+16], "reading from"
;   291             call :%fixupIndex   -- idx-1 in rdi, len in rdx, (not: idx addr in rbx), al set
;   292                                 -- (ditto note above)
;   293             pop rax
;   294        @@:
;   295         cmp [ma_ip],rbx
;   296         jne :e52jsdnssd
;   297         add rdi,rax
;   298         xor rax,rax
;   299         mov rdx,[rcx]
;   300         mov al,[rdi]
;   301 --      cmp rdx,h4
;   302         mov r15,h4
;   303         cmp rdx,r15
;   304         mov [rcx],rax
;   305         jle @f
;   306             sub qword[rbx+rdx*4-16],1
;   307             jz :%pDealloc
;   308       @@:
;   309         ret
;   310     []
;   311 
;   312 --/*
;   313 procedure :%pSubse1(:%)
;   314 end procedure -- (for Edita/CtrlQ)
;   315 --*/
;   316     :%pSubse1               -- [ecx]=esi[edi], aka p3=p1[p2]
;   317 -------------
;   318     [32]
;   319         -- calling convention (as hard-coded in pilx86.e):
;   320         --  mov edi,[p2]        -- idx (opUnassigned)
;   321         --  mov ecx,p3          -- addr res
;   322         --  mov esi,[p1]        -- s
;   323         --  mov edx,p1          -- var no of s              
;   324 --<     --  mov al,isCompound   -- 0/1
;   325         --  call opSubse1       -- [res]:=s[idx]
;   326         sub edi,1
                sub edi,1                 ;#00460FE5: 203357 01                  uv 80 80  1 125      
;   327 --DEV
;   328 --    :!opSubse1Re92a:          -- exception here mapped to e94vhnbaavedxesifeh
;   329       :!opSubse1e04or92
;   330         mov edx,[ebx+esi*4-12]  -- length
                mov edx,[ebx+esi*4-12]    ;#00460FE8: 213124263 F4               vu 04 48  1 125      
;   331         mov ah,byte[ebx+esi*4-1]
                mov ah,[ebx+esi*4-1]      ;#00460FEC: 212144263 FF               uv 01 48  1 126      
;   332         shl esi,2
                shl esi,2                 ;#00460FF0: 301346 02                  u  40 40  1 127      
;   333         cmp edi,edx
                cmp edi,edx               ;#00460FF3: 071327                     vu 00 84  1 127      
;   334         jb @f
                jb #00461000              ;#00460FF5: 162 09                     v  00 00  1 128      
;   335             push eax
                    push eax              ;#00460FF7: 120                        uv 00 01  1 129      
;   336 --13/5/22 (Decision tables)
;   337 --          mov al,2+1              -- [era] @ [esp+4], "reading from"
;   338             mov al,4+1              -- [era] @ [esp+8], "reading from"
                    mov al,5              ;#00460FF8: 260 05                     vu 01 00  1 129      
;   339             call :%fixupIndex       -- idx-1 in edi, len in edx, (not: idx addr in ebx), al set
                    call #00460DED (:%fixupIndex)  ;#00460FFA: 350 EEFDFFFF               v  00 00  1 130      
;   340             pop eax
                    pop eax               ;#00460FFF: 130                        uv 01 00  1 131      
;   341       @@:
;   342         cmp ah,0x80
                cmp ah,#80                ;#00461000: 200374 80                  uv 00 01  1 132 01   
;   343         je :opSubse1Seq
                je #0046102B              ;#00461003: 164 26                     v  00 00  1 132      
;   344         cmp ah,0x82
                cmp ah,#82                ;#00461005: 200374 82                  uv 00 01  1 133      
;   345 --      jne :e04atsaa0
;   346         je @f
                je #00461016              ;#00461008: 164 0C                     v  00 00  1 133      
;   347             pop edx
                    pop edx               ;#0046100A: 132                        uv 04 00  1 134      
;   348             mov al,4    -- e04atssaa
                    mov al,4              ;#0046100B: 260 04                     vu 01 00  1 134      
;   349             sub edx,1
                    sub edx,1             ;#0046100D: 203352 01                  uv 04 04  1 135      
;   350             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00461010: 351 542E0000               v  00 00  1 135      
;   351             int3
                    int3                  ;#00461015: 314                        np 00 00 13 136      
;   352       @@:
;   353         cmp [ma_ip],ebx
                cmp [#00402A20] (ma_ip),ebx  ;#00461016: 071035 202A4000            uv 00 08  2 149      
;   354         jne :e52jsdnssd
                jne #00460F09             ;#0046101C: 017205 E7FEFFFF            v  00 00  1 150      
;   355         xor eax,eax
                xor eax,eax               ;#00461022: 061300                     uv 01 01  1 151      
;   356         mov edx,[ecx]
                mov edx,[ecx]             ;#00461024: 213021                     vu 04 02  1 151      
;   357         mov al,[esi+edi]
                mov al,[esi+edi]          ;#00461026: 212004076                  uv 01 C0  1 152      
;   358         jmp @f
                jmp #00461040             ;#00461029: 353 15                     v  00 00  1 152      
;   359 
;   360       ::opSubse1Seq
;   361         cmp al,1
                cmp al,1                  ;#0046102B: 200370 01                  uv 00 01  1 153      
;   362         mov eax,[esi+edi*4]
                mov eax,[esi+edi*4]       ;#0046102E: 213004276                  vu 01 C0  1 153      
;   363         mov edx,[ecx]           -- prev(res)
                mov edx,[ecx]             ;#00461031: 213021                     uv 04 02  1 154      
;   364         jne @f
                jne #00461040             ;#00461033: 165 0B                     v  00 00  1 154      
;   365             -- 6/12/23: only if s has a refcount of 1
;   366             cmp dword[esi-8],1
                    cmp dword[esi-8],1    ;#00461035: 203176 F8 01               u  00 40  2 155      
;   367             jne @f
                    jne #00461040         ;#00461039: 165 05                     v  00 00  1 156      
;   368             -- 1/5/22: in eg s[i] &= x, s[i]:=0, w/o incref
;   369             mov [esi+edi*4],ebx
                    mov [esi+edi*4],ebx   ;#0046103B: 211034276                  uv 00 C8  1 157      
;   370             jmp opSubse1CompoundOp
                    jmp #0046104C         ;#0046103E: 353 0C                     v  00 00  1 157      
;   371       @@:
;   372         cmp eax,h4
                cmp eax,h4                ;#00461040: 075 00000040               uv 00 01  1 158      
;   373         jl @f
                jl #0046104C              ;#00461045: 174 05                     v  00 00  1 158      
;   374             add dword[ebx+eax*4-8],1
                    add dword[ebx+eax*4-8],1  ;#00461047: 203104203 F8 01            u  00 09  3 159      
;   375       @@:
;   376       ::opSubse1CompoundOp
;   377         cmp edx,h4
                cmp edx,h4                ;#0046104C: 201372 00000040            vu 00 04  1 161      
;   378         jle @f
                jle #00461068             ;#00461052: 176 14                     v  00 00  1 162      
;   379             mov edi,[ebx+edx*4-8]   -- decref in edi
                    mov edi,[ebx+edx*4-8]  ;#00461054: 213174223 F8               uv 80 0C  1 163      
;   380             mov [ecx],eax
                    mov [ecx],eax         ;#00461058: 211001                     vu 00 03  1 163      
;   381             sub edi,1
                    sub edi,1             ;#0046105A: 203357 01                  uv 80 80  1 164      
;   382             jz :%pDealloc
                    jz #004639A8 (:%pDealloc)  ;#0046105D: 017204 45290000            v  00 00  1 164      
;   383             mov [ebx+edx*4-8],edi
                    mov [ebx+edx*4-8],edi  ;#00461063: 211174223 F8               uv 00 8C  1 165      
;   384             ret
                    ret                   ;#00461067: 303                        np 00 00  2 166      
;   385       @@:
;   386         mov [ecx],eax
                mov [ecx],eax             ;#00461068: 211001                     uv 00 03  1 168      
;   387         ret
                ret                       ;#0046106A: 303                        np 00 00  2 169      
;   388     [64]
;   389         -- calling convention (as hard-coded in pilx86.e):
;   390         --  mov rdi,[p2]        -- idx (opUnassigned)
;   391         --  mov rcx,p3          -- addr res
;   392         --  mov rsi,[p1]        -- s
;   393         --  mov rdx,p1          -- var no of s              
;   394         --  mov al,isCompound   -- 0/1
;   395         --  call opSubse1       -- [res]:=s[idx]
;   396         sub rdi,1
;   397 --      mov r15,h4
;   398 --DEV
;   399 --    :!opSubse1Re92a:          -- exception here mapped to e94vhnbaavedxesifeh
;   400         mov rdx,[rbx+rsi*4-24]  -- length
;   401         mov ah,byte[rbx+rsi*4-1]
;   402         shl rsi,2
;   403         cmp rdi,rdx
;   404         jb @f
;   405             mov r14,rax
;   406             mov al,2+1              -- [era] @ [rsp+8], "reading from"
;   407             call :%fixupIndex       -- idx-1 in rdi, len in rdx, (not: idx addr in rbx), al set
;   408             mov rax,r14
;   409       @@:
;   410         cmp ah,0x80
;   411         je :opSubse1Seq
;   412         cmp ah,0x82
;   413 --      jne :e04atsaa0
;   414         je @f
;   415             pop rdx
;   416             mov al,4    -- e04atssaa
;   417             sub rdx,1
;   418             jmp :!iDiag
;   419             int3
;   420       @@:
;   421         cmp [ma_ip],rbx
;   422         jne :e52jsdnssd
;   423         xor rax,rax
;   424         mov rdx,[rcx]
;   425         mov al,[rsi+rdi]
;   426         jmp @f
;   427       ::opSubse1Seq
;   428         cmp al,1
;   429         mov rax,[rsi+rdi*8]
;   430         mov rdx,[rcx]           -- prev(res)
;   431         mov r15,h4
;   432         jne @f
;   433             -- 6/12/23: only if s has a refcount of 1
;   434             cmp qword[rsi-16],1
;   435             jne @f
;   436             -- 1/5/22: in eg s[i] &= x, s[i]:=0, w/o incref
;   437             mov [rsi+rdi*8],rbx
;   438             jmp opSubse1CompoundOp
;   439       @@:
;   440 --      cmp rax,h4
;   441         cmp rax,r15
;   442         jl @f
;   443             add qword[rbx+rax*4-16],1
;   444       @@:
;   445       ::opSubse1CompoundOp
;   446 --      cmp rdx,h4
;   447         cmp rdx,r15
;   448         jle @f
;   449             mov rdi,[rbx+rdx*4-16]  -- decref in rdi
;   450             mov [rcx],rax
;   451             sub rdi,1
;   452             jz :%pDealloc
;   453             mov [rbx+rdx*4-16],rdi
;   454             ret
;   455       @@:
;   456         mov [rcx],rax
;   457         ret
;   458     []
;   459 
;   460 --/*
;   461 procedure :%pSubse1i(:%)
;   462 end procedure -- (for Edita/CtrlQ)
;   463 --*/
;   464     :%pSubse1i          -- [ecx]=esi[edi], aka p3=p1[p2] when [ecx] is integer (no dealloc)
;   465 --------------          -- esi must be sequence [not object], (DEV test that) need not be S_Init.
;   466     [32]
;   467         -- calling convention (as hard-coded in pilx86.e):
;   468         --  mov edi,[p2]        -- idx (opUnassigned)
;   469         --  mov esi,[p1]        -- s
;   470         --  lea ecx,[res]       -- result addr
;   471         --  mov edx,p1          -- var no of s              
;   472         --  call opSubse1is     -- [ecx]:=s[idx]
;   473         --  mov [p3],eax        -- res
;   474         sub edi,1
                sub edi,1                 ;#0046106B: 203357 01                  uv 80 80  1 171      
;   475 
;   476       :!opSubse1iRe92a          -- exception here mapped to e94vhnbaavedx (edx contains var no, esi value. e94vhnbaav or e04atsaa)
;   477         mov edx,[ebx+esi*4-12]  -- length
                mov edx,[ebx+esi*4-12]    ;#0046106E: 213124263 F4               vu 04 48  1 171      
;   478         mov al,byte[ebx+esi*4-1] -- type byte
                mov al,[ebx+esi*4-1]      ;#00461072: 212104263 FF               uv 01 48  1 172      
;   479         shl esi,2
                shl esi,2                 ;#00461076: 301346 02                  u  40 40  1 173      
;   480         cmp edi,edx
                cmp edi,edx               ;#00461079: 071327                     vu 00 84  1 173      
;   481         jb @f
                jb #00461086              ;#0046107B: 162 09                     v  00 00  1 174      
;   482             push eax
                    push eax              ;#0046107D: 120                        uv 00 01  1 175      
;   483             mov al,4+1          -- [era] @ [esp+8], "reading from"
                    mov al,5              ;#0046107E: 260 05                     vu 01 00  1 175      
;   484             call :%fixupIndex   -- idx-1 in edi, len in edx, (not: idx addr in ebx), al set
                    call #00460DED (:%fixupIndex)  ;#00461080: 350 68FDFFFF               v  00 00  1 176      
;   485             pop eax
                    pop eax               ;#00461085: 130                        uv 01 00  1 177      
;   486       @@:
;   487         and eax,2       -- test for 0x82 and clear top 3 bytes!
                and eax,2                 ;#00461086: 203340 02                  uv 01 01  1 178 01   
;   488         jne :opSubse1iCh
                jne #004610A3             ;#00461089: 165 18                     v  00 00  1 178      
;   489             mov eax,[esi+edi*4]
                    mov eax,[esi+edi*4]   ;#0046108B: 213004276                  uv 01 C0  1 179      
;   490             cmp eax,h4
                    cmp eax,h4            ;#0046108E: 075 00000040               uv 00 01  1 180 01   
;   491             jl @f
                    jl #004610B2          ;#00461093: 174 1D                     v  00 00  1 180      
;   492 --          jmp :e110ecxesp -- type check error
;   493             -- type check error (ecx is var addr)
;   494 --          mov edi,edx
;   495             mov [ecx],eax
                    mov [ecx],eax         ;#00461095: 211001                     uv 00 03  1 181      
;   496             pop edx
                    pop edx               ;#00461097: 132                        vu 04 00  1 181      
;   497             mov al,110          -- e110tce(ecx)
                    mov al,110            ;#00461098: 260 6E                     uv 01 00  1 182      
;   498             sub edx,1
                    sub edx,1             ;#0046109A: 203352 01                  vu 04 04  1 182      
;   499             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#0046109D: 351 C72D0000               v  00 00  1 183      
;   500             int3
                    int3                  ;#004610A2: 314                        np 00 00 13 184      
;   501 
;   502       ::opSubse1iCh
;   503         cmp [ma_ip],ebx
                cmp [#00402A20] (ma_ip),ebx  ;#004610A3: 071035 202A4000            uv 00 08  2 197      
;   504         jne :e52jsdnssd
                jne #00460F09             ;#004610A9: 017205 5AFEFFFF            v  00 00  1 198      
;   505         mov al,[esi+edi]
                mov al,[esi+edi]          ;#004610AF: 212004076                  uv 01 C0  1 199      
;   506     @@:
;   507         mov [ecx],eax
                mov [ecx],eax             ;#004610B2: 211001                     uv 00 03  1 200 01   
;   508         ret
                ret                       ;#004610B4: 303                        np 00 00  2 201      
;   509     [64]
;   510         -- calling convention (as hard-coded in pilx86.e):
;   511         --  mov rdi,[p2]        -- idx (opUnassigned)
;   512         --  mov rsi,[p1]        -- s
;   513         --  lea rcx,[res]       -- result addr
;   514         --  mov rdx,p1          -- var no of s              
;   515         --  call opSubse1is     -- [rcx]:=s[idx]
;   516         --  mov [p3],rax        -- res  [DEV?]
;   517         sub rdi,1
;   518       :!opSubse1iRe92a          -- exception here mapped to e94vhnbaavedxesifeh (edx contains var no, esi value. e94vhnbaav or e04atsaa)
;   519         mov rdx,[rbx+rsi*4-24]  -- length
;   520         mov al,byte[rbx+rsi*4-1] -- type byte
;   521         shl rsi,2
;   522         cmp rdi,rdx
;   523         jb @f
;   524             push rax
;   525             mov al,4+1          -- [era] @ [rsp+16], "reading from"
;   526             call :%fixupIndex   -- idx-1 in rdi, len in rdx, (not: idx addr in rbx), al set
;   527             pop rax
;   528       @@:
;   529         and rax,2       -- test for 0x82 and clear top 3 bytes!
;   530         jne :opSubse1iCh
;   531             mov rax,[rsi+rdi*8]
;   532 --          cmp rax,h4
;   533             mov r15,h4
;   534             cmp rax,r15
;   535             jl @f
;   536 --          jmp :e110ecxesp -- type check error
;   537             -- type check error (rcx is var addr)
;   538 --          mov rdi,rdx
;   539             mov [rcx],rax
;   540             pop rdx
;   541             mov al,110      -- e110tce(ecx)
;   542             sub rdx,1
;   543             jmp :!iDiag
;   544             int3
;   545 
;   546       ::opSubse1iCh
;   547         cmp [ma_ip],rbx
;   548         jne :e52jsdnssd
;   549         mov al,[rsi+rdi]
;   550     @@:
;   551         mov [rcx],rax
;   552         ret
;   553     []
;   554 
;   555 --/*
;   556 procedure :%pSubse1ip(:%)
;   557 end procedure -- (for Edita/CtrlQ)
;   558 --*/
;   559     :%pSubse1ip             -- as opSubse1i when p1 is sequence of integer, and p3 is integer
;   560 ---------------             -- p1/esi must be sequence [not string/atom], need not be S_Init.
;   561     [32]
;   562         -- calling convention (as hard-coded in pilx86.e):
;   563         --  mov edi,[p2]        -- idx (opUnassigned)
;   564         --  mov esi,[p1]        -- s
;   565         --  mov edx,p1          -- var no of s              
;   566         --  call opSubse1ip     -- eax:=s[idx]
;   567         --  mov [p3],eax        -- store res
;   568         sub edi,1
                sub edi,1                 ;#004610B5: 203357 01                  uv 80 80  1 203      
;   569       :!opSubse1ipRe92a         -- exception here mapped to e94vhnbaavedxesifeh
;   570         mov edx,[ebx+esi*4-12]  -- length
                mov edx,[ebx+esi*4-12]    ;#004610B8: 213124263 F4               vu 04 48  1 203      
;   571         shl esi,2
                shl esi,2                 ;#004610BC: 301346 02                  u  40 40  1 204      
;   572         cmp edi,edx
                cmp edi,edx               ;#004610BF: 071327                     vu 00 84  1 204      
;   573         jb @f
                jb #004610CA              ;#004610C1: 162 07                     v  00 00  1 205      
;   574             mov al,2+1              -- [era] @ [esp+4], "reading from"
                    mov al,3              ;#004610C3: 260 03                     uv 01 00  1 206      
;   575             call :%fixupIndex       -- idx-1 in edi, len in edx, (not: idx addr in ebx), al set
                    call #00460DED (:%fixupIndex)  ;#004610C5: 350 23FDFFFF               v  00 00  1 206      
;   576       @@:
;   577         mov eax,[esi+edi*4]
                mov eax,[esi+edi*4]       ;#004610CA: 213004276                  uv 01 C0  1 207      
;   578         ret
                ret                       ;#004610CD: 303                        np 00 00  2 208      
;   579     [64]
;   580         -- calling convention (as hard-coded in pilx86.e):
;   581         --  mov rdi,[p2]        -- idx (opUnassigned)
;   582         --  mov rsi,[p1]        -- s
;   583         --  mov rdx,p1          -- var no of s              
;   584         --  call opSubse1ip     -- rax:=s[idx]
;   585         --  mov [p3],rax        -- store res
;   586         sub rdi,1
;   587       :!opSubse1ipRe92a         -- exception here mapped to e94vhnbaavedxesifeh
;   588         mov rdx,[rbx+rsi*4-24]  -- length
;   589         shl rsi,2
;   590         cmp rdi,rdx
;   591         jb @f
;   592             mov al,2+1              -- [era] @ [rsp+8], "reading from"
;   593             call :%fixupIndex       -- idx-1 in rdi, len in rdx, (not: idx addr in rbx), al set
;   594       @@:
;   595         mov rax,[rsi+rdi*8]
;   596         ret
;   597     []
;   598 
;   599 --/*
;   600 procedure :%pSubse1is(:%)
;   601 end procedure -- (for Edita/CtrlQ)
;   602 --*/
;   603     :%pSubse1is             -- eax=esi[edi], aka p3=p1[p2] when esi is string and result is integer
;   604 ---------------
;   605     [32]
;   606         -- calling convention (as hard-coded in pilx86.e):
;   607         --  mov edi,[p2]        -- idx (opUnassigned)
;   608         --  mov esi,[p1]        -- s
;   609         --  mov edx,p1          -- var no of s
;   610         --  call opSubse1is     -- eax:=s[idx]
;   611         --  mov [p3],eax        -- store res
;   612         sub edi,1
                sub edi,1                 ;#004610CE: 203357 01                  uv 80 80  1 210      
;   613         xor eax,eax
                xor eax,eax               ;#004610D1: 061300                     vu 01 01  1 210      
;   614 --DEV
;   615       :!opSubse1isRe92a         -- exception here mapped to e94vhnbaavedxesifeh
;   616         mov edx,[ebx+esi*4-12]  -- length
                mov edx,[ebx+esi*4-12]    ;#004610D3: 213124263 F4               uv 04 48  1 211      
;   617         shl esi,2
                shl esi,2                 ;#004610D7: 301346 02                  u  40 40  1 212      
;   618         cmp edi,edx
                cmp edi,edx               ;#004610DA: 071327                     vu 00 84  1 212      
;   619         jb @f
                jb #004610E5              ;#004610DC: 162 07                     v  00 00  1 213      
;   620             mov al,2+1          -- [era] @ [esp+4], "reading from"
                    mov al,3              ;#004610DE: 260 03                     uv 01 00  1 214      
;   621             call :%fixupIndex   -- idx-1 in edi, len in edx, (not idx addr in ebx), al set
                    call #00460DED (:%fixupIndex)  ;#004610E0: 350 08FDFFFF               v  00 00  1 214      
;   622       @@:
;   623         cmp [ma_ip],ebx
                cmp [#00402A20] (ma_ip),ebx  ;#004610E5: 071035 202A4000            uv 00 08  2 215      
;   624         jne :e52jsdnssd
                jne #00460F09             ;#004610EB: 017205 18FEFFFF            v  00 00  1 216      
;   625         mov al,[esi+edi]
                mov al,[esi+edi]          ;#004610F1: 212004076                  uv 01 C0  1 217      
;   626         ret
                ret                       ;#004610F4: 303                        np 00 00  2 218      
;   627     [64]
;   628         -- calling convention (as hard-coded in pilx86.e):
;   629         --  mov rdi,[p2]        -- idx (opUnassigned)
;   630         --  mov rsi,[p1]        -- s
;   631         --  mov rdx,p1          -- var no of s
;   632         --  call opSubse1is     -- rax:=s[idx]
;   633         --  mov [p3],rax        -- store res
;   634         sub rdi,1
;   635         xor rax,rax
;   636       :!opSubse1isRe92a         -- exception here mapped to e94vhnbaavedxesifeh
;   637         mov rdx,[rbx+rsi*4-24]  -- length
;   638         shl rsi,2
;   639         cmp rdi,rdx
;   640         jb @f
;   641             mov al,2+1          -- [era] @ [rsp+8], "reading from"
;   642             call :%fixupIndex   -- idx-1 in rdi, len in rdx, (not idx addr in rbx), al set
;   643       @@:
;   644         cmp [ma_ip],rbx
;   645         jne :e52jsdnssd
;   646         mov al,[rsi+rdi]
;   647         ret
;   648     []
;   649 
;   650 --/*
;   651 procedure :%pDeSeqip2(:%)
;   652 end procedure -- (for Edita/CtrlQ)
;   653 --*/
;   654     :%pDeSeqip2         -- [ma_ip]:=e/rax. A multiple assigment (aka desequence/destructure)
;   655 ---------------         --                 operation is in progress under with js therefore
;   656                         --                 string subscript (/replacements) are now illegal,
;   657                         --                 that is at least when [ma_ip] is non-zero.
;   658                         --                  (Called from pRepeN.e)
;   659     [32]
;   660         mov [ma_ip],eax
                mov [#00402A20] (ma_ip),eax  ;#004610F5: 243 202A4000               uv 00 01  1 220      
;   661     [64]
;   662         mov [ma_ip],rax
;   663     []
;   664         ret
                ret                       ;#004610FA: 303                        np 00 00  2 221      
;   665 
;   666       }
;   667 
    jmp #00462C8F (:%opRetf)              ;#004610FB: 351 8F1B0000               v  00 00  1 223      
;C:\Phix\builtins\VM\pFixup.e:
;=============================
;     1 --
;     2 --  pFixup.e
;     3 --  ========
;     4 --
;     5 --      negative and floating point index handling 
;     6 --      (:%fixupIndex, :%fixupSliceStart, :%fixupSliceEnd)
;     7 --
;     8 --  Note this is not an autoinclude. Used by pSubseN.e, pRepeN.e, pSubssN.e, pJnotx.e
;     9 --
;    10 --  All functions in this file adjust edi to a normal 0-based index, and leave 
;    11 --  all other registers undamaged.
;    12 --
;    13 
;    14 include builtins\VM\pFPU.e
;    15 
;    16 --#ilASM{ jmp :%opRetf
;    17 #ilASM{ jmp :!opCallOnceYeNot
                jmp :!opCallOnceYeNot     ;#00460D56: 351 981A0000               v  00 00  1   1      
;    18 
;    19 --DEV FIXME: (and the :!bang labels below)
;    20     ::e05sinaae06
;    21         or al,#10
                or al,16                  ;#00460D5B: 200310 10                  uv 01 01  1   2      
;    22         jmp :e06ioobWhat
                jmp #00460D68             ;#00460D5E: 353 08                     v  00 00  1   2      
;    23 --      int3
;    24 
;    25     ::e06ioobp1WhatN
;    26     [32]
;    27         sub edi,edx
                sub edi,edx               ;#00460D60: 051327                     uv 80 84  1   3      
;    28         sub edi,1
                sub edi,1                 ;#00460D62: 203357 01                  uv 80 80  1   4 80   
;    29     [64]
;    30         sub rdi,rdx
;    31         sub rdi,1
;    32     []
;    33     ::e06ioobp1What
;    34     [32]
;    35         add edi,1
                add edi,1                 ;#00460D65: 203307 01                  uv 80 80  1   5 80   
;    36     [64]
;    37         add rdi,1
;    38     []
;    39     ::e06ioobWhat
;    40         -- 0 or >length
;    41     [32]
;    42         mov esi,edx
                mov esi,edx               ;#00460D68: 213362                     vu 40 04  1   5      
;    43     [64]
;    44         mov rsi,rdx
;    45     []
;    46         test al,0x08
                test al,8                 ;#00460D6A: 250 08                     uv 00 01  1   6      
;    47         jz :e06not8
                jz #00460D87              ;#00460D6C: 164 19                     v  00 00  1   6      
;    48         test al,0x04
                test al,4                 ;#00460D6E: 250 04                     uv 00 01  1   7      
;    49         jz :e06not4
                jz #00460D78              ;#00460D70: 164 06                     v  00 00  1   7      
;    50     [32]
;    51             mov edx,[esp+ecx*4+4]
                    mov edx,[esp+ecx*4+4]  ;#00460D72: 213124214 04               uv 04 12  1   8      
;    52     [64]
;    53             mov rdx,[rsp+rcx*8+8]
;    54     []
;    55             jmp @f
                    jmp #00460D93         ;#00460D76: 353 1B                     v  00 00  1   8      
;    56       ::e06not4
;    57         test al,0x02
                test al,2                 ;#00460D78: 250 02                     uv 00 01  1   9      
;    58         jz :e06not2
                jz #00460D81              ;#00460D7A: 164 05                     v  00 00  1   9      
;    59     [32]
;    60             mov edx,[esp+ecx*4]
                    mov edx,[esp+ecx*4]   ;#00460D7C: 213024214                  uv 04 12  1  10      
;    61     [64]
;    62             mov rdx,[rsp+rcx*8]
;    63     []
;    64             jmp @f
                    jmp #00460D93         ;#00460D7F: 353 12                     v  00 00  1  10      
;    65       ::e06not2
;    66     [32]
;    67             mov edx,[esp+ecx*4-4]
                    mov edx,[esp+ecx*4-4]  ;#00460D81: 213124214 FC               uv 04 12  1  11      
;    68     [64]
;    69             mov rdx,[rsp+rcx*8-8]
;    70     []
;    71             jmp @f
                    jmp #00460D93         ;#00460D85: 353 0C                     v  00 00  1  11      
;    72       ::e06not8
;    73     [32]
;    74 --5/4/16: (wrong line on linux, from t39rndio/fimage[idx]=ch (line 111), when fimage hosed)
;    75 -- undone 20/6/16 (and pRepe1ip changed for "" to use #04)
;    76             mov edx,[esp+4]
                    mov edx,[esp+4]       ;#00460D87: 213124044 04               uv 04 10  1  12      
;    77 --          mov edx,[esp+8]
;    78     [64]
;    79 --28/8/15:
;    80             mov rdx,[rsp+8]
;    81 --          mov rdx,[rsp+16]
;    82     []
;    83         test al,0x04
                test al,4                 ;#00460D8B: 250 04                     vu 00 01  1  12      
;    84         jz @f
                jz #00460D93              ;#00460D8D: 164 04                     v  00 00  1  13      
;    85     [32]
;    86             mov edx,[esp+8]
                    mov edx,[esp+8]       ;#00460D8F: 213124044 08               uv 04 10  1  14      
;    87     [64]
;    88             mov rdx,[rsp+16]
;    89     []
;    90       @@:
;    91     [32]
;    92         sub edx,1
                sub edx,1                 ;#00460D93: 203352 01                  uv 04 04  1  15 04   
;    93     [64]
;    94         sub rdx,1
;    95     []
;    96 --      mov [ep1],edi
;    97 --      mov [ep2],edx
;    98 --      mov [era],ecx
;    99         test al,0x20
                test al,32                ;#00460D96: 250 20                     vu 00 01  1  15      
;   100         jz @f
                jz #00460DA2              ;#00460D98: 164 08                     v  00 00  1  16      
;   101             mov al,92           -- variable has not been assigned a value
                    mov al,92             ;#00460D9A: 260 5C                     uv 01 00  1  17      
;   102             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00460D9C: 351 C8300000               v  00 00  1  17      
;   103             int3
                    int3                  ;#00460DA1: 314                        np 00 00 13  18      
;   104       @@:
;   105         test al,0x10
                test al,16                ;#00460DA2: 250 10                     uv 00 01  1  31      
;   106         jz @f
                jz #00460DAE              ;#00460DA4: 164 08                     v  00 00  1  31      
;   107             mov al,5            -- subscript is not an atom
                    mov al,5              ;#00460DA6: 260 05                     uv 01 00  1  32      
;   108             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00460DA8: 351 BC300000               v  00 00  1  32      
;   109             int3
                    int3                  ;#00460DAD: 314                        np 00 00 13  33      
;   110       @@:
;   111         test al,1
                test al,1                 ;#00460DAE: 250 01                     uv 00 01  1  46      
;   112         jnz @f
                jnz #00460DBA             ;#00460DB0: 165 08                     v  00 00  1  46      
;   113             mov al,6            -- index %d(edi) out of bounds, assigning to a sequence of length %d(esi)
                    mov al,6              ;#00460DB2: 260 06                     uv 01 00  1  47      
;   114             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00460DB4: 351 B0300000               v  00 00  1  47      
;   115             int3
                    int3                  ;#00460DB9: 314                        np 00 00 13  48      
;   116       @@:
;   117             mov al,106          -- index %d(edi) out of bounds, reading from a sequence of length %d(esi)
                    mov al,106            ;#00460DBA: 260 6A                     uv 01 00  1  61      
;   118             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00460DBC: 351 A8300000               v  00 00  1  61      
;   119             int3
                    int3                  ;#00460DC1: 314                        np 00 00 13  62      
;   120 
;   121     ::e05sinaae10
;   122         mov al,5
                mov al,5                  ;#00460DC2: 260 05                     uv 01 00  1  75      
;   123         jmp @f
                jmp #00460DD9             ;#00460DC4: 353 13                     v  00 00  1  75      
;   124 
;   125 --    ::e06ioobp1WhatN
;   126 --      int3
;   127 --    ::e06ioobp1What
;   128 --      int3
;   129       ::e08seinaie11
;   130         int3
                int3                      ;#00460DC6: 314                        np 00 00 13  76      
;   131       ::e10sspeosediedx
;   132         int3
                int3                      ;#00460DC7: 314                        np 00 00 13  89      
;   133       ::e10sspeosediedx0
;   134 --      int3
;   135         mov al,10               -- slice starts past end of sequence (%d(edi) > %d(esi))
                mov al,10                 ;#00460DC8: 260 0A                     uv 01 00  1 102      
;   136         jmp @f
                jmp #00460DD9             ;#00460DCA: 353 0D                     v  00 00  1 102      
;   137       ::e10sspeosediedxN
;   138 --      int3
;   139     [32]
;   140         sub edi,edx
                sub edi,edx               ;#00460DCC: 051327                     uv 80 84  1 103      
;   141     [64]
;   142         sub rdi,rdx
;   143     []
;   144         mov al,10
                mov al,10                 ;#00460DCE: 260 0A                     vu 01 00  1 103      
;   145         jmp @f  
                jmp #00460DD9             ;#00460DD0: 353 07                     v  00 00  1 104      
;   146       ::e11sepeosediedxN
;   147     [32]
;   148         sub edi,edx
                sub edi,edx               ;#00460DD2: 051327                     uv 80 84  1 105      
;   149         sub edi,1
                sub edi,1                 ;#00460DD4: 203357 01                  uv 80 80  1 106 80   
;   150     [64]
;   151         sub rdi,rdx
;   152         sub rdi,1
;   153     []
;   154       ::e11sepeosediedx
;   155         mov al,11               -- slice ends past end of sequence (%d(edi) > %d(esi))
                mov al,11                 ;#00460DD7: 260 0B                     vu 01 00  1 106      
;   156       @@:
;   157     [32]
;   158         mov esi,edx
                mov esi,edx               ;#00460DD9: 213362                     uv 40 04  1 107      
;   159         and ecx,0xFF
                and ecx,255               ;#00460DDB: 201341 FF000000            vu 02 02  1 107      
;   160         mov edx,[esp+ecx]       -- era
                mov edx,[esp+ecx]         ;#00460DE1: 213024014                  uv 04 12  1 110    *02*
;   161         sub edx,1
                sub edx,1                 ;#00460DE4: 203352 01                  uv 04 04  1 111 04   
;   162     [64]
;   163         mov rdi,rdx
;   164         and rcx,0xFF
;   165         mov rdx,[rsp+rcx]       -- era
;   166         sub rdx,1
;   167     []
;   168         jmp :!iDiag
                jmp #00463E69 (:!iDiag)   ;#00460DE7: 351 7D300000               v  00 00  1 111      
;   169         int3                    -- (nodiag)
                int3                      ;#00460DEC: 314                        np 00 00 13 112      
;   170 
;   171 --/*
;   172 e06ioobp1WhatN:
;   173     sub edi,edx
;   174     jmp e06ioobWhat 
;   175 e06ioobp1What:
;   176     add edi,1
;   177 e06ioobWhat:
;   178     ; bit #20 in al: 1 is e92 ("variable has not been assigned a value") [set in e92vhnbaavEbxe06feh]
;   179     ; bit #10 in al: 1 is e05 ("subscript is not an atom") [set in e05sinaae06]
;   180     ; bit #01 in al: 0 is e06 ("assigning to"), 1 is e106 ("reading from")
;   181     ; bit #08 in al, plus:
;   182     ;  bit #04=1: [era] is at [esp+ecx*4+4]
;   183     ;  bit #02=0: [era] is at [esp+ecx*4-4]
;   184     ;  bit #02=1: [era] is at [esp+ecx*4]
;   185     ; bit #04 in al: [era] is at [esp+8]
;   186     ; bit #02 in al: [era] is at [esp+4]
;   187     mov ebx,esp
;   188 e06espinebx:
;   189     test al,0x08
;   190     jz e06not8
;   191     test al,0x04
;   192     jz e06not4
;   193     mov ecx,[ebx+ecx*4+4]
;   194     jmp @f
;   195 e06not4:
;   196     test al,0x02
;   197     jz e06not2
;   198     mov ecx,[ebx+ecx*4]
;   199     jmp @f
;   200 e06not2:
;   201     mov ecx,[ebx+ecx*4-4]
;   202     jmp @f
;   203 e06not8:        
;   204     mov ecx,[ebx+4]
;   205     test al,0x04
;   206     jz @f
;   207     mov ecx,[ebx+8]
;   208 @@:
;   209     sub ecx,1
;   210     mov [ep1],edi
;   211     mov [ep2],edx
;   212     mov [era],ecx
;   213     test al,0x20
;   214     jz @f
;   215     mov al,92           ; variable has not been assigned a value
;   216     jmp enumbset
;   217 @@:
;   218     test al,0x10
;   219     jz @f
;   220     mov al,5            ; subscript is not an atom
;   221     jmp enumbset
;   222 @@:
;   223     test al,1
;   224     jnz @f
;   225     mov al,6            ; index %d out of bounds, assigning to a sequence of length %d
;   226     jmp enumbset
;   227 
;   228 e106ioobrp1:
;   229     add edi,1
;   230 e106ioobr:
;   231     mov [ep1],edi
;   232     mov [ep2],edx
;   233     pop [era]
;   234 @@:
;   235     mov al,106          ; index %d out of bounds, reading from a sequence of length %d
;   236     jmp enumbset
;   237 --*/
;   238 
;   239 
;   240 --/*
;   241 procedure :%fixupIndex(:%)
;   242 end procedure -- (for Edita/CtrlQ)
;   243 --*/
;   244     :%fixupIndex
;   245 ----------------
;   246     [32]
;   247         -- idx-1 in edi, len in edx, NOT: idx addr in ebx, al set as below
;   248         -- bit #01 in al: 0 is e06 ("assigning to"), 1 is e106 ("reading from")
;   249         -- bit #08 in al, plus:
;   250         --  bit #04=1: [era] is at [esp+ecx*4+4]
;   251         --  bit #02=0: [era] is at [esp+ecx*4-4]
;   252         --  bit #02=1: [era] is at [esp+ecx*4]
;   253         -- bit #04 in al: [era] is at [esp+8]
;   254         -- bit #02 in al: [era] is at [esp+4]
;   255 
;   256         add edi,1
                add edi,1                 ;#00460DED: 203307 01                  uv 80 80  1 125      
;   257         jl :opfixupNegativeIdx
                jl #00460E2E              ;#00460DF0: 174 3C                     v  00 00  1 125      
;   258         -- but it might be a float:
;   259         cmp edi,h4
                cmp edi,h4                ;#00460DF2: 201377 00000040            uv 00 80  1 126      
;   260 --11/8/21: (NO!)
;   261         jl :e06ioobWhat             -- 0 or >length
                jl #00460D68              ;#00460DF8: 017214 6AFFFFFF            v  00 00  1 126      
;   262 --      jle :e06ioobWhat            -- 0 or >length
;   263 --DEV use [ebx+edi*2-1] instead... :%LoadMint?
;   264         shl edi,2
                shl edi,2                 ;#00460DFE: 301347 02                  u  80 80  1 127      
;   265 --11/8/21: (abortive attempt on 
;   266         jz :e06ioobWhat             -- h4, I assume
                jz #00460D68              ;#00460E01: 017204 61FFFFFF            v  00 00  1 127      
;   267 --DEV
;   268 --    :!fixupIdxe92                 -- exception here mapped to e92vhnbaavEbxe06feh (see pdiagN.e)
;   269         cmp byte[edi-1],0x12
                cmp byte[edi-1],#12       ;#00460E07: 200177 FF 12               u  00 80  2 130    *80*
;   270         jne :e05sinaae06
                jne #00460D5B             ;#00460E0B: 017205 4AFFFFFF            v  00 00  1 131      
;   271         fld qword[edi]
                fld qword[edi]            ;#00460E11: 335007                     np 00 80  1 132      
;   272         call :%down53
                call #00462155 (:%down53)  ;#00460E13: 350 3D130000               v  00 00  1 133      
;   273         sub esp,8
                sub esp,8                 ;#00460E18: 203354 08                  uv 10 10  1 134      
;   274         fistp qword[esp]
                fistp qword[esp]          ;#00460E1B: 337074044                  np 00 10  6 137    *10*
;   275         call :%near53
                call #00462163 (:%near53)  ;#00460E1E: 350 40130000               v  00 00  1 143      
;   276         mov edi,[esp]
                mov edi,[esp]             ;#00460E23: 213074044                  uv 80 10  1 144      
;   277         add esp,8
                add esp,8                 ;#00460E26: 203304 08                  vu 10 10  1 144      
;   278         cmp edi,0
                cmp edi,0                 ;#00460E29: 203377 00                  uv 00 80  1 145      
;   279         jge :opfixupIdxNotNegative
                jge #00460E3B             ;#00460E2C: 175 0D                     v  00 00  1 145      
;   280       ::opfixupNegativeIdx
;   281             add edi,edx
                    add edi,edx           ;#00460E2E: 001327                     uv 80 84  1 146      
;   282             xor ebx,ebx
                    xor ebx,ebx           ;#00460E30: 061333                     vu 08 08  1 146      
;   283             cmp edi,edx
                    cmp edi,edx           ;#00460E32: 071327                     uv 00 84  1 147      
;   284             jae :e06ioobp1WhatN
                    jae #00460D60         ;#00460E34: 017203 26FFFFFF            v  00 00  1 147      
;   285             ret
                    ret                   ;#00460E3A: 303                        np 00 00  2 148      
;   286       ::opfixupIdxNotNegative
;   287         sub edi,1
                sub edi,1                 ;#00460E3B: 203357 01                  uv 80 80  1 150      
;   288         xor ebx,ebx
                xor ebx,ebx               ;#00460E3E: 061333                     vu 08 08  1 150      
;   289         cmp edi,edx
                cmp edi,edx               ;#00460E40: 071327                     uv 00 84  1 151      
;   290         jae :e06ioobp1What          -- > length or still <=0
                jae #00460D65             ;#00460E42: 017203 1DFFFFFF            v  00 00  1 151      
;   291     [64]
;   292         -- NB: calling code usually has the 32-bit comment, even in 64-bit code.
;   293         --      if it says esp, map it from the above and update the comment,
;   294         --      once you have proved it is correct and fully tested, that is.
;   295         -- idx-1 in rdi, len in rdx, NOT: idx addr in rbx, al set as below
;   296         -- bit #01 in al: 0 is e06 ("assigning to"), 1 is e106 ("reading from")
;   297         -- bit #08 in al, plus:
;   298         --  bit #04=1: [era] is at [rsp+rcx*8+8]
;   299         --  bit #02=0: [era] is at [rsp+rcx*8-8]
;   300         --  bit #02=1: [era] is at [rsp+rcx*8]
;   301         -- bit #04 in al: [era] is at [rsp+16]
;   302         -- bit #02 in al: [era] is at [rsp+8]
;   303 
;   304         add rdi,1
;   305         jl :opfixupNegativeIdx
;   306         -- but it might be a float:
;   307 --      cmp rdi,h4
;   308         mov r15,h4  -- DEV should always already be so?...
;   309         cmp rdi,r15
;   310         jl :e06ioobWhat             -- 0 or >length
;   311         shl rdi,2
;   312 --DEV
;   313 --    :!fixupIdxe92                 -- exception here mapped to e92vhnbaavEbxe06feh (see pdiagN.e)
;   314         cmp byte[rdi-1],0x12
;   315         jne :e05sinaae06
;   316         fld tbyte[rdi]
;   317 --      fldcw [down53]
;   318         call :%down53
;   319         sub rsp,8
;   320         fistp qword[rsp]
;   321 --      fldcw [near53]
;   322 --      call :%near53
;   323         call :%near64
;   324         mov rdi,[rsp]
;   325         add rsp,8
;   326         cmp rdi,0
;   327         jge :opfixupIdxNotNegative
;   328       ::opfixupNegativeIdx
;   329             add rdi,rdx
;   330             xor rbx,rbx
;   331             cmp rdi,rdx
;   332             jae :e06ioobp1WhatN
;   333             ret
;   334       ::opfixupIdxNotNegative
;   335         sub rdi,1
;   336         xor rbx,rbx
;   337         cmp rdi,rdx
;   338         jae :e06ioobp1What          -- > length or still <=0
;   339     []
;   340         ret
                ret                       ;#00460E48: 303                        np 00 00  2 152      
;   341 
;   342 --/*
;   343 procedure :%fixupSliceStart(:%)
;   344 end procedure -- (for Edita/CtrlQ)
;   345 --*/
;   346     :%fixupSliceStart
;   347 ---------------------
;   348     [32]
;   349         add edi,1
                add edi,1                 ;#00460E49: 203307 01                  uv 80 80  1 154      
;   350         jle :fixupNegativeSliceStart
                jle #00460E84             ;#00460E4C: 176 36                     v  00 00  1 154      
;   351         -- but it might be a float:
;   352         cmp edi,h4
                cmp edi,h4                ;#00460E4E: 201377 00000040            uv 00 80  1 155      
;   353         jl :e10sspeosediedx0
                jl #00460DC8              ;#00460E54: 017214 6EFFFFFF            v  00 00  1 155      
;   354         shl edi,2
                shl edi,2                 ;#00460E5A: 301347 02                  u  80 80  1 156      
;   355 --DEV
;   356 --  :!fixupSliceStarte92            -- exception here mapped to e92vhnbaavEbxe10feh
;   357         cmp byte[edi-1],0x12
                cmp byte[edi-1],#12       ;#00460E5D: 200177 FF 12               u  00 80  2 159    *80*
;   358         jne e05sinaae10             -- subscript is not an atom [era as per e10]
                jne #00460DC2             ;#00460E61: 017205 5BFFFFFF            v  00 00  1 160      
;   359         fld qword[edi]
                fld qword[edi]            ;#00460E67: 335007                     np 00 80  1 161      
;   360 --      fldcw [down53]
;   361         call :%down53
                call #00462155 (:%down53)  ;#00460E69: 350 E7120000               v  00 00  1 162      
;   362         sub esp,8
                sub esp,8                 ;#00460E6E: 203354 08                  uv 10 10  1 163      
;   363         fistp qword[esp]
                fistp qword[esp]          ;#00460E71: 337074044                  np 00 10  6 166    *10*
;   364 --      fldcw [near53]
;   365         call :%near53
                call #00462163 (:%near53)  ;#00460E74: 350 EA120000               v  00 00  1 172      
;   366         mov edi,[esp]
                mov edi,[esp]             ;#00460E79: 213074044                  uv 80 10  1 173      
;   367         add esp,8
                add esp,8                 ;#00460E7C: 203304 08                  vu 10 10  1 173      
;   368         cmp edi,0
                cmp edi,0                 ;#00460E7F: 203377 00                  uv 00 80  1 174      
;   369         jge :fixupSliceStartNotNegative
                jge #00460E91             ;#00460E82: 175 0D                     v  00 00  1 174      
;   370       ::fixupNegativeSliceStart
;   371             add edi,edx
                    add edi,edx           ;#00460E84: 001327                     uv 80 84  1 175      
;   372             xor ebx,ebx
                    xor ebx,ebx           ;#00460E86: 061333                     vu 08 08  1 175      
;   373             cmp edi,edx
                    cmp edi,edx           ;#00460E88: 071327                     uv 00 84  1 176      
;   374             ja :e10sspeosediedxN    -- slice starts past end of sequence (%d > %d)
                    ja #00460DCC          ;#00460E8A: 017207 3CFFFFFF            v  00 00  1 176      
;   375             ret
                    ret                   ;#00460E90: 303                        np 00 00  2 177      
;   376       ::fixupSliceStartNotNegative
;   377         sub edi,1
                sub edi,1                 ;#00460E91: 203357 01                  uv 80 80  1 179      
;   378         xor ebx,ebx
                xor ebx,ebx               ;#00460E94: 061333                     vu 08 08  1 179      
;   379         cmp edi,edx
                cmp edi,edx               ;#00460E96: 071327                     uv 00 84  1 180      
;   380         ja :e10sspeosediedx     -- slice starts past end of sequence (%d > %d)
                ja #00460DC7              ;#00460E98: 017207 29FFFFFF            v  00 00  1 180      
;   381         ret
                ret                       ;#00460E9E: 303                        np 00 00  2 181      
;   382     [64]
;   383         add rdi,1
;   384         jle :fixupNegativeSliceStart
;   385         -- but it might be a float:
;   386         mov r15,h4
;   387         cmp rdi,r15
;   388         jl :e10sspeosediedx0
;   389         shl rdi,2
;   390 --DEV
;   391 --  :!fixupSliceStarte92            -- exception here mapped to e92vhnbaavEbxe10feh
;   392         cmp byte[rdi-1],0x12
;   393         jne e05sinaae10             -- subscript is not an atom [era as per e10]
;   394         fld tbyte[rdi]
;   395 --      fldcw [down53]
;   396         call :%down53
;   397         sub rsp,8
;   398         fistp qword[rsp]
;   399 --      fldcw [near53]
;   400 --      call :%near53
;   401         call :%near64
;   402         mov rdi,[rsp]
;   403         add rsp,8
;   404         cmp rdi,0
;   405         jge :fixupSliceStartNotNegative
;   406       ::fixupNegativeSliceStart
;   407             add rdi,rdx
;   408             xor rbx,rbx
;   409             cmp rdi,rdx
;   410             ja :e10sspeosediedxN    -- slice starts past end of sequence (%d > %d)
;   411             ret
;   412       ::fixupSliceStartNotNegative
;   413         sub rdi,1
;   414         xor rbx,rbx
;   415         cmp rdi,rdx
;   416         ja :e10sspeosediedx     -- slice starts past end of sequence (%d > %d)
;   417         ret
;   418     []
;   419 
;   420 --/*
;   421 procedure :%fixupSliceEnd(:%)
;   422 end procedure -- (for Edita/CtrlQ)
;   423 --*/
;   424     :%fixupSliceEnd
;   425 -------------------
;   426     [32]
;   427         -- idx in edi, len in edx, cl=0/4/8/12 etc for era
;   428         -- NB flags from the cmp edi,edx must be undamaged!
;   429         jl :fixupNegativeSliceEnd
                jl #00460ED7              ;#00460E9F: 174 36                     v  00 00  1 183      
;   430 
;   431         -- but it might be a float:
;   432         cmp edi,h4
                cmp edi,h4                ;#00460EA1: 201377 00000040            uv 00 80  1 184      
;   433 --      jl e06ioobWhat
;   434         jl :e11sepeosediedx
                jl #00460DD7              ;#00460EA7: 017214 2AFFFFFF            v  00 00  1 184      
;   435         shl edi,2
                shl edi,2                 ;#00460EAD: 301347 02                  u  80 80  1 185      
;   436 --DEV
;   437 --    :!fixupSliceEnde92                  -- exception here mapped to e92vhnbaavEbxe11feh
;   438         cmp byte[edi-1],0x12
                cmp byte[edi-1],#12       ;#00460EB0: 200177 FF 12               u  00 80  2 188    *80*
;   439         jne :e08seinaie11                -- slice end is not an integer [era as per e11]
                jne #00460DC6             ;#00460EB4: 017205 0CFFFFFF            v  00 00  1 189      
;   440         fld qword[edi]
                fld qword[edi]            ;#00460EBA: 335007                     np 00 80  1 190      
;   441         call :%down53
                call #00462155 (:%down53)  ;#00460EBC: 350 94120000               v  00 00  1 191      
;   442         sub esp,8
                sub esp,8                 ;#00460EC1: 203354 08                  uv 10 10  1 192      
;   443         fistp qword[esp]
                fistp qword[esp]          ;#00460EC4: 337074044                  np 00 10  6 195    *10*
;   444         call :%near53
                call #00462163 (:%near53)  ;#00460EC7: 350 97120000               v  00 00  1 201      
;   445         mov edi,[esp]
                mov edi,[esp]             ;#00460ECC: 213074044                  uv 80 10  1 202      
;   446         add esp,8
                add esp,8                 ;#00460ECF: 203304 08                  vu 10 10  1 202      
;   447         cmp edi,0
                cmp edi,0                 ;#00460ED2: 203377 00                  uv 00 80  1 203      
;   448         jge :fixupSliceEndNotNegative
                jge #00460EE6             ;#00460ED5: 175 0F                     v  00 00  1 203      
;   449       ::fixupNegativeSliceEnd
;   450             lea edi,[edi+edx+1]
                    lea edi,[edi+edx+1]   ;#00460ED7: 215174027 01               uv 80 84  1 204      
;   451             xor ebx,ebx
                    xor ebx,ebx           ;#00460EDB: 061333                     vu 08 08  1 204      
;   452             cmp edi,edx
                    cmp edi,edx           ;#00460EDD: 071327                     uv 00 84  1 205      
;   453             ja :e11sepeosediedxN    -- slice ends past end of sequence (%d > %d)
                    ja #00460DD2          ;#00460EDF: 017207 EDFEFFFF            v  00 00  1 205      
;   454             ret
                    ret                   ;#00460EE5: 303                        np 00 00  2 206      
;   455       ::fixupSliceEndNotNegative
;   456         cmp edi,edx
                cmp edi,edx               ;#00460EE6: 071327                     uv 00 84  1 208      
;   457         ja :e11sepeosediedx     -- slice ends past end of sequence (%d > %d)
                ja #00460DD7              ;#00460EE8: 017207 E9FEFFFF            v  00 00  1 208      
;   458         xor ebx,ebx
                xor ebx,ebx               ;#00460EEE: 061333                     uv 08 08  1 209      
;   459         ret
                ret                       ;#00460EF0: 303                        np 00 00  2 210      
;   460     [64]
;   461         -- idx in rdi, len in rdx, cl=4/8 for era
;   462         -- NB flags from the cmp rdi,rdx must be undamaged!
;   463         jl :fixupNegativeSliceEnd
;   464 
;   465         -- but it might be a float:
;   466 --      cmp rdi,h4
;   467         mov r15,h4
;   468         cmp rdi,r15
;   469 --      jl e06ioobWhat
;   470         jl :e11sepeosediedx
;   471         shl rdi,2
;   472 --DEV
;   473 --    :!fixupSliceEnde92                  -- exception here mapped to e92vhnbaavEbxe11feh
;   474         cmp byte[rdi-1],0x12
;   475         jne :e08seinaie11                -- slice end is not an integer [era as per e11]
;   476         fld qword[rdi]
;   477 --      fldcw [down53]
;   478         call :%down53
;   479         sub rsp,8
;   480         fistp qword[rsp]
;   481 --      fldcw [near53]
;   482 --      call :%near53
;   483         call :%near64
;   484         mov rdi,[rsp]
;   485         add rsp,8
;   486         cmp rdi,0
;   487         jge :fixupSliceEndNotNegative
;   488       ::fixupNegativeSliceEnd
;   489             lea rdi,[rdi+rdx+1]
;   490             xor rbx,rbx
;   491             cmp rdi,rdx
;   492             ja :e11sepeosediedxN    -- slice ends past end of sequence (%d > %d)
;   493             ret
;   494       ::fixupSliceEndNotNegative
;   495         cmp rdi,rdx
;   496         ja :e11sepeosediedx     -- slice ends past end of sequence (%d > %d)
;   497         xor rbx,rbx
;   498         ret
;   499     []
;   500       }
;   501 
    jmp #00462C8F (:%opRetf)              ;#00460EF1: 351 991D0000               v  00 00  1 212      
;C:\Phix\builtins\VM\pSubssN.e:
;==============================
;     1 --
;     2 -- pSubssN.e
;     3 -- =========
;     4 --
;     5 --  Various subscripting routines:
;     6 --
;     7 --      :%pSubss            -- res := ref[idx1]~[idxN..sliceend]
;     8 --      :%pSubsss           -- res := string[slicestart..sliceend]
;     9 --
;    10 
;    11 include builtins\VM\pHeap.e     -- :%pDealloc, :%pAllocStr, :%pAllocSeq
;    12 
;    13 include builtins\VM\pFixup.e    -- negative and floating point index handling (:%fixupIndex)
;    14 
;    15 --26/8/22 (spotted in passing)
;    16 --#ilASM{ jmp :%opRetf
;    17 #ilASM{ jmp :!opCallOnceYeNot
                jmp :!opCallOnceYeNot     ;#00460A55: 351 991D0000               v  00 00  1   1      
;    18 
;    19 --DEV FIXME: (and the :!bang labels below)
;    20     ::e04atsaa4
;    21         int3
                int3                      ;#00460A5A: 314                        np 00 00 13   2      
;    22     ::e04atsaa9
;    23         int3
                int3                      ;#00460A5B: 314                        np 00 00 13  15      
;    24     ::e04atsaap8
;    25         int3
                int3                      ;#00460A5C: 314                        np 00 00 13  28      
;    26     ::e04atsaap12
;    27         int3
                int3                      ;#00460A5D: 314                        np 00 00 13  41      
;    28     ::e09slinecx
;    29         [32]
;    30             mov edx,[esp+8]         -- era
                    mov edx,[esp+8]       ;#00460A5E: 213124044 08               uv 04 10  1  54      
;    31             mov edi,[esp]
                    mov edi,[esp]         ;#00460A62: 213074044                  vu 80 10  1  54      
;    32             add ecx,edi
                    add ecx,edi           ;#00460A65: 001371                     uv 02 82  1  55      
;    33             add edi,1
                    add edi,1             ;#00460A67: 203307 01                  vu 80 80  1  55      
;    34             mov al,9                -- e09slin(edi,ecx)
                    mov al,9              ;#00460A6A: 260 09                     uv 01 00  1  56      
;    35             sub edx,1
                    sub edx,1             ;#00460A6C: 203352 01                  vu 04 04  1  56      
;    36         [64]
;    37             mov rdx,[rsp+16]        -- era
;    38             mov rdi,[rsp]
;    39             add rcx,rdi
;    40             add rdi,1
;    41             mov al,9                -- e09slin(rdi,rcx)
;    42             sub rdx,1
;    43         []
;    44             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00460A6F: 351 F5330000               v  00 00  1  57      
;    45             int3
                    int3                  ;#00460A74: 314                        np 00 00 13  58      
;    46 --  ::e09slinecx2
;    47 --      int3
;    48 
;    49 --/*
;    50 procedure :%pSubss(:%)
;    51 end procedure -- (for Edita/CtrlQ)
;    52 --*/
;    53     :%pSubss        -- res := ref[idx1]~[idxN..sliceend]
;    54 ------------
;    55     [32]
;    56         --calling convention:
;    57         -- <perform any required opUnassigned's>
;    58         --  mov ecx,N
;    59         --  push <return address>
;    60         --  push res            -- result var addr
;    61         --  push [sliceend]     -- (opUnassigned)
;    62         --  push [idxN]..[idx1] -- (opUnassigned)
;    63         --  mov esi,[ref]       -- (opUnassigned)
;    64         --  jmp :%pSubss        -- actually a call
;    65         --<return address>
;    66 
;    67       ::pSubssWhile
;    68             pop edi             -- next idx (ref)
                    pop edi               ;#00460A75: 137                        uv 80 00  1  71      
;    69 --expect exception here for subscript errors...
;    70           :!pSubsse94   -- exception here mapped to e94vhnbaav(edx)
;    71             mov al,[ebx+esi*4-1]
                    mov al,[ebx+esi*4-1]  ;#00460A76: 212104263 FF               vu 01 48  1  71      
;    72             mov edx,[ebx+esi*4-12]  -- length
                    mov edx,[ebx+esi*4-12]  ;#00460A7A: 213124263 F4               uv 04 48  1  72      
;    73             shl esi,2
                    shl esi,2             ;#00460A7E: 301346 02                  u  40 40  1  73      
;    74             sub edi,1               -- decrement edi (:-)
                    sub edi,1             ;#00460A81: 203357 01                  vu 80 80  1  73      
;    75             test al,0x80
                    test al,#80           ;#00460A84: 250 80                     uv 00 01  1  74      
;    76             jz :e04atsaa9       -- era @ [esp+ecx*4+4]
                    jz #00460A5B          ;#00460A86: 164 D3                     v  00 00  1  74      
;    77 
;    78             sub ecx,1
                    sub ecx,1             ;#00460A88: 203351 01                  uv 02 02  1  75      
;    79             jz :pSubssEndWhile -- quit loop with startslice (aka idxN) ref in edi (may need fixupSliceStart)
                    jz #00460AB8          ;#00460A8B: 164 2B                     v  00 00  1  75      
;    80 
;    81             cmp edi,edx
                    cmp edi,edx           ;#00460A8D: 071327                     uv 00 84  1  76      
;    82             jb @f               -- unsigned jump, lets 0..len-1 through
                    jb #00460AA1          ;#00460A8F: 162 10                     v  00 00  1  76      
;    83                                 --               (we just decremented edi)
;    84 --17/7/17:
;    85                 add ecx,2
                        add ecx,2         ;#00460A91: 203301 02                  uv 02 02  1  77      
;    86                 mov al,8+4+1        -- [era] is [esp+ecx*4+4], "reading from"
                        mov al,13         ;#00460A94: 260 0D                     vu 01 00  1  77      
;    87                 call :%fixupIndex   -- idx-1 in edi, len in edx, al set
                        call #00460DED (:%fixupIndex)  ;#00460A96: 350 52030000               v  00 00  1  78      
;    88                 mov al,byte[esi-1]  -- as we just trashed it
                        mov al,[esi-1]    ;#00460A9B: 212106 FF                  uv 01 40  1  79      
;    89                 sub ecx,2
                        sub ecx,2         ;#00460A9E: 203351 02                  vu 02 02  1  79      
;    90           @@:
;    91             cmp al,0x80
                    cmp al,#80            ;#00460AA1: 200370 80                  uv 00 01  1  80      
;    92             jne @f
                    jne #00460AAB         ;#00460AA4: 165 05                     v  00 00  1  80      
;    93             mov esi,[esi+edi*4]
                    mov esi,[esi+edi*4]   ;#00460AA6: 213064276                  uv 40 C0  1  81      
;    94             jmp :pSubssWhile
                    jmp #00460A75 (:%pSubss)  ;#00460AA9: 353 CA                     v  00 00  1  81      
;    95 
;    96           @@:
;    97             cmp al,0x82
                    cmp al,#82            ;#00460AAB: 200370 82                  uv 00 01  1  82      
;    98             jne :e04atsaap8         -- era @ [esp+ecx*4+8] [??+4??]
                    jne #00460A5C         ;#00460AAE: 165 AC                     v  00 00  1  82      
;    99             lea esi,[esi+edi]       -- address of (first) char
                    lea esi,[esi+edi]     ;#00460AB0: 215064076                  uv 40 C0  1  83      
;   100             sub ecx,1
                    sub ecx,1             ;#00460AB3: 203351 01                  vu 02 02  1  83      
;   101             jnz :e04atsaap12        -- strings must be last segment
                    jnz #00460A5D         ;#00460AB6: 165 A5                     v  00 00  1  84      
;   102 
;   103       ::pSubssEndWhile
;   104         cmp edi,edx
                cmp edi,edx               ;#00460AB8: 071327                     uv 00 84  1  85      
;   105         jbe @f              -- unsigned jump, lets 0..len through (NB jbe here)
                jbe #00460AC3             ;#00460ABA: 166 07                     v  00 00  1  85      
;   106                             --               (we just decremented edi)
;   107                             --               (slice start can be 1..length+1)
;   108             mov cl,12               -- [era] @ [esp+12]
                    mov cl,12             ;#00460ABC: 261 0C                     uv 02 00  1  86      
;   109             call :%fixupSliceStart  -- idx in edi, len in edx
                    call :%fixupSliceStart  ;#00460ABE: 350 86030000               v  00 00  1  86      
;   110       @@:
;   111 -->     mov [ap1],edi           -- save slice start
;   112 --not: edx,edi,ecx,ebx,esi,eax...
;   113 --      mov ??,edi
;   114 --      pop edi                 -- ref slice end
;   115         xchg [esp],edi          -- swap slice start/end
                xchg [esp],edi            ;#00460AC3: 207074044                  np 80 90  3  87      
;   116         cmp edi,edx
                cmp edi,edx               ;#00460AC6: 071327                     uv 00 84  1  90      
;   117         jbe @f              -- unsigned jump, lets 0..len through (NB jbe here, and no dec edi)
                jbe #00460AD1             ;#00460AC8: 166 07                     v  00 00  1  90      
;   118                             --               (slice end can be 0..length)
;   119 --          mov cl,8            -- [era] @ [esp+8]
;   120             mov cl,12           -- [era] @ [esp+12] (inc ret to @@:)
                    mov cl,12             ;#00460ACA: 261 0C                     uv 02 00  1  91      
;   121             call :%fixupSliceEnd    -- idx in edi, len in edx
                    call #00460E9F (:%fixupSliceEnd)  ;#00460ACC: 350 CE030000               v  00 00  1  91      
;   122       @@:
;   123 
;   124         -- stack contents:
;   125         --  [esp] slice start (0-based)
;   126         --  [esp+4] addr res
;   127         --  [esp+8] return address
;   128         mov ecx,edi             -- slice end
                mov ecx,edi               ;#00460AD1: 213317                     uv 02 80  1  92      
;   129 --      xor ebx,ebx
;   130         mov edi,[esp+4]         -- address of res (re-fetched later)
                mov edi,[esp+4]           ;#00460AD3: 213174044 04               vu 80 10  1  92      
;   131 -->     sub ecx,[ap1]           -- slice start
;   132         sub ecx,[esp]           -- slice start
                sub ecx,[esp]             ;#00460AD7: 053014044                  uv 02 12  2  93      
;   133         jl :e09slinecx          -- slice length is negative
                jl #00460A5E              ;#00460ADA: 174 82                     v  00 00  1  94      
;   134 --      mov edi,[esp]           -- address of res (re-fetched later)
;   135 --      mov edi,[esp+4]         -- address of res (re-fetched later)
;   136         mov edx,ecx             -- new object len = slice len
                mov edx,ecx               ;#00460ADC: 213321                     uv 04 02  1  95      
;   137         mov edi,[edi]           -- ref of result (prev)
                mov edi,[edi]             ;#00460ADE: 213077                     vu 80 80  1  95      
;   138         cmp al,0x80
                cmp al,#80                ;#00460AE0: 200370 80                  uv 00 01  1  96      
;   139         jne :pSubssStr
                jne #00460BE3             ;#00460AE3: 017205 FA000000            v  00 00  1  96      
;   140         --
;   141         -- can we do things in-situ?
;   142         --
;   143         cmp edi,h4
                cmp edi,h4                ;#00460AE9: 201377 00000040            uv 00 80  1  97      
;   144 --      jle :pSubssp1leh4
;   145 --    ::pSubssp1leh4    -- ref p1 <= h4         (first test)
;   146 --killed p2js (25/5/21):
;   147         jle :pSubssNewSeq
                jle #00460BB1             ;#00460AEF: 017216 BC000000            v  00 00  1  97      
;   148 /*
;   149         jg @f
;   150             -- if new length = length(p2) then incref p2 -> p1, exit/all done
;   151             cmp edx,[esi-12]
;   152             jne :pSubssNewSeq
;   153             -- (this is the [int/unassigned]:=x[1..$] case)
;   154             add esp,4                   -- discard slice start (must be 0 anyway)
;   155             pop edi                     -- addr tgt
;   156             mov edx,[esi-8]             -- refcount
;   157             lea eax,[esi+1]
;   158             add edx,1
;   159             ror eax,2                   -- == ref p2
;   160             mov [esi-8],edx
;   161             mov [edi],eax               -- (no need to dealloc)
;   162             ret
;   163       @@:
;   164 */
;   165         shl edi,2
                shl edi,2                 ;#00460AF5: 301347 02                  u  80 80  1  98      
;   166         cmp dword[edi-8],1              -- refcount of 1
                cmp dword[edi-8],1        ;#00460AF8: 203177 F8 01               u  00 80  2 101    *80*
;   167 --      jne :pSubssp2rcn1
;   168 --    ::pSubssp2rcn1    -- refcount(esi/p2)!=1  (second test)
;   169         jne :pSubssNewSeq
                jne #00460BB1             ;#00460AFC: 017205 AF000000            v  00 00  1 102      
;   170 /*
;   171         je @f
;   172             cmp edi,esi
;   173             jne :pSubssp2nep1
;   174             cmp edx,[esi-12]
;   175             jne :pSubssNewSeq
;   176             -- (this must therefore be the x:=x[1..$] case, at least datawise, 
;   177             --  although the hll could be say ti:=table[i][1..$], repeated)
;   178 --          pop edi                     -- [1] discard addr res
;   179             add esp,8                   -- discard slice start and addr res
;   180             ret
;   181       @@:
;   182 */
;   183         cmp edi,esi
                cmp edi,esi               ;#00460B02: 071367                     uv 00 C0  1 103      
;   184 --      jne :pSubssp2nep1
;   185         jne :pSubssNewSeq
                jne #00460BB1             ;#00460B04: 017205 A7000000            v  00 00  1 103      
;   186 /*
;   187         je @f
;   188           ::pSubssp2nep1    -- edi!=esi             (third test)
;   189             cmp edx,[esi-12]                -- if lengths match
;   190             jne :pSubssNewSeq
;   191             add esp,4                       -- discard slice start (must be 0 anyway)
;   192             pop edi                         -- addr tgt
;   193             mov ecx,[esi-8]                 -- p2 refcount (or ref[idx1][idx2]..[idxn-1])
;   194             lea eax,[esi+1]                 -- calc ref (for "") in eax
;   195             add ecx,1
;   196             mov edx,[edi]                   -- get prev ref
;   197             mov [esi-8],ecx                 -- incref
;   198             ror eax,2                       -- == ref p2
;   199             mov ecx,[ebx+edx*4-8]           -- p1 refcount
;   200             mov [edi],eax                   -- save new ref
;   201             sub ecx,1
;   202             jz :%pDealloc
;   203             mov [ebx+edx*4-8],ecx           -- decref
;   204             ret
;   205 
;   206       @@:
;   207 */
;   208         -- (this is the x:=x[i..j] case, with a refcount of 1)
;   209         push ecx                        --[?] save new length
                push ecx                  ;#00460B0A: 121                        uv 00 02  1 104      
;   210         xor ebx,ebx
                xor ebx,ebx               ;#00460B0B: 061333                     vu 08 08  1 104      
;   211 -->     mov edx,[ap1]                   -- slice start (0-based)
;   212         mov edx,[esp+4]                 -- slice start (0-based)
                mov edx,[esp+4]           ;#00460B0D: 213124044 04               uv 04 10  1 105      
;   213         mov ecx,[edi-12]                -- original length
                mov ecx,[edi-12]          ;#00460B11: 213117 F4                  vu 02 80  1 105      
;   214         add edx,1
                add edx,1                 ;#00460B14: 203302 01                  uv 04 04  1 106      
;   215       ::pSubssDeallocPrevLoop
;   216             sub edx,1
                    sub edx,1             ;#00460B17: 203352 01                  uv 04 04  1 107 04   
;   217             jz :pSubssDeallocPrevDone
                    jz #00460B41          ;#00460B1A: 164 25                     v  00 00  1 107      
;   218             mov eax,[esi]
                    mov eax,[esi]         ;#00460B1C: 213006                     uv 01 40  1 108      
;   219             sub ecx,1
                    sub ecx,1             ;#00460B1E: 203351 01                  vu 02 02  1 108      
;   220             add esi,4
                    add esi,4             ;#00460B21: 203306 04                  uv 40 40  1 109      
;   221             cmp eax,h4
                    cmp eax,h4            ;#00460B24: 075 00000040               vu 00 01  1 109      
;   222             jle :pSubssDeallocPrevLoop
                    jle #00460B17         ;#00460B29: 176 EC                     v  00 00  1 110      
;   223             sub dword[ebx+eax*4-8],1
                    sub dword[ebx+eax*4-8],1  ;#00460B2B: 203154203 F8 01            u  00 09  3 111      
;   224             jnz :pSubssDeallocPrevLoop
                    jnz #00460B17         ;#00460B30: 165 E5                     v  00 00  1 113      
;   225             pushad
                    pushad                ;#00460B32: 140                        np 00 FF  5 114      
;   226             mov edx,eax
                    mov edx,eax           ;#00460B33: 213320                     uv 04 01  1 119      
;   227 --  if debugmem2
;   228 --  mov eax,[esp+40]    -- (DEV: untested!)
;   229 --  mov [dmFera],eax
;   230 --  end if
;   231             push dword[esp+44]
                    push dword[esp+44]    ;#00460B35: 377164044 2C               np 00 10  2 120      
;   232             call :%pDealloc0
                    call #004639AB (:%pDealloc0)  ;#00460B39: 350 6D2E0000               v  00 00  1 122      
;   233             popad
                    popad                 ;#00460B3E: 141                        np FF 00  5 123      
;   234             jmp :pSubssDeallocPrevLoop
                    jmp #00460B17         ;#00460B3F: 353 D6                     v  00 00  1 128      
;   235 
;   236       ::pSubssDeallocPrevDone
;   237         --
;   238         -- re-site the header.
;   239         --
;   240         -- register contents:
;   241         --  eax - unused
;   242         --  ecx - length less slice start (needed below)
;   243         --  edx - 0
;   244         --  esi - location of new s[1]
;   245         --  edi - raw addr of prev header
;   246         --  [esp] = new length
;   247         --  [esp+4] = slice start (0-based), aka discarded items
;   248         --  [esp+8] = addr res
;   249         --  [esp+12] = return address
;   250         --
;   251         cmp esi,edi
                cmp esi,edi               ;#00460B41: 071376                     uv 00 C0  1 129      
;   252         jne :pSubssReSiteHeader
                jne #00460B4E             ;#00460B43: 165 09                     v  00 00  1 129      
;   253             -- must be x=x[1..??] case, no need to resite header:
;   254             pop edx                     -- new length
                    pop edx               ;#00460B45: 132                        uv 04 00  1 130      
;   255             add esp,8                   -- discard slice start and addr res
                    add esp,8             ;#00460B46: 203304 08                  vu 10 10  1 130      
;   256             mov [esi-12],edx            -- set new length
                    mov [esi-12],edx      ;#00460B49: 211126 F4                  uv 00 44  1 131      
;   257             jmp :pSubssDeallocRest
                    jmp #00460B84         ;#00460B4C: 353 36                     v  00 00  1 131      
;   258 
;   259       ::pSubssReSiteHeader
;   260         mov eax,[edi-16]                -- prev maxlen
                mov eax,[edi-16]          ;#00460B4E: 213107 F0                  uv 01 80  1 132      
;   261 -->     mov edx,[ap1]                   -- discarded items
;   262         mov edx,[esp+4]                 -- discarded items, aka slice start
                mov edx,[esp+4]           ;#00460B51: 213124044 04               vu 04 10  1 132      
;   263         mov ebx,[edi-4]                 -- type (added 1/11/14)
                mov ebx,[edi-4]           ;#00460B55: 213137 FC                  uv 08 80  1 133      
;   264         shl edx,2                       -- discarded items in bytes
                shl edx,2                 ;#00460B58: 301342 02                  u  04 04  1 134      
;   265         mov [esi-16],eax                -- maxlen (unaltered)
                mov [esi-16],eax          ;#00460B5B: 211106 F0                  vu 00 41  1 134      
;   266         mov eax,[edi-20]                -- previous slack
                mov eax,[edi-20]          ;#00460B5E: 213107 EC                  uv 01 80  1 135      
;   267 --      add edx,[edi-20]                -- previous slack
;   268         mov [esi-4],ebx                 -- type (unaltered)
                mov [esi-4],ebx           ;#00460B61: 211136 FC                  vu 00 48  1 135      
;   269         add eax,edx                     -- new slack
                add eax,edx               ;#00460B64: 001320                     uv 01 05  1 136      
;   270         mov [esi-8],dword 1             -- refcount (unaltered)
                mov [esi-8], dword 1      ;#00460B66: 307106 F8 01000000         vu 00 40  1 136      
;   271         mov ebx,esi                     -- calculate new ref in ebx
                mov ebx,esi               ;#00460B6D: 213336                     uv 08 40  1 137      
;   272 --      pop dword[esi-12]               -- new length
;   273         pop edx                         -- new length
                pop edx                   ;#00460B6F: 132                        vu 04 00  1 137      
;   274         add esp,4                       -- discard slice start
                add esp,4                 ;#00460B70: 203304 04                  uv 10 10  1 138      
;   275         add ebx,1
                add ebx,1                 ;#00460B73: 203303 01                  vu 08 08  1 138      
;   276         pop edi                         -- addr res
                pop edi                   ;#00460B76: 137                        uv 80 00  1 139      
;   277         mov [esi-20],eax                -- set new slack
                mov [esi-20],eax          ;#00460B77: 211106 EC                  vu 00 41  1 139      
;   278         ror ebx,2
                ror ebx,2                 ;#00460B7A: 301313 02                  np 08 08  1 140      
;   279 --      mov [esi-20],edx                -- set new slack
;   280         mov [esi-12],edx                -- set new length
                mov [esi-12],edx          ;#00460B7D: 211126 F4                  uv 00 44  1 141      
;   281         mov [edi],ebx                   -- new ref of shifted header -> res
                mov [edi],ebx             ;#00460B80: 211037                     vu 00 88  1 141      
;   282         xor ebx,ebx                 -- important!
                xor ebx,ebx               ;#00460B82: 061333                     uv 08 08  1 142      
;   283       ::pSubssDeallocRest
;   284         lea esi,[esi+edx*4]             -- esi := esi[newlength+1]
                lea esi,[esi+edx*4]       ;#00460B84: 215064226                  vu 40 44  1 142      
;   285 
;   286       ::pSubssDeallocRestLoop
;   287         cmp ecx,edx
                cmp ecx,edx               ;#00460B87: 071321                     uv 00 06  1 143      
;   288         je :pSubssDeallocRestDone
                je #00460BB0              ;#00460B89: 164 25                     v  00 00  1 143      
;   289         mov eax,[esi]
                mov eax,[esi]             ;#00460B8B: 213006                     uv 01 40  1 144      
;   290         sub ecx,1
                sub ecx,1                 ;#00460B8D: 203351 01                  vu 02 02  1 144      
;   291         add esi,4
                add esi,4                 ;#00460B90: 203306 04                  uv 40 40  1 145      
;   292         cmp eax,h4
                cmp eax,h4                ;#00460B93: 075 00000040               vu 00 01  1 145      
;   293         jle :pSubssDeallocRestLoop
                jle #00460B87             ;#00460B98: 176 ED                     v  00 00  1 146      
;   294         sub dword[ebx+eax*4-8],1
                sub dword[ebx+eax*4-8],1  ;#00460B9A: 203154203 F8 01            u  00 09  3 147      
;   295         jnz :pSubssDeallocRestLoop
                jnz #00460B87             ;#00460B9F: 165 E6                     v  00 00  1 149      
;   296         pushad
                pushad                    ;#00460BA1: 140                        np 00 FF  5 150      
;   297         mov edx,eax
                mov edx,eax               ;#00460BA2: 213320                     uv 04 01  1 155      
;   298 --    if debugmem2
;   299 --      mov eax,[esp+32]
;   300 --      mov [dmFera],eax
;   301 --    end if
;   302         push dword[esp+32]
                push dword[esp+32]        ;#00460BA4: 377164044 20               np 00 10  2 156      
;   303         call :%pDealloc0
                call #004639AB (:%pDealloc0)  ;#00460BA8: 350 FE2D0000               v  00 00  1 158      
;   304         popad
                popad                     ;#00460BAD: 141                        np FF 00  5 159      
;   305         jmp :pSubssDeallocRestLoop
                jmp #00460B87             ;#00460BAE: 353 D7                     v  00 00  1 164      
;   306         
;   307 --      nop?
;   308       ::pSubssDeallocRestDone
;   309         ret
                ret                       ;#00460BB0: 303                        np 00 00  2 165      
;   310 
;   311 
;   312       ::pSubssNewSeq
;   313         -- register contents:
;   314         --  al 0x80
;   315         --  ecx = edx = new length
;   316         --  esi = raw addr of p2
;   317         --  edi = unknown (ref or raw tgt)
;   318         --  [esp] = slice start (0-based)
;   319         --  [esp+4] = addr res
;   320 --      xor ebx,ebx
;   321 --mov ecx,edx
;   322 --      mov edx,[esp]               -- slice start (0-based)
;   323 --      pop edx                     -- slice start (0-based)
;   324         pop edi                     -- slice start (0-based)
                pop edi                   ;#00460BB1: 137                        uv 80 00  1 167      
;   325         mov edx,[esp+8]             -- era
                mov edx,[esp+8]           ;#00460BB2: 213124044 08               vu 04 10  1 167      
;   326         call :%pAllocSeq            -- damages eax only
                call #00463832 (:%pAllocSeq)  ;#00460BB6: 350 772C0000               v  00 00  1 168      
;   327 -->     mov edx,[ap1]               -- slice start
;   328 --      lea esi,[esi+edx*4]
;   329         lea esi,[esi+edi*4]
                lea esi,[esi+edi*4]       ;#00460BBB: 215064276                  uv 40 C0  1 169      
;   330         push eax                    --[?] save ref
                push eax                  ;#00460BBE: 120                        vu 00 01  1 169      
;   331         test ecx,ecx
                test ecx,ecx              ;#00460BBF: 205311                     uv 00 02  1 170      
;   332         je :pSubssStore
                je #00460C69              ;#00460BC1: 017204 A2000000            v  00 00  1 170      
;   333         lea edi,[ebx+eax*4]
                lea edi,[ebx+eax*4]       ;#00460BC7: 215074203                  uv 80 09  1 171      
;   334       @@:
;   335             lodsd                   -- mov eax,[esi], esi+=4
                    lodsd                 ;#00460BCA: 255                        np 41 40  2 172      
;   336             stosd                   -- mov [edi],eax, edi+=4
                    stosd                 ;#00460BCB: 253                        np 80 81  3 174      
;   337             cmp eax,h4
                    cmp eax,h4            ;#00460BCC: 075 00000040               uv 00 01  1 177      
;   338             jl :Subss2_no_incref
                    jl #00460BD8          ;#00460BD1: 174 05                     v  00 00  1 177      
;   339                 add dword[ebx+eax*4-8],1
                        add dword[ebx+eax*4-8],1  ;#00460BD3: 203104203 F8 01            u  00 09  3 178      
;   340           ::Subss2_no_incref
;   341             sub ecx,1
                    sub ecx,1             ;#00460BD8: 203351 01                  vu 02 02  1 180      
;   342             jnz @b
                    jnz #00460BCA         ;#00460BDB: 165 ED                     v  00 00  1 181      
;   343         nop
                nop                       ;#00460BDD: 220                        uv 00 00  1 182      
;   344         jmp :pSubssStore
                jmp #00460C69             ;#00460BDE: 351 86000000               v  00 00  1 182      
;   345 
;   346       ::pSubssStr
;   347         -- register contents:
;   348         --  al 0x82
;   349         --  ecx = edx = new length
;   350         --  esi = raw addr of p2
;   351         --  edi = ref p1
;   352         --  [esp] = slice start (post-fixup, zero-based)
;   353         --  [esp+4] = addr res
;   354         --  [esp+8] = return address
;   355         -- insitu if: slice starts at 1, and refcount p2 is 1.
;   356         -- jumps to @f(AllocStr) must preserve/reset edx(=ecx),ecx,esi.
;   357         cmp al,0x82                     -- sanity check
                cmp al,#82                ;#00460BE3: 200370 82                  uv 00 01  1 183      
;   358         jne :e04atsaa4
                jne #00460A5A             ;#00460BE6: 017205 6EFEFFFF            v  00 00  1 183      
;   359         mov eax,[esi-8]         -- refcount
                mov eax,[esi-8]           ;#00460BEC: 213106 F8                  uv 01 40  1 184      
;   360 --      mov edx,[ap1]           -- slice start (post-fixup/0-based)
;   361         mov edx,[esp]           -- slice start (post-fixup/0-based)
                mov edx,[esp]             ;#00460BEF: 213024044                  vu 04 10  1 184      
;   362         cmp eax,1
                cmp eax,1                 ;#00460BF2: 203370 01                  uv 00 01  1 185      
;   363 --      jne @f                  -- refcount!=1 (==>AllocStr)
;   364         jne :pSubssNewStr       -- refcount!=1 (==>AllocStr)
                jne #00460C58             ;#00460BF5: 165 61                     v  00 00  1 185      
;   365         test edx,edx
                test edx,edx              ;#00460BF7: 205322                     uv 00 04  1 186      
;   366 --      jnz @f                  -- slice start is not 1 (==>AllocStr)
;   367         jnz :pSubssNewStr       -- slice start is not 1 (==>AllocStr)
                jnz #00460C58             ;#00460BF9: 165 5D                     v  00 00  1 186      
;   368         cmp edi,h4
                cmp edi,h4                ;#00460BFB: 201377 00000040            uv 00 80  1 187      
;   369 --      jg pSubssStrp1gh4
;   370         jg @f
                jg #00460C1C              ;#00460C01: 177 19                     v  00 00  1 187      
;   371             -- p1 unassigned/integer.
;   372             -- can still just copy ref iff edx==length(p2) (eg x=s[1..-1])
;   373             cmp ecx,[esi-12]
                    cmp ecx,[esi-12]      ;#00460C03: 073116 F4                  uv 00 42  2 188      
;   374 --          jne @f              -- (==>AllocStr)
;   375             jne :pSubssNewStr
                    jne #00460C58         ;#00460C06: 165 50                     v  00 00  1 189      
;   376             lea eax,[esi+1]
                    lea eax,[esi+1]       ;#00460C08: 215106 01                  uv 01 40  1 190      
;   377             add esp,4           -- discard slice start (which is 1)
                    add esp,4             ;#00460C0B: 203304 04                  vu 10 10  1 190      
;   378             pop edi             -- addr tgt
                    pop edi               ;#00460C0E: 137                        uv 80 00  1 191      
;   379             ror eax,2           -- == ref p2 (or ref[idx1][idx2]...[idxn-1])
                    ror eax,2             ;#00460C0F: 301310 02                  np 01 01  1 192      
;   380             mov dword[esi-8],2  -- refcount is now 2
                    mov [esi-8], dword 2  ;#00460C12: 307106 F8 02000000         uv 00 40  1 193      
;   381             mov [edi],eax
                    mov [edi],eax         ;#00460C19: 211007                     vu 00 81  1 193      
;   382             ret
                    ret                   ;#00460C1B: 303                        np 00 00  2 194      
;   383 --    ::pSubssStrp1gh4
;   384       @@:
;   385         lea eax,[ebx+edi*4]
                lea eax,[ebx+edi*4]       ;#00460C1C: 215004273                  uv 01 88  1 196      
;   386     --  mov edx,edi             -- in case dealloc needed
;   387     --  cmp edi,esi
;   388         cmp eax,esi
                cmp eax,esi               ;#00460C1F: 071360                     uv 00 41  1 197 01   
;   389 --      jne pSubssStrp1nep2
;   390         jne @f
                jne #00460C2E             ;#00460C21: 165 0B                     v  00 00  1 197      
;   391             -- s=s[1..?], no incref/decref needed.
;   392             mov [esi-12],ecx    -- set new length
                    mov [esi-12],ecx      ;#00460C23: 211116 F4                  uv 00 42  1 198      
;   393 --          pop edi             -- discard addr tgt
;   394             add esp,8           -- discard slice start and addr tgt
                    add esp,8             ;#00460C26: 203304 08                  vu 10 10  1 198      
;   395             mov byte[esi+ecx],0 -- plant new terminator
                    mov [esi+ecx], byte 0  ;#00460C29: 306004016 00               uv 00 42  1 199      
;   396             ret
                    ret                   ;#00460C2D: 303                        np 00 00  2 200      
;   397 --    ::pSubssStrp1nep2
;   398       @@:
;   399             -- p1!=p2.
;   400             -- again, we can still just copy ref p2 & deref p1, iff ecx==length(p2).
;   401             --  ie/eg a=b[1..-1] can just incref b, but a=b[1..-2] needs to
;   402             --       end up with two different length strings in a & b.
;   403             cmp ecx,[esi-12]
                    cmp ecx,[esi-12]      ;#00460C2E: 073116 F4                  uv 00 42  2 202      
;   404 --          jne @f              -- (==>AllocStr)
;   405             jne :pSubssNewStr
                    jne #00460C58         ;#00460C31: 165 25                     v  00 00  1 203      
;   406             mov edx,edi         -- for dealloc
                    mov edx,edi           ;#00460C33: 213327                     uv 04 80  1 204      
;   407             mov dword[esi-8],2  -- set new refcount
                    mov [esi-8], dword 2  ;#00460C35: 307106 F8 02000000         vu 00 40  1 204      
;   408             add esp,4           -- discard slice start
                    add esp,4             ;#00460C3C: 203304 04                  uv 10 10  1 205      
;   409             pop edi             -- addr tgt
                    pop edi               ;#00460C3F: 137                        vu 80 00  1 205      
;   410             add esi,1
                    add esi,1             ;#00460C40: 203306 01                  uv 40 40  1 206      
;   411             mov ecx,[eax-8]
                    mov ecx,[eax-8]       ;#00460C43: 213110 F8                  vu 02 01  1 206      
;   412             ror esi,2           -- recreated ref p2 (or ref[idx][idx2]...[idxn-1])
                    ror esi,2             ;#00460C46: 301316 02                  np 40 40  1 207      
;   413             sub ecx,1
                    sub ecx,1             ;#00460C49: 203351 01                  uv 02 02  1 208      
;   414             mov [edi],esi
                    mov [edi],esi         ;#00460C4C: 211067                     vu 00 C0  1 208      
;   415             jz :%pDealloc
                    jz #004639A8 (:%pDealloc)  ;#00460C4E: 017204 542D0000            v  00 00  1 209      
;   416             mov [eax-8],ecx
                    mov [eax-8],ecx       ;#00460C54: 211110 F8                  uv 00 03  1 210      
;   417             ret
                    ret                   ;#00460C57: 303                        np 00 00  2 211      
;   418 --    @@:
;   419       ::pSubssNewStr
;   420 --      mov edx,ecx
;   421         pop edx                 -- slice start (post-fixup/0-based)
                pop edx                   ;#00460C58: 132                        uv 04 00  1 213      
;   422 --      mov edx,[esp]           -- slice start (post-fixup/0-based)
;   423         call :%pAllocStr        -- damages eax only
                call #0046377D (:%pAllocStr)  ;#00460C59: 350 1F2B0000               v  00 00  1 213      
;   424 --      mov edx,[ap1]           -- slice start (post-fixup/0-based)
;   425 --      mov edx,[esp]           -- slice start (post-fixup/0-based)
;   426 --      xor ebx,ebx
;   427 --      lea esi,[esi+edx]
;   428         add esi,edx
                add esi,edx               ;#00460C5E: 001326                     uv 40 44  1 214      
;   429         push eax                --[2] save ref
                push eax                  ;#00460C60: 120                        vu 00 01  1 214      
;   430         lea edi,[ebx+eax*4]
                lea edi,[ebx+eax*4]       ;#00460C61: 215074203                  uv 80 09  1 215      
;   431 --      or ecx,ecx
;   432 --      je @f
;   433         rep movsb
                rep movsb                 ;#00460C64: 363:244                    np C2 C2  4 218    *C0*
;   434 --    @@:
;   435         xor eax,eax
                xor eax,eax               ;#00460C66: 061300                     uv 01 01  1 222      
;   436         stosb                   -- trailing null
                stosb                     ;#00460C68: 252                        np 80 81  3 224    *80*
;   437 
;   438       ::pSubssStore
;   439         pop eax                 --[2] newly created ref
                pop eax                   ;#00460C69: 130                        uv 01 00  1 227      
;   440 --      add esp,4               -- discard slice start
;   441         pop edi                 -- addr result
                pop edi                   ;#00460C6A: 137                        vu 80 00  1 227      
;   442         mov edx,[edi]
                mov edx,[edi]             ;#00460C6B: 213027                     uv 04 80  1 230    *80*
;   443         mov [edi],eax
                mov [edi],eax             ;#00460C6D: 211007                     vu 00 81  1 230      
;   444         cmp edx,h4
                cmp edx,h4                ;#00460C6F: 201372 00000040            uv 00 04  1 231      
;   445         jle @f
                jle #00460C82             ;#00460C75: 176 0B                     v  00 00  1 231      
;   446             sub dword[ebx+edx*4-8],1
                    sub dword[ebx+edx*4-8],1  ;#00460C77: 203154223 F8 01            u  00 0C  3 232      
;   447             jz :%pDealloc
                    jz #004639A8 (:%pDealloc)  ;#00460C7C: 017204 262D0000            v  00 00  1 234      
;   448       @@:
;   449         ret
                ret                       ;#00460C82: 303                        np 00 00  2 235      
;   450     [64]
;   451         --calling convention:
;   452         -- <perform any required opUnassigned's>
;   453         --  mov rcx,N
;   454         --  push <return address>
;   455         --  push res            -- result var addr
;   456         --  push [sliceend]     -- (opUnassigned)
;   457         --  push [idxN]..[idx1] -- (opUnassigned)
;   458         --  mov rsi,[ref]       -- (opUnassigned)
;   459         --  jmp :%pSubss        -- actually a call
;   460         --<return address>
;   461 
;   462       ::pSubssWhile
;   463             pop rdi             -- next idx (ref)
;   464 --expect exception here for subscript errors...
;   465           :!pSubsse94   -- exception here mapped to e94vhnbaav(rdx)
;   466             mov al,[rbx+rsi*4-1]
;   467             mov rdx,[rbx+rsi*4-24]  -- length
;   468             shl rsi,2
;   469             sub rdi,1               -- decrement rdi (:-)
;   470             test al,0x80
;   471             jz :e04atsaa9       -- era @ [rsp+rcx*8+8]
;   472 
;   473             sub rcx,1
;   474             jz :pSubssEndWhile -- quit loop with startslice (aka idxN) ref in rdi (may need fixupSliceStart)
;   475 
;   476             cmp rdi,rdx
;   477             jb @f               -- unsigned jump, lets 0..len-1 through
;   478                                 --               (we just decremented rdi)
;   479 --17/7/17:
;   480                 add rcx,2
;   481                 mov al,8+4+1        -- [era] is [rsp+rcx*8+8], "reading from"
;   482                 call :%fixupIndex   -- idx-1 in rdi, len in rdx, al set
;   483                 mov al,byte[rsi-1]  -- as we just trashed it
;   484                 sub rcx,2
;   485           @@:
;   486             cmp al,0x80
;   487             jne @f
;   488             mov rsi,[rsi+rdi*8]
;   489             jmp :pSubssWhile
;   490 
;   491           @@:
;   492             cmp al,0x82
;   493             jne :e04atsaap8         -- era @ [rsp+rcx*8+8] [??]
;   494             lea rsi,[rsi+rdi]       -- address of (first) char
;   495             sub rcx,1
;   496             jnz :e04atsaap12        -- strings must be last segment
;   497 
;   498       ::pSubssEndWhile
;   499         cmp rdi,rdx
;   500         jbe @f              -- unsigned jump, lets 0..len through (NB jbe here)
;   501                             --               (we just decremented rdi)
;   502                             --               (slice start can be 1..length+1)
;   503 --          mov cl,12               -- [era] @ [esp+12]
;   504             mov cl,24               -- [era] @ [rsp+24]
;   505             call :%fixupSliceStart  -- idx in rdi, len in rdx
;   506       @@:
;   507 -->     mov [ap1],edi           -- save slice start
;   508 --not: edx,edi,ecx,ebx,esi,eax...
;   509 --      mov ??,edi
;   510 --      pop edi                 -- ref slice end
;   511         xchg [rsp],rdi          -- swap slice start/end
;   512         mov r15,h4
;   513         cmp rdi,rdx
;   514         jbe @f              -- unsigned jump, lets 0..len through (NB jbe here, and no dec rdi)
;   515                             --               (slice end can be 0..length)
;   516 --          mov cl,8            -- [era] @ [esp+8]
;   517             mov cl,24           -- [era] @ [rsp+24]  (inc ret to @@:)
;   518             call :%fixupSliceEnd    -- idx in rdi, len in rdx
;   519       @@:
;   520 
;   521         -- stack contents:
;   522         --  [rsp] slice start (0-based)
;   523         --  [rsp+8] addr res
;   524         --  [rsp+16] return address
;   525         mov rcx,rdi             -- slice end
;   526         mov rdi,[rsp+8]         -- address of res (re-fetched later)
;   527         sub rcx,[rsp]           -- slice start
;   528         jl :e09slinecx          -- slice length is negative
;   529         mov rdx,rcx             -- new object len = slice len
;   530         mov rdi,[rdi]           -- ref of result (prev)
;   531         cmp al,0x80
;   532         jne :pSubssStr
;   533         --
;   534         -- can we do things in-situ?
;   535         --
;   536         cmp rdi,r15
;   537 --killed p2js (25/5/21):
;   538         jle :pSubssNewSeq
;   539 --/*
;   540         jg @f
;   541             -- if new length = length(p2) then incref p2 -> p1, exit/all done
;   542             cmp rdx,[rsi-24]
;   543             jne :pSubssNewSeq
;   544             -- (this is the [int/unassigned]:=x[1..$] case)
;   545             add rsp,8                   -- discard slice start (must be 0 anyway)
;   546             pop rdi                     -- addr tgt
;   547             mov rdx,[rsi-16]            -- refcount
;   548             lea rax,[rsi+1]             -- (recreate ref)
;   549             add rdx,1
;   550             ror rax,2                   -- == ref p2
;   551             mov [rsi-16],rdx
;   552             mov [rdi],rax               -- (no need to dealloc)
;   553             ret
;   554       @@:
;   555 --*/
;   556         shl rdi,2
;   557         cmp qword[rdi-16],1             -- refcount of 1
;   558         jne :pSubssNewSeq
;   559 /*
;   560         je @f
;   561             cmp rdi,rsi
;   562             jne :pSubssp2nep1
;   563             cmp rdx,[rsi-24]
;   564             jne :pSubssNewSeq
;   565             -- (this must therefore be the x:=x[1..$] case, at least datawise, 
;   566             --  although the hll could be say ti:=table[i][1..$], repeated)
;   567             add rsp,16                  -- discard slice start and addr res
;   568             ret
;   569       @@:
;   570 */
;   571         cmp rdi,rsi
;   572         jne :pSubssNewSeq
;   573 /*
;   574         je @f
;   575           ::pSubssp2nep1    -- rdi!=rsi             (third test)
;   576             cmp rdx,[rsi-24]                -- if lengths match
;   577             jne :pSubssNewSeq
;   578             add rsp,8                       -- discard slice start (must be 0 anyway)
;   579             pop rdi                         -- addr tgt
;   580             mov rcx,[rsi-16]                -- p2 refcount (or ref[idx1][idx2]..[idxn-1])
;   581             lea rax,[rsi+1]                 -- calc ref (for "") in eax
;   582             add rcx,1
;   583             mov rdx,[rdi]                   -- get prev ref
;   584             mov [rsi-16],rcx                -- incref
;   585             ror rax,2                       -- == ref p2
;   586             mov rcx,[rbx+rdx*4-16]          -- p1 refcount
;   587             mov [rdi],rax                   -- save new ref
;   588             sub rcx,1
;   589             jz :%pDealloc
;   590             mov [rbx+rdx*4-16],rcx          -- decref
;   591             ret
;   592 
;   593       @@:
;   594 */
;   595         -- (this is the x:=x[i..j] case, with a refcount of 1)
;   596         push rcx                        --[?] save new length
;   597         xor rbx,rbx
;   598         mov rdx,[rsp+8]                 -- slice start (0-based)
;   599         mov rcx,[rdi-24]                -- original length
;   600         add rdx,1
;   601       ::pSubssDeallocPrevLoop
;   602             sub rdx,1
;   603             jz :pSubssDeallocPrevDone
;   604             mov rax,[rsi]
;   605             sub rcx,1
;   606             add rsi,8
;   607             cmp rax,r15
;   608             jle :pSubssDeallocPrevLoop
;   609             sub qword[rbx+rax*4-16],1
;   610             jnz :pSubssDeallocPrevLoop
;   611 --          pushad
;   612             push rdi
;   613             push rcx
;   614             push rsi
;   615             push rdx
;   616             mov rdx,rax
;   617 --  if debugmem2
;   618 --  mov eax,[esp+40]    -- (DEV: untested!)
;   619 --  mov [dmFera],eax
;   620 --  end if
;   621             push qword[rsp+56]
;   622             call :%pDealloc0
;   623 --          popad
;   624             pop rdx
;   625             pop rsi
;   626             pop rcx
;   627             pop rdi
;   628             jmp :pSubssDeallocPrevLoop
;   629 
;   630       ::pSubssDeallocPrevDone
;   631         --
;   632         -- re-site the header.
;   633         --
;   634         -- register contents:
;   635         --  rax - unused
;   636         --  rcx - length less slice start (needed below)
;   637         --  rdx - 0
;   638         --  rsi - location of new s[1]
;   639         --  rdi - raw addr of prev header
;   640         --  [rsp] = new length
;   641         --  [rsp+8] = slice start (0-based), aka discarded items
;   642         --  [rsp+16] = addr res
;   643         --  [rsp+24] = return address
;   644         --
;   645         cmp rsi,rdi
;   646         jne :pSubssReSiteHeader
;   647             -- must be x=x[1..??] case, no need to resite header:
;   648             pop rdx                     -- new length
;   649             add rsp,16                  -- discard slice start and addr res
;   650             mov [rsi-24],rdx            -- set new length
;   651             jmp :pSubssDeallocRest
;   652 
;   653       ::pSubssReSiteHeader
;   654         mov rax,[rdi-32]                -- prev maxlen
;   655         mov rdx,[rsp+8]                 -- discarded items, aka slice start
;   656         mov r9,[rdi-8]                  -- previous type
;   657         shl rdx,3                       -- discarded items in bytes
;   658         mov [rsi-32],rax                -- maxlen (unaltered)
;   659         mov rax,[rdi-40]                -- previous slack
;   660 --      add rdx,[rdi-40]                -- previous slack
;   661         mov qword[rsi-8],r9             -- type (unaltered)
;   662         add rax,rdx                     -- new slack
;   663         mov [rsi-16],qword 1            -- refcount (unaltered)
;   664         mov r9,rsi                      -- calculate new ref in r9
;   665 --      pop qword[rsi-24]               -- new length
;   666         pop rdx                         -- new length
;   667         add rsp,8                       -- discard slice start
;   668         add r9,1
;   669         pop rdi                         -- addr res
;   670         mov [rsi-40],rax                -- set new slack
;   671         ror r9,2
;   672 --      mov [rsi-40],rdx                -- set new slack
;   673         mov [rsi-24],rdx                -- set new length
;   674         mov [rdi],r9                    -- new ref of shifted header -> res
;   675       ::pSubssDeallocRest
;   676         lea rsi,[rsi+rdx*8]             -- rsi := rsi[newlength+1]
;   677 
;   678       ::pSubssDeallocRestLoop
;   679         cmp rcx,rdx
;   680         je :pSubssDeallocRestDone
;   681         mov rax,[rsi]
;   682         sub rcx,1
;   683 --29/12/15:
;   684 --      add rsi,4
;   685         add rsi,8
;   686         cmp rax,r15
;   687         jle :pSubssDeallocRestLoop
;   688         sub qword[rbx+rax*4-16],1
;   689         jnz :pSubssDeallocRestLoop
;   690 --      pushad
;   691         push rcx
;   692         push rdx
;   693         push rsi
;   694         mov rdx,rax
;   695         push qword[rsp+24]
;   696         call :%pDealloc0
;   697 --      popad
;   698         pop rsi
;   699         pop rdx
;   700         pop rcx     
;   701         jmp :pSubssDeallocRestLoop
;   702         
;   703 --      nop?
;   704       ::pSubssDeallocRestDone
;   705         ret
;   706 
;   707 
;   708       ::pSubssNewSeq
;   709         -- register contents:
;   710         --  al 0x80
;   711         --  rcx = rdx = new length
;   712         --  rsi = raw addr of p2
;   713         --  rdi = unknown (ref or raw tgt)
;   714         --  [rsp] = slice start (0-based)
;   715         --  [rsp+8] = addr res
;   716 --      pop rdx                     -- slice start (0-based)
;   717         pop rdi                     -- slice start (0-based)
;   718         mov rdx,[rsp+16]            -- era
;   719         call :%pAllocSeq            -- damages rax only
;   720 --      lea rsi,[rsi+rdx*4]
;   721 --      lea rsi,[rsi+rdx*8]
;   722         lea rsi,[rsi+rdi*8]
;   723         push rax                    --[?] save ref
;   724         test rcx,rcx
;   725         je :pSubssStore
;   726         lea rdi,[rbx+rax*4]
;   727       @@:
;   728             lodsq                   -- mov rax,[rsi], rsi+=4
;   729             stosq                   -- mov [rdi],rax, rdi+=4
;   730             cmp rax,r15
;   731             jl :Subss2_no_incref
;   732                 add qword[rbx+rax*4-16],1
;   733           ::Subss2_no_incref
;   734             sub rcx,1
;   735             jnz @b
;   736         nop
;   737         jmp :pSubssStore
;   738 
;   739       ::pSubssStr
;   740         -- register contents:
;   741         --  al 0x82
;   742         --  rcx = rdx = new length
;   743         --  rsi = raw addr of p2
;   744         --  rdi = ref p1
;   745         --  [rsp] = slice start (post-fixup, zero-based)
;   746         --  [rsp+8] = addr res
;   747         --  [rsp+16] = return address
;   748         -- insitu if: slice starts at 1, and refcount p2 is 1.
;   749         -- jumps to @f(AllocStr) must preserve/reset rdx(=rcx),rcx,rsi.
;   750         cmp al,0x82                     -- sanity check
;   751         jne :e04atsaa4
;   752         mov rax,[rsi-16]        -- refcount
;   753         mov rdx,[rsp]           -- slice start (post-fixup/0-based)
;   754         cmp rax,1
;   755         jne :pSubssNewStr       -- refcount!=1 (==>AllocStr)
;   756         test rdx,rdx
;   757         jnz :pSubssNewStr       -- slice start is not 1 (==>AllocStr)
;   758         cmp rdi,r15
;   759         jg @f
;   760             -- p1 unassigned/integer.
;   761             -- can still just copy ref iff rdx==length(p2) (eg x=s[1..-1])
;   762             cmp rcx,[rsi-24]
;   763             jne :pSubssNewStr
;   764             lea rax,[rsi+1]
;   765             add rsp,8           -- discard slice start (which is 1)
;   766             pop rdi             -- addr tgt
;   767             ror rax,2           -- == ref p2 (or ref[idx1][idx2]...[idxn-1])
;   768             mov qword[rsi-16],2 -- refcount is now 2
;   769             mov [rdi],rax
;   770             ret
;   771       @@:
;   772         lea rax,[rbx+rdi*4]
;   773         cmp rax,rsi
;   774         jne @f
;   775             -- s=s[1..?], no incref/decref needed.
;   776             mov [rsi-24],rcx    -- set new length
;   777             add rsp,16          -- discard slice start and addr tgt
;   778             mov byte[rsi+rcx],0 -- plant new terminator
;   779             ret
;   780       @@:
;   781             -- p1!=p2.
;   782             -- again, we can still just copy ref p2 & deref p1, iff ecx==length(p2).
;   783             --  ie/eg a=b[1..-1] can just incref b, but a=b[1..-2] needs to
;   784             --       end up with two different length strings in a & b.
;   785             cmp rcx,[rsi-24]
;   786             jne :pSubssNewStr
;   787             mov rdx,rdi         -- for dealloc
;   788             mov qword[rsi-16],2 -- set new refcount
;   789             add rsp,8           -- discard slice start
;   790             pop rdi             -- addr tgt
;   791             add rsi,1
;   792             mov rcx,[rax-16]
;   793             ror rsi,2           -- recreated ref p2 (or ref[idx][idx2]...[idxn-1])
;   794             sub rcx,1
;   795             mov [rdi],rsi
;   796             jz :%pDealloc
;   797             mov [rax-16],rcx
;   798             ret
;   799 
;   800       ::pSubssNewStr
;   801         pop rdx                 -- slice start (post-fixup/0-based)
;   802         call :%pAllocStr        -- damages rax only
;   803         add rsi,rdx
;   804         push rax                --[2] save ref
;   805         lea rdi,[rbx+rax*4]
;   806         rep movsb
;   807         xor rax,rax
;   808         stosb                   -- trailing null
;   809 
;   810       ::pSubssStore
;   811         pop rax                 --[2] newly created ref
;   812         pop rdi                 -- addr result
;   813         mov rdx,[rdi]
;   814         mov [rdi],rax
;   815         cmp rdx,r15
;   816         jle @f
;   817             sub qword[rbx+rdx*4-16],1
;   818             jz :%pDealloc
;   819       @@:
;   820         ret
;   821     []
;   822 
;   823 --/*
;   824 procedure :%pSubsss(:%)
;   825 end procedure -- (for Edita/CtrlQ)
;   826 --*/
;   827     :%pSubsss       -- res := string[slicestart..sliceend]
;   828 -------------
;   829     [32]
;   830         --calling convention:
;   831         --  lea eax,[res]
;   832         --  mov edi,[p2]        -- slice start (opUnassigned)
;   833         --  mov ecx,[p3]        -- slice end (opUnassigned)
;   834         --  mov esi,[p1]        -- ref (opUnassigned, must be a string)
;   835 --X     --  mov edx,p1          -- var no of ref            (DEV deliberately commented out in pilx86.e, as we opUnassign)
;   836         --  call pSubsss        -- [eax]=esi[edi..ecx]
;   837 --  ::pSubssse92a       -- exception here mapped to e94vhnbaavedxesifeh
;   838         mov edx,[ebx+esi*4-12]  -- length   (exception here mapped to e94vhnbaav(edx))
                mov edx,[ebx+esi*4-12]    ;#00460C83: 213124263 F4               uv 04 48  1 237      
;   839         sub edi,1               -- decrement edi (:-)
                sub edi,1                 ;#00460C87: 203357 01                  vu 80 80  1 237      
;   840         shl esi,2
                shl esi,2                 ;#00460C8A: 301346 02                  u  40 40  1 238      
;   841         cmp edi,edx
                cmp edi,edx               ;#00460C8D: 071327                     vu 00 84  1 238      
;   842         jbe @f              -- unsigned jump, lets 0..len through (NB jbe here)
                jbe #00460C9A             ;#00460C8F: 166 09                     v  00 00  1 239      
;   843                             --               (we just decremented edi)
;   844                             --               (slice start can be 1..length+1)
;   845 --          mov cl,0        -- [era] @ [esp]
;   846             push ecx
                    push ecx              ;#00460C91: 121                        uv 00 02  1 240      
;   847             mov cl,8        -- [era] @ [esp+8] (inc ret to @@:)
                    mov cl,8              ;#00460C92: 261 08                     vu 02 00  1 240      
;   848             call :%fixupSliceStart  -- idx in edi, len in edx
                    call :%fixupSliceStart  ;#00460C94: 350 B0010000               v  00 00  1 241      
;   849             pop ecx
                    pop ecx               ;#00460C99: 131                        uv 02 00  1 242      
;   850       @@:
;   851 --      push edi            -- save slice start
;   852 --!     mov edx,edi             -- save slice start
;   853         cmp ecx,edx
                cmp ecx,edx               ;#00460C9A: 071321                     uv 00 06  1 243 02   
;   854         jbe @f              -- unsigned jump, lets 0..len through (NB jbe here, and no dec ecx)
                jbe #00460CAB             ;#00460C9C: 166 0D                     v  00 00  1 243      
;   855                             --               (slice end can be 0..length)
;   856             push edi            -- save slice start
                    push edi              ;#00460C9E: 127                        uv 00 80  1 244      
;   857             mov edi,ecx
                    mov edi,ecx           ;#00460C9F: 213371                     vu 80 02  1 244      
;   858             mov cl,8            -- [era] @ [esp+8] (inc ret to @@:)
                    mov cl,8              ;#00460CA1: 261 08                     uv 02 00  1 245      
;   859             call :%fixupSliceEnd    -- idx in edi, len in edx
                    call #00460E9F (:%fixupSliceEnd)  ;#00460CA3: 350 F7010000               v  00 00  1 245      
;   860             mov ecx,edi
                    mov ecx,edi           ;#00460CA8: 213317                     uv 02 80  1 246      
;   861 --          mov edi,[esp]
;   862             pop edi
                    pop edi               ;#00460CAA: 137                        vu 80 00  1 246      
;   863       @@:
;   864         sub ecx,edi             -- slice length
                sub ecx,edi               ;#00460CAB: 051371                     uv 02 82  1 247      
;   865 --      jl :e09slinecx2         -- slice length is negative
;   866         jge @f
                jge #00460CC0             ;#00460CAD: 175 11                     v  00 00  1 247      
;   867             add ecx,edi
                    add ecx,edi           ;#00460CAF: 001371                     uv 02 82  1 248      
;   868             add edi,1
                    add edi,1             ;#00460CB1: 203307 01                  vu 80 80  1 248      
;   869             pop edx
                    pop edx               ;#00460CB4: 132                        uv 04 00  1 249      
;   870             mov al,9    -- e09slin(edi,ecx)
                    mov al,9              ;#00460CB5: 260 09                     vu 01 00  1 249      
;   871             sub edx,1
                    sub edx,1             ;#00460CB7: 203352 01                  uv 04 04  1 250      
;   872             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00460CBA: 351 AA310000               v  00 00  1 250      
;   873             int3
                    int3                  ;#00460CBF: 314                        np 00 00 13 251      
;   874       @@:
;   875         push eax                -- save addr res
                push eax                  ;#00460CC0: 120                        uv 00 01  1 264      
;   876 --?     mov edx,ecx             -- new object len = slice len
;   877         mov edx,edi             -- save slice start
                mov edx,edi               ;#00460CC1: 213327                     vu 04 80  1 264      
;   878         mov edi,[eax]           -- ref of result
                mov edi,[eax]             ;#00460CC3: 213070                     uv 80 01  1 265      
;   879         -- register contents:
;   880         --  ecx = new length
;   881         --  edx = slice start (0-based)
;   882         --  esi = raw addr of p2
;   883         --  edi = ref p1 (res)
;   884         --  [esp] = addr res
;   885 --X     --  [esp+4] = slice start (post-fixup, zero-based)
;   886         -- insitu if: slice starts at 1, and refcount p2 is 1.
;   887         -- jumps to @f(AllocStr) must preserve/reset ecx,esi.
;   888 --      mov eax,[esi-8]         -- refcount
;   889 --      mov edx,[esp+4]         -- slice start (post-fixup/0-based)
;   890 --      cmp eax,1
;   891         cmp dword[esi-8],1
                cmp dword[esi-8],1        ;#00460CC5: 203176 F8 01               u  00 40  2 266      
;   892         jne :pSubsssNewStr      -- refcount!=1 (==>AllocStr)
                jne #00460D27             ;#00460CC9: 165 5C                     v  00 00  1 267      
;   893 --      test edx,edx
;   894         cmp edx,0
                cmp edx,0                 ;#00460CCB: 203372 00                  uv 00 04  1 268      
;   895         jnz :pSubsssNewStr      -- slice start is not 1 (==>AllocStr)
                jnz #00460D27             ;#00460CCE: 165 57                     v  00 00  1 268      
;   896         cmp edi,h4
                cmp edi,h4                ;#00460CD0: 201377 00000040            uv 00 80  1 269      
;   897         jg @f
                jg #00460CEE              ;#00460CD6: 177 16                     v  00 00  1 269      
;   898             -- p1 unassigned/integer.
;   899             -- can still just copy ref iff ecx==length(p2) (eg x=s[1..-1])
;   900             cmp ecx,[esi-12]
                    cmp ecx,[esi-12]      ;#00460CD8: 073116 F4                  uv 00 42  2 270      
;   901             jne :pSubsssNewStr
                    jne #00460D27         ;#00460CDB: 165 4A                     v  00 00  1 271      
;   902             lea eax,[esi+1]
                    lea eax,[esi+1]       ;#00460CDD: 215106 01                  uv 01 40  1 272      
;   903             pop edi             -- addr tgt
                    pop edi               ;#00460CE0: 137                        vu 80 00  1 272      
;   904             ror eax,2           -- == ref p2 (or ref[idx1][idx2]...[idxn-1])
                    ror eax,2             ;#00460CE1: 301310 02                  np 01 01  1 273      
;   905             mov dword[esi-8],2  -- refcount is now 2
                    mov [esi-8], dword 2  ;#00460CE4: 307106 F8 02000000         uv 00 40  1 274      
;   906             mov [edi],eax
                    mov [edi],eax         ;#00460CEB: 211007                     uv 00 81  1 276    *80*
;   907             ret
                    ret                   ;#00460CED: 303                        np 00 00  2 277      
;   908       @@:
;   909         lea eax,[ebx+edi*4]     -- raw tgt
                lea eax,[ebx+edi*4]       ;#00460CEE: 215004273                  uv 01 88  1 279      
;   910         cmp eax,esi
                cmp eax,esi               ;#00460CF1: 071360                     uv 00 41  1 280 01   
;   911         jne @f
                jne #00460D00             ;#00460CF3: 165 0B                     v  00 00  1 280      
;   912             -- s=s[1..?], no incref/decref needed.
;   913             mov [esi-12],ecx    -- set new length
                    mov [esi-12],ecx      ;#00460CF5: 211116 F4                  uv 00 42  1 281      
;   914             add esp,4           -- discard addr tgt
                    add esp,4             ;#00460CF8: 203304 04                  vu 10 10  1 281      
;   915             mov byte[esi+ecx],0 -- plant new terminator
                    mov [esi+ecx], byte 0  ;#00460CFB: 306004016 00               uv 00 42  1 282      
;   916             ret
                    ret                   ;#00460CFF: 303                        np 00 00  2 283      
;   917       @@:
;   918         -- p1!=p2.
;   919         -- again, we can still just copy ref p2 & deref p1, iff ecx==length(p2).
;   920         --  ie/eg a=b[1..-1] can just incref b, but a=b[1..-2] needs to
;   921         --       end up with two different length strings in a & b.
;   922         cmp ecx,[esi-12]
                cmp ecx,[esi-12]          ;#00460D00: 073116 F4                  uv 00 42  2 285      
;   923         jne :pSubsssNewStr
                jne #00460D27             ;#00460D03: 165 22                     v  00 00  1 286      
;   924         mov edx,edi         -- for dealloc
                mov edx,edi               ;#00460D05: 213327                     uv 04 80  1 287      
;   925         mov dword[esi-8],2  -- set new refcount (we know it was 1)
                mov [esi-8], dword 2      ;#00460D07: 307106 F8 02000000         vu 00 40  1 287      
;   926         pop edi             -- addr tgt
                pop edi                   ;#00460D0E: 137                        uv 80 00  1 288      
;   927         add esi,1
                add esi,1                 ;#00460D0F: 203306 01                  vu 40 40  1 288      
;   928         mov ecx,[eax-8]     -- p1 refcount
                mov ecx,[eax-8]           ;#00460D12: 213110 F8                  uv 02 01  1 289      
;   929         ror esi,2           -- recreated ref p2
                ror esi,2                 ;#00460D15: 301316 02                  np 40 40  1 290      
;   930         sub ecx,1
                sub ecx,1                 ;#00460D18: 203351 01                  uv 02 02  1 291      
;   931         mov [edi],esi
                mov [edi],esi             ;#00460D1B: 211067                     vu 00 C0  1 291      
;   932         jz :%pDealloc
                jz #004639A8 (:%pDealloc)  ;#00460D1D: 017204 852C0000            v  00 00  1 292      
;   933         mov [eax-8],ecx
                mov [eax-8],ecx           ;#00460D23: 211110 F8                  uv 00 03  1 293      
;   934         ret
                ret                       ;#00460D26: 303                        np 00 00  2 294      
;   935 
;   936       ::pSubsssNewStr
;   937     --  mov edx,ecx
;   938     --DEV: [1..-1] could just incref...
;   939     --DEV 21/1/09 that code above belongs here...   [ 28/1/09 fixed/rewritten above ]
;   940 --      pop edx                 -- slice start (post-fixup/0-based)
;   941         call :%pAllocStr        -- damages eax only
                call #0046377D (:%pAllocStr)  ;#00460D27: 350 512A0000               v  00 00  1 296      
;   942     --  mov edx,[esp+4]         -- slice start (post-fixup/0-based)
;   943     --  xor ebx,ebx
;   944     --  lea esi,[esi+edx]
;   945         add esi,edx             -- raw(p2) + slice start (0-based)
                add esi,edx               ;#00460D2C: 001326                     uv 40 44  1 297      
;   946         push eax                --[2] save ref
                push eax                  ;#00460D2E: 120                        vu 00 01  1 297      
;   947         lea edi,[ebx+eax*4]
                lea edi,[ebx+eax*4]       ;#00460D2F: 215074203                  uv 80 09  1 298      
;   948     --DEV do we need this? [NO, I just tested]
;   949     --  test ecx,ecx
;   950     --  je @f
;   951         rep movsb
                rep movsb                 ;#00460D32: 363:244                    np C2 C2  4 301    *C0*
;   952     --  @@:
;   953         xor eax,eax
                xor eax,eax               ;#00460D34: 061300                     uv 01 01  1 305      
;   954         stosb                   -- trailing null
                stosb                     ;#00460D36: 252                        np 80 81  3 307    *80*
;   955 
;   956     --  ::pSubsssStore
;   957         pop eax                 --[2] newly created ref
                pop eax                   ;#00460D37: 130                        uv 01 00  1 310      
;   958         pop edi                 -- addr result
                pop edi                   ;#00460D38: 137                        vu 80 00  1 310      
;   959         mov edx,[edi]
                mov edx,[edi]             ;#00460D39: 213027                     uv 04 80  1 313    *80*
;   960         mov [edi],eax
                mov [edi],eax             ;#00460D3B: 211007                     vu 00 81  1 313      
;   961         cmp edx,h4
                cmp edx,h4                ;#00460D3D: 201372 00000040            uv 00 04  1 314      
;   962         jle @f
                jle #00460D50             ;#00460D43: 176 0B                     v  00 00  1 314      
;   963             sub dword[ebx+edx*4-8],1
                    sub dword[ebx+edx*4-8],1  ;#00460D45: 203154223 F8 01            u  00 0C  3 315      
;   964             jz :%pDealloc
                    jz #004639A8 (:%pDealloc)  ;#00460D4A: 017204 582C0000            v  00 00  1 317      
;   965       @@:
;   966         ret
                ret                       ;#00460D50: 303                        np 00 00  2 318      
;   967     [64]
;   968         --calling convention:
;   969         --  lea rax,[res]
;   970         --  mov rdi,[p2]        -- slice start (opUnassigned)
;   971         --  mov rcx,[p3]        -- slice end (opUnassigned)
;   972         --  mov rsi,[p1]        -- ref (opUnassigned)
;   973         --  mov rdx,p1
;   974         --  call :%pSubsss      -- [rax]=rsi[rdi..rcx] (where esi is a string)
;   975         mov rdx,[rbx+rsi*4-24]  -- length (exceptiuon here mapped to e94vhnbaav(rdx))
;   976         sub rdi,1               -- decrement rdi (:-)
;   977         shl rsi,2
;   978         mov r15,h4
;   979         cmp rdi,rdx
;   980         jbe @f              -- unsigned jump, lets 0..len through (NB jbe here)
;   981                             --               (we just decremented rdi)
;   982                             --               (slice start can be 1..length+1)
;   983             push rcx
;   984 --          mov cl,0        -- [era] @ [esp]
;   985             mov cl,16       -- [era] @ [esp+16] (inc ret to @@:)
;   986             call :%fixupSliceStart  -- idx in rdi, len in rdx
;   987             pop rcx
;   988       @@:
;   989         cmp rcx,rdx
;   990         jbe @f              -- unsigned jump, lets 0..len through (NB jbe here, and no dec rcx)
;   991                             --               (slice end can be 0..length)
;   992             push rdi            -- save slice start
;   993             mov rdi,rcx
;   994 --          mov cl,8            -- [era] @ [rsp+8]
;   995             mov cl,16           -- [era] @ [rsp+16] (inc ret to @@:)
;   996             call :%fixupSliceEnd    -- idx in rdi, len in rdx
;   997             mov rcx,rdi
;   998             pop rdi
;   999       @@:
;  1000         sub rcx,rdi             -- slice length
;  1001 --      jl :e09slinecx2         -- slice length is negative
;  1002         jge @f
;  1003             add rcx,rdi
;  1004             add rdi,1
;  1005             pop rdx
;  1006             mov al,9    -- e09slin(rdi,rcx)
;  1007             sub rdx,1
;  1008             jmp :!iDiag
;  1009             int3
;  1010       @@:
;  1011         push rax                -- save addr res
;  1012         mov rdx,rdi             -- save slice start
;  1013         mov rdi,[rax]           -- ref of result
;  1014         -- register contents:
;  1015         --  rcx = new length
;  1016         --  rdx = slice start (0-based)
;  1017         --  rsi = raw addr of p2 (a string)
;  1018         --  rdi = ref p1 (res)
;  1019         --  [rsp] = addr res
;  1020         -- insitu if: slice starts at 1, and refcount p2 is 1.
;  1021         -- jumps to @f(AllocStr) must preserve/reset rcx,rsi.
;  1022         cmp dword[rsi-16],1
;  1023         jne :pSubsssNewStr      -- refcount!=1 (==>AllocStr)
;  1024         cmp rdx,0
;  1025         jnz :pSubsssNewStr      -- slice start is not 1 (==>AllocStr)
;  1026         cmp rdi,r15
;  1027         jg @f
;  1028             -- p1 unassigned/integer.
;  1029             -- can still just copy ref iff ecx==length(p2) (eg x=s[1..-1])
;  1030             cmp rcx,[rsi-24]
;  1031             jne :pSubsssNewStr
;  1032             lea rax,[rsi+1]
;  1033             pop rdi             -- addr tgt
;  1034             ror rax,2           -- == ref p2 (or ref[idx1][idx2]...[idxn-1])
;  1035             mov dword[rsi-16],2 -- refcount is now 2
;  1036             mov [rdi],rax
;  1037             ret
;  1038       @@:
;  1039         lea rax,[rbx+rdi*4]     -- raw tgt
;  1040         cmp rax,rsi
;  1041         jne @f
;  1042             -- s=s[1..?], no incref/decref needed.
;  1043             mov [rsi-24],rcx    -- set new length
;  1044 --26/1/15:
;  1045 --          add rsp,4           -- discard addr tgt
;  1046             add rsp,8           -- discard addr tgt
;  1047             mov byte[rsi+rcx],0 -- plant new terminator
;  1048             ret
;  1049       @@:
;  1050         -- p1!=p2.
;  1051         -- again, we can still just copy ref p2 & deref p1, iff ecx==length(p2).
;  1052         --  ie/eg a=b[1..-1] can just incref b, but a=b[1..-2] needs to
;  1053         --       end up with two different length strings in a & b.
;  1054         cmp rcx,[rsi-24]
;  1055         jne :pSubsssNewStr
;  1056         mov rdx,rdi         -- for dealloc
;  1057         mov qword[rsi-16],2 -- set new refcount (we know it was 1)
;  1058         pop rdi             -- addr tgt
;  1059         add rsi,1
;  1060         mov rcx,[rax-16]    -- p1 refcount
;  1061         ror rsi,2           -- recreated ref p2
;  1062         sub rcx,1
;  1063         mov [rdi],rsi
;  1064         jz :%pDealloc
;  1065         mov [rax-16],rcx
;  1066         ret
;  1067 
;  1068       ::pSubsssNewStr
;  1069         call :%pAllocStr        -- damages rax only
;  1070         add rsi,rdx             -- raw(p2) + slice start (0-based)
;  1071         push rax                --[2] save ref
;  1072         lea rdi,[rbx+rax*4]
;  1073         rep movsb
;  1074         xor rax,rax
;  1075         stosb                   -- trailing null
;  1076 
;  1077     --  ::pSubsssStore
;  1078         pop rax                 --[2] newly created ref
;  1079         pop rdi                 -- addr result
;  1080         mov rdx,[rdi]
;  1081         mov [rdi],rax
;  1082         cmp rdx,r15
;  1083         jle @f
;  1084             sub qword[rbx+rdx*4-16],1
;  1085             jz :%pDealloc
;  1086       @@:
;  1087         ret
;  1088     []
;  1089       }
;  1090 
    jmp #00462C8F (:%opRetf)              ;#00460D51: 351 391F0000               v  00 00  1 320      
;C:\Phix\builtins\VM\pRepeN.e:
;=============================
;     1 --
;     2 -- pRepeN.e
;     3 -- ========
;     4 --
;     5 --  Various subscripting routines:
;     6 --
;     7 --      :%pRepe             -- eax[esp]..[esp+n]:=[edi]
;     8 --      :%pRepe1            -- esi[edi]:=ecx, aka ref[idx]:=rep
;     9 --      :%pRepe1ip          -- esi[edi]:=ecx, as opRepe1 when esi is sequence of integer, as proved by gvar_scan.
;    10 --      :%pRepe1is          -- esi[edi]:=ecx, as opRepe1 when esi is string, as proved by gvar_scan.
;    11 --
;    12 --  The latter three are optimised forms of :%pRepe, with exactly 1 index and other strict rules.
;    13 --  If porting, you could just (temporarily) implement :%pRepe and use it for everything, but 
;    14 --  that would require matching (temp) changes to psym.e, pmain.e, and pilx86.e.
;    15 --
;    16 
;    17 include builtins\VM\pHeap.e     -- :%pDealloc, :%pAllocStr, :%pAllocSeq
;    18 
;    19 include builtins\VM\pFixup.e    -- negative and floating point index handling (:%fixupIndex)
;    20 
;    21 bool ma_ip = false      -- Set true under with js during {a,b} = x operations, to catch any
;    22                         -- attempts to part-modify strings, as in {s[i]} := {ch}, since the
;    23                         -- otherwise excellent JavaScript desequencing will just not cope,
;    24                         -- because strings are immutable in JavaScript. (For eg s[i] = ch
;    25                         -- when not part of multiple assignment, it gets transpiled into
;    26                         -- s=$repe(s,i,ch) which uses substring + fromCharCode + substring 
;    27                         -- in order to get round the whole immutable strings thingymajig.)
;    28 
;    29 --26/8/22 (spotted in passing)
;    30 --#ilASM{ jmp :%opRetf
;    31 #ilASM{ jmp :!opCallOnceYeNot
                jmp :!opCallOnceYeNot     ;#0046066E: 351 80210000               v  00 00  1   1      
;    32 
;    33 --DEV FIXME: (and the :!bang labels below)
;    34 --  ::e04atsaa08
;    35 --      int3
;    36 --  ::e04atsaa8
;    37 --      int3
;    38     ::e04atsaa9
;    39         int3
                int3                      ;#00460673: 314                        np 00 00 13   2      
;    40     ::e04atsaa4
;    41         int3
                int3                      ;#00460674: 314                        np 00 00 13  15      
;    42     ::e110Repe1is
;    43         int3
                int3                      ;#00460675: 314                        np 00 00 13  28      
;    44 
;    45 --Fine, tested:
;    46     [32]
;    47      ::e52jsdnssd8
;    48         add esp,4
                add esp,4                 ;#00460676: 203304 04                  uv 10 10  1  41      
;    49      ::e52jsdnssd4
;    50         add esp,4
                add esp,4                 ;#00460679: 203304 04                  uv 10 10  1  42 10   
;    51      ::e52jsdnssd
;    52         pop edx
                pop edx                   ;#0046067C: 132                        vu 04 00  1  42      
;    53         xor eax,eax
                xor eax,eax               ;#0046067D: 061300                     uv 01 01  1  43      
;    54         call :%pDeSeqip
                call #00460A46 (:%pDeSeqip)  ;#0046067F: 350 C2030000               v  00 00  1  43      
;    55         mov al,52           -- e52jsdnssd
                mov al,52                 ;#00460684: 260 34                     uv 01 00  1  44      
;    56         sub edx,1
                sub edx,1                 ;#00460686: 203352 01                  vu 04 04  1  44      
;    57 --      mov [ma_ip],ebx
;    58         jmp :!iDiag
                jmp #00463E69 (:!iDiag)   ;#00460689: 351 DB370000               v  00 00  1  45      
;    59         int3
                int3                      ;#0046068E: 314                        np 00 00 13  46      
;    60     [64]
;    61      ::e52jsdnssd16
;    62         add rsp,8
;    63      ::e52jsdnssd8
;    64         add rsp,8
;    65      ::e52jsdnssd
;    66         pop rdx
;    67         xor rax,rax
;    68         call :%pDeSeqip
;    69         mov al,52           -- e52jsdnssd
;    70         sub rdx,1
;    71 --      mov [ma_ip],rbx
;    72         jmp :!iDiag
;    73         int3
;    74     []
;    75 
;    76 --/*
;    77 procedure :%pRepe(:%)
;    78 end procedure -- (for Edita/CtrlQ)
;    79 --*/
;    80     :%pRepe         -- eax[esp]..[esp+n]:=[edi]
;    81 -----------
;    82     [32]
;    83         --calling convention:
;    84         --  push <return addr>
;    85         --  push [rep]              (opUnassigned)
;    86         --  push [idxn]..[idx1]     (opUnassigned)
;    87         --  mov ecx,n
;    88         --  lea eax,[ref]
;    89         --  jmp :%pRepe
;    90         --<return addr>
;    91       ::opRepeWhile
;    92         --
;    93         -- On entry, eax is address of ref, ecx is remaining indexes,
;    94         --  next index to apply is on the stack
;    95         --
;    96         mov esi,[eax]           -- ref
                mov esi,[eax]             ;#0046068F: 213060                     uv 40 01  1  59      
;    97         pop edi                 -- idx
                pop edi                   ;#00460691: 137                        vu 80 00  1  59      
;    98         cmp esi,h4
                cmp esi,h4                ;#00460692: 201376 00000040            uv 00 40  1  60      
;    99 --      jl :e04atsaa08          -- attempt to subscript an atom, era @ [esp+ecx*4]
;   100         jge @f
                jge #004606A8             ;#00460698: 175 0E                     v  00 00  1  60      
;   101             mov edx,[esp+ecx*4]
                    mov edx,[esp+ecx*4]   ;#0046069A: 213024214                  uv 04 12  1  61      
;   102             mov al,4            -- e04atssaa
                    mov al,4              ;#0046069D: 260 04                     vu 01 00  1  61      
;   103             sub edx,1
                    sub edx,1             ;#0046069F: 203352 01                  uv 04 04  1  62      
;   104             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#004606A2: 351 C2370000               v  00 00  1  62      
;   105             int3
                    int3                  ;#004606A7: 314                        np 00 00 13  63      
;   106       @@:
;   107         shl esi,2               -- raw addr of ref
                shl esi,2                 ;#004606A8: 301346 02                  u  40 40  1  76      
;   108         push eax                --[1] ref addr, in case we need to clone...
                push eax                  ;#004606AB: 120                        vu 00 01  1  76      
;   109         sub edi,1
                sub edi,1                 ;#004606AC: 203357 01                  uv 80 80  1  77      
;   110         mov edx,[esi-12]        -- length
                mov edx,[esi-12]          ;#004606AF: 213126 F4                  uv 04 40  1  79    *40*
;   111 --16/3/17!!
;   112 --      cmp byte[esi-1],0x80
;   113 --      jne :RepeStr
;   114         cmp edi,edx             -- cmp idx,length
                cmp edi,edx               ;#004606B2: 071327                     uv 00 84  1  80 04   
;   115         jb @f                   -- unsigned jump, lets 0..len-1 through
                jb #004606C3              ;#004606B4: 162 0D                     v  00 00  1  80      
;   116             add ecx,1
                    add ecx,1             ;#004606B6: 203301 01                  uv 02 02  1  81      
;   117             mov al,8+4+0        -- [era] @ [esp+ecx*4+4], "assigning to"
                    mov al,12             ;#004606B9: 260 0C                     vu 01 00  1  81      
;   118             call :%fixupIndex   -- idx-1 in edi, len in edx, al set
                    call #00460DED (:%fixupIndex)  ;#004606BB: 350 2D070000               v  00 00  1  82      
;   119             sub ecx,1
                    sub ecx,1             ;#004606C0: 203351 01                  uv 02 02  1  83      
;   120       @@:
;   121         cmp byte[esi-1],0x80
                cmp byte[esi-1],#80       ;#004606C3: 200176 FF 80               u  00 40  2  84      
;   122         jne :RepeStr
                jne #00460740             ;#004606C7: 165 77                     v  00 00  1  85      
;   123         --
;   124         -- edi now contains 0-based index to replace, and edx the length
;   125         -- ecx is remaining indexes (including the one in edi)
;   126         --   
;   127         mov eax,[esi-8]         -- refcount
                mov eax,[esi-8]           ;#004606C9: 213106 F8                  uv 01 40  1  86      
;   128         sub eax,1
                sub eax,1                 ;#004606CC: 203350 01                  uv 01 01  1  87 01   
;   129         jz :RepeSeqNoClone
                jz #0046070B              ;#004606CF: 164 3A                     v  00 00  1  87      
;   130         mov [esi-8],eax         -- non-1 so no need to dealloc
                mov [esi-8],eax           ;#004606D1: 211106 F8                  uv 00 41  1  88      
;   131         push ecx                --[2] remaining idx
                push ecx                  ;#004606D4: 121                        vu 00 02  1  88      
;   132         push edi                --[3] idx
                push edi                  ;#004606D5: 127                        uv 00 80  1  89      
;   133         mov edi,[esp+8]         --[1] (ref addr, leaving it on the stack)
                mov edi,[esp+8]           ;#004606D6: 213174044 08               vu 80 10  1  89      
;   134 --      mov ecx,edx
;   135         push edx
                push edx                  ;#004606DA: 122                        uv 00 04  1  90      
;   136 --      mov edx,[esp+ecx*4+20]  -- era
;   137         mov edx,[esp+ecx*4+16]  -- era
                mov edx,[esp+ecx*4+16]    ;#004606DB: 213124214 10               vu 04 12  1  90      
;   138         mov ecx,[esp]
                mov ecx,[esp]             ;#004606DF: 213014044                  uv 02 10  1  91      
;   139         call :%pAlloClone
                call #00463814 (:%pAlloClone)  ;#004606E2: 350 2D310000               v  00 00  1  91      
;   140         call :%pAllocSeq        -- damages eax only
                call #00463832 (:%pAllocSeq)  ;#004606E7: 350 46310000               v  00 00  1  92      
;   141         pop edx
                pop edx                   ;#004606EC: 132                        uv 04 00  1  93      
;   142         mov [edi],eax           -- Replace the ref at the original address
                mov [edi],eax             ;#004606ED: 211007                     vu 00 81  1  93      
;   143         lea edi,[ebx+eax*4]
                lea edi,[ebx+eax*4]       ;#004606EF: 215074203                  uv 80 09  1  94      
;   144         push edi                --[4] raw addr of newly allocated sequence
                push edi                  ;#004606F2: 127                        uv 00 80  1  95 80   
;   145         mov ecx,edx
                mov ecx,edx               ;#004606F3: 213312                     vu 02 04  1  95      
;   146       @@:
;   147             lodsd               -- mov eax,[esi], esi+=4
                    lodsd                 ;#004606F5: 255                        np 41 40  2  96      
;   148             stosd               -- mov [edi],eax, edi+=4
                    stosd                 ;#004606F6: 253                        np 80 81  3  98      
;   149             cmp eax,h4
                    cmp eax,h4            ;#004606F7: 075 00000040               uv 00 01  1 101      
;   150             jl :Repe_no_incref
                    jl #00460703          ;#004606FC: 174 05                     v  00 00  1 101      
;   151                 add dword[ebx+eax*4-8],1
                        add dword[ebx+eax*4-8],1  ;#004606FE: 203104203 F8 01            u  00 09  3 102      
;   152           ::Repe_no_incref
;   153             sub ecx,1
                    sub ecx,1             ;#00460703: 203351 01                  vu 02 02  1 104      
;   154             jnz @b
                    jnz #004606F5         ;#00460706: 165 ED                     v  00 00  1 105      
;   155 
;   156         pop esi                 --[4] NB esi:=edi!
                pop esi                   ;#00460708: 136                        uv 40 00  1 106      
;   157         pop edi                 --[3] idx
                pop edi                   ;#00460709: 137                        vu 80 00  1 106      
;   158         pop ecx                 --[2] remainding idx
                pop ecx                   ;#0046070A: 131                        uv 02 00  1 107      
;   159 
;   160       ::RepeSeqNoClone
;   161         add esp,4               --[1] discard
                add esp,4                 ;#0046070B: 203304 04                  vu 10 10  1 107      
;   162         lea eax,[esi+edi*4]
                lea eax,[esi+edi*4]       ;#0046070E: 215004276                  uv 01 C0  1 108      
;   163         sub ecx,1
                sub ecx,1                 ;#00460711: 203351 01                  vu 02 02  1 108      
;   164         jnz :opRepeWhile
                jnz #0046068F (:%pRepe)   ;#00460714: 017205 75FFFFFF            v  00 00  1 109      
;   165 
;   166         pop ecx                 -- replacement
                pop ecx                   ;#0046071A: 131                        uv 02 00  1 110      
;   167         mov edx,[eax]
                mov edx,[eax]             ;#0046071B: 213020                     vu 04 01  1 110      
;   168         cmp ecx,h4
                cmp ecx,h4                ;#0046071D: 201371 00000040            uv 00 02  1 111      
;   169         jl @f
                jl #0046072A              ;#00460723: 174 05                     v  00 00  1 111      
;   170           add dword[ebx+ecx*4-8],1
                  add dword[ebx+ecx*4-8],1  ;#00460725: 203104213 F8 01            u  00 0A  3 112      
;   171       @@:
;   172         mov [eax],ecx
                mov [eax],ecx             ;#0046072A: 211010                     vu 00 03  1 114      
;   173         cmp edx,h4
                cmp edx,h4                ;#0046072C: 201372 00000040            uv 00 04  1 115      
;   174         jle @f
                jle #0046073F             ;#00460732: 176 0B                     v  00 00  1 115      
;   175           sub dword[ebx+edx*4-8],1
                  sub dword[ebx+edx*4-8],1  ;#00460734: 203154223 F8 01            u  00 0C  3 116      
;   176           jz :%pDealloc
                  jz #004639A8 (:%pDealloc)  ;#00460739: 017204 69320000            v  00 00  1 118      
;   177       @@:
;   178         ret
                ret                       ;#0046073F: 303                        np 00 00  2 119      
;   179 
;   180       ::RepeStr
;   181         cmp byte[esi-1],0x82
                cmp byte[esi-1],#82       ;#00460740: 200176 FF 82               u  00 40  2 121      
;   182 --      jne :e04atsaa8          -- era @ [esp+ecx*4]
;   183         je @f
                je #00460755              ;#00460744: 164 0F                     v  00 00  1 122      
;   184 --mov al,byte[esi-1]
;   185             mov edx,[esp+ecx*4+4]
                    mov edx,[esp+ecx*4+4]  ;#00460746: 213124214 04               uv 04 12  1 123      
;   186             mov al,4    -- e04atasaa
                    mov al,4              ;#0046074A: 260 04                     vu 01 00  1 123      
;   187             sub edx,1
                    sub edx,1             ;#0046074C: 203352 01                  uv 04 04  1 124      
;   188             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#0046074F: 351 15370000               v  00 00  1 124      
;   189             int3
                    int3                  ;#00460754: 314                        np 00 00 13 125      
;   190       @@:
;   191         sub ecx,1
                sub ecx,1                 ;#00460755: 203351 01                  uv 02 02  1 138      
;   192         jnz :e04atsaa9          -- must be last index, era @ [esp+ecx*4+4]
                jnz #00460673             ;#00460758: 017205 15FFFFFF            v  00 00  1 138      
;   193         cmp [ma_ip],ebx
                cmp [#00402A2C] (ma_ip),ebx  ;#0046075E: 071035 2C2A4000            uv 00 08  2 139      
;   194         jne :e52jsdnssd8
                jne #00460676             ;#00460764: 017205 0CFFFFFF            v  00 00  1 140      
;   195         mov ecx,[esp+4]         -- replacement
                mov ecx,[esp+4]           ;#0046076A: 213114044 04               uv 02 10  1 141      
;   196         xor ebx,ebx
                xor ebx,ebx               ;#0046076E: 061333                     vu 08 08  1 141      
;   197         cmp ecx,255
                cmp ecx,255               ;#00460770: 201371 FF000000            uv 00 02  1 142      
;   198         ja :RepeExpandString    -- also jumps for -ve & non-int
                ja #004607A7              ;#00460776: 167 2F                     v  00 00  1 142      
;   199         cmp [esi+edi],cl        -- avoid clone if unchanged
                cmp [esi+edi],cl          ;#00460778: 070014076                  uv 00 C2  2 143      
;   200         je @f
                je #00460786              ;#0046077B: 164 09                     v  00 00  1 144      
;   201         cmp dword[esi-8],1      -- refcount 1?
                cmp dword[esi-8],1        ;#0046077D: 203176 F8 01               u  00 40  2 145      
;   202         jnz :RepeDupString
                jnz #0046078A             ;#00460781: 165 07                     v  00 00  1 146      
;   203         mov [esi+edi],cl        -- replace char in situ then
                mov [esi+edi],cl          ;#00460783: 210014076                  uv 00 C2  1 147      
;   204       @@:
;   205         add esp,8               -- discard [1] and replacement
                add esp,8                 ;#00460786: 203304 08                  vu 10 10  1 147      
;   206         ret
                ret                       ;#00460789: 303                        np 00 00  2 148      
;   207 
;   208       ::RepeDupString
;   209         sub dword[esi-8],1      -- non-1 so no need to dealloc
                sub dword[esi-8],1        ;#0046078A: 203156 F8 01               u  00 40  3 150      
;   210         mov ecx,edx
                mov ecx,edx               ;#0046078E: 213312                     vu 02 04  1 152      
;   211         pop edx                 --[1] this is why we saved it!
                pop edx                   ;#00460790: 132                        uv 04 00  1 153      
;   212         call :%pAllocStr        -- damages eax only
                call #0046377D (:%pAllocStr)  ;#00460791: 350 E72F0000               v  00 00  1 153      
;   213         add ecx,1               -- include trailing null
                add ecx,1                 ;#00460796: 203301 01                  uv 02 02  1 154      
;   214         mov [edx],eax           -- replace ref at original address
                mov [edx],eax             ;#00460799: 211002                     uv 00 05  1 156    *04*
;   215         lea edx,[eax*4+edi]     -- replacement char location
                lea edx,[edi+eax*4]       ;#0046079B: 215024207                  vu 04 81  1 156      
;   216         lea edi,[ebx+eax*4]
                lea edi,[ebx+eax*4]       ;#0046079E: 215074203                  uv 80 09  1 157      
;   217         rep movsb
                rep movsb                 ;#004607A1: 363:244                    np C2 C2  4 160    *80*
;   218         pop ecx
                pop ecx                   ;#004607A3: 131                        uv 02 00  1 164      
;   219         mov [edx],cl
                mov [edx],cl              ;#004607A4: 210012                     uv 00 06  1 165 02   
;   220         ret
                ret                       ;#004607A6: 303                        np 00 00  2 166      
;   221 
;   222       ::RepeExpandString
;   223         mov ecx,edx
                mov ecx,edx               ;#004607A7: 213312                     uv 02 04  1 168      
;   224         mov edx,[esp+8]         -- era
                mov edx,[esp+8]           ;#004607A9: 213124044 08               vu 04 10  1 168      
;   225         call :%pAllocSeq        -- damages eax only
                call #00463832 (:%pAllocSeq)  ;#004607AD: 350 80300000               v  00 00  1 169      
;   226         push eax                --[2]
                push eax                  ;#004607B2: 120                        uv 00 01  1 170      
;   227         shl eax,2
                shl eax,2                 ;#004607B3: 301340 02                  u  01 01  1 171      
;   228         lea edx,[eax+edi*4]     -- replacement location
                lea edx,[eax+edi*4]       ;#004607B6: 215024270                  uv 04 81  1 174 01 *01*
;   229         mov edi,eax
                mov edi,eax               ;#004607B9: 213370                     vu 80 01  1 174      
;   230         xor eax,eax
                xor eax,eax               ;#004607BB: 061300                     uv 01 01  1 175      
;   231       @@:
;   232             lodsb               -- mov al,[esi], esi+=1
                    lodsb                 ;#004607BD: 254                        np 41 40  2 176      
;   233             stosd               -- mov [edi],eax, edi+=4
                    stosd                 ;#004607BE: 253                        np 80 81  3 178      
;   234             sub ecx,1
                    sub ecx,1             ;#004607BF: 203351 01                  uv 02 02  1 181      
;   235             jnz @b
                    jnz #004607BD         ;#004607C2: 165 F9                     v  00 00  1 181      
;   236 
;   237         mov eax,[esp+8]         -- replacement
                mov eax,[esp+8]           ;#004607C4: 213104044 08               uv 01 10  1 182      
;   238         cmp eax,h4
                cmp eax,h4                ;#004607C8: 075 00000040               uv 00 01  1 183 01   
;   239         jl @f
                jl #004607D4              ;#004607CD: 174 05                     v  00 00  1 183      
;   240           add dword[ebx+eax*4-8],1
                  add dword[ebx+eax*4-8],1  ;#004607CF: 203104203 F8 01            u  00 09  3 184      
;   241       @@:
;   242         pop ecx                 --[2] newly allocated sequence
                pop ecx                   ;#004607D4: 131                        vu 02 00  1 186      
;   243         pop edi                 --[1] address of ref to replace
                pop edi                   ;#004607D5: 137                        uv 80 00  1 187      
;   244         mov [edx],eax           -- replace element (a char that became a dword)
                mov [edx],eax             ;#004607D6: 211002                     vu 00 05  1 187      
;   245         add esp,4               -- discard replacement
                add esp,4                 ;#004607D8: 203304 04                  uv 10 10  1 188      
;   246         mov edx,[edi]           -- get old
                mov edx,[edi]             ;#004607DB: 213027                     uv 04 80  1 190    *80*
;   247         mov [edi],ecx           -- replace expanded string
                mov [edi],ecx             ;#004607DD: 211017                     vu 00 82  1 190      
;   248         cmp edx,h4
                cmp edx,h4                ;#004607DF: 201372 00000040            uv 00 04  1 191      
;   249         jle @f
                jle #004607F2             ;#004607E5: 176 0B                     v  00 00  1 191      
;   250           sub dword[ebx+edx*4-8],1
                  sub dword[ebx+edx*4-8],1  ;#004607E7: 203154223 F8 01            u  00 0C  3 192      
;   251           jz :%pDealloc
                  jz #004639A8 (:%pDealloc)  ;#004607EC: 017204 B6310000            v  00 00  1 194      
;   252       @@:
;   253         ret
                ret                       ;#004607F2: 303                        np 00 00  2 195      
;   254     [64]
;   255         --calling convention:
;   256         --  push <return addr>
;   257         --  push [rep]              (opUnassigned)
;   258         --  push [idxn]..[idx1]     (opUnassigned)
;   259         --  mov rcx,n
;   260         --  lea rax,[ref]
;   261         --  jmp :%pRepe
;   262         --<return addr>
;   263         mov r15,h4
;   264       ::opRepeWhile
;   265         --
;   266         -- On entry, rax is address of ref, rcx is remaining indexes,
;   267         --  next index to apply is on the stack
;   268         --
;   269         mov rsi,[rax]       -- ref
;   270         pop rdi             -- idx
;   271         cmp rsi,r15
;   272 --      jl :e04atsaa08      -- attempt to subscript an atom, era @ [esp+ecx*4]
;   273         jge @f
;   274             mov rdx,[rsp+rcx*8]
;   275             mov al,4        -- e04atssaa
;   276             sub rdx,1
;   277             jmp :!iDiag
;   278             int3
;   279       @@:
;   280         shl rsi,2           -- raw addr of ref
;   281         push rax            --[1] ref addr, in case we need to clone...
;   282         sub rdi,1
;   283 --      mov rdx,[rsi-12]    -- length
;   284         mov rdx,[rsi-24]    -- length
;   285 --16/3/17!!
;   286 --      cmp byte[rsi-1],0x80
;   287 --      jne :RepeStr
;   288         cmp rdi,rdx         -- cmp idx,length
;   289         jb @f               -- unsigned jump, lets 0..len-1 through
;   290             add rcx,1
;   291             mov al,8+4+0        -- [era] @ [rsp+rcx*8+8], "assigning to"
;   292             call :%fixupIndex   -- idx-1 in rdi, len in rdx, al set
;   293             sub rcx,1
;   294       @@:
;   295         cmp byte[rsi-1],0x80
;   296         jne :RepeStr
;   297         --
;   298         -- rdi now contains 0-based index to replace, and rdx the length
;   299         -- rcx is remaining indexes (including the one in rdi)
;   300         --   
;   301         mov rax,[rsi-16]        -- refcount
;   302         sub rax,1
;   303         jz :RepeSeqNoClone
;   304         mov [rsi-16],rax        -- non-1 so no need to dealloc
;   305         push rcx                --[2] remaining idx
;   306         push rdi                --[3] idx
;   307         mov rdi,[rsp+16]        --[1] (ref addr, leaving it on the stack)
;   308 --      mov rcx,rdx
;   309         push rdx
;   310 --      mov rdx,[rsp+rcx*8+40]  -- era
;   311         mov rdx,[rsp+rcx*8+32]  -- era
;   312         mov rcx,[rsp]
;   313         call :%pAlloClone
;   314         call :%pAllocSeq        -- damages rax only
;   315         pop rdx
;   316         mov [rdi],rax           -- Replace the ref at the original address
;   317         lea rdi,[rbx+rax*4]
;   318         push rdi                --[4] raw addr of newly allocated sequence
;   319         mov rcx,rdx
;   320 --      mov r15,h4
;   321       @@:
;   322             lodsq               -- mov rax,[rsi], rsi+=8
;   323             stosq               -- mov [rdi],rax, rdi+=8
;   324             cmp rax,r15
;   325             jl :Repe_no_incref
;   326                 add qword[rbx+rax*4-16],1
;   327           ::Repe_no_incref
;   328             sub rcx,1
;   329             jnz @b
;   330 
;   331         pop rsi                 --[4] NB rsi:=rdi!
;   332         pop rdi                 --[3] idx
;   333         pop rcx                 --[2] remainding idx
;   334 
;   335       ::RepeSeqNoClone
;   336         add rsp,8               --[1] discard
;   337         lea rax,[rsi+rdi*8]
;   338         sub rcx,1
;   339         jnz :opRepeWhile
;   340 
;   341         pop rcx                 -- replacement
;   342         mov rdx,[rax]
;   343 --      mov r15,h4
;   344         cmp rcx,r15
;   345         jl @f
;   346           add qword[rbx+rcx*4-16],1
;   347       @@:
;   348         mov [rax],rcx
;   349         cmp rdx,r15
;   350         jle @f
;   351           sub qword[rbx+rdx*4-16],1
;   352           jz :%pDealloc
;   353       @@:
;   354         ret
;   355 
;   356       ::RepeStr
;   357         cmp byte[rsi-1],0x82
;   358 --      jne :e04atsaa8          -- era @ [esp+ecx*4]
;   359         je @f
;   360 --mov al,byte[rsi-1]
;   361             mov rdx,[rsp+rcx*8+8]
;   362             mov al,4    -- e04atsaa
;   363             sub rdx,1
;   364             jmp :!iDiag
;   365             int3
;   366       @@:
;   367         sub rcx,1
;   368         jnz :e04atsaa9          -- must be last index, era @ [esp+ecx*4+4] [??]
;   369         cmp [ma_ip],rbx
;   370         jne :e52jsdnssd16
;   371         mov rcx,[rsp+8]         -- replacement (from calling convention)
;   372         xor rbx,rbx
;   373         cmp rcx,255
;   374         ja :RepeExpandString    -- also jumps for -ve & non-int
;   375         cmp [rsi+rdi],cl        -- avoid clone if unchanged
;   376         je @f
;   377         cmp qword[rsi-16],1     -- refcount 1?
;   378         jnz :RepeDupString
;   379         mov [rsi+rdi],cl        -- replace char in situ then
;   380       @@:
;   381         add rsp,16              -- discard [1] and replacement
;   382         ret
;   383 
;   384       ::RepeDupString
;   385         sub qword[rsi-16],1     -- non-1 so no need to dealloc
;   386         mov rcx,rdx
;   387         pop rdx                 --[1] this is why we saved it!
;   388         call :%pAllocStr        -- damages rax only
;   389         add rcx,1               -- include trailing null
;   390         mov [rdx],rax           -- replace ref at original address
;   391         lea rdx,[rax*4+rdi]     -- replacement char location
;   392         lea rdi,[rbx+rax*4]
;   393         rep movsb
;   394         pop rcx
;   395         mov [rdx],cl
;   396         ret
;   397 
;   398       ::RepeExpandString
;   399         mov rcx,rdx
;   400         mov rdx,[rsp+16]        -- era
;   401         call :%pAllocSeq        -- damages rax only
;   402         push rax                --[2]
;   403         shl rax,2
;   404         lea rdx,[rax+rdi*8]     -- replacement location
;   405         mov rdi,rax
;   406         xor rax,rax
;   407       @@:
;   408             lodsb               -- mov al,[rsi], rsi+=1
;   409             stosq               -- mov [rdi],rax, rdi+=8
;   410             sub rcx,1
;   411             jnz @b
;   412 
;   413         mov rax,[rsp+16]        -- replacement
;   414 --      mov r15,h4
;   415         cmp rax,r15
;   416         jl @f
;   417           add qword[rbx+rax*4-16],1
;   418       @@:
;   419         pop rcx                 --[2] newly allocated sequence
;   420         pop rdi                 --[1] address of ref to replace
;   421         mov [rdx],rax           -- replace element (a char that became a dword)
;   422         add rsp,8               -- discard replacement
;   423         mov rdx,[rdi]           -- get old
;   424         mov [rdi],rcx           -- replace expanded string
;   425         cmp rdx,r15
;   426         jle @f
;   427           sub qword[rbx+rdx*4-16],1
;   428           jz :%pDealloc
;   429       @@:
;   430         ret
;   431     []
;   432 
;   433 --/*
;   434 procedure :%pRepe1(:%)
;   435 end procedure -- (for Edita/CtrlQ)
;   436 --*/
;   437     :%pRepe1            -- esi[edi]:=ecx, aka ref[idx]:=rep
;   438 ------------
;   439     [32]
;   440         --calling convention:
;   441         --  mov edi,[idx]       (opUnassigned)
;   442         --  mov ecx,[rep]       (opUnassigned)
;   443         --  mov esi,[ref]       (opUnassigned)
;   444         --  lea eax,[ref]
;   445         --  call :%pRepe1       -- ref[idx]:=rep
;   446         sub edi,1                   -- idx -= 1
                sub edi,1                 ;#004607F3: 203357 01                  uv 80 80  1 197      
;   447 --  mov [rep1ra],eax            -- save addr rep, in case we clone [ref?!]
;   448         push eax                    --[0] save addr ref
                push eax                  ;#004607F6: 120                        vu 00 01  1 197      
;   449         mov edx,[ebx+esi*4-12]      -- get length
                mov edx,[ebx+esi*4-12]    ;#004607F7: 213124263 F4               uv 04 48  1 198      
;   450         cmp edi,edx                 -- if idx is -ve/float/oob then longhand
                cmp edi,edx               ;#004607FB: 071327                     uv 00 84  1 199 04   
;   451         jb @f
                jb #00460806              ;#004607FD: 162 07                     v  00 00  1 199      
;   452             mov al,4+0              -- [era] @ [esp+8] "assigning to"
                    mov al,4              ;#004607FF: 260 04                     uv 01 00  1 200      
;   453             call :%fixupIndex       -- idx-1 in edi, len in edx, not idx addr in ebx, al set
                    call #00460DED (:%fixupIndex)  ;#00460801: 350 E7050000               v  00 00  1 200      
;   454       @@:
;   455         cmp dword[ebx+esi*4-8],1    -- if refcount!=1 then clone
                cmp dword[ebx+esi*4-8],1  ;#00460806: 203174263 F8 01            u  00 48  2 201      
;   456         jne :opRepe1Clone
                jne #004608A2             ;#0046080B: 017205 91000000            v  00 00  1 202      
;   457         lea eax,[ebx+esi*4]
                lea eax,[ebx+esi*4]       ;#00460811: 215004263                  uv 01 48  1 203      
;   458         cmp byte[ebx+esi*4-1],0x80  -- type byte
                cmp byte[ebx+esi*4-1],#80  ;#00460814: 200174263 FF 80            u  00 48  2 204      
;   459         jbe :opRepe1Sequence
                jbe #00460874             ;#00460819: 166 59                     v  00 00  1 205      
;   460         cmp [ma_ip],ebx
                cmp [#00402A2C] (ma_ip),ebx  ;#0046081B: 071035 2C2A4000            uv 00 08  2 206      
;   461         jne :e52jsdnssd4
                jne #00460679             ;#00460821: 017205 52FEFFFF            v  00 00  1 207      
;   462         cmp ecx,255
                cmp ecx,255               ;#00460827: 201371 FF000000            uv 00 02  1 208      
;   463         ja :opRepe1ExpandString
                ja #00460836              ;#0046082D: 167 07                     v  00 00  1 208      
;   464         add esp,4
                add esp,4                 ;#0046082F: 203304 04                  uv 10 10  1 209      
;   465         mov [eax+edi],cl
                mov [eax+edi],cl          ;#00460832: 210014070                  vu 00 83  1 209      
;   466         ret
                ret                       ;#00460835: 303                        np 00 00  2 210      
;   467 
;   468       ::opRepe1ExpandString
;   469         -- esi is ref of source string, of refcount 1, will need dealloc
;   470         -- edi is idx-1, checked to be in bounds
;   471         -- ecx is some non-char replacement
;   472         -- edx contains the original length
;   473         -- eax is src base (not used/refetched here)
;   474         -- [esp] is addr ref
;   475         cmp ecx,h4
                cmp ecx,h4                ;#00460836: 201371 00000040            uv 00 02  1 212      
;   476         jl @f
                jl #00460843              ;#0046083C: 174 05                     v  00 00  1 212      
;   477             add dword[ebx+ecx*4-8],1
                    add dword[ebx+ecx*4-8],1  ;#0046083E: 203104213 F8 01            u  00 0A  3 213      
;   478       @@:
;   479         pop eax                     --[0]
                pop eax                   ;#00460843: 130                        vu 01 00  1 215      
;   480         push esi                    --[1] save the string ref for final dealloc
                push esi                  ;#00460844: 126                        uv 00 40  1 216      
;   481         push ecx                    --[2] Replacement ref (rep)
                push ecx                  ;#00460845: 121                        vu 00 02  1 216      
;   482 --newEBP
;   483 --? mov ecx,[rep1ra]            -- ref addr
;   484         mov ecx,edx
                mov ecx,edx               ;#00460846: 213312                     uv 02 04  1 217      
;   485 --      mov edx,eax
;   486         push eax
                push eax                  ;#00460848: 120                        vu 00 01  1 217      
;   487         mov edx,[esp+8]             -- era
                mov edx,[esp+8]           ;#00460849: 213124044 08               uv 04 10  1 218      
;   488         call :%pAllocSeq            -- damages eax only
                call #00463832 (:%pAllocSeq)  ;#0046084D: 350 E02F0000               v  00 00  1 218      
;   489         pop edx
                pop edx                   ;#00460852: 132                        uv 04 00  1 219      
;   490 --  mov ecx,[ecx-9]             -- ref addr
;   491         lea esi,[ebx+esi*4]
                lea esi,[ebx+esi*4]       ;#00460853: 215064263                  vu 40 48  1 219      
;   492 --DEV would    shl esi,2    be any better?
;   493         mov [edx],eax               -- replace it now
                mov [edx],eax             ;#00460856: 211002                     uv 00 05  1 222    *04*
;   494         mov edx,ecx
                mov edx,ecx               ;#00460858: 213321                     vu 04 02  1 222      
;   495         lea ecx,[ebx+edi*4]         -- idx -> dwords
                lea ecx,[ebx+edi*4]       ;#0046085A: 215014273                  uv 02 88  1 223      
;   496         lea edi,[ebx+eax*4]         -- new base
                lea edi,[ebx+eax*4]       ;#0046085D: 215074203                  vu 80 09  1 223      
;   497         xor eax,eax
                xor eax,eax               ;#00460860: 061300                     uv 01 01  1 224      
;   498         add ecx,edi                 -- replacement location
                add ecx,edi               ;#00460862: 001371                     vu 02 82  1 224      
;   499       @@:
;   500 --DEV lodsb stosd??
;   501 --      mov al,[esi]
;   502 --      inc esi
;   503         lodsb
                lodsb                     ;#00460864: 254                        np 41 40  2 225      
;   504 --      mov [edi],eax
;   505 --      add edi,4
;   506         stosd
                stosd                     ;#00460865: 253                        np 80 81  3 227      
;   507 --      dec edx
;   508         sub edx,1
                sub edx,1                 ;#00460866: 203352 01                  uv 04 04  1 230      
;   509         jnz @b
                jnz #00460864             ;#00460869: 165 F9                     v  00 00  1 230      
;   510 
;   511         pop esi                     --[2] Replacement ref
                pop esi                   ;#0046086B: 136                        uv 40 00  1 231      
;   512         pop edx                     --[1] previous content (a string)
                pop edx                   ;#0046086C: 132                        vu 04 00  1 231      
;   513         mov [ecx],esi
                mov [ecx],esi             ;#0046086D: 211061                     uv 00 42  1 232      
;   514         jmp :%pDealloc
                jmp #004639A8 (:%pDealloc)  ;#0046086F: 351 34310000               v  00 00  1 232      
;   515 
;   516       ::opRepe1Sequence
;   517         -- esi is source ref, of refcount 1 so replace in situ, 
;   518         --                    unless it is an atom (jl error)
;   519         -- edi is idx-1, checked to be in bounds
;   520         -- ecx is rep (may need incref)
;   521         -- edx contains the original length (no longer needed)
;   522         -- eax is src base
;   523         -- [esp] is addr ref
;   524         mov edx,[eax+edi*4]         -- get prev s[i]
                mov edx,[eax+edi*4]       ;#00460874: 213024270                  uv 04 81  1 233      
;   525         jl :e04atsaa4               -- attempt to subscript an atom (era @ [esp-4])
                jl #00460674              ;#00460877: 017214 F7FDFFFF            v  00 00  1 233      
;   526         cmp ecx,h4
                cmp ecx,h4                ;#0046087D: 201371 00000040            uv 00 02  1 234      
;   527         jl @f
                jl #0046088A              ;#00460883: 174 05                     v  00 00  1 234      
;   528             add dword[ebx+ecx*4-8],1
                    add dword[ebx+ecx*4-8],1  ;#00460885: 203104213 F8 01            u  00 0A  3 235      
;   529       @@:
;   530         mov [eax+edi*4],ecx         -- rep
                mov [eax+edi*4],ecx       ;#0046088A: 211014270                  vu 00 83  1 237      
;   531         pop eax                     --[0] discard
                pop eax                   ;#0046088D: 130                        uv 01 00  1 238      
;   532         cmp edx,h4
                cmp edx,h4                ;#0046088E: 201372 00000040            vu 00 04  1 238      
;   533         jle @f
                jle #004608A1             ;#00460894: 176 0B                     v  00 00  1 239      
;   534             sub dword[ebx+edx*4-8],1
                    sub dword[ebx+edx*4-8],1  ;#00460896: 203154223 F8 01            u  00 0C  3 240      
;   535             jz :%pDealloc
                    jz #004639A8 (:%pDealloc)  ;#0046089B: 017204 07310000            v  00 00  1 242      
;   536       @@:
;   537         ret
                ret                       ;#004608A1: 303                        np 00 00  2 243      
;   538 
;   539       ::opRepe1Clone
;   540         -- esi is src ref (unknown type), of refcount >1, (so just decref it)
;   541         -- edi is idx-1,
;   542         -- ecx is rep (may need incref)
;   543         -- edx contains the original length
;   544         -- eax is src base [BLUFF: addr ref]
;   545         -- [esp] is addr ref
;   546         sub dword[ebx+esi*4-8],1    -- reduce refcount (not 1, dealloc not rqd)
                sub dword[ebx+esi*4-8],1  ;#004608A2: 203154263 F8 01            u  00 48  3 245      
;   547         push ecx                    --[1] save rep
                push ecx                  ;#004608A7: 121                        vu 00 02  1 247      
;   548         cmp ecx,h4                  -- incref if needed
                cmp ecx,h4                ;#004608A8: 201371 00000040            uv 00 02  1 248      
;   549         jl @f
                jl #004608B5              ;#004608AE: 174 05                     v  00 00  1 248      
;   550             add dword[ebx+ecx*4-8],1
                    add dword[ebx+ecx*4-8],1  ;#004608B0: 203104213 F8 01            u  00 0A  3 249      
;   551       @@:
;   552         cmp byte[ebx+esi*4-1],0x80  -- type byte
                cmp byte[ebx+esi*4-1],#80  ;#004608B5: 200174263 FF 80            u  00 48  2 252      
;   553         jbe :opRepe1CloneSequence
                jbe #004608F6             ;#004608BA: 166 3A                     v  00 00  1 253      
;   554         cmp [ma_ip],ebx
                cmp [#00402A2C] (ma_ip),ebx  ;#004608BC: 071035 2C2A4000            uv 00 08  2 254      
;   555 --27/6/21:
;   556 --      jne :e52jsdnssd4
;   557         jne :e52jsdnssd8
                jne #00460676             ;#004608C2: 017205 AEFDFFFF            v  00 00  1 255      
;   558         cmp ecx,255
                cmp ecx,255               ;#004608C8: 201371 FF000000            uv 00 02  1 256      
;   559         ja :opRepe1CloneExpandStr
                ja #00460955              ;#004608CE: 017207 81000000            v  00 00  1 256      
;   560 --  mov ecx,[esp+4]             -- return addr
;   561 --newEBP
;   562 --  mov ecx,[rep1ra]
;   563         mov ecx,edx
                mov ecx,edx               ;#004608D4: 213312                     uv 02 04  1 257      
;   564         mov edx,[esp+4]             -- [0]
                mov edx,[esp+4]           ;#004608D6: 213124044 04               vu 04 10  1 257      
;   565         call :%pAllocStr            -- damages eax only
                call #0046377D (:%pAllocStr)  ;#004608DA: 350 9E2E0000               v  00 00  1 258      
;   566 --  mov ecx,[ecx-9]             -- ref addr
;   567 --  lea esi,[ebx+esi*4]
;   568         shl esi,2                   -- src base
                shl esi,2                 ;#004608DF: 301346 02                  u  40 40  1 259      
;   569         mov [edx],eax               -- replace it now
                mov [edx],eax             ;#004608E2: 211002                     uv 00 05  1 261    *04*
;   570         add ecx,1                   -- include trailing null in following rep movsb
                add ecx,1                 ;#004608E4: 203301 01                  vu 02 02  1 261      
;   571         lea edx,[eax*4+edi]         -- replacement char location
                lea edx,[edi+eax*4]       ;#004608E7: 215024207                  uv 04 81  1 262      
;   572         lea edi,[ebx+eax*4]         -- raw(new)
                lea edi,[ebx+eax*4]       ;#004608EA: 215074203                  vu 80 09  1 262      
;   573         pop eax                     --[1] Replacement char
                pop eax                   ;#004608ED: 130                        uv 01 00  1 263      
;   574         rep movsb
                rep movsb                 ;#004608EE: 363:244                    np C2 C2  4 265    *80*
;   575         mov [edx],al
                mov [edx],al              ;#004608F0: 210002                     uv 00 05  1 269      
;   576         add esp,4                   --[0]
                add esp,4                 ;#004608F2: 203304 04                  vu 10 10  1 269      
;   577         ret
                ret                       ;#004608F5: 303                        np 00 00  2 270      
;   578 
;   579       ::opRepe1CloneSequence
;   580         -- esi is src ref, already decrefed, <= #80 (ie jl error rqd)
;   581         -- edi is idx-1,
;   582         -- edx contains the original length (ready for AllocSeq)
;   583         -- eax is src base [BLUFF: addr ref]
;   584         -- [esp] == ecx is rep (already increfd)
;   585         -- [esp+4] is addr ref
;   586 --newEBP::
;   587 --> mov ecx,[rep1ra]
;   588         mov ecx,edx
                mov ecx,edx               ;#004608F6: 213312                     uv 02 04  1 272      
;   589 --      jl :e04atsaa8               -- attempt to subscript an atom (era @ [esp+8])
;   590         jge @f
                jge #004608FF             ;#004608F8: 175 05                     v  00 00  1 272      
;   591 mov al, byte[ebx+esi*4-1]   -- type byte
        mov al,[ebx+esi*4-1]              ;#004608FA: 212104263 FF               uv 01 48  1 273      
;   592             int3
                    int3                  ;#004608FE: 314                        np 00 00 13 274      
;   593       @@:
;   594         mov edx,[esp+8]             -- era
                mov edx,[esp+8]           ;#004608FF: 213124044 08               uv 04 10  1 287      
;   595         call :%pAlloClone
                call #00463814 (:%pAlloClone)  ;#00460903: 350 0C2F0000               v  00 00  1 287      
;   596         call :%pAllocSeq            -- damages eax only
                call #00463832 (:%pAllocSeq)  ;#00460908: 350 252F0000               v  00 00  1 288      
;   597         mov edx,[esp+4]             -- [0]
                mov edx,[esp+4]           ;#0046090D: 213124044 04               uv 04 10  1 289      
;   598 --  mov ecx,[ecx-9]             -- ref addr
;   599         lea edi,[eax+edi]           -- after shl2 below will effectively be ...
                lea edi,[eax+edi]         ;#00460911: 215074070                  vu 80 81  1 289      
;   600 --  lea esi,[ebx+esi*4]
;   601         shl esi,2                   -- src base
                shl esi,2                 ;#00460914: 301346 02                  u  40 40  1 290      
;   602         shl edi,2                   -- rep addr ... [eax*4(new base)+edi*4(idx->dwords)]
                shl edi,2                 ;#00460917: 301347 02                  u  80 80  1 291      
;   603         mov [edx],eax               -- replace it now (WOW! no AGI!)
                mov [edx],eax             ;#0046091A: 211002                     vu 00 05  1 291      
;   604         shl eax,2                   -- new base
                shl eax,2                 ;#0046091C: 301340 02                  u  01 01  1 292      
;   605       @@:
;   606         mov edx,[esi]
                mov edx,[esi]             ;#0046091F: 213026                     vu 04 40  1 292      
;   607         add esi,4
                add esi,4                 ;#00460921: 203306 04                  uv 40 40  1 293      
;   608         mov [eax],edx
                mov [eax],edx             ;#00460924: 211020                     uv 00 05  1 295    *01*
;   609         add eax,4
                add eax,4                 ;#00460926: 203300 04                  vu 01 01  1 295      
;   610         cmp edx,h4
                cmp edx,h4                ;#00460929: 201372 00000040            uv 00 04  1 296      
;   611         jl :Repe1_no_incref
                jl #00460936              ;#0046092F: 174 05                     v  00 00  1 296      
;   612             -- exception here fatal (mid-clone/back-end error)
;   613             add dword[ebx+edx*4-8],1
                    add dword[ebx+edx*4-8],1  ;#00460931: 203104223 F8 01            u  00 0C  3 297      
;   614       ::Repe1_no_incref
;   615         sub ecx,1
                sub ecx,1                 ;#00460936: 203351 01                  vu 02 02  1 299      
;   616         jnz @b
                jnz #0046091F             ;#00460939: 165 E4                     v  00 00  1 300      
;   617         mov edx,[edi]               -- prev s[i]
                mov edx,[edi]             ;#0046093B: 213027                     uv 04 80  1 301      
;   618         pop ecx                     -- [1] rep ref (already incref'd)
                pop ecx                   ;#0046093D: 131                        vu 02 00  1 301      
;   619         pop eax                     -- [0] discard
                pop eax                   ;#0046093E: 130                        uv 01 00  1 302      
;   620         mov [edi],ecx
                mov [edi],ecx             ;#0046093F: 211017                     vu 00 82  1 302      
;   621         cmp edx,h4
                cmp edx,h4                ;#00460941: 201372 00000040            uv 00 04  1 303      
;   622         jl @f
                jl #00460954              ;#00460947: 174 0B                     v  00 00  1 303      
;   623             sub dword[ebx+edx*4-8],1
                    sub dword[ebx+edx*4-8],1  ;#00460949: 203154223 F8 01            u  00 0C  3 304      
;   624             jz :%pDealloc
                    jz #004639A8 (:%pDealloc)  ;#0046094E: 017204 54300000            v  00 00  1 306      
;   625       @@:
;   626         ret
                ret                       ;#00460954: 303                        np 00 00  2 307      
;   627 
;   628       ::opRepe1CloneExpandStr
;   629         -- esi is src ref (string), already decrefed
;   630         -- edi is idx-1,
;   631         -- edx contains the original length (ready for AllocSeq)
;   632         -- eax is src base [bluff: addr ref]
;   633         -- [esp] == ecx is non-char rep (already increfd)
;   634         -- [esp+4] is addr ref
;   635 --  mov ecx,[esp+4]             -- return addr
;   636 --  opRepe1is110: ---- rejoin point for e110Repe1is [DEV]
;   637 --newEBP::
;   638 --> mov ecx,[rep1ra]
;   639         mov ecx,edx
                mov ecx,edx               ;#00460955: 213312                     uv 02 04  1 309      
;   640         mov edx,[esp+8]         -- era
                mov edx,[esp+8]           ;#00460957: 213124044 08               vu 04 10  1 309      
;   641         call :%pAllocSeq        -- damages eax only
                call #00463832 (:%pAllocSeq)  ;#0046095B: 350 D22E0000               v  00 00  1 310      
;   642         mov edx,[esp+4]         -- [0]
                mov edx,[esp+4]           ;#00460960: 213124044 04               uv 04 10  1 311      
;   643 --  mov ecx,[ecx-9]             -- ref addr
;   644 --  lea edi,[eax+edi]           -- after shl2 below will effectively be ...
;   645         add edi,eax                 -- after shl2 below will effectively be ...
                add edi,eax               ;#00460964: 001307                     vu 80 81  1 311      
;   646 --  lea esi,[ebx+esi*4]
;   647         shl esi,2               -- src base
                shl esi,2                 ;#00460966: 301346 02                  u  40 40  1 312      
;   648         shl edi,2               -- rep addr ... [eax*4(new base)+edi*4(idx->dwords)]
                shl edi,2                 ;#00460969: 301347 02                  u  80 80  1 313      
;   649         mov [edx],eax           -- replace it now
                mov [edx],eax             ;#0046096C: 211002                     vu 00 05  1 313      
;   650         mov edx,ecx
                mov edx,ecx               ;#0046096E: 213321                     uv 04 02  1 314      
;   651         shl eax,2               -- new base
                shl eax,2                 ;#00460970: 301340 02                  u  01 01  1 315      
;   652         xor ecx,ecx
                xor ecx,ecx               ;#00460973: 061311                     vu 02 02  1 315      
;   653       @@:
;   654         mov cl,[esi]
                mov cl,[esi]              ;#00460975: 212016                     uv 02 40  1 316      
;   655         add esi,1
                add esi,1                 ;#00460977: 203306 01                  vu 40 40  1 316      
;   656         mov [eax],ecx
                mov [eax],ecx             ;#0046097A: 211010                     uv 00 03  1 317      
;   657         add eax,4
                add eax,4                 ;#0046097C: 203300 04                  vu 01 01  1 317      
;   658         sub edx,1
                sub edx,1                 ;#0046097F: 203352 01                  uv 04 04  1 318      
;   659         jnz @b
                jnz #00460975             ;#00460982: 165 F1                     v  00 00  1 318      
;   660 --      pop ecx                 -- [1] rep
;   661         pop dword[edi]          -- [1] rep
                pop dword[edi]            ;#00460984: 217007                     np 00 80  3 319      
;   662         pop eax                 -- [0] discard
                pop eax                   ;#00460986: 130                        uv 01 00  1 322      
;   663 --      mov [edi],ecx
;   664         ret
                ret                       ;#00460987: 303                        np 00 00  2 323      
;   665     [64]
;   666         --calling convention:
;   667         --  mov rdi,[idx]       (opUnassigned)
;   668         --  mov rcx,[rep]       (opUnassigned)
;   669         --  mov rsi,[ref]       (opUnassigned)
;   670         --  lea rax,[ref]
;   671         --  call :%pRepe1       -- ref[idx]:=rep
;   672         sub rdi,1                   -- idx -= 1
;   673         push rax                    --[0] save addr ref
;   674         mov rdx,[rbx+rsi*4-24]      -- get length
;   675         cmp rdi,rdx                 -- if idx is -ve/float/oob then longhand
;   676         jb @f
;   677             mov al,4+0              -- [era] @ [rsp+16] "assigning to"
;   678             call :%fixupIndex       -- idx-1 in rdi, len in rdx, not idx addr in rbx, al set
;   679       @@:
;   680         cmp qword[rbx+rsi*4-16],1   -- if refcount!=1 then clone
;   681         jne :opRepe1Clone
;   682         lea rax,[rbx+rsi*4]
;   683         cmp byte[rbx+rsi*4-1],0x80  -- type byte
;   684         jbe :opRepe1Sequence
;   685         cmp [ma_ip],rbx
;   686         jne :e52jsdnssd8
;   687         cmp rcx,255
;   688         ja :opRepe1ExpandString
;   689         add rsp,8
;   690         mov [rax+rdi],cl
;   691         ret
;   692 
;   693       ::opRepe1ExpandString
;   694         -- rsi is ref of source string, of refcount 1, will need dealloc
;   695         -- rdi is idx-1, checked to be in bounds
;   696         -- rcx is some non-char replacement
;   697         -- rdx contains the original length
;   698         -- rax is src base (not used/refetched here)
;   699         -- [rsp] is addr ref
;   700         mov r15,h4
;   701         cmp rcx,r15
;   702         jl @f
;   703             add qword[rbx+rcx*4-16],1
;   704       @@:
;   705         pop rax                     --[0]
;   706         push rsi                    --[1] save the string ref for final dealloc
;   707         push rcx                    --[2] Replacement ref (rep)
;   708         mov rcx,rdx
;   709 --      mov rdx,rax
;   710         mov r9,rax
;   711         mov rdx,[rsp+16]            -- era
;   712         call :%pAllocSeq            -- damages rax only
;   713         lea rsi,[rbx+rsi*4]
;   714 --      mov [rdx],rax               -- replace it now
;   715         mov [r9],rax                -- replace it now
;   716         mov rdx,rcx
;   717         lea rcx,[rbx+rdi*8]         -- idx -> qwords
;   718         lea rdi,[rbx+rax*4]         -- new base
;   719         xor rax,rax
;   720         add rcx,rdi                 -- replacement location
;   721       @@:
;   722             lodsb
;   723             stosq
;   724             sub rdx,1
;   725             jnz @b
;   726         pop rsi                     --[2] Replacement ref
;   727         pop rdx                     --[1] previous content (a string)
;   728         mov [rcx],rsi
;   729         jmp :%pDealloc
;   730 
;   731       ::opRepe1Sequence
;   732         -- rsi is source ref, of refcount 1 so replace in situ, 
;   733         --                    unless it is an atom (jl error)
;   734         -- rdi is idx-1, checked to be in bounds
;   735         -- rcx is rep (may need incref)
;   736         -- rdx contains the original length (no longer needed)
;   737         -- rax is src base
;   738         -- [rsp] is addr ref
;   739         mov rdx,[rax+rdi*8]         -- get prev s[i]
;   740         jl :e04atsaa4               -- attempt to subscript an atom (era @ [esp-4])
;   741         mov r15,h4
;   742         cmp rcx,r15
;   743         jl @f
;   744             add qword[rbx+rcx*4-16],1
;   745       @@:
;   746         mov [rax+rdi*8],rcx         -- rep
;   747 --21/8/15 (debug assist)
;   748 --      pop rax                     --[0] discard
;   749         add rsp,8                   --[0] discard
;   750         cmp rdx,r15
;   751         jle @f
;   752             sub qword[rbx+rdx*4-16],1
;   753             jz :%pDealloc
;   754       @@:
;   755         ret
;   756 
;   757       ::opRepe1Clone
;   758         -- rsi is src ref (unknown type), of refcount >1, (so just decref it)
;   759         -- rdi is idx-1,
;   760         -- rcx is rep (may need incref)
;   761         -- rdx contains the original length
;   762         -- rax is src base [BLUFF: addr ref]
;   763         -- [rsp] is addr ref
;   764         sub qword[rbx+rsi*4-16],1   -- reduce refcount (not 1, dealloc not rqd)
;   765         push rcx                    --[1] save rep
;   766         mov r15,h4
;   767         cmp rcx,r15                 -- incref if needed
;   768         jl @f
;   769             add qword[rbx+rcx*4-16],1
;   770       @@:
;   771         cmp byte[rbx+rsi*4-1],0x80  -- type byte
;   772         jbe :opRepe1CloneSequence
;   773         cmp [ma_ip],rbx
;   774 --27/6/21:
;   775 --      jne :e52jsdnssd8
;   776         jne :e52jsdnssd16
;   777         cmp rcx,255
;   778         ja :opRepe1CloneExpandStr
;   779         mov rcx,rdx
;   780         mov rdx,[rsp+8]             --[0] ref addr
;   781         call :%pAllocStr            -- damages rax only
;   782         shl rsi,2                   -- src base
;   783         mov [rdx],rax               -- replace it now
;   784         add rcx,1                   -- include trailing null in following rep movsb
;   785         lea rdx,[rax*4+rdi]         -- replacement char location
;   786         lea rdi,[rbx+rax*4]         -- raw(new)
;   787         pop rax                     --[1] Replacement char
;   788         rep movsb
;   789         mov [rdx],al
;   790         add rsp,8                   --[0]
;   791         ret
;   792 
;   793       ::opRepe1CloneSequence
;   794         -- rsi is src ref, already decrefed, <= #80 (ie jl error rqd)
;   795         -- rdi is idx-1,
;   796         -- rdx contains the original length (ready for AllocSeq)
;   797         -- rax is src base [BLUFF: addr ref]
;   798         -- [rsp] == rcx is rep (already increfd)
;   799         -- [rsp+8] is addr ref
;   800         mov rcx,rdx
;   801 --      jl :e04atsaa8               -- attempt to subscript an atom (era @ [ebp-8])
;   802         jge @f
;   803 mov al,byte[rbx+rsi*4-1]    -- type byte
;   804           int3
;   805       @@:
;   806         mov rdx,[rsp+16]            -- era
;   807         call :%pAlloClone
;   808         call :%pAllocSeq            -- damages rax only
;   809 --      mov rdx,[rsp+4]             -- [0]
;   810         mov rdx,[rsp+8]             -- [0]
;   811         lea rdi,[rax+rdi*2]         -- after shl2 below will effectively be ...
;   812         shl rsi,2                   -- src base
;   813         shl rdi,2                   -- rep addr ... [rax*4(new base)+rdi*8(idx->qwords)]
;   814         mov [rdx],rax               -- replace it now (WOW! no AGI!)
;   815         mov rdx,rcx
;   816         shl rax,2                   -- new base
;   817         mov r15,h4
;   818       @@:
;   819         mov rcx,[rsi]
;   820         add rsi,8
;   821         mov [rax],rcx
;   822         add rax,8
;   823         cmp rcx,r15
;   824         jl :Repe1_no_incref
;   825             -- exception here fatal (mid-clone/back-end error)
;   826             add qword[rbx+rcx*4-16],1
;   827       ::Repe1_no_incref
;   828         sub rdx,1
;   829         jnz @b
;   830         mov rdx,[rdi]               -- prev s[i]
;   831         pop rcx                     -- [1] rep ref (already incref'd)
;   832         pop rax                     -- [0] discard
;   833         mov [rdi],rcx
;   834         cmp rdx,r15
;   835         jl @f
;   836             sub qword[rbx+rdx*4-16],1
;   837             jz :%pDealloc
;   838       @@:
;   839         ret
;   840 
;   841       ::opRepe1CloneExpandStr
;   842         -- rsi is src ref (string), already decrefed
;   843         -- rdi is idx-1,
;   844         -- rdx contains the original length (ready for AllocSeq)
;   845         -- rax is src base [BLUFF: addr ref]
;   846         -- [rsp] == rcx is non-char rep (already increfd)
;   847         -- [rsp+8] is addr ref
;   848 --  opRepe1is110: ---- rejoin point for e110Repe1is [DEV]
;   849         mov rcx,rdx
;   850         mov rdx,[rsp+16]        -- era
;   851         call :%pAllocSeq        -- damages rax only
;   852         mov rdx,[rsp+8]         -- [0]
;   853         lea rdi,[rdi*2+rax]     -- after shl2 below will effectively be ...
;   854         shl rsi,2               -- src base
;   855         shl rdi,2               -- rep addr ... [rax*4(new base)+rdi*8(idx->qwords)]
;   856         mov [rdx],rax           -- replace it now
;   857         mov rdx,rcx
;   858         shl rax,2               -- new base
;   859         xor rcx,rcx
;   860       @@:
;   861         mov cl,[rsi]
;   862         add rsi,1
;   863         mov [rax],rcx
;   864         add rax,8
;   865         sub rdx,1
;   866         jnz @b
;   867 --      pop qword[rdi]          -- [1] rep
;   868         pop rdx
;   869         pop rax                 -- [0] discard
;   870         mov [rdi],rdx
;   871         ret
;   872     []
;   873 
;   874 --/*
;   875 procedure :%pRepe1ip(:%)
;   876 end procedure -- (for Edita/CtrlQ)
;   877 --*/
;   878     :%pRepe1ip          -- esi[edi]:=ecx, as opRepe1 when esi is sequence of integer, as proved by gvar_scan.
;   879 --------------
;   880     [32]
;   881         --calling convention:
;   882         --  mov edi,[idx]       (opUnassigned)
;   883         --  mov ecx,[rep]       (opUnassigned)
;   884         --  mov esi,[ref]       (opUnassigned)
;   885         --  lea eax,[ref]
;   886         --  call :%pRepe1ip     -- ref[idx]:=rep
;   887         sub edi,1                   -- idx -= 1
                sub edi,1                 ;#00460988: 203357 01                  uv 80 80  1 325      
;   888 --  mov [rep1ra],eax
;   889         push eax                    --[0] save ref addr
                push eax                  ;#0046098B: 120                        vu 00 01  1 325      
;   890         mov edx,[ebx+esi*4-12]      -- get length
                mov edx,[ebx+esi*4-12]    ;#0046098C: 213124263 F4               uv 04 48  1 326      
;   891         lea eax,[ebx+esi*4]
                lea eax,[ebx+esi*4]       ;#00460990: 215004263                  vu 01 48  1 326      
;   892         cmp edi,edx                 -- if idx is -ve/float/oob then longhand
                cmp edi,edx               ;#00460993: 071327                     uv 00 84  1 327      
;   893         jb @f
                jb #004609A1              ;#00460995: 162 0A                     v  00 00  1 327      
;   894 --20/6/16:
;   895 --          mov al,2+0              -- [era] @ [esp+4] "assigning to"
;   896             mov al,4+0              -- [era] @ [esp+8] "assigning to"
                    mov al,4              ;#00460997: 260 04                     uv 01 00  1 328      
;   897             call :%fixupIndex       -- idx-1 in edi, len in edx, not idx addr in ebx, al set
                    call #00460DED (:%fixupIndex)  ;#00460999: 350 4F040000               v  00 00  1 328      
;   898             lea eax,[ebx+esi*4]     -- as we just trashed it
                    lea eax,[ebx+esi*4]   ;#0046099E: 215004263                  uv 01 48  1 329      
;   899       @@:
;   900         cmp dword[ebx+esi*4-8],1    -- if refcount!=1 then clone
                cmp dword[ebx+esi*4-8],1  ;#004609A1: 203174263 F8 01            u  00 48  2 330      
;   901         jne :opRepe1ipClone
                jne #004609AF             ;#004609A6: 165 07                     v  00 00  1 331      
;   902         add esp,4                   --[0] discard
                add esp,4                 ;#004609A8: 203304 04                  uv 10 10  1 332      
;   903         mov [eax+edi*4],ecx         -- rep
                mov [eax+edi*4],ecx       ;#004609AB: 211014270                  vu 00 83  1 332      
;   904         ret
                ret                       ;#004609AE: 303                        np 00 00  2 333      
;   905 
;   906       ::opRepe1ipClone
;   907         -- esi is src ref (sequence of integer), of refcount >1, (so just decref it)
;   908         -- edi is idx-1,
;   909         -- ecx is rep (an integer)
;   910         -- edx contains the original length (ready for AllocSeq)
;   911         -- eax is the new (non-0) refcount
;   912         -- [esp] is ref addr
;   913         sub dword[ebx+esi*4-8],1    -- reduce refcount (was not 1, dealloc not rqd)
                sub dword[ebx+esi*4-8],1  ;#004609AF: 203154263 F8 01            u  00 48  3 335      
;   914         push ecx                    --[1] save rep
                push ecx                  ;#004609B4: 121                        vu 00 02  1 337      
;   915         mov ecx,edx
                mov ecx,edx               ;#004609B5: 213312                     uv 02 04  1 338      
;   916         mov edx,[esp+8]             -- era
                mov edx,[esp+8]           ;#004609B7: 213124044 08               vu 04 10  1 338      
;   917         call :%pAlloClone
                call #00463814 (:%pAlloClone)  ;#004609BB: 350 542E0000               v  00 00  1 339      
;   918         call :%pAllocSeq            -- damages eax only
                call #00463832 (:%pAllocSeq)  ;#004609C0: 350 6D2E0000               v  00 00  1 340      
;   919         mov edx,[esp+4]             --[0]
                mov edx,[esp+4]           ;#004609C5: 213124044 04               uv 04 10  1 341      
;   920         lea edi,[eax+edi]           -- after shl2 below will effectively be ...
                lea edi,[eax+edi]         ;#004609C9: 215074070                  vu 80 81  1 341      
;   921         shl esi,2                   -- src base
                shl esi,2                 ;#004609CC: 301346 02                  u  40 40  1 342      
;   922         shl edi,2                   -- rep addr ... [eax*4(new base)+edi*4(idx->dwords)]
                shl edi,2                 ;#004609CF: 301347 02                  u  80 80  1 343      
;   923         mov [edx],eax               -- replace it now (WOW! no AGI!)
                mov [edx],eax             ;#004609D2: 211002                     vu 00 05  1 343      
;   924         shl eax,2                   -- new base
                shl eax,2                 ;#004609D4: 301340 02                  u  01 01  1 344      
;   925       @@:
;   926         mov edx,[esi]
                mov edx,[esi]             ;#004609D7: 213026                     vu 04 40  1 344      
;   927         add esi,4
                add esi,4                 ;#004609D9: 203306 04                  uv 40 40  1 345      
;   928         mov [eax],edx
                mov [eax],edx             ;#004609DC: 211020                     uv 00 05  1 347    *01*
;   929         add eax,4
                add eax,4                 ;#004609DE: 203300 04                  vu 01 01  1 347      
;   930         sub ecx,1
                sub ecx,1                 ;#004609E1: 203351 01                  uv 02 02  1 348      
;   931         jnz @b
                jnz #004609D7             ;#004609E4: 165 F1                     v  00 00  1 348      
;   932         pop dword[edi]              --[1] rep
                pop dword[edi]            ;#004609E6: 217007                     np 00 80  3 349      
;   933         add esp,4                   --[0] discard
                add esp,4                 ;#004609E8: 203304 04                  uv 10 10  1 352      
;   934         ret
                ret                       ;#004609EB: 303                        np 00 00  2 353      
;   935     [64]
;   936         --calling convention:
;   937         --  mov rdi,[idx]       (opUnassigned)
;   938         --  mov rcx,[rep]       (opUnassigned)
;   939         --  mov rsi,[ref]       (opUnassigned)
;   940         --  lea rax,[ref]
;   941         --  call :%pRepe1ip     -- ref[idx]:=rep
;   942         sub rdi,1                   -- idx -= 1
;   943         push rax                    --[0] save ref addr
;   944         mov rdx,[rbx+rsi*4-24]      -- get length
;   945         lea rax,[rbx+rsi*4]
;   946         cmp rdi,rdx                 -- if idx is -ve/float/oob then longhand
;   947         jb @f
;   948 --20/6/16:
;   949 --          mov al,2+0              -- [era] @ [esp+4] "assigning to"
;   950             mov al,4+0              -- [era] @ [rsp+16] "assigning to"
;   951             call :%fixupIndex       -- idx-1 in rdi, len in rdx, not idx addr in rbx, al set
;   952             lea rax,[rbx+rsi*4]     -- as we just trashed it
;   953       @@:
;   954         cmp qword[rbx+rsi*4-16],1   -- if refcount!=1 then clone
;   955         jne :opRepe1ipClone
;   956         add rsp,8                   --[0] discard
;   957 --8/7/15:
;   958 --      mov [rax+rdi*8],ecx         -- rep
;   959         mov [rax+rdi*8],rcx         -- rep
;   960         ret
;   961 
;   962       ::opRepe1ipClone
;   963         -- rsi is src ref (sequence of integer), of refcount >1, (so just decref it)
;   964         -- rdi is idx-1,
;   965         -- rcx is rep (an integer)
;   966         -- rdx contains the original length (ready for AllocSeq)
;   967         -- rax is the new (non-0) refcount
;   968         -- [rsp] is ref addr
;   969         sub qword[rbx+rsi*4-16],1   -- reduce refcount (was not 1, dealloc not rqd)
;   970         push rcx                    --[1] save rep
;   971         mov rcx,rdx
;   972         mov rdx,[rsp+16]            -- era
;   973         call :%pAlloClone
;   974         call :%pAllocSeq            -- damages rax only
;   975         mov rdx,[rsp+8]             --[0]
;   976         lea rdi,[rax+rdi*2]         -- after shl2 below will effectively be ...
;   977         shl rsi,2                   -- src base
;   978         shl rdi,2                   -- rep addr ... [rax*4(new base)+rdi*8(idx->qwords)]
;   979         mov [rdx],rax               -- replace it now (WOW! no AGI!)
;   980         shl rax,2                   -- new base
;   981       @@:
;   982             mov rdx,[rsi]
;   983             add rsi,8
;   984             mov [rax],rdx
;   985             add rax,8
;   986             sub rcx,1
;   987             jnz @b
;   988 --      pop qword[rdi]              --[1] rep
;   989         pop rax
;   990         add rsp,8                   --[0] discard
;   991         mov [rdi],rax
;   992         ret
;   993     []
;   994 
;   995 --/*
;   996 procedure :%pRepe1is(:%)
;   997 end procedure -- (for Edita/CtrlQ)
;   998 --*/
;   999     :%pRepe1is          -- esi[edi]:=ecx, as opRepe1 when esi is string, as proved by gvar_scan.
;  1000 --------------          --  (no expand, no dealloc, also has builtin typecheck)
;  1001     [32]
;  1002         --calling convention:
;  1003         --  mov edi,[idx]       (opUnassigned)
;  1004         --  mov ecx,[rep]       (opUnassigned) [must be char-sized]
;  1005         --  mov esi,[ref]       (opUnassigned) [must be string]
;  1006         --  lea eax,[ref]
;  1007         --  call :%pRepe1is     -- ref[idx]:=rep, aka esi[edi]:=cl
;  1008         sub edi,1                   -- idx -= 1
                sub edi,1                 ;#004609EC: 203357 01                  uv 80 80  1 355      
;  1009         mov edx,[ebx+esi*4-12]      -- get length
                mov edx,[ebx+esi*4-12]    ;#004609EF: 213124263 F4               vu 04 48  1 355      
;  1010         cmp [ma_ip],ebx
                cmp [#00402A2C] (ma_ip),ebx  ;#004609F3: 071035 2C2A4000            uv 00 08  2 356      
;  1011         jne :e52jsdnssd
                jne #0046067C             ;#004609F9: 017205 7DFCFFFF            v  00 00  1 357      
;  1012         cmp edi,edx                 -- if idx is -ve/float/oob then longhand
                cmp edi,edx               ;#004609FF: 071327                     uv 00 84  1 358      
;  1013         jb @f
                jb #00460A0C              ;#00460A01: 162 09                     v  00 00  1 358      
;  1014             push eax
                    push eax              ;#00460A03: 120                        uv 00 01  1 359      
;  1015 --17/4/16 undone:
;  1016 --20/6/16 (spotted in passing, opposite of several others that needed doing)
;  1017             mov al,4+0              -- [era] @ [esp+8] "assigning to"
                    mov al,4              ;#00460A04: 260 04                     vu 01 00  1 359      
;  1018 --          mov al,2+0              -- [era] @ [esp+4] "assigning to"
;  1019             call :%fixupIndex       -- idx-1 in edi, len in edx, not idx addr in ebx, al set
                    call #00460DED (:%fixupIndex)  ;#00460A06: 350 E2030000               v  00 00  1 360      
;  1020             pop eax
                    pop eax               ;#00460A0B: 130                        uv 01 00  1 361      
;  1021       @@:
;  1022         cmp ecx,255
                cmp ecx,255               ;#00460A0C: 201371 FF000000            vu 00 02  1 361      
;  1023         ja :e110Repe1is             -- type check error
                ja #00460675              ;#00460A12: 017207 5DFCFFFF            v  00 00  1 362      
;  1024         cmp dword[ebx+esi*4-8],1    -- if refcount!=1 then clone
                cmp dword[ebx+esi*4-8],1  ;#00460A18: 203174263 F8 01            u  00 48  2 363      
;  1025         jne :opRepe1isClone
                jne #00460A23             ;#00460A1D: 165 04                     v  00 00  1 364      
;  1026         mov [esi*4+edi],cl
                mov [edi+esi*4],cl        ;#00460A1F: 210014267                  uv 00 C2  1 365      
;  1027         ret
                ret                       ;#00460A22: 303                        np 00 00  2 366      
;  1028 
;  1029       ::opRepe1isClone
;  1030         -- esi is src ref (string), of refcount >1, (so just decref it)
;  1031         -- edi is idx-1,
;  1032         -- ecx is rep (an integer char)
;  1033         -- edx contains the original length
;  1034         -- eax is the new (non-0) refcount
;  1035         sub dword[ebx+esi*4-8],1    -- reduce refcount (non-0, dealloc not rqd)
                sub dword[ebx+esi*4-8],1  ;#00460A23: 203154263 F8 01            u  00 48  3 368      
;  1036         push ecx                    --[1] save rep
                push ecx                  ;#00460A28: 121                        vu 00 02  1 370      
;  1037         mov ecx,edx
                mov ecx,edx               ;#00460A29: 213312                     uv 02 04  1 371      
;  1038         mov edx,eax
                mov edx,eax               ;#00460A2B: 213320                     vu 04 01  1 371      
;  1039         call :%pAllocStr            -- damages eax only
                call #0046377D (:%pAllocStr)  ;#00460A2D: 350 4B2D0000               v  00 00  1 372      
;  1040         lea esi,[ebx+esi*4]
                lea esi,[ebx+esi*4]       ;#00460A32: 215064263                  uv 40 48  1 373      
;  1041 --DEV would    shl esi,2    be any better?
;  1042         mov [edx],eax               -- replace it now
                mov [edx],eax             ;#00460A35: 211002                     uv 00 05  1 375    *04*
;  1043         add ecx,1                   -- include trailing null in following rep movsb
                add ecx,1                 ;#00460A37: 203301 01                  vu 02 02  1 375      
;  1044         lea edx,[eax*4+edi]         -- replacement char location
                lea edx,[edi+eax*4]       ;#00460A3A: 215024207                  uv 04 81  1 376      
;  1045         lea edi,[ebx+eax*4]         -- raw(new)
                lea edi,[ebx+eax*4]       ;#00460A3D: 215074203                  vu 80 09  1 376      
;  1046         pop eax                     --[1] Replacement char
                pop eax                   ;#00460A40: 130                        uv 01 00  1 377      
;  1047         rep movsb
                rep movsb                 ;#00460A41: 363:244                    np C2 C2  4 379    *80*
;  1048         mov [edx],al
                mov [edx],al              ;#00460A43: 210002                     uv 00 05  1 383      
;  1049         ret
                ret                       ;#00460A45: 303                        np 00 00  2 384      
;  1050 
;  1051     [64]
;  1052         --calling convention:
;  1053         --  mov rdi,[idx]       (opUnassigned)
;  1054         --  mov rcx,[rep]       (opUnassigned) [must be char-sized]
;  1055         --  mov rsi,[ref]       (opUnassigned) [must be string]
;  1056         --  lea rax,[ref]
;  1057         --  call :%pRepe1is     -- ref[idx]:=rep, aka rsi[rdi]:=cl
;  1058         sub rdi,1                   -- idx -= 1
;  1059         mov rdx,[rbx+rsi*4-24]      -- get length
;  1060         cmp [ma_ip],rbx
;  1061         jne :e52jsdnssd
;  1062         cmp rdi,rdx                 -- if idx is -ve/float/oob then longhand
;  1063         jb @f
;  1064             push rax
;  1065 --17/4/17 undone:
;  1066 --20/6/16 (spotted in passing, opposite of several others that needed doing)
;  1067             mov al,4+0              -- [era] @ [rsp+16] "assigning to"
;  1068 --          mov al,2+0              -- [era] @ [esp+4] "assigning to"
;  1069             call :%fixupIndex       -- idx-1 in rdi, len in rdx, not idx addr in rbx, al set
;  1070             pop rax
;  1071       @@:
;  1072         cmp rcx,255
;  1073         ja :e110Repe1is             -- type check error
;  1074         cmp qword[rbx+rsi*4-16],1   -- if refcount!=1 then clone
;  1075         jne :opRepe1isClone
;  1076         mov [rsi*4+rdi],cl
;  1077         ret
;  1078 
;  1079       ::opRepe1isClone
;  1080         -- rsi is src ref (string), of refcount >1, (so just decref it)
;  1081         -- rdi is idx-1,
;  1082         -- rcx is rep (an integer char)
;  1083         -- rdx contains the original length
;  1084         -- rax is the new (non-0) refcount
;  1085         sub qword[rbx+rsi*4-16],1   -- reduce refcount (non-0, dealloc not rqd)
;  1086         push rcx                    --[1] save rep
;  1087         mov rcx,rdx
;  1088         mov rdx,rax
;  1089         call :%pAllocStr            -- damages rax only
;  1090         lea rsi,[rbx+rsi*4]
;  1091         mov [rdx],rax               -- replace it now
;  1092         add rcx,1                   -- include trailing null in following rep movsb
;  1093         lea rdx,[rax*4+rdi]         -- replacement char location
;  1094         lea rdi,[rbx+rax*4]         -- raw(new)
;  1095         pop rax                     --[1] Replacement char
;  1096         rep movsb
;  1097         mov [rdx],al
;  1098         ret
;  1099     []
;  1100 
;  1101     :%pDeSeqip          -- [ma_ip]:=e/rax. A multiple assigment (aka desequence/destructure)
;  1102 --------------          --                 operation is in progress under with js therefore
;  1103                         --                 string subscript (/replacements) are now illegal,
;  1104                         --                 that is at least when [ma_ip] is non-zero.
;  1105     [32]
;  1106         mov [ma_ip],eax
                mov [#00402A2C] (ma_ip),eax  ;#00460A46: 243 2C2A4000               uv 00 01  1 386      
;  1107     [64]
;  1108         mov [ma_ip],rax
;  1109     []
;  1110         jmp :%pDeSeqip2 -- and mirror the copy in pSubseN.e
                jmp #004610F5 (:%pDeSeqip2)  ;#00460A4B: 351 A5060000               v  00 00  1 386      
;  1111 
;  1112       }
;  1113 
    jmp #00462C8F (:%opRetf)              ;#00460A50: 351 3A220000               v  00 00  1 387      
;C:\Phix\builtins\VM\pRepsN.e:
;=============================
;     1 --
;     2 -- pRepsN.e
;     3 -- ========
;     4 --
;     5 --  The replace slice routine:
;     6 --
;     7 --      :%pReps             -- [eax][idx1]..[idxN..sliceend]:=rep
;     8 --
;     9 -- (There may be a case for some optimised forms, especially string[slicestart..sliceend]:=string and
;    10 --  possibly string[slicestart..sliceend]:=char, but I stongly doubt that pReps1 (similar to pRepe1)
;    11 --  would deliver any measurable gain, but /would/ be a significant size and maintenance overhead.
;    12 --  The first step would be to plant puts(1,"xxx") statements in pilx86.e to show when/if it can use
;    13 --  a new pRepss/pRepsch, before bothering to write them.)
;    14 --
;    15 -- Technical note:
;    16 --  This is perhaps the most complex/ctritical part of the VM (well, it is either this or pHeap.e).
;    17 --  It, alone, implements variable length slice assignment (eg "food"[2..3]:="e" -> "fed") as well
;    18 --  as over half (rest in pRepeN.e) of the auto-expansion of strings to dword-sequences. I should
;    19 --  note that it is extremely easy to study this for 10 minutes and then gleefully modify completely
;    20 --  the wrong block of code, or at least that has been my sad and sorry experience with it. ;-)
;    21 --  Throughout this source I have liberally scattered "current state of registers and stack" comments,
;    22 --  (5 registers and 7 stack entries) because without them this code would be absolutely impossible 
;    23 --  to write/maintain. However, they are extremely difficult to keep up to date, not least because it
;    24 --  is the same thing over and over again, but with ever-so-subtle differences, and should always be 
;    25 --  treated with deep suspicion. They are most useful not when reading the source, but when single-
;    26 --  stepping though the instructions in OllyDbg or similar. Please fix any slip-ups that you spot.
;    27 --
;    28 -- TODO:
;    29 --  check/add tests (t24slice) for eg 'x[1][2.2..5.9] = expr' giving the same results as 'x[1][2..5] = expr'.
;    30 --  lots of tests in terror
;    31 
;    32 include builtins\VM\pHeap.e     -- :%pDealloc, :%pAllocStr, :%pAllocSeq
;    33 
;    34 include builtins\VM\pFixup.e    -- negative and floating point index handling (:%fixupIndex)
;    35 
;    36 --26/8/22 (spotted in passing)
;    37 --#ilASM{ jmp :%opRetf
;    38 #ilASM{ jmp :!opCallOnceYeNot
                jmp :!opCallOnceYeNot     ;#0046017F: 351 6F260000               v  00 00  1   1      
;    39 
;    40 --DEV FIXME: (and the :!bang labels below)
;    41 --  ::e04atsaam4
;    42 ----            lea esp,[esp+ecx*4-4]
;    43 --      [32]
;    44 --          mov esi,[esp+ecx*4-4]   -- era
;    45 --      [64]
;    46 ----            mov rsi,[rsp+rcx*8-8]   -- era (DEV untested!)
;    47 --          mov rdx,[rsp+rcx*8+8]   -- era (DEV untested!)
;    48 --          sub rdx,1
;    49 --      []
;    50 --          mov al,4
;    51 --          jmp :!iDiag
;    52 --          int3
;    53 --  ::e04atsaa4
;    54 --          int3
;    55     ::e04atsaa9
;    56         [32]
;    57             mov esi,[esp+ecx*4+4]   -- era
                    mov esi,[esp+ecx*4+4]  ;#00460184: 213164214 04               uv 40 12  1   2      
;    58         [64]
;    59             mov rsi,[rsp+rcx*8+8]   -- era (DEV untested!)
;    60         []
;    61             mov al,4
                    mov al,4              ;#00460188: 260 04                     vu 01 00  1   2      
;    62 --          jmp :!iDiag
;    63             int3
                    int3                  ;#0046018A: 314                        np 00 00 13   3      
;    64     ::e09slinespp4
;    65         [32]
;    66             mov edx,[esp+16]        -- era
                    mov edx,[esp+16]      ;#0046018B: 213124044 10               uv 04 10  1  16      
;    67             mov ecx,[esp]           -- (edi already set)
                    mov ecx,[esp]         ;#0046018F: 213014044                  vu 02 10  1  16      
;    68             mov al,9                -- e09slin(edi,ecx)
                    mov al,9              ;#00460192: 260 09                     uv 01 00  1  17      
;    69             sub edx,1
                    sub edx,1             ;#00460194: 203352 01                  vu 04 04  1  17      
;    70         [64]
;    71             mov rdx,[rsp+32]        -- era
;    72             mov rcx,[rsp]           -- (rdi already set)
;    73             mov al,9                -- e09slin(rdi,rcx)
;    74             sub rdx,1
;    75         []
;    76             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00460197: 351 CD3C0000               v  00 00  1  18      
;    77             int3
                    int3                  ;#0046019C: 314                        np 00 00 13  19      
;    78     ::e04atsaa24
;    79             int3
                    int3                  ;#0046019D: 314                        np 00 00 13  32      
;    80 --/*
;    81 procedure :%pReps(:%)
;    82 end procedure -- (for Edita/CtrlQ)
;    83 --*/
;    84     :%pReps         -- [eax][idx1]..[idxN..sliceend]:=rep
;    85 -----------
;    86     [32]
;    87         --calling convention:
;    88         --  mov ecx,N
;    89         --  push <return address>
;    90         --  push [rep]          -- replacement (opUnassigned)
;    91         --  push [sliceend]     -- sliceend (opUnassigned)
;    92         --  push [idxN]..[idx1] -- (opUnassigned)
;    93         --  lea eax,[ref]       -- ref addr
;    94         --  jmp opReps          -- actually a call
;    95         --<return address>
;    96 
;    97       ::opRepsRnxt
;    98         mov esi,[eax]
                mov esi,[eax]             ;#0046019E: 213060                     uv 40 01  1  45      
;    99         pop edi                 -- next idx (ref)
                pop edi                   ;#004601A0: 137                        vu 80 00  1  45      
;   100         cmp esi,h4
                cmp esi,h4                ;#004601A1: 201376 00000040            uv 00 40  1  46      
;   101 --      jl :e04atsaam4          -- attempt to subscript an atom, era @ [esp+ecx*4-4]?
;   102         jg @f
                jg #004601B8              ;#004601A7: 177 0F                     v  00 00  1  46      
;   103             mov edx,[esp+ecx*4+4]   -- era
                    mov edx,[esp+ecx*4+4]  ;#004601A9: 213124214 04               uv 04 12  1  47      
;   104             mov al,4                -- e04atsaam4
                    mov al,4              ;#004601AD: 260 04                     vu 01 00  1  47      
;   105             sub edx,1
                    sub edx,1             ;#004601AF: 203352 01                  uv 04 04  1  48      
;   106             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#004601B2: 351 B23C0000               v  00 00  1  48      
;   107             int3
                    int3                  ;#004601B7: 314                        np 00 00 13  49      
;   108       @@:
;   109         push eax                --[1] ref addr, in case we need to clone...
                push eax                  ;#004601B8: 120                        uv 00 01  1  62      
;   110         mov al,[ebx+esi*4-1]
                mov al,[ebx+esi*4-1]      ;#004601B9: 212104263 FF               vu 01 48  1  62      
;   111         sub edi,1               -- decrement edi (:-)
                sub edi,1                 ;#004601BD: 203357 01                  uv 80 80  1  63      
;   112         mov edx,[ebx+esi*4-12]  -- length
                mov edx,[ebx+esi*4-12]    ;#004601C0: 213124263 F4               vu 04 48  1  63      
;   113         shl esi,2
                shl esi,2                 ;#004601C4: 301346 02                  u  40 40  1  64      
;   114 
;   115         sub ecx,1
                sub ecx,1                 ;#004601C7: 203351 01                  vu 02 02  1  64      
;   116         je :opRepsMain          -- deal with final slice separately
                je #00460226              ;#004601CA: 164 5A                     v  00 00  1  65      
;   117         cmp al,0x80
                cmp al,#80                ;#004601CC: 200370 80                  uv 00 01  1  66      
;   118         jne :e04atsaa9          -- must be seq since another idx (or the slice) follows, era * [esp+ecx*4+4]?
                jne #00460184             ;#004601CF: 165 B3                     v  00 00  1  66      
;   119 
;   120         cmp edi,edx
                cmp edi,edx               ;#004601D1: 071327                     uv 00 84  1  67      
;   121         jb @f                   -- unsigned jump, lets 0..len-1 through
                jb #004601DC              ;#004601D3: 162 07                     v  00 00  1  67      
;   122                                 --               (we just decremented edi)
;   123 --DEV +8..
;   124             mov al,8+4+0        -- [era] @ [esp+ecx*4+4], "assigning to"
                    mov al,12             ;#004601D5: 260 0C                     uv 01 00  1  68      
;   125             call :%fixupIndex   -- idx-1 in edi, len in edx, al set
                    call #00460DED (:%fixupIndex)  ;#004601D7: 350 110C0000               v  00 00  1  68      
;   126       @@:
;   127         --
;   128         -- edi now contains index to replace, and edx the length
;   129         --   
;   130         mov eax,[esi-8]         -- refcount
                mov eax,[esi-8]           ;#004601DC: 213106 F8                  uv 01 40  1  69      
;   131         sub eax,1
                sub eax,1                 ;#004601DF: 203350 01                  uv 01 01  1  70 01   
;   132         jz :opRepsSeqNoClone
                jz #0046021B              ;#004601E2: 164 37                     v  00 00  1  70      
;   133         mov [esi-8],eax         -- non-1 so no need to dealloc
                mov [esi-8],eax           ;#004601E4: 211106 F8                  uv 00 41  1  71      
;   134 --29/5/24:
;   135 --      mov eax,[esp+ecx*4+4]   -- era
;   136         mov eax,[esp+ecx*4+12]  -- era
                mov eax,[esp+ecx*4+12]    ;#004601E7: 213104214 0C               vu 01 12  1  71      
;   137         push ecx                --[2] no of remainding indexes
                push ecx                  ;#004601EB: 121                        uv 00 02  1  72      
;   138         push edi                --[3] idx
                push edi                  ;#004601EC: 127                        vu 00 80  1  72      
;   139         mov ecx,edx
                mov ecx,edx               ;#004601ED: 213312                     uv 02 04  1  73      
;   140         mov edi,[esp+8]         --[1] (ref addr, leaving it on the stack)
                mov edi,[esp+8]           ;#004601EF: 213174044 08               vu 80 10  1  73      
;   141         mov edx,eax             -- era
                mov edx,eax               ;#004601F3: 213320                     uv 04 01  1  74      
;   142         call :%pAlloClone
                call #00463814 (:%pAlloClone)  ;#004601F5: 350 1A360000               v  00 00  1  74      
;   143         call :%pAllocSeq        -- damages eax only
                call #00463832 (:%pAllocSeq)  ;#004601FA: 350 33360000               v  00 00  1  75      
;   144         mov [edi],eax           -- Replace ref at original address [no dealloc rqd]
                mov [edi],eax             ;#004601FF: 211007                     uv 00 81  1  76      
;   145         lea edi,[ebx+eax*4]
                lea edi,[ebx+eax*4]       ;#00460201: 215074203                  vu 80 09  1  76      
;   146         push edi                --[4]
                push edi                  ;#00460204: 127                        uv 00 80  1  77      
;   147       @@:
;   148             lodsd               -- mov eax,[esi], esi+=4
                    lodsd                 ;#00460205: 255                        np 41 40  2  78      
;   149             stosd               -- mov [edi],eax, edi+=4
                    stosd                 ;#00460206: 253                        np 80 81  3  80      
;   150             cmp eax,h4
                    cmp eax,h4            ;#00460207: 075 00000040               uv 00 01  1  83      
;   151             jl :opReps_no_incref
                    jl #00460213          ;#0046020C: 174 05                     v  00 00  1  83      
;   152                 add dword[ebx+eax*4-8],1
                        add dword[ebx+eax*4-8],1  ;#0046020E: 203104203 F8 01            u  00 09  3  84      
;   153           ::opReps_no_incref
;   154 
;   155             sub ecx,1
                    sub ecx,1             ;#00460213: 203351 01                  vu 02 02  1  86      
;   156             jnz @b
                    jnz #00460205         ;#00460216: 165 ED                     v  00 00  1  87      
;   157 
;   158         pop esi                 --[4] NB esi:=edi
                pop esi                   ;#00460218: 136                        uv 40 00  1  88      
;   159         pop edi                 --[3] idx
                pop edi                   ;#00460219: 137                        vu 80 00  1  88      
;   160         pop ecx                 --[2] no of remaining indexes
                pop ecx                   ;#0046021A: 131                        uv 02 00  1  89      
;   161       ::opRepsSeqNoClone
;   162         add esp,4               --[1] discard ref addr
                add esp,4                 ;#0046021B: 203304 04                  vu 10 10  1  89      
;   163         lea eax,[esi+edi*4]
                lea eax,[esi+edi*4]       ;#0046021E: 215004276                  uv 01 C0  1  90      
;   164         jmp :opRepsRnxt
                jmp #0046019E (:%pReps)   ;#00460221: 351 78FFFFFF               v  00 00  1  90      
;   165 
;   166       ::opRepsMain
;   167 ------------------
;   168         -- al type byte
;   169         -- ecx 0
;   170         -- edx length ref
;   171         -- esi raw ref
;   172         -- edi slice start (-1, pre fixup)
;   173         -- stack contents:
;   174         --  [esp]   ref addr (after several subcripts)
;   175         --  [esp+4] slice end (pre fixup)
;   176         --  [esp+8] rep ref
;   177         --  [esp+12] <return address>
;   178         test al,0x80
                test al,#80               ;#00460226: 250 80                     uv 00 01  1  91      
;   179 --      jz :e04atsaa4
;   180         jnz @f
                jnz #00460239             ;#00460228: 165 0F                     v  00 00  1  91      
;   181             mov edx,[esp+12]
                    mov edx,[esp+12]      ;#0046022A: 213124044 0C               uv 04 10  1  92      
;   182             mov al,4    -- e04atasaa
                    mov al,4              ;#0046022E: 260 04                     vu 01 00  1  92      
;   183             sub edx,1
                    sub edx,1             ;#00460230: 203352 01                  uv 04 04  1  93      
;   184             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#00460233: 351 313C0000               v  00 00  1  93      
;   185             int3
                    int3                  ;#00460238: 314                        np 00 00 13  94      
;   186       @@:
;   187         cmp edi,edx
                cmp edi,edx               ;#00460239: 071327                     uv 00 84  1 107      
;   188         jbe @f                  -- unsigned jump, lets 0..len through (NB jbe here)
                jbe #00460244             ;#0046023B: 166 07                     v  00 00  1 107      
;   189                                 --               (we just decremented edi)
;   190                                 --               (slice start can be 1..length+1)
;   191 --DEV +12
;   192 --          mov cl,8                -- [era] @ [esp+8]
;   193             mov cl,16               -- [era] @ [esp+8]
                    mov cl,16             ;#0046023D: 261 10                     uv 02 00  1 108      
;   194             call :%fixupSliceStart  -- idx in edi, len in edx
                    call :%fixupSliceStart  ;#0046023F: 350 050C0000               v  00 00  1 108      
;   195       @@:
;   196         push edi                -- save slice start (0-based)
                push edi                  ;#00460244: 127                        uv 00 80  1 109      
;   197         mov edi,[esp+8]         -- slice end
                mov edi,[esp+8]           ;#00460245: 213174044 08               vu 80 10  1 109      
;   198         cmp edi,edx
                cmp edi,edx               ;#00460249: 071327                     uv 00 84  1 110      
;   199         jbe @f                  -- unsigned jump, lets 0..len through (NB jbe here, and no dec edi)
                jbe #00460258             ;#0046024B: 166 0B                     v  00 00  1 110      
;   200                                 --               (slice end can be 0..length)
;   201 --DEV 16
;   202 --          mov cl,12               -- [era] @ [esp+12]
;   203             mov cl,20               -- [era] @ [esp+20]
                    mov cl,20             ;#0046024D: 261 14                     uv 02 00  1 111      
;   204             call :%fixupSliceEnd    -- idx in edi, len in edx, idx addr in ebx
                    call #00460E9F (:%fixupSliceEnd)  ;#0046024F: 350 4B0C0000               v  00 00  1 111      
;   205             mov [esp+8],edi         -- save normalised slice end (1-based)
                    mov [esp+8],edi       ;#00460254: 211174044 08               uv 00 90  1 112      
;   206       @@:
;   207         mov ecx,edi
                mov ecx,edi               ;#00460258: 213317                     vu 02 80  1 112      
;   208         sub ecx,[esp]
                sub ecx,[esp]             ;#0046025A: 053014044                  uv 02 12  2 113      
;   209         jl :e09slinespp4        -- slice length is negative (%d..%d)
                jl #0046018B              ;#0046025D: 017214 28FFFFFF            v  00 00  1 114      
;   210         push ecx                -- save slice length
                push ecx                  ;#00460263: 121                        uv 00 02  1 115      
;   211         push edx                -- save source (ref) length
                push edx                  ;#00460264: 122                        vu 00 04  1 115      
;   212         mov edi,[esp+20]        -- rep ref
                mov edi,[esp+20]          ;#00460265: 213174044 14               uv 80 10  1 116      
;   213         --
;   214         --  al: type byte ([esi-1])
;   215         --  ecx: slice length [also in esp+4]
;   216         --  edx: ref length [also in esp]
;   217         --  edi: rep ref
;   218         --  esi: raw(ref)
;   219         --  [esp] ref length
;   220         --  [esp+4] slice length
;   221         --  [esp+8] slice start (0-based)
;   222         --  [esp+12] ref addr
;   223         --  [esp+16] slice end (1-based)
;   224         --  [esp+20] rep ref
;   225         --  [esp+24] return addr
;   226         --
;   227         -- handle sequence and string slices separately...
;   228         --
;   229         cmp al,0x80
                cmp al,#80                ;#00460269: 200370 80                  vu 00 01  1 116      
;   230         jne :opRepsStr
                jne #00460499             ;#0046026C: 017205 27020000            v  00 00  1 117      
;   231             --
;   232             -- check for insitu replacement
;   233             --
;   234             cmp dword[esi-8],1
                    cmp dword[esi-8],1    ;#00460272: 203176 F8 01               u  00 40  2 118      
;   235             jne :opRepsSeqMultiRef
                    jne #0046033F         ;#00460276: 017205 C3000000            v  00 00  1 119      
;   236             --
;   237             -- which is ok for atoms...
;   238             --
;   239             cmp edi,h4
                    cmp edi,h4            ;#0046027C: 201377 00000040            uv 00 80  1 120      
;   240             jl @f
                    jl #00460292          ;#00460282: 174 0E                     v  00 00  1 120      
;   241                 lea eax,[ebx+edi*4]
                        lea eax,[ebx+edi*4]  ;#00460284: 215004273                  uv 01 88  1 121      
;   242                 test byte[ebx+edi*4-1],0x80
                        test byte[ebx+edi*4-1],#80  ;#00460287: 366104273 FF 80            u  00 88  2 122      
;   243                 jnz :opRepsSeqSeq
                        jnz #004602C6     ;#0046028C: 165 38                     v  00 00  1 123      
;   244                 add dword[ebx+edi*4-8],ecx  -- bulk ref update (float)
                        add [ebx+edi*4-8],ecx  ;#0046028E: 001114273 F8               uv 00 8A  3 124      
;   245           @@:                       -- replacement is an atom
;   246             mov edx,[esp+8]         -- slice start
                    mov edx,[esp+8]       ;#00460292: 213124044 08               vu 04 10  1 126      
;   247             cmp ecx,0               -- check for zero length slice replacement
                    cmp ecx,0             ;#00460296: 203371 00                  uv 00 02  1 127      
;   248             je :opRepsPop6          -- do nothing case
                    je #004602C2          ;#00460299: 164 27                     v  00 00  1 127      
;   249             mov eax,edi
                    mov eax,edi           ;#0046029B: 213307                     uv 01 80  1 128      
;   250 --          lea edi,[esi+edx*4-4]
;   251             lea edi,[esi+edx*4]
                    lea edi,[esi+edx*4]   ;#0046029D: 215074226                  vu 80 44  1 128      
;   252           ::opRepsSeqAtomLoop
;   253             mov edx,[edi]
                    mov edx,[edi]         ;#004602A0: 213027                     uv 04 80  1 131    *80*
;   254             cmp edx,h4
                    cmp edx,h4            ;#004602A2: 201372 00000040            uv 00 04  1 132 04   
;   255             jle @f
                    jle #004602BC         ;#004602A8: 176 12                     v  00 00  1 132      
;   256                 sub dword[ebx+edx*4-8],1
                        sub dword[ebx+edx*4-8],1  ;#004602AA: 203154223 F8 01            u  00 0C  3 133      
;   257                 jnz @f
                        jnz #004602BC     ;#004602AF: 165 0B                     v  00 00  1 135      
;   258                     pushad
                            pushad        ;#004602B1: 140                        np 00 FF  5 136      
;   259 --                if debugmem2
;   260 --                  mov eax,[esp+52]    -- (untested!)
;   261 --                  mov [dmFera],eax
;   262 --                end if
;   263                     push dword[esp+56]
                            push dword[esp+56]  ;#004602B2: 377164044 38               np 00 10  2 141      
;   264                     call :%pDealloc0
                            call #004639AB (:%pDealloc0)  ;#004602B6: 350 F0360000               v  00 00  1 143      
;   265                     popad
                            popad         ;#004602BB: 141                        np FF 00  5 144      
;   266           @@:
;   267             stosd                   -- mov [edi],eax, edi+=4
                    stosd                 ;#004602BC: 253                        np 80 81  3 150    *80*
;   268             sub ecx,1
                    sub ecx,1             ;#004602BD: 203351 01                  uv 02 02  1 153      
;   269             jnz :opRepsSeqAtomLoop
                    jnz #004602A0         ;#004602C0: 165 DE                     v  00 00  1 153      
;   270 
;   271       ::opRepsPop6
;   272 ------------------
;   273             add esp,24
                    add esp,24            ;#004602C2: 203304 18                  uv 10 10  1 154      
;   274             ret
                    ret                   ;#004602C5: 303                        np 00 00  2 155      
;   275 
;   276       ::opRepsSeqSeq
;   277 --------------------
;   278             --
;   279             -- .. and sequences of the same length
;   280             --
;   281             cmp dword[eax-12],ecx
                    cmp [eax-12],ecx      ;#004602C6: 071110 F4                  uv 00 03  2 157      
;   282             jne :opRepsSeqMRSeqStr
                    jne #004603E3         ;#004602C9: 017205 14010000            v  00 00  1 158      
;   283             cmp ecx,0
                    cmp ecx,0             ;#004602CF: 203371 00                  uv 00 02  1 159      
;   284             je :opRepsPop6          -- eg x[2..1]={}/"", do nothing case
                    je #004602C2          ;#004602D2: 164 EE                     v  00 00  1 159      
;   285             --
;   286             --  eax: raw(edi)
;   287             --  ecx: slice length [also in esp+4] (!=0)
;   288             --  edx: ref length [also in esp]
;   289             --  edi: rep ref (a sequence/string of length ecx)
;   290             --  esi: raw(ref) (a dword-sequence)
;   291             --  [esp] ref length
;   292             --  [esp+4] slice length
;   293             --  [esp+8] slice start (0-based)
;   294             --  [esp+12] ref addr
;   295             --  [esp+16] slice end (1-based)
;   296             --  [esp+20] rep ref
;   297             --  [esp+24] return addr
;   298             --
;   299             mov edx,[esp+8]             -- slice start
                    mov edx,[esp+8]       ;#004602D4: 213124044 08               uv 04 10  1 160      
;   300             mov edi,esi                 -- raw(ref)
                    mov edi,esi           ;#004602D8: 213376                     vu 80 40  1 160      
;   301             mov esi,eax                 -- raw(rep)
                    mov esi,eax           ;#004602DA: 213360                     uv 40 01  1 161      
;   302             cmp byte[eax-1],0x80
                    cmp byte[eax-1],#80   ;#004602DC: 200170 FF 80               u  00 01  2 162      
;   303 --5/2/15:
;   304 --          lea edi,[edi+edx*4-4]       -- addr ref[slice start]
;   305             lea edi,[edi+edx*4]         -- addr ref[slice start]
                    lea edi,[edi+edx*4]   ;#004602E0: 215074227                  vu 80 84  1 163      
;   306             jne :opRepsSeqStr
                    jne #00460316         ;#004602E3: 165 31                     v  00 00  1 164      
;   307           ::opRepsSeqSeqLoop
;   308                 lodsd                       -- mov eax,[esi], esi+=4
                        lodsd             ;#004602E5: 255                        np 41 40  2 165      
;   309                 cmp eax,h4
                        cmp eax,h4        ;#004602E6: 075 00000040               uv 00 01  1 167      
;   310                 jl @f
                        jl #004602F2      ;#004602EB: 174 05                     v  00 00  1 167      
;   311                     add dword[ebx+eax*4-8],1
                            add dword[ebx+eax*4-8],1  ;#004602ED: 203104203 F8 01            u  00 09  3 168      
;   312               @@:
;   313                 mov edx,[edi]
                        mov edx,[edi]     ;#004602F2: 213027                     vu 04 80  1 170      
;   314                 cmp edx,h4
                        cmp edx,h4        ;#004602F4: 201372 00000040            uv 00 04  1 171      
;   315                 jle @f
                        jle #0046030E     ;#004602FA: 176 12                     v  00 00  1 171      
;   316                     sub dword[ebx+edx*4-8],1
                            sub dword[ebx+edx*4-8],1  ;#004602FC: 203154223 F8 01            u  00 0C  3 172      
;   317                     jnz @f
                            jnz #0046030E  ;#00460301: 165 0B                     v  00 00  1 174      
;   318                         pushad
                                pushad    ;#00460303: 140                        np 00 FF  5 175      
;   319 --                    if debugmem2
;   320 --                      mov eax,[esp+52]    -- as above
;   321 --                      mov [dmFera],eax
;   322 --                    end if
;   323                         push dword[esp+56]
                                push dword[esp+56]  ;#00460304: 377164044 38               np 00 10  2 180      
;   324                         call :%pDealloc0
                                call #004639AB (:%pDealloc0)  ;#00460308: 350 9E360000               v  00 00  1 182      
;   325                         popad
                                popad     ;#0046030D: 141                        np FF 00  5 183      
;   326               @@:
;   327                 stosd                   -- mov [edi],eax, edi+=4
                        stosd             ;#0046030E: 253                        np 80 81  3 189    *80*
;   328                 sub ecx,1
                        sub ecx,1         ;#0046030F: 203351 01                  uv 02 02  1 192      
;   329                 jnz :opRepsSeqSeqLoop
                        jnz #004602E5     ;#00460312: 165 D1                     v  00 00  1 192      
;   330             jmp :opRepsPop6
                    jmp #004602C2         ;#00460314: 353 AC                     v  00 00  1 193      
;   331 
;   332       ::opRepsSeqStr
;   333 --------------------
;   334             --
;   335             --  eax: raw(edi)
;   336             --  ecx: slice length [also in esp+4] (!=0)
;   337             --  edx: slice start [also in esp+8]
;   338             --  edi: addr ref[slice start]
;   339             --  esi: raw(rep) (a dword-sequence)
;   340             --  [esp] ref length
;   341             --  [esp+4] slice length
;   342             --  [esp+8] slice start (0-based)
;   343             --  [esp+12] ref addr
;   344             --  [esp+16] slice end (1-based)
;   345             --  [esp+20] rep ref
;   346             --  [esp+24] return addr
;   347             --
;   348             xor eax,eax
                    xor eax,eax           ;#00460316: 061300                     uv 01 01  1 194      
;   349           ::opRepsSeqStrLoop
;   350                 mov edx,[edi]
                        mov edx,[edi]     ;#00460318: 213027                     vu 04 80  1 194      
;   351                 lodsb                   -- mov al,[esi], esi+=1
                        lodsb             ;#0046031A: 254                        np 41 40  2 195      
;   352                 cmp edx,h4
                        cmp edx,h4        ;#0046031B: 201372 00000040            uv 00 04  1 197      
;   353                 jle @f
                        jle #00460335     ;#00460321: 176 12                     v  00 00  1 197      
;   354                     sub dword[ebx+edx*4-8],1
                            sub dword[ebx+edx*4-8],1  ;#00460323: 203154223 F8 01            u  00 0C  3 198      
;   355                     jnz @f
                            jnz #00460335  ;#00460328: 165 0B                     v  00 00  1 200      
;   356                         pushad
                                pushad    ;#0046032A: 140                        np 00 FF  5 201      
;   357 --                    if debugmem2
;   358 --                      mov eax,[esp+52]    -- as above*2
;   359 --                      mov [dmFera],eax
;   360 --                    end if
;   361                         push dword[esp+56]
                                push dword[esp+56]  ;#0046032B: 377164044 38               np 00 10  2 206      
;   362                         call :%pDealloc0
                                call #004639AB (:%pDealloc0)  ;#0046032F: 350 77360000               v  00 00  1 208      
;   363                         popad
                                popad     ;#00460334: 141                        np FF 00  5 209      
;   364               @@:
;   365                 stosd                   -- mov [edi],eax, edi+=4
                        stosd             ;#00460335: 253                        np 80 81  3 215    *80*
;   366                 sub ecx,1
                        sub ecx,1         ;#00460336: 203351 01                  uv 02 02  1 218      
;   367                 jnz :opRepsSeqStrLoop
                        jnz #00460318     ;#00460339: 165 DD                     v  00 00  1 218      
;   368 
;   369 --          jmp :opRepsPop6
;   370             add esp,24
                    add esp,24            ;#0046033B: 203304 18                  uv 10 10  1 219      
;   371             ret
                    ret                   ;#0046033E: 303                        np 00 00  2 220      
;   372 
;   373       ::opRepsSeqMultiRef
;   374 -------------------------
;   375             --
;   376             --  al: type byte ([esi-1])
;   377             --  ecx: slice length [also in esp+4]
;   378             --  edx: ref length [also in esp]
;   379             --  edi: rep ref [also in esp+20]
;   380             --  esi: raw(ref) (dword_sequence, refcount>1)
;   381             --  [esp] ref length
;   382             --  [esp+4] slice length
;   383             --  [esp+8] slice start (0-based)
;   384             --  [esp+12] ref addr
;   385             --  [esp+16] slice end (1-based)
;   386             --  [esp+20] rep ref
;   387             --  [esp+24] return addr
;   388             --
;   389             --
;   390             -- ok, how big does this thing have to be?
;   391             --
;   392             -- In the case of an atom, same as source...
;   393             --
;   394             cmp edi,h4
                    cmp edi,h4            ;#0046033F: 201377 00000040            uv 00 80  1 222      
;   395             jl @f
                    jl #00460355          ;#00460345: 174 0E                     v  00 00  1 222      
;   396                 lea eax,[ebx+edi*4]
                        lea eax,[ebx+edi*4]  ;#00460347: 215004273                  uv 01 88  1 223      
;   397                 test byte[ebx+edi*4-1],0x80
                        test byte[ebx+edi*4-1],#80  ;#0046034A: 366104273 FF 80            u  00 88  2 224      
;   398                 jnz :opRepsSeqMRSeqStrClone
                        jnz #004603CD     ;#0046034F: 165 7C                     v  00 00  1 225      
;   399                 add dword[ebx+edi*4-8],ecx    -- bulk ref update (float)
                        add [ebx+edi*4-8],ecx  ;#00460351: 001114273 F8               uv 00 8A  3 226      
;   400           @@:                       -- replacement is an atom
;   401             cmp ecx,0               -- check for zero length slice replacement
                    cmp ecx,0             ;#00460355: 203371 00                  vu 00 02  1 228      
;   402             je :opRepsPop6          -- do nothing case
                    je #004602C2          ;#00460358: 017204 64FFFFFF            v  00 00  1 229      
;   403             mov ecx,edx
                    mov ecx,edx           ;#0046035E: 213312                     uv 02 04  1 230      
;   404             mov edx,[esp+24]        -- era
                    mov edx,[esp+24]      ;#00460360: 213124044 18               vu 04 10  1 230      
;   405             mov edi,[esp+12]        -- addr ref
                    mov edi,[esp+12]      ;#00460364: 213174044 0C               uv 80 10  1 231      
;   406             call :%pAlloClone
                    call #00463814 (:%pAlloClone)  ;#00460368: 350 A7340000               v  00 00  1 231      
;   407             call :%pAllocSeq        -- damages eax only
                    call #00463832 (:%pAllocSeq)  ;#0046036D: 350 C0340000               v  00 00  1 232      
;   408             mov [edi],eax           -- Replace the ref at the original address
                    mov [edi],eax         ;#00460372: 211007                     uv 00 81  1 233      
;   409             sub dword[esi-8],1      -- non-1 so no need to dealloc
                    sub dword[esi-8],1    ;#00460374: 203156 F8 01               u  00 40  3 234      
;   410             lea edi,[ebx+eax*4]
                    lea edi,[ebx+eax*4]   ;#00460378: 215074203                  vu 80 09  1 236      
;   411             --
;   412             -- duplicate original items before the slice
;   413             --
;   414 --          mov ecx,[esp+12]                -- slice start
;   415             mov ecx,[esp+8]         -- slice start (0-based)
                    mov ecx,[esp+8]       ;#0046037B: 213114044 08               uv 02 10  1 237      
;   416 --          sub ecx,1
;   417             test ecx,ecx
                    test ecx,ecx          ;#0046037F: 205311                     uv 00 02  1 238 02   
;   418             jz :opRepsSeqMRAmid
                    jz #00460396          ;#00460381: 164 13                     v  00 00  1 238      
;   419           ::opRepsSeqMRAtomBeforeLoop
;   420                 lodsd                           -- mov eax,[esi], esi+=4
                        lodsd             ;#00460383: 255                        np 41 40  2 239      
;   421                 stosd                           -- mov [edi],eax, edi+=4
                        stosd             ;#00460384: 253                        np 80 81  3 241      
;   422                 cmp eax,h4
                        cmp eax,h4        ;#00460385: 075 00000040               uv 00 01  1 244      
;   423                 jl @f
                        jl #00460391      ;#0046038A: 174 05                     v  00 00  1 244      
;   424                     add dword[ebx+eax*4-8],1    -- exception should never happen (we are cloning)
                            add dword[ebx+eax*4-8],1  ;#0046038C: 203104203 F8 01            u  00 09  3 245      
;   425               @@:
;   426                 sub ecx,1
                        sub ecx,1         ;#00460391: 203351 01                  vu 02 02  1 247      
;   427                 jnz :opRepsSeqMRAtomBeforeLoop
                        jnz #00460383     ;#00460394: 165 ED                     v  00 00  1 248      
;   428 
;   429             --
;   430             -- blat slice area with atom
;   431             --
;   432           ::opRepsSeqMRAmid
;   433 ---------------------------
;   434             mov eax,[esp+20]        -- rep ref 
                    mov eax,[esp+20]      ;#00460396: 213104044 14               uv 01 10  1 249      
;   435             mov ecx,[esp+4]         -- slice len
                    mov ecx,[esp+4]       ;#0046039A: 213114044 04               vu 02 10  1 249      
;   436             rep stosd
                    rep stosd             ;#0046039E: 363:253                    np 82 83  3 250      
;   437             --
;   438             -- duplicate remaining original items
;   439             --
;   440             mov ecx,[esp]           -- original source ref length
                    mov ecx,[esp]         ;#004603A0: 213014044                  uv 02 10  1 253      
;   441 --erm 17/11/14:
;   442 --          mov eax,[esp+8]         -- slice end
;   443             mov eax,[esp+16]        -- slice end
                    mov eax,[esp+16]      ;#004603A3: 213104044 10               vu 01 10  1 253      
;   444             sub ecx,eax
                    sub ecx,eax           ;#004603A7: 051301                     uv 02 03  1 254      
;   445             jz :opRepsPop6
                    jz #004602C2          ;#004603A9: 017204 13FFFFFF            v  00 00  1 254      
;   446             mov eax,[esp+4]         -- slice length
                    mov eax,[esp+4]       ;#004603AF: 213104044 04               uv 01 10  1 255      
;   447 --15/2/18:
;   448 --          lea esi,[esi+eax*4-4]
;   449             lea esi,[esi+eax*4]
                    lea esi,[esi+eax*4]   ;#004603B3: 215064206                  uv 40 41  1 258 01 *01*
;   450           ::opRepsSeqMRAtomAfterLoop
;   451                 lodsd                       -- mov eax,[esi], esi+=4
                        lodsd             ;#004603B6: 255                        np 41 40  2 261    *40*
;   452                 stosd                       -- mov [edi],eax, edi+=4
                        stosd             ;#004603B7: 253                        np 80 81  3 263      
;   453                 cmp eax,h4
                        cmp eax,h4        ;#004603B8: 075 00000040               uv 00 01  1 266      
;   454                 jl @f
                        jl #004603C4      ;#004603BD: 174 05                     v  00 00  1 266      
;   455                     add dword[ebx+eax*4-8],1            -- exception should never happen (we are cloning)
                            add dword[ebx+eax*4-8],1  ;#004603BF: 203104203 F8 01            u  00 09  3 267      
;   456               @@:
;   457                 sub ecx,1
                        sub ecx,1         ;#004603C4: 203351 01                  vu 02 02  1 269      
;   458                 jnz :opRepsSeqMRAtomAfterLoop
                        jnz #004603B6     ;#004603C7: 165 ED                     v  00 00  1 270      
;   459 --          jmp :opRepsPop6
;   460             add esp,24
                    add esp,24            ;#004603C9: 203304 18                  uv 10 10  1 271      
;   461             ret
                    ret                   ;#004603CC: 303                        np 00 00  2 272      
;   462 
;   463       ::opRepsSeqMRSeqStrClone
;   464             sub edx,ecx                 -- original length-slicelength
                    sub edx,ecx           ;#004603CD: 051312                     uv 04 06  1 274      
;   465             mov ecx,dword[eax-12]       -- replacement length
                    mov ecx,[eax-12]      ;#004603CF: 213110 F4                  vu 02 01  1 274      
;   466             add ecx,edx
                    add ecx,edx           ;#004603D2: 001321                     uv 02 06  1 275      
;   467             mov edi,[esp+12]            -- addr ref
                    mov edi,[esp+12]      ;#004603D4: 213174044 0C               vu 80 10  1 275      
;   468             mov edx,[esp+24]            -- era
                    mov edx,[esp+24]      ;#004603D8: 213124044 18               uv 04 10  1 276      
;   469             call :%pAlloClone
                    call #00463814 (:%pAlloClone)  ;#004603DC: 350 33340000               v  00 00  1 276      
;   470             jmp @f
                    jmp #004603F2         ;#004603E1: 353 0F                     v  00 00  1 277      
;   471 
;   472       ::opRepsSeqMRSeqStr
;   473 -------------------------
;   474             --
;   475             --  eax: raw(edi)
;   476             --  ecx: slice length [also in esp+4]
;   477             --  edx: ref length [also in esp]
;   478             --  edi: rep ref (a sequence/string) [also in esp+20]
;   479             --  esi: raw(ref) (a dword-sequence)
;   480             --  [esp] ref length
;   481             --  [esp+4] slice length
;   482             --  [esp+8] slice start (0-based)
;   483             --  [esp+12] ref addr (becomes original ref rsn)
;   484             --  [esp+16] slice end (1-based)
;   485             --  [esp+20] rep ref (becomes ref[sliceend+1] rsn)
;   486             --  [esp+24] return addr
;   487             --
;   488             --
;   489             -- .. in the case of a string/sequence rep, the required length is:
;   490             --
;   491             sub edx,ecx                 -- original length-slicelength
                    sub edx,ecx           ;#004603E3: 051312                     uv 04 06  1 278      
;   492             mov ecx,dword[eax-12]       -- replacement length
                    mov ecx,[eax-12]      ;#004603E5: 213110 F4                  vu 02 01  1 278      
;   493             add ecx,edx
                    add ecx,edx           ;#004603E8: 001321                     uv 02 06  1 279      
;   494 --          mov edx,[esp+12]            -- addr ref
;   495             mov edi,[esp+12]            -- addr ref
                    mov edi,[esp+12]      ;#004603EA: 213174044 0C               vu 80 10  1 279      
;   496             mov edx,[esp+24]            -- era
                    mov edx,[esp+24]      ;#004603EE: 213124044 18               uv 04 10  1 280      
;   497           @@:
;   498             call :%pAllocSeq            -- damages eax only
                    call #00463832 (:%pAllocSeq)  ;#004603F2: 350 3B340000               v  00 00  1 280      
;   499 --          mov edi,[edx]               -- original ref
;   500             mov edx,[edi]               -- original ref
                    mov edx,[edi]         ;#004603F7: 213027                     uv 04 80  1 281      
;   501             mov ecx,[esp+8]             -- slice start (0-based)
                    mov ecx,[esp+8]       ;#004603F9: 213114044 08               vu 02 10  1 281      
;   502 --          mov [esp+12],edi            -- decref/dealloc at end (opRepsPop6da)
;   503             mov [esp+12],edx            -- decref/dealloc at end (opRepsPop6da)
                    mov [esp+12],edx      ;#004603FD: 211124044 0C               uv 00 14  1 282      
;   504 --          mov [edx],eax               -- Replace the ref at the original address
;   505             mov [edi],eax               -- Replace the ref at the original address
                    mov [edi],eax         ;#00460401: 211007                     vu 00 81  1 282      
;   506 
;   507             lea edi,[ebx+eax*4]
                    lea edi,[ebx+eax*4]   ;#00460403: 215074203                  uv 80 09  1 283      
;   508             mov edx,[esp+4]             -- slice length (for opRepsSeqMRSmid)
                    mov edx,[esp+4]       ;#00460406: 213124044 04               vu 04 10  1 283      
;   509             --
;   510             -- duplicate original items before the slice
;   511             --
;   512 --          sub ecx,1
;   513             test ecx,ecx
                    test ecx,ecx          ;#0046040A: 205311                     uv 00 02  1 284      
;   514             jz opRepsSeqMRSmid
                    jz #00460421          ;#0046040C: 164 13                     v  00 00  1 284      
;   515           ::opRepsSeqMRSeqBeforeLoop
;   516                 lodsd                   -- mov eax,[esi], esi+=4
                        lodsd             ;#0046040E: 255                        np 41 40  2 285      
;   517                 stosd                   -- mov [edi],eax, edi+=4
                        stosd             ;#0046040F: 253                        np 80 81  3 287      
;   518                 cmp eax,h4
                        cmp eax,h4        ;#00460410: 075 00000040               uv 00 01  1 290      
;   519                 jl @f
                        jl #0046041C      ;#00460415: 174 05                     v  00 00  1 290      
;   520                     add dword[ebx+eax*4-8],1    -- exception should never happen (we are cloning)
                            add dword[ebx+eax*4-8],1  ;#00460417: 203104203 F8 01            u  00 09  3 291      
;   521               @@:
;   522                 sub ecx,1
                        sub ecx,1         ;#0046041C: 203351 01                  vu 02 02  1 293      
;   523                 jnz :opRepsSeqMRSeqBeforeLoop
                        jnz #0046040E     ;#0046041F: 165 ED                     v  00 00  1 294      
;   524 
;   525             --
;   526             -- slice area is either from sequence or string...
;   527             --
;   528           ::opRepsSeqMRSmid
;   529 ---------------------------
;   530             lea ecx,[esi+edx*4]         -- ref[end slice+1]
                    lea ecx,[esi+edx*4]   ;#00460421: 215014226                  uv 02 44  1 295      
;   531             mov esi,[esp+20]            -- rep ref
                    mov esi,[esp+20]      ;#00460424: 213164044 14               vu 40 10  1 295      
;   532             mov [esp+20],ecx            -- ref[end slice+1]
                    mov [esp+20],ecx      ;#00460428: 211114044 14               uv 00 12  1 296      
;   533             shl esi,2
                    shl esi,2             ;#0046042C: 301346 02                  u  40 40  1 297      
;   534             mov ecx,[esi-12]            -- rep length
                    mov ecx,[esi-12]      ;#0046042F: 213116 F4                  uv 02 40  1 300 40 *40*
;   535             cmp ecx,0
                    cmp ecx,0             ;#00460432: 203371 00                  uv 00 02  1 301 02   
;   536             je :opRepsSeqMRmidDone
                    je #0046045C          ;#00460435: 164 25                     v  00 00  1 301      
;   537             cmp byte[esi-1],0x80
                    cmp byte[esi-1],#80   ;#00460437: 200176 FF 80               u  00 40  2 302      
;   538             jne :opRepsSeqMRmidStr
                    jne #00460453         ;#0046043B: 165 16                     v  00 00  1 303      
;   539             -- copy seq elements one by one into middle of new sequence
;   540           ::opRepsSeqMRSeqLoop
;   541                 lodsd                   -- mov eax,[esi], esi+=4
                        lodsd             ;#0046043D: 255                        np 41 40  2 304      
;   542                 stosd                   -- mov [edi],eax, edi+=4
                        stosd             ;#0046043E: 253                        np 80 81  3 306      
;   543                 cmp eax,h4
                        cmp eax,h4        ;#0046043F: 075 00000040               uv 00 01  1 309      
;   544                 jl @f
                        jl #0046044B      ;#00460444: 174 05                     v  00 00  1 309      
;   545                     add dword[ebx+eax*4-8],1    -- exception should never happen (we are cloning)
                            add dword[ebx+eax*4-8],1  ;#00460446: 203104203 F8 01            u  00 09  3 310      
;   546               @@:
;   547                 sub ecx,1
                        sub ecx,1         ;#0046044B: 203351 01                  vu 02 02  1 312      
;   548                 jnz :opRepsSeqMRSeqLoop
                        jnz #0046043D     ;#0046044E: 165 ED                     v  00 00  1 313      
;   549             nop
                    nop                   ;#00460450: 220                        uv 00 00  1 314      
;   550             jmp :opRepsSeqMRmidDone
                    jmp #0046045C         ;#00460451: 353 09                     v  00 00  1 314      
;   551 
;   552           ::opRepsSeqMRmidStr
;   553 -----------------------------
;   554             -- copy string chars one by one into middle of new sequence
;   555             xor eax,eax
                    xor eax,eax           ;#00460453: 061300                     uv 01 01  1 315      
;   556           @@:
;   557                 lodsb                   -- mov al,[esi], esi+=1
                        lodsb             ;#00460455: 254                        np 41 40  2 316      
;   558                 stosd                   -- mov [edi],eax, edi+=4
                        stosd             ;#00460456: 253                        np 80 81  3 318      
;   559                 sub ecx,1
                        sub ecx,1         ;#00460457: 203351 01                  uv 02 02  1 321      
;   560                 jnz @b
                        jnz #00460455     ;#0046045A: 165 F9                     v  00 00  1 321      
;   561 
;   562           ::opRepsSeqMRmidDone
;   563 ------------------------------
;   564             --
;   565             -- duplicate remaining original items
;   566             --
;   567             mov ecx,[esp]               -- original source ref length
                    mov ecx,[esp]         ;#0046045C: 213014044                  uv 02 10  1 322      
;   568             mov eax,[esp+16]            -- slice end
                    mov eax,[esp+16]      ;#0046045F: 213104044 10               vu 01 10  1 322      
;   569             sub ecx,eax
                    sub ecx,eax           ;#00460463: 051301                     uv 02 03  1 323      
;   570             jz :opRepsPop6da
                    jz #0046047E          ;#00460465: 164 17                     v  00 00  1 323      
;   571             mov esi,[esp+20]            -- ref[sliceend+1]
                    mov esi,[esp+20]      ;#00460467: 213164044 14               uv 40 10  1 324      
;   572           ::opRepsSeqMRSeqAfterLoop
;   573                 lodsd                   -- mov eax,[esi], esi+=4
                        lodsd             ;#0046046B: 255                        np 41 40  2 327    *40*
;   574                 stosd                   -- mov [edi],eax, edi+=4
                        stosd             ;#0046046C: 253                        np 80 81  3 329      
;   575                 cmp eax,h4
                        cmp eax,h4        ;#0046046D: 075 00000040               uv 00 01  1 332      
;   576                 jl @f
                        jl #00460479      ;#00460472: 174 05                     v  00 00  1 332      
;   577                     add dword[ebx+eax*4-8],1    -- exception should never happen (we are cloning)
                            add dword[ebx+eax*4-8],1  ;#00460474: 203104203 F8 01            u  00 09  3 333      
;   578               @@:
;   579                 sub ecx,1
                        sub ecx,1         ;#00460479: 203351 01                  vu 02 02  1 335      
;   580                 jnz :opRepsSeqMRSeqAfterLoop
                        jnz #0046046B     ;#0046047C: 165 ED                     v  00 00  1 336      
;   581 
;   582           ::opRepsPop6da
;   583 ------------------------
;   584             mov edx,[esp+12]        -- original ref
                    mov edx,[esp+12]      ;#0046047E: 213124044 0C               uv 04 10  1 337      
;   585             add esp,24
                    add esp,24            ;#00460482: 203304 18                  vu 10 10  1 337      
;   586             cmp edx,h4
                    cmp edx,h4            ;#00460485: 201372 00000040            uv 00 04  1 338      
;   587             jle @f
                    jle #00460498         ;#0046048B: 176 0B                     v  00 00  1 338      
;   588                 sub dword[ebx+edx*4-8],1
                        sub dword[ebx+edx*4-8],1  ;#0046048D: 203154223 F8 01            u  00 0C  3 339      
;   589                 jz :%pDealloc
                        jz #004639A8 (:%pDealloc)  ;#00460492: 017204 10350000            v  00 00  1 341      
;   590           @@:
;   591             ret
                    ret                   ;#00460498: 303                        np 00 00  2 342      
;   592       
;   593       ::opRepsStr
;   594 -----------------
;   595         --
;   596         --  al: type byte ([esi-1]) (#82 [actually: has bit #80 but !=#80])
;   597         --  ecx: slice length [also in esp+4]
;   598         --  edx: ref length [also in esp]
;   599         --  edi: rep ref (unknown type)
;   600         --  esi: raw(ref) (a string)
;   601         --  [esp] ref length
;   602         --  [esp+4] slice length
;   603         --  [esp+8] slice start (0-based)
;   604         --  [esp+12] ref addr (may become original ref rsn)
;   605         --  [esp+16] slice end (1-based)
;   606         --  [esp+20] rep ref
;   607         --  [esp+24] return addr
;   608         --
;   609         cmp al,0x82
                cmp al,#82                ;#00460499: 200370 82                  uv 00 01  1 344      
;   610         jne :e04atsaa24 -- cannot happen? (unless type byte is corrupt)
                jne #0046019D             ;#0046049C: 017205 FBFCFFFF            v  00 00  1 344      
;   611         --
;   612         -- check for insitu replacement
;   613         --
;   614         cmp dword[esi-8],1
                cmp dword[esi-8],1        ;#004604A2: 203176 F8 01               u  00 40  2 345      
;   615         jne :opRepsStrMultiRef
                jne #00460551             ;#004604A6: 017205 A5000000            v  00 00  1 346      
;   616         --
;   617         -- which is ok for chars...
;   618         --
;   619         cmp edi,h4
                cmp edi,h4                ;#004604AC: 201377 00000040            uv 00 80  1 347      
;   620         jge @f
                jge #004604D6             ;#004604B2: 175 22                     v  00 00  1 347      
;   621             cmp ecx,0               -- check for zero length slice replacement
                    cmp ecx,0             ;#004604B4: 203371 00                  uv 00 02  1 348      
;   622             je :opRepsPop6          -- do nothing case
                    je #004602C2          ;#004604B7: 017204 05FEFFFF            v  00 00  1 348      
;   623             cmp edi,#FF
                    cmp edi,255           ;#004604BD: 201377 FF000000            uv 00 80  1 349      
;   624             ja :opRepsStrToSeqA     -- also jumps for -ve & non-int
                    ja #00460508          ;#004604C3: 167 43                     v  00 00  1 349      
;   625 --          mov edi,-1
;   626 --          add esi,[esp+8]         -- slice start (0-based)
;   627             mov edi,[esp+8]         -- slice start (0-based)
                    mov edi,[esp+8]       ;#004604C5: 213174044 08               uv 80 10  1 350      
;   628 --          mov eax,edi
;   629             mov eax,[esp+20]
                    mov eax,[esp+20]      ;#004604C9: 213104044 14               vu 01 10  1 350      
;   630             add edi,esi
                    add edi,esi           ;#004604CD: 001367                     uv 80 C0  1 351      
;   631 --          lea edi,[esi+edx-1]
;   632             rep stosb
                    rep stosb             ;#004604CF: 363:252                    np 82 83  3 354    *80*
;   633             jmp :opRepsPop6
                    jmp #004602C2         ;#004604D1: 351 ECFDFFFF               v  00 00  1 357      
;   634       @@:
;   635         --
;   636         -- .. and strings of the same length
;   637         --
;   638         cmp byte[ebx+edi*4-1],0x82
                cmp byte[ebx+edi*4-1],#82  ;#004604D6: 200174273 FF 82            u  00 88  2 360    *80*
;   639         jne @f
                jne #004604F9             ;#004604DB: 165 1C                     v  00 00  1 361      
;   640             cmp dword[ebx+edi*4-12],ecx
                    cmp [ebx+edi*4-12],ecx  ;#004604DD: 071114273 F4               uv 00 8A  2 362      
;   641             jne :opRepsStrSeqL
                    jne #004605A5         ;#004604E1: 017205 BE000000            v  00 00  1 363      
;   642             shl edi,2
                    shl edi,2             ;#004604E7: 301347 02                  u  80 80  1 364      
;   643 --          mov edx,[esp+12]        -- slice start
;   644             mov edx,[esp+8]         -- slice start (0-based)
                    mov edx,[esp+8]       ;#004604EA: 213124044 08               vu 04 10  1 364      
;   645             xchg esi,edi
                    xchg esi,edi          ;#004604EE: 207376                     np C0 C0  3 365      
;   646 --DEV see above?
;   647 --          lea edi,[edi+edx-1]
;   648             add edi,edx
                    add edi,edx           ;#004604F0: 001327                     uv 80 84  1 368      
;   649             rep movsb
                    rep movsb             ;#004604F2: 363:244                    np C2 C2  4 371    *80*
;   650             jmp :opRepsPop6
                    jmp #004602C2         ;#004604F4: 351 C9FDFFFF               v  00 00  1 375      
;   651 
;   652       @@:
;   653         cmp byte[ebx+edi*4-1],0x80
                cmp byte[ebx+edi*4-1],#80  ;#004604F9: 200174273 FF 80            u  00 88  2 378    *80*
;   654         je :opRepsStrSeqL
                je #004605A5              ;#004604FE: 017204 A1000000            v  00 00  1 379      
;   655       ::opRepsStrToSeqAtom
;   656         add dword[ebx+edi*4-8],ecx  -- bulk ref update (float)
                add [ebx+edi*4-8],ecx     ;#00460504: 001114273 F8               uv 00 8A  3 380      
;   657 
;   658       ::opRepsStrToSeqA
;   659 -----------------------
;   660         --
;   661         -- replacement (edi) is atom, but we must create a sequence (same length as original)
;   662         --
;   663         cmp ecx,0                   -- check for zero length slice replacement
                cmp ecx,0                 ;#00460508: 203371 00                  vu 00 02  1 382      
;   664         je :opRepsPop6              -- do nothing case
                je #004602C2              ;#0046050B: 017204 B1FDFFFF            v  00 00  1 383      
;   665         mov ecx,edx                 -- new length == original length
                mov ecx,edx               ;#00460511: 213312                     uv 02 04  1 384      
;   666 --      mov edx,[esp+12]            -- ref addr
;   667         mov edi,[esp+12]            -- ref addr
                mov edi,[esp+12]          ;#00460513: 213174044 0C               vu 80 10  1 384      
;   668 --      push edi                    --[7]
;   669         mov edx,[esp+24]            -- era
                mov edx,[esp+24]          ;#00460517: 213124044 18               uv 04 10  1 385      
;   670         call :%pAllocSeq            -- damages eax only
                call #00463832 (:%pAllocSeq)  ;#0046051B: 350 12330000               v  00 00  1 385      
;   671 --      mov edi,[edx]
;   672         mov edx,[edi]
                mov edx,[edi]             ;#00460520: 213027                     uv 04 80  1 386      
;   673 --      mov [edx],eax               -- Replace the ref at the original address
;   674         mov [edi],eax               -- Replace the ref at the original address
                mov [edi],eax             ;#00460522: 211007                     vu 00 81  1 386      
;   675 -->     mov [esp+16],edi            -- decref/dealloc at end (opRepsPop6da)
;   676 --      mov [esp+12],edi            -- decref/dealloc at end (opRepsPop6da)
;   677         mov [esp+12],edx            -- decref/dealloc at end (opRepsPop6da)
                mov [esp+12],edx          ;#00460524: 211124044 0C               uv 00 14  1 387      
;   678         mov edx,eax
                mov edx,eax               ;#00460528: 213320                     vu 04 01  1 387      
;   679         lea edi,[ebx+eax*4]
                lea edi,[ebx+eax*4]       ;#0046052A: 215074203                  uv 80 09  1 388      
;   680 --      add edx,[esp+12]
;   681         add edx,[esp+8]             -- slice start, 0-based
                add edx,[esp+8]           ;#0046052D: 003124044 08               vu 04 14  2 388      
;   682         mov ecx,[esp]               -- source ref length
                mov ecx,[esp]             ;#00460531: 213014044                  uv 02 10  1 389      
;   683         shl edx,2                   -- (lea edx,newseq[slice start], doing both ref->raw and idx->dwords at the same time)
                shl edx,2                 ;#00460534: 301342 02                  u  04 04  1 390      
;   684         xor eax,eax
                xor eax,eax               ;#00460537: 061300                     vu 01 01  1 390      
;   685       @@:
;   686             lodsb                   -- mov al,[esi], esi+=1
                    lodsb                 ;#00460539: 254                        np 41 40  2 391      
;   687             stosd                   -- mov [edi],eax, edi+=4
                    stosd                 ;#0046053A: 253                        np 80 81  3 393      
;   688             sub ecx,1
                    sub ecx,1             ;#0046053B: 203351 01                  uv 02 02  1 396      
;   689             jnz @b
                    jnz #00460539         ;#0046053E: 165 F9                     v  00 00  1 396      
;   690 
;   691         mov edi,edx                 -- newseq[slicestart]
                mov edi,edx               ;#00460540: 213372                     uv 80 04  1 397      
;   692 --      pop eax                     --[7]
;   693         mov eax,[esp+20]            -- rep ref (already incref'd)
                mov eax,[esp+20]          ;#00460542: 213104044 14               vu 01 10  1 397      
;   694         mov ecx,[esp+4]             -- slice len
                mov ecx,[esp+4]           ;#00460546: 213114044 04               uv 02 10  1 398      
;   695         rep stosd
                rep stosd                 ;#0046054A: 363:253                    np 82 83  3 400    *80*
;   696         jmp :opRepsPop6da
                jmp #0046047E             ;#0046054C: 351 2DFFFFFF               v  00 00  1 403      
;   697 
;   698       ::opRepsStrMultiRef
;   699 -------------------------
;   700         --
;   701         --  al: type byte ([esi-1]) (#82)
;   702         --  ecx: slice length [also in esp+4]
;   703         --  edx: ref length [also in esp]
;   704         --  edi: rep ref (unknown type)
;   705         --  esi: raw(ref) (a string)
;   706         --  [esp] ref length
;   707         --  [esp+4] slice length
;   708         --  [esp+8] slice start (0-based)
;   709         --  [esp+12] ref addr (may become original ref rsn)
;   710         --  [esp+16] slice end (1-based)
;   711         --  [esp+20] rep ref
;   712         --  [esp+24] return addr
;   713         --
;   714         --
;   715         -- if the replacement is a char or a string or a 0-length dword-sequence, then result is string
;   716         --
;   717         cmp edi,h4
                cmp edi,h4                ;#00460551: 201377 00000040            uv 00 80  1 404      
;   718         jg @f
                jg #0046059A              ;#00460557: 177 41                     v  00 00  1 404      
;   719             cmp ecx,0                   -- check for zero length slice replacement
                    cmp ecx,0             ;#00460559: 203371 00                  uv 00 02  1 405      
;   720             je :opRepsPop6              -- do nothing case
                    je #004602C2          ;#0046055C: 017204 60FDFFFF            v  00 00  1 405      
;   721             cmp edi,#FF                 -- also jumps for -ve & non-int
                    cmp edi,255           ;#00460562: 201377 FF000000            uv 00 80  1 406      
;   722             ja :opRepsStrToSeqA
                    ja #00460508          ;#00460568: 167 9E                     v  00 00  1 406      
;   723             mov ecx,edx                 -- same length as original
                    mov ecx,edx           ;#0046056A: 213312                     uv 02 04  1 407      
;   724             mov edx,[esp+12]            -- ref addr
                    mov edx,[esp+12]      ;#0046056C: 213124044 0C               vu 04 10  1 407      
;   725             call :%pAllocStr            -- damages eax only
                    call #0046377D (:%pAllocStr)  ;#00460570: 350 08320000               v  00 00  1 408      
;   726             mov [edx],eax               -- Replace the ref at the original address
                    mov [edx],eax         ;#00460575: 211002                     uv 00 05  1 411    *04*
;   727             sub dword[esi-8],1          -- non-1 so no need to dealloc
                    sub dword[esi-8],1    ;#00460577: 203156 F8 01               u  00 40  3 412      
;   728             xchg eax,edi
                    xchg eax,edi          ;#0046057B: 227                        np 81 81  2 415      
;   729             mov edx,[esp+8]             -- slice start (0-based)
                    mov edx,[esp+8]       ;#0046057C: 213124044 08               uv 04 10  1 417      
;   730             shl edi,2
                    shl edi,2             ;#00460580: 301347 02                  u  80 80  1 418      
;   731             mov ecx,[esp]               -- original source length (all of it)
                    mov ecx,[esp]         ;#00460583: 213014044                  vu 02 10  1 418      
;   732             add edx,edi                 -- (lea edx,newstr[slicestart])
                    add edx,edi           ;#00460586: 001372                     uv 04 84  1 419      
;   733             add ecx,1                   -- and the trailing null
                    add ecx,1             ;#00460588: 203301 01                  vu 02 02  1 419      
;   734             rep movsb
                    rep movsb             ;#0046058B: 363:244                    np C2 C2  4 420      
;   735             mov edi,edx
                    mov edi,edx           ;#0046058D: 213372                     uv 80 04  1 424      
;   736             mov ecx,[esp+4]             -- slice length (go over middle bit)
                    mov ecx,[esp+4]       ;#0046058F: 213114044 04               vu 02 10  1 424      
;   737             rep stosb
                    rep stosb             ;#00460593: 363:252                    np 82 83  3 427    *80*
;   738             jmp :opRepsPop6
                    jmp #004602C2         ;#00460595: 351 28FDFFFF               v  00 00  1 430      
;   739       @@:
;   740         cmp byte[ebx+edi*4-1],0x12
                cmp byte[ebx+edi*4-1],#12  ;#0046059A: 200174273 FF 12            u  00 88  2 433    *80*
;   741         je :opRepsStrToSeqAtom
                je #00460504              ;#0046059F: 017204 5FFFFFFF            v  00 00  1 434      
;   742       ::opRepsStrSeqL
;   743         -- calculate required size (whether it needs to be a string or dword-sequence)
;   744         add edx,dword[ebx+edi*4-12] -- original plus replacement length..
                add edx,[ebx+edi*4-12]    ;#004605A5: 003124273 F4               uv 04 8C  2 435      
;   745 --      lea eax,[ebx+edi*4]         -- may as well
;   746 -->     sub dword[esi-8],1          -- non-1 so no need to dealloc (no, use opRepsPop6da)
;   747         sub edx,dword[esp+4]        -- ..minus slice length
                sub edx,[esp+4]           ;#004605A9: 053124044 04               uv 04 14  2 437 04   
;   748         mov ecx,edx                 -- new length
                mov ecx,edx               ;#004605AD: 213312                     uv 02 04  1 439 04   
;   749         mov edx,[esp+12]            -- ref addr
                mov edx,[esp+12]          ;#004605AF: 213124044 0C               vu 04 10  1 439      
;   750         cmp dword[ebx+edi*4-12],0   -- replacement length 0?
                cmp dword[ebx+edi*4-12],0  ;#004605B3: 203174273 F4 00            u  00 88  2 440      
;   751         je :opRepsStrStr
                je #004605C1              ;#004605B8: 164 07                     v  00 00  1 441      
;   752         cmp byte[ebx+edi*4-1],0x80
                cmp byte[ebx+edi*4-1],#80  ;#004605BA: 200174273 FF 80            u  00 88  2 442      
;   753         je :opRepsStrSeq
                je #004605FE              ;#004605BF: 164 3D                     v  00 00  1 443      
;   754 
;   755       ::opRepsStrStr
;   756 --------------------
;   757         --
;   758         -- string[i..j]:=string
;   759         -- new string (size already calculated), built in chunks
;   760         --
;   761         call :%pAllocStr            -- damages eax only
                call #0046377D (:%pAllocStr)  ;#004605C1: 350 B7310000               v  00 00  1 444      
;   762         mov edi,[edx]
                mov edi,[edx]             ;#004605C6: 213072                     uv 80 04  1 445      
;   763         mov [esp+12],edi            -- now becomes ref to decref at end
                mov [esp+12],edi          ;#004605C8: 211174044 0C               uv 00 90  1 446 80   
;   764         mov [edx],eax               -- Replace the ref at the original address
                mov [edx],eax             ;#004605CC: 211002                     vu 00 05  1 446      
;   765         --
;   766         -- duplicate original items before the slice
;   767         -- (and set edx,eax for later use, to avoid AGI stalls)
;   768         --
;   769         lea edi,[ebx+eax*4]
                lea edi,[ebx+eax*4]       ;#004605CE: 215074203                  uv 80 09  1 447      
;   770         mov edx,[esp+16]            -- slice end (1-based)
                mov edx,[esp+16]          ;#004605D1: 213124044 10               vu 04 10  1 447      
;   771         mov ecx,[esp+8]             -- slice start (0-based)
                mov ecx,[esp+8]           ;#004605D5: 213114044 08               uv 02 10  1 448      
;   772         mov eax,[esp+20]            -- rep ref (a string)
                mov eax,[esp+20]          ;#004605D9: 213104044 14               vu 01 10  1 448      
;   773         add edx,esi                 -- (lea edx,[esi+sliceend+1])
                add edx,esi               ;#004605DD: 001362                     uv 04 44  1 449      
;   774         shl eax,2                   -- (lea eax,[rep[1]])
                shl eax,2                 ;#004605DF: 301340 02                  u  01 01  1 450      
;   775         rep movsb
                rep movsb                 ;#004605E2: 363:244                    np C2 C2  4 451      
;   776         --
;   777         -- duplicate the replacement string
;   778         --
;   779         mov esi,eax
                mov esi,eax               ;#004605E4: 213360                     uv 40 01  1 455      
;   780         mov ecx,[eax-12]            -- replacement length
                mov ecx,[eax-12]          ;#004605E6: 213110 F4                  vu 02 01  1 455      
;   781         rep movsb
                rep movsb                 ;#004605E9: 363:244                    np C2 C2  4 458    *40*
;   782         --
;   783         -- duplicate remaining original items
;   784         --
;   785         mov ecx,[esp]           -- ref length
                mov ecx,[esp]             ;#004605EB: 213014044                  uv 02 10  1 462      
;   786         mov esi,edx
                mov esi,edx               ;#004605EE: 213362                     vu 40 04  1 462      
;   787         sub ecx,[esp+16]        -- minus slice end (1-based)
                sub ecx,[esp+16]          ;#004605F0: 053114044 10               uv 02 12  2 463      
;   788 --added 16/2/15:
;   789         add ecx,1               -- include terminating null
                add ecx,1                 ;#004605F4: 203301 01                  uv 02 02  1 465 02   
;   790         rep movsb
                rep movsb                 ;#004605F7: 363:244                    np C2 C2  4 466      
;   791         jmp :opRepsPop6da
                jmp #0046047E             ;#004605F9: 351 80FEFFFF               v  00 00  1 470      
;   792 
;   793       ::opRepsStrSeq
;   794 --------------------
;   795         --
;   796         --  al: type byte ([esi-1]) (#82)
;   797         --  ecx: slice length [also in esp+4]
;   798 --X     --  edx: ref length [also in esp]
;   799         --  edx: ref addr
;   800         --  edi: rep ref (a dword-sequence, of non-0 length)
;   801         --  esi: raw(ref) (a string)
;   802         --  [esp] ref length
;   803         --  [esp+4] slice length
;   804         --  [esp+8] slice start (0-based)
;   805         --  [esp+12] ref addr (becomes original ref rsn)
;   806         --  [esp+16] slice end (1-based)
;   807         --  [esp+20] rep ref
;   808         --  [esp+24] return addr
;   809         --
;   810         --
;   811         -- string[i..j]:=dword_sequence
;   812         -- new sequence (size already calculated), built in chunks
;   813         --
;   814         mov edi,edx
                mov edi,edx               ;#004605FE: 213372                     uv 80 04  1 471      
;   815         mov edx,[esp+24]        -- era
                mov edx,[esp+24]          ;#00460600: 213124044 18               vu 04 10  1 471      
;   816         call :%pAllocSeq        -- damages eax only
                call #00463832 (:%pAllocSeq)  ;#00460604: 350 29320000               v  00 00  1 472      
;   817 --      mov edi,[edx]
;   818         mov edx,[edi]
                mov edx,[edi]             ;#00460609: 213027                     uv 04 80  1 473      
;   819 --      mov [esp+12],edi        -- now becomes ref to dealloc at end
;   820         mov [esp+12],edx        -- now becomes ref to dealloc at end
                mov [esp+12],edx          ;#0046060B: 211124044 0C               uv 00 14  1 474 04   
;   821 --      mov [edx],eax           -- Replace the ref at the original address
;   822         mov [edi],eax           -- Replace the ref at the original address
                mov [edi],eax             ;#0046060F: 211007                     vu 00 81  1 474      
;   823 
;   824         --
;   825         -- duplicate original chars before the slice as dwords
;   826         -- (and set edx for later use, to avoid an AGI stall)
;   827         --
;   828 --      mov edx,[esp+16]        -- slice end, 1-based
;   829         lea edi,[ebx+eax*4]
                lea edi,[ebx+eax*4]       ;#00460611: 215074203                  uv 80 09  1 475      
;   830 --      shl edx,2
;   831         mov ecx,[esp+8]         -- slice start (0-based)
                mov ecx,[esp+8]           ;#00460614: 213114044 08               vu 02 10  1 475      
;   832 -->     mov eax,[esp+20]        -- rep ref (a sequence)
;   833 --      add edx,esi             -- (lea edx,[esi+sliceend+1])
;   834 -->     shl eax,2
;   835 --?     mov [esp+20],edx
;   836         mov edx,[esp+20]        -- rep ref (a sequence)
                mov edx,[esp+20]          ;#00460618: 213124044 14               uv 04 10  1 476      
;   837         test ecx,ecx
                test ecx,ecx              ;#0046061C: 205311                     vu 00 02  1 476      
;   838         jz @f
                jz #00460629              ;#0046061E: 164 09                     v  00 00  1 477      
;   839             xor eax,eax
                    xor eax,eax           ;#00460620: 061300                     uv 01 01  1 478      
;   840       ::opRepsStrSeqBeforeLoop
;   841             lodsb               -- mov al,[esi], esi+=1
                    lodsb                 ;#00460622: 254                        np 41 40  2 479      
;   842             stosd               -- mov [edi],eax, edi+=4
                    stosd                 ;#00460623: 253                        np 80 81  3 481      
;   843             sub ecx,1
                    sub ecx,1             ;#00460624: 203351 01                  uv 02 02  1 484      
;   844             jnz :opRepsStrSeqBeforeLoop
                    jnz #00460622         ;#00460627: 165 F9                     v  00 00  1 484      
;   845 
;   846       @@:
;   847         --
;   848         -- duplicate replacement sequence contents
;   849         -- (and save esi in edx for later use)
;   850         --
;   851 -->     mov ecx,[esp]           -- ref length
;   852 --!     mov esi,edx
;   853 -->?        sub ecx,[esp+16]        -- minus slice end (1-based)
;   854 -->?        mov esi,edx
;   855         mov eax,esi
                mov eax,esi               ;#00460629: 213306                     uv 01 40  1 485      
;   856         lea esi,[ebx+edx*4]
                lea esi,[ebx+edx*4]       ;#0046062B: 215064223                  vu 40 0C  1 485      
;   857         mov ecx,[ebx+edx*4-12]  -- rep length
                mov ecx,[ebx+edx*4-12]    ;#0046062E: 213114223 F4               uv 02 0C  1 486      
;   858         mov edx,eax
                mov edx,eax               ;#00460632: 213320                     vu 04 01  1 486      
;   859 --      mov edx,[esp+16]        -- slice end, 1-based
;   860 --      shl edx,2
;   861 --      add edx,esi             -- (lea edx,[esi+sliceend+1])
;   862 --      test ecx,ecx            -- (we know it is not 0-length)
;   863 --      jz :opRepsStrSeqMidDone
;   864       ::opRepsStrSeqMidLoop
;   865             lodsd               -- mov eax,[esi], esi+=4
                    lodsd                 ;#00460634: 255                        np 41 40  2 487      
;   866             stosd               -- mov [edi],eax, edi+=4
                    stosd                 ;#00460635: 253                        np 80 81  3 489      
;   867             cmp eax,h4
                    cmp eax,h4            ;#00460636: 075 00000040               uv 00 01  1 492      
;   868             jl @f
                    jl #00460642          ;#0046063B: 174 05                     v  00 00  1 492      
;   869                 add dword[ebx+eax*4-8],1    -- exception should never happen (we are cloning)
                        add dword[ebx+eax*4-8],1  ;#0046063D: 203104203 F8 01            u  00 09  3 493      
;   870           @@:
;   871             sub ecx,1
                    sub ecx,1             ;#00460642: 203351 01                  vu 02 02  1 495      
;   872             jnz :opRepsStrSeqMidLoop
                    jnz #00460634         ;#00460645: 165 ED                     v  00 00  1 496      
;   873 
;   874 --    ::opRepsStrSeqMidDone
;   875 ---------------------------
;   876         --
;   877         -- duplicate remaining original items
;   878         --
;   879         mov esi,edx
                mov esi,edx               ;#00460647: 213362                     uv 40 04  1 497      
;   880         mov ecx,[esp]           -- ref length
                mov ecx,[esp]             ;#00460649: 213014044                  vu 02 10  1 497      
;   881         add esi,[esp+4]         -- slice length
                add esi,[esp+4]           ;#0046064C: 003164044 04               uv 40 50  2 498      
;   882 --      mov esi,[esp+20]
;   883 --      add esi,[esp+4]         -- slice length
;   884         sub ecx,[esp+16]        -- minus slice end (1-based)
                sub ecx,[esp+16]          ;#00460650: 053114044 10               vu 02 12  2 499      
;   885         jz :opRepsPop6da
                jz #0046047E              ;#00460654: 017204 24FEFFFF            v  00 00  1 500      
;   886         xor eax,eax
                xor eax,eax               ;#0046065A: 061300                     uv 01 01  1 501      
;   887       @@:
;   888             lodsb               -- mov al,[esi], esi+=1
                    lodsb                 ;#0046065C: 254                        np 41 40  2 502      
;   889             stosd               -- mov [edi],eax, edi+=4
                    stosd                 ;#0046065D: 253                        np 80 81  3 504      
;   890             sub ecx,1
                    sub ecx,1             ;#0046065E: 203351 01                  uv 02 02  1 507      
;   891             jnz @b
                    jnz #0046065C         ;#00460661: 165 F9                     v  00 00  1 507      
;   892         nop
                nop                       ;#00460663: 220                        uv 00 00  1 508      
;   893         jmp :opRepsPop6da
                jmp #0046047E             ;#00460664: 351 15FEFFFF               v  00 00  1 508      
;   894 
;   895     [64]
;   896         --calling convention:
;   897         --  mov rcx,N
;   898         --  push <return address>
;   899         --  push [rep]          -- replacement (opUnassigned)
;   900         --  push [sliceend]     -- sliceend (opUnassigned)
;   901         --  push [idxN]..[idx1] -- (opUnassigned)
;   902         --  lea rax,[ref]       -- ref addr
;   903         --  jmp opReps          -- actually a call
;   904         --<return address>
;   905         mov r15,h4
;   906       ::opRepsRnxt64
;   907         mov rsi,[rax]
;   908         pop rdi                 -- next idx (ref)
;   909         cmp rsi,r15
;   910 --      jl :e04atsaam4          -- attempt to subscript an atom, era @ [esp+ecx*4-4]?
;   911         jg @f
;   912             mov rdx,[rsp+rcx*8+8]   -- era
;   913             mov al,4                -- e04atsaam4
;   914             sub rdx,1
;   915             jmp :!iDiag
;   916             int3
;   917       @@:
;   918         push rax                --[1] ref addr, in case we need to clone...
;   919         mov al,[rbx+rsi*4-1]
;   920         sub rdi,1               -- decrement rdi (:-)
;   921 --      mov rdx,[rbx+rsi*4-12]  -- length
;   922         mov rdx,[rbx+rsi*4-24]  -- length
;   923         shl rsi,2
;   924 
;   925         sub rcx,1
;   926         je :opRepsMain64        -- deal with final slice separately
;   927         cmp al,0x80
;   928         jne :e04atsaa9          -- must be seq since another idx (or the slice) follows, era * [esp+ecx*4+4]?
;   929 
;   930         cmp rdi,rdx
;   931         jb @f                   -- unsigned jump, lets 0..len-1 through
;   932                                 --               (we just decremented rdi)
;   933             mov al,8+4+0        -- [era] @ [rsp+rcx*8+8?], "assigning to"
;   934             call :%fixupIndex   -- idx-1 in rdi, len in rdx, al set
;   935       @@:
;   936         --
;   937         -- rdi now contains index to replace, and rdx the length
;   938         --   
;   939         mov rax,[rsi-16]        -- refcount
;   940         sub rax,1
;   941         jz :opRepsSeqNoClone64
;   942         mov [rsi-16],rax        -- non-1 so no need to dealloc
;   943 --29/5/24:
;   944 --      mov rax,[rsp+rcx*8+8]   -- era
;   945         mov rax,[rsp+rcx*8+24]  -- era
;   946         push rcx                --[2] no of remainding indexes
;   947         push rdi                --[3] idx
;   948         mov rcx,rdx
;   949         mov rdi,[rsp+16]        --[1] (ref addr, leaving it on the stack)
;   950         mov rdx,rax             -- era
;   951         call :%pAlloClone
;   952         call :%pAllocSeq        -- damages rax only
;   953         mov [rdi],rax           -- Replace ref at original address [no dealloc rqd]
;   954         lea rdi,[rbx+rax*4]
;   955         push rdi                --[4]
;   956       @@:
;   957             lodsq               -- mov rax,[rsi], rsi+=8
;   958             stosq               -- mov [rdi],rax, rdi+=8
;   959             cmp rax,r15
;   960             jl :opReps_no_incref64
;   961                 add qword[rbx+rax*4-16],1
;   962           ::opReps_no_incref64
;   963 
;   964             sub rcx,1
;   965             jnz @b
;   966 
;   967         pop rsi                 --[4] NB rsi:=rdi
;   968         pop rdi                 --[3] idx
;   969         pop rcx                 --[2] no of remaining indexes
;   970       ::opRepsSeqNoClone64
;   971         add rsp,8               --[1] discard ref addr
;   972 --29/12/15:
;   973 --      lea rax,[rsi+rdi*4]
;   974         lea rax,[rsi+rdi*8]
;   975         jmp :opRepsRnxt64
;   976 
;   977       ::opRepsMain64
;   978 --------------------
;   979         -- al type byte
;   980         -- rcx 0
;   981         -- rdx length ref
;   982         -- rsi raw ref
;   983         -- rdi slice start (-1, pre fixup)
;   984         -- stack contents:
;   985         --  [rsp]   ref addr (after several subcripts)
;   986         --  [rsp+8] slice end (pre fixup)
;   987         --  [rsp+16] rep ref
;   988         --  [rsp+24] <return address>
;   989         test al,0x80
;   990 --      jz :e04atsaa4
;   991         jnz @f
;   992             mov rdx,[rsp+24]
;   993             mov al,4    -- e04atsaa
;   994             sub rdx,1
;   995             jmp :!iDiag
;   996             int3
;   997       @@:
;   998         cmp rdi,rdx
;   999         jbe @f                  -- unsigned jump, lets 0..len through (NB jbe here)
;  1000                                 --               (we just decremented rdi)
;  1001                                 --               (slice start can be 1..length+1)
;  1002 --DEV +12
;  1003 --          mov cl,8                -- [era] @ [esp+8]
;  1004             mov cl,32               -- [era] @ [rsp+32]
;  1005             call :%fixupSliceStart  -- idx in rdi, len in rdx
;  1006       @@:
;  1007         push rdi                -- save slice start (0-based)
;  1008         mov rdi,[rsp+16]        -- slice end
;  1009         cmp rdi,rdx
;  1010         jbe @f                  -- unsigned jump, lets 0..len through (NB jbe here, and no dec rdi)
;  1011                                 --               (slice end can be 0..length)
;  1012 --DEV 16
;  1013 --          mov cl,12               -- [era] @ [esp+12]
;  1014             mov cl,40               -- [era] @ [rsp+40]
;  1015             call :%fixupSliceEnd    -- idx in rdi, len in rdx, idx addr in rbx(?)
;  1016             mov [rsp+16],rdi        -- save normalised slice end (1-based)
;  1017       @@:
;  1018         mov rcx,rdi
;  1019         sub rcx,[rsp]
;  1020         jl :e09slinespp4        -- slice length is negative (%d..%d)
;  1021         push rcx                -- save slice length
;  1022         push rdx                -- save source (ref) length
;  1023         mov rdi,[rsp+40]        -- rep ref
;  1024         --
;  1025         --  al: type byte ([esi-1])
;  1026         --  rcx: slice length [also in rsp+8]
;  1027         --  rdx: ref length [also in rsp]
;  1028         --  rdi: rep ref
;  1029         --  rsi: raw(ref)
;  1030         --  [rsp] ref length
;  1031         --  [rsp+8] slice length
;  1032         --  [rsp+16] slice start (0-based)
;  1033         --  [rsp+24] ref addr
;  1034         --  [rsp+32] slice end (1-based)
;  1035         --  [rsp+40] rep ref
;  1036         --  [rsp+48] return addr
;  1037         --
;  1038         -- handle sequence and string slices separately...
;  1039         --
;  1040         cmp al,0x80
;  1041         jne :opRepsStr64
;  1042             --
;  1043             -- check for insitu replacement
;  1044             --
;  1045 --          cmp dword[rsi-16],1
;  1046             cmp qword[rsi-16],1
;  1047             jne :opRepsSeqMultiRef64
;  1048             --
;  1049             -- which is ok for atoms...
;  1050             --
;  1051             cmp rdi,r15
;  1052             jl @f
;  1053                 lea rax,[rbx+rdi*4]
;  1054                 test byte[rbx+rdi*4-1],0x80
;  1055                 jnz :opRepsSeqSeq64
;  1056                 add qword[rbx+rdi*4-16],rcx -- bulk ref update (float)
;  1057           @@:                       -- replacement is an atom
;  1058 --          mov rdx,[rsp+8]         -- slice start
;  1059             mov rdx,[rsp+16]        -- slice start
;  1060             cmp rcx,0               -- check for zero length slice replacement
;  1061             je :opRepsPop664        -- do nothing case
;  1062             mov rax,rdi
;  1063 --          lea rdi,[rsi+rdx*4-8]
;  1064 --          lea rdi,[rsi+rdx*4]
;  1065             lea rdi,[rsi+rdx*8]
;  1066           ::opRepsSeqAtomLoop64
;  1067             mov rdx,[rdi]
;  1068             cmp rdx,r15
;  1069             jle @f
;  1070                 sub qword[rbx+rdx*4-16],1
;  1071                 jnz @f
;  1072 --                  pushad
;  1073                     push rax
;  1074                     push rcx
;  1075                     push rsi
;  1076                     push rdi
;  1077                     push qword[rsp+80]
;  1078                     call :%pDealloc0
;  1079 --                  popad
;  1080                     pop rdi
;  1081                     pop rsi
;  1082                     pop rcx
;  1083                     pop rax
;  1084           @@:
;  1085             stosq                   -- mov [rdi],rax, rdi+=8
;  1086             sub rcx,1
;  1087             jnz :opRepsSeqAtomLoop64
;  1088 
;  1089       ::opRepsPop664
;  1090 --------------------
;  1091             add rsp,48
;  1092             ret
;  1093 
;  1094       ::opRepsSeqSeq64
;  1095 ----------------------
;  1096             --
;  1097             -- .. and sequences of the same length
;  1098             --
;  1099             cmp qword[rax-24],rcx
;  1100             jne :opRepsSeqMRSeqStr64
;  1101             cmp rcx,0
;  1102             je :opRepsPop664            -- eg x[2..1]={}/"", do nothing case
;  1103             --
;  1104             --  rax: raw(rdi)
;  1105             --  rcx: slice length [also in rsp+8] (!=0)
;  1106             --  rdx: ref length [also in rsp]
;  1107             --  rdi: rep ref (a sequence/string of length ecx)
;  1108             --  rsi: raw(ref) (a dword-sequence)
;  1109             --  [rsp] ref length
;  1110             --  [rsp+8] slice length
;  1111             --  [rsp+16] slice start (0-based)
;  1112             --  [rsp+24] ref addr
;  1113             --  [rsp+32] slice end (1-based)
;  1114             --  [rsp+40] rep ref
;  1115             --  [rsp+48] return addr
;  1116             --
;  1117             mov rdx,[rsp+16]            -- slice start
;  1118             mov rdi,rsi                 -- raw(ref)
;  1119             mov rsi,rax                 -- raw(rep)
;  1120             cmp byte[rax-1],0x80
;  1121 --5/2/15:
;  1122 --          lea rdi,[rdi+rdx*4-8]       -- addr ref[slice start]
;  1123 --29/12/15:
;  1124 --          lea rdi,[rdi+rdx*4]         -- addr ref[slice start]
;  1125             lea rdi,[rdi+rdx*8]         -- addr ref[slice start]
;  1126             jne :opRepsSeqStr64
;  1127           ::opRepsSeqSeqLoop64
;  1128                 lodsq                       -- mov rax,[rsi], rsi+=8
;  1129                 cmp rax,r15
;  1130                 jl @f
;  1131                     add qword[rbx+rax*4-16],1
;  1132               @@:
;  1133                 mov rdx,[rdi]
;  1134                 cmp rdx,r15
;  1135                 jle @f
;  1136                     sub qword[rbx+rdx*4-16],1
;  1137                     jnz @f
;  1138 --                      pushad
;  1139                         push rcx
;  1140                         push rsi
;  1141                         push rax
;  1142                         push rdi
;  1143                         push qword[rsp+80]
;  1144                         call :%pDealloc0
;  1145                         pop rdi
;  1146                         pop rax
;  1147                         pop rsi
;  1148                         pop rcx
;  1149 --                      popad
;  1150               @@:
;  1151                 stosq                   -- mov [rdi],rax, rdi+=8
;  1152                 sub rcx,1
;  1153                 jnz :opRepsSeqSeqLoop64
;  1154             jmp :opRepsPop664
;  1155 
;  1156       ::opRepsSeqStr64
;  1157 ----------------------
;  1158             --
;  1159             --  rax: raw(edi)
;  1160             --  rcx: slice length [also in rsp+8] (!=0)
;  1161             --  rdx: slice start [also in rsp+16]
;  1162             --  rdi: addr ref[slice start]
;  1163             --  rsi: raw(rep) (a dword-sequence)
;  1164             --  [rsp] ref length
;  1165             --  [rsp+8] slice length
;  1166             --  [rsp+16] slice start (0-based)
;  1167             --  [rsp+24] ref addr
;  1168             --  [rsp+32] slice end (1-based)
;  1169             --  [rsp+40] rep ref
;  1170             --  [rsp+48] return addr
;  1171             --
;  1172             xor rax,rax
;  1173           ::opRepsSeqStrLoop64
;  1174                 mov rdx,[rdi]
;  1175                 lodsb                   -- mov al,[rsi], rsi+=1
;  1176                 cmp rdx,r15
;  1177                 jle @f
;  1178                     sub qword[rbx+rdx*4-16],1
;  1179                     jnz @f
;  1180 --                      pushad
;  1181                         push rcx
;  1182                         push rsi
;  1183                         push rax
;  1184                         push rdi
;  1185                         push qword[rsp+80]
;  1186                         call :%pDealloc0
;  1187                         pop rdi
;  1188                         pop rax
;  1189                         pop rsi
;  1190                         pop rcx
;  1191 --                      popad
;  1192               @@:
;  1193                 stosq                   -- mov [rdi],rax, rdi+=8
;  1194                 sub rcx,1
;  1195                 jnz :opRepsSeqStrLoop64
;  1196 
;  1197 --          jmp :opRepsPop664
;  1198             add rsp,48
;  1199             ret
;  1200 
;  1201       ::opRepsSeqMultiRef64
;  1202 ---------------------------
;  1203             --
;  1204             --  al: type byte ([rsi-1])
;  1205             --  rcx: slice length [also in rsp+8]
;  1206             --  rdx: ref length [also in rsp]
;  1207             --  rdi: rep ref [also in rsp+40]
;  1208             --  rsi: raw(ref) (dword_sequence, refcount>1)
;  1209             --  [rsp] ref length
;  1210             --  [rsp+8] slice length
;  1211             --  [rsp+16] slice start (0-based)
;  1212             --  [rsp+24] ref addr
;  1213             --  [rsp+32] slice end (1-based)
;  1214             --  [rsp+40] rep ref
;  1215             --  [rsp+48] return addr
;  1216             --
;  1217             --
;  1218             -- ok, how big does this thing have to be?
;  1219             --
;  1220             -- In the case of an atom, same as source...
;  1221             --
;  1222             cmp rdi,r15
;  1223             jl @f
;  1224                 lea rax,[rbx+rdi*4]
;  1225                 test byte[rbx+rdi*4-1],0x80
;  1226                 jnz :opRepsSeqMRSeqStrClone64
;  1227                 add qword[rbx+rdi*4-16],rcx   -- bulk ref update (float)
;  1228           @@:                       -- replacement is an atom
;  1229             cmp rcx,0               -- check for zero length slice replacement
;  1230             je :opRepsPop664        -- do nothing case
;  1231             mov rcx,rdx
;  1232 --          mov rdx,[rsp+24]        -- addr ref
;  1233             mov rdi,[rsp+24]        -- addr ref
;  1234             mov rdx,[rsp+48]        -- era
;  1235             call :%pAlloClone
;  1236             call :%pAllocSeq        -- damages rax only
;  1237 --          mov [rdx],rax           -- Replace the ref at the original address
;  1238             mov [rdi],rax           -- Replace the ref at the original address
;  1239             sub qword[rsi-16],1     -- non-1 so no need to dealloc
;  1240             lea rdi,[rbx+rax*4]
;  1241             --
;  1242             -- duplicate original items before the slice
;  1243             --
;  1244 --          mov rcx,[rsp+24]                -- slice start
;  1245             mov rcx,[rsp+16]        -- slice start (0-based)
;  1246 --          sub rcx,1
;  1247             test rcx,rcx
;  1248             jz :opRepsSeqMRAmid64
;  1249           ::opRepsSeqMRAtomBeforeLoop64
;  1250                 lodsq                           -- mov rax,[rsi], rsi+=8
;  1251                 stosq                           -- mov [rdi],rax, rdi+=8
;  1252                 cmp rax,r15
;  1253                 jl @f
;  1254                     add qword[rbx+rax*4-16],1   -- exception should never happen (we are cloning)
;  1255               @@:
;  1256                 sub rcx,1
;  1257                 jnz :opRepsSeqMRAtomBeforeLoop64
;  1258 
;  1259             --
;  1260             -- blat slice area with atom
;  1261             --
;  1262           ::opRepsSeqMRAmid64
;  1263 -----------------------------
;  1264             mov rax,[rsp+40]        -- rep ref 
;  1265             mov rcx,[rsp+8]         -- slice len
;  1266             rep stosq
;  1267             --
;  1268             -- duplicate remaining original items
;  1269             --
;  1270             mov rcx,[rsp]           -- original source ref length
;  1271 --erm, 7/11/14:
;  1272 --          mov rax,[rsp+16]        -- slice end
;  1273             mov rax,[rsp+32]        -- slice end
;  1274             sub rcx,rax
;  1275             jz :opRepsPop664
;  1276             mov rax,[rsp+8]         -- slice length
;  1277 --29/12/15:
;  1278 --          lea rsi,[rsi+rax*4-8]
;  1279 --15/2/18:
;  1280 --          lea rsi,[rsi+rax*8-8]
;  1281             lea rsi,[rsi+rax*8]
;  1282           ::opRepsSeqMRAtomAfterLoop64
;  1283                 lodsq                       -- mov rax,[rsi], rsi+=8
;  1284                 stosq                       -- mov [rdi],rax, rdi+=8
;  1285                 cmp rax,r15
;  1286                 jl @f
;  1287                     add qword[rbx+rax*4-16],1           -- exception should never happen (we are cloning)
;  1288               @@:
;  1289                 sub rcx,1
;  1290                 jnz :opRepsSeqMRAtomAfterLoop64
;  1291 --          jmp :opRepsPop664
;  1292             add rsp,48
;  1293             ret
;  1294 
;  1295       ::opRepsSeqMRSeqStrClone64
;  1296             sub rdx,rcx                 -- original length-slicelength
;  1297             mov rcx,qword[rax-24]       -- replacement length
;  1298             add rcx,rdx
;  1299             mov rdi,[rsp+24]            -- addr ref
;  1300             mov rdx,[rsp+48]            -- era
;  1301             call :%pAlloClone
;  1302             jmp @f
;  1303 
;  1304       ::opRepsSeqMRSeqStr64
;  1305 ---------------------------
;  1306             --
;  1307             --  rax: raw(rdi)
;  1308             --  rcx: slice length [also in rsp+8]
;  1309             --  rdx: ref length [also in rsp]
;  1310             --  rdi: rep ref (a sequence/string) [also in rsp+40]
;  1311             --  rsi: raw(ref) (a dword-sequence)
;  1312             --  [rsp] ref length
;  1313             --  [rsp+8] slice length
;  1314             --  [rsp+16] slice start (0-based)
;  1315             --  [rsp+24] ref addr (becomes original ref rsn)
;  1316             --  [rsp+32] slice end (1-based)
;  1317             --  [rsp+40] rep ref (becomes ref[sliceend+1] rsn)
;  1318             --  [rsp+48] return addr
;  1319             --
;  1320             --
;  1321             -- .. in the case of a string/sequence rep, the required length is:
;  1322             --
;  1323             sub rdx,rcx                 -- original length-slicelength
;  1324             mov rcx,qword[rax-24]       -- replacement length
;  1325             add rcx,rdx
;  1326 --          mov rdx,[rsp+24]            -- addr ref
;  1327             mov rdi,[rsp+24]            -- addr ref
;  1328             mov rdx,[rsp+48]            -- era
;  1329           @@:
;  1330             call :%pAllocSeq            -- damages rax only
;  1331 --          mov rdi,[rdx]               -- original ref
;  1332             mov rdx,[rdi]               -- original ref
;  1333             mov rcx,[rsp+16]            -- slice start (0-based)
;  1334 --          mov [rsp+24],rdi            -- decref/dealloc at end (opRepsPop6da64)
;  1335             mov [rsp+24],rdx            -- decref/dealloc at end (opRepsPop6da64)
;  1336 --          mov [rdx],rax               -- Replace the ref at the original address
;  1337             mov [rdi],rax               -- Replace the ref at the original address
;  1338 
;  1339             lea rdi,[rbx+rax*4]
;  1340             mov rdx,[rsp+8]             -- slice length (for opRepsSeqMRSmid64)
;  1341             --
;  1342             -- duplicate original items before the slice
;  1343             --
;  1344 --          sub rcx,1
;  1345             test rcx,rcx
;  1346             jz opRepsSeqMRSmid64
;  1347           ::opRepsSeqMRSeqBeforeLoop64
;  1348                 lodsq                   -- mov rax,[rsi], rsi+=8
;  1349                 stosq                   -- mov [rdi],rax, rdi+=8
;  1350                 cmp rax,r15
;  1351                 jl @f
;  1352                     add qword[rbx+rax*4-16],1   -- exception should never happen (we are cloning)
;  1353               @@:
;  1354                 sub rcx,1
;  1355                 jnz :opRepsSeqMRSeqBeforeLoop64
;  1356 
;  1357             --
;  1358             -- slice area is either from sequence or string...
;  1359             --
;  1360           ::opRepsSeqMRSmid64
;  1361 -----------------------------
;  1362 --          lea rcx,[rsi+rdx*4]         -- ref[end slice+1]
;  1363             lea rcx,[rsi+rdx*8]         -- ref[end slice+1]
;  1364             mov rsi,[rsp+40]            -- rep ref
;  1365             mov [rsp+40],rcx            -- ref[end slice+1]
;  1366             shl rsi,2
;  1367             mov rcx,[rsi-24]            -- rep length
;  1368             cmp rcx,0
;  1369             je :opRepsSeqMRmidDone64
;  1370             cmp byte[rsi-1],0x80
;  1371             jne :opRepsSeqMRmidStr64
;  1372             -- copy seq elements one by one into middle of new sequence
;  1373           ::opRepsSeqMRSeqLoop64
;  1374                 lodsq                   -- mov rax,[rsi], rsi+=8
;  1375                 stosq                   -- mov [rdi],rax, rdi+=8
;  1376                 cmp rax,r15
;  1377                 jl @f
;  1378                     add qword[rbx+rax*4-16],1   -- exception should never happen (we are cloning)
;  1379               @@:
;  1380                 sub rcx,1
;  1381                 jnz :opRepsSeqMRSeqLoop64
;  1382             nop
;  1383             jmp :opRepsSeqMRmidDone64
;  1384 
;  1385           ::opRepsSeqMRmidStr64
;  1386 -------------------------------
;  1387             -- copy string chars one by one into middle of new sequence
;  1388             xor rax,rax
;  1389           @@:
;  1390                 lodsb                   -- mov al,[rsi], rsi+=1
;  1391                 stosq                   -- mov [rdi],rax, rdi+=8
;  1392                 sub rcx,1
;  1393                 jnz @b
;  1394 
;  1395           ::opRepsSeqMRmidDone64
;  1396 --------------------------------
;  1397             --
;  1398             -- duplicate remaining original items
;  1399             --
;  1400             mov rcx,[rsp]               -- original source ref length
;  1401             mov rax,[rsp+32]            -- slice end
;  1402             sub rcx,rax
;  1403             jz :opRepsPop6da64
;  1404             mov rsi,[rsp+40]            -- ref[sliceend+1]
;  1405           ::opRepsSeqMRSeqAfterLoop64
;  1406                 lodsq                   -- mov rax,[rsi], rsi+=8
;  1407                 stosq                   -- mov [rdi],rax, rdi+=8
;  1408                 cmp rax,r15
;  1409                 jl @f
;  1410                     add qword[rbx+rax*4-16],1   -- exception should never happen (we are cloning)
;  1411               @@:
;  1412                 sub rcx,1
;  1413                 jnz :opRepsSeqMRSeqAfterLoop64
;  1414 
;  1415           ::opRepsPop6da64
;  1416 --------------------------
;  1417             mov rdx,[rsp+24]        -- original ref
;  1418             add rsp,48
;  1419             cmp rdx,r15
;  1420             jle @f
;  1421                 sub qword[rbx+rdx*4-16],1
;  1422                 jz :%pDealloc
;  1423           @@:
;  1424             ret
;  1425       
;  1426       ::opRepsStr64
;  1427 -------------------
;  1428         --
;  1429         --  al: type byte ([rsi-1]) (#82 [actually: has bit #80 but !=#80])
;  1430         --  rcx: slice length [also in rsp+8]
;  1431         --  rdx: ref length [also in rsp]
;  1432         --  rdi: rep ref (unknown type)
;  1433         --  rsi: raw(ref) (a string)
;  1434         --  [rsp] ref length
;  1435         --  [rsp+8] slice length
;  1436         --  [rsp+16] slice start (0-based)
;  1437         --  [rsp+24] ref addr (may become original ref rsn)
;  1438         --  [rsp+32] slice end (1-based)
;  1439         --  [rsp+40] rep ref
;  1440         --  [rsp+48] return addr
;  1441         --
;  1442         cmp al,0x82
;  1443         jne :e04atsaa24 -- cannot happen? (unless type byte is corrupt)
;  1444         --
;  1445         -- check for insitu replacement
;  1446         --
;  1447         cmp dword[rsi-16],1
;  1448         jne :opRepsStrMultiRef64
;  1449         --
;  1450         -- which is ok for chars...
;  1451         --
;  1452         cmp rdi,r15
;  1453         jge @f
;  1454             cmp rcx,0               -- check for zero length slice replacement
;  1455             je :opRepsPop664        -- do nothing case
;  1456             cmp rdi,#FF
;  1457             ja :opRepsStrToSeqA64   -- also jumps for -ve & non-int
;  1458 --          mov rdi,-1
;  1459 --          add rsi,[rsp+16]        -- slice start (0-based)
;  1460             mov rdi,[rsp+16]        -- slice start (0-based)
;  1461 --          mov rax,rdi
;  1462             mov rax,[rsp+40]
;  1463             add rdi,rsi
;  1464 --          lea rdi,[rsi+rdx-1]
;  1465             rep stosb
;  1466             jmp :opRepsPop664
;  1467       @@:
;  1468         --
;  1469         -- .. and strings of the same length
;  1470         --
;  1471         cmp byte[rbx+rdi*4-1],0x82
;  1472         jne @f
;  1473             cmp qword[rbx+rdi*4-24],rcx
;  1474             jne :opRepsStrSeqL64
;  1475             shl rdi,2
;  1476 --          mov rdx,[rsp+24]        -- slice start
;  1477             mov rdx,[rsp+16]        -- slice start (0-based)
;  1478             xchg rsi,rdi
;  1479 --DEV see above?
;  1480 --          lea rdi,[rdi+rdx-1]
;  1481             add rdi,rdx
;  1482             rep movsb
;  1483             jmp :opRepsPop664
;  1484 
;  1485       @@:
;  1486         cmp byte[rbx+rdi*4-1],0x80
;  1487         je :opRepsStrSeqL64
;  1488       ::opRepsStrToSeqAtom64
;  1489         add qword[rbx+rdi*4-16],rcx -- bulk ref update (float)
;  1490 
;  1491       ::opRepsStrToSeqA64
;  1492 -------------------------
;  1493         --
;  1494         -- replacement (rdi) is atom, but we must create a sequence (same length as original)
;  1495         --
;  1496         cmp rcx,0                   -- check for zero length slice replacement
;  1497         je :opRepsPop664            -- do nothing case
;  1498         mov rcx,rdx                 -- new length == original length
;  1499 --      mov rdx,[rsp+24]            -- ref addr
;  1500         mov rdi,[rsp+24]            -- ref addr
;  1501 --      push rdi                    --[7]
;  1502         mov rdx,[rsp+48]            -- era
;  1503         call :%pAllocSeq            -- damages rax only
;  1504 --      mov rdi,[rdx]
;  1505         mov rdx,[rdi]
;  1506 --      mov [rdx],rax               -- Replace the ref at the original address
;  1507         mov [rdi],rax               -- Replace the ref at the original address
;  1508 -->     mov [rsp+32],rdi            -- decref/dealloc at end (opRepsPop6da64)
;  1509 --      mov [rsp+24],rdi            -- decref/dealloc at end (opRepsPop6da64)
;  1510         mov [rsp+24],rdx            -- decref/dealloc at end (opRepsPop6da64)
;  1511 --      mov rdx,rax
;  1512         mov rdx,[rsp+16]            -- slice start, 0-based
;  1513         lea rdi,[rbx+rax*4]
;  1514 --      add rdx,[rsp+24]
;  1515 --      add rdx,[rsp+16]            -- slice start, 0-based
;  1516         mov rcx,[rsp]               -- source ref length
;  1517         shl rdx,3                   -- idx->qwords
;  1518         shl rax,2                   -- ref->raw
;  1519         add rdx,rax                 -- (lea rdx,newseq[slice start])
;  1520         xor rax,rax
;  1521       @@:
;  1522             lodsb                   -- mov al,[rsi], rsi+=1
;  1523             stosq                   -- mov [rdi],rax, rdi+=8
;  1524             sub rcx,1
;  1525             jnz @b
;  1526 
;  1527         mov rdi,rdx                 -- newseq[slicestart]
;  1528 --      pop eax                     --[7]
;  1529         mov rax,[rsp+40]            -- rep ref (already incref'd)
;  1530         mov rcx,[rsp+8]             -- slice len
;  1531         rep stosd
;  1532         jmp :opRepsPop6da64
;  1533 
;  1534       ::opRepsStrMultiRef64
;  1535 ---------------------------
;  1536         --
;  1537         --  al: type byte ([rsi-1]) (#82)
;  1538         --  rcx: slice length [also in rsp+8]
;  1539         --  rdx: ref length [also in rsp]
;  1540         --  rdi: rep ref (unknown type)
;  1541         --  rsi: raw(ref) (a string)
;  1542         --  [rsp] ref length
;  1543         --  [rsp+8] slice length
;  1544         --  [rsp+16] slice start (0-based)
;  1545         --  [rsp+24] ref addr (may become original ref rsn)
;  1546         --  [rsp+32] slice end (1-based)
;  1547         --  [rsp+40] rep ref
;  1548         --  [rsp+48] return addr
;  1549         --
;  1550         --
;  1551         -- if the replacement is a char or a string or a 0-length dword-sequence, then result is string
;  1552         --
;  1553         cmp rdi,r15
;  1554         jg @f
;  1555             cmp rcx,0                   -- check for zero length slice replacement
;  1556             je :opRepsPop664            -- do nothing case
;  1557             cmp rdi,#FF                 -- also jumps for -ve & non-int
;  1558             ja :opRepsStrToSeqA64
;  1559             mov rcx,rdx                 -- same length as original
;  1560             mov rdx,[rsp+24]            -- ref addr
;  1561             call :%pAllocStr            -- damages rax only
;  1562             mov [rdx],rax               -- Replace the ref at the original address
;  1563             sub qword[rsi-16],1         -- non-1 so no need to dealloc
;  1564             xchg rax,rdi
;  1565             mov rdx,[rsp+16]            -- slice start (0-based)
;  1566             shl rdi,2                   -- ref -> raw
;  1567             mov rcx,[rsp]               -- original source length (all of it)
;  1568             add rdx,rdi                 -- (lea rdx,newstr[slicestart])
;  1569             add rcx,1                   -- and the trailing null
;  1570             rep movsb
;  1571             mov rdi,rdx
;  1572             mov rcx,[rsp+8]             -- slice length (go over middle bit)
;  1573             rep stosb
;  1574             jmp :opRepsPop664
;  1575       @@:
;  1576         cmp byte[rbx+rdi*4-1],0x12
;  1577         je :opRepsStrToSeqAtom64
;  1578       ::opRepsStrSeqL64
;  1579         -- calculate required size (whether it needs to be a string or dword-sequence)
;  1580         add rdx,qword[rbx+rdi*4-24] -- original plus replacement length..
;  1581 --      lea rax,[rbx+rdi*4]         -- may as well
;  1582 -->     sub qword[rsi-16],1         -- non-1 so no need to dealloc (no, use opRepsPop6da)
;  1583         sub rdx,qword[rsp+8]        -- ..minus slice length
;  1584         mov rcx,rdx                 -- new length
;  1585         mov rdx,[rsp+24]            -- ref addr
;  1586         cmp qword[rbx+rdi*4-24],0   -- replacement length 0?
;  1587         je :opRepsStrStr64
;  1588         cmp byte[rbx+rdi*4-1],0x80
;  1589         je :opRepsStrSeq64
;  1590 
;  1591       ::opRepsStrStr64
;  1592 ----------------------
;  1593         --
;  1594         -- string[i..j]:=string
;  1595         -- new string (size already calculated), built in chunks
;  1596         --
;  1597         call :%pAllocStr            -- damages rax only
;  1598         mov rdi,[rdx]
;  1599         mov [rsp+24],rdi            -- now becomes ref to decref at end
;  1600         mov [rdx],rax               -- Replace the ref at the original address
;  1601         --
;  1602         -- duplicate original items before the slice
;  1603         -- (and set rdx,rax for later use, to avoid AGI stalls)
;  1604         --
;  1605         lea rdi,[rbx+rax*4]
;  1606         mov rdx,[rsp+32]            -- slice end (1-based)
;  1607         mov rcx,[rsp+16]            -- slice start (0-based)
;  1608         mov rax,[rsp+40]            -- rep ref (a string)
;  1609         add rdx,rsi                 -- (lea rdx,[rsi+sliceend+1])
;  1610         shl rax,2                   -- (lea rax,[rep[1]])
;  1611         rep movsb
;  1612         --
;  1613         -- duplicate the replacement string
;  1614         --
;  1615         mov rsi,rax
;  1616         mov rcx,[rax-24]            -- replacement length
;  1617         rep movsb
;  1618         --
;  1619         -- duplicate remaining original items
;  1620         --
;  1621         mov rcx,[rsp]           -- ref length
;  1622         mov rsi,rdx
;  1623         sub rcx,[rsp+32]        -- minus slice end (1-based)
;  1624 --added 16/2/15:
;  1625         add rcx,1               -- include terminating null
;  1626         rep movsb
;  1627         jmp :opRepsPop6da64
;  1628 
;  1629       ::opRepsStrSeq64
;  1630 ----------------------
;  1631         --
;  1632         --  al: type byte ([rsi-1]) (#82)
;  1633         --  rcx: slice length [also in rsp+8]
;  1634 --X     --  rdx: ref length [also in rsp]
;  1635         --  rdx: ref addr
;  1636         --  rdi: rep ref (a dword-sequence, of non-0 length)
;  1637         --  rsi: raw(ref) (a string)
;  1638         --  [rsp] ref length
;  1639         --  [rsp+8] slice length
;  1640         --  [rsp+16] slice start (0-based)
;  1641         --  [rsp+24] ref addr (becomes original ref rsn)
;  1642         --  [rsp+32] slice end (1-based)
;  1643         --  [rsp+40] rep ref
;  1644         --  [rsp+48] return addr
;  1645         --
;  1646         --
;  1647         -- string[i..j]:=dword_sequence
;  1648         -- new sequence (size already calculated), built in chunks
;  1649         --
;  1650         mov rdi,rdx
;  1651         mov rdx,[rsp+48]        -- era
;  1652         call :%pAllocSeq        -- damages rax only
;  1653 --      mov rdi,[rdx]
;  1654         mov rdx,[rdi]
;  1655 --      mov [rsp+24],rdi        -- now becomes ref to dealloc at end
;  1656         mov [rsp+24],rdx        -- now becomes ref to dealloc at end
;  1657 --      mov [rdx],rax           -- Replace the ref at the original address
;  1658         mov [rdi],rax           -- Replace the ref at the original address
;  1659 
;  1660         --
;  1661         -- duplicate original chars before the slice as dwords
;  1662         -- (and set rdx for later use, to avoid an AGI stall)
;  1663         --
;  1664         lea rdi,[rbx+rax*4]
;  1665         mov rcx,[rsp+16]        -- slice start (0-based)
;  1666         mov rdx,[rsp+40]        -- rep ref (a sequence)
;  1667         test rcx,rcx
;  1668         jz @f
;  1669             xor rax,rax
;  1670       ::opRepsStrSeqBeforeLoop64
;  1671             lodsb               -- mov al,[rsi], rsi+=1
;  1672             stosq               -- mov [rdi],rax, rdi+=8
;  1673             sub rcx,1
;  1674             jnz :opRepsStrSeqBeforeLoop64
;  1675 
;  1676       @@:
;  1677         --
;  1678         -- duplicate replacement sequence contents
;  1679         -- (and save rsi in rdx for later use)
;  1680         --
;  1681         mov rax,rsi
;  1682         lea rsi,[rbx+rdx*4]
;  1683         mov rcx,[rbx+rdx*4-24]  -- rep length
;  1684         mov rdx,rax
;  1685       ::opRepsStrSeqMidLoop64
;  1686             lodsq               -- mov rax,[rsi], rsi+=8
;  1687             stosq               -- mov [rdi],rax, rdi+=8
;  1688             cmp rax,r15
;  1689             jl @f
;  1690                 add qword[rbx+rax*4-16],1   -- exception should never happen (we are cloning)
;  1691           @@:
;  1692             sub rcx,1
;  1693             jnz :opRepsStrSeqMidLoop64
;  1694 
;  1695 --    ::opRepsStrSeqMidDone64
;  1696 -----------------------------
;  1697         --
;  1698         -- duplicate remaining original items
;  1699         --
;  1700         mov rsi,rdx
;  1701         mov rcx,[rsp]           -- ref length
;  1702         add rsi,[rsp+8]         -- slice length
;  1703         sub rcx,[rsp+32]        -- minus slice end (1-based)
;  1704         jz :opRepsPop6da64
;  1705         xor rax,rax
;  1706       @@:
;  1707             lodsb               -- mov al,[rsi], rsi+=1
;  1708             stosq               -- mov [rdi],rax, rdi+=8
;  1709             sub rcx,1
;  1710             jnz @b
;  1711         nop
;  1712         jmp :opRepsPop6da64
;  1713     []
;  1714       }
;  1715 
    jmp #00462C8F (:%opRetf)              ;#00460669: 351 21260000               v  00 00  1 509      
;C:\Phix\builtins\VM\pMkSqN.e:
;=============================
;     1 --
;     2 -- pMkSqN.e
;     3 -- ========
;     4 --  Make Sequence opcode
;     5 --
;     6 
;     7 include builtins\VM\pHeap.e     -- (needed for :%pDealloc, :%pAllocSeq)
;     8 
;     9 --26/8/22 (spotted in passing)
;    10 --#ilASM{ jmp :%opRetf
;    11 #ilASM{ jmp :!opCallOnceYeNot
                jmp :!opCallOnceYeNot     ;#0046013E: 351 B0260000               v  00 00  1   1      
;    12 
;    13 --/*
;    14 procedure :%pMkSq(:%)
;    15 end procedure -- (for Edita/CtrlQ)
;    16 --*/
;    17     :%pMkSq
;    18 -----------
;    19         -- calling convention:
;    20         --  mov r/edx,N
;    21         --  push <return addr>
;    22         --  push <dest addr>
;    23         --  push [eN]..[e1]     -- pre-incref'd
;    24         --  mov r/edi,[dest]    -- prev dest ref
;    25         --  jmp :%pMkSq
;    26         --<return addr>:
;    27     [32]
;    28         mov ecx,edx
                mov ecx,edx               ;#00460143: 213312                     uv 02 04  1   2      
;    29         mov edx,[esp+edx*4+4]   -- era
                mov edx,[esp+edx*4+4]     ;#00460145: 213124224 04               vu 04 14  1   2      
;    30         call :%pAllocSeq        -- damages eax only (needs edx set)
                call #00463832 (:%pAllocSeq)  ;#00460149: 350 E4360000               v  00 00  1   3      
;    31         mov edx,edi             -- for later dealloc
                mov edx,edi               ;#0046014E: 213327                     uv 04 80  1   4      
;    32         lea edi,[ebx+eax*4]
                lea edi,[ebx+eax*4]       ;#00460150: 215074203                  vu 80 09  1   4      
;    33         mov esi,esp
                mov esi,esp               ;#00460153: 213364                     uv 40 10  1   5      
;    34         lea esp,[esp+ecx*4]
                lea esp,[esp+ecx*4]       ;#00460155: 215044214                  vu 10 12  1   5      
;    35         rep movsd
                rep movsd                 ;#00460158: 363:245                    np C2 C2  4   8    *40*
;    36         pop esi                 -- dest addr
                pop esi                   ;#0046015A: 136                        uv 40 00  1  12      
;    37         cmp edx,h4
                cmp edx,h4                ;#0046015B: 201372 00000040            vu 00 04  1  12      
;    38         jle @f
                jle #00460177             ;#00460161: 176 14                     v  00 00  1  13      
;    39             mov ecx,[ebx+edx*4-8]   -- refcount
                    mov ecx,[ebx+edx*4-8]  ;#00460163: 213114223 F8               uv 02 0C  1  14      
;    40             mov [esi],eax
                    mov [esi],eax         ;#00460167: 211006                     vu 00 41  1  14      
;    41             sub ecx,1
                    sub ecx,1             ;#00460169: 203351 01                  uv 02 02  1  15      
;    42             jz :%pDealloc
                    jz #004639A8 (:%pDealloc)  ;#0046016C: 017204 36380000            v  00 00  1  15      
;    43             mov [ebx+edx*4-8],ecx   -- refcount
                    mov [ebx+edx*4-8],ecx  ;#00460172: 211114223 F8               uv 00 0E  1  16      
;    44             ret
                    ret                   ;#00460176: 303                        np 00 00  2  17      
;    45       @@:
;    46         mov [esi],eax
                mov [esi],eax             ;#00460177: 211006                     uv 00 41  1  19      
;    47     [64]
;    48 --DEV check this zero-fills on X64: [YEP] (and what regs pAllocSeq(X64) damages)
;    49 --lea rcx,[rbx-1] -- (set rcx to -1 for the following test)
;    50 --mov ecx,edx
;    51         mov rcx,rdx
;    52 --sub rsp,8*5? (if N is odd/even may need an aligning push/pop on the call)
;    53         mov rdx,[rsp+rdx*8+8]   -- era
;    54         call :%pAllocSeq        -- damages eax[DEV?] only (needs edx set)
;    55 -- (damages rax/r8/r9/r10/r11/r13/r15 [at least])
;    56         mov rdx,rdi             -- for later dealloc
;    57         lea rdi,[rbx+rax*4]     -- (yes that is a *4, ref->raw)
;    58         mov rsi,rsp
;    59         lea rsp,[rsp+rcx*8]
;    60         rep movsq
;    61         mov r15,h4
;    62         pop rsi                 -- dest addr
;    63 --      cmp rdx,h4
;    64         cmp rdx,r15
;    65         jle @f
;    66             mov rcx,[rbx+rdx*4-16]  -- refcount
;    67             mov [rsi],rax
;    68             sub rcx,1
;    69             jz :%pDealloc
;    70             mov [rbx+rdx*4-16],rcx  -- refcount
;    71             ret
;    72       @@:
;    73         mov [rsi],rax
;    74     []
;    75         ret
                ret                       ;#00460179: 303                        np 00 00  2  20      
;    76       }
;    77 
    jmp #00462C8F (:%opRetf)              ;#0046017A: 351 102B0000               v  00 00  1  22      
;C:\Phix\builtins\VM\pApnd.e:
;============================
;     1 --
;     2 -- pApnd.e
;     3 -- =======
;     4 --
;     5 --  Implements :%opApnd (append()/prepend()), opConcat(&), opConcatN, and opCatsi.
;     6 --
;     7 --  The latter two are optimised forms of opConcat, respectively for the a&b&c[&...] 
;     8 --  case, and when concatenating sequences of integer, so refcounting can be avoided.
;     9 --
;    10 
;    11 -- Note: originally commented as a = append(b,c), if you find any such references
;    12 --       remaining, map them to p1 = append(p2,p3) (pretty please)
;    13 
;    14 -- Technical note: As per pfileioN.e, append guarantees to have all content in place
;    15 --                  before the ref is updated. Similar does NOT apply to prepend or
;    16 --                  concat. (see "Multithreading issues" in pfileioN.e)
;    17 
;    18 include VM\pHeap.e  -- :%pDealloc/:%pAllocSeq/:%pAllocStr/:%pFreePool
;    19 
;    20 --26/8/22 (spotted in passing)
;    21 --#ilASM{ jmp :%opRetf
;    22 #ilASM{ jmp :!opCallOnceYeNot
                jmp :!opCallOnceYeNot     ;#0045F9F1: 351 FD2D0000               v  00 00  1   1      
;    23 
;    24 --DEV fixme... (new error code, unknown type byte [internal error])
;    25  ::eNNunknown
;    26     int3
            int3                          ;#0045F9F6: 314                        np 00 00 13   2      
;    27 
;    28 --/*
;    29 procedure :%opApnd(:%)
;    30 end procedure -- (for Edita/CtrlQ)
;    31 --*/
;    32     :%opApnd                    -- p1=append/prepend(p2,p3); also several p1=p2&p3 cases, see opConcat
;    33 ------------
;    34     [32]
;    35         --calling convention (p1 = append/prepend(p2,p3))
;    36         --  lea edx,[p1]
;    37         --  lea edi,[p2]    (opUnassigned)???[DEV]
;    38         --  lea ecx,[p3]    (opUnassigned)
;    39         --  mov eax,0       or 1 for prepend
;    40         --  call :%opApnd               -- [edx]=append([edi],[ecx])
;    41         push eax    -- flag@[esp+12] (1=prepend, 0=append)
                push eax                  ;#0045F9F7: 120                        uv 00 01  1  15      
;    42         push ecx    -- addr p3@[esp+8]
                push ecx                  ;#0045F9F8: 121                        vu 00 02  1  15      
;    43         push edi    -- addr p2@[esp+4]
                push edi                  ;#0045F9F9: 127                        uv 00 80  1  16      
;    44         push edx    -- addr p1@[esp]
                push edx                  ;#0045F9FA: 122                        vu 00 04  1  16      
;    45         mov esi,[edi]           -- ref of p2
                mov esi,[edi]             ;#0045F9FB: 213067                     uv 40 80  1  17      
;    46         mov ecx,[ecx]           -- ref of p3
                mov ecx,[ecx]             ;#0045F9FD: 213011                     vu 02 02  1  17      
;    47     ::opApndA   -- (entry point for p1=p2&p3 -> p1=append(p2,p3) when p3 atom.)
;    48         cmp esi,h4
                cmp esi,h4                ;#0045F9FF: 201376 00000040            uv 00 40  1  18      
;    49         jl :ApndNewSeq2
                jl #0045FA6B              ;#0045FA05: 174 64                     v  00 00  1  18      
;    50     :%opPpndSA  -- (entry point for p1=p2&p3 -> p1=prepend(p3,p2) when p2 atom, see ppMap below.)
;    51                 -- exception here mapped to e93vhnbaav(edi)
;    52         mov al,[ebx+esi*4-1]    -- type byte
                mov al,[ebx+esi*4-1]      ;#0045FA07: 212104263 FF               uv 01 48  1  19      
;    53         mov edx,[ebx+esi*4-12]  -- length
                mov edx,[ebx+esi*4-12]    ;#0045FA0B: 213124263 F4               vu 04 48  1  19      
;    54         cmp al,0x12
                cmp al,#12                ;#0045FA0F: 200370 12                  uv 00 01  1  20      
;    55         je :ApndNewSeq2
                je #0045FA6B              ;#0045FA12: 164 57                     v  00 00  1  20      
;    56         shl esi,2
                shl esi,2                 ;#0045FA14: 301346 02                  u  40 40  1  21      
;    57         
;    58         cmp al,0x80
                cmp al,#80                ;#0045FA17: 200370 80                  vu 00 01  1  21      
;    59         je :ApndSeq
                je #0045FBB1              ;#0045FA1A: 017204 91010000            v  00 00  1  22      
;    60         cmp al,0x82
                cmp al,#82                ;#0045FA20: 200370 82                  uv 00 01  1  23      
;    61         jne :eNNunknown
                jne #0045F9F6             ;#0045FA23: 165 D1                     v  00 00  1  23      
;    62         cmp ecx,#FF
                cmp ecx,255               ;#0045FA25: 201371 FF000000            uv 00 02  1  24      
;    63         ja :ApndExpandString    -- (if not #00..#FF)
                ja #0045FB51              ;#0045FA2B: 017207 20010000            v  00 00  1  24      
;    64         mov eax,ecx             -- save char
                mov eax,ecx               ;#0045FA31: 213301                     uv 01 02  1  25      
;    65         cmp dword[esi-8],1      -- check ref count of 1
                cmp dword[esi-8],1        ;#0045FA33: 203176 F8 01               u  00 40  2  26      
;    66         jne :ApndNewStr
                jne #0045FB0C             ;#0045FA37: 017205 CF000000            v  00 00  1  27      
;    67         cmp dword[esp+12],0     -- (check prepend flag)
                cmp dword[esp+12],0       ;#0045FA3D: 203174044 0C 00            u  00 10  2  28      
;    68         jne :ApndNewStr         -- (prepend must create a new string)   [the old opPpnd did it in situ, but I doubt that gains any]
                jne #0045FB0C             ;#0045FA42: 017205 C4000000            v  00 00  1  29      
;    69         cmp edi,[esp]           -- must also be pbr-optimise (x=append(x,y))
                cmp edi,[esp]             ;#0045FA48: 073074044                  uv 00 90  2  30      
;    70         jne :ApndNewStr         --  (we already know it is not circular, ie not x=append(x,x), 
                jne #0045FB0C             ;#0045FA4B: 017205 BB000000            v  00 00  1  31      
;    71                                 --   as p3 is a char here, and p1(==p2) is a string)
;    72         lea ecx,[edx+16+1]
                lea ecx,[edx+17]          ;#0045FA51: 215112 11                  uv 02 04  1  32      
;    73 --  mov edi,[esi-20]        -- slack (at start/left)
;    74 --  sub ecx,edi     -- DOH! no slack on strings!
;    75         cmp ecx,[esi-16]        -- maxlen
                cmp ecx,[esi-16]          ;#0045FA54: 073116 F0                  uv 00 42  2  33 02   
;    76         je :ApndNewStr          -- and have space/check maxlen
                je #0045FB0C              ;#0045FA57: 017204 AF000000            v  00 00  1  34      
;    77         -- (jge would also be fine, though it will/shd never be g)
;    78         -- so expand string by one char in situ:
;    79         lea ecx,[edx+1]
                lea ecx,[edx+1]           ;#0045FA5D: 215112 01                  uv 02 04  1  35      
;    80         mov word[esi+edx],ax    -- includes a new trailing null
                mov word[esi+edx],ax      ;#0045FA60: 146:211004026              vu 00 45  1  35      
;    81         mov [esi-12],ecx        -- increase length
                mov [esi-12],ecx          ;#0045FA64: 211116 F4                  uv 00 42  1  36      
;    82         add esp,16
                add esp,16                ;#0045FA67: 203304 10                  vu 10 10  1  36      
;    83         ret
                ret                       ;#0045FA6A: 303                        np 00 00  2  37      
;    84     [64]
;    85         --calling convention (p1 = append/prepend(p2,p3))
;    86         --  lea rdx,[p1]
;    87         --  lea rdi,[p2]    (opUnassigned)
;    88         --  lea rcx,[p3]    (opUnassigned)
;    89         --  mov rax,0       or 1 for prepend
;    90         --  call :%opApnd               -- [rdx]=append([rdi],[rcx])
;    91         push rax    -- flag@[rsp+24] (1=prepend, 0=append)
;    92         push rcx    -- p3@[rsp+16]
;    93         push rdi    -- p2@[rsp+8]
;    94         push rdx    -- p1@[rsp]
;    95         mov rsi,[rdi]           -- ref of p2
;    96         mov rcx,[rcx]           -- ref of p3
;    97     ::opApndA   -- (entry point for p1=p2&p3 -> p1=append(p2,p3) when p3 atom.)
;    98         mov r15,h4
;    99         cmp rsi,r15
;   100         jl :ApndNewSeq2
;   101     :%opPpndSA  -- (entry point for p1=p2&p3 -> p1=prepend(p3,p2) when p2 atom, see ppMap below.)
;   102                 -- exception here mapped to e93vhnbaav(rdi)
;   103         mov al,[rbx+rsi*4-1]    -- type byte
;   104         mov rdx,[rbx+rsi*4-24]  -- length
;   105         cmp al,0x12
;   106         je :ApndNewSeq2
;   107         shl rsi,2
;   108         
;   109         cmp al,0x80
;   110         je :ApndSeq
;   111         cmp al,0x82
;   112         jne :eNNunknown
;   113         cmp rcx,#FF
;   114         ja :ApndExpandString    -- (if not #00..#FF)
;   115         mov rax,rcx             -- save char
;   116         cmp qword[rsi-16],1     -- check ref count of 1
;   117         jne :ApndNewStr
;   118         cmp qword[rsp+24],0     -- (check prepend flag)
;   119         jne :ApndNewStr         -- (prepend must create a new string)   [the old opPpnd did it in situ, but I doubt that gains any]
;   120         cmp rdi,[rsp]           -- must also be pbr-optimise (x=append(x,y))
;   121         jne :ApndNewStr         --  (we already know it is not circular, ie not x=append(x,x), 
;   122                                 --   as p3 is a char here, and p1(==p2) is a string)
;   123         lea rcx,[rdx+32+1]
;   124 --  mov edi,[esi-20]        -- slack (at start/left)
;   125 --  sub ecx,edi     -- DOH! no slack on strings!
;   126         cmp rcx,[rsi-32]        -- maxlen
;   127         je :ApndNewStr          -- and have space/check maxlen
;   128         -- (jge would also be fine, though it will/shd never be g)
;   129         -- so expand string by one char in situ:
;   130         lea rcx,[rdx+1]
;   131         mov word[rsi+rdx],ax    -- includes a new trailing null
;   132         mov [rsi-24],rcx        -- increase length
;   133         add rsp,32
;   134         ret
;   135     []
;   136 
;   137   ::ApndNewSeq2
;   138 ---------------
;   139         -- new sequence length 2 (p2 is atom)
;   140     [32]
;   141         mov edi,ecx
                mov edi,ecx               ;#0045FA6B: 213371                     uv 80 02  1  39      
;   142         cmp dword[esp+12],0         -- prepend?
                cmp dword[esp+12],0       ;#0045FA6D: 203174044 0C 00            u  00 10  2  41    *10*
;   143         je @f
                je #0045FA76              ;#0045FA72: 164 02                     v  00 00  1  42      
;   144 --      jne @f
;   145             xchg esi,edi
                    xchg esi,edi          ;#0045FA74: 207376                     np C0 C0  3  43      
;   146       @@:
;   147         cmp esi,#FF
                cmp esi,255               ;#0045FA76: 201376 FF000000            uv 00 40  1  46      
;   148         ja @f
                ja #0045FA86              ;#0045FA7C: 167 08                     v  00 00  1  46      
;   149             cmp edi,#FF
                    cmp edi,255           ;#0045FA7E: 201377 FF000000            uv 00 80  1  47      
;   150             jbe :ApndNewStr2
                    jbe #0045FAD5         ;#0045FA84: 166 4F                     v  00 00  1  47      
;   151       @@:
;   152         mov ecx,2
                mov ecx,2                 ;#0045FA86: 271 02000000               uv 02 00  1  48      
;   153         mov edx,[esp+16]            -- era
                mov edx,[esp+16]          ;#0045FA8B: 213124044 10               vu 04 10  1  48      
;   154         call :%pAllocSeq
                call #00463832 (:%pAllocSeq)  ;#0045FA8F: 350 9E3D0000               v  00 00  1  49      
;   155         mov [ebx+eax*4],esi         -- new[1]:=p2
                mov [ebx+eax*4],esi       ;#0045FA94: 211064203                  uv 00 49  1  50      
;   156 --      mov [ebx+eax*4],edi         -- new[1]:=p2
;   157         mov edx,[esp]
                mov edx,[esp]             ;#0045FA97: 213024044                  vu 04 10  1  50      
;   158         cmp esi,h4
                cmp esi,h4                ;#0045FA9A: 201376 00000040            uv 00 40  1  51      
;   159         jl @f
                jl #0045FAA7              ;#0045FAA0: 174 05                     v  00 00  1  51      
;   160             add dword[ebx+esi*4-8],1
                    add dword[ebx+esi*4-8],1  ;#0045FAA2: 203104263 F8 01            u  00 48  3  52      
;   161       @@:
;   162         mov [ebx+eax*4+4],edi       -- new[2]:=p3
                mov [ebx+eax*4+4],edi     ;#0045FAA7: 211174203 04               vu 00 89  1  54      
;   163         cmp edi,h4
                cmp edi,h4                ;#0045FAAB: 201377 00000040            uv 00 80  1  55      
;   164         jl @f
                jl #0045FAB8              ;#0045FAB1: 174 05                     v  00 00  1  55      
;   165             add dword[ebx+edi*4-8],1
                    add dword[ebx+edi*4-8],1  ;#0045FAB3: 203104273 F8 01            u  00 88  3  56      
;   166       @@:
;   167         mov ecx,[edx]
                mov ecx,[edx]             ;#0045FAB8: 213012                     vu 02 04  1  58      
;   168         add esp,16
                add esp,16                ;#0045FABA: 203304 10                  uv 10 10  1  59      
;   169         mov [edx],eax
                mov [edx],eax             ;#0045FABD: 211002                     vu 00 05  1  59      
;   170         cmp ecx,h4
                cmp ecx,h4                ;#0045FABF: 201371 00000040            uv 00 02  1  60      
;   171 --18/2/15!
;   172 --      jl @f
;   173         jle @f
                jle #0045FAD4             ;#0045FAC5: 176 0D                     v  00 00  1  60      
;   174             mov edx,ecx
                    mov edx,ecx           ;#0045FAC7: 213321                     uv 04 02  1  61      
;   175             sub dword[ebx+ecx*4-8],1
                    sub dword[ebx+ecx*4-8],1  ;#0045FAC9: 203154213 F8 01            u  00 0A  3  62      
;   176             jz :%pDealloc
                    jz #004639A8 (:%pDealloc)  ;#0045FACE: 017204 D43E0000            v  00 00  1  64      
;   177       @@:
;   178         ret
                ret                       ;#0045FAD4: 303                        np 00 00  2  65      
;   179     [64]
;   180         mov rdi,rcx
;   181         cmp qword[rsp+24],0         -- prepend?
;   182         je @f
;   183 --      jne @f
;   184             xchg rsi,rdi
;   185       @@:
;   186         cmp rsi,#FF
;   187         ja @f
;   188             cmp rdi,#FF
;   189             jbe :ApndNewStr2
;   190       @@:
;   191         mov rcx,2
;   192         mov rdx,[rsp+32]            -- era
;   193         call :%pAllocSeq
;   194         mov [rbx+rax*4],rsi         -- new[1]:=p2
;   195 --      mov [ebx+eax*4],edi         -- new[1]:=p2
;   196         mov rdx,[rsp]
;   197         cmp rsi,r15
;   198         jl @f
;   199             add qword[rbx+rsi*4-16],1
;   200       @@:
;   201         mov [rbx+rax*4+8],rdi       -- new[2]:=p3
;   202         cmp rdi,r15
;   203         jl @f
;   204             add qword[rbx+rdi*4-16],1
;   205       @@:
;   206         mov rcx,[rdx]
;   207         add rsp,32
;   208         mov [rdx],rax
;   209         cmp rcx,r15
;   210 --18/2/15!
;   211 --      jl @f
;   212         jle @f
;   213             mov rdx,rcx
;   214             sub qword[rbx+rcx*4-16],1
;   215             jz :%pDealloc
;   216       @@:
;   217         ret
;   218     []
;   219     
;   220   ::ApndNewStr2
;   221 ---------------
;   222         -- new string length 2 (p2 and p3 are both #00..#FF)
;   223         --
;   224         --  (you could probably drop this if it causes any problems, just
;   225         --   as long as you also document append(chr,chr)->dword_sequence; 
;   226         --   it was more because of that not really sounding quite right, 
;   227         --   as opposed to it being clearly wrong, that this went in..)
;   228         --
;   229     [32]
;   230 --DEV (this might want to be shl edi,8)
;   231 --      shl esi,8                   -- (to make a 16-bit word of the two chars)
;   232         shl edi,8
                shl edi,8                 ;#0045FAD5: 301347 08                  u  80 80  1  67      
;   233         mov ecx,2
                mov ecx,2                 ;#0045FAD8: 271 02000000               vu 02 00  1  67      
;   234         add esi,edi
                add esi,edi               ;#0045FADD: 001376                     uv 40 C0  1  68      
;   235         mov edi,[esp]
                mov edi,[esp]             ;#0045FADF: 213074044                  vu 80 10  1  68      
;   236         call :%pAllocStr
                call #0046377D (:%pAllocStr)  ;#0045FAE2: 350 963C0000               v  00 00  1  69      
;   237         mov edx,[edi]
                mov edx,[edi]             ;#0045FAE7: 213027                     uv 04 80  1  72    *80*
;   238         mov ecx,esi
                mov ecx,esi               ;#0045FAE9: 213316                     vu 02 40  1  72      
;   239         add esp,16
                add esp,16                ;#0045FAEB: 203304 10                  uv 10 10  1  73      
;   240 --DEV try ecx (min string length is 19), or for that matter esi (null terminator and 1 more 0)
;   241         mov [ebx+eax*4],cx
                mov word[ebx+eax*4],cx    ;#0045FAEE: 146:211014203              vu 00 0B  1  73      
;   242         mov [ebx+eax*4+2],bl        -- and a null terminator
                mov [ebx+eax*4+2],bl      ;#0045FAF2: 210134203 02               uv 00 09  1  74      
;   243         mov [edi],eax
                mov [edi],eax             ;#0045FAF6: 211007                     vu 00 81  1  74      
;   244         cmp edx,h4
                cmp edx,h4                ;#0045FAF8: 201372 00000040            uv 00 04  1  75      
;   245 --26/1/15!
;   246 --      jl @f
;   247         jle @f
                jle #0045FB0B             ;#0045FAFE: 176 0B                     v  00 00  1  75      
;   248             sub dword[ebx+edx*4-8],1
                    sub dword[ebx+edx*4-8],1  ;#0045FB00: 203154223 F8 01            u  00 0C  3  76      
;   249             jz :%pDealloc
                    jz #004639A8 (:%pDealloc)  ;#0045FB05: 017204 9D3E0000            v  00 00  1  78      
;   250       @@:
;   251         ret
                ret                       ;#0045FB0B: 303                        np 00 00  2  79      
;   252     [64]
;   253         shl rdi,8                   -- (to make a 16-bit word of the two chars)
;   254         mov rcx,2
;   255         add rsi,rdi
;   256         mov rdi,[rsp]
;   257         call :%pAllocStr
;   258         mov rdx,[rdi]
;   259         mov rcx,rsi
;   260         add rsp,32
;   261 --DEV try rcx (min string lenth is 31), or for that matter, rsi (null terminator and 5 more 0s)
;   262         mov [rbx+rax*4],cx
;   263         mov [rbx+rax*4+2],bl        -- and a null terminator
;   264         mov [rdi],rax
;   265         cmp rdx,r15
;   266 --26/1/15!
;   267 --      jl @f
;   268         jle @f
;   269             sub qword[rbx+rdx*4-16],1
;   270             jz :%pDealloc
;   271       @@:
;   272         ret
;   273     []
;   274 
;   275   ::ApndNewStr
;   276 --------------
;   277     [32]
;   278         mov edi,[esp+12]        -- prepend flag
                mov edi,[esp+12]          ;#0045FB0C: 213174044 0C               uv 80 10  1  81      
;   279         push eax                --[1] save char
                push eax                  ;#0045FB10: 120                        vu 00 01  1  81      
;   280         lea ecx,[edx+1]         -- original length+1
                lea ecx,[edx+1]           ;#0045FB11: 215112 01                  uv 02 04  1  82      
;   281         call :%pAllocStr        -- damages eax only
                call #0046377D (:%pAllocStr)  ;#0045FB14: 350 643C0000               v  00 00  1  82      
;   282         lea edi,[edi+eax*4]     -- edi -> new[1] for append, new[2] for prepend
                lea edi,[edi+eax*4]       ;#0045FB19: 215074207                  uv 80 81  1  83      
;   283         mov ecx,edx
                mov ecx,edx               ;#0045FB1C: 213312                     vu 02 04  1  83      
;   284 ----DEV:
;   285 --                   -- This shaves about 9% off the total time for append():
;   286 --                   shr ecx,2
;   287 --                   and dl,0x3
;   288 --                   rep movsd
;   289 --                   mov cl,dl
;   290         rep movsb
                rep movsb                 ;#0045FB1E: 363:244                    np C2 C2  4  86    *80*
;   291         mov esi,[esp+4]         -- target address
                mov esi,[esp+4]           ;#0045FB20: 213164044 04               uv 40 10  1  90      
;   292         pop ecx                 --[1] restore char
                pop ecx                   ;#0045FB24: 131                        vu 02 00  1  90      
;   293         cmp dword[esp+12],0
                cmp dword[esp+12],0       ;#0045FB25: 203174044 0C 00            u  00 10  2  91      
;   294         je :normalappend
                je #0045FB33              ;#0045FB2A: 164 07                     v  00 00  1  92      
;   295             mov [edi],bl        -- trailing null
                    mov [edi],bl          ;#0045FB2C: 210037                     uv 00 88  1  93      
;   296             mov [ebx+eax*4],cl  -- plant prepended char at new[1]
                    mov [ebx+eax*4],cl    ;#0045FB2E: 210014203                  vu 00 0B  1  93      
;   297             jmp @f
                    jmp #0045FB36         ;#0045FB31: 353 03                     v  00 00  1  94      
;   298       ::normalappend
;   299             mov [edi],cx        -- includes trailing null
                    mov word[edi],cx      ;#0045FB33: 146:211017                 uv 00 82  1  95      
;   300       @@:
;   301         mov edx,[esi]           -- previous value (if any)
                mov edx,[esi]             ;#0045FB36: 213026                     vu 04 40  1  95      
;   302         add esp,16
                add esp,16                ;#0045FB38: 203304 10                  uv 10 10  1  96      
;   303         mov [esi],eax           -- newly allocated ref
                mov [esi],eax             ;#0045FB3B: 211006                     vu 00 41  1  96      
;   304         cmp edx,h4
                cmp edx,h4                ;#0045FB3D: 201372 00000040            uv 00 04  1  97      
;   305         jle @f
                jle #0045FB50             ;#0045FB43: 176 0B                     v  00 00  1  97      
;   306             sub dword[ebx+edx*4-8],1
                    sub dword[ebx+edx*4-8],1  ;#0045FB45: 203154223 F8 01            u  00 0C  3  98      
;   307             jz :%pDealloc
                    jz #004639A8 (:%pDealloc)  ;#0045FB4A: 017204 583E0000            v  00 00  1 100      
;   308       @@:
;   309         ret
                ret                       ;#0045FB50: 303                        np 00 00  2 101      
;   310     [64]
;   311         mov rdi,[rsp+24]        -- prepend flag
;   312         push rax                --[1] save char
;   313         lea rcx,[rdx+1]         -- original length+1
;   314         call :%pAllocStr        -- damages eax only
;   315         lea rdi,[rdi+rax*4]     -- rdi -> new[1] for append, new[2] for prepend
;   316         mov rcx,rdx
;   317 ----DEV:
;   318 --                   -- This shaves about 9% off the total time for append():
;   319 --                   shr rcx,3
;   320 --                   and dl,0x7
;   321 --                   rep movsq
;   322 --                   mov cl,dl
;   323         rep movsb
;   324         mov rsi,[rsp+8]         -- target address
;   325         pop rcx                 --[1] restore char
;   326         cmp qword[rsp+24],0
;   327         je :normalappend
;   328             mov [rdi],bl        -- trailing null
;   329             mov [rbx+rax*4],cl  -- plant prepended char at new[1]
;   330             jmp @f
;   331       ::normalappend
;   332             mov [rdi],cx        -- includes trailing null
;   333       @@:
;   334         mov rdx,[rsi]           -- previous value (if any)
;   335         add rsp,32
;   336         mov [rsi],rax           -- newly allocated ref
;   337         cmp rdx,r15
;   338         jle @f
;   339             sub qword[rbx+rdx*4-16],1
;   340             jz :%pDealloc
;   341       @@:
;   342         ret
;   343     []
;   344 
;   345   ::ApndExpandString
;   346 --------------------
;   347     [32]
;   348         mov edi,[esp+12]        -- prepend flag...
                mov edi,[esp+12]          ;#0045FB51: 213174044 0C               uv 80 10  1 103      
;   349         push ecx                --[2] save p3 ref
                push ecx                  ;#0045FB55: 121                        vu 00 02  1 103      
;   350         shl edi,2               --              ...->dword
                shl edi,2                 ;#0045FB56: 301347 02                  u  80 80  1 104      
;   351         lea ecx,[edx+1]         -- length+1
                lea ecx,[edx+1]           ;#0045FB59: 215112 01                  vu 02 04  1 104      
;   352         mov edx,[esp+16]        -- era
                mov edx,[esp+16]          ;#0045FB5C: 213124044 10               uv 04 10  1 105      
;   353         call :%pAllocSeq        -- damages eax only
                call #00463832 (:%pAllocSeq)  ;#0045FB60: 350 CD3C0000               v  00 00  1 105      
;   354 --  mov edi,eax
;   355 --  shl edi,2
;   356 --DEV flag (the old PpndExpandString put slack at start, but I doubt that gains any) (done)
;   357         lea edi,[edi+eax*4]     -- edi->(append:new[1], or prepend:new[2])
                lea edi,[edi+eax*4]       ;#0045FB65: 215074207                  uv 80 81  1 106      
;   358 --      lea edi,[ebx+eax*4]
;   359         sub ecx,1
                sub ecx,1                 ;#0045FB68: 203351 01                  vu 02 02  1 106      
;   360         je :ApndExpandZero      -- (append(<empty string>,<non-char>) case)
                je #0045FB78              ;#0045FB6B: 164 0B                     v  00 00  1 107      
;   361         push eax                --[3] save new ref
                push eax                  ;#0045FB6D: 120                        uv 00 01  1 108      
;   362         xor eax,eax
                xor eax,eax               ;#0045FB6E: 061300                     vu 01 01  1 108      
;   363       @@:
;   364         lodsb                   -- mov al,[esi], esi+=1
                lodsb                     ;#0045FB70: 254                        np 41 40  2 109      
;   365         stosd                   -- mov [edi],eax; edi+=4
                stosd                     ;#0045FB71: 253                        np 80 81  3 111      
;   366 --      mov al,[esi]
;   367 --      inc esi
;   368 --      mov [edi],eax
;   369 --      add edi,4
;   370         sub ecx,1
                sub ecx,1                 ;#0045FB72: 203351 01                  uv 02 02  1 114      
;   371         jnz @b
                jnz #0045FB70             ;#0045FB75: 165 F9                     v  00 00  1 114      
;   372         pop eax                 --[3] restore new ref
                pop eax                   ;#0045FB77: 130                        uv 01 00  1 115      
;   373      ::ApndExpandZero
;   374         mov esi,[esp+4]         -- target address
                mov esi,[esp+4]           ;#0045FB78: 213164044 04               vu 40 10  1 115      
;   375         pop ecx                 --[2] restore p3 ref
                pop ecx                   ;#0045FB7C: 131                        uv 02 00  1 116      
;   376 --DEV flag (done)
;   377         cmp dword[esp+12],0     -- if prepend
                cmp dword[esp+12],0       ;#0045FB7D: 203174044 0C 00            u  00 10  2 117      
;   378         je @f
                je #0045FB87              ;#0045FB82: 164 03                     v  00 00  1 118      
;   379             lea edi,[ebx+eax*4] -- replace new[1] (not new[$])
                    lea edi,[ebx+eax*4]   ;#0045FB84: 215074203                  uv 80 09  1 119      
;   380       @@:
;   381         add esp,16
                add esp,16                ;#0045FB87: 203304 10                  vu 10 10  1 119      
;   382         mov edx,[esi]           -- previous value (if any)
                mov edx,[esi]             ;#0045FB8A: 213026                     uv 04 40  1 120      
;   383         cmp ecx,h4
                cmp ecx,h4                ;#0045FB8C: 201371 00000040            vu 00 02  1 120      
;   384         jl @f
                jl #0045FB99              ;#0045FB92: 174 05                     v  00 00  1 121      
;   385 --    ::ApndExpandStrUa:            -- exception here mapped to e92vhnbaavap3feh (now opUnassigned [DEV])
;   386             add dword[ebx+ecx*4-8],1
                    add dword[ebx+ecx*4-8],1  ;#0045FB94: 203104213 F8 01            u  00 0A  3 122      
;   387       @@:
;   388         mov [edi],ecx
                mov [edi],ecx             ;#0045FB99: 211017                     vu 00 82  1 124      
;   389         mov [esi],eax           -- newly allocated ref
                mov [esi],eax             ;#0045FB9B: 211006                     uv 00 41  1 125      
;   390         cmp edx,h4
                cmp edx,h4                ;#0045FB9D: 201372 00000040            vu 00 04  1 125      
;   391         jle @f
                jle #0045FBB0             ;#0045FBA3: 176 0B                     v  00 00  1 126      
;   392             sub dword[ebx+edx*4-8],1
                    sub dword[ebx+edx*4-8],1  ;#0045FBA5: 203154223 F8 01            u  00 0C  3 127      
;   393             jz :%pDealloc
                    jz #004639A8 (:%pDealloc)  ;#0045FBAA: 017204 F83D0000            v  00 00  1 129      
;   394       @@:
;   395         ret
                ret                       ;#0045FBB0: 303                        np 00 00  2 130      
;   396     [64]
;   397         mov rdi,[rsp+24]        -- prepend flag...
;   398         push rcx                --[2] save p3 ref
;   399 --      shl rdi,2               --              ...->dword
;   400         shl rdi,3               --              ...->qword
;   401         lea rcx,[rdx+1]         -- length+1
;   402         mov rdx,[rsp+32]        -- era
;   403         call :%pAllocSeq        -- damages eax only
;   404         lea rdi,[rdi+rax*4]     -- rdi->(append:new[1], or prepend:new[2])
;   405         sub rcx,1
;   406         je :ApndExpandZero      -- (append(<empty string>,<non-char>) case)
;   407         push rax                --[3] save new ref
;   408         xor rax,rax
;   409       @@:
;   410         lodsb                   -- mov al,[rsi], rsi+=1
;   411         stosq                   -- mov [rdi],rax; rdi+=8
;   412         sub rcx,1
;   413         jnz @b
;   414         pop rax                 --[3] restore new ref
;   415      ::ApndExpandZero
;   416 --      mov rsi,[rsp+4]         -- target address
;   417         mov rsi,[rsp+8]         -- target address
;   418         pop rcx                 --[2] restore p3 ref
;   419         cmp dword[rsp+24],0     -- if prepend
;   420         je @f
;   421             lea rdi,[rbx+rax*4] -- replace new[1] (not new[$])
;   422       @@:
;   423         add rsp,32
;   424         mov rdx,[rsi]           -- previous value (if any)
;   425         cmp rcx,r15
;   426         jl @f
;   427             add qword[rbx+rcx*4-16],1
;   428       @@:
;   429         mov [rdi],rcx
;   430         mov [rsi],rax           -- newly allocated ref
;   431         cmp rdx,r15
;   432         jle @f
;   433             sub qword[rbx+rdx*4-16],1
;   434             jz :%pDealloc
;   435       @@:
;   436         ret
;   437     []
;   438 
;   439   ::ApndSeq
;   440 -----------
;   441     [32]
;   442         -- recap:
;   443         --  addr p1 (result)    @ [esp]
;   444         --  addr p2 in edi and  @ [esp+4]
;   445         --  addr p3             @ [esp+8]
;   446         --  prepend flag        @ [esp+12]
;   447         --  era                 @ [esp+16]
;   448         --  esi = raw(p2)
;   449         --  edx = length(p2) (==[esi-12])
;   450         --  al is 0x80      (==[esi-1])
;   451         --  ecx is ref(p3)
;   452         --  edi is addr p2
;   453         --
;   454         cmp ecx,h4
                cmp ecx,h4                ;#0045FBB1: 201371 00000040            uv 00 02  1 132      
;   455         jl @f
                jl #0045FBBE              ;#0045FBB7: 174 05                     v  00 00  1 132      
;   456             add dword[ebx+ecx*4-8],1
                    add dword[ebx+ecx*4-8],1  ;#0045FBB9: 203104213 F8 01            u  00 0A  3 133      
;   457       @@:
;   458         push ecx                --[1] save new element
                push ecx                  ;#0045FBBE: 121                        vu 00 02  1 135      
;   459 --      cmp edi,[esp]           -- must be pbr-optimise (x=append(x,..)) [BUG! (push ecx)]
;   460         cmp edi,[esp+4]         -- must be pbr-optimise (x=append(x,..)) (cmp addr p2, addr p1)
                cmp edi,[esp+4]           ;#0045FBBF: 073174044 04               uv 00 90  2 136      
;   461 --11/5/21:
;   462 --      jne :ApndNewSeq
;   463         jne :ApndNewSeqClone
                jne #0045FCDC             ;#0045FBC3: 017205 13010000            v  00 00  1 137      
;   464         cmp dword[esi-8],1      -- check ref count of 1
                cmp dword[esi-8],1        ;#0045FBC9: 203176 F8 01               u  00 40  2 138      
;   465         jne :ApndNewSeqClone    -- (opAlloClone then pAllocSeq)
                jne #0045FCDC             ;#0045FBCD: 017205 09010000            v  00 00  1 139      
;   466 --      jne :ApndNewSeq
;   467 --      cmp edi,[esp+8]         -- and not circular (x=append(x,x)) [BUG! (push ecx)]
;   468         cmp edi,[esp+12]        -- and not circular (x=append(x,x)) (cmp addr p2, addr p3)
                cmp edi,[esp+12]          ;#0045FBD3: 073174044 0C               uv 00 90  2 140      
;   469         je :ApndNewSeq
                je #0045FCE9              ;#0045FBD7: 017204 0C010000            v  00 00  1 141      
;   470 
;   471         lea ecx,[ebx+edx*4+20]  -- required (old) size in bytes
                lea ecx,[ebx+edx*4+20]    ;#0045FBDD: 215114223 14               uv 02 0C  1 142      
;   472         mov edi,[esi-20]        -- slack (at start/left)
                mov edi,[esi-20]          ;#0045FBE1: 213176 EC                  vu 80 40  1 142      
;   473         cmp dword[esp+16],0     -- prepend flag
                cmp dword[esp+16],0       ;#0045FBE4: 203174044 10 00            u  00 10  2 143      
;   474         jne :PpndSeq
                jne #0045FC00             ;#0045FBE9: 165 15                     v  00 00  1 144      
;   475         add ecx,edi
                add ecx,edi               ;#0045FBEB: 001371                     uv 02 82  1 145      
;   476         cmp ecx,[esi-16]        -- check maxlen (allocated size in bytes)
                cmp ecx,[esi-16]          ;#0045FBED: 073116 F0                  uv 00 42  2 146 02   
;   477         je :ApndSeqClone        -- (exactly full)
                je #0045FC38              ;#0045FBF0: 164 46                     v  00 00  1 147      
;   478 
;   479         pop eax                 --[1]
                pop eax                   ;#0045FBF2: 130                        uv 01 00  1 148      
;   480         lea ecx,[edx+1]
                lea ecx,[edx+1]           ;#0045FBF3: 215112 01                  vu 02 04  1 148      
;   481         mov [esi+edx*4],eax     -- in situ
                mov [esi+edx*4],eax       ;#0045FBF6: 211004226                  uv 00 45  1 149      
;   482         mov [esi-12],ecx        -- increase length
                mov [esi-12],ecx          ;#0045FBF9: 211116 F4                  vu 00 42  1 149      
;   483         add esp,16
                add esp,16                ;#0045FBFC: 203304 10                  uv 10 10  1 150      
;   484         ret
                ret                       ;#0045FBFF: 303                        np 00 00  2 151      
;   485     [64]
;   486         -- recap:
;   487         --  addr p1 (result)    @ [rsp]
;   488         --  addr p2 in rdi and  @ [rsp+8]
;   489         --  addr p3             @ [rsp+16]
;   490         --  prepend flag        @ [rsp+24]
;   491         --  era                 @ [rsp+32]
;   492         --  rsi = raw(p2)
;   493         --  rdx = length(p2) (==[rsi-24])
;   494         --  al is 0x80      (==[rsi-1])
;   495         --  rcx is ref(p3)
;   496         --  rdi is addr p2
;   497         --
;   498         cmp rcx,r15
;   499         jl @f
;   500             add qword[rbx+rcx*4-16],1
;   501       @@:
;   502         push rcx                --[1] save new element
;   503 --      cmp edi,[esp]           -- must be pbr-optimise (x=append(x,..)) [BUG! (push ecx)]
;   504         cmp rdi,[rsp+8]         -- must be pbr-optimise (x=append(x,..)) (cmp addr p2, addr p1)
;   505 --11/5/21:
;   506 --      jne :ApndNewSeq
;   507         jne :ApndNewSeqClone
;   508         cmp qword[rsi-16],1     -- check ref count of 1
;   509         jne :ApndNewSeqClone    -- (pAlloClone then pAllocSeq)
;   510 --      jne :ApndNewSeq
;   511 --      cmp edi,[esp+8]         -- and not circular (x=append(x,x)) [BUG! (push ecx)]
;   512         cmp rdi,[rsp+24]        -- and not circular (x=append(x,x)) (cmp addr p2, addr p3)
;   513         je :ApndNewSeq
;   514 
;   515 --      lea rcx,[rbx+rdx*4+40]  -- required (old) size in bytes
;   516         lea rcx,[rbx+rdx*4+20]  -- half required (old) size in bytes
;   517         mov rdi,[rsi-40]        -- slack (at start/left)
;   518         shl rcx,1               -- required (old) size in bytes
;   519         cmp qword[rsp+32],0     -- prepend flag
;   520         jne :PpndSeq
;   521         add rcx,rdi
;   522         cmp rcx,[rsi-32]        -- check maxlen (allocated size in bytes)
;   523         je :ApndSeqClone        -- (exactly full)
;   524 
;   525         pop rax                 --[1]
;   526         lea rcx,[rdx+1]
;   527         mov [rsi+rdx*8],rax     -- in situ
;   528         mov [rsi-24],rcx        -- increase length
;   529         add rsp,32
;   530         ret
;   531     []
;   532 
;   533   ::PpndSeq
;   534 -----------
;   535     [32]
;   536         test edi,edi            -- is slack 0?
                test edi,edi              ;#0045FC00: 205377                     uv 00 80  1 153      
;   537         jz :PpndSeqClone
                jz #0045FC71              ;#0045FC02: 164 6D                     v  00 00  1 153      
;   538         -- shift header left and calc/store updated ref
;   539         sub edi,4               -- new slack
                sub edi,4                 ;#0045FC04: 203357 04                  uv 80 80  1 154      
;   540         add edx,1               -- new length
                add edx,1                 ;#0045FC07: 203302 01                  vu 04 04  1 154      
;   541         mov ecx,[esi-16]        -- maxlen
                mov ecx,[esi-16]          ;#0045FC0A: 213116 F0                  uv 02 40  1 155      
;   542         mov [esi-24],edi        -- new slack
                mov [esi-24],edi          ;#0045FC0D: 211176 E8                  vu 00 C0  1 155      
;   543         mov [esi-20],ecx        -- copy maxlen
                mov [esi-20],ecx          ;#0045FC10: 211116 EC                  uv 00 42  1 156      
;   544         mov ecx,[esi-4]         -- type/delete routine
                mov ecx,[esi-4]           ;#0045FC13: 213116 FC                  vu 02 40  1 156      
;   545         mov edi,[esp+4]         -- addr p1
                mov edi,[esp+4]           ;#0045FC16: 213174044 04               uv 80 10  1 157      
;   546         mov [esi-16],edx        -- set new length
                mov [esi-16],edx          ;#0045FC1A: 211126 F0                  vu 00 44  1 157      
;   547         mov eax,esi
                mov eax,esi               ;#0045FC1D: 213306                     uv 01 40  1 158      
;   548         mov dword[esi-12],1     -- refcount (we know it is 1)
                mov [esi-12], dword 1     ;#0045FC1F: 307106 F4 01000000         vu 00 40  1 158      
;   549         sub eax,3
                sub eax,3                 ;#0045FC26: 203350 03                  uv 01 01  1 159      
;   550         mov [esi-8],ecx         -- type/delete routine
                mov [esi-8],ecx           ;#0045FC29: 211116 F8                  vu 00 42  1 159      
;   551         ror eax,2
                ror eax,2                 ;#0045FC2C: 301310 02                  np 01 01  1 160      
;   552         pop dword[esi-4]        -- new element
                pop dword[esi-4]          ;#0045FC2F: 217106 FC                  np 00 40  3 161      
;   553         mov [edi],eax           -- new ref of shifted header -> p1
                mov [edi],eax             ;#0045FC32: 211007                     uv 00 81  1 164      
;   554         add esp,16
                add esp,16                ;#0045FC34: 203304 10                  vu 10 10  1 164      
;   555         ret
                ret                       ;#0045FC37: 303                        np 00 00  2 165      
;   556     [64]
;   557         test rdi,rdi            -- is slack 0?
;   558         jz :PpndSeqClone
;   559         -- shift header left and calc/store updated ref
;   560         sub rdi,8               -- new slack
;   561         add rdx,1               -- new length
;   562         mov rcx,[rsi-32]        -- maxlen
;   563         mov [rsi-48],rdi        -- new slack
;   564         mov [rsi-40],rcx        -- copy maxlen
;   565         mov rcx,[rsi-8]         -- type/delete routine
;   566         mov rdi,[rsp+8]         -- addr p1
;   567 --      mov [rsi-24],rdx        -- set new length
;   568         mov [rsi-32],rdx        -- set new length
;   569         mov rax,rsi
;   570         mov qword[rsi-24],1     -- refcount (we know it is 1)
;   571         sub rax,7
;   572         mov [rsi-16],rcx        -- type/delete routine
;   573         ror rax,2
;   574 --DEV fix this in pilasm.e
;   575         pop qword[rsi-8]        -- new element
;   576 --      pop rcx                 -- new element
;   577         mov [rdi],rax           -- new ref of shifted header -> p1
;   578 --      mov [rsi-8],rcx         -- new element
;   579         add rsp,32
;   580         ret
;   581     []  
;   582 
;   583   ::ApndSeqClone
;   584 ----------------
;   585         -- Fairly obviously, "clone" differs from "new" in that we just
;   586         --  copy the contents rather than incref/decref each one, and 
;   587         --  pFreePool the old empty container rather than pDealloc it.
;   588         -- An "append clone" always creates a "hard left" sequence; any
;   589         --  subsequent prepend will preserve (some) free space on the 
;   590         --  end, leaving space for both append and prepend to utilise.
;   591     [32]
;   592         --
;   593         -- recap:
;   594         --  ref(p3)             @ [esp]
;   595         --  addr p1 (result)    @ [esp+4]
;   596         --  addr p2             @ [esp+8] (==[esp+4],!=[esp+12])
;   597         --  addr p3             @ [esp+12]
;   598         --  prepend flag        @ [esp+16] (==0)
;   599         --  era                 @ [esp+20]
;   600         --  esi = raw(p2)    ([esi-8]==1)
;   601         --  edx = length(p2) (==[esi-12])
;   602         --  al is 0x80       (==[esi-1])
;   603         --  edi = slack(p2) (==[esi-20])
;   604         --  ecx is edi+edx*4+20 (==[esi-16] aka maxlen)
;   605         --
;   606         push esi                --[2] save p1=p2 raw address
                push esi                  ;#0045FC38: 126                        uv 00 40  1 167      
;   607         lea ecx,[edx+1]         -- length+1
                lea ecx,[edx+1]           ;#0045FC39: 215112 01                  vu 02 04  1 167      
;   608         mov edx,[esp+24]        -- era
                mov edx,[esp+24]          ;#0045FC3C: 213124044 18               uv 04 10  1 168      
;   609         call :%pAllocSeq        -- damages eax only
                call #00463832 (:%pAllocSeq)  ;#0045FC40: 350 ED3B0000               v  00 00  1 168      
;   610         mov edx,[esi-4]         -- copy type/delete_index
                mov edx,[esi-4]           ;#0045FC45: 213126 FC                  uv 04 40  1 169      
;   611 --DEV have I reintroduced this anywhere? (only applies to append, not prepend, not concat)
;   612 -- 15/06/13 (multithreading issues, content must be in place before ref updated, see pfileioN.e):
;   613 --  mov [edi],eax           -- replace p1 now
;   614         mov [ebx+eax*4-4],edx
                mov [ebx+eax*4-4],edx     ;#0045FC48: 211124203 FC               uv 00 0D  1 170 04   
;   615         sub ecx,1
                sub ecx,1                 ;#0045FC4C: 203351 01                  vu 02 02  1 170      
;   616         lea edi,[ebx+eax*4]     -- convert to real address (new[1])
                lea edi,[ebx+eax*4]       ;#0045FC4F: 215074203                  uv 80 09  1 171      
;   617 --      mov edx,[esp+4]         -- target address
;   618         mov edx,[esp+8]         -- target address
                mov edx,[esp+8]           ;#0045FC52: 213124044 08               vu 04 10  1 171      
;   619         rep movsd
                rep movsd                 ;#0045FC56: 363:245                    np C2 C2  4 174    *80*
;   620 --15/06/13:
;   621         mov [edx],eax
                mov [edx],eax             ;#0045FC58: 211002                     uv 00 05  1 180    *04*
;   622         pop edx                 --[2] raw address of original p1 (=p2)
                pop edx                   ;#0045FC5A: 132                        vu 04 00  1 180      
;   623         pop eax                 --[1] (as pushed by ApndSeq)
                pop eax                   ;#0045FC5B: 130                        uv 01 00  1 181      
;   624         stosd                   -- mov [edi],eax; edi+=4 (not that we need edi again)
                stosd                     ;#0045FC5C: 253                        np 80 81  3 182      
;   625         mov ecx,[edx-16]        -- maxlen (allocated size in bytes)
                mov ecx,[edx-16]          ;#0045FC5D: 213112 F0                  uv 02 04  1 185      
;   626         lea eax,[edx-20]
                lea eax,[edx-20]          ;#0045FC60: 215102 EC                  vu 01 04  1 185      
;   627         add esp,16
                add esp,16                ;#0045FC63: 203304 10                  uv 10 10  1 186      
;   628         sub eax,[edx-20]        -- account for any slack
                sub eax,[edx-20]          ;#0045FC66: 053102 EC                  vu 01 05  2 186      
;   629         mov edx,[esp]
                mov edx,[esp]             ;#0045FC69: 213024044                  uv 04 10  1 189    *10*
;   630         jmp :%pFreePool         -- free ecx bytes at eax (ignores any delete_routine)
                jmp #004636B8 (:%pFreePool)  ;#0045FC6C: 351 473A0000               v  00 00  1 189      
;   631     [64]
;   632         push rsi                --[2] save p1=p2 raw address
;   633         lea rcx,[rdx+1]         -- length+1
;   634         mov rdx,[rsp+48]        -- era
;   635         call :%pAllocSeq        -- damages eax only
;   636         mov rdx,[rsi-8]         -- copy type/delete_index
;   637         mov [rbx+rax*4-8],rdx
;   638         sub rcx,1
;   639         lea rdi,[rbx+rax*4]     -- convert to real address (new[1])
;   640 --      mov rdx,[rsp+8]         -- target address
;   641         mov rdx,[rsp+16]        -- target address
;   642         rep movsq
;   643         mov [rdx],rax
;   644         pop rdx                 --[2] raw address of original p1 (=p2)
;   645         pop rax                 --[1] (as pushed by ApndSeq)
;   646         stosq                   -- mov [rdi],rax; rdi+=8 (not that we need rdi again)
;   647         mov rcx,[rdx-32]        -- maxlen (allocated size in bytes)
;   648         lea rax,[rdx-40]
;   649         add rsp,32
;   650         sub rax,[rdx-40]        -- account for any slack
;   651         mov rdx,[rsp]
;   652         jmp :%pFreePool         -- free rcx bytes at rax (ignores any delete_routine)
;   653     []
;   654 
;   655   ::PpndSeqClone
;   656 ----------------
;   657         --
;   658         -- Request (existing length)*2+1, then plant the header slap in the middle.
;   659         -- This leaves space for both append and prepend to utilise.
;   660         --
;   661         -- Technical/design note: [DEV this isn't helpful...]
;   662         -- Analysis of the worst case scenarios yielded worst case points of:
;   663         --      {0,0,2,7,17,37...} at [0,1,6,16,36,76] (32-bit) and 
;   664         --      {0,2,6,15,33,69,...} at [0,5,14,32,68,140] (64-bit)
;   665         -- ie there are a couple of (frankly rather unlikely) painful/pointless/could 
;   666         -- be done in situ cases, but only on such small sizes no-one really cares, 
;   667         -- and as the sizes start to get larger the low points gradually get less and 
;   668         -- less painful (as well as less and less likely), exactly what we want. What
;   669         -- I mean by worst case scenario, I should perhaps have mentioned, is various
;   670         -- combinations of append/prepend that cause early clones when technically
;   671         -- there is still space, but at the wrong end, compared that is to all-appends 
;   672         -- and all-prepends, which perform about as good as we might hope them to.
;   673         -- I only mention this to avoid anyone else noticing odd/unhelpful behaviour 
;   674         -- (at small sizes) and not seeing the bigger picture, as I first did (before
;   675         -- attempting a much more convoluted strategy, that I never got working, and,
;   676         -- to be frank, was never going to do any better). Just in case you can find
;   677         -- any use for it, the wcs analysis, focusing on a single prepend followed by
;   678         -- enough appends to discard slack and clone to a naively chosen new size:
;   679         --
;   680         --  --
;   681         --  -- wscditty.exw (worst case scenario analysis)
;   682         --  --
;   683         --  constant MWORD = 4, SBLOCK = 20 -- 32 bit
;   684         --  --constant MWORD = 8, SBLOCK = 36 -- 64 bit
;   685         --  -- (see "Revised Sizes" in pHeap.e for an explanation of SBLOCK being 20/34)
;   686         --  constant SHDR = MWORD*5
;   687         --
;   688         --  integer reqlen, maxlen, allocated, newlen, slack, spare, full, fulllen, afull
;   689         --  puts(1,"--      l       new length    slack(lhs)  spare(rhs)  appfull\n")
;   690         --  for l=1 to MWORD*20 do -- (new length)
;   691         --      reqlen = (l*2-1) -- (=== existinglength*2 /+/ 1)
;   692         --      maxlen = reqlen*MWORD+SHDR
;   693         --      allocated = SBLOCK
;   694         --      while maxlen>allocated-MWORD do allocated*=2 end while
;   695         --      newlen = floor((allocated-(SHDR+MWORD))/MWORD)
;   696         --      spare = newlen-l
;   697         --      slack = floor(spare/2)
;   698         --      spare -= slack
;   699         --      full = spare+l+1
;   700         --      fulllen = full*MWORD+SHDR
;   701         --      allocated = SBLOCK
;   702         --      while fulllen>allocated-MWORD do allocated*=2 end while
;   703         --      afull = (allocated-(SHDR+MWORD))/MWORD
;   704         --      printf(1,"-- %4d(->%2d) %5d->%2d %10d %11d %10d->%2d    (%d)\n",
;   705         --               {l-1,l,reqlen,newlen,slack,spare,full,afull,afull-full})
;   706         --  end for
;   707         --  if getc(0) then end if
;   708 
;   709 --  [1]                               20[#00000014]=4+16            n/a                 n/a
;   710 --  [2]                               40[#00000028]=4+36            x(19)               s[4]
;   711 --  [3]                               80[#00000050]=4+76            x(59)               s[14]
;   712 --  [4]                              160[#000000A0]=4+156           x(139)              s[34]
;   713 --  [5]                              320[#00000140]=4+316           x(299)              s[74]
;   714 
;   715 --      l       new length    slack(lhs)  spare(rhs)  appfull                   ecx     new maxlen      -   slack
;   716 --    0(-> 1)     1-> 4          1           2          4-> 4    (0)            24      36              12    4
;   717 --    1(-> 2)     3-> 4          1           1          4-> 4    (0)            28                      8     4
;   718 --    2(-> 3)     5->14          5           6         10->14    (4)            32      76              44    20
;   719 --    3(-> 4)     7->14          5           5         10->14    (4)            36                      40    20
;   720 --    4(-> 5)     9->14          4           5         11->14    (3)            40                      36    16
;   721 --    5(-> 6)    11->14          4           4         11->14    (3)            44                      32    16
;   722 --    6(-> 7)    13->14          3           4         12->14    (2)            48                      28    12
;   723 --    7(-> 8)    15->34         13          13         22->34    (12)           52      156             104   52
;   724 
;   725 --DEV/DOC
;   726 -- Technical note:
;   727 --  Referring to the "Multithreading issues" as documented in VM/pfileioN.e, prepend
;   728 --  does NOT currently honor any promise of contents in place before ref is updated;
;   729 --  that only applies to append. Of course there is no issue if your table(s) etc are 
;   730 --  properly locked, or if your application is not multi-threaded.
;   731 --
;   732 -- Performance note:
;   733 --  Please don't read this in an alarmist fashion, or be put off from using prepend.
;   734 --  There /is/ a difference, and that difference deserves to be properly documented,
;   735 --  but in reality it is nothing to get all excited or bothered about.
;   736 --
;   737 --  Benchmark speaking, append is a better choice than prepend for top performance.
;   738 --  While prepend on dword-sequences delivers about the same performance as using
;   739 --  append, string = prepend(string,char) exhibits exponentially worse performance 
;   740 --  when compared to string = append(string,char), because strings must always be 
;   741 --  aligned to start on a dword/qword boundary. Also, when append needs to enlarge 
;   742 --  a dword-sequence it places all the spare space at the end, whereas in the same 
;   743 --  situation prepend splits any newly allocated extra space between the front and 
;   744 --  back, so that it is available for both append and prepend to utilise, which
;   745 --  avoids any "shunting" effects should they be mixed. This means that prepend has
;   746 --  "twice the clone overhead" of append, occurring every *1.5 instead of every *2, 
;   747 --  and uses about 25% more memory, which translates to a few percent points slower 
;   748 --  overall, but in most cases that is less than can actually be measured.
;   749 --
;   750 --  Hence, by all means use prepend when it makes your program easier or clearer,
;   751 --  and is unlikely to be invoked more than several million times. You can find
;   752 --  dozens of uses of prepend in the Phix sources, despite the fact that they are
;   753 --  rather aggressively optimised[1], and the same can be said for Edita. Likewise
;   754 --  printf() uses string=prepend(string,char), because "exponentially slower" just
;   755 --  doesn't matter one jot when building ~20 character long strings[2].
;   756 --
;   757 --  [1] Almost no effort has gone into optimising Phix /after/ a fatal error has
;   758 --  occurred, hence prepend tends to be freely used in the error reporting side,
;   759 --  but admittedly not so much in the pre-error-so-must-be-uber-fast bits.
;   760 --  [2] 20 chars takes some N+210 clocks instead of N+20, where N is at the very
;   761 --  least ~20,000: calculating each digit totally swamps any prepend overheads,
;   762 --  and even a report containing 100,000 so-generated numbers won't make that
;   763 --  190 clocks tally up to anywhere near 0.1s, so you and I would have to live
;   764 --  for a very long time indeed to regret such a miniscule overhead. Of course
;   765 --  if your length(string)>20K, then that's a very different matter altogether,
;   766 --  and you would probably be better off building it as a dword-sequence before
;   767 --  packing it back to a string once done, or doing it line-by-line. Also, if I
;   768 --  really wanted to, I could have removed the "offending" code in printf() in
;   769 --  far less time than it just took me to write this paragraph.
;   770 --
;   771 
;   772     [32]
;   773         mov [esp+16],esi            -- save raw address (overwrite prepend flag[==1])
                mov [esp+16],esi          ;#0045FC71: 211164044 10               uv 00 50  1 190      
;   774         -- recap:
;   775         --  [p3] (increfed)     @ [esp]
;   776         --  addr p1 (result)    @ [esp+4]   (with a refcount of 1)
;   777         --  addr p2 in edi and  @ [esp+8]   (== addr p1) [pbr-optimise]
;   778         --  addr p3             @ [esp+12]  (!= addr p1) [non-circular]
;   779         --  esi = raw(p2)       = [esp+16]  (was prepend flag of 1)
;   780         --  era                 @ [esp+20]
;   781         --  edi is slack    (==[esi-20]==0)
;   782         --  edx = length(p2) (==[esi-12])
;   783         --  ecx is (edx*4+20), required (old) size in bytes (which might prove useful!)
;   784         --
;   785         mov edi,ecx                 -- save old size in bytes
                mov edi,ecx               ;#0045FC75: 213371                     vu 80 02  1 190      
;   786         lea ecx,[ebx+edx*2+1]       -- length*2+1
                lea ecx,[ebx+edx*2+1]     ;#0045FC77: 215114123 01               uv 02 0C  1 191      
;   787         mov edx,[esp+20]            -- era
                mov edx,[esp+20]          ;#0045FC7B: 213124044 14               vu 04 10  1 191      
;   788         call :%pAllocSeq            -- damages eax only
                call #00463832 (:%pAllocSeq)  ;#0045FC7F: 350 AE3B0000               v  00 00  1 192      
;   789         mov edx,[ebx+eax*4-16]      -- new maxlen
                mov edx,[ebx+eax*4-16]    ;#0045FC84: 213124203 F0               uv 04 09  1 193      
;   790         mov ecx,[esi-12]            -- old length
                mov ecx,[esi-12]          ;#0045FC88: 213116 F4                  vu 02 40  1 193      
;   791         push edx                    --[1] copy new maxlen
                push edx                  ;#0045FC8B: 122                        uv 00 04  1 194      
;   792         sub edx,edi                 -- less old (used) size in bytes
                sub edx,edi               ;#0045FC8C: 051372                     vu 04 84  1 194      
;   793         add ecx,1                   -- new length
                add ecx,1                 ;#0045FC8E: 203301 01                  uv 02 02  1 195      
;   794         shr edx,1                   -- /2
                shr edx,1                 ;#0045FC91: 321352                     u  04 04  1 196      
;   795         push dword[esi-4]           --[2] copy type/delete_rtn
                push dword[esi-4]         ;#0045FC93: 377166 FC                  np 00 40  2 197      
;   796         and edx,#FFFFFFFC           -- new slack, truncated to whole number of dwords
                and edx,-4                ;#0045FC96: 201342 FCFFFFFF            uv 04 04  1 199      
;   797 --DEV sopping great AGI here...
;   798         lea edi,[edx+eax*4+4]       -- new raw address[2]
                lea edi,[edx+eax*4+4]     ;#0045FC9C: 215174202 04               uv 80 05  1 202 04 *04*
;   799 --...so, tryme:
;   800 --      lea edi,[ebx+eax*4+4]
;   801 --      add edi,edx
;   802         mov [edx+eax*4-12],ecx      -- set new length
                mov [edx+eax*4-12],ecx    ;#0045FCA0: 211114202 F4               vu 00 07  1 202      
;   803         lea eax,[edx+eax*4+1]       -- new ref part 1 (slack+raw+1)
                lea eax,[edx+eax*4+1]     ;#0045FCA4: 215104202 01               uv 01 05  1 203      
;   804         mov ecx,[esi-12]            -- original length (for rep movsd)
                mov ecx,[esi-12]          ;#0045FCA8: 213116 F4                  vu 02 40  1 203      
;   805         -- plant new header and replace ref now...
;   806         mov [edi-24],edx            -- new slack
                mov [edi-24],edx          ;#0045FCAB: 211127 E8                  uv 00 84  1 204      
;   807         ror eax,2                   -- new ref part 2
                ror eax,2                 ;#0045FCAE: 301310 02                  np 01 01  1 205      
;   808         mov edx,[esp+12]            -- target addr (p1) [@[esp+4] on entry to PpndSeqClone]
                mov edx,[esp+12]          ;#0045FCB1: 213124044 0C               uv 04 10  1 206      
;   809         pop dword[edi-8]            --[2] type/delete_rtn
                pop dword[edi-8]          ;#0045FCB5: 217107 F8                  np 00 80  3 207      
;   810         pop dword[edi-20]           --[1] copy maxlen
                pop dword[edi-20]         ;#0045FCB8: 217107 EC                  np 00 80  3 210      
;   811         mov dword[edi-12],1         -- refcount
                mov [edi-12], dword 1     ;#0045FCBB: 307107 F4 01000000         uv 00 80  1 213      
;   812         mov [edx],eax
                mov [edx],eax             ;#0045FCC2: 211002                     vu 00 05  1 213      
;   813         mov edx,esi                 -- (save for pFreePool)
                mov edx,esi               ;#0045FCC4: 213326                     uv 04 40  1 214      
;   814         pop dword[edi-4]            -- new[1]
                pop dword[edi-4]          ;#0045FCC6: 217107 FC                  np 00 80  3 215      
;   815         rep movsd
                rep movsd                 ;#0045FCC9: 363:245                    np C2 C2  4 218      
;   816         mov ecx,[edx-16]        -- maxlen (allocated size in bytes)
                mov ecx,[edx-16]          ;#0045FCCB: 213112 F0                  uv 02 04  1 222      
;   817         lea eax,[edx-20]
                lea eax,[edx-20]          ;#0045FCCE: 215102 EC                  vu 01 04  1 222      
;   818 --      sub eax,[edx-20]        -- account for any slack    [known to be 0]
;   819         add esp,16
                add esp,16                ;#0045FCD1: 203304 10                  uv 10 10  1 223      
;   820         mov edx,[esp]
                mov edx,[esp]             ;#0045FCD4: 213024044                  uv 04 10  1 226 10 *10*
;   821         jmp :%pFreePool         -- free ecx bytes at eax (ignoring any delete_routine)
                jmp #004636B8 (:%pFreePool)  ;#0045FCD7: 351 DC390000               v  00 00  1 226      
;   822     [64]
;   823         mov [rsp+32],rsi            -- save raw address (overwrite prepend flag[==1])
;   824         -- recap:
;   825         --  [p3] (increfed)     @ [rsp]
;   826         --  addr p1 (result)    @ [rsp+8]   (with a refcount of 1)
;   827         --  addr p2 in rdi and  @ [rsp+16]  (== addr p1) [pbr-optimise]
;   828         --  addr p3             @ [rsp+24]  (!= addr p1) [non-circular]
;   829         --  rsi = raw(p2)       = [rsp+32]  (was prepend flag of 1)
;   830         --  era                 @ [rsp+40]
;   831         --  rdi is slack    (==[rsi-40]==0)
;   832         --  rdx = length(p2) (==[rsi-24])
;   833 --      --  rcx is (rdx*4+40), required (old) size in bytes (which might prove useful!)
;   834         --  rcx is (rdx*8+40), required (old) size in bytes (which might prove useful!)
;   835         --
;   836         mov rdi,rcx                 -- save old size in bytes
;   837         lea rcx,[rbx+rdx*2+1]       -- length*2+1
;   838         mov rdx,[rsp+40]            -- era
;   839         call :%pAllocSeq            -- damages eax only
;   840         mov rdx,[rbx+rax*4-32]      -- new maxlen
;   841         mov rcx,[rsi-24]            -- old length
;   842         push rdx                    --[1] copy new maxlen
;   843         sub rdx,rdi                 -- less old (used) size in bytes
;   844         add rcx,1                   -- new length
;   845         shr rdx,1                   -- /2
;   846         push qword[rsi-8]           --[2] copy type/delete_rtn
;   847         and rdx,#FFFFFFF8           -- new slack, truncated to whole number of qwords
;   848 --DEV sopping great AGI here...
;   849         lea rdi,[rdx+rax*4+8]       -- new raw address[2]
;   850 --...so, tryme:
;   851 --      lea rdi,[rbx+rax*4+8]
;   852 --      add rdi,rdx
;   853         mov [rdx+rax*4-24],rcx      -- set new length
;   854         lea rax,[rdx+rax*4+1]       -- new ref part 1 (slack+raw+1)
;   855         mov rcx,[rsi-24]            -- original length (for rep movsd)
;   856         -- plant new header and replace ref now...
;   857 --      mov [rdi-48],edx            -- new slack (rdi=raw[2], remember)
;   858         mov [rdi-48],rdx            -- new slack (rdi=raw[2], remember)
;   859         ror rax,2                   -- new ref part 2
;   860         mov rdx,[rsp+24]            -- target addr (p1) [@[esp+8] on entry to PpndSeqClone]
;   861 --DEV fix this in pilasm.e
;   862         pop qword[rdi-16]           --[2] type/delete_rtn
;   863 --pop rdx
;   864 --mov [rdi-16],rdx
;   865         pop qword[rdi-40]           --[1] copy maxlen
;   866         mov qword[rdi-24],1         -- refcount
;   867         mov [rdx],rax
;   868         mov rdx,rsi                 -- (save for pFreePool)
;   869         pop qword[rdi-8]            -- new[1]
;   870         rep movsq
;   871         mov rcx,[rdx-32]        -- maxlen (allocated size in bytes)
;   872         lea rax,[rdx-40]
;   873 --      sub rax,[rdx-40]        -- account for any slack    [known to be 0]
;   874         add rsp,32
;   875         mov rdx,[rsp]
;   876         jmp :%pFreePool         -- free rcx bytes at rax (ignoring any delete_routine)
;   877     []
;   878 
;   879   ::ApndNewSeqClone
;   880     [32]
;   881         mov ecx,edx
                mov ecx,edx               ;#0045FCDC: 213312                     uv 02 04  1 227      
;   882         mov edx,[esp+20]        -- era
                mov edx,[esp+20]          ;#0045FCDE: 213124044 14               vu 04 10  1 227      
;   883         call :%pAlloClone       -- damages eax only
                call #00463814 (:%pAlloClone)  ;#0045FCE2: 350 2D3B0000               v  00 00  1 228      
;   884         mov edx,ecx
                mov edx,ecx               ;#0045FCE7: 213321                     uv 04 02  1 229      
;   885     [64]
;   886         mov rcx,rdx
;   887         mov rdx,[rsp+40]        -- era
;   888         call :%pAlloClone       -- damages eax only
;   889         mov rdx,rcx
;   890     []
;   891   ::ApndNewSeq
;   892 --------------
;   893     [32]
;   894         -- recap:
;   895         --  ref(p3) in ecx and  @ [esp] (already incref;d) ([1] from ApndSeq)
;   896         --  addr p1 (result)    @ [esp+4]
;   897         --  addr p2 in edi and  @ [esp+8]
;   898         --  addr p3             @ [esp+12]
;   899         --  prepend flag        @ [esp+16]
;   900         --  era                 @ [esp+20]
;   901         --  esi = raw(p2)
;   902         --  edx = length(p2) (==[esi-12])
;   903         --  al is 0x80      (==[esi-1])
;   904         --
;   905         mov edi,[esp+16]        -- prepend flag ...
                mov edi,[esp+16]          ;#0045FCE9: 213174044 10               vu 80 10  1 229      
;   906         mov ecx,edx             -- original length (for loop)
                mov ecx,edx               ;#0045FCED: 213312                     uv 02 04  1 230      
;   907         shl edi,2               --              ...->dword
                shl edi,2                 ;#0045FCEF: 301347 02                  u  80 80  1 231      
;   908         add ecx,1               -- increase length by 1
                add ecx,1                 ;#0045FCF2: 203301 01                  vu 02 02  1 231      
;   909         mov edx,[esp+20]        -- era
                mov edx,[esp+20]          ;#0045FCF5: 213124044 14               uv 04 10  1 232      
;   910 --X     call :%pAlloClone       -- (done above)
;   911         call :%pAllocSeq        -- damages eax only
                call #00463832 (:%pAllocSeq)  ;#0045FCF9: 350 343B0000               v  00 00  1 232      
;   912         push eax                --[2] save new ref
                push eax                  ;#0045FCFE: 120                        uv 00 01  1 233      
;   913         lea edi,[edi+eax*4]     -- edi -> new[1] for append, or new[2] for prepend
                lea edi,[edi+eax*4]       ;#0045FCFF: 215074207                  vu 80 81  1 233      
;   914       ::ApndNewSeqLoop
;   915         sub ecx,1
                sub ecx,1                 ;#0045FD02: 203351 01                  uv 02 02  1 234      
;   916         jz :ANSNewSeqLoopEnd
                jz #0045FD17              ;#0045FD05: 164 10                     v  00 00  1 234      
;   917             lodsd                       -- mov eax,[esi], esi+=4
                    lodsd                 ;#0045FD07: 255                        np 41 40  2 235      
;   918             stosd                       -- mov [edi],eax; edi+=4
                    stosd                 ;#0045FD08: 253                        np 80 81  3 237      
;   919 --          mov eax,[esi]
;   920 --          add esi,4
;   921 --          mov [edi],eax
;   922 --          add edi,4
;   923             cmp eax,h4
                    cmp eax,h4            ;#0045FD09: 075 00000040               uv 00 01  1 240      
;   924             jl :ApndNewSeqLoop
                    jl #0045FD02          ;#0045FD0E: 174 F2                     v  00 00  1 240      
;   925             add dword[ebx+eax*4-8],1
                    add dword[ebx+eax*4-8],1  ;#0045FD10: 203104203 F8 01            u  00 09  3 241      
;   926             jmp ApndNewSeqLoop
                    jmp #0045FD02         ;#0045FD15: 353 EB                     v  00 00  1 243      
;   927       ::ANSNewSeqLoopEnd
;   928         mov esi,[esp+8]         -- target address
                mov esi,[esp+8]           ;#0045FD17: 213164044 08               uv 40 10  1 244      
;   929         pop eax                 --[2] restore new ref
                pop eax                   ;#0045FD1B: 130                        vu 01 00  1 244      
;   930         pop ecx                 --[1] p3 (from ::ApndSeq)
                pop ecx                   ;#0045FD1C: 131                        uv 02 00  1 245      
;   931         mov edx,[esi]           -- prev a
                mov edx,[esi]             ;#0045FD1D: 213026                     uv 04 40  1 247    *40*
;   932         cmp dword[esp+12],0     -- prepend flag
                cmp dword[esp+12],0       ;#0045FD1F: 203174044 0C 00            u  00 10  2 248      
;   933         je :notprepend2
                je #0045FD2B              ;#0045FD24: 164 05                     v  00 00  1 249      
;   934             mov [ebx+eax*4],ecx -- new[1]:=c
                    mov [ebx+eax*4],ecx   ;#0045FD26: 211014203                  uv 00 0B  1 250      
;   935             jmp @f
                    jmp #0045FD2D         ;#0045FD29: 353 02                     v  00 00  1 250      
;   936       ::notprepend2
;   937             mov [edi],ecx       -- new[$]:=c
                    mov [edi],ecx         ;#0045FD2B: 211017                     uv 00 82  1 251      
;   938       @@:
;   939         add esp,16
                add esp,16                ;#0045FD2D: 203304 10                  vu 10 10  1 251      
;   940         mov [esi],eax
                mov [esi],eax             ;#0045FD30: 211006                     uv 00 41  1 252      
;   941         cmp edx,h4
                cmp edx,h4                ;#0045FD32: 201372 00000040            vu 00 04  1 252      
;   942         jle @f
                jle #0045FD45             ;#0045FD38: 176 0B                     v  00 00  1 253      
;   943             sub dword[ebx+edx*4-8],1
                    sub dword[ebx+edx*4-8],1  ;#0045FD3A: 203154223 F8 01            u  00 0C  3 254      
;   944             jz :%pDealloc
                    jz #004639A8 (:%pDealloc)  ;#0045FD3F: 017204 633C0000            v  00 00  1 256      
;   945       @@:
;   946         ret
                ret                       ;#0045FD45: 303                        np 00 00  2 257      
;   947     [64]
;   948         -- recap:
;   949         --  ref(p3) in rcx and  @ [rsp] (already incref;d) ([1] from ApndSeq)
;   950         --  addr p1 (result)    @ [rsp+8]
;   951         --  addr p2 in rdi and  @ [rsp+16]
;   952         --  addr p3             @ [rsp+24]
;   953         --  prepend flag        @ [rsp+32]
;   954         --  era                 @ [rsp+40]
;   955         --  rsi = raw(p2)
;   956         --  rdx = length(p2) (==[rsi-24])
;   957         --  al is 0x80      (==[rsi-1])
;   958         --
;   959         mov rdi,[rsp+32]        -- prepend flag ...
;   960         mov rcx,rdx             -- original length (for loop)
;   961 --      shl rdi,2               --              ...->dword
;   962         shl rdi,3               --              ...->qword
;   963         add rcx,1               -- increase length by 1
;   964         mov rdx,[rsp+40]        -- era
;   965 --X     call :%pAlloClone       -- (done above)
;   966         call :%pAllocSeq        -- damages eax only
;   967         push rax                --[2] save new ref
;   968         lea rdi,[rdi+rax*4]     -- rdi -> new[1] for append, or new[2] for prepend
;   969       ::ApndNewSeqLoop
;   970         sub rcx,1
;   971         jz :ANSNewSeqLoopEnd
;   972             lodsq                       -- mov rax,[rsi], rsi+=8
;   973             stosq                       -- mov [rdi],rax; rdi+=8
;   974 --          mov rax,[rsi]
;   975 --          add rsi,8
;   976 --          mov [rdi],rax
;   977 --          add rdi,8
;   978             cmp rax,r15
;   979             jl :ApndNewSeqLoop
;   980             add qword[rbx+rax*4-16],1
;   981             jmp ApndNewSeqLoop
;   982       ::ANSNewSeqLoopEnd
;   983         mov rsi,[rsp+16]        -- target address
;   984         pop rax                 --[2] restore new ref
;   985         pop rcx                 --[1] p3 (from ::ApndSeq)
;   986         mov rdx,[rsi]           -- prev p1
;   987         cmp qword[rsp+24],0     -- prepend flag
;   988         je :notprepend2
;   989             mov [rbx+rax*4],rcx -- new[1]:=p3
;   990             jmp @f
;   991       ::notprepend2
;   992             mov [rdi],rcx       -- new[$]:=p3
;   993       @@:
;   994         add rsp,32
;   995         mov [rsi],rax
;   996         cmp rdx,r15
;   997         jle @f
;   998             sub qword[rbx+rdx*4-16],1
;   999             jz :%pDealloc
;  1000       @@:
;  1001         ret
;  1002     []
;  1003 
;  1004 
;  1005     [32]
;  1006   ::ppMap
;  1007         -- Maps p1=p2&p3 to p1=prepend(p3,p2) when p2 atom [and p3 is a sequence/string].
;  1008         -- When invoked from from opConcat (p1=p2&p3):
;  1009         --  addr p1 @ [esp]
;  1010         --  addr p2 @ [esp+4]
;  1011         --  addr p3 @ [esp+8]
;  1012         --  flag(0) @ [esp+12]
;  1013         --  esi is [p2] (an atom)
;  1014         --  ecx is [p3] (a sequence/string)
;  1015         -- Whereas :%opPpndSA (in opApnd) needs:
;  1016         --  addr p2 @ [esp+4] to be (opConcat's) addr p3,
;  1017         --  addr p3 @ [esp+8] to be (opConcat's) addr p2,
;  1018         -- then (switching to opApnd's p2/p3 order)
;  1019         --  edi to be addr p2 (as by now at [esp+4])
;  1020         --  esi to be [p2] (a sequence/string)
;  1021         --  ecx to be [p3] (an atom)
;  1022         -- So we just need to swap a few things around:
;  1023 --DEV re-check that esi==[edi] when this is all done, for e93vhnbaav:
;  1024         mov edi,[esp+4]
                mov edi,[esp+4]           ;#0045FD46: 213174044 04               uv 80 10  1 259      
;  1025         mov eax,[esp+8]
                mov eax,[esp+8]           ;#0045FD4A: 213104044 08               vu 01 10  1 259      
;  1026         mov [esp+4],eax
                mov [esp+4],eax           ;#0045FD4E: 211104044 04               uv 00 11  1 260      
;  1027         mov [esp+8],edi
                mov [esp+8],edi           ;#0045FD52: 211174044 08               vu 00 90  1 260      
;  1028         xchg esi,ecx
                xchg esi,ecx              ;#0045FD56: 207316                     np 42 42  3 261      
;  1029         mov dword[esp+12],1 -- set prepend flag
                mov [esp+12], dword 1     ;#0045FD58: 307104044 0C 01000000      uv 00 10  1 264      
;  1030         jmp :%opPpndSA  -- (Note that opApndA is invoked directly, when p3 is an atom.)
                jmp #0045FA07 (:%opPpndSA)  ;#0045FD60: 351 A2FCFFFF               v  00 00  1 264      
;  1031     [64]
;  1032   ::ppMap64
;  1033         -- Maps p1=p2&p3 to p1=prepend(p3,p2) when p2 atom [and p3 is a sequence/string].
;  1034         -- When invoked from from opConcat (p1=p2&p3):
;  1035         --  addr p1 @ [rsp]
;  1036         --  addr p2 @ [rsp+8]
;  1037         --  addr p3 @ [rsp+16]
;  1038         --  flag(0) @ [rsp+24]
;  1039         --  rsi is [p2] (an atom)
;  1040         --  rcx is [p3] (a sequence/string)
;  1041         -- Whereas :%opPpndSA (in opApnd) needs:
;  1042         --  addr p2 @ [rsp+8] to be (opConcat's) addr p3,
;  1043         --  addr p3 @ [rsp+16] to be (opConcat's) addr p2,
;  1044         -- then (switching to opApnd's p2/p3 order)
;  1045         --  rdi to be addr p2 (as by now at [rsp+8])
;  1046         --  rsi to be [p2] (a sequence/string)
;  1047         --  rcx to be [p3] (an atom)
;  1048         -- So we just need to swap a few things around:
;  1049 --DEV re-check that rsi==[rdi] when this is all donw, for e93vhnbaav:
;  1050         mov rdi,[rsp+8]
;  1051         mov rax,[rsp+16]
;  1052         mov [rsp+8],rax
;  1053         mov [rsp+16],rdi
;  1054         xchg rsi,rcx
;  1055         mov qword[rsp+24],1 -- set prepend flag
;  1056         jmp :%opPpndSA  -- (Note that opApndA is invoked directly, when p3 is an atom.)
;  1057     []
;  1058 
;  1059 --/*
;  1060 procedure :%opConcat(:%)
;  1061 end procedure -- (for Edita/CtrlQ)
;  1062 --*/
;  1063     :%opConcat
;  1064 --------------
;  1065         --
;  1066         --  p1 = p2&p3
;  1067         --
;  1068         --  Map some cases to opApnd (which, obviously, saves duplicating 
;  1069         --  about 800 lines of code). Note that pmain.e often performs a 
;  1070         --  very similar mapping directly (since every clock counts!).
;  1071         --
;  1072         --  if atom(p3) -> p1 = append(p2,p3)
;  1073         --  elsif atom(p2) -> p1 = prepend(p3,p2) (==:%opApnd with swapped args & a flag of 1)
;  1074         --  elsif p1==p2 and refcount(p1)==1 and spare(p1)>=length(p3) and (not string(p2) or string(p3)) -> in situ
;  1075         --  elsif string(p2) and string(p3) -> new str
;  1076         --  else -> new seq
;  1077         --
;  1078     [32]
;  1079         -- calling convention (for p1:=p2&p3):
;  1080         --  lea edx,[p1]    
;  1081         --  lea edi,[p2]    (opUnassigned)
;  1082         --  lea ecx,[p3]    (opUnassigned)
;  1083         --  call :%opConcat             -- [edx]=[edi]&[ecx]
;  1084         push ebx    -- prepend flag (to match :%opApnd, if we map to it)
                push ebx                  ;#0045FD65: 123                        uv 00 08  1 265      
;  1085         push ecx    -- p3@[esp+8]
                push ecx                  ;#0045FD66: 121                        vu 00 02  1 265      
;  1086         push edi    -- p2@[esp+4]
                push edi                  ;#0045FD67: 127                        uv 00 80  1 266      
;  1087         push edx    -- p1@[esp]
                push edx                  ;#0045FD68: 122                        vu 00 04  1 266      
;  1088 
;  1089         mov esi,[edi]           -- ref of p2
                mov esi,[edi]             ;#0045FD69: 213067                     uv 40 80  1 267      
;  1090         mov ecx,[ecx]           -- ref of p3
                mov ecx,[ecx]             ;#0045FD6B: 213011                     vu 02 02  1 267      
;  1091 
;  1092         -- is p3 an atom?
;  1093         cmp ecx,h4
                cmp ecx,h4                ;#0045FD6D: 201371 00000040            uv 00 02  1 268      
;  1094         jl :opApndA
                jl #0045F9FF              ;#0045FD73: 017214 86FCFFFF            v  00 00  1 268      
;  1095         test byte[ebx+ecx*4-1],#80
                test byte[ebx+ecx*4-1],#80  ;#0045FD79: 366104213 FF 80            u  00 0A  2 269      
;  1096         jz :opApndA
                jz #0045F9FF              ;#0045FD7E: 017204 7BFCFFFF            v  00 00  1 270      
;  1097 
;  1098         -- is p2 an atom?
;  1099         cmp esi,h4
                cmp esi,h4                ;#0045FD84: 201376 00000040            uv 00 40  1 271      
;  1100         jl :ppMap
                jl #0045FD46              ;#0045FD8A: 174 BA                     v  00 00  1 271      
;  1101         test byte[ebx+esi*4-1],#80
                test byte[ebx+esi*4-1],#80  ;#0045FD8C: 366104263 FF 80            u  00 48  2 272      
;  1102         jz :ppMap
                jz #0045FD46              ;#0045FD91: 164 B3                     v  00 00  1 273      
;  1103 
;  1104         -- so, p2 and p3 are both string/sequence:
;  1105         
;  1106         shl esi,2           -- convert p2 to raw addr
                shl esi,2                 ;#0045FD93: 301346 02                  u  40 40  1 274      
;  1107         shl ecx,2           -- convert p3 to raw addr
                shl ecx,2                 ;#0045FD96: 301341 02                  u  02 02  1 275      
;  1108 
;  1109         mov eax,[esi-12]            -- length p2
                mov eax,[esi-12]          ;#0045FD99: 213106 F4                  uv 01 40  1 277    *40*
;  1110         mov edi,[ecx-12]            -- length p3
                mov edi,[ecx-12]          ;#0045FD9C: 213171 F4                  uv 80 02  1 279    *02*
;  1111         cmp eax,0
                cmp eax,0                 ;#0045FD9F: 203370 00                  vu 00 01  1 279      
;  1112         jnz @f
                jnz #0045FDC0             ;#0045FDA2: 165 1C                     v  00 00  1 280      
;  1113             -- ({} or "") & p3 is just p3
;  1114             -- if p1==p3 then just return
;  1115             cmp edx,[esp+8]
                    cmp edx,[esp+8]       ;#0045FDA4: 073124044 08               uv 00 14  2 281      
;  1116             je :CCret
                    je #0045FE56          ;#0045FDA8: 017204 A8000000            v  00 00  1 282      
;  1117 --p2js 25/4/21: (causes too many non-1 refcounts)
;  1118             cmp byte[ecx-1],0x80
                    cmp byte[ecx-1],#80   ;#0045FDAE: 200171 FF 80               u  00 02  2 283      
;  1119             je @f
                    je #0045FDC0          ;#0045FDB2: 164 0C                     v  00 00  1 284      
;  1120 --</p2js>
;  1121             lea eax,[ecx+1]
                    lea eax,[ecx+1]       ;#0045FDB4: 215101 01                  uv 01 02  1 285      
;  1122             add dword[ecx-8],1      -- increment refcount of p3.
                    add dword[ecx-8],1    ;#0045FDB7: 203101 F8 01               u  00 02  3 286      
;  1123             ror eax,2
                    ror eax,2             ;#0045FDBB: 301310 02                  np 01 01  1 289      
;  1124 --DEV try (or just reload the ref!) [NO: that's an AGI stall, fair bit more than 3 clocks!]
;  1125 --          mov edx,[ecx-8]
;  1126 --          lea eax,[ecx+1]
;  1127 --          inc edx
;  1128 --          ror eax,2
;  1129 --          mov [ecx-8],edx         -- refcount += 1
;  1130             jmp :CCstore
                    jmp #0045FE22         ;#0045FDBE: 353 62                     v  00 00  1 290      
;  1131       @@:
;  1132         cmp edi,0
                cmp edi,0                 ;#0045FDC0: 203377 00                  uv 00 80  1 291      
;  1133         jne @f
                jne #0045FDDB             ;#0045FDC3: 165 16                     v  00 00  1 291      
;  1134             -- p2 & ("" or {}) is just p2
;  1135             -- if p1==p2 then just return
;  1136             cmp edx,[esp+4]
                    cmp edx,[esp+4]       ;#0045FDC5: 073124044 04               uv 00 14  2 292      
;  1137             je :CCret
                    je #0045FE56          ;#0045FDC9: 017204 87000000            v  00 00  1 293      
;  1138 --DEV as above
;  1139             lea eax,[esi+1]
                    lea eax,[esi+1]       ;#0045FDCF: 215106 01                  uv 01 40  1 294      
;  1140             add dword[esi-8],1      -- increment refcount of p2.
                    add dword[esi-8],1    ;#0045FDD2: 203106 F8 01               u  00 40  3 295      
;  1141             ror eax,2
                    ror eax,2             ;#0045FDD6: 301310 02                  np 01 01  1 298      
;  1142             jmp :CCstore
                    jmp #0045FE22         ;#0045FDD9: 353 47                     v  00 00  1 299      
;  1143       @@:
;  1144 
;  1145         add edi,eax
                add edi,eax               ;#0045FDDB: 001307                     uv 80 81  1 300      
;  1146 --DEV I think this can go:
;  1147         mov eax,[edx]           -- target ref (for in situ checks)
                mov eax,[edx]             ;#0045FDDD: 213002                     vu 01 04  1 300      
;  1148         cmp byte[esi-1],0x82    -- p2 string?
                cmp byte[esi-1],#82       ;#0045FDDF: 200176 FF 82               u  00 40  2 301      
;  1149         jne :CCtwoSeq
                jne #0045FE5A             ;#0045FDE3: 165 75                     v  00 00  1 302      
;  1150         cmp byte[ecx-1],0x82    -- p3 string?
                cmp byte[ecx-1],#82       ;#0045FDE5: 200171 FF 82               u  00 02  2 303      
;  1151         jne :CCstrSeq
                jne #0045FF17             ;#0045FDE9: 017205 28010000            v  00 00  1 304      
;  1152         --
;  1153         -- is the target==p2 (a string), with a refcount of 1, and does it have space?
;  1154         -- (note: ensuring tgt == p2 also ensures that even if it is p3 we will not 
;  1155         --       damage it before we get round to copying it [I got clobbered on that first try])   --???
;  1156         --
;  1157         cmp edx,[esp+4]
                cmp edx,[esp+4]           ;#0045FDEF: 073124044 04               uv 00 14  2 305      
;  1158         jne @f
                jne #0045FE05             ;#0045FDF3: 165 10                     v  00 00  1 306      
;  1159 --          cmp byte[ebx+eax*4-1],0x82  -- (next test covers this)
;  1160 --          jne @f
;  1161 --          cmp eax,h4
;  1162 --          jne @f
;  1163 --          cmp dword[ebx+eax*4-8],1
;  1164             cmp dword[esi-8],1
                    cmp dword[esi-8],1    ;#0045FDF5: 203176 F8 01               u  00 40  2 307      
;  1165             jne @f
                    jne #0045FE05         ;#0045FDF9: 165 0A                     v  00 00  1 308      
;  1166             -- for a string, [ref*4-16] is maxlen+sHdr+1
;  1167 --          mov ecx,[ebx+eax*4-16]      -- maxlen
;  1168             mov eax,[esi-16]            -- maxlen
                    mov eax,[esi-16]      ;#0045FDFB: 213106 F0                  uv 01 40  1 309      
;  1169             sub eax,16+1
                    sub eax,17            ;#0045FDFE: 203350 11                  uv 01 01  1 310 01   
;  1170             cmp eax,edi
                    cmp eax,edi           ;#0045FE01: 071370                     uv 00 81  1 311 01   
;  1171             jge :CCstringInSitu
                    jge #0045FE40         ;#0045FE03: 175 3B                     v  00 00  1 311      
;  1172       @@:
;  1173         mov edx,ecx                 -- save raw(p3)
                mov edx,ecx               ;#0045FE05: 213321                     uv 04 02  1 312      
;  1174         mov ecx,edi
                mov ecx,edi               ;#0045FE07: 213317                     vu 02 80  1 312      
;  1175         call :%pAllocStr            -- damages eax only
                call #0046377D (:%pAllocStr)  ;#0045FE09: 350 6F390000               v  00 00  1 313      
;  1176         push eax
                push eax                  ;#0045FE0E: 120                        uv 00 01  1 314      
;  1177         mov ecx,[esi-12]            -- length(p2)
                mov ecx,[esi-12]          ;#0045FE0F: 213116 F4                  vu 02 40  1 314      
;  1178         lea edi,[ebx+eax*4]
                lea edi,[ebx+eax*4]       ;#0045FE12: 215074203                  uv 80 09  1 315      
;  1179         rep movsb
                rep movsb                 ;#0045FE15: 363:244                    np C2 C2  4 318    *80*
;  1180         mov ecx,[edx-12]            -- length(p3)
                mov ecx,[edx-12]          ;#0045FE17: 213112 F4                  uv 02 04  1 322      
;  1181         mov esi,edx
                mov esi,edx               ;#0045FE1A: 213362                     vu 40 04  1 322      
;  1182         add ecx,1                   -- include trailing null
                add ecx,1                 ;#0045FE1C: 203301 01                  uv 02 02  1 323      
;  1183         rep movsb
                rep movsb                 ;#0045FE1F: 363:244                    np C2 C2  4 325    *40*
;  1184         pop eax
                pop eax                   ;#0045FE21: 130                        uv 01 00  1 329      
;  1185 
;  1186   ::CCstore
;  1187 -----------
;  1188         mov edi,[esp]           -- target addr
                mov edi,[esp]             ;#0045FE22: 213074044                  vu 80 10  1 329      
;  1189         add esp,16
                add esp,16                ;#0045FE25: 203304 10                  uv 10 10  1 330      
;  1190 --DEV try some nop here
;  1191         mov edx,[edi]           -- prev ref
                mov edx,[edi]             ;#0045FE28: 213027                     uv 04 80  1 332    *80*
;  1192         mov [edi],eax           -- store new ref
                mov [edi],eax             ;#0045FE2A: 211007                     vu 00 81  1 332      
;  1193         cmp edx,h4
                cmp edx,h4                ;#0045FE2C: 201372 00000040            uv 00 04  1 333      
;  1194         jle @f
                jle #0045FE3F             ;#0045FE32: 176 0B                     v  00 00  1 333      
;  1195             sub dword[ebx+edx*4-8],1
                    sub dword[ebx+edx*4-8],1  ;#0045FE34: 203154223 F8 01            u  00 0C  3 334      
;  1196             jz :%pDealloc
                    jz #004639A8 (:%pDealloc)  ;#0045FE39: 017204 693B0000            v  00 00  1 336      
;  1197       @@:
;  1198         ret
                ret                       ;#0045FE3F: 303                        np 00 00  2 337      
;  1199 
;  1200   ::CCstringInSitu
;  1201 ------------------
;  1202         -- we have proved that tgt=p2, string, refcount is 1, and there is enough space.
;  1203         -- we just need to copy p3 at end of target and update the length.
;  1204         -- recap:
;  1205         --  addr p1,p2,p3,flag @ [esp],[esp+4],[esp+8],[esp+12]
;  1206         --  edi is the new length
;  1207         --  esi is raw(p2)
;  1208         --  ecx is raw(p3)
;  1209         mov eax,[esi-12]            -- length(p2)
                mov eax,[esi-12]          ;#0045FE40: 213106 F4                  uv 01 40  1 339      
;  1210         mov edx,ecx
                mov edx,ecx               ;#0045FE43: 213321                     vu 04 02  1 339      
;  1211         mov ecx,[ecx-12]            -- length(p3)
                mov ecx,[ecx-12]          ;#0045FE45: 213111 F4                  uv 02 02  1 340      
;  1212         mov [esi-12],edi            -- set new length
                mov [esi-12],edi          ;#0045FE48: 211176 F4                  vu 00 C0  1 340      
;  1213 --      add esi,eax
;  1214         mov edi,esi
                mov edi,esi               ;#0045FE4B: 213376                     uv 80 40  1 341      
;  1215         mov esi,edx
                mov esi,edx               ;#0045FE4D: 213362                     vu 40 04  1 341      
;  1216         add ecx,1
                add ecx,1                 ;#0045FE4F: 203301 01                  uv 02 02  1 342      
;  1217         add edi,eax
                add edi,eax               ;#0045FE52: 001307                     vu 80 81  1 342      
;  1218         rep movsb                   -- copy p3 content and terminating null
                rep movsb                 ;#0045FE54: 363:244                    np C2 C2  4 345    *80*
;  1219       ::CCret
;  1220         add esp,16
                add esp,16                ;#0045FE56: 203304 10                  uv 10 10  1 349      
;  1221         ret
                ret                       ;#0045FE59: 303                        np 00 00  2 350      
;  1222 --/*
;  1223 <DEV>god knows how I got to the above starting from this...:
;  1224 CCstringInSitu:
;  1225     ; we have proved that tgt=p2, hard left, refcount is 1, and there is enough space.
;  1226     ; we just need to copy p3 at end of target.
;  1227     mov [ebx+eax*4-12],edx      ; set new length
;  1228     sub edx,ecx                 ; length original p3
;  1229 if newBase
;  1230     mov esi,edi
;  1231 end if
;  1232     lea edi,[eax*4+ecx]         ; dest is base p2(=tgt)+length p2
;  1233     lea ecx,[edx+1]
;  1234     rep movsb                   ; copy p3 content and terminating null
;  1235     ret
;  1236 --*/
;  1237 
;  1238   ::CCtwoSeq
;  1239 ------------
;  1240 --X     -- p2 is a dword-sequence, and p3 is a seq/str. Neither are length 0
;  1241         -- p2 is a dword-sequence, and p3 is a seq/str. NB p2 can be length 0
;  1242         -- recap:
;  1243         --  addr p1,p2,p3,flag @ [esp],[esp+4],[esp+8],[esp+12]
;  1244         --  edi is the new length
;  1245         --  esi is raw(p2)
;  1246         --  ecx is raw(p3)
;  1247         --  edx is addr p1 (==[esp])
;  1248         --  eax is [p1] (if that is any help)
;  1249         cmp edx,[esp+4]         -- p1==p2?
                cmp edx,[esp+4]           ;#0045FE5A: 073124044 04               uv 00 14  2 352      
;  1250         jne :CCnewSeq
                jne #0045FEB8             ;#0045FE5E: 165 58                     v  00 00  1 353      
;  1251         cmp dword[esi-8],1          -- refcount 1?
                cmp dword[esi-8],1        ;#0045FE60: 203176 F8 01               u  00 40  2 354      
;  1252         jne :CCnewSeqClone
                jne #0045FEAF             ;#0045FE64: 165 49                     v  00 00  1 355      
;  1253 --      jne :CCnewSeq
;  1254         mov edx,[esi-16]        -- maxlen
                mov edx,[esi-16]          ;#0045FE66: 213126 F0                  uv 04 40  1 356      
;  1255         sub edx,[esi-20]        -- slack (we make no attempt to use that here)
                sub edx,[esi-20]          ;#0045FE69: 053126 EC                  uv 04 44  2 357 04   
;  1256         sub edx,20
                sub edx,20                ;#0045FE6C: 203352 14                  uv 04 04  1 359 04   
;  1257         shr edx,2               -- (bytes->dwords)
                shr edx,2                 ;#0045FE6F: 301352 02                  u  04 04  1 360      
;  1258         cmp edi,edx
                cmp edi,edx               ;#0045FE72: 071327                     uv 00 84  1 361 04   
;  1259 -- advice taken, 30/1/15:
;  1260 --jg?
;  1261 --      jl :CCnewSeq
;  1262 --DEV not call :%pAlloClone...: (we are also doing a bunch of pointless increfs)
;  1263         jg :CCnewSeq
                jg #0045FEB8              ;#0045FE74: 177 42                     v  00 00  1 361      
;  1264         mov edx,[esi-12]        -- length(p2)
                mov edx,[esi-12]          ;#0045FE76: 213126 F4                  uv 04 40  1 362      
;  1265         cmp byte[ecx-1],#82
                cmp byte[ecx-1],#82       ;#0045FE79: 200171 FF 82               u  00 02  2 363      
;  1266 --17/6/15:
;  1267         push dword[ecx-12]
                push dword[ecx-12]        ;#0045FE7D: 377161 F4                  np 00 02  2 365      
;  1268         mov [esi-12],edi        -- replace length now
                mov [esi-12],edi          ;#0045FE80: 211176 F4                  uv 00 C0  1 367      
;  1269         lea edi,[esi+edx*4]
                lea edi,[esi+edx*4]       ;#0045FE83: 215074226                  vu 80 44  1 367      
;  1270         mov esi,ecx
                mov esi,ecx               ;#0045FE86: 213361                     uv 40 02  1 368      
;  1271 --NO!; x &= x will have just clobbered this!
;  1272 -->!        mov ecx,[ecx-12]        -- length(p3)
;  1273         pop ecx
                pop ecx                   ;#0045FE88: 131                        vu 02 00  1 368      
;  1274         jne :CCSeqSeqInSitu
                jne #0045FE98             ;#0045FE89: 165 0D                     v  00 00  1 369      
;  1275         -- expand the string
;  1276         xor eax,eax
                xor eax,eax               ;#0045FE8B: 061300                     uv 01 01  1 370      
;  1277       @@:
;  1278         lodsb
                lodsb                     ;#0045FE8D: 254                        np 41 40  2 371      
;  1279         stosd
                stosd                     ;#0045FE8E: 253                        np 80 81  3 373      
;  1280         sub ecx,1
                sub ecx,1                 ;#0045FE8F: 203351 01                  uv 02 02  1 376      
;  1281         jnz @b
                jnz #0045FE8D             ;#0045FE92: 165 F9                     v  00 00  1 376      
;  1282         add esp,16
                add esp,16                ;#0045FE94: 203304 10                  uv 10 10  1 377      
;  1283         ret
                ret                       ;#0045FE97: 303                        np 00 00  2 378      
;  1284 
;  1285   ::CCSeqSeqInSitu
;  1286 ------------------
;  1287         lodsd
                lodsd                     ;#0045FE98: 255                        np 41 40  2 380      
;  1288         stosd
                stosd                     ;#0045FE99: 253                        np 80 81  3 382      
;  1289         cmp eax,h4
                cmp eax,h4                ;#0045FE9A: 075 00000040               uv 00 01  1 385      
;  1290         jl @f
                jl #0045FEA6              ;#0045FE9F: 174 05                     v  00 00  1 385      
;  1291           add dword[ebx+eax*4-8],1
                  add dword[ebx+eax*4-8],1  ;#0045FEA1: 203104203 F8 01            u  00 09  3 386      
;  1292       @@:
;  1293         sub ecx,1
                sub ecx,1                 ;#0045FEA6: 203351 01                  vu 02 02  1 388      
;  1294         jnz :CCSeqSeqInSitu
                jnz #0045FE98             ;#0045FEA9: 165 ED                     v  00 00  1 389      
;  1295         add esp,16
                add esp,16                ;#0045FEAB: 203304 10                  uv 10 10  1 390      
;  1296         ret
                ret                       ;#0045FEAE: 303                        np 00 00  2 391      
;  1297 
;  1298   ::CCnewSeqClone
;  1299         mov edx,[esp+16]            -- era
                mov edx,[esp+16]          ;#0045FEAF: 213124044 10               uv 04 10  1 393      
;  1300         call :%pAlloClone
                call #00463814 (:%pAlloClone)  ;#0045FEB3: 350 5C390000               v  00 00  1 393      
;  1301   ::CCnewSeq
;  1302 ------------
;  1303 --X     -- p2 is a dword-sequence, and p3 is a seq/str. Neither are length 0
;  1304         -- p2 is a dword-sequence, and p3 is a seq/str. NB p2 can be length 0
;  1305         -- recap:
;  1306         --  addr p1,p2,p3,flag,era @ [esp],[esp+4],[esp+8],[esp+12],[esp+16]
;  1307         --  edi is the new length
;  1308         --  esi is raw(p2)
;  1309         --  ecx is raw(p3)
;  1310         --  edx is unknown
;  1311 --      --  eax is [p1] (if that is any help) [may try removing that anyway]
;  1312 --      mov edx,ecx
;  1313         mov edx,[esp+16]            -- era
                mov edx,[esp+16]          ;#0045FEB8: 213124044 10               uv 04 10  1 394      
;  1314         push ecx
                push ecx                  ;#0045FEBC: 121                        vu 00 02  1 394      
;  1315         mov ecx,edi
                mov ecx,edi               ;#0045FEBD: 213317                     uv 02 80  1 395      
;  1316 --X     call :%pAlloClone       -- (done above)
;  1317         call :%pAllocSeq        -- damages eax only
                call #00463832 (:%pAllocSeq)  ;#0045FEBF: 350 6E390000               v  00 00  1 395      
;  1318         pop edx
                pop edx                   ;#0045FEC4: 132                        uv 04 00  1 396      
;  1319         lea edi,[ebx+eax*4]
                lea edi,[ebx+eax*4]       ;#0045FEC5: 215074203                  vu 80 09  1 396      
;  1320         push eax
                push eax                  ;#0045FEC8: 120                        uv 00 01  1 397      
;  1321         mov ecx,[esi-12]
                mov ecx,[esi-12]          ;#0045FEC9: 213116 F4                  vu 02 40  1 397      
;  1322         cmp ecx,0
                cmp ecx,0                 ;#0045FECC: 203371 00                  uv 00 02  1 398      
;  1323         je :CCnsp2empty
                je #0045FEE4              ;#0045FECF: 164 13                     v  00 00  1 398      
;  1324       ::CCnsClonep2Loop 
;  1325         lodsd
                lodsd                     ;#0045FED1: 255                        np 41 40  2 399      
;  1326         stosd
                stosd                     ;#0045FED2: 253                        np 80 81  3 401      
;  1327         cmp eax,h4
                cmp eax,h4                ;#0045FED3: 075 00000040               uv 00 01  1 404      
;  1328         jl @f
                jl #0045FEDF              ;#0045FED8: 174 05                     v  00 00  1 404      
;  1329           add dword[ebx+eax*4-8],1
                  add dword[ebx+eax*4-8],1  ;#0045FEDA: 203104203 F8 01            u  00 09  3 405      
;  1330       @@:
;  1331         sub ecx,1
                sub ecx,1                 ;#0045FEDF: 203351 01                  vu 02 02  1 407      
;  1332         jnz :CCnsClonep2Loop
                jnz #0045FED1             ;#0045FEE2: 165 ED                     v  00 00  1 408      
;  1333       ::CCnsp2empty
;  1334         mov ecx,[edx-12]            -- length p3
                mov ecx,[edx-12]          ;#0045FEE4: 213112 F4                  uv 02 04  1 409      
;  1335         mov esi,edx
                mov esi,edx               ;#0045FEE7: 213362                     vu 40 04  1 409      
;  1336         cmp byte[edx-1],#82
                cmp byte[edx-1],#82       ;#0045FEE9: 200172 FF 82               u  00 04  2 410      
;  1337         jne :CCnsClonep3Loop
                jne #0045FEFE             ;#0045FEED: 165 0F                     v  00 00  1 411      
;  1338         xor eax,eax
                xor eax,eax               ;#0045FEEF: 061300                     uv 01 01  1 412      
;  1339       ::CCnsExpandp3Loop 
;  1340         lodsb
                lodsb                     ;#0045FEF1: 254                        np 41 40  2 413      
;  1341         stosd
                stosd                     ;#0045FEF2: 253                        np 80 81  3 415      
;  1342         sub ecx,1
                sub ecx,1                 ;#0045FEF3: 203351 01                  uv 02 02  1 418      
;  1343         jnz :CCnsExpandp3Loop
                jnz #0045FEF1             ;#0045FEF6: 165 F9                     v  00 00  1 418      
;  1344         pop eax
                pop eax                   ;#0045FEF8: 130                        uv 01 00  1 419      
;  1345         jmp :CCstore
                jmp #0045FE22             ;#0045FEF9: 351 24FFFFFF               v  00 00  1 419      
;  1346 
;  1347       ::CCnsClonep3Loop     -- (also used by CCstrSeq)
;  1348         lodsd
                lodsd                     ;#0045FEFE: 255                        np 41 40  2 420      
;  1349         stosd
                stosd                     ;#0045FEFF: 253                        np 80 81  3 422      
;  1350         cmp eax,h4
                cmp eax,h4                ;#0045FF00: 075 00000040               uv 00 01  1 425      
;  1351         jl @f
                jl #0045FF0C              ;#0045FF05: 174 05                     v  00 00  1 425      
;  1352           add dword[ebx+eax*4-8],1
                  add dword[ebx+eax*4-8],1  ;#0045FF07: 203104203 F8 01            u  00 09  3 426      
;  1353       @@:
;  1354         sub ecx,1
                sub ecx,1                 ;#0045FF0C: 203351 01                  vu 02 02  1 428      
;  1355         jnz :CCnsClonep3Loop
                jnz #0045FEFE             ;#0045FF0F: 165 ED                     v  00 00  1 429      
;  1356         pop eax
                pop eax                   ;#0045FF11: 130                        uv 01 00  1 430      
;  1357         jmp :CCstore
                jmp #0045FE22             ;#0045FF12: 351 0BFFFFFF               v  00 00  1 430      
;  1358     
;  1359   ::CCstrSeq
;  1360 ------------
;  1361 --X     -- p2 is a string, p3 is a dword-sequence. Neither are length 0
;  1362         -- p2 is a string, p3 is a dword-sequence. NB p2 can be length 0
;  1363         -- recap:
;  1364         --  addr p1,p2,p3,flag,era @ [esp],[esp+4],[esp+8],[esp+12],[esp+16]
;  1365         --  edi is the new length
;  1366         --  esi is raw(p2)
;  1367         --  ecx is raw(p3)
;  1368         --  edx is addr p1 (==[esp])
;  1369         --  eax is [p1] (if that is any help)
;  1370 --      mov edx,ecx
;  1371         mov edx,[esp+16]            -- era
                mov edx,[esp+16]          ;#0045FF17: 213124044 10               uv 04 10  1 431      
;  1372         push ecx
                push ecx                  ;#0045FF1B: 121                        vu 00 02  1 431      
;  1373         mov ecx,edi
                mov ecx,edi               ;#0045FF1C: 213317                     uv 02 80  1 432      
;  1374         call :%pAllocSeq
                call #00463832 (:%pAllocSeq)  ;#0045FF1E: 350 0F390000               v  00 00  1 432      
;  1375         pop edx
                pop edx                   ;#0045FF23: 132                        uv 04 00  1 433      
;  1376         lea edi,[ebx+eax*4]
                lea edi,[ebx+eax*4]       ;#0045FF24: 215074203                  vu 80 09  1 433      
;  1377         push eax
                push eax                  ;#0045FF27: 120                        uv 00 01  1 434      
;  1378         mov ecx,[esi-12]
                mov ecx,[esi-12]          ;#0045FF28: 213116 F4                  vu 02 40  1 434      
;  1379         xor eax,eax
                xor eax,eax               ;#0045FF2B: 061300                     uv 01 01  1 435      
;  1380         cmp ecx,0
                cmp ecx,0                 ;#0045FF2D: 203371 00                  vu 00 02  1 435      
;  1381         je :CCnss2empty
                je #0045FF39              ;#0045FF30: 164 07                     v  00 00  1 436      
;  1382       ::CCssExpandp2Loop 
;  1383         lodsb
                lodsb                     ;#0045FF32: 254                        np 41 40  2 437      
;  1384         stosd
                stosd                     ;#0045FF33: 253                        np 80 81  3 439      
;  1385         sub ecx,1
                sub ecx,1                 ;#0045FF34: 203351 01                  uv 02 02  1 442      
;  1386         jnz :CCssExpandp2Loop
                jnz #0045FF32             ;#0045FF37: 165 F9                     v  00 00  1 442      
;  1387       ::CCnss2empty
;  1388         mov ecx,[edx-12]            -- length p3
                mov ecx,[edx-12]          ;#0045FF39: 213112 F4                  uv 02 04  1 443      
;  1389         mov esi,edx
                mov esi,edx               ;#0045FF3C: 213362                     vu 40 04  1 443      
;  1390         jmp :CCnsClonep3Loop
                jmp #0045FEFE             ;#0045FF3E: 353 BE                     v  00 00  1 444      
;  1391     
;  1392     [64]
;  1393         -- calling convention (for p1:=p2&p3):
;  1394         --  lea rdx,[p1]    
;  1395         --  lea rdi,[p2]    (opUnassigned)
;  1396         --  lea rcx,[p3]    (opUnassigned)
;  1397         --  call :%opConcat             -- [rdx]=[rdi]&[rcx]
;  1398         push rbx    -- prepend flag (to match :%opApnd, if we map to it)
;  1399         push rcx    -- p3@[rsp+16]
;  1400         push rdi    -- p2@[rsp+8]
;  1401         push rdx    -- p1@[rsp]
;  1402 
;  1403         mov rsi,[rdi]           -- ref of p2
;  1404         mov rcx,[rcx]           -- ref of p3
;  1405         mov r15,h4
;  1406 
;  1407         -- is p3 an atom?
;  1408         cmp rcx,r15
;  1409         jl :opApndA
;  1410         test byte[rbx+rcx*4-1],#80
;  1411         jz :opApndA
;  1412 
;  1413         -- is p2 an atom?
;  1414         cmp rsi,r15
;  1415         jl :ppMap64
;  1416         test byte[rbx+rsi*4-1],#80
;  1417         jz :ppMap64
;  1418 
;  1419         -- so, p2 and p3 are both string/sequence:
;  1420         
;  1421         shl rsi,2           -- convert p2 to raw addr
;  1422         shl rcx,2           -- convert p3 to raw addr
;  1423 
;  1424         mov rax,[rsi-24]            -- length p2
;  1425         mov rdi,[rcx-24]            -- length p3
;  1426         cmp rax,0
;  1427         jnz @f
;  1428             -- ({} or "") & p3 is just p3
;  1429             -- if p1==p3 then just return
;  1430             cmp rdx,[rsp+16]        -- DEV might refs (rather that addrs) be better?
;  1431             je :CCret64
;  1432 --p2js 25/4/21: (causes too many non-1 refcounts)
;  1433             cmp byte[rcx-1],#80
;  1434             je @f
;  1435 --</p2js>
;  1436             lea rax,[rcx+1]
;  1437             add qword[rcx-16],1     -- increment refcount of p3.
;  1438             ror rax,2
;  1439             jmp :CCstore64
;  1440       @@:
;  1441         cmp rdi,0
;  1442         jne @f
;  1443             -- p2 & ("" or {}) is just p2
;  1444             -- if p1==p2 then just return
;  1445             cmp rdx,[rsp+8]         -- ditto
;  1446             je :CCret64
;  1447             lea rax,[rsi+1]
;  1448             add qword[rsi-16],1     -- increment refcount of p2.
;  1449             ror rax,2
;  1450             jmp :CCstore64
;  1451       @@:
;  1452 
;  1453         add rdi,rax
;  1454 --DEV I think this can go:
;  1455 --28/08/15 (put back in, just to match 32 bit version...)
;  1456         mov rax,[rdx]           -- target ref (for in situ checks)
;  1457         cmp byte[rsi-1],0x82    -- p2 string?
;  1458         jne :CCtwoSeq64
;  1459         cmp byte[rcx-1],0x82    -- p3 string?
;  1460         jne :CCstrSeq64
;  1461         --
;  1462         -- is the target==p2 (a string), with a refcount of 1, and does it have space?
;  1463         -- (note: ensuring tgt == p2 also ensures that even if it is p3 we will not 
;  1464         --       damage it before we get round to copying it [I got clobbered on that first try])   --???
;  1465         --
;  1466         cmp rdx,[rsp+8]
;  1467         jne @f
;  1468             cmp qword[rsi-16],1
;  1469             jne @f
;  1470             mov rax,[rsi-32]            -- maxlen
;  1471             sub rax,32+1
;  1472             cmp rax,rdi
;  1473             jge :CCstringInSitu64
;  1474       @@:
;  1475         mov rdx,rcx                 -- save raw(p3)
;  1476         mov rcx,rdi
;  1477         call :%pAllocStr            -- damages eax only
;  1478         push rax
;  1479         mov rcx,[rsi-24]            -- length(p2)
;  1480         lea rdi,[rbx+rax*4]
;  1481         rep movsb
;  1482         mov rcx,[rdx-24]            -- length(p3)
;  1483         mov rsi,rdx
;  1484         add rcx,1                   -- include trailing null
;  1485         rep movsb
;  1486         pop rax
;  1487 
;  1488   ::CCstore64
;  1489 -------------
;  1490         mov rdi,[rsp]           -- target addr
;  1491         add rsp,32
;  1492 --DEV try some nop here
;  1493         mov rdx,[rdi]           -- prev ref
;  1494         mov [rdi],rax           -- store new ref
;  1495         cmp rdx,r15
;  1496         jle @f
;  1497             sub qword[rbx+rdx*4-16],1
;  1498             jz :%pDealloc
;  1499       @@:
;  1500         ret
;  1501 
;  1502   ::CCstringInSitu64
;  1503 --------------------
;  1504         -- we have proved that tgt=p2, string, refcount is 1, and there is enough space.
;  1505         -- we just need to copy p3 at end of target and update the length.
;  1506         -- recap:
;  1507         --  addr p1,p2,p3,flag @ [rsp],[rsp+8],[rsp+16],[rsp+24]
;  1508         --  rdi is the new length
;  1509         --  rsi is raw(p2)
;  1510         --  rcx is raw(p3)
;  1511         mov rax,[rsi-24]            -- length(p2)
;  1512         mov rdx,rcx
;  1513         mov rcx,[rcx-24]            -- length(p3)
;  1514         mov [rsi-24],rdi            -- set new length
;  1515         mov rdi,rsi
;  1516         mov rsi,rdx
;  1517         add rcx,1
;  1518         add rdi,rax
;  1519         rep movsb                   -- copy p3 content and terminating null
;  1520       ::CCret64
;  1521         add rsp,32
;  1522         ret
;  1523 
;  1524   ::CCtwoSeq64
;  1525 --------------
;  1526 --X     -- p2 is a dword-sequence, and p3 is a seq/str. Neither are length 0
;  1527         -- p2 is a dword-sequence, and p3 is a seq/str. NB p2 can be length 0
;  1528         -- recap:
;  1529         --  addr p1,p2,p3,flag @ [rsp],[rsp+8],[rsp+16],[rsp+24]
;  1530         --  rdi is the new length
;  1531         --  rsi is raw(p2)
;  1532         --  rcx is raw(p3)
;  1533         --  rdx is addr p1 (==[rsp])
;  1534 --      --  rax is [p1] (if that is any help) [removed]
;  1535         cmp rdx,[rsp+8]         -- p1==p2?
;  1536         jne :CCnewSeq64
;  1537         cmp qword[rsi-16],1         -- refcount 1?
;  1538         jne :CCnewSeq64Clone
;  1539 --      jne :CCnewSeq64
;  1540         mov rdx,[rsi-32]        -- maxlen
;  1541         sub rdx,[rsi-40]        -- slack (we make no attempt to use that here)
;  1542         sub rdx,40
;  1543         shr rdx,3               -- (bytes->qwords)
;  1544         cmp rdi,rdx
;  1545 --advice belatedly taken (to match 32-bit) 28/8/15..
;  1546 --jg?
;  1547 --      jl :CCnewSeq64
;  1548 --dev not :%pAlloClone      -- (we are also doing a bunch of pointless incref)
;  1549         jg :CCnewSeq64
;  1550         mov rdx,[rsi-24]        -- length(p2)
;  1551         cmp byte[rcx-1],#82
;  1552 --17/6/15:
;  1553         push qword[rcx-24]
;  1554         mov [rsi-24],rdi        -- replace length now
;  1555 --28/12/15:
;  1556 --      lea rdi,[rsi+rdx*4]
;  1557         lea rdi,[rsi+rdx*8]
;  1558         mov rsi,rcx
;  1559 --NO!; x &= x will have just clobbered this!
;  1560 -->     mov rcx,[rcx-24]        -- length(p3)
;  1561         pop rcx
;  1562         jne :CCSeqSeqInSitu64
;  1563         -- expand the string
;  1564         xor rax,rax
;  1565       @@:
;  1566         lodsb
;  1567         stosq
;  1568         sub rcx,1
;  1569         jnz @b
;  1570         add rsp,32
;  1571         ret
;  1572 
;  1573   ::CCSeqSeqInSitu64
;  1574 --------------------
;  1575         lodsq
;  1576         stosq
;  1577         cmp rax,r15
;  1578         jl @f
;  1579           add qword[rbx+rax*4-16],1
;  1580       @@:
;  1581         sub rcx,1
;  1582         jnz :CCSeqSeqInSitu64
;  1583         add rsp,32
;  1584         ret
;  1585 
;  1586   ::CCnewSeq64Clone
;  1587         mov rdx,[rsp+32]            -- era
;  1588         call :%pAlloClone
;  1589   ::CCnewSeq64
;  1590 --------------
;  1591 --X     -- p2 is a dword-sequence, and p3 is a seq/str. Neither are length 0
;  1592         -- p2 is a dword-sequence, and p3 is a seq/str. NB p2 can be length 0
;  1593         -- recap:
;  1594         --  addr p1,p2,p3,flag,era @ [rsp],[rsp+8],[rsp+16],[rsp+24],[rsp+32]
;  1595         --  rdi is the new length
;  1596         --  rsi is raw(p2)
;  1597         --  rcx is raw(p3)
;  1598         --  rdx is unknown
;  1599 --      --  rax is [p1] (if that is any help) [may try removing that anyway][have]
;  1600 --      mov rdx,rcx
;  1601         mov rdx,[rsp+32]            -- era
;  1602         push rcx
;  1603         mov rcx,rdi
;  1604 --X     call :%pAlloClone           -- (done above)
;  1605         call :%pAllocSeq            -- damages eax only
;  1606         pop rdx
;  1607         lea rdi,[rbx+rax*4]
;  1608         push rax
;  1609         mov rcx,[rsi-24]
;  1610         cmp rcx,0
;  1611         je :CCnsp2empty64
;  1612       ::CCnsClonep2Loop64
;  1613         lodsq
;  1614         stosq
;  1615         cmp rax,r15
;  1616         jl @f
;  1617           add qword[rbx+rax*4-16],1
;  1618       @@:
;  1619         sub rcx,1
;  1620         jnz :CCnsClonep2Loop64
;  1621       ::CCnsp2empty64
;  1622 --      mov rcx,[rdx-12]            -- length p3
;  1623         mov rcx,[rdx-24]            -- length p3
;  1624         mov rsi,rdx
;  1625         cmp byte[rdx-1],#82
;  1626         jne :CCnsClonep3Loop64
;  1627         xor rax,rax
;  1628       ::CCnsExpandp3Loop64
;  1629         lodsb
;  1630         stosq
;  1631         sub rcx,1
;  1632         jnz :CCnsExpandp3Loop64
;  1633         pop rax
;  1634         jmp :CCstore64
;  1635 
;  1636       ::CCnsClonep3Loop64   -- (also used by CCstrSeq)
;  1637         lodsq
;  1638         stosq
;  1639         cmp rax,r15
;  1640         jl @f
;  1641           add qword[rbx+rax*4-16],1
;  1642       @@:
;  1643         sub rcx,1
;  1644         jnz :CCnsClonep3Loop64
;  1645         pop rax
;  1646         jmp :CCstore64
;  1647     
;  1648   ::CCstrSeq64
;  1649 --------------
;  1650 --X     -- p2 is a string, p3 is a dword-sequence. Neither are length 0
;  1651         -- p2 is a string, p3 is a dword-sequence. NB p2 can be length 0
;  1652         -- recap:
;  1653         --  addr p1,p2,p3,flag,era @ [rsp],[rsp+8],[rsp+16],[rsp+24],[rsp+32]
;  1654         --  rdi is the new length
;  1655         --  rsi is raw(p2)
;  1656         --  rcx is raw(p3)
;  1657         --  rdx is addr p1 (==[rsp])
;  1658         --  rax is [p1] (if that is any help)
;  1659 --      mov rdx,rcx
;  1660         mov rdx,[rsp+32]            -- era
;  1661         push rcx
;  1662         mov rcx,rdi
;  1663         call :%pAllocSeq
;  1664         pop rdx
;  1665         lea rdi,[rbx+rax*4]
;  1666         push rax
;  1667         mov rcx,[rsi-24]
;  1668         xor rax,rax
;  1669         cmp rcx,0
;  1670         je :CCnss2empty
;  1671       ::CCssExpandp2Loop64
;  1672         lodsb
;  1673         stosq
;  1674         sub rcx,1
;  1675         jnz :CCssExpandp2Loop64
;  1676       ::CCnss2empty
;  1677         mov rcx,[rdx-24]            -- length p3
;  1678         mov rsi,rdx
;  1679         jmp :CCnsClonep3Loop64
;  1680     []
;  1681 
;  1682 
;  1683 --/*
;  1684 procedure :%opCatsi(:%)
;  1685 end procedure -- (for Edita/CtrlQ)
;  1686 --*/
;  1687     :%opCatsi
;  1688 -------------
;  1689         --
;  1690         --  Optimised form of opConcat for p1&=p2 (===p1:=p1&p2), when p2 
;  1691         --  is integer or sequence of integer (as proven in the gvar_scan) 
;  1692         --  and p1 is a dword-sequence, and p1!=p2 and both p1,p2 are init.
;  1693         --  (So obviously it uses rep movsd instead of a test/incref loop.)
;  1694         --  Maps to opConcat when refcount!=1, insufficient space, etc.
;  1695         --  Calling this with floats/strings/nested sequences in p2 will
;  1696         --  lead to disaster. Originally, p1 had to be sequence of integer,
;  1697         --  but implementation yielded that it can be any dword-sequence,
;  1698         --  including one containing floats/strings/subsequences, because
;  1699         --  any cloning etc is palmed off to opConcat anyway. It may in 
;  1700         --  fact be valid to call this when p1==p2, but that has never 
;  1701         --  been tested and I strongly doubt it would ever gain anything.
;  1702         --
;  1703     [32]
;  1704         --calling convention:
;  1705         --  mov edi,[p1]    -- (ref)
;  1706         --  lea edx,[p1]    -- (address)    -- (must be init sequence of integer)
;  1707         --  lea esi,[p2]    --   ""         -- (must be init [sequence of] integer)
;  1708         --  call :%opCatsi
;  1709         --
;  1710         cmp dword[ebx+edi*4-8],1    -- refcount of tgt (!=1)
                cmp dword[ebx+edi*4-8],1  ;#0045FF40: 203174273 F8 01            u  00 88  2 445      
;  1711         jne :UseopConcat
                jne #0045FF8C             ;#0045FF45: 165 45                     v  00 00  1 446      
;  1712         push edx                    --[1] save addr p1
                push edx                  ;#0045FF47: 122                        uv 00 04  1 447      
;  1713         push esi                    --[2] save addr p2
                push esi                  ;#0045FF48: 126                        vu 00 40  1 447      
;  1714         mov eax,[esi]               -- src(p2) ref
                mov eax,[esi]             ;#0045FF49: 213006                     uv 01 40  1 448      
;  1715         -- how many new dwords do we need?
;  1716         mov ecx,1                   -- default for p1 &= <int> case
                mov ecx,1                 ;#0045FF4B: 271 01000000               vu 02 00  1 448      
;  1717         cmp eax,h4
                cmp eax,h4                ;#0045FF50: 075 00000040               uv 00 01  1 449      
;  1718         jl @f
                jl #0045FF5E              ;#0045FF55: 174 07                     v  00 00  1 449      
;  1719             mov ecx,[ebx+eax*4-12]  -- length(p2)
                    mov ecx,[ebx+eax*4-12]  ;#0045FF57: 213114203 F4               uv 02 09  1 450      
;  1720             lea esi,[ebx+eax*4]
                    lea esi,[ebx+eax*4]   ;#0045FF5B: 215064203                  vu 40 09  1 450      
;  1721       @@:
;  1722         mov eax,[ebx+edi*4-12]      -- original length p1
                mov eax,[ebx+edi*4-12]    ;#0045FF5E: 213104273 F4               uv 01 88  1 451      
;  1723         push esi                    --[3] save
                push esi                  ;#0045FF62: 126                        vu 00 40  1 451      
;  1724 --      push ecx                    --[4] save no of items to add
;  1725         -- check there is enough space.
;  1726         mov edx,[ebx+edi*4-20]      -- slack
                mov edx,[ebx+edi*4-20]    ;#0045FF63: 213124273 EC               uv 04 88  1 452      
;  1727         mov esi,[ebx+edi*4-16]      --      maxlen
                mov esi,[ebx+edi*4-16]    ;#0045FF67: 213164273 F0               vu 40 88  1 452      
;  1728         add edi,eax                 -- ref+idx(in dwords)
                add edi,eax               ;#0045FF6B: 001307                     uv 80 81  1 453      
;  1729         add edx,20                  -- plus header
                add edx,20                ;#0045FF6D: 203302 14                  vu 04 04  1 453      
;  1730         shl edi,2                   -- store new here [ref+idx->raw==lea edi,[edi*4+eax*4]]
                shl edi,2                 ;#0045FF70: 301347 02                  u  80 80  1 454      
;  1731         sub esi,edx                 --      less header+slack
                sub esi,edx               ;#0045FF73: 051326                     vu 40 44  1 454      
;  1732 --      lea edi,[edi+eax*4]         -- store new here (AGI stall)
;  1733         add eax,ecx                 -- new length
                add eax,ecx               ;#0045FF75: 001310                     uv 01 03  1 455      
;  1734         shr esi,2                   --      bytes->dwords
                shr esi,2                 ;#0045FF77: 301356 02                  u  40 40  1 456      
;  1735         cmp eax,esi                 -- check maxlen
                cmp eax,esi               ;#0045FF7A: 071360                     uv 00 41  1 457 40   
;  1736         jg :UseopConcatPop
                jg #0045FF89              ;#0045FF7C: 177 0B                     v  00 00  1 457      
;  1737 
;  1738         mov [ebx+edx*4-12],eax  -- set new length
                mov [ebx+edx*4-12],eax    ;#0045FF7E: 211104223 F4               uv 00 0D  1 458      
;  1739 --      pop ecx                 --[4] no of items to add
;  1740         pop esi                 --[3] restore
                pop esi                   ;#0045FF82: 136                        vu 40 00  1 458      
;  1741         add esp,8               --[2,1] discard
                add esp,8                 ;#0045FF83: 203304 08                  uv 10 10  1 459      
;  1742         rep movsd
                rep movsd                 ;#0045FF86: 363:245                    np C2 C2  4 461    *40*
;  1743         ret
                ret                       ;#0045FF88: 303                        np 00 00  2 465      
;  1744 
;  1745       ::UseopConcatPop
;  1746 --      pop ecx                 --[4] discard
;  1747         pop esi                 --[3] discard
                pop esi                   ;#0045FF89: 136                        uv 40 00  1 467      
;  1748         pop esi                 --[2] restore addr p2
                pop esi                   ;#0045FF8A: 136                        uv 40 00  1 468 40   
;  1749         pop edx                 --[1] restore addr p1
                pop edx                   ;#0045FF8B: 132                        vu 04 00  1 468      
;  1750       ::UseopConcat
;  1751         mov edi,edx
                mov edi,edx               ;#0045FF8C: 213372                     uv 80 04  1 469      
;  1752         mov ecx,esi
                mov ecx,esi               ;#0045FF8E: 213316                     vu 02 40  1 469      
;  1753         jmp :%opConcat
                jmp #0045FD65 (:%opConcat)  ;#0045FF90: 351 D0FDFFFF               v  00 00  1 470      
;  1754     [64]
;  1755         --calling convention:
;  1756         --  mov rdi,[p1]    -- (ref)
;  1757         --  lea rdx,[p1]    -- (address)    -- (must be init sequence of integer)
;  1758         --  lea rsi,[p2]    --   ""         -- (must be init [sequence of] integer)
;  1759         --  call :%opCatsi
;  1760         --
;  1761         mov r15,h4
;  1762         cmp dword[rbx+rdi*4-16],1   -- refcount of tgt (!=1)
;  1763         jne :UseopConcat64
;  1764         push rdx                    --[1] save addr p1
;  1765         push rsi                    --[2] save addr p2
;  1766         mov rax,[rsi]               -- src(p2) ref
;  1767         -- how many new dwords do we need?
;  1768         mov rcx,1                   -- default for p1 &= <int> case
;  1769         cmp rax,r15
;  1770         jl @f
;  1771             mov rcx,[rbx+rax*4-24]  -- length(p2)
;  1772             lea rsi,[rbx+rax*4]
;  1773       @@:
;  1774         mov rax,[rbx+rdi*4-24]      -- original length p1
;  1775         push rsi                    --[3] save
;  1776 --      push rcx                    --[4] save no of items to add
;  1777         -- check there is enough space.
;  1778         mov rdx,[rbx+rdi*4-40]      -- slack
;  1779         mov rsi,[rbx+rdi*4-32]      --      maxlen
;  1780         lea rdi,[rdi+rax*2]         -- ref+idx*2
;  1781         add rdx,40                  -- plus header
;  1782         shl rdi,2                   -- store new here [ref+idx*2->raw==lea rdi,[rdi*4+rax*8]]
;  1783         sub rsi,rdx                 --      less header+slack
;  1784         add rax,rcx                 -- new length
;  1785         shr rsi,3                   --      bytes->qwords
;  1786         cmp rax,rsi                 -- check maxlen
;  1787         jg :UseopConcatPop64
;  1788 
;  1789         mov [rbx+rdx*4-24],rax  -- set new length
;  1790 --      pop rcx                 --[4] no of items to add
;  1791         pop rsi                 --[3] restore
;  1792         add rsp,16              --[2,1] discard
;  1793         rep movsq
;  1794         ret
;  1795 
;  1796       ::UseopConcatPop64
;  1797 --      pop rcx                 --[4] discard
;  1798         pop rsi                 --[3] discard
;  1799         pop rsi                 --[2] restore addr p2
;  1800         pop rdx                 --[1] restore addr p1
;  1801       ::UseopConcat64
;  1802         mov rdi,rdx
;  1803         mov rcx,rsi
;  1804         jmp :%opConcat
;  1805     []
;  1806 
;  1807 --/*
;  1808 procedure :%opConcatN(:%)
;  1809 end procedure -- (for Edita/CtrlQ)
;  1810 --*/
;  1811   :%opConcatN
;  1812 -------------
;  1813         --calling convention
;  1814         -- mov ecx,N            -- (literal, >=3)
;  1815         -- push <return address>
;  1816         -- push [pn]..[p1]      -- (opUnassigned) [DEV]
;  1817         -- mov eax,tgt          -- addr tgt
;  1818         -- jmp :%opConcatN      -- [tgt] = p3&p4&..pn
;  1819         --<return address>
;  1820         --
;  1821         --  logic:
;  1822         --      if (sum lengths while string result) then
;  1823         --          create string
;  1824         --      else (continue summing lengths of dword_sequence)
;  1825         --          create dword_sequence
;  1826         --  i.e. there are two near-identical "sum" loops with the first
;  1827         --       jumping into the middle of the second in several places,
;  1828         --       followed by two near-identical "create" loops. Enjoy!
;  1829         --
;  1830         --  special care must be taken to preserve four things:
;  1831         --      edi = [tgt] or 0 if not insitu-able (first loop only),
;  1832         --      N (ecx, which as above counts down twice),
;  1833         --      addr tgt (edx, which can be 0 if we went insitu), 
;  1834         --      and the newly allocated ref (esi, if any)
;  1835         --  (obviously we can't just throw them on the stack once and 
;  1836         --   then forget about them as we're peeling things off that.)
;  1837         --
;  1838         -- Lemma:
;  1839         --  Technically, a=a&...&a&... /is/ possible to do "in situ",
;  1840         --  however the first thing an insitu does is clobber length(p1),
;  1841         --  and I doubt it would improve performance very often anyway,
;  1842         --  especially as big things are very rarely >50% spare space.
;  1843         --
;  1844     [32]
;  1845         xor edx,edx                     -- output length
                xor edx,edx               ;#0045FF95: 061322                     uv 04 04  1 471      
;  1846         mov esi,esp                     -- scan thru p1..pn on the stack
                mov esi,esp               ;#0045FF97: 213364                     vu 40 10  1 471      
;  1847         push eax                        --[1] save addr tgt
                push eax                  ;#0045FF99: 120                        uv 00 01  1 472      
;  1848         push ecx                        --[2] save N
                push ecx                  ;#0045FF9A: 121                        vu 00 02  1 472      
;  1849         mov edi,[eax]   -- (may validly be h4, or 0 at the get-go, btw)
                mov edi,[eax]             ;#0045FF9B: 213070                     uv 80 01  1 473      
;  1850         --
;  1851         -- sum lengths while string result, but check for x = x&... case first
;  1852         --
;  1853         lodsd                           -- mov eax,[esi]; esi+=4, aka load p1
                lodsd                     ;#0045FF9D: 255                        np 41 40  2 474      
;  1854         cmp eax,edi
                cmp eax,edi               ;#0045FF9E: 071370                     uv 00 81  1 476      
;  1855         je :opConcatNStrSumMid          -- (nb opposite of subsequent checks)
                je #0045FFAD              ;#0045FFA0: 164 0B                     v  00 00  1 476      
;  1856         xor edi,edi                     -- signals first not lhs... (no in situ)
                xor edi,edi               ;#0045FFA2: 061377                     uv 80 80  1 477      
;  1857         jmp :opConcatNStrSumMid
                jmp #0045FFAD             ;#0045FFA4: 353 07                     v  00 00  1 477      
;  1858 
;  1859       ::opConcatNStringSumLoop
;  1860         lodsd                           -- next ref (mov eax,[esi]; esi+=4)
                lodsd                     ;#0045FFA6: 255                        np 41 40  2 478      
;  1861         cmp eax,edi
                cmp eax,edi               ;#0045FFA7: 071370                     uv 00 81  1 480      
;  1862         jne :opConcatNStrSumMid
                jne #0045FFAD             ;#0045FFA9: 165 02                     v  00 00  1 480      
;  1863         xor edi,edi                     -- ... signals >first (also) lhs  (no in situ)
                xor edi,edi               ;#0045FFAB: 061377                     uv 80 80  1 481      
;  1864       ::opConcatNStrSumMid
;  1865         cmp eax,h4
                cmp eax,h4                ;#0045FFAD: 075 00000040               vu 00 01  1 481      
;  1866         jl @f
                jl #0045FFC5              ;#0045FFB2: 174 11                     v  00 00  1 482      
;  1867             cmp byte[ebx+eax*4-1],0x82
                    cmp byte[ebx+eax*4-1],#82  ;#0045FFB4: 200174203 FF 82            u  00 09  2 483      
;  1868             jne :opConcatNSeqCont       -- (continue in dword-sequence loop)
                    jne #0046004E         ;#0045FFB9: 017205 8F000000            v  00 00  1 484      
;  1869             add edx,[ebx+eax*4-12]      -- sum lengths
                    add edx,[ebx+eax*4-12]  ;#0045FFBF: 003124203 F4               uv 04 0D  2 485      
;  1870             jmp :opConcatNContinueStringSumLoop
                    jmp #0045FFCF         ;#0045FFC3: 353 0A                     v  00 00  1 486      
;  1871       @@:
;  1872         cmp eax,#FF
                cmp eax,255               ;#0045FFC5: 075 FF000000               uv 00 01  1 487      
;  1873         ja :opConcatNSeqAdd1            -- (continue in dword-sequence loop)
                ja #00460038              ;#0045FFCA: 167 6C                     v  00 00  1 487      
;  1874         add edx,1
                add edx,1                 ;#0045FFCC: 203302 01                  uv 04 04  1 488      
;  1875       ::opConcatNContinueStringSumLoop
;  1876         sub ecx,1
                sub ecx,1                 ;#0045FFCF: 203351 01                  vu 02 02  1 488      
;  1877         jnz opConcatNStringSumLoop
                jnz #0045FFA6             ;#0045FFD2: 165 D2                     v  00 00  1 489      
;  1878 
;  1879         --
;  1880         -- if we got here everything (on rhs) was string or char
;  1881         --
;  1882         -- can we do things in situ?
;  1883         --  result must be = first and != any later, as signalled by edi!=0
;  1884         --  result must already be string with refcount 1 and enough space
;  1885         --
;  1886 --      test edi,edi                -- ref result if first & not later, else 0
;  1887 --      jz opConcatNnewStr          -- result not first/not single use
;  1888         cmp edi,h4                  -- check for char=char&... case (covers "")
                cmp edi,h4                ;#0045FFD4: 201377 00000040            uv 00 80  1 490      
;  1889         jle opConcatNnewStr         -- (or 0 or unassigned)
                jle #00460005             ;#0045FFDA: 176 29                     v  00 00  1 490      
;  1890 --      cmp byte[ebx+edi*4-1],#82   -- type byte (must be, as tgt==p1!)
;  1891 --      jne opConcatNnewStr
;  1892         cmp dword[ebx+edi*4-8],1    -- refcount
                cmp dword[ebx+edi*4-8],1  ;#0045FFDC: 203174273 F8 01            u  00 88  2 491      
;  1893         jne opConcatNnewStr
                jne #00460005             ;#0045FFE1: 165 22                     v  00 00  1 492      
;  1894         mov ecx,[ebx+edi*4-16]      -- maxlen
                mov ecx,[ebx+edi*4-16]    ;#0045FFE3: 213114273 F0               uv 02 88  1 493      
;  1895         mov eax,[ebx+edi*4-12]      -- length   
                mov eax,[ebx+edi*4-12]    ;#0045FFE7: 213104273 F4               vu 01 88  1 493      
;  1896         sub ecx,16
                sub ecx,16                ;#0045FFEB: 203351 10                  uv 02 02  1 494      
;  1897         cmp ecx,edx
                cmp ecx,edx               ;#0045FFEE: 071321                     uv 00 06  1 495 02   
;  1898         jle :opConcatNnewStr        -- insufficient space
                jle #00460005             ;#0045FFF0: 176 13                     v  00 00  1 495      
;  1899         mov [ebx+edi*4-12],edx      -- set new length
                mov [ebx+edi*4-12],edx    ;#0045FFF2: 211124273 F4               uv 00 8C  1 496      
;  1900         pop ecx                     --[2] restore N
                pop ecx                   ;#0045FFF6: 131                        vu 02 00  1 496      
;  1901         mov edx,ebx                 -- target address:=0 (insitu occured)
                mov edx,ebx               ;#0045FFF7: 213323                     uv 04 08  1 497      
;  1902         add esp,4                   --[1] discard tgt addr
                add esp,4                 ;#0045FFF9: 203304 04                  vu 10 10  1 497      
;  1903         lea edi,[eax+edi*4]         -- stick new content here
                lea edi,[eax+edi*4]       ;#0045FFFC: 215074270                  uv 80 81  1 498      
;  1904         pop eax                     -- discard first
                pop eax                   ;#0045FFFF: 130                        vu 01 00  1 498      
;  1905         sub ecx,1                   -- process one less entry
                sub ecx,1                 ;#00460000: 203351 01                  uv 02 02  1 499      
;  1906         jmp :opConcatNStrLoop
                jmp #00460013             ;#00460003: 353 0E                     v  00 00  1 499      
;  1907 
;  1908       ::opConcatNnewStr
;  1909         mov ecx,edx
                mov ecx,edx               ;#00460005: 213312                     uv 02 04  1 500      
;  1910         call :%pAllocStr            -- damages eax only
                call #0046377D (:%pAllocStr)  ;#00460007: 350 71370000               v  00 00  1 500      
;  1911         pop ecx                     --[2] re-load N
                pop ecx                   ;#0046000C: 131                        uv 02 00  1 501      
;  1912         pop edx                     --[1] target address (nb must remain undamaged for a long time)
                pop edx                   ;#0046000D: 132                        vu 04 00  1 501      
;  1913         mov esi,eax                 -- save newly allocated ref ("")
                mov esi,eax               ;#0046000E: 213360                     uv 40 01  1 502      
;  1914         lea edi,[ebx+eax*4]         -- raw addr of newly allocated string
                lea edi,[ebx+eax*4]       ;#00460010: 215074203                  vu 80 09  1 502      
;  1915       ::opConcatNStrLoop
;  1916         pop eax                     -- next ref
                pop eax                   ;#00460013: 130                        uv 01 00  1 503      
;  1917         cmp eax,h4
                cmp eax,h4                ;#00460014: 075 00000040               uv 00 01  1 504 01   
;  1918         jl :opConcatNcopyChar
                jl #0046002A              ;#00460019: 174 0F                     v  00 00  1 504      
;  1919             push ecx                -- (items left on stack)
                    push ecx              ;#0046001B: 121                        uv 00 02  1 505      
;  1920             push esi                -- (newly allocated ref)
                    push esi              ;#0046001C: 126                        vu 00 40  1 505      
;  1921             lea esi,[ebx+eax*4]
                    lea esi,[ebx+eax*4]   ;#0046001D: 215064203                  uv 40 09  1 506      
;  1922             mov ecx,[ebx+eax*4-12]  -- length
                    mov ecx,[ebx+eax*4-12]  ;#00460020: 213114203 F4               vu 02 09  1 506      
;  1923             rep movsb
                    rep movsb             ;#00460024: 363:244                    np C2 C2  4 509    *40*
;  1924             pop esi
                    pop esi               ;#00460026: 136                        uv 40 00  1 513      
;  1925             pop ecx
                    pop ecx               ;#00460027: 131                        vu 02 00  1 513      
;  1926             jmp :opConcatNstrContinue
                    jmp #0046002B         ;#00460028: 353 01                     v  00 00  1 514      
;  1927       ::opConcatNcopyChar
;  1928         stosb
                stosb                     ;#0046002A: 252                        np 80 81  3 515      
;  1929       ::opConcatNstrContinue
;  1930         sub ecx,1
                sub ecx,1                 ;#0046002B: 203351 01                  uv 02 02  1 518      
;  1931         jnz :opConcatNStrLoop
                jnz #00460013             ;#0046002E: 165 E3                     v  00 00  1 518      
;  1932 
;  1933         xor eax,eax
                xor eax,eax               ;#00460030: 061300                     uv 01 01  1 519      
;  1934         stosb
                stosb                     ;#00460032: 252                        np 80 81  3 520      
;  1935         jmp :opConcatNStore
                jmp #0046011B             ;#00460033: 351 E3000000               v  00 00  1 523      
;  1936 
;  1937 
;  1938       ::opConcatNSeqAdd1    -- eax is a short int, (called from above if signed or too big for char), or a float
;  1939         add edx,1
                add edx,1                 ;#00460038: 203302 01                  uv 04 04  1 524      
;  1940         sub ecx,1
                sub ecx,1                 ;#0046003B: 203351 01                  vu 02 02  1 524      
;  1941         jz :opConcatNSeqSumLoopEnd
                jz #0046005E              ;#0046003E: 164 1E                     v  00 00  1 525      
;  1942         --
;  1943         -- carry on summing lengths now we know result is a dword-sequence:
;  1944         --
;  1945       ::opConcatNSeqSumLoop
;  1946         lodsd               -- next ref (still from the stack) (mov eax,[esi], esi+=4)
                lodsd                     ;#00460040: 255                        np 41 40  2 526      
;  1947         cmp eax,edi
                cmp eax,edi               ;#00460041: 071370                     uv 00 81  1 528      
;  1948         jne @f
                jne #00460047             ;#00460043: 165 02                     v  00 00  1 528      
;  1949             xor edi,edi         -- ... signals >first (also) lhs  (no in situ)
                    xor edi,edi           ;#00460045: 061377                     uv 80 80  1 529      
;  1950       @@:
;  1951         cmp eax,h4
                cmp eax,h4                ;#00460047: 075 00000040               vu 00 01  1 529      
;  1952         jl :opConcatNSeqAdd1
                jl #00460038              ;#0046004C: 174 EA                     v  00 00  1 530      
;  1953       ::opConcatNSeqCont
;  1954         test byte[ebx+eax*4-1],0x80
                test byte[ebx+eax*4-1],#80  ;#0046004E: 366104203 FF 80            u  00 09  2 531      
;  1955         jz opConcatNSeqAdd1
                jz #00460038              ;#00460053: 164 E3                     v  00 00  1 532      
;  1956         add edx,[ebx+eax*4-12]  -- lengths
                add edx,[ebx+eax*4-12]    ;#00460055: 003124203 F4               uv 04 0D  2 533      
;  1957         sub ecx,1
                sub ecx,1                 ;#00460059: 203351 01                  vu 02 02  1 534      
;  1958         jnz :opConcatNSeqSumLoop
                jnz #00460040             ;#0046005C: 165 E2                     v  00 00  1 535      
;  1959 
;  1960       ::opConcatNSeqSumLoopEnd
;  1961         --
;  1962         -- so result needs to be a dword-sequence of length edx
;  1963         --
;  1964         -- can we do things in situ?
;  1965         --  result must be = first and != any later (as signalled by edi!=0)
;  1966         --  result must already be sequence with refcount 1 and enough space
;  1967         --
;  1968 --      test edi,edi                -- ref result if first & not later, else 0
;  1969 --      jz :opConcatNnewSeq         -- result not first/not single use
;  1970         cmp edi,h4                  -- check for int=int&... case (covers "")
                cmp edi,h4                ;#0046005E: 201377 00000040            uv 00 80  1 536      
;  1971         jle :opConcatNnewSeq
                jle #004600B3             ;#00460064: 176 4D                     v  00 00  1 536      
;  1972         cmp dword[ebx+edi*4-8],1    -- refcount
                cmp dword[ebx+edi*4-8],1  ;#00460066: 203174273 F8 01            u  00 88  2 537      
;  1973 --      jne :opConcatNnewSeq
;  1974         jne :opConcatNnewSeqClone
                jne #004600A3             ;#0046006B: 165 36                     v  00 00  1 538      
;  1975         cmp byte[ebx+edi*4-1],#80   -- type byte
                cmp byte[ebx+edi*4-1],#80  ;#0046006D: 200174273 FF 80            u  00 88  2 539      
;  1976         jne :opConcatNnewSeq
                jne #004600B3             ;#00460072: 165 3F                     v  00 00  1 540      
;  1977         mov ecx,[ebx+edi*4-16]      -- maxlen
                mov ecx,[ebx+edi*4-16]    ;#00460074: 213114273 F0               uv 02 88  1 541      
;  1978         mov eax,[ebx+edi*4-12]      -- length   
                mov eax,[ebx+edi*4-12]    ;#00460078: 213104273 F4               vu 01 88  1 541      
;  1979         sub ecx,20
                sub ecx,20                ;#0046007C: 203351 14                  uv 02 02  1 542      
;  1980 --8/2/15:
;  1981 --      mov esi,[ebx+eax*4-20]      -- slack
;  1982         mov esi,[ebx+edi*4-20]      -- slack
                mov esi,[ebx+edi*4-20]    ;#0046007F: 213164273 EC               vu 40 88  1 542      
;  1983         shl eax,2                   -- length -> dwords
                shl eax,2                 ;#00460083: 301340 02                  u  01 01  1 543      
;  1984         sub ecx,esi                 -- (maxlen-hdr-slack)
                sub ecx,esi               ;#00460086: 051361                     vu 02 42  1 543      
;  1985         shl edi,2                   -- ref -> raw
                shl edi,2                 ;#00460088: 301347 02                  u  80 80  1 544      
;  1986         shr ecx,2                   -- bytes -> dwords
                shr ecx,2                 ;#0046008B: 301351 02                  u  02 02  1 545      
;  1987         cmp ecx,edx
                cmp ecx,edx               ;#0046008E: 071321                     uv 00 06  1 546 02   
;  1988         jl :opConcatNnewSeq         -- insufficient space
                jl #004600B3              ;#00460090: 174 21                     v  00 00  1 546      
;  1989         mov [edi-12],edx            -- set new length
                mov [edi-12],edx          ;#00460092: 211127 F4                  uv 00 84  1 547      
;  1990         pop ecx                     -- restore N
                pop ecx                   ;#00460095: 131                        vu 02 00  1 547      
;  1991         mov edx,ebx                 -- target address:=0 (insitu occurred)
                mov edx,ebx               ;#00460096: 213323                     uv 04 08  1 548      
;  1992         add esp,4                   -- discard addr target
                add esp,4                 ;#00460098: 203304 04                  vu 10 10  1 548      
;  1993         add edi,eax                 -- stick new content here
                add edi,eax               ;#0046009B: 001307                     uv 80 81  1 549      
;  1994         pop eax                     -- discard first
                pop eax                   ;#0046009D: 130                        vu 01 00  1 549      
;  1995         sub ecx,1                   -- process one less entry
                sub ecx,1                 ;#0046009E: 203351 01                  uv 02 02  1 550      
;  1996         jmp :opConcatNSeqLoop
                jmp #004600C8             ;#004600A1: 353 25                     v  00 00  1 550      
;  1997 
;  1998       ::opConcatNnewSeqClone
;  1999         mov ecx,edx
                mov ecx,edx               ;#004600A3: 213312                     uv 02 04  1 551      
;  2000         mov edx,[esp]
                mov edx,[esp]             ;#004600A5: 213024044                  vu 04 10  1 551      
;  2001         mov edx,[esp+edx*4+8]
                mov edx,[esp+edx*4+8]     ;#004600A8: 213124224 08               uv 04 14  1 554    *04*
;  2002         call :%pAlloClone
                call #00463814 (:%pAlloClone)  ;#004600AC: 350 63370000               v  00 00  1 554      
;  2003         jmp @f
                jmp #004600BC             ;#004600B1: 353 09                     v  00 00  1 555      
;  2004 
;  2005       ::opConcatNnewSeq
;  2006         mov ecx,edx
                mov ecx,edx               ;#004600B3: 213312                     uv 02 04  1 556      
;  2007 --DEV wronG!! (2/8/15)
;  2008 --      mov edx,[esp+edx*4]         -- era
;  2009         mov edx,[esp]
                mov edx,[esp]             ;#004600B5: 213024044                  vu 04 10  1 556      
;  2010         mov edx,[esp+edx*4+8]
                mov edx,[esp+edx*4+8]     ;#004600B8: 213124224 08               uv 04 14  1 559    *04*
;  2011       @@:
;  2012         call :%pAllocSeq            -- damages eax only
                call #00463832 (:%pAllocSeq)  ;#004600BC: 350 71370000               v  00 00  1 559      
;  2013         pop ecx                     -- re-load N
                pop ecx                   ;#004600C1: 131                        uv 02 00  1 560      
;  2014         pop edx                     -- target address (nb must remain undamaged for a long time)
                pop edx                   ;#004600C2: 132                        vu 04 00  1 560      
;  2015         mov esi,eax                 -- save newly allocated ref ("")
                mov esi,eax               ;#004600C3: 213360                     uv 40 01  1 561      
;  2016         lea edi,[ebx+eax*4]         -- raw addr of newly allocated sequence
                lea edi,[ebx+eax*4]       ;#004600C5: 215074203                  vu 80 09  1 561      
;  2017 
;  2018       ::opConcatNSeqLoop
;  2019         pop eax                     -- next ref
                pop eax                   ;#004600C8: 130                        uv 01 00  1 562      
;  2020         cmp eax,h4
                cmp eax,h4                ;#004600C9: 075 00000040               uv 00 01  1 563 01   
;  2021         jl :opConcatNCopyInt
                jl #00460115              ;#004600CE: 174 45                     v  00 00  1 563      
;  2022             test byte[ebx+eax*4-1],0x80
                    test byte[ebx+eax*4-1],#80  ;#004600D0: 366104203 FF 80            u  00 09  2 564      
;  2023             jnz @f
                    jnz #004600DE         ;#004600D5: 165 07                     v  00 00  1 565      
;  2024                 -- it is a float then
;  2025                 add dword[ebx+eax*4-8],1
                        add dword[ebx+eax*4-8],1  ;#004600D7: 203104203 F8 01            u  00 09  3 566      
;  2026                 jmp :opConcatNCopyInt
                        jmp #00460115     ;#004600DC: 353 37                     v  00 00  1 568      
;  2027           @@:
;  2028             push esi                -- newly allocated ref
                    push esi              ;#004600DE: 126                        uv 00 40  1 569      
;  2029             push ecx                -- remaining N
                    push ecx              ;#004600DF: 121                        vu 00 02  1 569      
;  2030             lea esi,[ebx+eax*4]
                    lea esi,[ebx+eax*4]   ;#004600E0: 215064203                  uv 40 09  1 570      
;  2031             mov ecx,[ebx+eax*4-12]  -- length
                    mov ecx,[ebx+eax*4-12]  ;#004600E3: 213114203 F4               vu 02 09  1 570      
;  2032             test ecx,ecx
                    test ecx,ecx          ;#004600E7: 205311                     uv 00 02  1 571      
;  2033             jz :opConcatNZeroLengthString
                    jz #00460111          ;#004600E9: 164 26                     v  00 00  1 571      
;  2034             cmp byte[esi-1],0x82
                    cmp byte[esi-1],#82   ;#004600EB: 200176 FF 82               u  00 40  2 572      
;  2035             je :opConcatNCopyStr
                    je #00460108          ;#004600EF: 164 17                     v  00 00  1 573      
;  2036               ::opConcatNCopySeqLoop
;  2037                 lodsd               -- mov eax,[esi], esi+=4
                        lodsd             ;#004600F1: 255                        np 41 40  2 574      
;  2038                 stosd               -- mov [edi],eax; edi+=4
                        stosd             ;#004600F2: 253                        np 80 81  3 576      
;  2039                 cmp eax,h4
                        cmp eax,h4        ;#004600F3: 075 00000040               uv 00 01  1 579      
;  2040                 jl @f
                        jl #004600FF      ;#004600F8: 174 05                     v  00 00  1 579      
;  2041                     add dword[ebx+eax*4-8],1
                            add dword[ebx+eax*4-8],1  ;#004600FA: 203104203 F8 01            u  00 09  3 580      
;  2042               @@:
;  2043                 sub ecx,1
                        sub ecx,1         ;#004600FF: 203351 01                  vu 02 02  1 582      
;  2044                 jnz :opConcatNCopySeqLoop 
                        jnz #004600F1     ;#00460102: 165 ED                     v  00 00  1 583      
;  2045                 pop ecx
                        pop ecx           ;#00460104: 131                        uv 02 00  1 584      
;  2046                 pop esi
                        pop esi           ;#00460105: 136                        vu 40 00  1 584      
;  2047                 jmp :opConcatNSeqContinue
                        jmp #00460116     ;#00460106: 353 0E                     v  00 00  1 585      
;  2048               ::opConcatNCopyStr
;  2049                 xor eax,eax
                        xor eax,eax       ;#00460108: 061300                     uv 01 01  1 586      
;  2050               ::opConcatNCharLoop
;  2051                 lodsb               -- mov al,[esi], esi+=1
                        lodsb             ;#0046010A: 254                        np 41 40  2 588    *40*
;  2052                 stosd               -- mov [edi],eax; edi+=4
                        stosd             ;#0046010B: 253                        np 80 81  3 590      
;  2053                 sub ecx,1
                        sub ecx,1         ;#0046010C: 203351 01                  uv 02 02  1 593      
;  2054                 jnz :opConcatNCharLoop 
                        jnz #0046010A     ;#0046010F: 165 F9                     v  00 00  1 593      
;  2055           ::opConcatNZeroLengthString
;  2056             pop ecx                 -- remaining N
                    pop ecx               ;#00460111: 131                        uv 02 00  1 594      
;  2057             pop esi                 -- newly allocated ref
                    pop esi               ;#00460112: 136                        vu 40 00  1 594      
;  2058             jmp :opConcatNSeqContinue
                    jmp #00460116         ;#00460113: 353 01                     v  00 00  1 595      
;  2059       ::opConcatNCopyInt
;  2060         stosd                       -- mov [edi],eax; edi+=4
                stosd                     ;#00460115: 253                        np 80 81  3 596      
;  2061       ::opConcatNSeqContinue
;  2062         sub ecx,1
                sub ecx,1                 ;#00460116: 203351 01                  uv 02 02  1 599      
;  2063         jnz :opConcatNSeqLoop
                jnz #004600C8             ;#00460119: 165 AD                     v  00 00  1 599      
;  2064 
;  2065       ::opConcatNStore
;  2066         mov edi,edx
                mov edi,edx               ;#0046011B: 213372                     uv 80 04  1 600      
;  2067         test edx,edx
                test edx,edx              ;#0046011D: 205322                     vu 00 04  1 600      
;  2068         jz @f               -- in situ occurred
                jz #00460138              ;#0046011F: 164 17                     v  00 00  1 601      
;  2069             mov edx,[edi]
                    mov edx,[edi]         ;#00460121: 213027                     uv 04 80  1 602      
;  2070             mov [edi],esi
                    mov [edi],esi         ;#00460123: 211067                     vu 00 C0  1 602      
;  2071             cmp edx,h4
                    cmp edx,h4            ;#00460125: 201372 00000040            uv 00 04  1 603      
;  2072             jle @f
                    jle #00460138         ;#0046012B: 176 0B                     v  00 00  1 603      
;  2073                 sub dword[ebx+edx*4-8],1
                        sub dword[ebx+edx*4-8],1  ;#0046012D: 203154223 F8 01            u  00 0C  3 604      
;  2074                 jz :%pDealloc
                        jz #004639A8 (:%pDealloc)  ;#00460132: 017204 70380000            v  00 00  1 606      
;  2075       @@:
;  2076         ret
                ret                       ;#00460138: 303                        np 00 00  2 607      
;  2077 
;  2078     [64]
;  2079         mov r15,h4
;  2080         xor rdx,rdx                     -- output length
;  2081         mov rsi,rsp                     -- scan thru p1..pn on the stack
;  2082         push rax                        --[1] save addr tgt
;  2083         push rcx                        --[2] save N
;  2084         mov rdi,[rax]   -- (may validly be h4, or 0 at the get-go, btw)
;  2085         --
;  2086         -- sum lengths while string result, but check for x = x&... case first
;  2087         --
;  2088         lodsq                           -- mov rax,[rsi]; rsi+=8, aka load p1
;  2089         cmp rax,rdi
;  2090         je :opConcatNStrSumMid64        -- (nb opposite of subsequent checks)
;  2091         xor rdi,rdi                     -- signals first not lhs... (no in situ)
;  2092         jmp :opConcatNStrSumMid64
;  2093 
;  2094       ::opConcatNStringSumLoop64
;  2095         lodsq                           -- next ref (mov rax,[rsi]; rsi+=8)
;  2096         cmp rax,rdi
;  2097         jne :opConcatNStrSumMid64
;  2098         xor rdi,rdi                     -- ... signals >first (also) lhs  (no in situ)
;  2099       ::opConcatNStrSumMid64
;  2100         cmp rax,r15
;  2101         jl @f
;  2102             cmp byte[rbx+rax*4-1],0x82
;  2103             jne :opConcatNSeqCont64     -- (continue in dword-sequence loop)
;  2104             add rdx,[rbx+rax*4-24]      -- sum lengths
;  2105             jmp :opConcatNContinueStringSumLoop64
;  2106       @@:
;  2107         cmp rax,#FF
;  2108         ja :opConcatNSeqAdd164          -- (continue in dword-sequence loop)
;  2109         add rdx,1
;  2110       ::opConcatNContinueStringSumLoop64
;  2111         sub rcx,1
;  2112         jnz opConcatNStringSumLoop64
;  2113 
;  2114         --
;  2115         -- if we got here everything (on rhs) was string or char
;  2116         --
;  2117         -- can we do things in situ?
;  2118         --  result must be = first and != any later, as signalled by edi!=0
;  2119         --  result must already be string with refcount 1 and enough space
;  2120         --
;  2121 --      test rdi,rdi                -- ref result if first & not later, else 0
;  2122 --      jz :opConcatNnewStr64       -- result not first/not single use
;  2123         cmp rdi,r15                 -- check for char=char&... case (covers "")
;  2124         jle :opConcatNnewStr64      -- (or 0 or unassigned)
;  2125 --      cmp byte[rbx+rdi*4-1],#82   -- type byte (must be, as tgt==p1!)
;  2126 --      jne :opConcatNnewStr64
;  2127         cmp qword[rbx+rdi*4-16],1   -- refcount
;  2128         jne :opConcatNnewStr64
;  2129         mov rcx,[rbx+rdi*4-32]      -- maxlen
;  2130         mov rax,[rbx+rdi*4-24]      -- length   
;  2131 --24/1/16:
;  2132 --      sub rcx,16
;  2133         sub rcx,32
;  2134         cmp rcx,rdx
;  2135         jle :opConcatNnewStr64      -- insufficient space
;  2136         mov [rbx+rdi*4-24],rdx      -- set new length
;  2137         pop rcx                     --[2] restore N
;  2138         mov rdx,rbx                 -- target address:=0 (insitu occured)
;  2139         add rsp,8                   --[1] discard tgt addr
;  2140         lea rdi,[rax+rdi*4]         -- stick new content here
;  2141         pop rax                     -- discard first
;  2142         sub rcx,1                   -- process one less entry
;  2143         jmp :opConcatNStrLoop64
;  2144 
;  2145       ::opConcatNnewStr64
;  2146         mov rcx,rdx
;  2147         call :%pAllocStr            -- damages eax only
;  2148         pop rcx                     --[2] re-load N
;  2149         pop rdx                     --[1] target address (nb must remain undamaged for a long time)
;  2150         mov rsi,rax                 -- save newly allocated ref ("")
;  2151         lea rdi,[rbx+rax*4]         -- raw addr of newly allocated string
;  2152       ::opConcatNStrLoop64
;  2153         pop rax                     -- next ref
;  2154         cmp rax,r15
;  2155         jl :opConcatNcopyChar64
;  2156             push rcx                -- (items left on stack)
;  2157             push rsi                -- (newly allocated ref)
;  2158             lea rsi,[rbx+rax*4]
;  2159             mov rcx,[rbx+rax*4-24]  -- length
;  2160             rep movsb
;  2161             pop rsi
;  2162             pop rcx
;  2163             jmp :opConcatNstrContinue64
;  2164       ::opConcatNcopyChar64
;  2165         stosb
;  2166       ::opConcatNstrContinue64
;  2167         sub rcx,1
;  2168         jnz :opConcatNStrLoop64
;  2169 
;  2170         xor rax,rax
;  2171         stosb
;  2172         jmp :opConcatNStore64
;  2173 
;  2174 
;  2175       ::opConcatNSeqAdd164  -- eax is a short int, (called from above if signed or too big for char), or a float
;  2176         add rdx,1
;  2177         sub rcx,1
;  2178         jz :opConcatNSeqSumLoopEnd64
;  2179         --
;  2180         -- carry on summing lengths now we know result is a dword-sequence:
;  2181         --
;  2182       ::opConcatNSeqSumLoop64
;  2183         lodsq               -- next ref (still from the stack) (mov rax,[rsi], rsi+=8)
;  2184         cmp rax,rdi
;  2185         jne @f
;  2186             xor rdi,rdi         -- ... signals >first (also) lhs  (no in situ)
;  2187       @@:
;  2188         cmp rax,r15
;  2189         jl :opConcatNSeqAdd164
;  2190       ::opConcatNSeqCont64
;  2191         test byte[rbx+rax*4-1],0x80
;  2192         jz :opConcatNSeqAdd164
;  2193         add rdx,[rbx+rax*4-24]  -- lengths
;  2194         sub rcx,1
;  2195         jnz :opConcatNSeqSumLoop64
;  2196 
;  2197       ::opConcatNSeqSumLoopEnd64
;  2198         --
;  2199         -- so result needs to be a dword-sequence of length rdx
;  2200         --
;  2201         -- can we do things in situ?
;  2202         --  result must be = first and != any later (as signalled by edi!=0)
;  2203         --  result must already be sequence with refcount 1 and enough space
;  2204         --
;  2205 --      test rdi,rdi                -- ref result if first & not later, else 0
;  2206 --      jz :opConcatNnewSeq64       -- result not first/not single use
;  2207         cmp rdi,r15                 -- check for int=int&... case (covers "")
;  2208         jle :opConcatNnewSeq64
;  2209         cmp qword[rbx+rdi*4-16],1   -- refcount
;  2210         jne :opConcatNnewSeqClone64
;  2211 --      jne :opConcatNnewSeq64
;  2212         cmp byte[rbx+rdi*4-1],#80   -- type byte
;  2213         jne :opConcatNnewSeq64
;  2214         mov rcx,[rbx+rdi*4-32]      -- maxlen
;  2215         mov rax,[rbx+rdi*4-24]      -- length   
;  2216         sub rcx,40                  -- (maxlen-hdr)
;  2217 --8/2/15:
;  2218 --      mov rsi,[rbx+rax*4-40]      -- slack
;  2219         mov rsi,[rbx+rdi*4-40]      -- slack
;  2220 --      shl rax,3                   -- length -> qwords
;  2221         shl rax,3                   -- length in qwords -> bytes
;  2222         sub rcx,rsi                 -- (maxlen-hdr-slack)
;  2223         shl rdi,2                   -- ref -> raw
;  2224         shr rcx,3                   -- bytes -> qwords
;  2225         cmp rcx,rdx
;  2226         jl :opConcatNnewSeq64       -- insufficient space
;  2227         mov [rdi-24],rdx            -- set new length
;  2228         pop rcx                     -- restore N
;  2229         mov rdx,rbx                 -- target address:=0 (insitu occurred)
;  2230         add rsp,8                   -- discard addr target
;  2231         add rdi,rax                 -- stick new content here
;  2232         pop rax                     -- discard first
;  2233         sub rcx,1                   -- process one less entry
;  2234         jmp :opConcatNSeqLoop64
;  2235 
;  2236       ::opConcatNnewSeqClone64
;  2237         mov rcx,rdx
;  2238         mov rdx,[rsp]
;  2239         mov rdx,[rsp+rdx*8+16]
;  2240         call :%pAlloClone
;  2241         jmp @f
;  2242 
;  2243       ::opConcatNnewSeq64
;  2244         mov rcx,rdx
;  2245 --DEV wronG!! (2/8/15)
;  2246 --      mov rdx,[rsp+rdx*8]         -- era
;  2247         mov rdx,[rsp]
;  2248         mov rdx,[rsp+rdx*8+16]
;  2249       @@:
;  2250         call :%pAllocSeq            -- damages eax only
;  2251         pop rcx                     -- re-load N
;  2252         pop rdx                     -- target address (nb must remain undamaged for a long time)
;  2253         mov rsi,rax                 -- save newly allocated ref ("")
;  2254         lea rdi,[rbx+rax*4]         -- raw addr of newly allocated sequence
;  2255 
;  2256       ::opConcatNSeqLoop64
;  2257         pop rax                     -- next ref
;  2258         cmp rax,r15
;  2259         jl :opConcatNCopyInt64
;  2260             test byte[rbx+rax*4-1],0x80
;  2261             jnz @f
;  2262                 -- it is a float then
;  2263                 add qword[rbx+rax*4-16],1
;  2264                 jmp :opConcatNCopyInt64
;  2265           @@:
;  2266             push rsi                -- newly allocated ref
;  2267             push rcx                -- remaining N
;  2268             lea rsi,[rbx+rax*4]
;  2269             mov rcx,[rbx+rax*4-24]  -- length
;  2270             test rcx,rcx
;  2271             jz :opConcatNZeroLengthString64
;  2272             cmp byte[rsi-1],0x82
;  2273             je :opConcatNCopyStr64
;  2274               ::opConcatNCopySeqLoop64
;  2275                 lodsq               -- mov rax,[rsi], rsi+=8
;  2276                 stosq               -- mov [rdi],rax; rdi+=8
;  2277                 cmp rax,r15
;  2278                 jl @f
;  2279                     add qword[rbx+rax*4-16],1
;  2280               @@:
;  2281                 sub rcx,1
;  2282                 jnz :opConcatNCopySeqLoop64
;  2283                 pop rcx
;  2284                 pop rsi
;  2285                 jmp :opConcatNSeqContinue64
;  2286 
;  2287               ::opConcatNCopyStr64
;  2288                 xor rax,rax
;  2289               ::opConcatNCharLoop64
;  2290                 lodsb               -- mov al,[rsi], rsi+=1
;  2291                 stosq               -- mov [rdi],rax; rdi+=8
;  2292                 sub rcx,1
;  2293                 jnz :opConcatNCharLoop64
;  2294           ::opConcatNZeroLengthString64
;  2295             pop rcx                 -- remaining N
;  2296             pop rsi                 -- newly allocated ref
;  2297             jmp :opConcatNSeqContinue64
;  2298 
;  2299       ::opConcatNCopyInt64
;  2300         stosq                       -- mov [rdi],rax; rdi+=8
;  2301       ::opConcatNSeqContinue64
;  2302         sub rcx,1
;  2303         jnz :opConcatNSeqLoop64
;  2304 
;  2305       ::opConcatNStore64
;  2306         mov rdi,rdx
;  2307         test rdx,rdx
;  2308         jz @f               -- in situ occurred
;  2309             mov rdx,[rdi]
;  2310             mov [rdi],rsi
;  2311             cmp rdx,r15
;  2312             jle @f
;  2313                 sub qword[rbx+rdx*4-16],1
;  2314                 jz :%pDealloc
;  2315       @@:
;  2316         ret
;  2317     []
;  2318       }
;  2319 
    jmp #00462C8F (:%opRetf)              ;#00460139: 351 512B0000               v  00 00  1 609      
;C:\Phix\builtins\VM\pJcc.e:
;===========================
;     1 --
;     2 -- pJcc.e
;     3 -- ======
;     4 --
;     5 --  implements :%opJcc and :%opJccE, also [DEV] :%opFind and :%opMatch
;     6 --
;     7 --  Obviously, if the compiler knows a and b are integer, it will just emit a "cmp", 
;     8 --  but if they can be any type, that means comparing ints/floats/strings/sequences 
;     9 --  which is a 4x4 or 16-way task. Things are a little simpler when we only need to 
;    10 --  know eq/ne, as floats/ints are never the same (Phix always stores eg 3.0 as 3) 
;    11 --  and we can cop out early if the lengths do not match. The first two (internal) 
;    12 --  routines, compareSeq and equalSeq, deal with nested sequences, and strings, but 
;    13 --  are also quite happy when given two floats.
;    14 --
;    15 
;    16 --26/8/22 (spotted in passing)
;    17 --#ilASM{ jmp :%opRetf
;    18 #ilASM{ jmp :!opCallOnceYeNot
                jmp :!opCallOnceYeNot     ;#0045F6DE: 351 10310000               v  00 00  1   1      
;    19 
;    20 --DEV FIXME: (and the :!bang labels below)
;    21 --  ::e94vhnbaavesi
;    22 --      int3
;    23 --  ::e94vhnbaavedx
;    24 --      int3
;    25 --DEV duplicate of the one in pJnotx
;    26     ::e03tfcmbaa
;    27         [32]
;    28             pop edx
                    pop edx               ;#0045F6E3: 132                        uv 04 00  1   2      
;    29             mov al,3        -- e03tfcmbaa
                    mov al,3              ;#0045F6E4: 260 03                     vu 01 00  1   2      
;    30             sub edx,1
                    sub edx,1             ;#0045F6E6: 203352 01                  uv 04 04  1   3      
;    31         [64]
;    32             pop rdx
;    33             mov al,3        -- e03tfcmbaa
;    34             sub rdx,1
;    35         []
;    36             jmp :!iDiag
                    jmp #00463E69 (:!iDiag)  ;#0045F6E9: 351 7B470000               v  00 00  1   3      
;    37             int3
                    int3                  ;#0045F6EE: 314                        np 00 00 13   4      
;    38 
;    39 --/*
;    40 procedure ::compareSeq(::)
;    41 end procedure -- (for Edita/CtrlQ)
;    42 --*/
;    43     [32]
;    44       ::compareSeq
;    45 ------------------
;    46         -- general compare routine, extended from equalSeq.
;    47         -- use when other than eq or ne (ie lt,le,gt,ge) rqd.
;    48         -- on entry, we have two refs to compare, one in eax,
;    49         --  the other in [edi-4]. (NB this must NOT be called
;    50         --  with short int params or anything unassigned)
;    51         -- Result is the condition code flags
;    52         --  (unlike equalSeq which is just the Z flag)
;    53         -- Assume all registers will be damaged.
;    54         mov edi,[edi-4]
                mov edi,[edi-4]           ;#0045F6EF: 213177 FC                  uv 80 80  1  17      
;    55      ::compareSeqR                  -- entry point with refs in eax and edi.
;    56         lea esi,[ebx+eax*4]
                lea esi,[ebx+eax*4]       ;#0045F6F2: 215064203                  vu 40 09  1  17      
;    57         shl edi,2
                shl edi,2                 ;#0045F6F5: 301347 02                  u  80 80  1  18      
;    58 --DEV tryme once everything working (avoids an AGI):
;    59 --  mov al,[ebx+eax*4-1]
;    60         mov al,[esi-1]
                mov al,[esi-1]            ;#0045F6F8: 212106 FF                  uv 01 40  1  20    *40*
;    61         cmp edi,esi
                cmp edi,esi               ;#0045F6FB: 071367                     vu 00 C0  1  20      
;    62         je :compareSeqRet
                je #0045F737              ;#0045F6FD: 164 38                     v  00 00  1  21      
;    63         mov ah,[edi-1]
                mov ah,[edi-1]            ;#0045F6FF: 212147 FF                  uv 01 80  1  22      
;    64         cmp al,0x12
                cmp al,#12                ;#0045F702: 200370 12                  uv 00 01  1  23 01   
;    65         jne :compareStrX
                jne #0045F738             ;#0045F705: 165 31                     v  00 00  1  23      
;    66         cmp ah,0x12
                cmp ah,#12                ;#0045F707: 200374 12                  uv 00 01  1  24      
;    67         jne :compareSeqRet          -- sequences > atoms
                jne #0045F737             ;#0045F70A: 165 2B                     v  00 00  1  24      
;    68         -- two floats. First, a direct binary compare allows nan compare:
;    69 --DEV this may be the wrong thing to do entirely
;    70         mov eax,[edi]
                mov eax,[edi]             ;#0045F70C: 213007                     uv 01 80  1  25      
;    71         mov ecx,[edi+4]
                mov ecx,[edi+4]           ;#0045F70E: 213117 04                  vu 02 80  1  25      
;    72         cmp eax,[esi]
                cmp eax,[esi]             ;#0045F711: 073006                     uv 00 41  2  26      
;    73         jne @f
                jne #0045F71A             ;#0045F713: 165 05                     v  00 00  1  27      
;    74             cmp ecx,[esi+4]
                    cmp ecx,[esi+4]       ;#0045F715: 073116 04                  uv 00 42  2  28      
;    75             je :compareSeqRet
                    je #0045F737          ;#0045F718: 164 1D                     v  00 00  1  29      
;    76       @@:
;    77         fld qword[edi]
                fld qword[edi]            ;#0045F71A: 335007                     np 00 80  1  30      
;    78         fld qword[esi]
                fld qword[esi]            ;#0045F71C: 335006                     np 00 40  1  31      
;    79         fcompp
                fcompp                    ;#0045F71E: 336331                     np 00 00  1  32      
;    80         fnstsw ax
                fnstsw ax                 ;#0045F720: 337340                     np 01 00  6  33      
;    81         mov ch,ah
                mov ch,ah                 ;#0045F722: 212354                     uv 02 01  1  39      
;    82 --  and ah,0x7f
;    83 --  shl ch,7
;    84 --  or ah,ch
;    85         mov dh,ah
                mov dh,ah                 ;#0045F724: 212364                     vu 04 01  1  39      
;    86         and ah,0x7f     -- clear sign
                and ah,127                ;#0045F726: 200344 7F                  uv 01 01  1  40      
;    87         and dh,0x04     -- keep parity only
                and dh,4                  ;#0045F729: 200346 04                  vu 04 04  1  40      
;    88         shl ch,7
                shl ch,7                  ;#0045F72C: 300345 07                  u  02 02  1  41      
;    89         shl dh,4        -- parity to Z position
                shl dh,4                  ;#0045F72F: 300346 04                  u  04 04  1  42      
;    90         or ah,ch
                or ah,ch                  ;#0045F732: 010354                     vu 01 03  1  42      
;    91         sub ah,dh       -- Clear Z if Parity set
                sub ah,dh                 ;#0045F734: 050364                     uv 01 05  1  43      
;    92         sahf
                sahf                      ;#0045F736: 236                        np 00 01  2  44      
;    93       ::compareSeqRet
;    94         ret
                ret                       ;#0045F737: 303                        np 00 00  2  46      
;    95 
;    96       ::compareStrX
;    97 
;    98         mov ecx,[esi-12]        -- length
                mov ecx,[esi-12]          ;#0045F738: 213116 F4                  uv 02 40  1  48      
;    99         test ah,0x80            -- type[edi]
                test ah,#80               ;#0045F73B: 366304 80                  vu 00 01  1  48      
;   100 --  jz compareSeqRet0       -- DEV some variation mey be needed here. cmp esi,edi springs to mind...
;   101 --  compareSeqRet0:
;   102         jnz @f
                jnz #0045F746             ;#0045F73E: 165 06                     v  00 00  1  49      
;   103             xor eax,eax
                    xor eax,eax           ;#0045F740: 061300                     uv 01 01  1  50      
;   104             add eax,1       -- ensure Z=0   [DEV try test esi,esi, since that cannot be zero here]
                    add eax,1             ;#0045F742: 203300 01                  uv 01 01  1  51 01   
;   105             ret
                    ret                   ;#0045F745: 303                        np 00 00  2  52      
;   106       @@:
;   107         mov edx,[edi-12]        -- length
                mov edx,[edi-12]          ;#0045F746: 213127 F4                  uv 04 80  1  54      
;   108 
;   109         cmp al,0x82             -- type[esi]
                cmp al,#82                ;#0045F749: 200370 82                  vu 00 01  1  54      
;   110         jne :compareSeqX
                jne #0045F776             ;#0045F74C: 165 28                     v  00 00  1  55      
;   111         -- .. so esi is str
;   112         cmp ah,0x82             -- type[edi]
                cmp ah,#82                ;#0045F74E: 200374 82                  uv 00 01  1  56      
;   113         jne :compareStrSeq
                jne #0045F759             ;#0045F751: 165 06                     v  00 00  1  56      
;   114         -- .. and so is edi
;   115         add ecx,1           ---- include trailing null byte [or hit the edx<ecx case first]
                add ecx,1                 ;#0045F753: 203301 01                  uv 02 02  1  57      
;   116         repe cmpsb
                repe cmpsb                ;#0045F756: 363:246                    np C2 C2  5  58      
;   117         ret
                ret                       ;#0045F758: 303                        np 00 00  2  63      
;   118 
;   119       ::compareStrSeq
;   120         -- .. esi is str, edi is seq
;   121         push ecx
                push ecx                  ;#0045F759: 121                        uv 00 02  1  65      
;   122         push edx
                push edx                  ;#0045F75A: 122                        vu 00 04  1  65      
;   123         cmp ecx,edx
                cmp ecx,edx               ;#0045F75B: 071321                     uv 00 06  1  66      
;   124         jle @f
                jle #0045F761             ;#0045F75D: 176 02                     v  00 00  1  66      
;   125             mov ecx,edx
                    mov ecx,edx           ;#0045F75F: 213312                     uv 02 04  1  67      
;   126       @@:
;   127         add ecx,1           -- as sub ecx,1 at top of loop
                add ecx,1                 ;#0045F761: 203301 01                  uv 02 02  1  68 02   
;   128         xor eax,eax         -- for lodsb
                xor eax,eax               ;#0045F764: 061300                     vu 01 01  1  68      
;   129       ::compareStrVsSeqCharLoop
;   130         sub ecx,1
                sub ecx,1                 ;#0045F766: 203351 01                  uv 02 02  1  69      
;   131         jz :compareSeqCompareLengths
                jz #0045F7C6              ;#0045F769: 164 5B                     v  00 00  1  69      
;   132         lodsb       -- mov al,[esi], esi+=1
                lodsb                     ;#0045F76B: 254                        np 41 40  2  70      
;   133         cmp eax,[edi]
                cmp eax,[edi]             ;#0045F76C: 073007                     uv 00 81  2  72      
;   134         lea edi,[edi+4]
                lea edi,[edi+4]           ;#0045F76E: 215177 04                  vu 80 80  1  73      
;   135         je :compareStrVsSeqCharLoop
                je #0045F766              ;#0045F771: 164 F3                     v  00 00  1  74      
;   136 --  lea esp,[esp+8]
;   137         pop edx
                pop edx                   ;#0045F773: 132                        uv 04 00  1  75      
;   138         pop ecx
                pop ecx                   ;#0045F774: 131                        vu 02 00  1  75      
;   139         ret
                ret                       ;#0045F775: 303                        np 00 00  2  76      
;   140 
;   141       ::compareSeqX
;   142         -- .. so esi is seq
;   143         push ecx
                push ecx                  ;#0045F776: 121                        uv 00 02  1  78      
;   144         push edx
                push edx                  ;#0045F777: 122                        vu 00 04  1  78      
;   145         cmp ecx,edx
                cmp ecx,edx               ;#0045F778: 071321                     uv 00 06  1  79      
;   146         jle @f
                jle #0045F77E             ;#0045F77A: 176 02                     v  00 00  1  79      
;   147             mov ecx,edx
                    mov ecx,edx           ;#0045F77C: 213312                     uv 02 04  1  80      
;   148       @@:
;   149         cmp ah,0x82                 -- type[edi]
                cmp ah,#82                ;#0045F77E: 200374 82                  vu 00 01  1  80      
;   150         jne :compareSeqSeq
                jne #0045F79A             ;#0045F781: 165 17                     v  00 00  1  81      
;   151         -- .. and edi is str
;   152         xchg esi,edi
                xchg esi,edi              ;#0045F783: 207376                     np C0 C0  3  82      
;   153 --  jmp :compareStrSeq
;   154         add ecx,1           -- as sub ecx,1 at top of loop
                add ecx,1                 ;#0045F785: 203301 01                  uv 02 02  1  85      
;   155         xor eax,eax         -- for lodsb
                xor eax,eax               ;#0045F788: 061300                     vu 01 01  1  85      
;   156       ::compareSeqVsStrCharLoop
;   157         sub ecx,1
                sub ecx,1                 ;#0045F78A: 203351 01                  uv 02 02  1  86      
;   158         jz :compareSeqCompareLengths
                jz #0045F7C6              ;#0045F78D: 164 37                     v  00 00  1  86      
;   159         lodsb       -- mov al,[esi], esi+=1
                lodsb                     ;#0045F78F: 254                        np 41 40  2  87      
;   160 --  cmp eax,[edi]
;   161         cmp [edi],eax
                cmp [edi],eax             ;#0045F790: 071007                     uv 00 81  2  89      
;   162         lea edi,[edi+4]
                lea edi,[edi+4]           ;#0045F792: 215177 04                  vu 80 80  1  90      
;   163         je :compareSeqVsStrCharLoop
                je #0045F78A              ;#0045F795: 164 F3                     v  00 00  1  91      
;   164 --  lea esp,[esp+8]
;   165         pop edx
                pop edx                   ;#0045F797: 132                        uv 04 00  1  92      
;   166         pop ecx
                pop ecx                   ;#0045F798: 131                        vu 02 00  1  92      
;   167         ret
                ret                       ;#0045F799: 303                        np 00 00  2  93      
;   168 
;   169       ::compareSeqSeq
;   170         -- esi and edi are sequences..
;   171         -- we *must* deal with any short ints here...
;   172         or ecx,ecx
                or ecx,ecx                ;#0045F79A: 011311                     uv 02 02  1  95      
;   173         jz :compareSeqCompareLengths
                jz #0045F7C6              ;#0045F79C: 164 28                     v  00 00  1  95      
;   174       @@:
;   175         mov edx,[edi]
                mov edx,[edi]             ;#0045F79E: 213027                     uv 04 80  1  96      
;   176         lodsd                -- next element of p3 (mov eax,[esi], esi+=4)
                lodsd                     ;#0045F7A0: 255                        np 41 40  2  97      
;   177         lea edi,[edi+4]
                lea edi,[edi+4]           ;#0045F7A1: 215177 04                  uv 80 80  1  99      
;   178         cmp eax,edx
                cmp eax,edx               ;#0045F7A4: 071320                     vu 00 05  1  99      
;   179         je :compareSeqSeqNxt
                je #0045F7C0              ;#0045F7A6: 164 18                     v  00 00  1 100      
;   180         cmp eax,h4
                cmp eax,h4                ;#0045F7A8: 075 00000040               uv 00 01  1 101      
;   181 --25/9/17
;   182 --      jl :compareSeqReset
;   183         jl :compareSeqp3iint
                jl #0045F7CB              ;#0045F7AD: 174 1C                     v  00 00  1 101      
;   184         cmp edx,h4
                cmp edx,h4                ;#0045F7AF: 201372 00000040            uv 00 04  1 102      
;   185 --25/9/17
;   186 --      jl :compareSeqReset
;   187         jl :compareSeqp2iint
                jl #0045F7E3              ;#0045F7B5: 174 2C                     v  00 00  1 102      
;   188         pushad
                pushad                    ;#0045F7B7: 140                        np 00 FF  5 103      
;   189         call :compareSeq
                call #0045F6EF            ;#0045F7B8: 350 32FFFFFF               v  00 00  1 108      
;   190         popad
                popad                     ;#0045F7BD: 141                        np FF 00  5 109      
;   191         jnz :compareSeqPop2Ret
                jnz #0045F807             ;#0045F7BE: 165 47                     v  00 00  1 114      
;   192       ::compareSeqSeqNxt
;   193         sub ecx,1
                sub ecx,1                 ;#0045F7C0: 203351 01                  uv 02 02  1 115      
;   194         jnz @b
                jnz #0045F79E             ;#0045F7C3: 165 D9                     v  00 00  1 115      
;   195         nop
                nop                       ;#0045F7C5: 220                        uv 00 00  1 116      
;   196       ::compareSeqCompareLengths
;   197         pop edx
                pop edx                   ;#0045F7C6: 132                        vu 04 00  1 116      
;   198         pop ecx
                pop ecx                   ;#0045F7C7: 131                        uv 02 00  1 117      
;   199         cmp ecx,edx
                cmp ecx,edx               ;#0045F7C8: 071321                     uv 00 06  1 118 02   
;   200         ret
                ret                       ;#0045F7CA: 303                        np 00 00  2 119      
;   201 
;   202 --25/9/17:
;   203 -- BUGFIX: ?sort({{0},{-3.8}}) gave completely the wrong results.
;   204 -- In compare({a},{b}) the nested compare of a,b was not handling
;   205 -- integers vs floats correctly; if {a,b} was {int,float} or
;   206 -- {float,int} it would simply assume int<float. The same bug was
;   207 -- present for infix <, <=, >, >=, though = and != were fine.
;   208       ::compareSeqp3iint
;   209         -- p3[i] (eax) is an integer
;   210         -- p2[i] (edx) is of unknown type
;   211         cmp edx,h4
                cmp edx,h4                ;#0045F7CB: 201372 00000040            uv 00 04  1 121      
;   212         jl :compareSeqReset
                jl #0045F805              ;#0045F7D1: 174 32                     v  00 00  1 121      
;   213         cmp byte[ebx+edx*4-1],0x12
                cmp byte[ebx+edx*4-1],#12  ;#0045F7D3: 200174223 FF 12            u  00 0C  2 122      
;   214         jne :compareSeqReset    -- all ints (eax<h4) deemed less than sequences (edi>h4)
                jne #0045F805             ;#0045F7D8: 165 2B                     v  00 00  1 123      
;   215         -- p2(edx) flt, p3(eax) int:
;   216         push eax
                push eax                  ;#0045F7DA: 120                        uv 00 01  1 124      
;   217         fld qword[ebx+edx*4]
                fld qword[ebx+edx*4]      ;#0045F7DB: 335004223                  np 00 0C  1 125      
;   218         fild dword[esp]
                fild dword[esp]           ;#0045F7DE: 333004044                  np 00 10  3 126      
;   219         jmp @f
                jmp #0045F7F1             ;#0045F7E1: 353 0E                     v  00 00  1 129      
;   220         
;   221       ::compareSeqp2iint
;   222         -- p2[i] (edx) is an integer
;   223         -- p3[i] (eax) is not, but could be a float
;   224         cmp byte[ebx+eax*4-1],0x12
                cmp byte[ebx+eax*4-1],#12  ;#0045F7E3: 200174203 FF 12            u  00 09  2 130      
;   225         jne :compareSeqReset    -- all ints (eax<h4) deemed less than sequences (edi>h4)
                jne #0045F805             ;#0045F7E8: 165 1B                     v  00 00  1 131      
;   226         -- p2(edx) int, p3(eax) flt:
;   227         push edx
                push edx                  ;#0045F7EA: 122                        uv 00 04  1 132      
;   228         fild dword[esp]
                fild dword[esp]           ;#0045F7EB: 333004044                  np 00 10  3 133      
;   229         fld qword[ebx+eax*4]
                fld qword[ebx+eax*4]      ;#0045F7EE: 335004203                  np 00 09  1 136      
;   230       @@:
;   231         add esp,4
                add esp,4                 ;#0045F7F1: 203304 04                  uv 10 10  1 137      
;   232         fcompp
                fcompp                    ;#0045F7F4: 336331                     np 00 00  1 138      
;   233         fnstsw ax
                fnstsw ax                 ;#0045F7F6: 337340                     np 01 00  6 139      
;   234         mov ch,ah
                mov ch,ah                 ;#0045F7F8: 212354                     uv 02 01  1 145      
;   235         and ah,0x7f     -- clear sign
                and ah,127                ;#0045F7FA: 200344 7F                  vu 01 01  1 145      
;   236         shl ch,7
                shl ch,7                  ;#0045F7FD: 300345 07                  u  02 02  1 146      
;   237         or ah,ch
                or ah,ch                  ;#0045F800: 010354                     uv 01 03  1 147 02   
;   238         sahf
                sahf                      ;#0045F802: 236                        np 00 01  2 148      
;   239         jmp :compareSeqPop2Ret
                jmp #0045F807             ;#0045F803: 353 02                     v  00 00  1 150      
;   240 
;   241       ::compareSeqReset
;   242 --25/9/17 BUG!! (as per Jccp2Intp3Ref...)
;   243         cmp eax,edx
                cmp eax,edx               ;#0045F805: 071320                     uv 00 05  1 151      
;   244       ::compareSeqPop2Ret
;   245 --  lea esp,[esp+8]
;   246         pop edx
                pop edx                   ;#0045F807: 132                        vu 04 00  1 151      
;   247         pop ecx
                pop ecx                   ;#0045F808: 131                        uv 02 00  1 152      
;   248         ret
                ret                       ;#0045F809: 303                        np 00 00  2 153      
;   249 
;   250 
;   251 --/*
;   252 procedure ::equalSeq(::)
;   253 end procedure -- (for Edita/CtrlQ)
;   254 --*/
;   255      ::equalSeq -- general equality routine.
;   256 --------------- -- used as the nested part of opFind and opMatch.
;   257                 -- on entry, we have two refs to compare, one in eax,
;   258                 --  the other in [edi-4]. (NB this must NOT be called
;   259                 --  with short int params) Result is Z flag.
;   260                 -- Assume all registers will be damaged
;   261         mov edi,[edi-4]
                mov edi,[edi-4]           ;#0045F80A: 213177 FC                  uv 80 80  1 155      
;   262      ::equalSeqR    -- entry point with refs in eax and edi.
;   263         lea esi,[ebx+eax*4]
                lea esi,[ebx+eax*4]       ;#0045F80D: 215064203                  vu 40 09  1 155      
;   264         shl edi,2
                shl edi,2                 ;#0045F810: 301347 02                  u  80 80  1 156      
;   265         mov al,[esi-1]
                mov al,[esi-1]            ;#0045F813: 212106 FF                  uv 01 40  1 158    *40*
;   266         cmp edi,esi
                cmp edi,esi               ;#0045F816: 071367                     vu 00 C0  1 158      
;   267         je :equalSeqRet
                je #0045F8AF              ;#0045F818: 017204 91000000            v  00 00  1 159      
;   268         cmp al,0x12
                cmp al,#12                ;#0045F81E: 200370 12                  uv 00 01  1 160      
;   269         jne :equalStrX
                jne #0045F83A             ;#0045F821: 165 17                     v  00 00  1 160      
;   270         cmp byte[edi-1],0x12
                cmp byte[edi-1],#12       ;#0045F823: 200177 FF 12               u  00 80  2 161      
;   271         jne :equalSeqRet
                jne #0045F8AF             ;#0045F827: 017205 82000000            v  00 00  1 162      
;   272         -- (direct binary compare allows scan for nan)
;   273 --DEV this may be the wrong thing to do entirely, see above
;   274         mov eax,[edi]
                mov eax,[edi]             ;#0045F82D: 213007                     uv 01 80  1 163      
;   275         mov ecx,[edi+4]
                mov ecx,[edi+4]           ;#0045F82F: 213117 04                  vu 02 80  1 163      
;   276         cmp eax,[esi]
                cmp eax,[esi]             ;#0045F832: 073006                     uv 00 41  2 164      
;   277         jne @f
                jne #0045F839             ;#0045F834: 165 03                     v  00 00  1 165      
;   278             cmp ecx,[esi+4]
                    cmp ecx,[esi+4]       ;#0045F836: 073116 04                  uv 00 42  2 166      
;   279 --je :compareSeqRet -- not needed, removed 21/1/09
;   280       @@:
;   281 --  fld qword[edi]
;   282 --  fld qword[esi]
;   283 --  fcompp
;   284 --  fnstsw ax
;   285 --DEV:
;   286 --  mov ch,ah
;   287 ----    and ah,0x7f
;   288 ----    shl ch,7
;   289 ----    or ah,ch
;   290 --mov dh,ah
;   291 --  and ah,0x7f     -- clear sign
;   292 --and dh,0x04   -- keep parity only
;   293 --  shl ch,7
;   294 --shl dh,4      -- parity to Z position
;   295 --  or ah,ch
;   296 --sub ah,dh     -- Clear Z if Parity set
;   297 --  sahf
;   298         ret
                ret                       ;#0045F839: 303                        np 00 00  2 168      
;   299 
;   300       ::equalStrX
;   301         test al,0x80
                test al,#80               ;#0045F83A: 250 80                     uv 00 01  1 170      
;   302         jz :equalSeqRet0
                jz #0045F8AA              ;#0045F83C: 164 6C                     v  00 00  1 170      
;   303         mov dl,[edi-1]                -- type of 2nd param
                mov dl,[edi-1]            ;#0045F83E: 212127 FF                  uv 04 80  1 171      
;   304         mov ecx,[esi-12]        -- length
                mov ecx,[esi-12]          ;#0045F841: 213116 F4                  vu 02 40  1 171      
;   305         test dl,0x80
                test dl,#80               ;#0045F844: 366302 80                  uv 00 04  1 172      
;   306         jz :equalSeqRet0
                jz #0045F8AA              ;#0045F847: 164 61                     v  00 00  1 172      
;   307         cmp ecx,[edi-12]
                cmp ecx,[edi-12]          ;#0045F849: 073117 F4                  uv 00 82  2 173      
;   308         jne :equalSeqRet
                jne #0045F8AF             ;#0045F84C: 165 61                     v  00 00  1 174      
;   309         test ecx,ecx
                test ecx,ecx              ;#0045F84E: 205311                     uv 00 02  1 175      
;   310         jz :equalSeqRet
                jz #0045F8AF              ;#0045F850: 164 5D                     v  00 00  1 175      
;   311 
;   312         cmp al,0x82
                cmp al,#82                ;#0045F852: 200370 82                  uv 00 01  1 176      
;   313         jne :equalSeqX
                jne #0045F873             ;#0045F855: 165 1C                     v  00 00  1 176      
;   314         -- .. so esi is str
;   315         cmp dl,0x82
                cmp dl,#82                ;#0045F857: 200372 82                  uv 00 04  1 177      
;   316         jne :equalStrSeq
                jne #0045F85F             ;#0045F85A: 165 03                     v  00 00  1 177      
;   317         -- .. and so is edi
;   318         repe cmpsb
                repe cmpsb                ;#0045F85C: 363:246                    np C2 C2  5 178      
;   319         ret
                ret                       ;#0045F85E: 303                        np 00 00  2 183      
;   320 
;   321       ::equalStrSeq
;   322         -- .. esi is str, edi is seq
;   323         add ecx,1       -- to get Z flag right at end
                add ecx,1                 ;#0045F85F: 203301 01                  uv 02 02  1 185      
;   324         xor eax,eax    
                xor eax,eax               ;#0045F862: 061300                     vu 01 01  1 185      
;   325       ::equalStrVsSeqCharLoop
;   326         sub ecx,1
                sub ecx,1                 ;#0045F864: 203351 01                  uv 02 02  1 186      
;   327         jz :equalSeqRet
                jz #0045F8AF              ;#0045F867: 164 46                     v  00 00  1 186      
;   328         lodsb       -- mov al,[esi], esi+=1
                lodsb                     ;#0045F869: 254                        np 41 40  2 187      
;   329         cmp eax,[edi]
                cmp eax,[edi]             ;#0045F86A: 073007                     uv 00 81  2 189      
;   330         lea edi,[edi+4]
                lea edi,[edi+4]           ;#0045F86C: 215177 04                  vu 80 80  1 190      
;   331         je :equalStrVsSeqCharLoop
                je #0045F864              ;#0045F86F: 164 F3                     v  00 00  1 191      
;   332         nop
                nop                       ;#0045F871: 220                        uv 00 00  1 192      
;   333         ret
                ret                       ;#0045F872: 303                        np 00 00  2 193      
;   334 
;   335       ::equalSeqX
;   336         cmp al,0x80
                cmp al,#80                ;#0045F873: 200370 80                  uv 00 01  1 195      
;   337         jne :equalSeqRet
                jne #0045F8AF             ;#0045F876: 165 37                     v  00 00  1 195      
;   338         -- .. so esi is seq
;   339         cmp dl,0x82
                cmp dl,#82                ;#0045F878: 200372 82                  uv 00 04  1 196      
;   340         jne :equalSeqSeq
                jne #0045F881             ;#0045F87B: 165 04                     v  00 00  1 196      
;   341         -- .. and edi is str
;   342         xchg esi,edi
                xchg esi,edi              ;#0045F87D: 207376                     np C0 C0  3 197      
;   343         jmp :equalStrSeq
                jmp #0045F85F             ;#0045F87F: 353 DE                     v  00 00  1 200      
;   344 
;   345       ::equalSeqSeq
;   346         -- esi and edi are sequences, of same length..
;   347         -- we *must* deal with any short ints here...
;   348       @@:
;   349         mov edx,[edi]
                mov edx,[edi]             ;#0045F881: 213027                     uv 04 80  1 203    *80*
;   350         lodsd                -- next element of p3 (mov eax,[esi], esi+=4)
                lodsd                     ;#0045F883: 255                        np 41 40  2 204      
;   351         lea edi,[edi+4]
                lea edi,[edi+4]           ;#0045F884: 215177 04                  uv 80 80  1 206      
;   352         cmp eax,edx
                cmp eax,edx               ;#0045F887: 071320                     vu 00 05  1 206      
;   353         je :equalSeqSeqNxt
                je #0045F8A3              ;#0045F889: 164 18                     v  00 00  1 207      
;   354         cmp eax,h4
                cmp eax,h4                ;#0045F88B: 075 00000040               uv 00 01  1 208      
;   355         jl :equalSeqRet
                jl #0045F8AF              ;#0045F890: 174 1D                     v  00 00  1 208      
;   356         cmp edx,h4
                cmp edx,h4                ;#0045F892: 201372 00000040            uv 00 04  1 209      
;   357         jl :equalSeqRet
                jl #0045F8AF              ;#0045F898: 174 15                     v  00 00  1 209      
;   358         pushad
                pushad                    ;#0045F89A: 140                        np 00 FF  5 210      
;   359         call :equalSeq
                call #0045F80A            ;#0045F89B: 350 6AFFFFFF               v  00 00  1 215      
;   360         popad
                popad                     ;#0045F8A0: 141                        np FF 00  5 216      
;   361         jnz :equalSeqRet
                jnz #0045F8AF             ;#0045F8A1: 165 0C                     v  00 00  1 221      
;   362       ::equalSeqSeqNxt
;   363         sub ecx,1
                sub ecx,1                 ;#0045F8A3: 203351 01                  uv 02 02  1 222      
;   364         jnz @b
                jnz #0045F881             ;#0045F8A6: 165 D9                     v  00 00  1 222      
;   365         nop
                nop                       ;#0045F8A8: 220                        uv 00 00  1 223      
;   366         ret
                ret                       ;#0045F8A9: 303                        np 00 00  2 224      
;   367 
;   368       ::equalSeqRet0
;   369         --DEV esi and edi are non-zero here, try test esi,esi
;   370         xor eax,eax
                xor eax,eax               ;#0045F8AA: 061300                     uv 01 01  1 226      
;   371         add eax,1       -- ensure Z=0
                add eax,1                 ;#0045F8AC: 203300 01                  uv 01 01  1 227 01   
;   372       ::equalSeqRet
;   373         ret
                ret                       ;#0045F8AF: 303                        np 00 00  2 228      
;   374 
;   375 --/*
;   376 procedure ::compareSeq64(::)
;   377 end procedure -- (for Edita/CtrlQ)
;   378 --*/
;   379     [64]
;   380         ::compareSeq64
;   381 ----------------------
;   382         -- general compare routine.
;   383         -- use when other than eq or ne (ie lt,le,gt,ge) rqd.
;   384         -- on entry, we have two refs to compare, one in rax,
;   385         --  the other in [rdi-8]. (NB this must NOT be called
;   386         --  with short int params or anything unassigned)
;   387         -- Result is the condition code flags
;   388         --  (unlike equalSeq which is just the Z flag)
;   389         -- Assume all registers will be damaged. [DEV currently it is rax/rcx/rdx/rsi/rdi only, r8 on unused]
;   390         mov rdi,[rdi-8]
;   391      ::compareSeq64R                    -- entry point with refs in rax and rdi.
;   392         lea rsi,[rbx+rax*4]
;   393         shl rdi,2
;   394 --DEV tryme once everything working (avoids an AGI):
;   395 --  mov al,[rbx+rax*4-1]
;   396         mov al,[rsi-1]
;   397         cmp rdi,rsi
;   398         je :compareSeq64Ret
;   399         mov ah,[rdi-1]
;   400         cmp al,0x12
;   401         jne :compareStr64X
;   402         cmp ah,0x12
;   403         jne :compareSeq64Ret            -- sequences > atoms
;   404         -- two floats. First, a direct binary compare allows nan compare:
;   405 --DEV this may be the wrong thing to do entirely
;   406         mov rax,[rdi]
;   407         mov cx,[rdi+8]
;   408         cmp rax,[rsi]
;   409         jne @f
;   410             cmp cx,[rsi+8]
;   411             je :compareSeq64Ret
;   412       @@:
;   413         fld tbyte[rdi]
;   414         fld tbyte[rsi]
;   415         fcompp
;   416         fnstsw ax
;   417         mov ch,ah
;   418         mov dh,ah
;   419         and ah,0x7f     -- clear sign
;   420         and dh,0x04     -- keep parity only
;   421         shl ch,7
;   422         shl dh,4        -- parity to Z position
;   423         or ah,ch
;   424         sub ah,dh       -- Clear Z if Parity set
;   425         sahf
;   426       ::compareSeq64Ret
;   427         ret
;   428 
;   429       ::compareStr64X
;   430 
;   431         mov rcx,[rsi-24]        -- length
;   432         test ah,0x80            -- type[rdi]
;   433 --  compareSeq64Ret0:
;   434         jnz @f
;   435             test rsi,rsi    -- ensure Z=0
;   436             ret
;   437       @@:
;   438         mov rdx,[rdi-24]        -- length
;   439 
;   440         cmp al,0x82             -- type[rsi]
;   441         jne :compareSeq64X
;   442         -- .. so rsi is str
;   443         cmp ah,0x82             -- type[rdi]
;   444         jne :compareStrSeq64
;   445         -- .. and so is rdi
;   446         add rcx,1           ---- include trailing null byte [or hit the rdx<rcx case first]
;   447         repe cmpsb
;   448         ret
;   449 
;   450       ::compareStrSeq64
;   451         -- .. rsi is str, rdi is seq
;   452         push rcx
;   453         push rdx
;   454         cmp rcx,rdx
;   455         jle @f
;   456             mov rcx,rdx
;   457       @@:
;   458         add rcx,1           -- as sub rcx,1 at top of loop
;   459         xor rax,rax         -- for lodsb
;   460       ::compareStrVsSeq64CharLoop
;   461         sub rcx,1
;   462         jz :compareSeq64CompareLengths
;   463         lodsb       -- mov al,[rsi], rsi+=1
;   464         cmp rax,[rdi]
;   465         lea rdi,[rdi+8]
;   466         je :compareStrVsSeq64CharLoop
;   467 --  lea rsp,[rsp+16]
;   468         pop rdx
;   469         pop rcx
;   470         ret
;   471 
;   472       ::compareSeq64X
;   473         -- .. so rsi is seq
;   474         push rcx
;   475         push rdx
;   476         cmp rcx,rdx
;   477         jle @f
;   478             mov rcx,rdx
;   479       @@:
;   480         cmp ah,0x82                 -- type[rdi]
;   481         jne :compareSeq64Seq
;   482         -- .. and rdi is str
;   483         xchg rsi,rdi
;   484 --  jmp :compareStrSeq64
;   485         add rcx,1           -- as sub ecx,1 at top of loop
;   486         xor rax,rax         -- for lodsb
;   487       ::compareSeq64VsStrCharLoop
;   488         sub rcx,1
;   489         jz :compareSeq64CompareLengths
;   490         lodsb       -- mov al,[rsi], rsi+=1
;   491 --      cmp rax,[rdi]
;   492         cmp [rdi],rax
;   493         lea rdi,[rdi+8]
;   494         je :compareSeq64VsStrCharLoop
;   495 --  lea rsp,[rsp+16]
;   496         pop rdx
;   497         pop rcx
;   498         ret
;   499 
;   500       ::compareSeq64Seq
;   501         -- rsi and rdi are sequences..
;   502         -- we *must* deal with any short ints here...
;   503         test rcx,rcx
;   504         jz :compareSeq64CompareLengths
;   505         mov r15,h4
;   506       @@:
;   507         mov rdx,[rdi]
;   508         lodsq                -- next element of p3 (mov rax,[rsi], rsi+=8)
;   509         lea rdi,[rdi+8]
;   510         cmp rax,rdx
;   511         je :compareSeq64SeqNxt
;   512 --      cmp rax,h4
;   513         cmp rax,r15
;   514 --25/9/17
;   515 --      jl :compareSeq64Reset
;   516         jl :compareSeq64p3iint
;   517 --      cmp rdx,h4
;   518         cmp rdx,r15
;   519 --25/9/17
;   520 --      jl :compareSeq64Reset
;   521         jl :compareSeq64p2iint
;   522 --      pushad
;   523 push rsi
;   524 push rdi
;   525 push rcx
;   526         call :compareSeq64
;   527 pop rcx
;   528 pop rdi
;   529 pop rsi
;   530 --      popad
;   531         jnz :compareSeq64Pop2Ret
;   532       ::compareSeq64SeqNxt
;   533         sub rcx,1
;   534         jnz @b
;   535         nop
;   536       ::compareSeq64CompareLengths
;   537         pop rdx
;   538         pop rcx
;   539         cmp rcx,rdx
;   540         ret
;   541 
;   542 --25/9/17:
;   543       ::compareSeq64p3iint
;   544         -- p3[i] (rax) is an integer
;   545         -- p2[i] (rdx) is of unknown type
;   546         cmp rdx,r15
;   547         jl :compareSeq64Reset
;   548         cmp byte[rbx+rdx*4-1],0x12
;   549         jne :compareSeq64Reset  -- all ints (rax<h4) deemed less than sequences (rdi>h4)
;   550         -- p2(rdx) flt, p3(rax) int:
;   551         push rax
;   552         fld tbyte[ebx+edx*4]
;   553         fild qword[rsp]
;   554         jmp @f
;   555         
;   556       ::compareSeq64p2iint
;   557         -- p2[i] (rdx) is an integer
;   558         -- p3[i] (rax) is not, but could be a float
;   559         cmp byte[rbx+rax*4-1],0x12
;   560         jne :compareSeq64Reset  -- all ints (rax<h4) deemed less than sequences (rdi>h4)
;   561         -- p2(rdx) int, p3(rax) flt:
;   562         push rdx
;   563         fild qword[rsp]
;   564         fld tbyte[rbx+rax*4]
;   565       @@:
;   566         add rsp,8
;   567         fcompp
;   568         fnstsw ax
;   569         mov ch,ah
;   570         and ah,0x7f     -- clear sign
;   571         shl ch,7
;   572         or ah,ch
;   573         sahf
;   574         jmp :compareSeq64Pop2Ret
;   575 
;   576       ::compareSeq64Reset
;   577         cmp rax,rdx
;   578       ::compareSeq64Pop2Ret
;   579 --  lea rsp,[rsp+16]
;   580         pop rdx
;   581         pop rcx
;   582         ret
;   583 
;   584 --/*
;   585 procedure ::equalSeq64(::)
;   586 end procedure -- (for Edita/CtrlQ)
;   587 --*/
;   588      ::equalSeq64 -- nested part of opFind and opMatch...
;   589 ----------------- -- on entry, we have two refs to compare, one in rax,
;   590                   --    the other in [rdi-8]. (NB this must NOT be called
;   591                   --    with short int params) Result is Z flag.
;   592                   -- Damages rax,rcx,rdx,rsi,rdi
;   593         mov rdi,[rdi-8]
;   594      ::equalSeq64R  -- entry point with refs in rax and rdi.
;   595         lea rsi,[rbx+rax*4]
;   596         shl rdi,2
;   597 --DEV (see compare, avoid AGI)
;   598         mov al,[rsi-1]
;   599         cmp rdi,rsi
;   600         je :equalSeq64Ret
;   601         cmp al,0x12
;   602         jne :equalStrX64
;   603         cmp byte[rdi-1],0x12
;   604         jne :equalSeq64Ret
;   605         -- (direct binary compare allows scan for nan)
;   606 --DEV this may be the wrong thing to do entirely, see above
;   607         mov rax,[rdi]
;   608         mov cx,[rdi+8]
;   609         cmp rax,[rsi]
;   610         jne @f
;   611             cmp cx,[rsi+8]
;   612       @@:
;   613         ret
;   614 
;   615       ::equalStrX64
;   616         test al,0x80
;   617         jz :equalSeq64Ret0
;   618         mov dl,[rdi-1]              -- type of 2nd param
;   619         mov rcx,[rsi-24]            -- length
;   620         test dl,0x80
;   621         jz :equalSeq64Ret0
;   622         cmp rcx,[rdi-24]
;   623         jne :equalSeq64Ret
;   624         test rcx,rcx
;   625         jz :equalSeq64Ret
;   626 
;   627         cmp al,0x82
;   628         jne :equalSeq64X
;   629         -- .. so rsi is str
;   630         cmp dl,0x82
;   631         jne :equalStrSeq64
;   632         -- .. and so is rdi
;   633         repe cmpsb
;   634         ret
;   635 
;   636       ::equalStrSeq64
;   637         -- .. rsi is str, rdi is seq
;   638         add rcx,1       -- to get Z flag right at end
;   639         xor rax,rax    
;   640       ::equalStrVsSeq64CharLoop
;   641         sub rcx,1
;   642         jz :equalSeq64Ret
;   643         lodsb       -- mov al,[rsi], rsi+=1
;   644         cmp rax,[rdi]
;   645         lea rdi,[rdi+8]
;   646         je :equalStrVsSeq64CharLoop
;   647         nop
;   648         ret
;   649 
;   650       ::equalSeq64X
;   651         cmp al,0x80
;   652         jne :equalSeq64Ret
;   653         -- .. so rsi is seq
;   654         cmp dl,0x82
;   655         jne :equalSeq64Seq
;   656         -- .. and rdi is str
;   657         xchg rsi,rdi
;   658         jmp :equalStrSeq64
;   659 
;   660       ::equalSeq64Seq
;   661         -- rsi and rdi are sequences, of same length..
;   662         -- we *must* deal with any short ints here...
;   663         mov r15,h4
;   664       @@:
;   665         mov rdx,[rdi]
;   666         lodsq                -- next element of p3 (mov rax,[rsi], rsi+=8)
;   667 --      lea rdi,[rdi+4]
;   668         lea rdi,[rdi+8]
;   669         cmp rax,rdx
;   670         je :equalSeq64SeqNxt
;   671 --      cmp rax,h4
;   672         cmp rax,r15
;   673         jl :equalSeq64Ret
;   674 --      cmp rdx,h4
;   675         cmp rdx,r15
;   676         jl :equalSeq64Ret
;   677 --      pushad
;   678 push rsi
;   679 push rdi
;   680 push rcx
;   681         call :equalSeq64
;   682 pop rcx
;   683 pop rdi
;   684 pop rsi
;   685 --      popad
;   686         jnz :equalSeq64Ret
;   687       ::equalSeq64SeqNxt
;   688         sub rcx,1
;   689         jnz @b
;   690         nop
;   691         ret
;   692 
;   693       ::equalSeq64Ret0
;   694         -- (rsi is guaranteed non-0 here)
;   695         test rsi,rsi    -- ensure Z=0
;   696       ::equalSeq64Ret
;   697         ret
;   698     []
;   699 
;   700 --/*    (temp, see pFind.e/pMatch.e for now...)
;   701 --new 29/6/10:
;   702 --calling convention:                               octal:         binary:          code:
;   703 --  mov ecx,p1      -- result location              271         B9 imm32        mov ecx,imm32
;   704 --  mov esi,imm32   -- start from (known/1)         276         BE imm32        mov esi,imm32
;   705 --> or
;   706 --  mov esi,[p4]    -- start from (var)             213 065     8B 35 m32       mov esi,[m32]
;   707 --  mov eax,[p2]    -- ref of p2                    241         A1 m32          mov eax,[m32]
;   708 --  mov edi,[p3]    -- ref of p3                    213 075     8B 3D m32       mov edi,[m32]
;   709 --  mov ebx,p3      -- var no of p3
;   710 --  mov edx,p2      -- var no of p2
;   711 --  call :%opFind   -- [ecx] = find(eax,edi)        350         E8 rel32        call rel32
;   712 --      (if p4 is unassigned just get "invalid find start index")
;   713 
;   714  :%opFind
;   715 --  mov edi,[edx]           -- ref of p3
;   716 --  mov eax,[esi]           -- ref of p2
;   717     cmp edi,h4
;   718     jle :opFindErr          -- p3(ebx) unassigned or e112saofmbs
;   719     shl edi,2
;   720     push ecx                --[1] push target addr
;   721 --stack:
;   722 ?!  mov [p2vno],edx
;   723     test byte[edi-1],0x80
;   724     jz :opFindErrPop1e112   -- second argument of find() must be a sequence
;   725     xor ebx,ebx
;   726     mov edx,[edi-12]        -- length
;   727 sub esi,1
;   728 jz :opFind1
;   729 cmp esi,edx                 -- if start_from is -ve/float/oob then longhand
;   730 --jb @f
;   731 jbe @f
;   732     add esi,1
;   733     jl :opFindfixupNegativeStart
;   734     -- but it might be a float:
;   735     cmp esi,h4
;   736     jle :e21ifsi                -- 0 or >length+1
;   737     cmp byte[ebx+esi*4-1],0x12
;   738     jne :e21ifsi                -- invalid find start index
;   739     fld qword[ebx+esi*4]
;   740 --see pSubse.e(?)
;   741     fldcw [down53]
;   742 --stack
;   743     fistp qword[FltWrk]
;   744     fldcw [near53]
;   745     mov esi,[FltWrk]
;   746     cmp esi,0
;   747     jge :opFindfixupStartNotNegative
;   748   ::opFindfixupNegativeStart
;   749         add esi,edx
;   750 ----DEV try add esi,1
;   751         jmp :opFindNegDone
;   752 --      xor ebx,ebx
;   753 --      cmp esi,edx
;   754 --?     ja :e10sspeosediedxN    -- slice starts past end of sequence (%d > %d)
;   755 --      ret
;   756   ::opFindfixupStartNotNegative
;   757     sub esi,1
;   758   ::opFindNegDone
;   759     xor ebx,ebx
;   760     cmp esi,edx
;   761     ja :e21ifsi                 -- invalid find start index
;   762 --ret
;   763 --=====
;   764 
;   765 --      pop eax
;   766   @@:
;   767     jz :opFindNotFound
;   768 
;   769   ::opFind1
;   770     cmp eax,h4
;   771     jge :opFindRef
;   772     cmp byte[edi-1],0x82
;   773     mov ecx,edx
;   774     je :opFindStrChr
;   775     --
;   776     -- good, looking for short int, in a sequence (not string).
;   777     --
;   778 --  repne scasd         -- cmp eax,[edi], edi+=4
;   779 --  jnz :opFindNotFound
;   780     test edx,edx
;   781     jz :opFindNotFound
;   782 sub ecx,esi
;   783 lea edi,[edi+esi*4]
;   784   @@:
;   785     mov esi,[edi]
;   786     lea edi,[edi+4]
;   787     cmp eax,esi
;   788     je :FindIntFound
;   789     sub ecx,1
;   790     jnz @b
;   791     xor edx,edx
;   792     jmp @f
;   793 
;   794   ::FindIntFound
;   795     sub ecx,1
;   796 
;   797     sub edx,ecx
;   798 @@:
;   799     pop edi             -- target addr
;   800     mov ecx,edx
;   801   ::FindResult
;   802     mov edx,[edi]
;   803     mov [edi],ecx
;   804     cmp edx,h4
;   805     jle @f
;   806 ----DEV temp: (removed 14/10/09)
;   807 --1/1/2013 makes no sense...
;   808 --opFindE92: ---- exception here mapped to e30espfeh
;   809         sub dword[ebx+edx*4-8],1
;   810         jz :%pDealloc
;   811   @@:
;   812     ret
;   813 
;   814   ::opFindStrChr
;   815 sub ecx,esi
;   816 lea edi,[edi+esi]
;   817     --
;   818     -- searching a string (p3)
;   819     --
;   820     test eax,0xFFFFFF00
;   821     jne :opFindNotFound         -- must be 8-bit char (and not float/str/seq)
;   822     repne scasb
;   823     jnz :opFindNotFound
;   824     sub edx,ecx
;   825     pop edi                     -- target addr
;   826     mov ecx,edx
;   827     jmp :FindResult
;   828 
;   829   ::opFindFltNotFound
;   830 --DEV fstp st0
;   831 --  fistp [FltWrk]              -- discard st0
;   832     fstp st0                    -- discard st0
;   833 
;   834   ::opFindNotFound
;   835     xor ecx,ecx
;   836     pop edi                     -- target addr
;   837     jmp :FindResult
;   838 
;   839   ::opFindRef
;   840 --  jz :opFinde92espm4m15       -- p2=eax=[[esp]-15]=h4
;   841     jz :opFinde94espm4p2vno     -- era @ [esp+4], p2=[pvnvo]=h4
;   842     shl eax,2
;   843 --BUG 2/4/08: This assumed p3 is sequence!
;   844     cmp byte[edi-1],0x80
;   845     jne :opFindNotFound         -- you can't find a ref of any kind in a string!
;   846 mov ecx,esi
;   847 shl esi,2
;   848 add esi,edi
;   849     cmp byte[eax-1],0x12
;   850     jne :opFindSeqOrStr
;   851     --
;   852     -- search for a float then
;   853     --
;   854     fld qword[eax]
;   855     fstp qword[FltWrk]  -- store as 64-bit float/pop (2 cycle)
;   856     mov edi,[FltWrk]
;   857 --  fld qword[ebx+eax*4]
;   858 --  xor ecx,ecx
;   859 --xor ebx,ebx
;   860   @@:
;   861     add ecx,1
;   862     cmp ecx,edx
;   863     jg :opFindFltNotFound
;   864     lodsd   -- mov eax,[esi]-- esi+=4
;   865     cmp eax,h4
;   866     jl @b
;   867     cmp byte[ebx+eax*4-1],0x12
;   868     jne @b
;   869 -- direct binary compare allows scan for nan
;   870     cmp edi,[ebx+eax*4]     -- first dword of FltWrk already in edi (for speed ---)
;   871     jne @b
;   872 --stack:
;   873     mov edi,[FltWrk+4]
;   874     cmp edi,[ebx+eax*4+4]
;   875     mov edi,[FltWrk]
;   876     jne @b
;   877 --  fld qword[ebx+eax*4]
;   878 --  fcomp
;   879 --  fnstsw ax
;   880 --mov dh,ah
;   881 --  and ah,0x7f     -- clear sign
;   882 --and dh,0x04   -- keep parity only
;   883 --  shl ch,7
;   884 --shl dh,4      -- parity to Z position
;   885 --  or ah,ch
;   886 --sub ah,dh
;   887 --  sahf
;   888 --  jne @b
;   889     pop edi                     -- target addr
;   890 --DEV fstp st0
;   891 --  fistp [FltWrk]              -- discard st0
;   892     fstp st0                    -- discard st0
;   893     jmp :FindResult
;   894 
;   895   ::opFindSeqOrStr
;   896     mov edi,[eax-12]            -- length
;   897 --DEV move ecx,[eax-20] push ecx
;   898     push eax                    -- [1] save start of string p2 on stack
;   899     push edi                    -- [2] save length "" on stack
;   900 --  xor ecx,ecx
;   901     cmp byte[eax-1],0x82
;   902     jne :opFindSeq
;   903     --
;   904     -- searching for a string then...
;   905     --
;   906 --xor ebx,ebx
;   907   @@:
;   908     add ecx,1
;   909     cmp ecx,edx
;   910     jg :opFindStrNotFound
;   911     lodsd       -- mov eax,[esi], esi+=4
;   912     cmp eax,h4                  -- skip short ints
;   913     jl @b
;   914     cmp byte[ebx+eax*4-1],0x82
;   915     jne :opFindStrNotString
;   916     --
;   917     -- good, p2 is string, p3[i] is string
;   918     --
;   919     cmp edi,[ebx+eax*4-12]      -- compare lengths
;   920     jne @b
;   921     push esi                    --[3] save subscript element position on stack
;   922     push ecx                    --[4] and index
;   923     lea esi,[eax*4]
;   924     mov ecx,edi
;   925 --DEV save the base then!
;   926     mov edi,[esp+12]            -- [1] start of string being searched for
;   927     repe cmpsb
;   928     jz :opStringFound
;   929     pop ecx                     --[4]
;   930     pop esi                     --[3]
;   931     mov edi,[esp]               -- [2]
;   932     jmp @b
;   933 
;   934   ::opStringFound
;   935     pop ecx                     --[4]
;   936     add esp,12                  --[3..1]
;   937     pop edi                     -- target addr
;   938     jmp :FindResult
;   939   ::opFindStrNotFound
;   940     add esp,8                   --[2..1]
;   941     jmp :opFindNotFound
;   942 
;   943   ::opFindStrNotString
;   944     cmp byte[ebx+eax*4-1],0x80  -- skip any floats
;   945     jne @b
;   946     cmp edi,[ebx+eax*4-12]      -- compare lengths
;   947     jne @b
;   948     --
;   949     -- p2 is string, p3[i] is sequence, with same lengths.
;   950     -- compare each char with p3 elements as shortints.
;   951     --
;   952     push esi                    -- [3]save subscript element position on stack
;   953     push ecx                    -- [4]and index
;   954 --DEV save the base then!
;   955     mov esi,[esp+12]            --[1] start of string being searched for
;   956     mov ecx,edi
;   957     lea edi,[ebx+eax*4]         -- start of p3[i]
;   958     xor eax,eax
;   959   ::opFindStrVsSeqCharLoop
;   960     sub ecx,1
;   961     jl :opStringFound
;   962     lodsb       -- mov al,[esi], esi+=1
;   963     cmp eax,[edi]
;   964     lea edi,[edi+4]
;   965     je :opFindStrVsSeqCharLoop
;   966     pop ecx                     --[4]
;   967     pop esi                     --[3]
;   968     mov edi,[esp]               -- [2]
;   969     jmp @b
;   970 
;   971   ::opFindSeq
;   972     --
;   973     -- searching for a sequence then...
;   974     --
;   975     -- Scan through the toplevel, ignoring integers and floats, and
;   976     -- sequences/strings of the wrong length. If we find a string,
;   977     -- then compare char-for-short-int here, with the catch that if
;   978     -- we stumble on a non-char in p2, jump to below where we also
;   979     -- skip any further strings in p3. For sequence p3[i], compare
;   980     -- shortints here and pass off any (both) non-ints to the
;   981     -- recursive equalSeq function.
;   982     --
;   983 --  cmp byte[eax-1],0x80            -- should always be sequence here
;   984 --  jne ???                         -- (just did >h4, not 0x12 and not 0x82)
;   985 -- Next four instructions already done:
;   986 --  mov edi,[eax-12]            -- length
;   987 --  push eax                        -- [1]save start of p2 (a sequence) on stack
;   988 --  push edi                        -- [2]save length of p2 on stack
;   989 --  xor ecx,ecx
;   990   @@:
;   991     add ecx,1
;   992     cmp ecx,edx
;   993     jg :opFindStrNotFound
;   994     lodsd                           -- next element of p3 (mov eax,[esi], esi+=4)
;   995     cmp eax,h4                      -- skip shortints
;   996     jl @b
;   997 -- opFindodbfu7:
;   998     cmp byte[ebx+eax*4-1],0x82
;   999 -- opFindodbfu7a:
;  1000     jne :opFindSeqNotString
;  1001     -- so eax(=p3[ecx]) is a string:
;  1002     cmp edi,[ebx+eax*4-12]          -- compare lengths
;  1003     jne @b
;  1004     --
;  1005     -- <this sentence repeated from above:>
;  1006     -- compare each char of (string) p3[i] with (sequence) p2[i] as shortint,
;  1007     -- with the catch that if p2[i] is non-char, resume in lower loop which 
;  1008     -- also skips any further strings in p3.
;  1009     --
;  1010     push esi                        -- [3]save subscript element position on stack
;  1011     push ecx                        -- [4]and index
;  1012     lea esi,[ebx+eax*4]             -- start of string p3[i]
;  1013     mov ecx,edi
;  1014     mov edi,[esp+12]                -- start of sequence being searched for
;  1015     xor eax,eax
;  1016   ::opFindSeqVsStrCharLoop
;  1017     sub ecx,1
;  1018     jl :opStringFound
;  1019     lodsb                           -- mov al,[esi], esi+=1
;  1020     cmp eax,[edi]
;  1021     lea edi,[edi+4]
;  1022     je :opFindSeqVsStrCharLoop
;  1023     mov eax,[edi-4]
;  1024     pop ecx                         --[4]
;  1025     pop esi                         --[3]
;  1026     test eax,0xFFFFFF00
;  1027     jne :opFindSeqSkipFurtherStrings
;  1028     mov edi,[esp]
;  1029     jmp @b
;  1030 
;  1031   ::opFindSeqNotString
;  1032     cmp byte[ebx+eax*4-1],0x80      -- skip floats
;  1033     jne @b
;  1034     -- so eax(=p3[ecx]) is a sequence, and so is p2:
;  1035     cmp edi,[ebx+eax*4-12]          -- compare lengths
;  1036     jne @b
;  1037     --
;  1038     -- <this sentence repeated from above:>
;  1039     -- compare sequence(p2) with sequence(p3[i]) then...
;  1040     -- handle shortints here, pass off any (both) non-ints to
;  1041     -- the recursive equalSeq function
;  1042     --
;  1043     push esi                        -- [3]save subscript element position on stack
;  1044     push ecx                        -- [4]and index
;  1045     lea esi,[ebx+eax*4]             -- start of sequence p3[i]
;  1046     mov ecx,edi
;  1047 --DEV save the base then!
;  1048     mov edi,[esp+12]                -- [1] start of sequence being searched for
;  1049   ::opFindSeqVsSeqLoop
;  1050     sub ecx,1
;  1051     jl :opStringFound
;  1052     lodsd       -- mov eax,[esi], esi+=4
;  1053     cmp eax,[edi]
;  1054     lea edi,[edi+4]
;  1055     je :opFindSeqVsSeqLoop
;  1056     cmp eax,h4
;  1057     jl :opFSSmismatch
;  1058     cmp dword[edi-4],h4
;  1059     jl :opFSSmismatch
;  1060 pushad
;  1061     call :equalSeq          -- compare ref eax with ref at [edi-4], recursively
;  1062 popad                       -- result is Z flag
;  1063     je :opFindSeqVsSeqLoop
;  1064   ::opFSSmismatch
;  1065     pop ecx                 --[4]
;  1066     pop esi                 --[3]
;  1067     mov edi,[esp]
;  1068     jmp @b
;  1069 
;  1070 
;  1071   ::opFindSeqSkipFurtherStrings
;  1072     mov edi,[esp]
;  1073   @@:
;  1074     add ecx,1
;  1075     cmp ecx,edx
;  1076     jg :opFindStrNotFound
;  1077     lodsd                   -- next element of p3 (mov eax,[esi], esi+=4)
;  1078     cmp eax,h4
;  1079     jl @b
;  1080     cmp byte[ebx+eax*4-1],0x80
;  1081     jne @b
;  1082     cmp edi,[ebx+eax*4-12]
;  1083     jne @b
;  1084     --
;  1085     -- compare sequence(p2) with sequence(p3[i]) then...
;  1086     -- handle shortints here, pass off any (both) non-ints to
;  1087     -- the recursive equalSeq function
;  1088     --
;  1089     push esi                        -- [3]save subscript element position on stack
;  1090     push ecx                        -- [4]and index
;  1091     lea esi,[ebx+eax*4]             -- start of sequence p3[i]
;  1092     mov ecx,edi
;  1093 --DEV save the base then!
;  1094     mov edi,[esp+12]                -- [1] start of sequence being searched for
;  1095   ::opFindSeqVsSeqLoop2
;  1096     sub ecx,1
;  1097     jl :opStringFound
;  1098     lodsd       -- mov eax,[esi], esi+=4
;  1099     cmp eax,[edi]
;  1100     lea edi,[edi+4]
;  1101     je :opFindSeqVsSeqLoop2
;  1102     cmp eax,h4
;  1103     jl :opFSSmismatch2
;  1104     cmp dword[edi-4],h4
;  1105     jl :opFSSmismatch2
;  1106 pushad
;  1107     call :equalSeq          -- compare ref eax with ref at [edi-4], recursively
;  1108 popad                       -- result is Z flag
;  1109     je :opFindSeqVsSeqLoop2
;  1110   ::opFSSmismatch2
;  1111     pop ecx                 --[4]
;  1112     pop esi                 --[3]
;  1113     mov edi,[esp]
;  1114     jmp @b
;  1115 
;  1116 ::FindMap
;  1117 --  jz opMatchErre92esi
;  1118 --  jz opMatche92espm15
;  1119     jz :opMatche92edx
;  1120 --  cmp edi,h4
;  1121 --  jle opMatchErr          -- unassignededx or e113saommbs
;  1122 --DEV temp, until calling convention of opMatch updated to be same as opFind:
;  1123 --(error handling will be wrong till then)
;  1124 --mov esi,1
;  1125     cmp byte[ebx+edi*4-1],0x80
;  1126     jae :opFind
;  1127 --  mov ebx,[p2vno] -- not needed!
;  1128     jmp :opMatchErr         -- e113saommbs
;  1129 
;  1130  :%opMatch
;  1131 --calling convention: (== opFind)                   octal:         binary:          code:
;  1132 --  mov edx,p3                                      272         BA imm32        mov edx,imm32
;  1133 --  mov esi,p2                                      276         BE imm32        mov esi,imm32
;  1134 --  mov ecx,p1                                      271         B9 imm32        mov ecx,imm32
;  1135 --  call opMatch    -- p1 = match(p2,p3)            350         E8 rel32        call rel32
;  1136 --new 29/6/10:
;  1137 --calling convention:                               octal:         binary:          code:
;  1138 --  mov ecx,p1      -- result location              271         B9 imm32        mov ecx,imm32
;  1139 --  mov esi,imm32   -- start from (known/1)         276         BE imm32        mov esi,imm32
;  1140 --> or
;  1141 --  mov esi,[p4]    -- start from (var)             213 065     8B 35 m32       mov esi,[m32]
;  1142 --  mov eax,[p2]    -- ref of p2                    241         A1 m32          mov eax,[m32]
;  1143 --  mov edi,[p3]    -- ref of p3                    213 075     8B 3D m32       mov edi,[m32]
;  1144 --  mov ebx,p3      -- var no of p3
;  1145 --  mov edx,p2      -- var no of p2
;  1146 --  call opMatch    -- p1 = match(p2,p3,esi)        350         E8 rel32        call rel32
;  1147 --      (if p4 is unassigned just get "invalid match start index")
;  1148 
;  1149 --  mov edi,[edx]           -- ref of p3
;  1150 --  mov eax,[esi]           -- ref of p2
;  1151     cmp edi,h4
;  1152     jle :opMatchErr         -- p3(ebx) unassigned or e113saommbs
;  1153 --stack:
;  1154     mov [p2vno],ebx
;  1155 --  push ebx                -- p2vno
;  1156     xor ebx,ebx
;  1157     cmp eax,h4
;  1158     jle :FindMap            -- treat integer(p2) as find() [after some more error checks] [deviation from RDS]
;  1159 --  shl eax,2
;  1160     shl edi,2
;  1161     test byte[ebx+eax*4-1],0x80
;  1162     jz :%opFind             -- atom(p2) -> find() [deviation from RDS]
;  1163     shl eax,2
;  1164     push ecx                -- result addr
;  1165 --! mov esi,eax
;  1166     xchg esi,eax            -- swap(NB!):: eax:=start idx-- esi:=raw(p2)
;  1167     mov edx,[edi-12]        -- length(p3)
;  1168     mov ecx,[esi-12]        -- length(p2)
;  1169     test ecx,ecx
;  1170     jz :opMatch0            -- match({},x) gives 0 [deviation from RDS]
;  1171 --DEV to go:
;  1172     cmp ecx,edx             -- check if length(p2) > length(p3)
;  1173     jg :opMatch0            -- match(x,{}) or any """ gives 0
;  1174 
;  1175 sub eax,1
;  1176 jz :opMatch1
;  1177 cmp eax,edx                 -- if start_from is -ve/float/oob then longhand
;  1178 --jb @f
;  1179 jbe @f
;  1180     add eax,1
;  1181     jl :opMatchfixupNegativeStart
;  1182     -- but it might be a float:
;  1183     cmp eax,h4
;  1184     jle :e20imsi                -- 0 or >length+1 or unassigned
;  1185     cmp byte[ebx+eax*4-1],0x12
;  1186     jne :e20imsi                -- invalid match start index
;  1187     fld qword[ebx+eax*4]
;  1188 --see pSubse.e(?)
;  1189     fldcw [down53]
;  1190 --stack:
;  1191     fistp qword[FltWrk]
;  1192     fldcw [near53]
;  1193     mov eax,[FltWrk]
;  1194     cmp eax,0
;  1195     jge :opMatchfixupStartNotNegative
;  1196   ::opMatchfixupNegativeStart
;  1197         add eax,edx
;  1198 ----DEV try add eax,1
;  1199         jmp :opMatchNegDone
;  1200 --      xor ebx,ebx
;  1201 --      cmp eax,edx
;  1202 --?     ja :e10sspeosediedxN    -- slice starts past end of sequence (%d > %d)
;  1203 --      ret
;  1204   ::opMatchfixupStartNotNegative
;  1205     sub eax,1
;  1206   ::opMatchNegDone
;  1207     xor ebx,ebx
;  1208     cmp eax,edx
;  1209     ja :e20imsi                 -- invalid match start index
;  1210 --ret
;  1211 --=====
;  1212 
;  1213 --      pop eax
;  1214   @@:
;  1215     jz :opMatch0
;  1216 
;  1217   ::opMatch1
;  1218 
;  1219 --==========
;  1220     --
;  1221     -- esi = raw(p2)        -- ecx = length(p2)
;  1222     -- edi = raw(p3)        -- edx = length(p3)
;  1223     -- eax = start idx (yet to be applied)
;  1224     --
;  1225     sub ecx,1
;  1226     push esi                -- [esp+12]=raw(p2)
;  1227     push edi                -- [esp+8]=raw(p3), adjusted every loop
;  1228     push ecx                -- [esp+4]=length(p2)-1
;  1229     push edx                -- [esp]=length(p3), [NOT] adjusted every loop
;  1230 
;  1231     cmp byte[esi-1],0x82    -- is p2 a string?
;  1232     jne :opMatchSeqX
;  1233     cmp byte[edi-1],0x82
;  1234     jne :opMatchStrSeq
;  1235 
;  1236     -- match(string,string)
;  1237 add edi,eax     -- adjust for start idx
;  1238 sub edx,eax
;  1239   @@:
;  1240     lodsb                   -- mov al,[esi], esi+=1
;  1241     mov ecx,edx             -- remaining chars in p3 [initially all]
;  1242     repne scasb             -- find first char, from [edi] on
;  1243     jnz :opMatchNotFound
;  1244     mov edx,ecx             -- there will be less chars left to scan in the next loop!
;  1245     mov ecx,[esp+4]         -- length(p2)-1
;  1246     cmp ecx,edx
;  1247     jg :opMatchNotFound
;  1248     or ecx,ecx
;  1249     je :opMatchFound        -- (catch the length(p2)=1 case)
;  1250 
;  1251     mov [esp+8],edi         -- save current position in p3
;  1252     repe cmpsb              -- remainder all here?
;  1253     jz :opMatchFound
;  1254     mov esi,[esp+12]        -- reset to p2[2] (after lodsb above!)
;  1255     mov edi,[esp+8]         -- reset position in p3, as just saved
;  1256     jmp @b
;  1257 
;  1258   ::opMatchNotFound
;  1259     add esp,16
;  1260   ::opMatch0
;  1261     xor ecx,ecx
;  1262     jmp :opMatchResult
;  1263 
;  1264   ::opMatchFound
;  1265     pop ecx    
;  1266     add esp,12
;  1267     sub ecx,edx
;  1268   ::opMatchResult
;  1269     pop edi                 -- target addr
;  1270     mov edx,[edi]
;  1271     mov [edi],ecx
;  1272     cmp edx,h4
;  1273     jle @f
;  1274         sub dword[ebx+edx*4-8],1
;  1275         jz :%pDealloc
;  1276   @@:
;  1277     ret
;  1278 
;  1279   ::opMatchStrSeq
;  1280     -- match(string,sequence)
;  1281     -- leap-frog over any non-char found in p3 (a la Boyer-Moore)
;  1282     -- (not that this is a high-performance case, really)
;  1283 
;  1284 lea edi,[edi+eax*4]     -- adjust for start idx
;  1285 sub edx,eax
;  1286 
;  1287     xor eax,eax
;  1288   @@:
;  1289     lodsb                   -- mov al,[esi], esi+=1
;  1290     mov ecx,edx             -- remaining elements of p3 [initially all]
;  1291   ::opMatchStrSeqFirstCharLoop
;  1292 --   repne scasb                                -- find first char, from [edi] on
;  1293 --   jnz :opMatchNotFound
;  1294 --   sub edx,1
;  1295 --   jl :opMatchNotFound    -- DEV poss jl?
;  1296     mov edx,[edi]
;  1297     lea edi,[edi+4]
;  1298     cmp eax,edx
;  1299     je :opMatchStrSeqFirstCharFound
;  1300     nop
;  1301     sub ecx,1
;  1302     jnz :opMatchStrSeqFirstCharLoop
;  1303 
;  1304     nop
;  1305     jmp :opMatchNotFound
;  1306 
;  1307   ::opMatchStrSeqFirstCharFound
;  1308 --DEV: lea edx,[ecx-1]
;  1309     sub ecx,1
;  1310 --stack:
;  1311     mov [MatchEdxSave],ecx  -- there will be less elements left to scan in the next loop!
;  1312 mov edx,ecx
;  1313     mov ecx,[esp+4]         -- length(p2)-1
;  1314 cmp ecx,edx
;  1315 jg :opMatchNotFound
;  1316 or ecx,ecx
;  1317 je :opMatchFound
;  1318     mov [esp+8],edi         -- save current position in p3
;  1319   ::opMatchStrSeqRemainingCharsLoop
;  1320     lodsb                   -- mov al,[esi], esi+=1
;  1321 --DEV cmpsd? (change rqd in opMatchStrSeqMismatch, probably)
;  1322     mov edx,[edi]
;  1323     cmp eax,edx
;  1324     jne :opMatchStrSeqMismatch
;  1325     lea edi,[edi+4]
;  1326     sub ecx,1
;  1327     jnz :opMatchStrSeqRemainingCharsLoop
;  1328 --stack:
;  1329     mov edx,[MatchEdxSave]
;  1330     jmp :opMatchFound
;  1331 
;  1332   ::opMatchStrSeqMismatch
;  1333     mov esi,[esp+12]                -- reset to p2[2] (after lodsb above!)
;  1334     test edx,0xFFFFFF00
;  1335     jnz :opMatchStrSeqNotChar
;  1336     mov edi,[esp+8]                 -- reset position in p3, as just saved
;  1337 --stack:
;  1338     mov edx,[MatchEdxSave]
;  1339     jmp @b
;  1340 
;  1341   ::opMatchStrSeqNotChar
;  1342     --
;  1343     -- not a char: leave edi as is then!
;  1344     -- (but must adjust edx to match)
;  1345     --
;  1346     mov edx,[esp+8]         -- saved position in p3
;  1347     sub edx,edi             -- less where we got to (so edx now -ve)
;  1348     sar edx,2               -- at 4 bytes per element
;  1349 --stack:
;  1350     add edx,[MatchEdxSave]  -- is adjust to (saved) edx
;  1351     jmp @b
;  1352 
;  1353   ::opMatchSeqX
;  1354     cmp byte[edi-1],0x82
;  1355     jne :opMatchSeqSeq
;  1356     -- match(sequence,string)
;  1357     -- give up the moment any non-char found in p2.
;  1358 
;  1359 add edi,eax     -- adjust for start idx
;  1360 sub edx,eax
;  1361 
;  1362   @@:
;  1363     lodsd       -- mov eax,[esi], esi+=4
;  1364     test eax,0xFFFFFF00
;  1365     jnz :opMatchNotFound
;  1366 
;  1367     mov ecx,edx                 -- remaining chars of p3 [initially all]
;  1368     repne scasb                 -- find first char, from [edi] on
;  1369     jnz :opMatchNotFound
;  1370 --stack:
;  1371     mov [MatchEdxSave],ecx      -- there will be less elements left to scan in the next loop!
;  1372 mov edx,ecx
;  1373     mov ecx,[esp+4]             -- length(p2)-1
;  1374 cmp ecx,edx
;  1375 jg :opMatchNotFound
;  1376 or ecx,ecx
;  1377 je :opMatchFound
;  1378     mov [esp+8],edi             -- save current position in p3
;  1379   ::opMatchSeqStrRemainingCharsLoop
;  1380     lodsd       -- mov eax,[esi], esi+=4
;  1381     test eax,0xFFFFFF00
;  1382     jnz :opMatchNotFound
;  1383 --DEV cmpsb? (change rqd below, probably)
;  1384     cmp al,[edi]
;  1385     jne :opMatchSeqStrMismatch
;  1386     add edi,1
;  1387     sub ecx,1
;  1388     jnz :opMatchSeqStrRemainingCharsLoop
;  1389 
;  1390 --stack:
;  1391     mov edx,[MatchEdxSave]
;  1392     jmp :opMatchFound
;  1393 
;  1394   ::opMatchSeqStrMismatch
;  1395     mov esi,[esp+12]            -- reset to p2[2] (with line+1!)
;  1396     mov edi,[esp+8]             -- reset position in p3, as just saved
;  1397 --   lea esi,[esi+4]
;  1398 --stack:
;  1399     mov edx,[MatchEdxSave]
;  1400     jmp @b
;  1401 
;  1402   ::opMatchSeqSeq
;  1403     cmp byte[edi-1],0x80
;  1404     jne :opMatchErrPop4e113
;  1405     --
;  1406 --push esi                      -- [esp+12]=raw(p2)
;  1407 --push edi                      -- [esp+8]=raw(p3), adjusted every loop
;  1408 --push ecx                      -- [esp+4]=length(p2)-1
;  1409 --push edx                      -- [esp]=length(p3), [NOT] adjusted every loop
;  1410 --
;  1411     -- match(sequence,sequence)
;  1412 
;  1413     mov edx,1                   -- default result
;  1414 
;  1415 lea edi,[edi+eax*4]     -- adjust for start idx
;  1416 add edx,eax
;  1417 
;  1418   @@:                           -- Main Loop (resume scan for all of P2 from P3[edx])
;  1419 --      if res+ls1-1>ls2 then return 0 end if
;  1420     lea eax,[edx+ecx]
;  1421     cmp eax,[esp]               -- length(p3)
;  1422     jg :opMatchNotFound
;  1423 
;  1424     add ecx,1       -- on entry ecx (and [esp+4]) is length(p2)-1
;  1425   ::opMatchSeqSeqNextElement    -- Sub-loop (continue checking p2[i] vs p3[edx+i-1])
;  1426     repe cmpsd
;  1427     jz :opMatchSeqSeqFound
;  1428     --
;  1429     -- if p2[i] is a short int, scan for it in remainder of p3
;  1430     --  eg p2=23431...,
;  1431     --    p3=2343x31...
;  1432     --  from p3[6] on, scanning fwd finds p3[7]=1, which gives
;  1433     --  the earliest point worth re-starting from (ie +=2).
;  1434     --  eg p2=  23431...,
;  1435     --    p3=2343x31...
;  1436     -- (The whole point here is to minimise the number of attempts
;  1437     --  to deep-compare non-integers, btw, and in the example given
;  1438     --  the next loop will re-enter here looking for 2(=p2[1]) and
;  1439     --  not really save anything. However if p2[1..4] and p3[1..6]
;  1440     --  were some big nested sequences, especially when of similar 
;  1441     --  lengths,the saving could be quite dramatic.)
;  1442     --
;  1443     --  if p2i does not occur anywhere later in p3, then
;  1444     --  clearly there will be no match anywhere.
;  1445     --
;  1446     mov eax,[esi-4]
;  1447     cmp eax,h4
;  1448     jg ::opMatchSeqSeqNotInt
;  1449 
;  1450     --
;  1451     -- first, calculate number of remaining elements in p3:
;  1452     --
;  1453     sub ecx,[esp+4] -- -(length(p2)-1)  ~ -1*(elements scanned just now)
;  1454     add ecx,[esp]   -- +length(p3)
;  1455     sub ecx,edx     -- -res
;  1456 
;  1457     --
;  1458     -- now do a scan, updating res by no of items skipped, (ie +ecx--scan---ecx)
;  1459     --
;  1460     add edx,ecx
;  1461     repne scasd
;  1462     jnz :opMatchNotFound 
;  1463     sub edx,ecx
;  1464 
;  1465     --
;  1466     -- ...and resume scan from p3[edx]:
;  1467     --
;  1468     mov edi,[esp+8]             -- start of p3
;  1469     mov esi,[esp+12]            -- reset to p2
;  1470     mov ecx,[esp+4]
;  1471     lea edi,[edi+edx*4-4]       -- resume scan from p3[edx]
;  1472     jmp @b
;  1473 
;  1474 
;  1475   ::opMatchSeqSeqNotInt
;  1476     --
;  1477     -- if p3[i] is a short int, scan for it earlier in p2
;  1478     --
;  1479 --                  -- scan for s2i earlier on in s1
;  1480 --                  -- eg s1=131313x...,
;  1481 --                  --    s2=1313131...
;  1482 --                  -- with s2[7]=1, scanning back two places to s1[5]=1
;  1483 --                  -- gives the earliest point worth re-starting from.
;  1484 --                  -- if s2[7] does not occur anywhere earlier in s1,
;  1485 --                  -- then clearly we should restart from s2[8].
;  1486 --
;  1487 --      mov eax,[edi-4]     -- NO! equalSeq wants ref (from [esi-4]) in eax
;  1488 --      cmp eax,h4
;  1489     cmp dword[edi-4],h4
;  1490     jg :opMatchSeqSeqRefRef
;  1491     neg ecx                 -- negate how-far-we-got,
;  1492     mov eax,[edi-4]
;  1493     add ecx,[esp+4]         -- +length(p2)-1
;  1494     lea edi,[esi-8]         -- start backwards scan from element before mismatch
;  1495     add ecx,1
;  1496     --
;  1497     -- scan, adjusting edx(res).
;  1498     --
;  1499     add edx,ecx
;  1500     std
;  1501     repne scasd
;  1502     cld
;  1503     --
;  1504     -- If we fall off the start of p2, edx adjust is maximal, 
;  1505     -- and the main loop resumes starting after the mismatch.
;  1506     -- Hence no check on result of repne scasd, info we need
;  1507     -- is in [change to] ecx only.
;  1508     --
;  1509     sub edx,ecx
;  1510     --
;  1511     -- ...and resume scan from p3[edx]:
;  1512     --
;  1513 --DEV same as 37 lines earlier:
;  1514     mov edi,[esp+8]             -- start of p3
;  1515     mov esi,[esp+12]            -- reset to p2
;  1516     lea edi,[edi+edx*4-4]       -- resume scan from p3[edx]
;  1517     mov ecx,[esp+4]
;  1518     jmp @b
;  1519 
;  1520   ::opMatchSeqSeqRefRef
;  1521 pushad
;  1522     call :equalSeq
;  1523 popad
;  1524      jz :opMatchSeqSeqNextElement
;  1525 ----DEV this may be superfluous: vvvvvvvvvvvvvv
;  1526 --      jnz :opMatchSeqSeqMismatch
;  1527 --      or ecx,ecx
;  1528 --      jnz :opMatchSeqSeqNextElement 
;  1529 --      nop
;  1530 --      jmp :opMatchSeqSeqFound
;  1531 ----DEV to here ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
;  1532 --   cmpsd        -- esi+=4-- edi+=4
;  1533 --   jmp @b
;  1534 --
;  1535   ::opMatchSeqSeqMismatch
;  1536     mov edi,[esp+8]             -- start of p3
;  1537     mov esi,[esp+12]            -- reset to p2
;  1538     lea edi,[edi+edx*4]         -- resume scan from p3[edx] (NB: no -4 here!)
;  1539     mov ecx,[esp+4]             -- length(p2)-1
;  1540     add edx,1                   -- res+=1
;  1541     jmp @b
;  1542 
;  1543   ::opMatchSeqSeqFound
;  1544     add esp,16
;  1545     mov ecx,edx
;  1546     jmp :opMatchResult
;  1547 --*/
;  1548 
;  1549 --/*
;  1550 procedure :%opJcc(:%)
;  1551 end procedure -- (for Edita/CtrlQ)
;  1552 --*/
;  1553  :%opJcc            -- for opJlt, opJle, opJge, opJgt
;  1554 --------            -- result is condition flags
;  1555                     -- Damages eax,ecx,edx,esi,edi
;  1556     [32]
;  1557         --calling convention:
;  1558         --  mov edi,[p3]        -- ref of p3
;  1559         --  mov eax,[p2]        -- ref of p2
;  1560         --  mov esi,p3          -- var no of p3
;  1561         --  mov edx,p2          -- var no of p2
;  1562         --  call opJcc
;  1563         --  jcc xxx
;  1564 
;  1565 --      xor ebx,ebx
;  1566         cmp eax,h4
                cmp eax,h4                ;#0045F8B0: 075 00000040               uv 00 01  1 230      
;  1567         jge :!Jccp2NotInt
                jge #0045F8CA (:!Jccp2NotInt)  ;#0045F8B5: 017215 0F000000            v  00 00  1 230      
;  1568         cmp edi,h4
                cmp edi,h4                ;#0045F8BB: 201377 00000040            uv 00 80  1 231      
;  1569         jge :!Jccp2Intp3Ref
                jge #0045F8FE (:!Jccp2Intp3Ref)  ;#0045F8C1: 017215 37000000            v  00 00  1 231      
;  1570         cmp eax,edi
                cmp eax,edi               ;#0045F8C7: 071370                     uv 00 81  1 232      
;  1571         ret
                ret                       ;#0045F8C9: 303                        np 00 00  2 233      
;  1572 
;  1573       :!Jccp2NotInt
;  1574 --je e94vhnbaavedx
;  1575         mov cl,[ebx+eax*4-1]
                mov cl,[ebx+eax*4-1]      ;#0045F8CA: 212114203 FF               uv 02 09  1 235      
;  1576         cmp edi,h4
                cmp edi,h4                ;#0045F8CE: 201377 00000040            vu 00 80  1 235      
;  1577         jge :Jccp2Refp3Ref
                jge #0045F8F8             ;#0045F8D4: 175 22                     v  00 00  1 236      
;  1578         -- p3 is an int
;  1579         cmp cl,0x12
                cmp cl,#12                ;#0045F8D6: 200371 12                  uv 00 02  1 237      
;  1580         jne @f
                jne #0045F8F5             ;#0045F8D9: 165 1A                     v  00 00  1 237      
;  1581         -- p2(eax) flt, p3(edi) int:
;  1582 --use stack:
;  1583 --  mov [FltWrk],edi
;  1584 --  fild [FltWrk]
;  1585         push edi
                push edi                  ;#0045F8DB: 127                        uv 00 80  1 238      
;  1586         fild dword[esp]
                fild dword[esp]           ;#0045F8DC: 333004044                  np 00 10  3 239      
;  1587         add esp,4
                add esp,4                 ;#0045F8DF: 203304 04                  uv 10 10  1 242      
;  1588         fld qword[ebx+eax*4]
                fld qword[ebx+eax*4]      ;#0045F8E2: 335004203                  np 00 09  1 243      
;  1589         fcompp
                fcompp                    ;#0045F8E5: 336331                     np 00 00  1 244      
;  1590         fnstsw ax
                fnstsw ax                 ;#0045F8E7: 337340                     np 01 00  6 245      
;  1591         mov ch,ah
                mov ch,ah                 ;#0045F8E9: 212354                     uv 02 01  1 251      
;  1592 --mov dh,ah
;  1593         and ah,0x7f     -- clear sign
                and ah,127                ;#0045F8EB: 200344 7F                  vu 01 01  1 251      
;  1594 --and dh,0x04   -- keep parity only
;  1595         shl ch,7
                shl ch,7                  ;#0045F8EE: 300345 07                  u  02 02  1 252      
;  1596 --shl dh,4      -- parity to Z position
;  1597         or ah,ch
                or ah,ch                  ;#0045F8F1: 010354                     uv 01 03  1 253 02   
;  1598 --sub ah,dh     -- clear Z if parity set
;  1599         sahf
                sahf                      ;#0045F8F3: 236                        np 00 01  2 254      
;  1600         ret
                ret                       ;#0045F8F4: 303                        np 00 00  2 256      
;  1601       @@:
;  1602         cmp eax,edi     -- all sequences (eax>h4) deemed greater than int (edx<h4)
                cmp eax,edi               ;#0045F8F5: 071370                     uv 00 81  1 258      
;  1603         ret
                ret                       ;#0045F8F7: 303                        np 00 00  2 259      
;  1604 
;  1605       ::Jccp2Refp3Ref
;  1606 --      jne equalSeqR
;  1607         jne :compareSeqR -- (fall thru if edi/p3 unassigned, aka goto compareSeqR unless p3 unassigned)
                jne #0045F6F2             ;#0045F8F8: 017205 F4FDFFFF            v  00 00  1 261      
;  1608 --DEV put this back: (or is letting it fall through ok?)
;  1609 --  jmp e92vhnbaavespm14    --DEV do it inline!
;  1610 --  jmp e94vhnbaavesi
;  1611 --  mov edi,edx
;  1612 --mov edi,[esp]
;  1613 --mov edi,[edi-14]
;  1614 --  lea edi,[edi+4]     -- equalSeq calling convention
;  1615 --  jmp equalSeq
;  1616 
;  1617 --  Jccp2Intp3Ref:  -- exception here mapped to e92vhnbaavespm14feh
;  1618       :!Jccp2Intp3Ref
;  1619 --  je :e94vhnbaavesi
;  1620         cmp byte[ebx+edi*4-1],0x12
                cmp byte[ebx+edi*4-1],#12  ;#0045F8FE: 200174273 FF 12            u  00 88  2 262      
;  1621         jne @b          -- all ints (eax<h4) deemed less than sequences (edi>h4)
                jne #0045F8F5             ;#0045F903: 165 F0                     v  00 00  1 263      
;  1622         -- p2(eax) int, p3(edi) flt:
;  1623 --  mov [FltWrk],eax
;  1624         push eax
                push eax                  ;#0045F905: 120                        uv 00 01  1 264      
;  1625         fld qword[ebx+edi*4]
                fld qword[ebx+edi*4]      ;#0045F906: 335004273                  np 00 88  1 265      
;  1626 --  fild [FltWrk]
;  1627         fild dword[esp]
                fild dword[esp]           ;#0045F909: 333004044                  np 00 10  3 266      
;  1628         add esp,4
                add esp,4                 ;#0045F90C: 203304 04                  uv 10 10  1 269      
;  1629         fcompp
                fcompp                    ;#0045F90F: 336331                     np 00 00  1 270      
;  1630         fnstsw ax
                fnstsw ax                 ;#0045F911: 337340                     np 01 00  6 271      
;  1631         mov ch,ah
                mov ch,ah                 ;#0045F913: 212354                     uv 02 01  1 277      
;  1632 --  and ah,0x7f
;  1633 --  shl ch,7
;  1634 --  or ah,ch
;  1635 --mov dh,ah
;  1636         and ah,0x7f     -- clear sign
                and ah,127                ;#0045F915: 200344 7F                  vu 01 01  1 277      
;  1637 --and dh,0x04   -- keep parity only
;  1638         shl ch,7
                shl ch,7                  ;#0045F918: 300345 07                  u  02 02  1 278      
;  1639 --shl dh,4      -- parity to Z position
;  1640         or ah,ch
                or ah,ch                  ;#0045F91B: 010354                     uv 01 03  1 279 02   
;  1641 --sub ah,dh     -- Clear Z if Parity set
;  1642         sahf
                sahf                      ;#0045F91D: 236                        np 00 01  2 280      
;  1643         ret
                ret                       ;#0045F91E: 303                        np 00 00  2 282      
;  1644 
;  1645     [64]
;  1646         --calling convention:
;  1647         --  mov rdi,[p3]        -- ref of p3        (opUnassigned*2?)
;  1648         --  mov rax,[p2]        -- ref of p2
;  1649 --      --  mov rsi,p3          -- var no of p3
;  1650 --      --  mov rdx,p2          -- var no of p2
;  1651         --  call opJcc
;  1652         --  jcc xxx
;  1653 
;  1654 --      xor rbx,rbx
;  1655         mov r15,h4
;  1656 --      cmp rax,h4
;  1657         cmp rax,r15
;  1658         jge :!Jccp2NotInt
;  1659 --      cmp rdi,h4
;  1660         cmp rdi,r15
;  1661         jge :!Jccp2Intp3Ref
;  1662         cmp rax,rdi
;  1663         ret
;  1664 
;  1665       :!Jccp2NotInt
;  1666 --je e94vhnbaavedx
;  1667         mov cl,[rbx+rax*4-1]
;  1668 --      cmp rdi,h4
;  1669         cmp rdi,r15
;  1670 --      jge :Jccp2Refp3Ref
;  1671         jge :compareSeq64R
;  1672         -- p3 is an int
;  1673         cmp cl,0x12
;  1674 --      cmp byte[rbx+rax*4-1],0x12
;  1675         jne @f
;  1676         -- p2(rax) flt, p3(rdi) int:
;  1677 --use stack:
;  1678 --  mov [FltWrk],edi
;  1679 --  fild [FltWrk]
;  1680         push rdi
;  1681         fild qword[rsp]
;  1682         add rsp,8
;  1683         fld tbyte[rbx+rax*4]
;  1684         fcompp
;  1685         fnstsw ax
;  1686         mov ch,ah
;  1687         and ah,0x7f     -- clear sign
;  1688         shl ch,7
;  1689         or ah,ch
;  1690         sahf
;  1691         ret
;  1692 
;  1693       @@:
;  1694         cmp rax,rdi     -- all sequences (rax>h4) deemed greater than int (rdx<h4)
;  1695         ret
;  1696 
;  1697 --    ::Jccp2Refp3Ref
;  1698 --      jne :compareSeq64R -- (fall thru if rdi/p3 unassigned, aka goto compareSeqR unless p3 unassigned)
;  1699       :!Jccp2Intp3Ref
;  1700 --      je :e94vhnbaavesi
;  1701         cmp byte[rbx+rdi*4-1],0x12
;  1702         jne @b          -- all ints (rax<h4) deemed less than sequences (rdi>h4)
;  1703         -- p2(rax) int, p3(rdi) flt:
;  1704         push rax
;  1705         fld tbyte[rbx+rdi*4]
;  1706         fild qword[rsp]
;  1707         add rsp,8
;  1708         fcompp
;  1709         fnstsw ax
;  1710         mov ch,ah
;  1711         and ah,0x7f     -- clear sign
;  1712         shl ch,7
;  1713         or ah,ch
;  1714         sahf
;  1715         ret
;  1716     []
;  1717 
;  1718 --/*
;  1719 procedure :%opJccE(:%)
;  1720 end procedure -- (for Edita/CtrlQ)
;  1721 --*/
;  1722  :%opJccE       -- optimised opJcc for opJeq, opJne 
;  1723 ---------       -- (no need to compare int with float, they're simply not equal,
;  1724                 --  plus we can cop out early when lengths do not match)
;  1725                 -- result is Z flag
;  1726                 -- Damages eax,ecx,edx,esi,edi
;  1727     [32]
;  1728         --calling convention: (same as opJcc)
;  1729         --  mov edi,[p3]        -- ref of p3
;  1730         --  mov eax,[p2]        -- ref of p2
;  1731         --  mov esi,p3          -- var no of p3
;  1732         --  mov edx,p2          -- var no of p2
;  1733         --  call opJccE
;  1734         --  jcc xxx
;  1735         -- rationale used: fast path of {any,int} is 3 clocks.
;  1736         --  The first two je :JccEpNe92 will actually both be 
;  1737         --  branch mispredictions when they actually trigger, 
;  1738         --  but as that leads to a fatal error no-one cares,
;  1739         --  and, apart from some pairing loss, they /should/ 
;  1740         --  count as no-penalty nops when they don't trigger.
;  1741         cmp edi,h4
                cmp edi,h4                ;#0045F91F: 201377 00000040            uv 00 80  1 284      
;  1742         jl :JccEp3Int
                jl #0045F934              ;#0045F925: 174 0D                     v  00 00  1 284      
;  1743         je :JccEp3e92
                je #0045F940              ;#0045F927: 164 17                     v  00 00  1 285      
;  1744         cmp eax,h4
                cmp eax,h4                ;#0045F929: 075 00000040               uv 00 01  1 286      
;  1745         jg :equalSeqR
                jg #0045F80D              ;#0045F92E: 017217 D9FEFFFF            v  00 00  1 286      
;  1746 --      je :JccEp2e92
;  1747 --      cmp eax,edi
;  1748 --      ret
;  1749 
;  1750       ::JccEp3Int
;  1751         cmp eax,h4
                cmp eax,h4                ;#0045F934: 075 00000040               uv 00 01  1 287      
;  1752         je :JccEp2e92
                je #0045F93E              ;#0045F939: 164 03                     v  00 00  1 287      
;  1753         cmp eax,edi
                cmp eax,edi               ;#0045F93B: 071370                     uv 00 81  1 288      
;  1754         ret
                ret                       ;#0045F93D: 303                        np 00 00  2 289      
;  1755 
;  1756       ::JccEp2e92
;  1757         mov esi,edx
                mov esi,edx               ;#0045F93E: 213362                     uv 40 04  1 291      
;  1758       ::JccEp3e92
;  1759         pop edx
                pop edx                   ;#0045F940: 132                        vu 04 00  1 291      
;  1760         mov al,92       -- e92vhnbaav(esi)
                mov al,92                 ;#0045F941: 260 5C                     uv 01 00  1 292      
;  1761 --      mov edx,[esp]
;  1762         sub edx,1
                sub edx,1                 ;#0045F943: 203352 01                  vu 04 04  1 292      
;  1763         jmp :!iDiag
                jmp #00463E69 (:!iDiag)   ;#0045F946: 351 1E450000               v  00 00  1 293      
;  1764         int3
                int3                      ;#0045F94B: 314                        np 00 00 13 294      
;  1765 
;  1766     [64]
;  1767         --calling convention:
;  1768         --  mov rdi,[p3]        -- ref of p3
;  1769         --  mov rax,[p2]        -- ref of p2
;  1770         --  mov rsi,p3          -- var no of p3
;  1771         --  mov rdx,p2          -- var no of p2
;  1772         --  call opJcc
;  1773         --  jcc xxx
;  1774 -->new code:
;  1775         mov r15,h4
;  1776         cmp rdi,r15
;  1777         jl :JccEp3Int
;  1778         je :JccEp3e92
;  1779         cmp rax,r15
;  1780         jg :equalSeq64R
;  1781 --      je :JccEp2e92
;  1782 --      cmp rax,rdi
;  1783 --      ret
;  1784 
;  1785       ::JccEp3Int
;  1786         cmp rax,r15
;  1787         je :JccEp2e92
;  1788         cmp rax,rdi
;  1789         ret
;  1790 
;  1791       ::JccEp2e92
;  1792         mov rsi,rdx
;  1793       ::JccEp3e92
;  1794         pop rdx
;  1795         mov al,92       -- e92vhnbaav(esi)
;  1796 --      mov rdx,[rsp]
;  1797         sub rdx,1
;  1798         jmp :!iDiag
;  1799         int3
;  1800 
;  1801 --<old code:
;  1802 --/*
;  1803 --      cmp rax,h4
;  1804 --      jle :JccEp2Int
;  1805 --      cmp rdi,h4
;  1806 --      jle :JccEp3Int
;  1807 --      nop
;  1808 --      jmp :equalSeq64R
;  1809 --
;  1810 --    ::JccEp2Int
;  1811 --      je :e94vhnbaavedx
;  1812 --      cmp rdi,h4
;  1813 --    ::JccEp3Int
;  1814 --      je :e94vhnbaavesi
;  1815 --      cmp rax,rdi
;  1816 --      ret
;  1817         mov r15,h4
;  1818         cmp rax,r15
;  1819         jle @f
;  1820         cmp rdi,r15
;  1821         jg :equalSeq64R
;  1822       @@:
;  1823         cmp rax,rdi
;  1824         ret
;  1825 -*/
;  1826     []
;  1827 
;  1828 --/*
;  1829 procedure :%opJif(:%)
;  1830 end procedure -- (for Edita/CtrlQ)
;  1831 --*/
;  1832  :%opJif
;  1833 --------
;  1834     -- Check for unassigned vars and atom conditions, set Z flag.  Also used by opJnot.
;  1835     -- If we know p1 is init atom, just test [p1] directly. This is only used when p1
;  1836     -- may be unassigned or string/sequence. Exactly the same code for opJif & opJnot.
;  1837     [32]
;  1838         --calling convention
;  1839         --  mov eax,[p1]        -- ref of p1
;  1840         --  mov edx,p1          -- var no of p1
;  1841         --  call :%opJif
;  1842         --  jnz xxx             -- (opJif)
;  1843         --  jz xxx              -- (opJnot)
;  1844         --on exit, all regs unaltered, and the Z flag is 1 iff [p1]==0
;  1845         --DEV swapping "mov edx,p1" and "call:%opJif" might save a clock...
;  1846         --    (see the or_esi = peek4u(or_era+6) trick in pdiagN.e)
;  1847         test eax,eax
                test eax,eax              ;#0045F94C: 205300                     uv 00 01  1 307      
;  1848         jz @f                   -- if Z=1, act on it (ie jnz for opJif, jz for opJnot)
                jz #0045F966              ;#0045F94E: 164 16                     v  00 00  1 307      
;  1849         cmp eax,h4
                cmp eax,h4                ;#0045F950: 075 00000040               uv 00 01  1 308      
;  1850         jl @f                   -- (Z=0), act on it
                jl #0045F966              ;#0045F955: 174 0F                     v  00 00  1 308      
;  1851     :!Jife92                    -- exception here mapped to e94vhnbaav(edx)
;  1852         je :e91vhnbaavedx       -- 6/9/21 (test in pDiagN.e marked as not working)
                je #0045F967              ;#0045F957: 164 0E                     v  00 00  1 309      
;  1853         test byte[ebx+eax*4-1],0x80
                test byte[ebx+eax*4-1],#80  ;#0045F959: 366104203 FF 80            u  00 09  2 310      
;  1854         jnz :e03tfcmbaa         -- true/false condition must be an ATOM
                jnz #0045F6E3             ;#0045F95E: 017205 7FFDFFFF            v  00 00  1 311      
;  1855 --20/7/15:
;  1856 --                              -- (Z=0, act on it)
;  1857         test eax,eax            -- (set Z to 0, and act on it)
                test eax,eax              ;#0045F964: 205300                     uv 00 01  1 312      
;  1858       @@:
;  1859         ret
                ret                       ;#0045F966: 303                        np 00 00  2 313      
;  1860 
;  1861     ::e91vhnbaavedx
;  1862         mov ecx,edx
                mov ecx,edx               ;#0045F967: 213312                     uv 02 04  1 315      
;  1863         pop edx
                pop edx                   ;#0045F969: 132                        vu 04 00  1 315      
;  1864         mov al,91       -- e91vhnbaav(ecx)
                mov al,91                 ;#0045F96A: 260 5B                     uv 01 00  1 316      
;  1865         sub edx,1
                sub edx,1                 ;#0045F96C: 203352 01                  vu 04 04  1 316      
;  1866         jmp :!iDiag
                jmp #00463E69 (:!iDiag)   ;#0045F96F: 351 F5440000               v  00 00  1 317      
;  1867         int3
                int3                      ;#0045F974: 314                        np 00 00 13 318      
;  1868 
;  1869     [64]
;  1870         --calling convention
;  1871         --  mov rax,[p1]        -- ref of p1
;  1872         --  mov rdx,p1          -- var no of p1
;  1873         --  call :%opJif
;  1874         --  jnz xxx             -- (opJif)
;  1875         --  jz xxx              -- (opJnot)
;  1876         --on exit, all regs unaltered, and the Z flag is 1 iff [p1]==0
;  1877         test rax,rax
;  1878         jz @f                   -- if Z=1, act on it (ie jnz for opJif, jz for opJnot)
;  1879         mov r15,h4
;  1880         cmp rax,r15
;  1881         jl @f                   -- (Z=0), act on it
;  1882     :!Jife92                    -- exception here mapped to e94vhnbaav(edx)
;  1883         je :e91vhnbaavedx       -- 6/9/21 (test in pDiagN.e marked as not working)
;  1884         test byte[rbx+rax*4-1],0x80
;  1885         jnz :e03tfcmbaa         -- true/false condition must be an ATOM
;  1886 --20/7/15:
;  1887 --                              -- (Z=0, act on it)
;  1888         test rax,rax            -- (set Z to 0, and act on it)
;  1889       @@:
;  1890         ret
;  1891 
;  1892     ::e91vhnbaavedx
;  1893         mov rcx,rdx
;  1894         pop rdx
;  1895         mov al,91       -- e91vhnbaav(ecx)
;  1896         sub rdx,1
;  1897         jmp :!iDiag
;  1898         int3
;  1899 
;  1900     []
;  1901 
;  1902 --DEV might yet need this...
;  1903 ----/*
;  1904 --procedure :%opSeq(:%)
;  1905 --end procedure -- (for Edita/CtrlQ)
;  1906 ----*/
;  1907 -- :%opSeq
;  1908 ----------
;  1909 --  [32]
;  1910 --  []
;  1911 
;  1912 --/*
;  1913 procedure :%opScmp(:%)
;  1914 end procedure -- (for Edita/CtrlQ)
;  1915 --*/
;  1916  :%opScmp
;  1917 ---------
;  1918     [32]
;  1919         --calling convention:
;  1920         --  lea edx,[tgt]
;  1921         --  mov edi,[p3]    (opUnassigned)
;  1922         --  mov eax,[p2]    (opUnassigned)
;  1923         --  call opSgt  [tgt] := -1/0/+1
;  1924 --/!* (25/9/17 sug) [14/10 went ahead anyway (w/o any new tests)]
;  1925         push dword[edx]
                push dword[edx]           ;#0045F975: 377062                     np 00 04  2 331      
;  1926 --*!/
;  1927         push edx
                push edx                  ;#0045F977: 122                        uv 00 04  1 333      
;  1928 --DEV 25/9/17 (spotted in passing) this will (probably) have issues for a = compare(a,b)...
;  1929 --/*
;  1930         mov edx,[edx]
;  1931         cmp edx,h4
;  1932         jle @f
;  1933             sub dword[ebx+edx*4-8],1
;  1934             jnz @f
;  1935             push edi
;  1936             push eax
;  1937             push dword[esp+12]
;  1938             call :%pDealloc0
;  1939             pop eax
;  1940             pop edi
;  1941       @@:
;  1942 --*/
;  1943         call :%opJcc
                call #0045F8B0 (:%opJcc)  ;#0045F978: 350 33FFFFFF               v  00 00  1 333      
;  1944         pop edx
                pop edx                   ;#0045F97D: 132                        uv 04 00  1 334      
;  1945         mov eax,ebx     -- 0                
                mov eax,ebx               ;#0045F97E: 213303                     vu 01 08  1 334      
;  1946         je @f
                je #0045F989              ;#0045F980: 164 07                     v  00 00  1 335      
;  1947         mov al,1        -- +1
                mov al,1                  ;#0045F982: 260 01                     uv 01 00  1 336      
;  1948         jg @f
                jg #0045F989              ;#0045F984: 177 03                     v  00 00  1 336      
;  1949         sub eax,2       -- -1
                sub eax,2                 ;#0045F986: 203350 02                  uv 01 01  1 337      
;  1950 --      mov eax,-1
;  1951       @@:
;  1952         mov [edx],eax
                mov [edx],eax             ;#0045F989: 211002                     uv 00 05  1 338 01   
;  1953 --/!* (25/9/17 sug)
;  1954         pop edx
                pop edx                   ;#0045F98B: 132                        vu 04 00  1 338      
;  1955         cmp edx,h4
                cmp edx,h4                ;#0045F98C: 201372 00000040            uv 00 04  1 339      
;  1956         jle @f
                jle #0045F99F             ;#0045F992: 176 0B                     v  00 00  1 339      
;  1957             sub dword[ebx+edx*4-8],1
                    sub dword[ebx+edx*4-8],1  ;#0045F994: 203154223 F8 01            u  00 0C  3 340      
;  1958 --          jnz @f
;  1959 --          push dword[esp+12??]    -- (next line needs careful testing!)
;  1960 --          push dword[esp]
;  1961 --          call :%pDealloc0
;  1962             jz :%pDealloc
                    jz #004639A8 (:%pDealloc)  ;#0045F999: 017204 09400000            v  00 00  1 342      
;  1963       @@:
;  1964 --*!/
;  1965         ret
                ret                       ;#0045F99F: 303                        np 00 00  2 343      
;  1966     [64]
;  1967         --calling convention:
;  1968         --  lea rdx,[tgt]
;  1969         --  mov rdi,[p3]    (opUnassigned)
;  1970         --  mov rax,[p2]    (opUnassigned)
;  1971         --  call opSgt  [tgt] := -1/0/+1
;  1972         push qword[edx]
;  1973         push rdx
;  1974 --DEV as above
;  1975 --      mov rdx,[rdx]
;  1976 --      mov r15,h4
;  1977 --      cmp rdx,r15
;  1978 --      jle @f
;  1979 --          sub qword[rbx+rdx*4-16],1
;  1980 --          jnz @f
;  1981 --          push rdi
;  1982 --          push rax
;  1983 --          push qword[rsp+24]
;  1984 --          call :%pDealloc0
;  1985 --          pop rax
;  1986 --          pop rdi
;  1987 --    @@:
;  1988 --      call :compareSeq64R
;  1989         call :%opJcc
;  1990         pop rdx
;  1991         mov rax,rbx     -- 0                
;  1992         je @f
;  1993         mov al,1        -- +1
;  1994         jg @f
;  1995         sub rax,2       -- -1
;  1996 --      mov rax,-1
;  1997       @@:
;  1998         mov [rdx],rax
;  1999         pop rdx
;  2000         cmp rdx,r15
;  2001         jle @f
;  2002             sub qword[rbx+rdx*4-16],1
;  2003             jz :%pDealloc
;  2004       @@:
;  2005         ret
;  2006     []
;  2007 
;  2008 --/*
;  2009 procedure :%opInt0(:%)
;  2010 end procedure -- (for Edita/CtrlQ)
;  2011 --*/
;  2012  :%opInt0               -- edx:=integer(eax)
;  2013 ---------
;  2014     [32]
;  2015         --calling convention:
;  2016         --  mov eax,[p1]    (opUnassigned)
;  2017         --  call :%opInt0   edx:=integer(eax)
;  2018         cmp eax,h4
                cmp eax,h4                ;#0045F9A0: 075 00000040               uv 00 01  1 345      
;  2019 --      mov edx,ebx
;  2020 --      setl dl
;  2021         jle :edxI1
                jle #0045F9AA             ;#0045F9A5: 176 03                     v  00 00  1 345      
;  2022       ::edx0
;  2023         xor edx,edx
                xor edx,edx               ;#0045F9A7: 061322                     uv 04 04  1 346      
;  2024         ret
                ret                       ;#0045F9A9: 303                        np 00 00  2 347      
;  2025       ::edxI1
;  2026         mov edx,1
                mov edx,1                 ;#0045F9AA: 272 01000000               uv 04 00  1 349      
;  2027 --      je e94vhnbaavecx
;  2028         ret
                ret                       ;#0045F9AF: 303                        np 00 00  2 350      
;  2029     [64]
;  2030         --calling convention:
;  2031         --  mov rax,[p1]    (opUnassigned)
;  2032         --  call :%opInt0   rdx:=integer(rax)
;  2033         mov r15,h4
;  2034         cmp rax,r15
;  2035         jle :rdxI1
;  2036       ::rdx0
;  2037         xor rdx,rdx
;  2038         ret
;  2039       ::rdxI1
;  2040         mov rdx,1
;  2041         ret
;  2042     []
;  2043 
;  2044 --/*
;  2045 procedure :%opAtom0(:%)
;  2046 end procedure -- (for Edita/CtrlQ)
;  2047 --*/
;  2048   :%opAtom0             -- edx:=atom(eax)
;  2049 ----------
;  2050     [32]
;  2051         cmp eax,h4
                cmp eax,h4                ;#0045F9B0: 075 00000040               uv 00 01  1 352      
;  2052         jl :edx1
                jl #0045F9BE              ;#0045F9B5: 174 07                     v  00 00  1 352      
;  2053 --  opAtom0e92:             -- exception mapped to e94vhnbaavecxfeh
;  2054         cmp byte[ebx+eax*4-1],0x12
                cmp byte[ebx+eax*4-1],#12  ;#0045F9B7: 200174203 FF 12            u  00 09  2 353      
;  2055         jne :edx0
                jne #0045F9A7             ;#0045F9BC: 165 E9                     v  00 00  1 354      
;  2056       ::edx1
;  2057         mov edx,1
                mov edx,1                 ;#0045F9BE: 272 01000000               uv 04 00  1 355      
;  2058         ret
                ret                       ;#0045F9C3: 303                        np 00 00  2 356      
;  2059     [64]
;  2060         mov r15,h4
;  2061         cmp rax,r15
;  2062         jl :rdx1
;  2063         cmp byte[rbx+rax*4-1],0x12
;  2064         jne :rdx0
;  2065       ::rdx1
;  2066         mov rdx,1
;  2067         ret
;  2068     []
;  2069 
;  2070 --/*
;  2071 procedure :%opStr0(:%)
;  2072 end procedure -- (for Edita/CtrlQ)
;  2073 --*/
;  2074   :%opStr0              -- edx=string(eax)
;  2075 ----------
;  2076     [32]
;  2077         cmp eax,h4
                cmp eax,h4                ;#0045F9C4: 075 00000040               uv 00 01  1 358      
;  2078         jl :edx0
                jl #0045F9A7              ;#0045F9C9: 174 DC                     v  00 00  1 358      
;  2079 --  opStr0e92:              -- exception mapped to e94vhnbaavecxfeh
;  2080         cmp byte[ebx+eax*4-1],0x82
                cmp byte[ebx+eax*4-1],#82  ;#0045F9CB: 200174203 FF 82            u  00 09  2 359      
;  2081         jne :edx0
                jne #0045F9A7             ;#0045F9D0: 165 D5                     v  00 00  1 360      
;  2082         mov edx,1
                mov edx,1                 ;#0045F9D2: 272 01000000               uv 04 00  1 361      
;  2083         ret
                ret                       ;#0045F9D7: 303                        np 00 00  2 362      
;  2084     [64]
;  2085         mov r15,h4
;  2086         cmp rax,r15
;  2087         jl :rdx0
;  2088         cmp byte[rbx+rax*4-1],0x82
;  2089         jne :rdx0
;  2090         mov rdx,1
;  2091         ret
;  2092     []
;  2093 
;  2094 --/*
;  2095 procedure :%opSq0(:%)
;  2096 end procedure -- (for Edita/CtrlQ)
;  2097 --*/
;  2098   :%opSq0                   -- edx=sequence(eax)  (NB: opSeq is p1=(p2=p3))
;  2099 ---------
;  2100     [32]
;  2101         cmp eax,h4
                cmp eax,h4                ;#0045F9D8: 075 00000040               uv 00 01  1 364      
;  2102         jl :edx0
                jl #0045F9A7              ;#0045F9DD: 174 C8                     v  00 00  1 364      
;  2103 --  opSq0e92:               -- exception mapped to e94vhnbaavecxfeh
;  2104         test byte[ebx+eax*4-1],0x80
                test byte[ebx+eax*4-1],#80  ;#0045F9DF: 366104203 FF 80            u  00 09  2 365      
;  2105         jz :edx0
                jz #0045F9A7              ;#0045F9E4: 164 C1                     v  00 00  1 366      
;  2106         mov edx,1
                mov edx,1                 ;#0045F9E6: 272 01000000               uv 04 00  1 367      
;  2107         ret
                ret                       ;#0045F9EB: 303                        np 00 00  2 368      
;  2108     [64]
;  2109         mov r15,h4
;  2110         cmp rax,r15
;  2111         jl :rdx0
;  2112         test byte[rbx+rax*4-1],0x80
;  2113         jz :rdx0
;  2114         mov rdx,1
;  2115         ret
;  2116     []
;  2117       }
    jmp #00462C8F (:%opRetf)              ;#0045F9EC: 351 9E320000               v  00 00  1 370      
;C:\Phix\builtins\VM\pType.e:
;============================
;     1 --
;     2 -- pType.e
;     3 -- =======
;     4 --
;     5 --  implements :%opInt, :%opAtom, :%opStr, :%opSq, and :%opObj, aka [edi]:=<type>(eax)
;     6 --
;     7 --  NB: opSeq, implemented via :%opScmp in pJcc.e, is "dest = (p1=p2)", whereas opSq as 
;     8 --      defined below is "dest = sequence(p1)", and obviously they must not be confused.
;     9 --
;    10 --  The vast majority of builtin type tests are implemented via opJtyp, which uses
;    11 --  :%opInt0/Atom0/Sq0/Str0(Obj0? DEV) as defined in pJcc.e rather than these.
;    12 --
;    13 --  If the variable is known to be assigned, and the target is an integer, pilx86.e
;    14 --  inlines these functions. In practice these routines are almost never used, however
;    15 --  they need to be part of the VM so that pDiagN.e can test exception addresses.
;    16 --
;    17 
;    18 #ilASM{ jmp :!opCallOnceYeNot
;    19 --#ilASM{ jmp :%opRetf
;    20 
;    21 --/*
;    22 procedure ::opInt(:%)
;    23 end procedure -- (for Edita/CtrlQ)
;    24 --*/
;    25     :%opInt                         -- [e/rdi] = integer(e/rax)
;    26 -----------
;    27         [32]
;    28             -- calling convention
;    29             --  lea edi,[dest]
;    30             --  mov eax,[src]       -- ref of src
;    31             --  mov ecx,src         -- var no of src
;    32             --  call opInt          -- [edi]:=integer(eax)
;    33 --          xor ebx,ebx
;    34             cmp eax,h4
;    35             mov edx,[edi]
;    36             jle :ediI1
;    37           ::edi0
;    38             mov [edi],ebx
;    39           ::opIntContinue
;    40             cmp edx,h4
;    41             jle @f
;    42                 sub dword[ebx+edx*4-8],1
;    43                 jz :%pDealloc
;    44           @@:
;    45             ret
;    46           ::ediI1
;    47             mov dword[edi],1
;    48             jne :opIntContinue          -- strongly taken (matches above ret, if that helps any?)
;    49 --;         jmp e92vhnbaavespm9
;    50 --          jmp :e94vhnbaavecx
;    51             mov esi,ecx
;    52             mov edx,[esp]
;    53             mov al,92       -- e92vhnbaav(esi)
;    54             sub edx,1
;    55             jmp :!iDiag
;    56             int3
;    57         [64]
;    58             -- calling convention
;    59             --  lea rdi,[dest]
;    60             --  mov rax,[src]       -- ref of src
;    61             --  mov rcx,src         -- var no of src
;    62             --  call opInt          -- [rdi]:=integer(rax)
;    63             mov r15,h4
;    64             mov rdx,[rdi]
;    65             cmp rax,r15
;    66             jle :ediI1
;    67           ::edi0
;    68             mov [rdi],rbx
;    69           ::opIntContinue
;    70             cmp rdx,r15
;    71             jle @f
;    72                 sub qword[rbx+rdx*4-16],1
;    73                 jz :%pDealloc
;    74           @@:
;    75             ret
;    76           ::ediI1
;    77             mov qword[rdi],1
;    78             jne :opIntContinue          -- strongly taken (matches above ret, if that helps any?)
;    79             mov rsi,rcx
;    80             mov rdx,[rsp]
;    81             mov al,92       -- e92vhnbaav(esi)
;    82             sub rdx,1
;    83             jmp :!iDiag
;    84             int3
;    85         []
;    86 
;    87 --/*
;    88 procedure ::opAtom(:%)
;    89 end procedure -- (for Edita/CtrlQ)
;    90 --*/
;    91     :%opAtom                        -- [e/rdi]=atom(e/rax)
;    92 ------------
;    93         [32]
;    94             -- calling convention
;    95             --  lea edi,[dest]
;    96             --  mov eax,[src]       -- ref of src
;    97             --  mov ecx,src         -- var no of src
;    98             --  call opAtom         -- [edi]:=atom(eax)
;    99 --          xor ebx,ebx
;   100             cmp eax,h4
;   101             mov edx,[edi]
;   102             jl :edi1
;   103           :!opAtome92                   -- exception mapped to e94vhnbaavecxfeh [DEV]
;   104             cmp byte[ebx+eax*4-1],0x12
;   105           ::opAtomContinue
;   106             jne :edi0
;   107           ::edi1
;   108             mov dword[edi],1
;   109             cmp edx,h4
;   110             jle @f
;   111                 sub dword[ebx+edx*4-8],1
;   112                 jz :%pDealloc
;   113           @@:
;   114             ret
;   115         [64]
;   116             -- calling convention
;   117             --  lea rdi,[dest]
;   118             --  mov rax,[src]       -- ref of src
;   119             --  mov rcx,src         -- var no of src
;   120             --  call opAtom         -- [rdi]:=atom(rax)
;   121             mov r15,h4
;   122             mov rdx,[rdi]
;   123             cmp rax,r15
;   124             jl :edi1
;   125           :!opAtome92                   -- exception mapped to e94vhnbaavecxfeh [DEV]
;   126             cmp byte[rbx+rax*4-1],0x12
;   127           ::opAtomContinue
;   128             jne :edi0
;   129           ::edi1
;   130             mov qword[rdi],1
;   131             cmp rdx,r15
;   132             jle @f
;   133                 sub qword[rbx+rdx*4-16],1
;   134                 jz :%pDealloc
;   135           @@:
;   136             ret
;   137         []
;   138 
;   139 --/*
;   140 procedure ::opStr(:%)
;   141 end procedure -- (for Edita/CtrlQ)
;   142 --*/
;   143     :%opStr                         -- [e/rdi]=string(e/rax)
;   144 -----------
;   145         [32]
;   146             -- calling convention
;   147             --  lea edi,[dest]
;   148             --  mov eax,[src]       -- ref of src
;   149             --  mov ecx,src         -- var no of src
;   150             --  call opStr          -- [edi]:=string(eax)
;   151 --          xor ebx,ebx
;   152             cmp eax,h4
;   153             mov edx,[edi]
;   154             jl :edi0
;   155           :!opStre92                -- exception mapped to e94vhnbaavecxfeh [DEV]
;   156             cmp byte[ebx+eax*4-1],0x82
;   157             jmp :opAtomContinue
;   158 --          jne :edi0
;   159 --          mov dword[edi],1
;   160 --          cmp edx,h4
;   161 --          jle @f
;   162 --              sub dword[ebx+edx*4-8],1
;   163 --              jz :%pDealloc
;   164 --        @@:
;   165 --          ret
;   166         [64]
;   167             -- calling convention
;   168             --  lea rdi,[dest]
;   169             --  mov rax,[src]       -- ref of src
;   170             --  mov rcx,src         -- var no of src
;   171             --  call opStr          -- [rdi]:=string(rax)
;   172             mov r15,h4
;   173             mov rdx,[rdi]
;   174             cmp rax,r15
;   175             jl :edi0
;   176           :!opStre92                -- exception mapped to e94vhnbaavecxfeh [DEV]
;   177             cmp byte[rbx+rax*4-1],0x82
;   178             jmp :opAtomContinue
;   179         []
;   180 
;   181 --/*
;   182 procedure ::opSq(:%)
;   183 end procedure -- (for Edita/CtrlQ)
;   184 --*/
;   185     :%opSq                          -- [e/rdi]=sequence(e/rax)  (NB: opSeq is dest=(p1=p2))
;   186 ----------
;   187         [32]
;   188             -- calling convention
;   189             --  lea edi,[dest]
;   190             --  mov eax,[src]       -- ref of src
;   191             --  mov ecx,src         -- var no of src
;   192             --  call opSq           -- [edi]:=sequence(eax)
;   193 --          xor ebx,ebx
;   194             cmp eax,h4
;   195             mov edx,[edi]
;   196             jl :edi0
;   197           :!opSqe92                     -- exception mapped to e94vhnbaavecxfeh [DEV]
;   198             test byte[ebx+eax*4-1],0x80
;   199             jmp :opAtomContinue
;   200 --  jz edi0
;   201 --  mov dword[edi],1
;   202 --  cmp edx,h4
;   203 --  jle @f
;   204 --      sub dword[ebx+edx*4-8],1
;   205 --      jz :%pDealloc
;   206 --  @@:
;   207 --  ret
;   208         [64]
;   209             -- calling convention
;   210             --  lea rdi,[dest]
;   211             --  mov rax,[src]       -- ref of src
;   212             --  mov rcx,src         -- var no of src
;   213             --  call opSq           -- [rdi]:=sequence(rax)
;   214             mov r15,h4
;   215             mov rdx,[rdi]
;   216             cmp rax,r15
;   217             jl :edi0
;   218           :!opSqe92                     -- exception mapped to e94vhnbaavecxfeh [DEV]
;   219             test byte[rbx+rax*4-1],0x80
;   220             jmp :opAtomContinue
;   221         []
;   222 
;   223 --/*
;   224 procedure ::opObj(:%)
;   225 end procedure -- (for Edita/CtrlQ)
;   226 --*/
;   227     :%opObj                         -- [e/rdi] = object(e/rax)
;   228 ----------
;   229         [32]
;   230             -- calling convention
;   231             --  lea edi,[dest]
;   232             --  mov eax,[src]       -- ref of src
;   233             --  (there is no need for ecx = var no of src here, no e94)
;   234             --  call opObj          -- [edi]:=object(eax)
;   235 --          xor ebx,ebx
;   236             cmp eax,h4
;   237             mov edx,[edi]
;   238         [64]
;   239             -- calling convention
;   240             --  lea rdi,[dest]
;   241             --  mov rax,[src]       -- ref of src
;   242             --  (there is no need for rcx = var no of src here, no e94)
;   243             --  call opObj          -- [rdi]:=object(rax)
;   244             mov r15,h4
;   245             mov rdx,[rdi]
;   246             cmp rax,r15
;   247         []
;   248             je :edi0
;   249             jmp :edi1
;   250     }
;C:\Phix\builtins\VM\pUnary.e: - skipped (no code entries)
;==========================================================
;C:\Phix\builtins\VM\pMath.e: - skipped (no code entries)
;=========================================================
;C:\Phix\builtins\VM\pXor.e: - skipped (no code entries)
;========================================================
;C:\Phix\builtins\VM\pLen.e: - skipped (no code entries)
;========================================================
;C:\Phix\builtins\VM\pRmdr.e: - skipped (no code entries)
;=========================================================
;C:\Phix\builtins\VM\pMem.e: - skipped (no code entries)
;========================================================
;C:\Phix\builtins\VM\pfileioN.e: - skipped (no code entries)
;============================================================
;C:\Phix\builtins\VM\pJnotx.e: - skipped (no code entries)
;==========================================================
;C:\Phix\builtins\VM\pcfunc.e: - skipped (no code entries)
;==========================================================
;C:\Phix\builtins\VM\cbhand.e: - skipped (no code entries)
;==========================================================
;C:\Phix\builtins\find.e: - skipped (no code entries)
;=====================================================
;C:\Phix\builtins\match.e: - skipped (no code entries)
;======================================================
;C:\Phix\builtins\to_int.e: - skipped (no code entries)
;=======================================================
;C:\Phix\builtins\pAlloc.e: - skipped (no code entries)
;=======================================================
;C:\Phix\builtins\VM\pFloatN.e: - skipped (no code entries)
;===========================================================
;C:\Phix\builtins\pflatten.e: - skipped (no code entries)
;=========================================================
;C:\Phix\builtins\pApply.e: - skipped (no code entries)
;=======================================================
;C:\Phix\builtins\get_routine_info.e: - skipped (no code entries)
;=================================================================
;C:\Phix\builtins\VM\prtnidN.e: - skipped (no code entries)
;===========================================================
;C:\Phix\builtins\VM\pcmdlnN.e: - skipped (no code entries)
;===========================================================
;C:\Phix\builtins\pfindall.e: - skipped (no code entries)
;=========================================================
;C:\Phix\builtins\repeat.e: - skipped (no code entries)
;=======================================================
;C:\Phix\builtins\hasdel.e: - skipped (no code entries)
;=======================================================
;C:\Phix\builtins\misc.e: - skipped (no code entries)
;=====================================================
;C:\Phix\builtins\VM\pTrig.e: - skipped (no code entries)
;=========================================================
;C:\Phix\builtins\pmaths.e: - skipped (no code entries)
;=======================================================
;C:\Phix\builtins\sort.e: - skipped (no code entries)
;=====================================================
;C:\Phix\builtins\substitute.e: - skipped (no code entries)
;===========================================================
;C:\Phix\builtins\ptagset.e: - skipped (no code entries)
;========================================================
;C:\Phix\builtins\shift_bits.e: - skipped (no code entries)
;===========================================================
;C:\Phix\builtins\psqop.e: - skipped (no code entries)
;======================================================
;C:\Phix\builtins\VM\pRand.e: - skipped (no code entries)
;=========================================================
;C:\Phix\builtins\log10.e: - skipped (no code entries)
;======================================================
;C:\Phix\builtins\ptrim.e: - skipped (no code entries)
;======================================================
;C:\Phix\builtins\psum.e: - skipped (no code entries)
;=====================================================
;C:\Phix\builtins\utfconv.e: - skipped (no code entries)
;========================================================
;C:\Phix\builtins\pCrashN.e: - skipped (no code entries)
;========================================================


; Symtab Dump.
; ============

;global constant S_Name  = 1,  -- const/var/rtn name
;                S_NTyp  = 2,  -- Const/GVar/TVar/Nspc/Type/Func/Proc
;                S_FPno  = 3,  -- File and Path number
;                S_State = 4,  -- state flag. S_fwd/S_used/S_set
;                S_Nlink = 5,  -- name chain
;                S_Slink = 6,  -- scope/secondary chain
;                -- constants and variables [S_NTyp<=S_TVar]
;                S_vtype = 7,  -- variable type or namespace fileno
;                 (plus gInfo,varno/addr/thread idx/value)
;                -- routines [S_NTyp>=S_Type]
;                S_sig   = 7,  -- routine signature
;                S_Parm1 = 8,  -- first parameter. (idx to symtab, follow S_Slink)
;                S_ParmN = 9,  -- minimum no of parameters (max is length(S_sig)-1)
;                S_Ltot  = 10, -- total no of parameters, locals, and temporary vars
;                S_il    = 11, -- intermediate code
;
symtab[1]:{integer,S_Type,0,(S_used+K_used+K_gbl),0,0,{84,1},0,1,0,#0044103A}
symtab[2]:{T_N,S_Type,0,(K_used+K_gbl),0,0,T,0,0,0,#00440FFF}
symtab[3]:{atom,S_Type,0,(S_used+K_used+K_gbl),0,0,{84,3},0,1,0,#0044103B}
symtab[4]:{T_Dsq,S_Type,0,(K_used+K_gbl),0,0,T,0,0,0,#00440FFF}
symtab[5]:{0b0101,S_Type,0,(K_used+K_gbl),0,0,T,0,0,0,#00440FFF}
symtab[6]:{0b0110,S_Type,0,(K_used+K_gbl),0,0,T,0,0,0,#00440FFF}
symtab[7]:{0b0111,S_Type,0,(K_used+K_gbl),0,0,T,0,0,0,#00440FFF}
symtab[8]:{string,S_Type,0,(S_used+K_used+K_gbl),0,0,{84,8},0,1,0,#0044103D}
symtab[9]:{0b1001,S_Type,0,(K_used+K_gbl),0,0,T,0,0,0,#00440FFF}
symtab[10]:{0b1010,S_Type,0,(K_used+K_gbl),0,0,T,0,0,0,#00440FFF}
symtab[11]:{0b1011,S_Type,0,(K_used+K_gbl),0,0,T,0,0,0,#00440FFF}
symtab[12]:{sequence,S_Type,0,(S_used+K_used+K_gbl),0,0,{84,12},0,1,0,#0044103C}
symtab[13]:{0b1101,S_Type,0,(K_used+K_gbl),0,0,T,0,0,0,#00440FFF}
symtab[14]:{0b1110,S_Type,0,(K_used+K_gbl),0,0,T,0,0,0,#00440FFF}
symtab[15]:{object,S_Type,0,(S_used+K_used+K_gbl),0,0,{84,15},0,1,0,#0044103E}
symtab[16=filepaths][1]:`C:\Phix\builtins\`
                    [2]:`C:\Phix\builtins\VM\`
                    [3]:`C:\Phix\`
                    [4]:`C:\dev\bzscript_phix\tests\`
symtab[17=filenames][1]:{4, `asm_test.ex`}
                    [2]:{2, `pDiagN.e`}
                    [3]:{2, `pprntfN.e`}
                    [4]:{2, `pPower.e`}
                    [5]:{2, `pHeap.e`}
                    [6]:{2, `pDeleteN.e`}
                    [7]:{2, `pcallfunc.e`}
                    [8]:{2, `pStack.e`}
                    [9]:{2, `pFEH.e`}
                    [10]:{2, `puts1.e`}
                    [11]:{2, `pUnassigned.e`}
                    [12]:{2, `pFPU.e`}
                    [13]:{1, `pcurrdir.e`}
                    [14]:{1, `pgetpath.e`}
                    [15]:{1, `peekstr.e`}
                    [16]:{1, `pcase.e`}
                    [17]:{1, `ppp.e`}
                    [18]:{1, `puts1h.e`}
                    [19]:{2, `pSubseN.e`}
                    [20]:{2, `pFixup.e`}
                    [21]:{2, `pSubssN.e`}
                    [22]:{2, `pRepeN.e`}
                    [23]:{2, `pRepsN.e`}
                    [24]:{2, `pMkSqN.e`}
                    [25]:{2, `pApnd.e`}
                    [26]:{2, `pJcc.e`}
                    [27]:{2, `pType.e`}
                    [28]:{2, `pUnary.e`}
                    [29]:{2, `pMath.e`}
                    [30]:{2, `pXor.e`}
                    [31]:{2, `pLen.e`}
                    [32]:{2, `pRmdr.e`}
                    [33]:{2, `pMem.e`}
                    [34]:{2, `pfileioN.e`}
                    [35]:{2, `pJnotx.e`}
                    [36]:{2, `pcfunc.e`}
                    [37]:{2, `cbhand.e`}
                    [38]:{1, `find.e`}
                    [39]:{1, `match.e`}
                    [40]:{1, `to_int.e`}
                    [41]:{1, `pAlloc.e`}
                    [42]:{2, `pFloatN.e`}
                    [43]:{1, `pflatten.e`}
                    [44]:{1, `pApply.e`}
                    [45]:{1, `get_routine_info.e`}
                    [46]:{2, `prtnidN.e`}
                    [47]:{2, `pcmdlnN.e`}
                    [48]:{1, `pfindall.e`}
                    [49]:{1, `repeat.e`}
                    [50]:{1, `hasdel.e`}
                    [51]:{1, `misc.e`}
                    [52]:{2, `pTrig.e`}
                    [53]:{1, `pmaths.e`}
                    [54]:{1, `sort.e`}
                    [55]:{1, `substitute.e`}
                    [56]:{1, `ptagset.e`}
                    [57]:{1, `shift_bits.e`}
                    [58]:{1, `psqop.e`}
                    [59]:{2, `pRand.e`}
                    [60]:{1, `log10.e`}
                    [61]:{1, `ptrim.e`}
                    [62]:{1, `psum.e`}
                    [63]:{1, `utfconv.e`}
                    [64]:{1, `pCrashN.e`}
symtab[18]:0 (T_nslink)
symtab[19]:1 (T_cmdlnflg)
symtab[20=optable][1]:#004627FE (:%puts1)
                  [2]:#00462807 (:%puts1ediesi)
                  [3]:#00462821 (:%puthex32a)
                  [4]:#0046283B (:%puthex32)
                  [5]:#00462882 (:%puthex64)
                  [6]:#004628D1 (:%putsint)
                  [7]:#00462938 (:%getc0)
                  [8]:#00463D90 (:%pCrashMsg)
                  [9]:#00463DBF (:%pCrashFile)
                  [10]:#00463DEE (:%pCrashRtn)
                  [11]:#00463E0E (:%pThrow)
                  [12]:#00463E4A (:!SetBatchMode)
                  [13]:#00463E59 (:!fatalN)
                  [14]:#00463E69 (:!iDiag)
                  [15]:#00463F51 (:!fehDiag)
                  [16]:#00000000 (:%opTrace)
                  [17]:#00000000 (:%opLnt)
                  [18]:#00000000 (:%opClrDbg)
                  [19]:#00000000 (:%opProfout)
                  [20]:#00000000 (:%opProfile)
                  [21]:#00000000 (:%opLnp)
                  [22]:#00000000 (:%opLnpt)
                  [23]:#00463030 (:%pGetTCB)
                  [24]:#0046306F (:%pGetpGtcb)
                  [25]:#00463075 (:%pNewGtcbChain)
                  [26]:#00463081 (:%pRestoreGtcbChain)
                  [27]:#0046305B (:%pSetSaveEBP)
                  [28]:#0046377D (:%pAllocStr)
                  [29]:#004637C7 (:%pWithJS)
                  [30]:#004637CD (:%pSafemode)
                  [31]:#004637D8 (:%pSafeOff)
                  [32]:#004637E3 (:%pGetSafe)
                  [33]:#004637EB (:%pSafechk)
                  [34]:#00463814 (:%pAlloClone)
                  [35]:#00463832 (:%pAllocSeq)
                  [36]:#0046387C (:%pLoadFlt)
                  [37]:#0046388C (:%pStoreFlt)
                  [38]:#00463978 (:%pStoreMint)
                  [39]:#0046393E (:%pLoadMint)
                  [40]:#004639A8 (:%pDealloc)
                  [41]:#004639AB (:%pDealloc0)
                  [42]:#004632EA (:%pGetPool)
                  [43]:#004636B8 (:%pFreePool)
                  [44]:#00463ADC (:%pAlloc)
                  [45]:#00463AFE (:%pFree)
                  [46]:#00463B38 (:%pInitCS)
                  [47]:#00463B64 (:%pDeleteCS)
                  [48]:#00463B80 (:%pEnterCS)
                  [49]:#00463BBA (:%pTryCS)
                  [50]:#00463BCE (:%pLeaveCS)
                  [51]:#00462ADA (:%pGetSymPtr)
                  [52]:#00462AE1 (:%pSetSymPtr)
                  [53]:#00462AE8 (:!opGetST)
                  [54]:#00462AEB (:%opGetST)
                  [55]:#00462B54 (:%pNewStack)
                  [56]:#00462B83 (:>initStack)
                  [57]:#00462C01 (:%opGetArgELF)
                  [58]:#00462C02 (:%opFrame)
                  [59]:#00462C50 (:%opCallOnce)
                  [60]:#00462C8F (:%opRetf)
                  [61]:#00462CCF (:%pFreeStack)
                  [62]:#00462D5E (:%opTchk)
                  [63]:#00462D8D (:%opTcFail)
                  [64]:#00462D9A (:%SetCCleanup)
                  [65]:#00462DA0 (:%RunCleanup)
                  [66]:#00462E43 (:%opAbort)
                  [67]:#0045BBD0 (:%cbhandler)
                  [68]:#0045BC40 (:!cb_ret)
                  [69]:#00462F6E (:%opDelRtn)
                  [70]:#00462FE4 (:%opDelete)
                  [71]:#00462EAE (:%opCallFunc)
                  [72]:#00462F0E (:%opCallProc)
                  [73]:#00462EF5 (:!cf_ret)
                  [74]:#0045F649 (:%opInt)
                  [75]:#0045F680 (:%opAtom)
                  [76]:#0045F6AA (:%opStr)
                  [77]:#0045F6BA (:%opSq)
                  [78]:#0045F6CA (:%opObj)
                  [79]:#00462155 (:%down53)
                  [80]:#0046215C (:%up53)
                  [81]:#00462163 (:%near53)
                  [82]:#0046216A (:%trunc53)
                  [83]:#00462171 (:%down64)
                  [84]:#00462178 (:%up64)
                  [85]:#0046217F (:%near64)
                  [86]:#00462186 (:%trunc64)
                  [87]:#0046296B (:>initFEH)
                  [88]:#00462744 (:%pUnassigned)
                  [89]:#00462756 (:%pBadRetf)
                  [90]:#00462764 (:%e01tcfAddiii)
                  [91]:#0046277D (:%e01tcfediDiv)
                  [92]:#004627AC (:%pRTErn)
                  [93]:#004627B6 (:%pDiv0)
                  [94]:#004627B6 (:%e02atdb0)
                  [95]:#004627C2 (:%e01tcfDivi2)
                  [96]:#004627D9 (:%e01tcfediMul)
                  [97]:#004627F3 (:!opCallOnceYeNot)
                  [98]:#0045F261 (:%opAdd)
                  [99]:#0045F27A (:%opAddi)
                  [100]:#0045F299 (:%opSub)
                  [101]:#0045F2B2 (:%opSubi)
                  [102]:#0045F31D (:%opDiv)
                  [103]:#0045F336 (:%opDivi)
                  [104]:#0045F39A (:%opDivf)
                  [105]:#0045F3A9 (:%opDiv2)
                  [106]:#0045F412 (:%opMul)
                  [107]:#0045F42B (:%opMuli)
                  [108]:#0045F45E (:%opAndBits)
                  [109]:#0045F491 (:%opOrBits)
                  [110]:#0045F4C4 (:%opXorBits)
                  [111]:#0045EFEC (:%opLen)
                  [112]:#00460DED (:%fixupIndex)
                  [113]:#00460E49 (:%fixupSliceStart)
                  [114]:#00460E9F (:%fixupSliceEnd)
                  [115]:#00460F1C (:%pSubse)
                  [116]:#00460FE5 (:%pSubse1)
                  [117]:#0046106B (:%pSubse1i)
                  [118]:#004610B5 (:%pSubse1ip)
                  [119]:#004610CE (:%pSubse1is)
                  [120]:#004610F5 (:%pDeSeqip2)
                  [121]:#00460A75 (:%pSubss)
                  [122]:#00460C83 (:%pSubsss)
                  [123]:#0045F8B0 (:%opJcc)
                  [124]:#0045F91F (:%opJccE)
                  [125]:#0045F94C (:%opJif)
                  [126]:#0045F975 (:%opScmp)
                  [127]:#0045F9A0 (:%opInt0)
                  [128]:#0045F9B0 (:%opAtom0)
                  [129]:#0045F9C4 (:%opStr0)
                  [130]:#0045F9D8 (:%opSq0)
                  [131]:#0045BDB3 (:%opJnotx)
                  [132]:#0045F03E (:%opXor)
                  [133]:#00463BFA (:%opPow)
                  [134]:#0045EF61 (:%opRmdr)
                  [135]:#0046068F (:%pRepe)
                  [136]:#004607F3 (:%pRepe1)
                  [137]:#00460988 (:%pRepe1ip)
                  [138]:#004609EC (:%pRepe1is)
                  [139]:#00460A46 (:%pDeSeqip)
                  [140]:#0046019E (:%pReps)
                  [141]:#0045F51F (:%opUminus)
                  [142]:#0045F561 (:%opNot)
                  [143]:#0045F594 (:%opNotBits)
                  [144]:#0045F5DE (:%opFloor)
                  [145]:#0045F9F7 (:%opApnd)
                  [146]:#0045FD65 (:%opConcat)
                  [147]:#0045FF40 (:%opCatsi)
                  [148]:#0045FF95 (:%opConcatN)
                  [149]:#0045E918 (:%opPeeki)
                  [150]:#0045E945 (:%opPeekNx)
                  [151]:#0045EC71 (:%opPokeN)
                  [152]:#0045EE1B (:%opMemCopy)
                  [153]:#0045EEAB (:%opMemSet)
                  [154]:#00460143 (:%pMkSq)
                  [155]:#0045BA8B (:%opCos)
                  [156]:#0045BA97 (:%opSin)
                  [157]:#0045BAA3 (:%opTan)
                  [158]:#0045BAB1 (:%opArcTan)
                  [159]:#0045BABF (:%opLog)
                  [160]:#0045BAD1 (:%opSqrt)
                  [161]:#0045E51D (:%opOpen)
                  [162]:#0045E5A2 (:!opClosem9)
                  [163]:#0045E5B4 (:%opClose)
                  [164]:#0045E5D7 (:%opSeek)
                  [165]:#0045E631 (:%opWhere)
                  [166]:#0045E57A (:%opFlush)
                  [167]:#0045E072 (:%opPuts)
                  [168]:#0045DB90 (:%opGetc)
                  [169]:#0045DD1D (:%opGets)
                  [170]:#0045E41B (:%opGetKey)
                  [171]:#0045E4A7 (:%opWaitKey)
                  [172]:#0045E67A (:%opLock)
                  [173]:#0045E6E1 (:%opUnLock)
                  [174]:#0045E720 (:%opGetText)
                  [175]:#0045E776 (:%opGetPos)
                  [176]:#0045E7B3 (:%opWrap)
                  [177]:#0045E7DA (:%opTextRows)
                  [178]:#0045E823 (:%opBkClr)
                  [179]:#0045E851 (:%opTxtClr)
                  [180]:#0045E87F (:%opClrScrn)
                  [181]:#0045E89A (:%opFreeCons)
                  [182]:#0045E8B5 (:%opPosition)
symtab[21]:{T_maintls,S_Proc,1,(K_wdb+K_ran),0,94,{80},0,0,0,#00441000}
symtab[22..23]:0
symtab[24]:{T_constm1,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,1/#00402014,integer,-1}
symtab[25]:{T_const0,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,2/#00402018,integer,0}
symtab[26]:{T_const1,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,3/#0040201C,integer,1}
symtab[27]:{C_BYTE,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,4/#00402020,integer,16777217}
symtab[28]:{C_UBYTE,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,5/#00402024,integer,33554433}
symtab[29]:{C_SHORT,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,6/#00402028,integer,16777218}
symtab[30]:{C_USHORT,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,7/#0040202C,integer,33554434}
symtab[31]:{C_INT,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,8/#00402030,integer,16777220}
symtab[32]:{C_UINT,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,9/#00402034,integer,33554436}
symtab[33]:{C_FLOAT,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,10/#00402038,integer,50331652}
symtab[34]:{C_DOUBLE,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,11/#0040203C,integer,50331656}
symtab[35]:{DLL_THREAD_ATTACH,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,12/#00402040,integer,2}
symtab[36]:{DLL_THREAD_DETACH,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,13/#00402044,integer,3}
symtab[37]:{NULL,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,14/#00402048,integer,0}
symtab[38]:{TRUE,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,15/#0040204C,integer,1}
symtab[39]:{FALSE,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,16/#00402050,integer,0}
symtab[40]:{WINDOWS,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,17/#00402054,integer,2}
symtab[41]:{LINUX,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,18/#00402058,integer,3}
symtab[42]:{JS,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,19/#0040205C,integer,4}
symtab[43]:{PI,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,20/#00402060,atom,3.141592654}
symtab[44]:{EULER,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,21/#00402064,atom,2.718281828}
symtab[45]:{INVLN10,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,22/#00402068,atom,0.4342944819}
symtab[46]:{D_MONTH,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,23/#0040206C,integer,5}
symtab[47]:{D_DAY,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,24/#00402070,integer,6}
symtab[48]:{D_HOUR,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,25/#00402074,integer,7}
symtab[49]:{D_SECOND,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,26/#00402078,integer,9}
symtab[50]:{LOCK_SHARED,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,27/#0040207C,integer,1}
symtab[51]:{LOCK_EXCLUSIVE,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,28/#00402080,integer,2}
symtab[52]:{SLASH,S_Const,0,(S_used+S_set+K_wdb+K_noclr+K_gbl+K_lit),0,29/#00402084,integer,92}
symtab[53]:{FILETYPE_FILE,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,30/#00402088,integer,1}
symtab[54]:{GET_IGNORE,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,31/#0040208C,integer,-2}
symtab[55]:{BRIGHT_GREEN,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,32/#00402090,integer,10}
symtab[56]:{BRIGHT_MAGENTA,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,33/#00402094,integer,13}
symtab[57]:{BRIGHT_WHITE,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,34/#00402098,integer,15}
symtab[58]:{YELLOW,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,35/#0040209C,integer,14}
symtab[59]:{pp_File,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,36/#004020A0,integer,1}
symtab[60]:{pp_Maxlen,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,37/#004020A4,integer,2}
symtab[61]:{pp_Pause,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,38/#004020A8,integer,3}
symtab[62]:{pp_StrFmt,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,39/#004020AC,integer,4}
symtab[63]:{pp_IntFmt,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,40/#004020B0,integer,5}
symtab[64]:{pp_FltFmt,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,41/#004020B4,integer,6}
symtab[65]:{pp_Nest,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,42/#004020B8,integer,7}
symtab[66]:{pp_Ascii,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,43/#004020BC,integer,8}
symtab[67]:{pp_Date,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,44/#004020C0,integer,9}
symtab[68]:{pp_Brkt,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,45/#004020C4,integer,10}
symtab[69]:{pp_Indent,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,46/#004020C8,integer,11}
symtab[70]:{pp_Q22,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,47/#004020CC,integer,12}
symtab[71]:{pp_IntCh,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,48/#004020D0,integer,13}
symtab[72]:{MB_ICONQUESTION,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,49/#004020D4,integer,32}
symtab[73]:{MB_ICONEXCLAMATION,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,50/#004020D8,integer,48}
symtab[74]:{MB_ICONINFORMATION,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,51/#004020DC,integer,64}
symtab[75]:{MB_DEFBUTTON2,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,52/#004020E0,integer,256}
symtab[76]:{MB_SYSTEMMODAL,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,53/#004020E4,integer,4096}
symtab[77]:{MB_USERICON,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,54/#004020E8,integer,128}
symtab[78]:{MB_SETFOREGROUND,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,55/#004020EC,integer,65536}
symtab[79]:{MB_TOPMOST,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,56/#004020F0,integer,262144}
symtab[80]:{SEEK_OK,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,57/#004020F4,integer,0}
symtab[81]:{GT_WHOLE_FILE,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,58/#004020F8,integer,0}
symtab[82]:{GT_LF_LEFT,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,59/#004020FC,integer,2}
symtab[83]:{INFINITE,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,60/#00402100,atom,4294967295}
symtab[84]:{CORRECT,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,61/#00402104,integer,2}
symtab[85]:{ASCENDING,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,62/#00402108,integer,-1}
symtab[86]:{E_CODE,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,63/#0040210C,integer,1}
symtab[87]:{E_ADDR,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,64/#00402110,integer,2}
symtab[88]:{E_LINE,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,65/#00402114,integer,3}
symtab[89]:{E_RTN,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,66/#00402118,integer,4}
symtab[90]:{E_NAME,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,67/#0040211C,integer,5}
symtab[91]:{E_FILE,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,68/#00402120,integer,6}
symtab[92]:{E_PATH,S_Const,0,(S_used+K_noclr+K_gbl+K_lit),0,69/#00402124,integer,7}
symtab[93]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,MININT,MAXINT,object,-1},(eax)}
symtab[94]:{bankers_rounding,S_Func,53,(K_used+K_wdb+K_gbl+K_ridt),0,96,{70,3,1},2533,1,8,#0045B827}
symtab[95]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,0,1,object,-1},(eax)}
symtab[96]:{begins,S_Func,39,(K_used+K_gbl+K_ridt),0,98,{70,15,12},2132,2,7,#0045B74E}
symtab[97]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,?,(eax)}
symtab[98]:{lambda,S_Type,27,(S_fwd+K_used+K_wdb+K_gbl),0,100,{84,15},0,1,0,#00441000}
symtab[99]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,-1,MAXLEN,object,-1},(eax)}
symtab[100]:{define_c_func,S_Func,36,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,102,{70,15,15,15,3,1},1963,4,5,#0045B65D}
symtab[101]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,-1,MAXLEN,object,-1},(eax)}
symtab[102]:{define_c_proc,S_Func,36,(K_used+K_wdb+K_gbl+K_ridt),0,104,{70,15,15,12,1},1968,3,6,#0045AD84}
symtab[103]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,0,1,object,-1},(eax)}
symtab[104]:{is_integer,S_Func,40,(K_used+K_wdb+K_gbl+K_ridt),0,106,{70,8,1},2155,1,6,#0045ACB2}
symtab[105]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,0,1,object,-1},(eax)}
symtab[106]:{islower,S_Func,16,(K_used+K_gbl+K_ridt),0,108,{70,1},893,1,3,#0045AC28}
symtab[107]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,0,1,object,-1},(eax)}
symtab[108]:{isupper,S_Func,16,(K_used+K_gbl+K_ridt),0,110,{70,1},890,1,3,#0045AB9B}
symtab[109]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,MININT,MAXINT,object,-1},(eax)}
symtab[110]:{find,S_Func,38,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,112,{70,15,12,1},2079,2,8,#0045AADB}
symtab[111]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,MININT,MAXINT,object,-1},(eax)}
symtab[112]:{rfind,S_Func,38,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,114,{70,15,12,1},2087,2,8,#0045AA22}
symtab[113]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,MININT,MAXINT,object,-1},(eax)}
symtab[114]:{match,S_Func,39,(S_used+K_used+K_gbl+K_ridt),0,116,{70,15,12,1,1},2095,2,16,#0045A5D8}
symtab[115]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,MININT,MAXINT,object,-1},(eax)}
symtab[116]:{rmatch,S_Func,39,(K_used+K_gbl+K_ridt),0,118,{70,15,12,1,1},2111,2,14,#0045A2A1}
symtab[117]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,MININT,MAXINT,object,-1},(eax)}
symtab[118]:{routine_id,S_Func,46,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,120,{70,8},2401,1,1,#0045A24A}
symtab[119]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,0,1,object,-1},(eax)}
symtab[120]:{still_has_delete_routine,S_Func,50,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,122,{70,15,1},2501,1,4,#0045A1CF}
symtab[121]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,?,(eax)}
symtab[122]:{struct,S_Type,42,(S_fwd+K_used+K_wdb+K_gbl),0,124,{84,15},0,1,0,#00441000}
symtab[123]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,MININT,MAXINT,object,-1},(eax)}
symtab[124]:{to_integer,S_Func,40,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,126,{70,8,1,1},2139,1,14,#00459ED2}
symtab[125]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[126]:{abs,S_Func,53,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,128,{70,3},2525,1,1,#00459E8C}
symtab[127]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[128]:{allocate,S_Func,41,(S_used+K_used+K_gbl+K_ridt),0,130,{70,1,1},2172,1,3,#00459DDE}
symtab[129]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[130]:{allocate_data,S_Func,41,(K_used+K_gbl+K_ridt),0,132,{70,1,1},2179,1,2,#00459D7C}
symtab[131]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[132]:{allocate_string,S_Func,41,(S_used+K_used+K_gbl+K_ridt),0,134,{70,12,1},2181,1,5,#00459CB7}
symtab[133]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[134]:{allocate_word,S_Func,41,(K_used+K_gbl+K_ridt),0,136,{70,3,1,1},2175,0,4,#00459C0D}
symtab[135]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[136]:{allocate_wstring,S_Func,41,(K_used+K_gbl+K_ridt),0,138,{70,12,1},2186,1,6,#00459B13}
symtab[137]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[138]:{arccos,S_Func,51,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,140,{70,2514},2517,1,3,#00459A72}
symtab[139]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[140]:{arcsin,S_Func,51,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,142,{70,2514},2521,1,3,#004599E2}
symtab[141]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[142]:{atan2,S_Func,53,(K_used+K_wdb+K_gbl+K_ridt),0,144,{70,3,3},2578,2,4,#00459862}
symtab[143]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[144]:{average,S_Func,62,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,146,{70,15,15},2936,1,9,#0045965E}
symtab[145]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[146]:{ceil,S_Func,53,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,148,{70,3},2541,1,3,#00459617}
symtab[147]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[148]:{c_func,S_Func,36,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,150,{70,1,12},2063,1,9,#00459422}
symtab[149]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[150]:{call_back,S_Func,36,(K_used+K_wdb+K_gbl+K_ridt),0,152,{70,15},1994,1,15,#00458CC1}
symtab[151]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[152]:{define_c_var,S_Func,36,(K_used+K_wdb+K_gbl+K_ridt),0,154,{70,3,12},1980,2,4,#00458B70}
symtab[153]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[154]:{exp,S_Func,53,(K_used+K_wdb+K_gbl+K_ridt),0,156,{70,3},2527,1,2,#00458B3C}
symtab[155]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[156]:{float32_to_atom,S_Func,42,(K_used+K_wdb+K_gbl+K_ridt),0,158,{70,12},2210,1,3,#00458A87}
symtab[157]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[158]:{float64_to_atom,S_Func,42,(K_used+K_wdb+K_gbl+K_ridt),0,160,{70,12},2213,1,3,#004589D2}
symtab[159]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[160]:{float80_to_atom,S_Func,42,(K_used+K_wdb+K_gbl+K_ridt),0,162,{70,12},2216,1,3,#00458878}
symtab[161]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[162]:{open_dll,S_Func,36,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,164,{70,12,1},1906,1,7,#0045833E}
symtab[163]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[164]:{log10,S_Func,60,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,166,{70,3},2853,1,5,#0045828A}
symtab[165]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[166]:{log2,S_Func,60,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,168,{70,3},2858,1,5,#004581D0}
symtab[167]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[168]:{median,S_Func,53,(K_used+K_wdb+K_gbl+K_ridt),0,170,{70,12},2564,1,7,#004580C3}
symtab[169]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[170]:{mod,S_Func,53,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,172,{70,3,3},2571,2,4,#00457F7F}
symtab[171]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[172]:{mulmod,S_Func,53,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,174,{70,3,3,3},2583,3,7,#00457B4D}
symtab[173]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[174]:{powmod,S_Func,53,(K_used+K_wdb+K_gbl+K_ridt),0,176,{70,3,3,3},2591,3,5,#00457984}
symtab[175]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[176]:{product,S_Func,62,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,178,{70,15,15},2927,1,9,#00457782}
symtab[177]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[178]:{round,S_Func,53,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,180,{70,3,3},2529,1,4,#004576A4}
symtab[179]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[180]:{sign,S_Func,53,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,182,{70,3},2526,1,1,#00457613}
symtab[181]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[182]:{sum,S_Func,62,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,184,{70,15,15},2918,1,9,#00457319}
symtab[183]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[184]:{trunc,S_Func,53,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,186,{70,3},2575,1,3,#004572A6}
symtab[185]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[186]:{atom_to_float32,S_Func,42,(K_used+K_wdb+K_gbl+K_ridt),0,188,{70,3},2195,1,2,#00457217}
symtab[187]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[188]:{atom_to_float64,S_Func,42,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,190,{70,3},2197,1,2,#00457188}
symtab[189]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[190]:{atom_to_float80,S_Func,42,(K_used+K_wdb+K_gbl+K_ridt),0,192,{70,3},2199,1,2,#004570DF}
symtab[191]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[192]:{current_dir,S_Func,13,(S_used+K_used+K_gbl+K_ridt),0,194,{70},843,0,5,#00456DCD}
symtab[193]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[194]:{get_proper_path,S_Func,14,(S_used+K_used+K_gbl+K_ridt),0,196,{70,12,15},810,1,17,#004562E2}
symtab[195]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[196]:{get_proper_dir,S_Func,14,(K_used+K_gbl+K_ridt),0,198,{70,8,1},831,1,6,#00456185}
symtab[197]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[198]:{canonical_path,S_Func,14,(K_used+K_gbl+K_ridt),0,200,{70,8,1,1},837,1,3,#004560E2}
symtab[199]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[200]:{join_path,S_Func,43,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,202,{70,12,1},2268,1,7,#00455EA5}
symtab[201]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[202]:{peek_string,S_Func,15,(S_used+K_used+K_gbl+K_ridt),0,204,{70,3},775,1,3,#00455E30}
symtab[203]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[204]:{proper,S_Func,16,(K_used+K_gbl+K_ridt),0,206,{70,8,8},896,1,19,#0045591A}
symtab[205]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[206]:{repeatch,S_Func,49,(S_used+K_used+K_gbl+K_ridt),0,208,{70,1,1,1},2481,2,6,#0045581E}
symtab[207]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[208]:{shorten,S_Func,61,(K_used+K_gbl+K_ridt),0,210,{70,12,8,1,8},2886,1,22,#00454F0D}
symtab[209]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[210]:{sprintf,S_Func,3,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,212,{70,12,15},738,2,2,#00454E9A}
symtab[211]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{0b1101,0,0,object,-2},(eax)}
symtab[212]:{sprint,S_Func,3,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,214,{70,15,1,1,1},753,1,13,#0045471E}
symtab[213]:{-1,S_TVar,0,(S_set+K_Fres),0,0,0b1001,{0b1001,-1,-1,integer,-2},(eax)}
symtab[214]:{utf16_to_utf8,S_Func,63,(K_used+K_wdb+K_gbl+K_ridt),0,216,{70,12},3004,1,2,#0045466E}
symtab[215]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[216]:{apply,S_Func,44,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,218,{70,15,1,15},2361,2,3,#004545AE}
symtab[217]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[218]:{command_line,S_Func,47,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,220,{70,1},2429,0,31,#00452F58}
symtab[219]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[220]:{custom_sort,S_Func,54,(S_used+K_used+K_gbl+K_ridt),0,222,{70,15,12,15,1},2618,2,18,#00452C12}
symtab[221]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[222]:{sort_columns,S_Func,54,(K_used+K_gbl+K_ridt),0,224,{70,12,12},2651,2,4,#00452ACB}
symtab[223]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,integer,-2},(eax)}
symtab[224]:{find_all,S_Func,48,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,226,{70,15,12,1},2469,2,4,#004529DB}
symtab[225]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[226]:{flatten,S_Func,43,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,228,{70,12,12},2219,1,6,#004528AD}
symtab[227]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[228]:{get_routine_info,S_Func,45,(S_used+K_used+K_gbl+K_ridt),0,230,{70,1,1},2291,1,15,#0045251C}
symtab[229]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[230]:{get_possible_constant_names,S_Func,45,(K_used+K_gbl+K_ridt),0,232,{70,15,15,1},2309,1,14,#00452147}
symtab[231]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[232]:{join,S_Func,43,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,234,{70,12,15,15,8},2226,1,12,#00451F3E}
symtab[233]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[234]:{join_by,S_Func,43,(K_used+K_wdb+K_gbl+K_ridt),0,236,{70,12,1,1,15,15,8,1},2240,3,28,#0045170F}
symtab[235]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,integer,-2},(eax)}
symtab[236]:{match_all,S_Func,39,(K_used+K_gbl+K_ridt),0,238,{70,15,12,1,1,1},2125,2,7,#00451488}
symtab[237]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,integer,-2},(eax)}
symtab[238]:{peek_wstring,S_Func,15,(K_used+K_gbl+K_ridt),0,240,{70,3},778,1,3,#004513F7}
symtab[239]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[240]:{repeat,S_Func,49,(S_used+K_used+K_gbl+K_ridt),0,242,{70,15,1,1},2488,2,12,#00451195}
symtab[241]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[242]:{reverse,S_Func,51,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,244,{70,12},2505,1,8,#00450FB8}
symtab[243]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[244]:{sort,S_Func,54,(S_used+K_used+K_gbl+K_ridt),0,246,{70,12,1},2596,1,13,#00450DFF}
symtab[245]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[246]:{substitute,S_Func,55,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,248,{70,12,15,15,1},2656,3,14,#00450B7D}
symtab[247]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[248]:{substitute_all,S_Func,55,(K_used+K_wdb+K_gbl+K_ridt),0,250,{70,12,12,12},2670,3,12,#004508B8}
symtab[249]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[250]:{tagset,S_Func,56,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,252,{70,1,1,1},2682,1,12,#00450706}
symtab[251]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[252]:{tagstart,S_Func,56,(K_used+K_wdb+K_gbl+K_ridt),0,254,{70,1,1,1},2694,2,5,#0045063F}
symtab[253]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{T_Dsq,MININT,MAXINT,integer,-2},(eax)}
symtab[254]:{utf8_to_utf16,S_Func,63,(K_used+K_wdb+K_gbl+K_ridt),0,256,{70,8},3002,1,2,#0045058F}
symtab[255]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{T_Dsq,MININT,MAXINT,integer,-2},(eax)}
symtab[256]:{utf16_to_utf32,S_Func,63,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,258,{70,12},2984,1,8,#00450408}
symtab[257]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{T_Dsq,MININT,MAXINT,integer,-2},(eax)}
symtab[258]:{utf32_to_utf16,S_Func,63,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,260,{70,12},2995,1,7,#004502E2}
symtab[259]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[260]:{ppf,S_Func,17,(K_used+K_wdb+K_gbl+K_ridt),0,262,{70,15,12},1061,1,2,#00450259}
symtab[261]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[262]:{ppExf,S_Func,17,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,264,{70,15,12},1053,2,8,#0044FFD9}
symtab[263]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[264]:{count_bits,S_Func,57,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,266,{70,15,1},2707,1,10,#0044FBF9}
symtab[265]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[266]:{deep_copy,S_Func,49,(S_used+K_used+K_gbl+K_ridt),0,268,{70,15},2473,1,8,#0044FA59}
symtab[267]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[268]:{ffree,S_Func,41,(K_used+K_gbl+K_ridt),0,270,{70,15},2168,1,4,#0044F922}
symtab[269]:{-1,S_TVar,0,(S_set+K_Fres),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,atom,2},(eax)}
symtab[270]:{get_proc_address,S_Func,36,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,272,{70,3,8},1914,2,6,#0044F7BF}
symtab[271]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[272]:{max,S_Func,53,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,274,{70,15,15},2554,2,2,#0044F78B}
symtab[273]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[274]:{maxsq,S_Func,53,(K_used+K_wdb+K_gbl+K_ridt),0,276,{70,12,1},2556,1,8,#0044F66E}
symtab[275]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[276]:{min,S_Func,53,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,278,{70,15,15},2544,2,2,#0044F63A}
symtab[277]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[278]:{minsq,S_Func,53,(K_used+K_wdb+K_gbl+K_ridt),0,280,{70,12,1},2546,1,8,#0044F51C}
symtab[279]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[280]:{upper,S_Func,16,(S_used+K_used+K_gbl+K_ridt),0,282,{70,15},878,1,6,#0044F360}
symtab[281]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[282]:{lower,S_Func,16,(S_used+K_used+K_gbl+K_ridt),0,284,{70,15},884,1,6,#0044ECDD}
symtab[283]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[284]:{shift_bits,S_Func,57,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,286,{70,15,1},2699,2,8,#0044EB08}
symtab[285]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[286]:{sq_eq,S_Func,58,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,288,{70,15,15},2768,2,2,#0044EAAA}
symtab[287]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[288]:{sq_ne,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,290,{70,15,15},2770,2,2,#0044EA4C}
symtab[289]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[290]:{sq_lt,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,292,{70,15,15},2772,2,2,#0044E9EE}
symtab[291]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[292]:{sq_le,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,294,{70,15,15},2774,2,2,#0044E990}
symtab[293]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[294]:{sq_gt,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,296,{70,15,15},2776,2,2,#0044E932}
symtab[295]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[296]:{sq_ge,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,298,{70,15,15},2778,2,2,#0044E8D4}
symtab[297]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[298]:{sq_int,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,300,{70,15},2836,1,1,#0044E88F}
symtab[299]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[300]:{sq_atom,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,302,{70,15},2837,1,1,#0044E84A}
symtab[301]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[302]:{sq_str,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,304,{70,15},2838,1,1,#0044E805}
symtab[303]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[304]:{sq_seq,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,306,{70,15},2839,1,1,#0044E7C0}
symtab[305]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[306]:{sq_abs,S_Func,58,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,308,{70,15},2812,1,1,#0044E77E}
symtab[307]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[308]:{sq_add,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,310,{70,15,15},2780,2,2,#0044E720}
symtab[309]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[310]:{sq_sub,S_Func,58,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,312,{70,15,15},2782,2,2,#0044E6C2}
symtab[311]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[312]:{sq_mul,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,314,{70,15,15},2784,2,2,#0044E664}
symtab[313]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[314]:{sq_div,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,316,{70,15,15},2786,2,2,#0044E606}
symtab[315]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[316]:{sq_floor_div,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,318,{70,15,15},2788,2,2,#0044E5A8}
symtab[317]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[318]:{sq_rmdr,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,320,{70,15,15},2790,2,2,#0044E54A}
symtab[319]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[320]:{sq_floor,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,322,{70,15},2813,1,1,#0044E508}
symtab[321]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[322]:{sq_round,S_Func,58,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,324,{70,15,15},2840,1,12,#0044E018}
symtab[323]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[324]:{sq_ceil,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,326,{70,15},2814,1,1,#0044DFD6}
symtab[325]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[326]:{sq_cmp,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,328,{70,15,15},2766,2,2,#0044DF78}
symtab[327]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[328]:{sq_odd,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,330,{70,15},2822,1,1,#0044DF36}
symtab[329]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[330]:{sq_even,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,332,{70,15},2815,1,1,#0044DEF4}
symtab[331]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[332]:{sq_sign,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,334,{70,15},2816,1,1,#0044DEB2}
symtab[333]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[334]:{sq_mod,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,336,{70,15,15},2792,2,2,#0044DE54}
symtab[335]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[336]:{sq_trunc,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,338,{70,15},2817,1,1,#0044DE12}
symtab[337]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[338]:{sq_and,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,340,{70,15,15},2794,2,2,#0044DDB4}
symtab[339]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[340]:{sq_or,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,342,{70,15,15},2796,2,2,#0044DD56}
symtab[341]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[342]:{sq_xor,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,344,{70,15,15},2798,2,2,#0044DCF8}
symtab[343]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[344]:{sq_rand,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,346,{70,15},2818,1,1,#0044DCB6}
symtab[345]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[346]:{sq_uminus,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,348,{70,15},2819,1,1,#0044DC74}
symtab[347]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[348]:{sq_not,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,350,{70,15},2820,1,1,#0044DC32}
symtab[349]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[350]:{sq_and_bits,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,352,{70,15,15},2800,2,2,#0044DBD4}
symtab[351]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[352]:{sq_or_bits,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,354,{70,15,15},2802,2,2,#0044DB76}
symtab[353]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[354]:{sq_xor_bits,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,356,{70,15,15},2804,2,2,#0044DB18}
symtab[355]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[356]:{sq_not_bits,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,358,{70,15},2821,1,1,#0044DAD6}
symtab[357]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[358]:{sq_cos,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,360,{70,15},2823,1,1,#0044DA94}
symtab[359]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[360]:{sq_sin,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,362,{70,15},2824,1,1,#0044DA52}
symtab[361]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[362]:{sq_tan,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,364,{70,15},2825,1,1,#0044DA10}
symtab[363]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[364]:{sq_arccos,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,366,{70,15},2826,1,1,#0044D9CE}
symtab[365]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[366]:{sq_arcsin,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,368,{70,15},2827,1,1,#0044D98C}
symtab[367]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[368]:{sq_arctan,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,370,{70,15},2828,1,1,#0044D94A}
symtab[369]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[370]:{sq_log,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,372,{70,15},2832,1,1,#0044D908}
symtab[371]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[372]:{sq_log10,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,374,{70,15},2833,1,1,#0044D8C6}
symtab[373]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[374]:{sq_log2,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,376,{70,15},2834,1,1,#0044D884}
symtab[375]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[376]:{sq_power,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,378,{70,15,15},2806,2,2,#0044D826}
symtab[377]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[378]:{sq_sqrt,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,380,{70,15},2835,1,1,#0044D7E4}
symtab[379]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[380]:{sq_min,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,382,{70,15,15},2810,2,2,#0044D786}
symtab[381]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[382]:{sq_max,S_Func,58,(K_used+K_wdb+K_gbl+K_ridt),0,384,{70,15,15},2808,2,2,#0044CC73}
symtab[383]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[384]:{trim,S_Func,61,(S_used+K_used+K_gbl+K_ridt),0,386,{70,15,15,1},2865,1,8,#0044C995}
symtab[385]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[386]:{trim_head,S_Func,61,(S_used+K_used+K_gbl+K_ridt),0,388,{70,15,15,1},2873,1,5,#0044C87E}
symtab[387]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[388]:{trim_tail,S_Func,61,(K_used+K_gbl+K_ridt),0,390,{70,15,15,1},2878,1,7,#0044C6FF}
symtab[389]:{-1,S_TVar,0,(S_set+K_Fres),0,0,0b1101,{0b1101,-1,-1,integer,-2},(eax)}
symtab[390]:{utf8_to_utf32,S_Func,63,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,392,{70,8,1},2946,1,15,#0044C195}
symtab[391]:{-1,S_TVar,0,(S_set+K_Fres),0,0,0b1001,{0b1101,-1,-1,object,-2},(eax)}
symtab[392]:{utf32_to_utf8,S_Func,63,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,393,{70,12,1},2970,1,12,#0044BEA4}
symtab[393]:{assert,S_Proc,64,(S_used+K_used+K_gbl+K_ridt),0,394,{80,1,8,15,1},3010,1,8,#0044BD38}
symtab[394]:{asserteq,S_Proc,64,(K_used+K_gbl+K_ridt),0,395,{80,15,15,8,15,1},3020,2,16,#0044B829}
symtab[395]:{c_proc,S_Proc,36,(K_used+K_wdb+K_gbl+K_ridt),0,396,{80,1,12},2072,1,7,#0044AD12}
symtab[396]:{call,S_Proc,36,(K_used+K_wdb+K_gbl+K_ridt),0,397,{80,3},2009,1,2,#0044ACC6}
symtab[397]:{crash,S_Proc,64,(S_used+K_used+K_gbl+K_ridt),0,398,{80,8,15,1},3006,1,4,#0044AB92}
symtab[398]:{free,S_Proc,41,(S_used+K_used+K_gbl+K_ridt),0,399,{80,15},2161,1,6,#0044AA40}
symtab[399]:{papply,S_Proc,44,(K_used+K_wdb+K_gbl+K_ridt),0,400,{80,15,1,15},2364,2,3,#0044A03A}
symtab[400]:{printf,S_Proc,3,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,401,{80,1,12,15},741,2,9,#00444FC4}
symtab[401]:{print,S_Proc,3,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,402,{80,1,15,1,1},770,2,5,#00444EF7}
symtab[402]:{pp,S_Proc,17,(K_used+K_wdb+K_gbl+K_ridt),0,403,{80,15,12},1051,1,2,#00444E70}
symtab[403]:{ppOpt,S_Proc,17,(K_used+K_wdb+K_gbl+K_ridt),0,404,{80,12},1044,1,1,#00444DF8}
symtab[404]:{ppEx,S_Proc,17,(S_used+K_used+K_wdb+K_gbl+K_ridt),0,405,{80,15,12},1049,2,2,#00442143}
symtab[405]:{<tls>,S_Proc,2,(S_used+K_used+K_wdb),0,409,{80},0,0,0,#00463D68}
symtab[406]:{diagdiag,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),0,70/#00402128,integer,0}
symtab[407]:{show_bad_era,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),0,71/#0040212C,integer,1}
symtab[408]:{show_low_level_diagnostics,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),0,72/#00402130,integer,0}
symtab[409]:{<tls>,S_Proc,4,(S_used+K_used+K_wdb),0,410,{80},0,0,0,#00463BF3}
symtab[410]:{<tls>,S_Proc,5,(S_used+K_used+K_wdb),0,411,{80},0,0,0,#00463014}
symtab[411]:{<tls>,S_Proc,6,(S_used+K_used+K_wdb),0,412,{80},0,0,0,#00462F69}
symtab[412]:{<tls>,S_Proc,7,(S_used+K_used+K_wdb),0,413,{80},0,0,0,#00462EA9}
symtab[413]:{<tls>,S_Proc,8,(S_used+K_used+K_wdb),0,414,{80},0,0,0,#00462AD5}
symtab[414]:{<tls>,S_Proc,9,(S_used+K_used+K_wdb),0,415,{80},0,0,0,#00462966}
symtab[415]:{<tls>,S_Proc,10,(S_used+K_used+K_wdb),0,416,{80},0,0,0,#004627F9}
symtab[416]:{<tls>,S_Proc,11,(S_used+K_used+K_wdb),0,441,{80},0,0,0,#0046273F}
symtab[417]:{ecode,S_Const,9,(S_used+S_set+K_noclr+K_lit),0,73/#00402134,string,`exception code #`}
symtab[418]:{sigsegv,S_Const,9,(S_used+S_set+K_noclr+K_lit),0,74/#00402138,string,`SIGSEGV`}
symtab[419]:{eat,S_Const,9,(S_used+S_set+K_noclr+K_lit),0,75/#0040213C,string,` at #`}
symtab[420]:{eaxis,S_Const,9,(S_used+S_set+K_noclr+K_lit),0,76/#00402140,string,`eax: `}
symtab[421]:{ebxis,S_Const,9,(S_used+S_set+K_noclr+K_lit),0,77/#00402144,string,`ebx: `}
symtab[422]:{ecxis,S_Const,9,(S_used+S_set+K_noclr+K_lit),0,78/#00402148,string,`ecx: `}
symtab[423]:{edxis,S_Const,9,(S_used+S_set+K_noclr+K_lit),0,79/#0040214C,string,`edx: `}
symtab[424]:{esiis,S_Const,9,(S_used+S_set+K_noclr+K_lit),0,80/#00402150,string,`esi: `}
symtab[425]:{ediis,S_Const,9,(S_used+S_set+K_noclr+K_lit),0,81/#00402154,string,`edi: `}
symtab[426]:{r10is,S_Const,9,(S_used+S_set+K_noclr+K_lit),0,82/#00402158,string,`r10: `}
symtab[427]:{r11is,S_Const,9,(S_used+S_set+K_noclr+K_lit),0,83/#0040215C,string,`r11: `}
symtab[428]:{r15is,S_Const,9,(S_used+S_set+K_noclr+K_lit),0,84/#00402160,string,`r15: `}
symtab[429]:{finit,S_GVar,9,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,85/#00402164,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[430]:{sinit,S_GVar,8,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,86/#00402168,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[431]:{pArg,S_GVar,8,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,87/#0040216C,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[432]:{nocleanup,S_GVar,8,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,88/#00402170,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[433]:{CClean,S_GVar,8,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,89/#00402174,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[434]:{oom,S_Const,8,(S_used+S_set+K_noclr+K_lit),0,90/#00402178,string,"Your program has run out of memory, one moment please\n"}
symtab[435]:{e71cfppe,S_Const,7,(S_used+S_set+K_noclr+K_lit),0,91/#0040217C,integer,71}
symtab[436]:{e72iri,S_Const,7,(S_used+S_set+K_noclr+K_lit),0,92/#00402180,integer,72}
symtab[437]:{e81ipicfp,S_Const,7,(S_used+S_set+K_noclr+K_lit),0,93/#00402184,integer,81}
symtab[438]:{e89tmpicfp,S_Const,7,(S_used+S_set+K_noclr+K_lit),0,94/#00402188,integer,89}
symtab[439]:{e117rdnrav,S_Const,7,(S_used+S_set+K_noclr+K_lit),0,95/#0040218C,integer,117}
symtab[440]:{e118rrav,S_Const,7,(S_used+S_set+K_noclr+K_lit),0,96/#00402190,integer,118}
symtab[441]:{fatalN,S_Proc,7,(S_used+K_used+K_wdb),0,455,{80,1,1,1,1},442,2,4,#004626EA}
symtab[442]:{level,S_TVar,7,(S_used+S_set+K_used+K_wdb+K_othr),0,443,integer,{integer,2,2,object,-1},[esp]}
symtab[443]:{errcode,S_TVar,7,(S_used+S_set+K_used+K_wdb+K_othr),0,444,integer,{integer,71,118,object,-1},[esp-4]}
symtab[444]:{ep1,S_TVar,7,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,445,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[445]:{ep2,S_TVar,7,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,0,integer,{integer,0,0,object,-1},[esp-12]}
symtab[446]:{S_NTyp,S_Const,7,(S_used+S_set+K_wdb+K_noclr+K_lit),0,97/#00402194,integer,2}
symtab[447]:{S_sig,S_Const,7,(S_used+S_set+K_wdb+K_noclr+K_lit),0,98/#00402198,integer,7}
symtab[448]:{S_ParmN,S_Const,7,(S_used+S_set+K_wdb+K_noclr+K_lit),0,99/#0040219C,integer,9}
symtab[449]:{S_Ltot,S_Const,7,(S_used+S_set+K_wdb+K_noclr+K_lit),0,100/#004021A0,integer,10}
symtab[450]:{S_il,S_Const,7,(S_used+S_set+K_wdb+K_noclr+K_lit),0,101/#004021A4,integer,11}
symtab[451]:{S_Type,S_Const,7,(S_used+S_set+K_wdb+K_noclr+K_lit),0,102/#004021A8,integer,6}
symtab[452]:{S_Proc,S_Const,7,(S_used+S_set+K_wdb+K_noclr+K_lit),0,103/#004021AC,integer,8}
symtab[453]:{T_const1,S_Const,7,(S_used+S_set+K_noclr+K_lit),0,104/#004021B0,integer,26}
symtab[454]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[455]:{call_common,S_Func,7,(S_used+K_used+K_wdb+K_ridt),0,471,{70,15,15,1},456,3,14,#0046220A}
symtab[456]:{rid,S_TVar,7,(S_used+S_set+K_used+K_wdb+K_othr),0,457,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[457]:{params,S_TVar,7,(S_used+S_set+K_used+K_wdb+K_othr),0,458,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[458]:{isProc,S_TVar,7,(S_used+S_set+K_used+K_wdb+K_othr+K_asmm),0,459,integer,{atom,MININT,MAXINT,object,-2},[esp-8]}
symtab[459]:{symtab,S_TVar,7,(S_used+S_set+K_wdb+K_asmm),0,460,object,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[460]:{si,S_TVar,7,(S_used+S_set+K_wdb),0,461,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[461]:{sNtyp,S_TVar,7,(S_used+S_set+K_wdb),0,462,integer,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[462]:{minparams,S_TVar,7,(S_used+S_set+K_wdb),0,463,integer,{object,MININT,MAXINT,object,-2},[esp-24]}
symtab[463]:{maxparams,S_TVar,7,(S_used+S_set+K_wdb),0,464,integer,{integer,-1,805306367,object,-1},[esp-28]}
symtab[464]:{noofparams,S_TVar,7,(S_used+S_set+K_wdb),0,465,integer,{integer,0,MAXLEN,object,-1},[esp-32]}
symtab[465]:{nooflocals,S_TVar,7,(S_used+S_set+K_wdb),0,466,integer,{object,MININT,MAXINT,object,-2},[esp-36]}
symtab[466]:{si_il,S_TVar,7,(S_used+S_set+K_wdb),0,467,integer,{object,MININT,MAXINT,object,-2},[esp-40]}
symtab[467]:{res,S_TVar,7,(S_used+S_set+K_wdb+K_asmm),0,468,object,{object,MININT,MAXINT,object,-2},[esp-44]}
symtab[468]:{-1,S_TVar,0,(S_set),0,470,integer,{integer,0,MAXLEN,object,-1},[esp-48]}
symtab[469]:{-1,S_Const,7,(S_used+S_set+K_noclr+K_lit),0,105/#004021B4,integer,-8}
symtab[470]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-52]}
symtab[471]:{fdelete,S_Proc,6,(S_used+K_used+K_wdb+K_ridt),0,485,{80,15},472,1,3,#00462192}
symtab[472]:{o,S_TVar,6,(S_used+S_set+K_used+K_wdb+K_othr),0,473,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[473]:{rid,S_TVar,6,(S_used+S_set+K_wdb+K_asmm),456,474,integer,{atom,MININT,MAXINT,object,-2},[esp-4]}
symtab[474]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,object,1},[esp-8]}
symtab[475]:{pGtcb,S_GVar,5,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,106/#004021B8,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[476]:{stdcs,S_GVar,5,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,107/#004021BC,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[477]:{M_MMAP_THRESHOLD,S_Const,5,(S_used+S_set+K_wdb+K_noclr+K_lit),0,108/#004021C0,integer,-3}
symtab[478]:{mmap_threshold,S_GVar,5,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,109/#004021C4,integer,{atom,MININT,MAXINT,object,-2},131072}
symtab[479]:{O_APPEND,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,110/#004021C8,integer,1024}
symtab[480]:{memory_corruption,S_Const,5,(S_used+S_set+K_noclr+K_lit),0,111/#004021CC,string,`memory corruption at #`}
symtab[481]:{pGtcb4eq,S_Const,5,(S_used+S_set+K_noclr+K_lit),0,112/#004021D0,string,`, pGtcb*4=#`}
symtab[482]:{diffis,S_Const,5,(S_used+S_set+K_noclr+K_lit),0,113/#004021D4,string,`, diff=`}
symtab[483]:{withjs,S_GVar,5,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,114/#004021D8,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[484]:{safemode,S_GVar,5,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,115/#004021DC,integer,{atom,MININT,MAXINT,object,-2},1}
symtab[485]:{<tls>,S_Proc,12,(S_used+K_used+K_wdb),0,495,{80},0,0,0,#004620E3}
symtab[486]:{near53,S_GVar,12,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,116/#004021E0,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[487]:{down53,S_GVar,12,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,117/#004021E4,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[488]:{trunc53,S_GVar,12,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,118/#004021E8,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[489]:{up53,S_GVar,12,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,119/#004021EC,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[490]:{near64,S_GVar,12,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,120/#004021F0,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[491]:{down64,S_GVar,12,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,121/#004021F4,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[492]:{trunc64,S_GVar,12,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,122/#004021F8,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[493]:{up64,S_GVar,12,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,123/#004021FC,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[494]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[495]:{round_str,S_Func,3,(S_used+K_used+K_wdb),0,524,{70,8,3,1,1,1},496,5,16,#00449366}
symtab[496]:{result,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),0,497,string,{sequence,MININT,MAXINT,integer,-2},[esp]}
symtab[497]:{f,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),0,498,atom,{atom,MININT,MAXINT,object,-1},[esp-4]}
symtab[498]:{exponent,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),0,499,integer,{integer,MININT,MAXINT,object,-1},[esp-8]}
symtab[499]:{charflag,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),0,500,integer,{integer,MININT,MAXINT,object,-1},[esp-12]}
symtab[500]:{digit,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),0,501,integer,{integer,MININT,MAXINT,object,-1},[esp-16]}
symtab[501]:{tmp,S_TVar,3,(S_used+S_set+K_wdb),0,502,integer,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[502]:{dot,S_TVar,3,(S_used+S_set+K_wdb),0,503,integer,{integer,MININT,MAXINT,object,-1},[esp-24]}
symtab[503]:{dotm1,S_TVar,3,(S_used+S_set+K_wdb),0,504,integer,{atom,MININT,MAXINT,object,-1},[esp-28]}
symtab[504]:{one,S_TVar,3,(S_used+S_set+K_wdb),0,505,integer,{integer,1,2,object,-1},[esp-32]}
symtab[505]:{-1,S_TVar,0,(S_set),0,507,integer,{integer,0,MAXLEN,object,-1},[esp-36]}
symtab[506]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,124/#00402200,string,`-+`}
symtab[507]:{-1,S_TVar,0,(S_set),0,508,object,{integer,1,2,object,-1},[esp-40]}
symtab[508]:{-1,S_TVar,0,(S_set),0,509,atom,{atom,MININT,MAXINT,object,-1},[esp-44]}
symtab[509]:{-1,S_TVar,0,(S_set),0,510,integer,{integer,1,2,object,-1},[esp-48]}
symtab[510]:{i,S_TVar,3,(S_used+S_set+S_for+K_wdb),0,515,integer,{integer,0,MAXLEN,object,-1},[esp-52]}
symtab[511]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,125/#00402204,integer,57}
symtab[512]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,126/#00402208,integer,46}
symtab[513]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,127/#0040220C,integer,49}
symtab[514]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,128/#00402210,integer,45}
symtab[515]:{-1,S_TVar,0,(S_set),0,517,string,{string,MININT,MAXINT,integer,-2},[esp-56]}
symtab[516]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,129/#00402214,integer,102}
symtab[517]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,255,object,-1},[esp-60]}
symtab[518]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,130/#00402218,integer,33}
symtab[519]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,131/#0040221C,integer,103}
symtab[520]:{init2,S_GVar,3,(S_used+S_set+K_wdb+K_noclr),0,132/#00402220,integer,{integer,0,1,object,-1},0}
symtab[521]:{inf,S_GVar,3,(S_used+S_set+K_wdb+K_asmm),0,133/#00402224,atom,{atom,MININT,MAXINT,object,-2},0}
symtab[522]:{nan,S_GVar,3,(S_used+S_set+K_wdb),0,134/#00402228,atom,{atom,MININT,MAXINT,object,-1},0}
symtab[523]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[524]:{Nan,S_Func,3,(S_used+K_used+K_wdb),0,529,{70},525,0,1,#00449E7F}
symtab[525]:{res,S_TVar,3,(S_used+S_set+K_wdb),467,0,string,{string,MININT,MAXINT,integer,-2},[esp]}
symtab[526]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,135/#0040222C,integer,110}
symtab[527]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,136/#00402230,integer,97}
symtab[528]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[529]:{Inf,S_Func,3,(S_used+K_used+K_wdb),0,533,{70},530,0,1,#00449E1F}
symtab[530]:{res,S_TVar,3,(S_used+S_set+K_wdb),525,0,string,{string,MININT,MAXINT,integer,-2},[esp]}
symtab[531]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,137/#00402234,integer,105}
symtab[532]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[533]:{sprintf2,S_Func,3,(S_used+K_used+K_wdb),0,572,{70,3,1,1,1,1},534,5,31,#00448102}
symtab[534]:{pf,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),0,535,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[535]:{charflag,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),499,536,integer,{atom,MININT,MAXINT,object,-1},[esp-4]}
symtab[536]:{showplus,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),0,537,integer,{integer,0,43,object,-1},[esp-8]}
symtab[537]:{minfieldwidth,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),0,538,integer,{integer,MININT,MAXINT,object,-1},[esp-12]}
symtab[538]:{precision,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),0,539,integer,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[539]:{dotdone,S_TVar,3,(S_used+S_set+K_wdb),0,540,integer,{integer,0,1,object,-1},[esp-20]}
symtab[540]:{nzdigitprinted,S_TVar,3,(S_used+S_set+K_wdb),0,541,integer,{integer,0,1,object,-1},[esp-24]}
symtab[541]:{reve,S_TVar,3,(S_used+S_set+K_wdb),0,542,string,{sequence,MININT,MAXINT,atom,-2},[esp-28]}
symtab[542]:{revelen,S_TVar,3,(S_used+S_set+K_wdb),0,543,integer,{atom,MININT,MAXINT,object,-1},[esp-32]}
symtab[543]:{expadj,S_TVar,3,(S_used+S_set+K_wdb),0,544,integer,{atom,MININT,MAXINT,object,-1},[esp-36]}
symtab[544]:{capE,S_TVar,3,(S_used+S_set+K_wdb),0,545,integer,{integer,69,101,object,-1},[esp-40]}
symtab[545]:{ewk,S_TVar,3,(S_used+S_set+K_wdb),0,546,integer,{atom,MININT,MAXINT,object,-1},[esp-44]}
symtab[546]:{tmp,S_TVar,3,(S_used+S_set+K_wdb),501,547,integer,{integer,0,255,object,-1},[esp-48]}
symtab[547]:{digit,S_TVar,3,(S_used+S_set+K_wdb),500,548,integer,{atom,MININT,MAXINT,object,-1},[esp-52]}
symtab[548]:{f,S_TVar,3,(S_used+S_set+K_wdb),497,549,atom,{atom,MININT,MAXINT,object,-1},[esp-56]}
symtab[549]:{fwk,S_TVar,3,(S_used+S_set+K_wdb),0,550,atom,{atom,MININT,MAXINT,object,-1},[esp-60]}
symtab[550]:{epwr,S_TVar,3,(S_used+S_set+K_wdb),0,551,atom,{atom,MININT,MAXINT,object,-1},[esp-64]}
symtab[551]:{result,S_TVar,3,(S_used+S_set+K_wdb),496,552,string,{sequence,MININT,MAXINT,object,-2},[esp-68]}
symtab[552]:{exponent,S_TVar,3,(S_used+S_set+K_wdb),498,553,integer,{atom,MININT,MAXINT,object,-1},[esp-72]}
symtab[553]:{k,S_TVar,3,(S_used+S_set+K_wdb),0,554,integer,{integer,MININT,MAXINT,object,-1},[esp-76]}
symtab[554]:{-1,S_TVar,0,(S_set),555,555,string,{string,MININT,MAXINT,integer,-2},[esp-80]}
symtab[555]:{-1,S_TVar,0,(S_set),0,558,string,{string,MININT,MAXINT,integer,-2},[esp-84]}
symtab[556]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,138/#00402238,integer,101}
symtab[557]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,139/#0040223C,integer,69}
symtab[558]:{-1,S_TVar,0,(S_set),0,559,integer,{integer,MININT,MAXINT,object,-1},[esp-88]}
symtab[559]:{i,S_TVar,3,(S_used+S_set+S_for+K_wdb),510,560,integer,{atom,MININT,MAXINT,object,-1},[esp-92]}
symtab[560]:{-1,S_TVar,0,(S_set),0,561,atom,{atom,MININT,MAXINT,object,-1},[esp-96]}
symtab[561]:{-1,S_TVar,0,(S_set),0,562,integer,{integer,0,MAXLEN,object,-1},[esp-100]}
symtab[562]:{-1,S_TVar,0,(S_set),564,564,atom,{atom,MININT,MAXINT,object,-1},[esp-104]}
symtab[563]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,140/#00402240,integer,43}
symtab[564]:{-1,S_TVar,0,(S_set),0,565,atom,{atom,MININT,MAXINT,object,-1},[esp-108]}
symtab[565]:{-1,S_TVar,0,(S_set),0,566,integer,{integer,0,MAXLEN,object,-1},[esp-112]}
symtab[566]:{j,S_TVar,3,(S_used+S_set+S_for+K_wdb),0,568,integer,{integer,MININT,MAXINT,object,-1},[esp-116]}
symtab[567]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,141/#00402244,string,`-+ `}
symtab[568]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,MININT,MAXINT,object,-1},[esp-120]}
symtab[569]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,142/#00402248,string,`-0`}
symtab[570]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,143/#0040224C,string,`-`}
symtab[571]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,144/#00402250,string,`0`}
symtab[572]:{ueofmt,S_Proc,3,(S_used+K_used+K_wdb),0,576,{80},574,0,1,#00449ECA}
symtab[573]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,145/#00402254,string,`unexpected end of format string`}
symtab[574]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,object,0},[esp]}
symtab[575]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,0,1,object,-1},(eax)}
symtab[576]:{useFlatString,S_Func,3,(S_used+K_used+K_wdb),0,592,{70,12,1,12,1},577,4,10,#00449CB0}
symtab[577]:{args,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),0,578,sequence,{sequence,MININT,MAXINT,object,-2},[esp]}
symtab[578]:{nxt,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),0,579,integer,{integer,MININT,MAXINT,object,-1},[esp-4]}
symtab[579]:{fmt,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),0,580,sequence,{sequence,MININT,MAXINT,object,-2},[esp-8]}
symtab[580]:{i,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),559,581,integer,{integer,MININT,MAXINT,object,-1},[esp-12]}
symtab[581]:{o,S_TVar,3,(S_used+S_set+K_wdb),472,582,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[582]:{-1,S_TVar,0,(S_set),0,583,atom,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[583]:{-1,S_TVar,0,(S_set),0,584,integer,{integer,0,MAXLEN,object,-1},[esp-24]}
symtab[584]:{j,S_TVar,3,(S_used+S_set+S_for+K_wdb),566,586,integer,{atom,MININT,MAXINT,object,-1},[esp-28]}
symtab[585]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,146/#00402258,integer,37}
symtab[586]:{-1,S_TVar,0,(S_set),0,587,object,{object,MININT,MAXINT,object,-2},[esp-32]}
symtab[587]:{-1,S_TVar,0,(S_set),0,0,integer,{atom,MININT,MAXINT,object,-1},[esp-36]}
symtab[588]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,147/#0040225C,integer,255}
symtab[589]:{prefer_backtick,S_GVar,3,(S_used+S_set+K_wdb+K_noclr),0,148/#00402260,integer,{object,MININT,MAXINT,object,-2},0}
symtab[590]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,149/#00402264,integer,113}
symtab[591]:{-1,S_TVar,0,(S_set+K_Fres),0,0,0b1001,{0b1001,0,0,integer,-2},(eax)}
symtab[592]:{allascii,S_Func,3,(S_used+K_used+K_wdb),0,616,{70,8,1},593,1,12,#00449755}
symtab[593]:{x,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),1622,594,string,{object,MININT,MAXINT,object,-2},[esp]}
symtab[594]:{enquote,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,595,integer,{integer,MININT,MAXINT,object,-1},[esp-4]}
symtab[595]:{c,S_TVar,3,(S_used+S_set+K_wdb),0,596,integer,{integer,0,255,object,-1},[esp-8]}
symtab[596]:{backtick,S_TVar,3,(S_used+S_set+K_wdb),0,597,integer,{integer,0,1,object,-1},[esp-12]}
symtab[597]:{bsi,S_TVar,3,(S_used+S_set+K_wdb),0,598,sequence,{sequence,MININT,MAXINT,object,-2},[esp-16]}
symtab[598]:{-1,S_TVar,0,(S_set),0,599,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[599]:{i,S_TVar,3,(S_used+S_set+S_for+K_wdb),580,603,integer,{integer,0,MAXLEN,object,-1},[esp-24]}
symtab[600]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,150/#00402268,integer,92}
symtab[601]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,151/#0040226C,integer,34}
symtab[602]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,152/#00402270,integer,39}
symtab[603]:{-1,S_TVar,0,(S_set),0,607,sequence,{T_Dsq,MININT,MAXINT,object,-2},[esp-28]}
symtab[604]:{e116rrnp,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,153/#00402274,integer,116}
symtab[605]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,154/#00402278,integer,114}
symtab[606]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,155/#0040227C,integer,27}
symtab[607]:{-1,S_TVar,0,(S_set),0,608,integer,{integer,0,MAXLEN,object,-1},[esp-32]}
symtab[608]:{j,S_TVar,3,(S_used+S_set+S_for+K_wdb),584,609,integer,{integer,0,MAXLEN,object,-1},[esp-36]}
symtab[609]:{k,S_TVar,3,(S_used+S_set+K_wdb),553,610,integer,{integer,MININT,MAXINT,object,-1},[esp-40]}
symtab[610]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,MAXLEN,object,-1},[esp-44]}
symtab[611]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,156/#00402280,integer,96}
symtab[612]:{hexchar,S_GVar,3,(S_used+S_set+K_wdb),0,157/#00402284,string,{string,MININT,MAXINT,integer,62},0}
symtab[613]:{dxoetc,S_GVar,3,(S_used+S_set+K_wdb),0,158/#00402288,string,{string,MININT,MAXINT,integer,17},0}
symtab[614]:{bases,S_GVar,3,(S_used+S_set+K_wdb),0,159/#0040228C,sequence,{T_Dsq,MININT,MAXINT,integer,4},0}
symtab[615]:{unicode_align,S_GVar,3,(S_used+S_set+K_wdb+K_noclr),0,160/#00402290,integer,{object,MININT,MAXINT,object,-2},0}
symtab[616]:{init_2,S_Proc,3,(S_used+K_used+K_wdb),0,621,{80},617,0,1,#00449F33}
symtab[617]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp]}
symtab[618]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,161/#00402294,string,`0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`}
symtab[619]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,162/#00402298,string,`dxobstncvVRefgEXG`}
symtab[620]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[621]:{toRoman,S_Func,3,(S_used+K_used+K_wdb),0,641,{70,1,1},622,2,11,#00449A1C}
symtab[622]:{n,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),0,623,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[623]:{lowercase,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),0,625,integer,{integer,0,1,object,-1},[esp-4]}
symtab[624]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,163/#0040229C,integer,3999}
symtab[625]:{-1,S_TVar,0,(S_set),0,627,integer,{integer,0,1,object,-1},[esp-8]}
symtab[626]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,164/#004022A0,string,`roman numerals must be 1..3999`}
symtab[627]:{res,S_TVar,3,(S_used+S_set+K_wdb),530,629,string,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[628]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,165/#004022A4,string,``}
symtab[629]:{idx,S_TVar,3,(S_used+S_set+K_wdb),0,630,integer,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[630]:{rn,S_TVar,3,(S_used+S_set+K_wdb),0,632,integer,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[631]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,166/#004022A8,integer,1000}
symtab[632]:{tenth,S_TVar,3,(S_used+S_set+K_wdb),0,635,integer,{atom,MININT,MAXINT,object,-1},[esp-24]}
symtab[633]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,167/#004022AC,integer,100}
symtab[634]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,168/#004022B0,string,`MDCLXVI`}
symtab[635]:{-1,S_TVar,0,(S_set),0,636,integer,{integer,0,255,object,-1},[esp-28]}
symtab[636]:{-1,S_TVar,0,(S_set),0,638,atom,{atom,MININT,MAXINT,object,-1},[esp-32]}
symtab[637]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,169/#004022B4,string,`CXI`}
symtab[638]:{-1,S_TVar,0,(S_set),636,639,atom,{atom,MININT,MAXINT,object,-1},[esp-36]}
symtab[639]:{-1,S_TVar,0,(S_set),0,0,object,{integer,2,5,object,-1},[esp-40]}
symtab[640]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[641]:{sprintf_,S_Func,3,(S_used+K_used+K_wdb),0,782,{70,12,15},642,2,59,#004451D9}
symtab[642]:{fmt,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),579,643,sequence,{sequence,MININT,MAXINT,object,-2},[esp]}
symtab[643]:{args,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),577,644,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[644]:{i,S_TVar,3,(S_used+S_set+K_wdb),599,645,integer,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[645]:{fi,S_TVar,3,(S_used+S_set+K_wdb),0,646,integer,{integer,MININT,MAXINT,object,-1},[esp-12]}
symtab[646]:{fidx,S_TVar,3,(S_used+S_set+K_wdb),0,647,integer,{integer,MININT,MAXINT,object,-1},[esp-16]}
symtab[647]:{nxt,S_TVar,3,(S_used+S_set+K_wdb),578,648,integer,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[648]:{result,S_TVar,3,(S_used+S_set+K_wdb),551,649,string,{sequence,MININT,MAXINT,integer,-2},[esp-24]}
symtab[649]:{r1,S_TVar,3,(S_used+S_set+K_wdb),0,650,string,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[650]:{o,S_TVar,3,(S_used+S_set+K_wdb),581,651,object,{object,MININT,MAXINT,object,-2},[esp-32]}
symtab[651]:{oj,S_TVar,3,(S_used+S_set+K_wdb),0,652,object,{object,MININT,MAXINT,object,-2},[esp-36]}
symtab[652]:{work,S_TVar,3,(S_used+S_set+K_wdb),0,653,atom,{object,MININT,MAXINT,object,-2},[esp-40]}
symtab[653]:{base,S_TVar,3,(S_used+S_set+K_wdb),0,654,integer,{object,MININT,MAXINT,object,-2},[esp-44]}
symtab[654]:{sgn,S_TVar,3,(S_used+S_set+K_wdb),0,655,integer,{integer,0,1,object,-1},[esp-48]}
symtab[655]:{r1len,S_TVar,3,(S_used+S_set+K_wdb),0,656,integer,{atom,MININT,MAXINT,object,-1},[esp-52]}
symtab[656]:{hc,S_TVar,3,(S_used+S_set+K_wdb),0,657,integer,{atom,MININT,MAXINT,object,-1},[esp-56]}
symtab[657]:{lowerHex,S_TVar,3,(S_used+S_set+K_wdb),0,658,integer,{integer,0,1,object,-1},[esp-60]}
symtab[658]:{zerofill,S_TVar,3,(S_used+S_set+K_wdb),0,659,integer,{integer,0,1,object,-1},[esp-64]}
symtab[659]:{leftjustify,S_TVar,3,(S_used+S_set+K_wdb),0,660,integer,{integer,0,1,object,-1},[esp-68]}
symtab[660]:{centre,S_TVar,3,(S_used+S_set+K_wdb),0,661,integer,{integer,0,2,object,-1},[esp-72]}
symtab[661]:{showplus,S_TVar,3,(S_used+S_set+K_wdb),536,662,integer,{integer,0,43,object,-1},[esp-76]}
symtab[662]:{showcommas,S_TVar,3,(S_used+S_set+K_wdb),0,663,integer,{atom,MININT,MAXINT,object,-1},[esp-80]}
symtab[663]:{enquote,S_TVar,3,(S_used+S_set+K_wdb),594,664,integer,{integer,MININT,MAXINT,object,-1},[esp-84]}
symtab[664]:{blankTZ,S_TVar,3,(S_used+S_set+K_wdb),0,665,integer,{integer,0,1,object,-1},[esp-88]}
symtab[665]:{minfieldwidth,S_TVar,3,(S_used+S_set+K_wdb),537,666,integer,{atom,MININT,MAXINT,object,-1},[esp-92]}
symtab[666]:{precision,S_TVar,3,(S_used+S_set+K_wdb),538,667,integer,{atom,MININT,MAXINT,object,-1},[esp-96]}
symtab[667]:{tmp,S_TVar,3,(S_used+S_set+K_wdb),546,668,integer,{integer,0,255,object,-1},[esp-100]}
symtab[668]:{-1,S_TVar,0,(S_set),0,670,integer,{integer,0,MAXLEN,object,-1},[esp-104]}
symtab[669]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,170/#004022B8,integer,91}
symtab[670]:{e,S_TVar,3,(S_used+S_set+K_wdb),0,672,integer,{integer,MININT,MAXINT,object,-1},[esp-108]}
symtab[671]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,171/#004022BC,integer,93}
symtab[672]:{-1,S_TVar,0,(S_set),0,674,atom,{atom,MININT,MAXINT,object,-1},[esp-112]}
symtab[673]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,172/#004022C0,string,`missing ] in format string`}
symtab[674]:{-1,S_TVar,0,(S_set),0,675,T_Dsq,{T_Dsq,MININT,MAXINT,object,-2},[esp-116]}
symtab[675]:{-1,S_TVar,0,(S_set),672,676,atom,{atom,MININT,MAXINT,object,-1},[esp-120]}
symtab[676]:{-1,S_TVar,0,(S_set),0,679,sequence,{sequence,MININT,MAXINT,object,-2},[esp-124]}
symtab[677]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,173/#004022C4,string,`[%s] is 0 or not a number`}
symtab[678]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,174/#004022C8,integer,95}
symtab[679]:{-1,S_TVar,0,(S_set),0,684,object,{integer,32,43,object,-1},[esp-128]}
symtab[680]:{cmp_eax_imm32,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,175/#004022CC,integer,61}
symtab[681]:{e124npism,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,176/#004022D0,integer,124}
symtab[682]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,177/#004022D4,integer,44}
symtab[683]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,178/#004022D8,integer,65}
symtab[684]:{bBad,S_TVar,3,(S_used+S_set+K_wdb),0,685,integer,{integer,0,1,object,-1},[esp-132]}
symtab[685]:{-1,S_TVar,0,(S_set),0,700,object,{object,MININT,MAXINT,object,-2},[esp-136]}
symtab[686]:{BHFI_FSLO,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,179/#004022DC,integer,36}
symtab[687]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,180/#004022E0,integer,62}
symtab[688]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,181/#004022E4,string,`%%%c requires {base,num}`}
symtab[689]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,182/#004022E8,integer,115}
symtab[690]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,183/#004022EC,integer,70}
symtab[691]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,184/#004022F0,integer,82}
symtab[692]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,185/#004022F4,integer,79}
symtab[693]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,186/#004022F8,integer,111}
symtab[694]:{e88atcfpmbaos,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,187/#004022FC,integer,88}
symtab[695]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,188/#00402300,string,`unknown specifier:%c`}
symtab[696]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,189/#00402304,string,`comma fill not supported on %c`}
symtab[697]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,190/#00402308,string,`insufficient values for [s]printf`}
symtab[698]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,191/#0040230C,T_N,2147483647}
symtab[699]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,192/#00402310,T_N,2147483648}
symtab[700]:{bViaBase2,S_TVar,3,(S_used+S_set+K_wdb),0,701,integer,{integer,0,1,object,-1},[esp-140]}
symtab[701]:{-1,S_TVar,0,(S_set),0,704,object,{integer,53,75,object,-1},[esp-144]}
symtab[702]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,193/#00402314,integer,53}
symtab[703]:{e75cbrpmaba,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,194/#00402318,integer,75}
symtab[704]:{-1,S_TVar,0,(S_set),0,705,integer,{integer,0,MAXLEN,object,-1},[esp-148]}
symtab[705]:{d2,S_TVar,3,(S_used+S_set+K_wdb),0,706,sequence,{object,MININT,MAXINT,object,-2},[esp-152]}
symtab[706]:{d2r,S_TVar,3,(S_used+S_set+K_wdb),0,707,integer,{atom,MININT,MAXINT,object,-1},[esp-156]}
symtab[707]:{d2i,S_TVar,3,(S_used+S_set+S_for+K_wdb),0,708,integer,{integer,0,MAXLEN,object,-1},[esp-160]}
symtab[708]:{d2digit,S_TVar,3,(S_used+S_set+K_wdb),0,709,object,{object,MININT,MAXINT,object,-2},[esp-164]}
symtab[709]:{-1,S_TVar,0,(S_set),710,710,integer,{atom,MININT,MAXINT,object,-1},[esp-168]}
symtab[710]:{-1,S_TVar,0,(S_set),0,711,integer,{integer,0,MAXLEN,object,-1},[esp-172]}
symtab[711]:{-1,S_TVar,0,(S_set),734,713,string,{string,MININT,MAXINT,integer,-2},[esp-176]}
symtab[712]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,195/#0040231C,string,`o0`}
symtab[713]:{-1,S_TVar,0,(S_set),0,714,integer,{integer,0,MAXLEN,object,-1},[esp-180]}
symtab[714]:{j,S_TVar,3,(S_used+S_set+S_for+K_wdb),608,717,integer,{integer,MININT,MAXINT,object,-1},[esp-184]}
symtab[715]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,196/#00402320,string,`show plus not supported on %c`}
symtab[716]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,197/#00402324,integer,86}
symtab[717]:{-1,S_TVar,0,(S_set),0,720,object,{string,MININT,MAXINT,integer,-2},[esp-188]}
symtab[718]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,198/#00402328,string,`true`}
symtab[719]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,199/#0040232C,string,`false`}
symtab[720]:{-1,S_TVar,0,(S_set),0,725,object,{string,MININT,MAXINT,integer,-2},[esp-192]}
symtab[721]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,200/#00402330,string,"\n"}
symtab[722]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,201/#00402334,integer,99}
symtab[723]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,202/#00402338,integer,127}
symtab[724]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,203/#0040233C,integer,1114111}
symtab[725]:{-1,S_TVar,0,(S_set),0,729,object,{object,MININT,MAXINT,object,-2},[esp-196]}
symtab[726]:{sizeof_OVERLAPPED,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,204/#00402340,integer,20}
symtab[727]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,205/#00402344,string,`floating point precision may not exceed 20`}
symtab[728]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,206/#00402348,T_N,3.777893186e+22}
symtab[729]:{d2,S_TVar,3,(S_used+S_set+K_wdb),705,730,sequence,{object,MININT,MAXINT,object,-2},[esp-200]}
symtab[730]:{d2r,S_TVar,3,(S_used+S_set+K_wdb),706,731,integer,{atom,MININT,MAXINT,object,-1},[esp-204]}
symtab[731]:{d2digit,S_TVar,3,(S_used+S_set+K_wdb),708,732,object,{object,MININT,MAXINT,object,-2},[esp-208]}
symtab[732]:{-1,S_TVar,0,(S_set),0,733,integer,{atom,MININT,MAXINT,object,-1},[esp-212]}
symtab[733]:{-1,S_TVar,0,(S_set),732,734,integer,{integer,0,MAXLEN,object,-1},[esp-216]}
symtab[734]:{-1,S_TVar,0,(S_set),0,735,string,{string,MININT,MAXINT,integer,-2},[esp-220]}
symtab[735]:{r1dx,S_TVar,3,(S_used+S_set+S_for+K_wdb),0,736,integer,{integer,0,MAXLEN,object,-1},[esp-224]}
symtab[736]:{r1ch,S_TVar,3,(S_used+S_set+K_wdb),0,737,integer,{integer,0,255,object,-1},[esp-228]}
symtab[737]:{mh,S_TVar,3,(S_used+S_set+K_wdb),0,0,integer,{integer,-536870912,536870911,object,-1},[esp-232]}
symtab[738]:{fmt,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),642,739,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[739]:{args,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),643,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[740]:{-1,S_Const,3,(S_set+K_sqr+K_noclr+K_lit),0,207/#0040234C,T_Dsq,{}}
symtab[741]:{fn,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),0,742,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[742]:{fmt,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),738,743,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[743]:{args,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),739,744,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[744]:{-1,S_TVar,0,(S_set),0,745,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[745]:{-1,S_TVar,0,(S_set),0,746,atom,{integer,0,1,object,-1},[esp-16]}
symtab[746]:{i,S_TVar,3,(S_used+S_set+S_for+K_wdb),644,747,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[747]:{setting,S_TVar,3,(S_used+S_set+K_wdb),0,749,string,{object,MININT,MAXINT,object,-2},[esp-24]}
symtab[748]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,208/#00402350,string,`unicode_align`}
symtab[749]:{-1,S_TVar,0,(S_set),0,751,integer,{integer,1,805306369,object,-1},[esp-28]}
symtab[750]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,209/#00402354,string,`prefer_backtick`}
symtab[751]:{-1,S_TVar,0,(S_set),0,0,string,{string,MININT,MAXINT,integer,-2},[esp-32]}
symtab[752]:{asChdef,S_GVar,3,(S_used+S_set+K_wdb+K_noclr),0,210/#00402358,integer,{integer,MININT,MAXINT,object,-1},0}
symtab[753]:{x,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),593,754,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[754]:{asCh,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,755,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[755]:{maxlen,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,756,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[756]:{nest,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,757,integer,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[757]:{s,S_TVar,3,(S_used+S_set+K_wdb),0,758,object,{0b1101,0,0,object,-2},[esp-16]}
symtab[758]:{xi,S_TVar,3,(S_used+S_set+K_wdb),0,759,object,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[759]:{-1,S_TVar,0,(S_set),0,762,integer,{integer,0,1,object,-1},[esp-24]}
symtab[760]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,211/#0040235C,integer,126}
symtab[761]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,212/#00402360,string,`%d'%c'`}
symtab[762]:{-1,S_TVar,0,(S_set),0,763,integer,{integer,0,MAXLEN,object,-1},[esp-28]}
symtab[763]:{-1,S_TVar,0,(S_set),768,764,atom,{atom,MININT,MAXINT,object,-1},[esp-32]}
symtab[764]:{-1,S_TVar,0,(S_set),0,766,string,{0b1101,0,0,object,-2},[esp-36]}
symtab[765]:{-1,S_Const,3,(S_set+K_noclr+K_lit),0,213/#00402364,integer,123}
symtab[766]:{i,S_TVar,3,(S_used+S_set+S_for+K_wdb),746,767,integer,{integer,0,MAXLEN,object,-1},[esp-40]}
symtab[767]:{-1,S_TVar,0,(S_set),0,768,integer,{integer,0,MAXLEN,object,-1},[esp-44]}
symtab[768]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-48]}
symtab[769]:{-1,S_Const,3,(S_used+S_set+K_noclr+K_lit),0,214/#00402368,integer,125}
symtab[770]:{fn,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),741,771,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[771]:{x,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr),753,772,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[772]:{asCh,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),754,773,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[773]:{maxlen,S_TVar,3,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),755,774,integer,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[774]:{-1,S_TVar,0,(S_set),0,0,object,{0b1101,0,0,object,-2},[esp-16]}
symtab[775]:{addr,S_TVar,15,(S_used+S_set+K_used+K_othr),0,776,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[776]:{res,S_TVar,15,(S_used+S_set+K_used+K_aod),627,777,string,{string,MININT,MAXINT,integer,-2},[esp-4]}
symtab[777]:{ch,S_TVar,15,(S_used+S_set),0,0,integer,{integer,0,255,object,-1},[esp-8]}
symtab[778]:{addr,S_TVar,15,(S_used+S_set+K_used+K_othr),775,779,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[779]:{res,S_TVar,15,(S_used+S_set),776,780,sequence,{T_Dsq,MININT,MAXINT,integer,-2},[esp-4]}
symtab[780]:{wch,S_TVar,15,(S_used+S_set),0,0,integer,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[781]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[782]:{cleanUpPath,S_Func,14,(S_used+K_used),0,798,{70,12,15},783,2,8,#00456985}
symtab[783]:{filepath,S_TVar,14,(S_used+S_set+K_used+K_othr),0,784,sequence,{sequence,MININT,MAXINT,object,-2},[esp]}
symtab[784]:{rootdir,S_TVar,14,(S_used+S_set+K_used+K_othr),0,785,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[785]:{k,S_TVar,14,(S_used+S_set),609,786,integer,{integer,MININT,MAXINT,object,-1},[esp-8]}
symtab[786]:{-1,S_TVar,0,(S_set),0,788,integer,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[787]:{e58ifn,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,215/#0040236C,integer,58}
symtab[788]:{-1,S_TVar,0,(S_set),0,791,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[789]:{-1,S_Const,14,(S_used+S_set+K_noclr+K_lit),0,216/#00402370,integer,47}
symtab[790]:{-1,S_Const,14,(S_used+S_set+K_noclr+K_lit),0,217/#00402374,string,`\..\`}
symtab[791]:{-1,S_TVar,0,(S_set),0,792,atom,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[792]:{j,S_TVar,14,(S_used+S_set+S_for),714,794,integer,{atom,MININT,MAXINT,object,-1},[esp-24]}
symtab[793]:{-1,S_Const,14,(S_used+S_set+K_noclr+K_lit),0,218/#00402378,string,`Warning, cannot cleanup `}
symtab[794]:{-1,S_TVar,0,(S_set),0,0,sequence,{sequence,MININT,MAXINT,object,-2},[esp-28]}
symtab[795]:{-1,S_Const,14,(S_used+S_set+K_noclr+K_lit),0,219/#0040237C,string,`\.\`}
symtab[796]:{-1,S_Const,14,(S_used+S_set+K_noclr+K_lit),0,220/#00402380,string,`\\`}
symtab[797]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[798]:{toString,S_Func,14,(S_used+K_used),0,859,{70,12},799,1,6,#00456D19}
symtab[799]:{name,S_TVar,14,(S_used+S_set+K_used+K_othr),0,800,sequence,{T_Dsq,MININT,MAXINT,object,-2},[esp]}
symtab[800]:{res,S_TVar,14,(S_used+S_set),779,801,string,{string,MININT,MAXINT,integer,-2},[esp-4]}
symtab[801]:{nlen,S_TVar,14,(S_used+S_set),0,802,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[802]:{ch,S_TVar,14,(S_used+S_set),777,803,object,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[803]:{-1,S_TVar,0,(S_set),0,804,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[804]:{i,S_TVar,14,(S_used+S_set+S_for),766,0,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[805]:{kernel32,S_GVar,14,(S_used+S_set),0,221/#00402384,atom,{atom,MININT,MAXINT,object,-1},0}
symtab[806]:{xGetLongPathName,S_GVar,14,(S_used+S_set),0,222/#00402388,integer,{integer,-1,MAXLEN,object,-1},0}
symtab[807]:{xGetShortPathName,S_GVar,14,(S_used+S_set),0,223/#0040238C,integer,{integer,-1,MAXLEN,object,-1},0}
symtab[808]:{MAX_PATH,S_Const,14,(S_used+S_set+K_noclr+K_lit),0,224/#00402390,integer,260}
symtab[809]:{gppinit,S_GVar,14,(S_used+S_set+K_noclr),0,225/#00402394,integer,{integer,0,1,object,-1},0}
symtab[810]:{filepath,S_TVar,14,(S_used+S_set+K_used+K_othr),783,811,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[811]:{rootdir,S_TVar,14,(S_used+S_set+K_used+K_othr+K_dlft),784,812,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[812]:{l,S_TVar,14,(S_used+S_set),0,813,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[813]:{res,S_TVar,14,(S_used+S_set),800,814,sequence,{sequence,MININT,MAXINT,object,-2},[esp-12]}
symtab[814]:{buffer,S_TVar,14,(S_used+S_set),0,817,atom,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[815]:{-1,S_Const,14,(S_used+S_set+K_noclr+K_lit),0,226/#00402398,string,`kernel32`}
symtab[816]:{-1,S_Const,14,(S_used+S_set+K_noclr+K_lit),0,227/#0040239C,string,`GetLongPathNameA`}
symtab[817]:{-1,S_TVar,0,(S_set),0,819,T_Dsq,{T_Dsq,MININT,MAXINT,object,3},[esp-20]}
symtab[818]:{-1,S_Const,14,(S_used+S_set+K_noclr+K_lit),0,228/#004023A0,string,`GetShortPathNameA`}
symtab[819]:{-1,S_TVar,0,(S_set),0,820,integer,{integer,0,MAXLEN,object,-1},[esp-24]}
symtab[820]:{i,S_TVar,14,(S_used+S_set+S_for),804,821,integer,{integer,0,MAXLEN,object,-1},[esp-28]}
symtab[821]:{-1,S_TVar,0,(S_set),0,823,object,{object,MININT,MAXINT,object,-2},[esp-32]}
symtab[822]:{-1,S_Const,14,(S_used+S_set+K_noclr+K_lit),0,229/#004023A4,string,`\/`}
symtab[823]:{-1,S_TVar,0,(S_set),0,824,atom,{integer,-1,805306367,object,-1},[esp-36]}
symtab[824]:{-1,S_TVar,0,(S_set),0,825,sequence,{sequence,MININT,MAXINT,object,-2},[esp-40]}
symtab[825]:{-1,S_TVar,0,(S_set),0,826,string,{sequence,MININT,MAXINT,object,-2},[esp-44]}
symtab[826]:{k,S_TVar,14,(S_used+S_set),785,827,integer,?,[esp-48]}
symtab[827]:{k,S_TVar,14,(S_used+S_set),826,828,integer,?,[esp-52]}
symtab[828]:{j,S_TVar,14,(S_used+S_set+S_for),792,829,integer,?,[esp-56]}
symtab[829]:{k,S_TVar,14,(S_used+S_set),827,830,integer,?,[esp-60]}
symtab[830]:{k,S_TVar,14,(S_used+S_set),829,0,integer,?,[esp-64]}
symtab[831]:{filepath,S_TVar,14,(S_used+S_set+K_used+K_othr),810,832,string,{object,MININT,MAXINT,object,-2},[esp]}
symtab[832]:{remove_slash,S_TVar,14,(S_used+S_set+K_used+K_othr+K_dlft),0,833,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[833]:{-1,S_TVar,0,(S_set),0,834,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[834]:{i,S_TVar,14,(S_used+S_set+S_for),820,835,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[835]:{-1,S_TVar,0,(S_set),0,836,integer,{integer,0,255,object,-1},[esp-16]}
symtab[836]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[837]:{path_in,S_TVar,14,(S_used+S_set+K_used+K_othr),0,838,string,{object,MININT,MAXINT,object,-2},[esp]}
symtab[838]:{is_directory,S_TVar,14,(S_used+S_set+K_used+K_othr+K_dlft),0,839,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[839]:{case_flags,S_TVar,14,(S_used+S_set+K_used+K_othr+K_dlft),0,0,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[840]:{init,S_GVar,13,(S_used+S_set+K_noclr),0,230/#004023A8,integer,{integer,0,1,object,-1},0}
symtab[841]:{kernel32,S_GVar,13,(S_used+S_set),1614,231/#004023AC,atom,{atom,MININT,MAXINT,object,-1},0}
symtab[842]:{xGetCurrentDirectory,S_GVar,13,(S_used+S_set),0,232/#004023B0,atom,{integer,-1,MAXLEN,object,-1},0}
symtab[843]:{l,S_TVar,13,(S_used+S_set+K_asmm),812,844,integer,{atom,MININT,MAXINT,object,-2},[esp]}
symtab[844]:{res,S_TVar,13,(S_used+S_set),813,847,string,{sequence,MININT,MAXINT,object,-2},[esp-4]}
symtab[845]:{-1,S_Const,13,(S_used+S_set+K_noclr+K_lit),0,233/#004023B4,string,`kernel32.dll`}
symtab[846]:{-1,S_Const,13,(S_used+S_set+K_noclr+K_lit),0,234/#004023B8,string,`GetCurrentDirectoryA`}
symtab[847]:{-1,S_TVar,0,(S_set),0,848,T_Dsq,{T_Dsq,MININT,MAXINT,0b1001,2},[esp-8]}
symtab[848]:{-1,S_TVar,0,(S_set),0,849,atom,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[849]:{-1,S_TVar,0,(S_set),0,0,integer,?,[esp-16]}
symtab[850]:{caseinit,S_GVar,16,(S_used+S_set+K_noclr),0,235/#004023BC,integer,{integer,0,1,object,-1},0}
symtab[851]:{toUpper,S_GVar,16,(S_used+S_set),0,236/#004023C0,string,{sequence,MININT,MAXINT,object,-2},0}
symtab[852]:{toLower,S_GVar,16,(S_used+S_set),0,237/#004023C4,string,{sequence,MININT,MAXINT,object,-2},0}
symtab[853]:{str_methods,S_GVar,16,(S_used+S_set),0,238/#004023C8,sequence,{T_Dsq,MININT,MAXINT,string,5},0}
symtab[854]:{LOWER,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,239/#004023CC,integer,1}
symtab[855]:{UPPER,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,240/#004023D0,integer,2}
symtab[856]:{CAPITALISE,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,241/#004023D4,integer,3}
symtab[857]:{SENTENCE,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,242/#004023D8,integer,4}
symtab[858]:{INVERT,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,243/#004023DC,integer,5}
symtab[859]:{initcase,S_Proc,16,(S_used+K_used),0,921,{80},865,0,2,#0044EE91}
symtab[860]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,244/#004023E0,string,`LOWER`}
symtab[861]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,245/#004023E4,string,`UPPER`}
symtab[862]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,246/#004023E8,string,`CAPITALISE`}
symtab[863]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,247/#004023EC,string,`SENTENCE`}
symtab[864]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,248/#004023F0,string,`INVERT`}
symtab[865]:{i32,S_TVar,16,(S_used+S_set),0,867,integer,{integer,97,254,object,-1},[esp]}
symtab[866]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,249/#004023F4,integer,254}
symtab[867]:{i,S_TVar,16,(S_used+S_set+S_for),834,0,integer,{integer,1,254,object,-1},[esp-4]}
symtab[868]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,250/#004023F8,integer,90}
symtab[869]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,251/#004023FC,integer,192}
symtab[870]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,252/#00402400,integer,214}
symtab[871]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,253/#00402404,integer,216}
symtab[872]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,254/#00402408,integer,222}
symtab[873]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,255/#0040240C,integer,138}
symtab[874]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,256/#00402410,integer,154}
symtab[875]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,257/#00402414,integer,140}
symtab[876]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,258/#00402418,integer,156}
symtab[877]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,259/#0040241C,integer,159}
symtab[878]:{x,S_TVar,16,(S_used+S_set+K_used+K_othr),771,879,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[879]:{o,S_TVar,16,(S_used+S_set),650,880,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[880]:{c,S_TVar,16,(S_used+S_set),595,881,integer,{integer,MININT,MAXINT,object,-1},[esp-8]}
symtab[881]:{-1,S_TVar,0,(S_set),0,882,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[882]:{i,S_TVar,16,(S_used+S_set+S_for),867,883,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[883]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,255,object,-1},[esp-20]}
symtab[884]:{x,S_TVar,16,(S_used+S_set+K_used+K_othr),878,885,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[885]:{o,S_TVar,16,(S_used+S_set),879,886,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[886]:{c,S_TVar,16,(S_used+S_set),880,887,integer,{integer,MININT,MAXINT,object,-1},[esp-8]}
symtab[887]:{-1,S_TVar,0,(S_set),0,888,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[888]:{i,S_TVar,16,(S_used+S_set+S_for),882,889,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[889]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,255,object,-1},[esp-20]}
symtab[890]:{ch,S_TVar,16,(S_used+S_set+K_used+K_othr),802,891,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[891]:{-1,S_TVar,0,(S_set),0,892,integer,{integer,0,255,object,-1},[esp-4]}
symtab[892]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,1,object,-1},[esp-8]}
symtab[893]:{ch,S_TVar,16,(S_used+S_set+K_used+K_othr),890,894,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[894]:{-1,S_TVar,0,(S_set),0,895,integer,{integer,0,255,object,-1},[esp-4]}
symtab[895]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,1,object,-1},[esp-8]}
symtab[896]:{s,S_TVar,16,(S_used+S_set+K_used+K_othr),757,897,string,{object,MININT,MAXINT,object,-2},[esp]}
symtab[897]:{method,S_TVar,16,(S_used+S_set+K_used+K_othr+K_dlft),0,898,string,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[898]:{mi,S_TVar,16,(S_used+S_set),0,899,integer,{integer,MININT,MAXINT,object,-1},[esp-8]}
symtab[899]:{-1,S_TVar,0,(S_set),0,900,object,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[900]:{ch,S_TVar,16,(S_used+S_set),893,901,integer,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[901]:{pc,S_TVar,16,(S_used+S_set+K_used+K_aod),0,902,integer,{integer,0,255,object,-1},[esp-20]}
symtab[902]:{eos,S_TVar,16,(S_used+S_set+K_used+K_aod),0,903,integer,{integer,0,1,object,-1},[esp-24]}
symtab[903]:{inQuote,S_TVar,16,(S_used+S_set+K_used+K_aod),0,904,integer,{integer,0,1,object,-1},[esp-28]}
symtab[904]:{islow,S_TVar,16,(S_used+S_set+K_used+K_aod),0,905,integer,{integer,0,1,object,-1},[esp-32]}
symtab[905]:{ishigh,S_TVar,16,(S_used+S_set+K_used+K_aod),0,906,integer,{integer,0,1,object,-1},[esp-36]}
symtab[906]:{lowit,S_TVar,16,(S_used+S_set+K_used+K_aod),0,907,integer,{integer,0,1,object,-1},[esp-40]}
symtab[907]:{highit,S_TVar,16,(S_used+S_set+K_used+K_aod),0,909,integer,{integer,0,1,object,-1},[esp-44]}
symtab[908]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,260/#00402420,string,`proper(s,"%s"): invalid method parameter`}
symtab[909]:{-1,S_TVar,0,(S_set),0,910,T_Dsq,{T_Dsq,MININT,MAXINT,string,1},[esp-48]}
symtab[910]:{-1,S_TVar,0,(S_set),0,911,integer,{integer,0,MAXLEN,object,-1},[esp-52]}
symtab[911]:{i,S_TVar,16,(S_used+S_set+S_for),888,912,integer,{integer,0,MAXLEN,object,-1},[esp-56]}
symtab[912]:{-1,S_TVar,0,(S_set),0,913,integer,{integer,0,255,object,-1},[esp-60]}
symtab[913]:{-1,S_TVar,0,(S_set),0,914,integer,{integer,0,1,object,-1},[esp-64]}
symtab[914]:{-1,S_TVar,0,(S_set),0,916,integer,{integer,0,1,object,-1},[esp-68]}
symtab[915]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,261/#00402424,string," \r\n"&#22&"\'`"}
symtab[916]:{-1,S_TVar,0,(S_set),0,0,sequence,{string,MININT,MAXINT,integer,-2},[esp-72]}
symtab[917]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,262/#00402428,string," \r\n"}
symtab[918]:{-1,S_Const,16,(S_used+S_set+K_noclr+K_lit),0,263/#0040242C,string,`.!?`}
symtab[919]:{edi4,S_GVar,2,(S_used+S_set+K_wdb+K_asmm),0,264/#00402430,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[920]:{CTB,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,265/#00402434,string,`**CORRUPT TYPE BYTE**`}
symtab[921]:{show_corruption,S_Proc,2,(S_used+K_used+K_wdb),0,952,{80,8},922,1,8,#0046BBD1}
symtab[922]:{msg,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),0,923,string,{string,MININT,MAXINT,integer,21},[esp]}
symtab[923]:{pGtcb,S_TVar,2,(S_used+S_set+K_wdb+K_asmm),475,925,integer,{atom,MININT,MAXINT,object,-2},[esp-4]}
symtab[924]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,266/#00402438,string,"\n\n%s at #%08x(-1), pGtcb=#%08x, *4=#%08x, diff=#%08x\n\n"}
symtab[925]:{-1,S_TVar,0,(S_set),926,926,atom,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[926]:{-1,S_TVar,0,(S_set),929,927,atom,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[927]:{-1,S_TVar,0,(S_set),928,928,atom,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[928]:{-1,S_TVar,0,(S_set),0,929,atom,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[929]:{-1,S_TVar,0,(S_set),927,930,atom,{atom,MININT,MAXINT,object,-1},[esp-24]}
symtab[930]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,0b1011,5},[esp-28]}
symtab[931]:{ppp_Maxlen,S_GVar,17,(S_used+S_set+K_wdb+K_noclr),0,267/#0040243C,integer,{object,MININT,MAXINT,object,-2},78}
symtab[932]:{-1,S_Const,17,(S_set+K_noclr+K_lit),0,268/#00402440,integer,78}
symtab[933]:{ppp_Indent,S_GVar,17,(S_used+S_set+K_wdb+K_noclr),0,269/#00402444,integer,{object,MININT,MAXINT,object,-2},0}
symtab[934]:{ppp_Nest,S_GVar,17,(S_used+S_set+K_wdb+K_noclr),0,270/#00402448,object,{object,MININT,MAXINT,object,-2},0}
symtab[935]:{ppp_Pause,S_GVar,17,(S_used+S_set+K_wdb+K_noclr),0,271/#0040244C,integer,{object,MININT,MAXINT,object,-2},0}
symtab[936]:{ppp_StrFmt,S_GVar,17,(S_used+S_set+K_wdb+K_noclr),0,272/#00402450,integer,{object,MININT,MAXINT,object,-2},0}
symtab[937]:{ppp_IntCh,S_GVar,17,(S_used+S_set+K_wdb+K_noclr),0,273/#00402454,integer,{object,MININT,MAXINT,object,-2},0}
symtab[938]:{ppp_Init,S_GVar,17,(S_used+S_set+K_wdb+K_noclr),0,274/#00402458,integer,{integer,0,1,object,-1},0}
symtab[939]:{ppp_Ascii,S_GVar,17,(S_used+S_set+K_wdb),0,275/#0040245C,object,{object,MININT,MAXINT,object,-2},0}
symtab[940]:{ppp_IntFmt,S_GVar,17,(S_used+S_set+K_wdb),0,276/#00402460,sequence,{object,MININT,MAXINT,object,-2},0}
symtab[941]:{ppp_FltFmt,S_GVar,17,(S_used+S_set+K_wdb),0,277/#00402464,sequence,{object,MININT,MAXINT,object,-2},0}
symtab[942]:{ppp_Date,S_GVar,17,(S_used+S_set+K_wdb),0,278/#00402468,sequence,{object,MININT,MAXINT,object,-2},0}
symtab[943]:{ppp_Br,S_GVar,17,(S_used+S_set+K_wdb),0,279/#0040246C,sequence,{object,MININT,MAXINT,object,-2},0}
symtab[944]:{ppp_Q22,S_GVar,17,(S_used+S_set+K_wdb+K_noclr),0,280/#00402470,integer,{object,MININT,MAXINT,object,-2},0}
symtab[945]:{ascii,S_GVar,17,(S_used+S_set+K_wdb),0,281/#00402474,sequence,{sequence,MININT,MAXINT,object,-2},0}
symtab[946]:{ppp_File,S_GVar,17,(S_used+S_set+K_wdb+K_noclr),0,282/#00402478,integer,{object,MININT,MAXINT,object,-2},1}
symtab[947]:{ppp_result,S_GVar,17,(S_used+S_set+K_wdb),0,283/#0040247C,sequence,{sequence,MININT,MAXINT,object,-2},0}
symtab[948]:{pline,S_GVar,17,(S_used+S_set+K_wdb),0,284/#00402480,sequence,{sequence,MININT,MAXINT,object,-2},0}
symtab[949]:{plen,S_GVar,17,(S_used+S_set+K_wdb+K_noclr),0,285/#00402484,integer,{atom,MININT,MAXINT,object,-1},0}
symtab[950]:{sline,S_GVar,17,(S_used+S_set+K_wdb+K_noclr),0,286/#00402488,integer,{integer,MININT,MAXINT,object,-1},0}
symtab[951]:{nindent,S_GVar,17,(S_used+S_set+K_wdb),0,287/#0040248C,integer,{object,MININT,MAXINT,object,-2},0}
symtab[952]:{spurge,S_Proc,17,(S_used+K_used+K_wdb),0,954,{80},953,0,1,#00442440}
symtab[953]:{-1,S_TVar,0,(S_set),0,0,sequence,{sequence,MININT,MAXINT,object,-2},[esp]}
symtab[954]:{sput,S_Proc,17,(S_used+K_used+K_wdb),0,965,{80,15},955,1,6,#004424FD}
symtab[955]:{txt,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr),0,956,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[956]:{p,S_TVar,17,(S_used+S_set+K_wdb),0,957,integer,{atom,MININT,MAXINT,object,-1},[esp-4]}
symtab[957]:{-1,S_TVar,0,(S_set),0,958,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[958]:{-1,S_TVar,0,(S_set),0,959,atom,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[959]:{-1,S_TVar,0,(S_set),0,960,string,{string,MININT,MAXINT,integer,-2},[esp-16]}
symtab[960]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[961]:{escBytes,S_GVar,17,(S_used+S_set+K_wdb),0,288/#00402490,sequence,{T_Dsq,MININT,MAXINT,integer,8},0}
symtab[962]:{escChars,S_GVar,17,(S_used+S_set+K_wdb),0,289/#00402494,sequence,{string,MININT,MAXINT,integer,8},0}
symtab[963]:{constants,S_GVar,17,(S_used+S_set+K_wdb),0,290/#00402498,sequence,{T_Dsq,MININT,MAXINT,0b1011,2},0}
symtab[964]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,0,1,object,-1},(eax)}
symtab[965]:{graphic,S_Func,17,(S_used+K_used+K_wdb),0,970,{70,15},966,1,1,#00444203}
symtab[966]:{cl,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr),0,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[967]:{cl1q,S_GVar,17,(S_used+S_set+K_wdb+K_noclr),0,291/#0040249C,integer,{integer,0,1,object,-1},0}
symtab[968]:{cllq,S_GVar,17,(S_used+S_set+K_wdb+K_noclr),0,292/#004024A0,integer,{integer,0,1,object,-1},0}
symtab[969]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[970]:{prnf,S_Func,17,(S_used+S_set+K_used+K_wdb),0,1012,{70,15,1,1,1,1},971,5,28,#0044271D}
symtab[971]:{cl,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr),966,972,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[972]:{col,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr),0,973,integer,{atom,MININT,MAXINT,object,-1},[esp-4]}
symtab[973]:{indent,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr),0,974,integer,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[974]:{prnt,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr),0,975,integer,{integer,MININT,MAXINT,object,-1},[esp-12]}
symtab[975]:{nestlvl,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr),0,976,integer,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[976]:{len,S_TVar,17,(S_used+S_set+K_wdb),0,977,integer,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[977]:{iplus1,S_TVar,17,(S_used+S_set+K_wdb),0,978,integer,{integer,1,805306369,object,-1},[esp-24]}
symtab[978]:{k,S_TVar,17,(S_used+S_set+K_wdb),830,979,integer,{atom,MININT,MAXINT,object,-1},[esp-28]}
symtab[979]:{ch,S_TVar,17,(S_used+S_set+K_wdb),900,980,integer,{object,MININT,MAXINT,object,-2},[esp-32]}
symtab[980]:{aschar,S_TVar,17,(S_used+S_set+K_wdb),0,981,integer,{atom,MININT,MAXINT,object,-1},[esp-36]}
symtab[981]:{asbacktick,S_TVar,17,(S_used+S_set+K_wdb),0,982,integer,{integer,0,1,object,-1},[esp-40]}
symtab[982]:{sep,S_TVar,17,(S_used+S_set+K_wdb),0,983,sequence,{string,MININT,MAXINT,integer,-2},[esp-44]}
symtab[983]:{txt,S_TVar,17,(S_used+S_set+K_wdb),955,984,sequence,{object,MININT,MAXINT,object,-2},[esp-48]}
symtab[984]:{chint,S_TVar,17,(S_used+S_set+K_wdb),0,985,object,{object,MININT,MAXINT,object,-2},[esp-52]}
symtab[985]:{-1,S_TVar,0,(S_set),0,986,integer,{integer,0,MAXLEN,object,-1},[esp-56]}
symtab[986]:{i,S_TVar,17,(S_used+S_set+S_for+K_wdb),911,987,integer,{integer,0,MAXLEN,object,-1},[esp-60]}
symtab[987]:{-1,S_TVar,0,(S_set),0,988,integer,{integer,0,MAXLEN,object,-1},[esp-64]}
symtab[988]:{-1,S_TVar,0,(S_set),1002,990,atom,{atom,MININT,MAXINT,object,-1},[esp-68]}
symtab[989]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,293/#004024A4,string,`#22&"`}
symtab[990]:{-1,S_TVar,0,(S_set),994,991,sequence,{sequence,MININT,MAXINT,object,-2},[esp-72]}
symtab[991]:{-1,S_TVar,0,(S_set),0,994,integer,{integer,MININT,MAXINT,object,-1},[esp-76]}
symtab[992]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,294/#004024A8,string,`"&#22`}
symtab[993]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,295/#004024AC,string,`"&#22&"`}
symtab[994]:{-1,S_TVar,0,(S_set),0,995,sequence,{sequence,MININT,MAXINT,object,-2},[esp-80]}
symtab[995]:{-1,S_TVar,0,(S_set),0,996,integer,{integer,0,MAXLEN,object,-1},[esp-84]}
symtab[996]:{-1,S_TVar,0,(S_set),0,1000,object,{object,MININT,MAXINT,object,-2},[esp-88]}
symtab[997]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,296/#004024B0,integer,31}
symtab[998]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,297/#004024B4,integer,1900}
symtab[999]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,298/#004024B8,integer,3000}
symtab[1000]:{-1,S_TVar,0,(S_set),0,1001,string,{sequence,MININT,MAXINT,integer,-2},[esp-92]}
symtab[1001]:{-1,S_TVar,0,(S_set),988,1002,atom,{atom,MININT,MAXINT,object,-1},[esp-96]}
symtab[1002]:{-1,S_TVar,0,(S_set),0,1003,atom,{atom,MININT,MAXINT,object,-1},[esp-100]}
symtab[1003]:{-1,S_TVar,0,(S_set),0,1009,integer,{integer,0,MAXLEN,object,-1},[esp-104]}
symtab[1004]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,299/#004024BC,string,",\n"}
symtab[1005]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,300/#004024C0,string,`,`}
symtab[1006]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,301/#004024C4,string,`, `}
symtab[1007]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,302/#004024C8,atom,-4294967295}
symtab[1008]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,303/#004024CC,string,`%d'\%s'`}
symtab[1009]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,object,-2},[esp-108]}
symtab[1010]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,304/#004024D0,string,`'%s'`}
symtab[1011]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,305/#004024D4,string,`%d'%s'`}
symtab[1012]:{setAscii,S_Proc,17,(S_used+K_used+K_wdb),0,1023,{80},1013,0,7,#004448F3}
symtab[1013]:{-1,S_TVar,0,(S_set),1017,1015,integer,{integer,0,MAXLEN,object,-1},[esp]}
symtab[1014]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,306/#004024D8,string,`length(ascii) must be 2`}
symtab[1015]:{minasc,S_TVar,17,(S_used+S_set+K_wdb),0,1016,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1016]:{maxasc,S_TVar,17,(S_used+S_set+K_wdb),0,1017,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1017]:{-1,S_TVar,0,(S_set),0,1020,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[1018]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,307/#004024DC,string,`length(minasc)!=length(maxasc)`}
symtab[1019]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,308/#004024E0,string,`find(0,minasc) or find(0,maxasc)`}
symtab[1020]:{i,S_TVar,17,(S_used+S_set+S_for+K_wdb),986,1021,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[1021]:{-1,S_TVar,0,(S_set),1022,1022,object,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[1022]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-24]}
symtab[1023]:{pp_Init,S_Proc,17,(S_used+K_used+K_wdb),0,1032,{80},0,0,0,#00444C1D}
symtab[1024]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,309/#004024E4,string,`%d`}
symtab[1025]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,310/#004024E8,string,`%.10g`}
symtab[1026]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,311/#004024EC,string,`{}`}
symtab[1027]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,312/#004024F0,string,`tnr\"'eE`}
symtab[1028]:{-1,S_Const,17,(S_set+K_noclr+K_lit),0,313/#004024F4,T_N,1.295837196e+307}
symtab[1029]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,314/#004024F8,atom,NOVALUE}
symtab[1030]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,315/#004024FC,string,`NOVALUE`}
symtab[1031]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[1032]:{setOpt,S_Func,17,(S_used+K_used+K_wdb),0,1045,{70,12},1033,1,7,#00444243}
symtab[1033]:{options,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr),0,1034,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1034]:{f,S_TVar,17,(S_used+S_set+K_wdb),548,1035,integer,{integer,MININT,MAXINT,object,-1},[esp-4]}
symtab[1035]:{ip1,S_TVar,17,(S_used+S_set+K_wdb),0,1036,integer,{integer,1,805306369,object,-1},[esp-8]}
symtab[1036]:{flvl,S_TVar,17,(S_used+S_set+K_used+K_aod+K_wdb),0,1037,integer,{integer,4,4,object,-1},[esp-12]}
symtab[1037]:{tmp,S_TVar,17,(S_used+S_set+K_wdb),667,1038,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[1038]:{-1,S_TVar,0,(S_set),0,1040,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[1039]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,316/#00402500,string,`length(options) not even`}
symtab[1040]:{i,S_TVar,17,(S_used+S_set+S_for+K_wdb),1020,0,integer,{integer,0,MAXLEN,object,-1},[esp-24]}
symtab[1041]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,317/#00402504,string,`pp_StrFmt,-2 deprecated: use pp_IntCh,false instead`}
symtab[1042]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,318/#00402508,string,`pp_StrFmt,-3 deprecated: use pp_StrFmt,-1,pp_IntCh,false instead`}
symtab[1043]:{-1,S_Const,17,(S_used+S_set+K_noclr+K_lit),0,319/#0040250C,string,`pp_StrFmt,1 behaves as 3: use pp_StrFmt,3,pp_IntCh,false instead`}
symtab[1044]:{options,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr),1033,0,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1045]:{pp_Ex,S_Proc,17,(S_used+K_used+K_wdb),0,1068,{80,15,12},1046,2,3,#004421B5}
symtab[1046]:{o,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr),885,1047,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1047]:{options,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr),1044,1048,sequence,{sequence,MININT,MAXINT,object,-2},[esp-4]}
symtab[1048]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1049]:{o,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr),1046,1050,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1050]:{options,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr),1047,0,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1051]:{o,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr),1049,1052,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1052]:{options,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),1050,0,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1053]:{o,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr),1051,1054,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1054]:{options,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr),1052,1055,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1055]:{-1,S_TVar,0,(S_set),0,1056,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[1056]:{i,S_TVar,17,(S_used+S_set+S_for+K_wdb),1040,1057,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[1057]:{-1,S_TVar,0,(S_set),0,1058,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[1058]:{-1,S_TVar,0,(S_set),0,1059,sequence,{sequence,MININT,MAXINT,object,-2},[esp-20]}
symtab[1059]:{-1,S_TVar,0,(S_set),0,1060,T_Dsq,{T_Dsq,MININT,MAXINT,integer,2},[esp-24]}
symtab[1060]:{was_pp_File,S_TVar,17,(S_used+S_set+K_wdb),0,0,integer,{integer,MININT,MAXINT,object,-1},[esp-28]}
symtab[1061]:{o,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr),1053,1062,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1062]:{options,S_TVar,17,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),1054,0,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1063]:{fn,S_GVar,2,(S_used+S_set+K_wdb),1576,320/#00402510,integer,{integer,-1,10000,object,-1},0}
symtab[1064]:{MAXLINELEN,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,321/#00402514,integer,129}
symtab[1065]:{MAXLENN,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,322/#00402518,integer,20000}
symtab[1066]:{OLDSTYLE,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),0,323/#0040251C,integer,0}
symtab[1067]:{printstack,S_GVar,2,(S_used+S_set+K_wdb),0,324/#00402520,sequence,{sequence,MININT,MAXINT,object,-2},0}
symtab[1068]:{addtostack,S_Proc,2,(S_used+K_used+K_wdb),0,1075,{80,12,1,8,8},1069,4,5,#0046A62D}
symtab[1069]:{idii,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),0,1070,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1070]:{idxr,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),0,1071,integer,{integer,MININT,MAXINT,object,-1},[esp-4]}
symtab[1071]:{name,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),799,1072,string,{string,MININT,MAXINT,integer,-2},[esp-8]}
symtab[1072]:{text,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),0,1073,string,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[1073]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{0b0101,0,0,sequence,3},[esp-16]}
symtab[1074]:{-1,S_TVar,0,(S_set+K_Fres),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,string,2},(eax)}
symtab[1075]:{subscr,S_Func,2,(S_used+K_used+K_wdb),0,1087,{70,8,8,1,1},1076,4,5,#0046BCEA}
symtab[1076]:{prev,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),0,1077,string,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1077]:{name,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),1071,1078,string,{string,MININT,MAXINT,integer,-2},[esp-4]}
symtab[1078]:{prst,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),0,1079,integer,{integer,MININT,MAXINT,object,-1},[esp-8]}
symtab[1079]:{prdx,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),0,1081,integer,{integer,-2,MAXLEN,object,-1},[esp-12]}
symtab[1080]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,325/#00402524,string,`%s[%d]`}
symtab[1081]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,0b1001,-2},[esp-16]}
symtab[1082]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,326/#00402528,string,`%s[%d..%d]`}
symtab[1083]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,327/#0040252C,string,`{`}
symtab[1084]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,328/#00402530,string,`}`}
symtab[1085]:{tnr,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,329/#00402534,string,`tnr\"'0e`}
symtab[1086]:{-1,S_TVar,0,(S_set+K_Fres),0,0,0b1001,{0b1001,0,0,integer,-2},(eax)}
symtab[1087]:{allascii,S_Func,2,(S_used+K_used+K_wdb),592,1103,{70,8},1088,1,10,#0046BEAD}
symtab[1088]:{x,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),884,1089,string,{sequence,MININT,MAXINT,object,-2},[esp]}
symtab[1089]:{c,S_TVar,2,(S_used+S_set+K_wdb),886,1090,integer,{integer,MININT,MAXINT,object,-1},[esp-4]}
symtab[1090]:{jstart,S_TVar,2,(S_used+S_set+K_used+K_aod+K_wdb),0,1091,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[1091]:{-1,S_TVar,0,(S_set),0,1092,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[1092]:{i,S_TVar,2,(S_used+S_set+S_for+K_wdb),1056,1093,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[1093]:{-1,S_TVar,0,(S_set),0,1094,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[1094]:{j,S_TVar,2,(S_used+S_set+S_for+K_wdb),828,1097,integer,{integer,0,MAXLEN,object,-1},[esp-24]}
symtab[1095]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,330/#00402538,string,`\"'`}
symtab[1096]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,331/#0040253C,string,{9,10,13,92,34,39,0,27}}
symtab[1097]:{-1,S_TVar,0,(S_set),0,1098,integer,{integer,0,255,object,-1},[esp-28]}
symtab[1098]:{-1,S_TVar,0,(S_set),0,1099,sequence,{T_Dsq,MININT,MAXINT,object,-2},[esp-32]}
symtab[1099]:{-1,S_TVar,0,(S_set),0,0,string,{sequence,MININT,MAXINT,integer,-2},[esp-36]}
symtab[1100]:{cdi_filename,S_GVar,2,(S_used+S_set+K_wdb),0,332/#00402540,string,{object,MININT,MAXINT,object,-2},0}
symtab[1101]:{cdi_varname,S_GVar,2,(S_used+S_set+K_wdb),0,333/#00402544,string,{string,MININT,MAXINT,integer,-2},0}
symtab[1102]:{-1,S_TVar,0,(S_set+K_Fres),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,object,2},(eax)}
symtab[1103]:{cdi,S_Func,2,(S_used+K_used+K_wdb),0,1137,{70,8,8,1,1,15,12},1104,6,28,#0046A78B}
symtab[1104]:{name,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),1077,1105,string,{string,MININT,MAXINT,integer,-2},[esp]}
symtab[1105]:{prev,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),1076,1106,string,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1106]:{prst,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),1078,1107,integer,{integer,MININT,MAXINT,object,-1},[esp-8]}
symtab[1107]:{prdx,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),1079,1108,integer,{integer,-1,MAXLEN,object,-1},[esp-12]}
symtab[1108]:{o,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),1061,1109,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[1109]:{idii,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),1069,1110,sequence,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[1110]:{this,S_TVar,2,(S_used+S_set+K_wdb),0,1111,object,{object,MININT,MAXINT,object,-2},[esp-24]}
symtab[1111]:{namedx,S_TVar,2,(S_used+S_set+K_wdb),0,1112,string,{string,MININT,MAXINT,integer,-2},[esp-28]}
symtab[1112]:{newprst,S_TVar,2,(S_used+S_set+K_wdb),0,1113,integer,{object,MININT,MAXINT,object,-2},[esp-32]}
symtab[1113]:{lo,S_TVar,2,(S_used+S_set+K_wdb),0,1114,integer,{integer,0,MAXLEN,object,-1},[esp-36]}
symtab[1114]:{lp,S_TVar,2,(S_used+S_set+K_wdb),0,1115,integer,{atom,MININT,MAXINT,object,-1},[esp-40]}
symtab[1115]:{lt,S_TVar,2,(S_used+S_set+K_wdb),0,1116,integer,{atom,MININT,MAXINT,object,-1},[esp-44]}
symtab[1116]:{dotdot,S_TVar,2,(S_used+S_set+K_used+K_aod+K_wdb),0,1117,integer,{integer,0,1,object,-1},[esp-48]}
symtab[1117]:{stringo,S_TVar,2,(S_used+S_set+K_used+K_aod+K_wdb),0,1118,integer,{integer,0,1,object,-1},[esp-52]}
symtab[1118]:{wasstacklen,S_TVar,2,(S_used+S_set+K_wdb),0,1119,integer,{integer,0,MAXLEN,object,-1},[esp-56]}
symtab[1119]:{-1,S_TVar,0,(S_set),0,1121,integer,{integer,0,MAXLEN,object,-1},[esp-60]}
symtab[1120]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,334/#00402548,string,`'\\'`}
symtab[1121]:{-1,S_TVar,0,(S_set),0,1123,string,{string,MININT,MAXINT,integer,-2},[esp-64]}
symtab[1122]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,335/#0040254C,string,`.0`}
symtab[1123]:{-1,S_TVar,0,(S_set),0,1124,T_Dsq,{0b0101,0,0,0b1001,2},[esp-68]}
symtab[1124]:{i,S_TVar,2,(S_used+S_set+S_for+K_wdb),1092,1125,integer,{integer,0,MAXLEN,object,-1},[esp-72]}
symtab[1125]:{-1,S_TVar,0,(S_set),1126,1126,object,{object,MININT,MAXINT,object,-2},[esp-76]}
symtab[1126]:{-1,S_TVar,0,(S_set),0,1127,object,{object,MININT,MAXINT,object,-2},[esp-80]}
symtab[1127]:{-1,S_TVar,0,(S_set),0,1128,sequence,{object,MININT,MAXINT,object,-2},[esp-84]}
symtab[1128]:{-1,S_TVar,0,(S_set),0,1129,integer,{integer,0,MAXLEN,object,-1},[esp-88]}
symtab[1129]:{-1,S_TVar,0,(S_set),1135,1130,atom,{atom,MININT,MAXINT,object,-1},[esp-92]}
symtab[1130]:{-1,S_TVar,0,(S_set),0,1132,T_Dsq,{0b0101,0,0,0b1001,2},[esp-96]}
symtab[1131]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,336/#00402550,string,`..`}
symtab[1132]:{-1,S_TVar,0,(S_set),0,1135,T_Dsq,{0b0101,0,0,object,2},[esp-100]}
symtab[1133]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,337/#00402554,string,`dict.e`}
symtab[1134]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,338/#00402558,string,`trees`}
symtab[1135]:{-1,S_TVar,0,(S_set),0,1136,atom,{atom,MININT,MAXINT,object,-1},[esp-104]}
symtab[1136]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,object,-2},[esp-108]}
symtab[1137]:{clever_dump,S_Proc,2,(S_used+K_used+K_wdb),0,1152,{80,8,15},1138,2,10,#0046A255}
symtab[1138]:{name,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),1104,1139,string,{sequence,MININT,MAXINT,object,-2},[esp]}
symtab[1139]:{o,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),1108,1140,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1140]:{prst,S_TVar,2,(S_used+S_set+K_wdb),1106,1141,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1141]:{s,S_TVar,2,(S_used+S_set+K_wdb),896,1142,string,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[1142]:{-1,S_TVar,0,(S_set),0,1143,sequence,{sequence,MININT,MAXINT,object,2},[esp-16]}
symtab[1143]:{-1,S_TVar,0,(S_set),0,1144,T_Dsq,{0b0101,0,0,object,-2},[esp-20]}
symtab[1144]:{-1,S_TVar,0,(S_set),0,1145,T_Dsq,{T_Dsq,MININT,MAXINT,integer,1},[esp-24]}
symtab[1145]:{l_printstack,S_TVar,2,(S_used+S_set+K_wdb),0,1146,sequence,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[1146]:{-1,S_TVar,0,(S_set),0,1147,integer,{integer,0,MAXLEN,object,-1},[esp-32]}
symtab[1147]:{i,S_TVar,2,(S_used+S_set+S_for+K_wdb),1124,0,integer,{integer,0,MAXLEN,object,-1},[esp-36]}
symtab[1148]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,339/#0040255C,string,"    %s = %s\n"}
symtab[1149]:{lines,S_GVar,2,(S_used+S_set+K_wdb),0,340/#00402560,integer,{atom,MININT,MAXINT,object,-1},0}
symtab[1150]:{crash_msg,S_GVar,2,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,341/#00402564,object,{object,MININT,MAXINT,object,-2},0}
symtab[1151]:{batchmode,S_GVar,2,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,342/#00402568,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[1152]:{putz,S_Proc,2,(S_used+K_used+K_wdb),0,1165,{80,8,15,1},1153,3,7,#0046C0EC}
symtab[1153]:{name,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),1138,1154,string,{sequence,MININT,MAXINT,object,-2},[esp]}
symtab[1154]:{o,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),1139,1155,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1155]:{novalue,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),0,1156,integer,{integer,MININT,MAXINT,object,-1},[esp-8]}
symtab[1156]:{s,S_TVar,2,(S_used+S_set+K_wdb),1141,1162,string,{0b1101,0,0,object,-2},[esp-12]}
symtab[1157]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,343/#0040256C,string,`<novalue>`}
symtab[1158]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,344/#00402570,string,`*** INVALID REF ***`}
symtab[1159]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,345/#00402574,string,`*** CORRUPT TYPE BYTE ***`}
symtab[1160]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,346/#00402578,string,`*** INVALID ??? ***`}
symtab[1161]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,347/#0040257C,integer,122}
symtab[1162]:{-1,S_TVar,0,(S_set),0,1163,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[1163]:{-1,S_TVar,0,(S_set),0,1164,atom,{integer,-805306246,122,object,-1},[esp-20]}
symtab[1164]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,string,2},[esp-24]}
symtab[1165]:{put2,S_Proc,2,(S_used+K_used+K_wdb),0,1195,{80,8},1166,1,4,#0046C44A}
symtab[1166]:{emsg,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),0,1167,string,{sequence,MININT,MAXINT,object,-2},[esp]}
symtab[1167]:{-1,S_TVar,0,(S_set),0,1169,integer,{integer,0,MAXLEN,object,-1},[esp-4]}
symtab[1168]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,348/#00402580,string,"?? length 0 crash_msg ??\n"}
symtab[1169]:{-1,S_TVar,0,(S_set),0,1170,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1170]:{-1,S_TVar,0,(S_set),0,0,string,{string,MININT,MAXINT,integer,-2},[esp-12]}
symtab[1171]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,349/#00402584,integer,999}
symtab[1172]:{swod,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),0,350/#00402588,integer,0}
symtab[1173]:{S_Name,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),0,351/#0040258C,integer,1}
symtab[1174]:{S_NTyp,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),1252,352/#00402590,integer,2}
symtab[1175]:{S_FPno,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),0,353/#00402594,integer,3}
symtab[1176]:{S_State,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),0,354/#00402598,integer,4}
symtab[1177]:{S_Slink,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),0,355/#0040259C,integer,6}
symtab[1178]:{S_Tidx,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),0,356/#004025A0,integer,9}
symtab[1179]:{S_Parm1,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),0,357/#004025A4,integer,8}
symtab[1180]:{S_il,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),1256,358/#004025A8,integer,11}
symtab[1181]:{S_ltab,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),0,359/#004025AC,integer,12}
symtab[1182]:{S_1stl,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),0,360/#004025B0,integer,13}
symtab[1183]:{S_GVar2,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),0,361/#004025B4,integer,2}
symtab[1184]:{S_TVar3,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),0,362/#004025B8,integer,3}
symtab[1185]:{S_Type,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),1257,363/#004025BC,integer,6}
symtab[1186]:{K_wdb,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),0,364/#004025C0,integer,256}
symtab[1187]:{T_pathset,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),0,365/#004025C4,integer,16}
symtab[1188]:{T_fileset,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,366/#004025C8,integer,17}
symtab[1189]:{T_cmdlnflg,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,367/#004025CC,integer,19}
symtab[1190]:{T_maintls,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,368/#004025D0,integer,21}
symtab[1191]:{T_EBP,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,369/#004025D4,integer,22}
symtab[1192]:{T_ds4,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,370/#004025D8,integer,23}
symtab[1193]:{T_const1,S_Const,2,(S_used+S_set+K_wdb+K_noclr+K_lit),1259,371/#004025DC,integer,26}
symtab[1194]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,MININT,MAXINT,object,-1},(eax)}
symtab[1195]:{convert_offset,S_Func,2,(S_used+K_used+K_wdb),0,1219,{70,3,12},1196,2,20,#00461C7F}
symtab[1196]:{era,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),0,1197,atom,{atom,MININT,MAXINT,object,-1},[esp]}
symtab[1197]:{sr,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),0,1198,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1198]:{lineno,S_TVar,2,(S_used+S_set+K_wdb),0,1199,integer,{integer,MININT,MAXINT,object,-1},[esp-8]}
symtab[1199]:{linetab,S_TVar,2,(S_used+S_set+K_wdb),0,1200,sequence,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[1200]:{-1,S_TVar,0,(S_set),0,1201,T_Dsq,{T_Dsq,MININT,MAXINT,object,0},[esp-16]}
symtab[1201]:{lastline,S_TVar,2,(S_used+S_set+K_wdb),0,1202,integer,{integer,MININT,MAXINT,object,-1},[esp-20]}
symtab[1202]:{returnoffset,S_TVar,2,(S_used+S_set+K_wdb),0,1203,atom,{atom,MININT,MAXINT,object,-1},[esp-24]}
symtab[1203]:{-1,S_TVar,0,(S_set),0,1204,object,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[1204]:{thisline,S_TVar,2,(S_used+S_set+K_wdb),0,1205,integer,{integer,MININT,MAXINT,object,-1},[esp-32]}
symtab[1205]:{linenxt,S_TVar,2,(S_used+S_set+K_wdb),0,1206,integer,{atom,MININT,MAXINT,object,-1},[esp-36]}
symtab[1206]:{skip,S_TVar,2,(S_used+S_set+K_wdb),0,1207,integer,{atom,MININT,MAXINT,object,-1},[esp-40]}
symtab[1207]:{base,S_TVar,2,(S_used+S_set+K_wdb),653,1208,integer,{atom,MININT,MAXINT,object,-1},[esp-44]}
symtab[1208]:{lti,S_TVar,2,(S_used+S_set+K_wdb),0,1209,integer,{atom,MININT,MAXINT,object,-1},[esp-48]}
symtab[1209]:{tmp,S_TVar,2,(S_used+S_set+K_wdb),1037,1210,integer,{integer,MININT,MAXINT,object,-1},[esp-52]}
symtab[1210]:{-1,S_TVar,0,(S_set),0,1211,integer,{integer,0,MAXLEN,object,-1},[esp-56]}
symtab[1211]:{i,S_TVar,2,(S_used+S_set+S_for+K_wdb),1147,1212,integer,{integer,0,MAXLEN,object,-1},[esp-60]}
symtab[1212]:{-1,S_TVar,0,(S_set),0,1213,integer,{integer,0,805306372,object,-1},[esp-64]}
symtab[1213]:{-1,S_TVar,0,(S_set),0,1216,atom,{atom,MININT,MAXINT,object,-1},[esp-68]}
symtab[1214]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,372/#004025E0,integer,32767}
symtab[1215]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,373/#004025E4,integer,16777216}
symtab[1216]:{-1,S_TVar,0,(S_set),1217,1217,atom,{atom,MININT,MAXINT,object,-1},[esp-72]}
symtab[1217]:{-1,S_TVar,0,(S_set),1213,0,atom,{atom,MININT,MAXINT,object,-1},[esp-76]}
symtab[1218]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,374/#004025E8,T_N,4294967296}
symtab[1219]:{die,S_Proc,2,(S_used+K_used+K_wdb),0,1221,{80},0,0,0,#004620D6}
symtab[1220]:{throwee,S_GVar,2,(S_used+S_set+K_wdb),0,375/#004025EC,object,{object,MININT,MAXINT,object,-2},0}
symtab[1221]:{throw,S_Proc,2,(S_used+K_used+K_wdb+K_ridt),0,1250,{80,15,15},1222,1,14,#0046116B}
symtab[1222]:{e,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr+K_asmm),670,1223,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1223]:{user_data,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,1224,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1224]:{-1,S_TVar,0,(S_set),0,1225,T_Dsq,{T_Dsq,MININT,MAXINT,integer,-2},[esp-8]}
symtab[1225]:{-1,S_TVar,0,(S_set),0,1226,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[1226]:{-1,S_TVar,0,(S_set),0,1227,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[1227]:{symtab,S_TVar,2,(S_used+S_set+K_wdb+K_asmm),459,1228,sequence,{sequence,MININT,MAXINT,object,-2},[esp-20]}
symtab[1228]:{rid,S_TVar,2,(S_used+S_set+K_wdb+K_asmm),473,1229,integer,{atom,MININT,MAXINT,object,-2},[esp-24]}
symtab[1229]:{name,S_TVar,2,(S_used+S_set+K_wdb),1153,1230,object,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[1230]:{fno,S_TVar,2,(S_used+S_set+K_wdb),0,1232,integer,{object,MININT,MAXINT,object,-2},[esp-32]}
symtab[1231]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,376/#004025F0,string,`?? (fno=%d)`}
symtab[1232]:{-1,S_TVar,0,(S_set),0,1233,string,{0b1001,0,0,integer,-2},[esp-36]}
symtab[1233]:{-1,S_TVar,0,(S_set),1226,1235,object,{object,MININT,MAXINT,object,-2},[esp-40]}
symtab[1234]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,377/#004025F4,string,`?? (rid=%d)`}
symtab[1235]:{addr,S_TVar,2,(S_used+S_set+K_wdb+K_asmm),778,1236,atom,{atom,MININT,MAXINT,object,-2},[esp-44]}
symtab[1236]:{lineno,S_TVar,2,(S_used+S_set+K_wdb),1198,1237,integer,{integer,MININT,MAXINT,object,-1},[esp-48]}
symtab[1237]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-52]}
symtab[1238]:{or_ebp,S_GVar,2,(S_used+S_set+K_wdb+K_asmm),0,378/#004025F8,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[1239]:{or_esp,S_GVar,2,(S_used+S_set+K_wdb+K_asmm),0,379/#004025FC,atom,{atom,MININT,MAXINT,object,-2},0}
symtab[1240]:{xceptn,S_GVar,2,(S_used+S_set+K_wdb+K_asmm),0,380/#00402600,atom,{atom,MININT,MAXINT,object,-2},0}
symtab[1241]:{xcepta,S_GVar,2,(S_used+S_set+K_wdb+K_asmm),0,381/#00402604,atom,{atom,MININT,MAXINT,object,-2},0}
symtab[1242]:{or_eax,S_GVar,2,(S_used+S_set+K_wdb+K_asmm),0,382/#00402608,atom,{atom,MININT,MAXINT,object,-2},0}
symtab[1243]:{or_ecx,S_GVar,2,(S_used+S_set+K_wdb+K_asmm),0,383/#0040260C,atom,{atom,MININT,MAXINT,object,-2},0}
symtab[1244]:{or_era,S_GVar,2,(S_used+S_set+K_wdb+K_asmm),0,384/#00402610,atom,{atom,MININT,MAXINT,object,-2},0}
symtab[1245]:{or_edx,S_GVar,2,(S_used+S_set+K_wdb+K_asmm),0,385/#00402614,atom,{atom,MININT,MAXINT,object,-2},0}
symtab[1246]:{or_esi,S_GVar,2,(S_used+S_set+K_wdb+K_asmm),0,386/#00402618,atom,{atom,MININT,MAXINT,object,-2},0}
symtab[1247]:{or_edi,S_GVar,2,(S_used+S_set+K_wdb+K_asmm),0,387/#0040261C,atom,{atom,MININT,MAXINT,object,-2},0}
symtab[1248]:{ds4,S_GVar,2,(S_used+S_set+K_wdb),0,388/#00402620,integer,{object,MININT,MAXINT,object,-2},0}
symtab[1249]:{-1,S_TVar,0,(S_set+K_Fres),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,object,2},(eax)}
symtab[1250]:{getGvarValue,S_Func,2,(S_used+K_used+K_wdb),0,1256,{70,1},1251,1,4,#0046C721}
symtab[1251]:{gidx,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),0,1252,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1252]:{novalue,S_TVar,2,(S_used+S_set+K_wdb+K_asmm),1155,1253,integer,{atom,MININT,MAXINT,object,-2},[esp-4]}
symtab[1253]:{res,S_TVar,2,(S_used+S_set+K_wdb+K_asmm),844,1254,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1254]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,object,2},[esp-12]}
symtab[1255]:{-1,S_TVar,0,(S_set+K_Fres),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,object,2},(eax)}
symtab[1256]:{getTvarValue,S_Func,2,(S_used+K_used+K_wdb),0,1264,{70,1},1257,1,4,#0046C60C}
symtab[1257]:{tidx,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),0,1258,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1258]:{novalue,S_TVar,2,(S_used+S_set+K_wdb+K_asmm),1252,1259,integer,{atom,MININT,MAXINT,object,-2},[esp-4]}
symtab[1259]:{res,S_TVar,2,(S_used+S_set+K_wdb+K_asmm),1253,1260,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1260]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,object,2},[esp-12]}
symtab[1261]:{vmax,S_GVar,2,(S_used+S_set+K_wdb+K_noclr),0,389/#00402624,integer,{integer,MININT,MAXINT,object,-1},0}
symtab[1262]:{vmap,S_GVar,2,(S_used+S_set+K_wdb),0,390/#00402628,sequence,{sequence,MININT,MAXINT,object,-2},0}
symtab[1263]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[1264]:{varIdx,S_Func,2,(S_used+K_used+K_wdb),0,1292,{70,3,1,12},1265,3,14,#0046C837}
symtab[1265]:{addr,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),1235,1266,atom,{atom,MININT,MAXINT,object,-1},[esp]}
symtab[1266]:{rid,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),1228,1267,integer,{atom,MININT,MAXINT,object,-1},[esp-4]}
symtab[1267]:{symtab,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),1227,1268,sequence,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1268]:{gvar0,S_TVar,2,(S_used+S_set+K_wdb+K_asmm),0,1269,integer,{atom,MININT,MAXINT,object,-2},[esp-12]}
symtab[1269]:{maxgvar,S_TVar,2,(S_used+S_set+K_wdb+K_asmm),0,1270,integer,{atom,MININT,MAXINT,object,-2},[esp-16]}
symtab[1270]:{varno,S_TVar,2,(S_used+S_set+K_wdb),0,1271,integer,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[1271]:{tidx,S_TVar,2,(S_used+S_set+K_wdb),1257,1272,integer,{atom,MININT,MAXINT,object,-1},[esp-24]}
symtab[1272]:{sr,S_TVar,2,(S_used+S_set+K_wdb),1197,1273,object,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[1273]:{nTyp,S_TVar,2,(S_used+S_set+K_wdb),0,1274,integer,{object,MININT,MAXINT,object,-2},[esp-32]}
symtab[1274]:{-1,S_TVar,0,(S_set),0,1275,atom,{atom,MININT,MAXINT,object,-1},[esp-36]}
symtab[1275]:{-1,S_TVar,0,(S_set),0,1277,object,{object,MININT,MAXINT,object,-2},[esp-40]}
symtab[1276]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,391/#0040262C,string,"bad varno(%d)\n"}
symtab[1277]:{-1,S_TVar,0,(S_set),0,1278,T_Dsq,{T_Dsq,MININT,MAXINT,integer,-2},[esp-44]}
symtab[1278]:{-1,S_TVar,0,(S_set),0,1282,integer,{integer,0,MAXLEN,object,-1},[esp-48]}
symtab[1279]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,392/#00402630,string,"pdiag.e/VarIdx: bad rid(%d)\n"}
symtab[1280]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,393/#00402634,string,"pdiag.e/VarIdx:atom(symtab[%d])!\n"}
symtab[1281]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,394/#00402638,string,"pdiag.e/VarIdx:bad type(symtab[%d][S_NTyp]=%d)!\n"}
symtab[1282]:{-1,S_TVar,0,(S_set),1274,0,atom,{atom,MININT,MAXINT,object,-1},[esp-52]}
symtab[1283]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,395/#0040263C,string,"pdiag.e/VarIdx:bad S_Parm1/S_link chain (varno=%d)\n"}
symtab[1284]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,396/#00402640,string,"pdiag.e:atom(symtab[%d])!\n"}
symtab[1285]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,397/#00402644,string,"pdiag.e/VarIdx:bad type(symtab[%d][S_NTyp](%d)!=S_TVar3)\n"}
symtab[1286]:{crashfile,S_GVar,2,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,398/#00402648,object,{object,MININT,MAXINT,object,-2},0}
symtab[1287]:{diaglooping,S_GVar,2,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,399/#0040264C,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[1288]:{ecode,S_Const,2,(S_used+S_set+K_noclr+K_lit),1223,400/#00402650,string,`diag looping, error code is `}
symtab[1289]:{erais,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,401/#00402654,string,`, era is #`}
symtab[1290]:{msg_id,S_GVar,2,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,402/#00402658,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[1291]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[1292]:{addrS,S_Func,2,(S_used+K_used+K_wdb),0,1296,{70,3},1293,1,1,#0046C5AC}
symtab[1293]:{a,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp]}
symtab[1294]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,403/#0040265C,string,`%08x`}
symtab[1295]:{rbldrqd,S_GVar,2,(S_used+S_set+K_wdb+K_noclr),0,404/#00402660,integer,{integer,0,1,object,-1},1}
symtab[1296]:{puts1,S_Proc,18,(S_used+S_set+K_used+K_wdb+K_gbl+K_ridt),0,1298,{80,8},1297,1,1,#00442136}
symtab[1297]:{s,S_TVar,18,(S_used+S_set+K_used+K_wdb+K_othr),1156,0,string,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1298]:{puthex32,S_Proc,18,(S_used+S_set+K_used+K_wdb+K_gbl+K_ridt),0,1301,{80,3,1},1299,1,2,#00442114}
symtab[1299]:{a,S_TVar,18,(S_used+S_set+K_used+K_wdb+K_othr),1293,1300,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1300]:{showcr,S_TVar,18,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,0,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1301]:{putsint,S_Proc,18,(S_used+S_set+K_used+K_wdb+K_gbl+K_ridt),0,1304,{80,1,1},1302,1,2,#004420F2}
symtab[1302]:{i,S_TVar,18,(S_used+S_set+K_used+K_wdb+K_othr),1211,1303,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1303]:{showcr,S_TVar,18,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),1300,0,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1304]:{getc0,S_Proc,18,(S_used+S_set+K_used+K_wdb+K_gbl+K_ridt),0,1306,{80},0,0,0,#004420E8}
symtab[1305]:{crash_rtn,S_GVar,2,(S_used+S_set+K_wdb+K_noclr),0,405/#00402664,object,{0b1101,-1,-1,object,-2},-1}
symtab[1306]:{set_crash_routine,S_Proc,2,(S_used+K_used+K_wdb+K_ridt),0,1308,{80,1},1307,1,1,#00461100}
symtab[1307]:{rid,S_TVar,2,(S_used+S_set+K_used+K_wdb+K_othr),1266,0,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1308]:{diag,S_Proc,2,(S_used+K_used+K_wdb),0,1625,{80},1309,0,78,#0046433C}
symtab[1309]:{symtab,S_TVar,2,(S_used+S_set+K_wdb+K_asmm),1267,1310,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1310]:{si,S_TVar,2,(S_used+S_set+K_wdb),460,1311,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1311]:{sp,S_TVar,2,(S_used+S_set+K_wdb),0,1312,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1312]:{name,S_TVar,2,(S_used+S_set+K_wdb),1229,1313,object,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[1313]:{o,S_TVar,2,(S_used+S_set+K_wdb),1154,1314,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[1314]:{lineno,S_TVar,2,(S_used+S_set+K_wdb),1236,1315,integer,{integer,MININT,MAXINT,object,-1},[esp-20]}
symtab[1315]:{fileno,S_TVar,2,(S_used+S_set+K_wdb),0,1316,integer,{integer,MININT,MAXINT,object,-1},[esp-24]}
symtab[1316]:{fpno,S_TVar,2,(S_used+S_set+K_wdb),0,1317,integer,{integer,MININT,MAXINT,object,-1},[esp-28]}
symtab[1317]:{sNTyp,S_TVar,2,(S_used+S_set+K_wdb),0,1318,integer,{integer,MININT,MAXINT,object,-1},[esp-32]}
symtab[1318]:{c,S_TVar,2,(S_used+S_set+K_wdb),1089,1319,integer,{integer,MININT,MAXINT,object,-1},[esp-36]}
symtab[1319]:{TchkRetAddr,S_TVar,2,(S_used+S_set+K_wdb+K_asmm),0,1320,atom,{atom,MININT,MAXINT,object,-2},[esp-40]}
symtab[1320]:{cb_ret_addr,S_TVar,2,(S_used+S_set+K_wdb+K_asmm),0,1321,atom,{atom,MININT,MAXINT,object,-2},[esp-44]}
symtab[1321]:{cf_ret_addr,S_TVar,2,(S_used+S_set+K_wdb+K_asmm),0,1322,atom,{atom,MININT,MAXINT,object,-2},[esp-48]}
symtab[1322]:{msg,S_TVar,2,(S_used+S_set+K_wdb),922,1323,sequence,{object,MININT,MAXINT,object,-2},[esp-52]}
symtab[1323]:{wmsg,S_TVar,2,(S_used+S_set+K_wdb),0,1324,sequence,{string,MININT,MAXINT,integer,-2},[esp-56]}
symtab[1324]:{sr,S_TVar,2,(S_used+S_set+K_wdb),1272,1325,sequence,{object,MININT,MAXINT,object,-2},[esp-60]}
symtab[1325]:{filename,S_TVar,2,(S_used+S_set+K_wdb),0,1326,sequence,{object,MININT,MAXINT,object,-2},[esp-64]}
symtab[1326]:{pathset,S_TVar,2,(S_used+S_set+K_wdb),0,1327,sequence,{object,MININT,MAXINT,object,-2},[esp-68]}
symtab[1327]:{x6,S_TVar,2,(S_used+S_set+K_wdb),0,1328,sequence,{string,MININT,MAXINT,integer,-2},[esp-72]}
symtab[1328]:{p,S_TVar,2,(S_used+S_set+K_wdb),956,1329,integer,{object,MININT,MAXINT,object,-2},[esp-76]}
symtab[1329]:{N,S_TVar,2,(S_used+S_set+K_wdb),0,1330,atom,{atom,MININT,MAXINT,object,-1},[esp-80]}
symtab[1330]:{rid,S_TVar,2,(S_used+S_set+K_wdb),1307,1331,atom,{atom,MININT,MAXINT,object,-1},[esp-84]}
symtab[1331]:{from_addr,S_TVar,2,(S_used+S_set+K_wdb),0,1332,atom,{atom,MININT,MAXINT,object,-1},[esp-88]}
symtab[1332]:{ehand,S_TVar,2,(S_used+S_set+K_wdb),0,1333,atom,{atom,MININT,MAXINT,object,-1},[esp-92]}
symtab[1333]:{ret_addr,S_TVar,2,(S_used+S_set+K_wdb),0,1334,atom,{atom,MININT,MAXINT,object,-1},[esp-96]}
symtab[1334]:{prev_ebp,S_TVar,2,(S_used+S_set+K_wdb),0,1335,atom,{atom,MININT,MAXINT,object,-1},[esp-100]}
symtab[1335]:{ebp_root,S_TVar,2,(S_used+S_set+K_wdb),0,1336,atom,{atom,MININT,MAXINT,object,-1},[esp-104]}
symtab[1336]:{vsb_prev,S_TVar,2,(S_used+S_set+K_wdb),0,1337,atom,{atom,MININT,MAXINT,object,-1},[esp-108]}
symtab[1337]:{vsb_next,S_TVar,2,(S_used+S_set+K_wdb),0,1338,atom,{atom,MININT,MAXINT,object,-1},[esp-112]}
symtab[1338]:{vsb_magic,S_TVar,2,(S_used+S_set+K_wdb),0,1339,atom,{atom,MININT,MAXINT,object,-1},[esp-116]}
symtab[1339]:{magicok,S_TVar,2,(S_used+S_set+K_wdb),0,1340,string,?,[esp-120]}
symtab[1340]:{abortcode,S_TVar,2,(S_used+S_set+K_wdb),0,1341,integer,{integer,MININT,MAXINT,object,-1},[esp-124]}
symtab[1341]:{rtype,S_TVar,2,(S_used+S_set+K_wdb),0,1342,integer,{integer,0,3,object,-1},[esp-128]}
symtab[1342]:{tidx,S_TVar,2,(S_used+S_set+K_wdb),1271,1343,integer,{atom,MININT,MAXINT,object,-1},[esp-132]}
symtab[1343]:{varno,S_TVar,2,(S_used+S_set+K_wdb),1270,1344,integer,{object,MININT,MAXINT,object,-2},[esp-136]}
symtab[1344]:{novalue,S_TVar,2,(S_used+S_set+K_wdb),1258,1345,integer,{object,MININT,MAXINT,object,-2},[esp-140]}
symtab[1345]:{msg2,S_TVar,2,(S_used+S_set+K_wdb+K_asmm),0,1346,string,{string,MININT,MAXINT,object,-2},[esp-144]}
symtab[1346]:{symtabptr,S_TVar,2,(S_used+S_set+K_wdb),0,1347,atom,{atom,MININT,MAXINT,object,-1},[esp-148]}
symtab[1347]:{gvarptr,S_TVar,2,(S_used+S_set+K_wdb),0,1348,atom,{atom,MININT,MAXINT,object,-1},[esp-152]}
symtab[1348]:{msgs,S_TVar,2,(S_used+S_set+K_wdb),0,1468,sequence,{T_Dsq,MININT,MAXINT,0b1001,125},[esp-156]}
symtab[1349]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,406/#00402668,string,"type check failure, %s is %s\n"}
symtab[1350]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,407/#0040266C,string,"attempt to divide by 0\n"}
symtab[1351]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,408/#00402670,string,"true/false condition must be an ATOM\n"}
symtab[1352]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,409/#00402674,string,"attempt to subscript an atom\n"}
symtab[1353]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,410/#00402678,string,"subscript is not an integer\n"}
symtab[1354]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,411/#0040267C,string,"index %d out of bounds, assigning to sequence length %d\n"}
symtab[1355]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,412/#00402680,string,"slice start is less than 1 (%d)\n"}
symtab[1356]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,413/#00402684,string,"slice end is not an integer\n"}
symtab[1357]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,414/#00402688,string,"slice length is negative [%d..%d]\n"}
symtab[1358]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,415/#0040268C,string,"slice starts past end of sequence (%d > %d)\n"}
symtab[1359]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,416/#00402690,string,"slice ends past end of sequence (%d > %d)\n"}
symtab[1360]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,417/#00402694,string,"program aborted\n"}
symtab[1361]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,418/#00402698,string,"attempt to exit a function without returning a value\n"}
symtab[1362]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,419/#0040269C,string,"sequence op (%s) attempted (use sq_%s?)\n"}
symtab[1363]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,420/#004026A0,string,"unrecognised c_func return type\n"}
symtab[1364]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,421/#004026A4,string,"call_backs cannot have optional parameters\n"}
symtab[1365]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,422/#004026A8,string,"sequence op (mul) attempted (use sq_mul?)\n"}
symtab[1366]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,423/#004026AC,string,"sequence op (remainder) attempted (use sq_remainder?)\n"}
symtab[1367]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,424/#004026B0,string,"sequence op (floor) attempted (use sq_floor?)\n"}
symtab[1368]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,425/#004026B4,string,"invalid match start index\n"}
symtab[1369]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,426/#004026B8,string,"invalid find start index\n"}
symtab[1370]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,427/#004026BC,string,"invalid mem_copy length\n"}
symtab[1371]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,428/#004026C0,string,"invalid mem_set length\n"}
symtab[1372]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,429/#004026C4,string,"invalid mem_copy memory address\n"}
symtab[1373]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,430/#004026C8,string,"invalid mem_set memory address\n"}
symtab[1374]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,431/#004026CC,string,"invalid argument type for integer := peek()\n"}
symtab[1375]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,432/#004026D0,string,"argument to rand() must be >= 1\n"}
symtab[1376]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,433/#004026D4,string,"argument to %s() must be an atom (use sq_%s?)\n"}
symtab[1377]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,434/#004026D8,string,"fatal exception %s at #%08x\n"}
symtab[1378]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,435/#004026DC,string,"memory corruption: eax is #%08x, edx is #%08x\n"}
symtab[1379]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,436/#004026E0,string,"heap corruption [era=%08x, edi=%08x]\n"}
symtab[1380]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,437/#004026E4,string,"memory allocation failure\n"}
symtab[1381]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,438/#004026E8,string,"power() function underflow\n"}
symtab[1382]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,439/#004026EC,string,"power() function overflow\n"}
symtab[1383]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,440/#004026F0,string,"length of an atom is not defined\n"}
symtab[1384]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,441/#004026F4,string,"argument to allocate() must be positive integer\n"}
symtab[1385]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,442/#004026F8,string,"argument to free() must be an atom\n"}
symtab[1386]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,443/#004026FC,string,"arguments to mem_copy() must be atoms\n"}
symtab[1387]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,444/#00402700,string,"arguments to mem_set() must be atoms\n"}
symtab[1388]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,445/#00402704,string,"first argument to poke() must be atom\n"}
symtab[1389]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,446/#00402708,string,"abort(%d)\n"}
symtab[1390]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,447/#0040270C,string,"argument to peek() must be atom or sequence of two atoms\n"}
symtab[1391]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,448/#00402710,string,"peek size must be 1|2|4|8\n"}
symtab[1392]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,449/#00402714,string,"attempt to get square root of negative number\n"}
symtab[1393]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,450/#00402718,string,"argument to float32_to_atom() must be sequence of length 4\n"}
symtab[1394]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,451/#0040271C,string,"argument to float64_to_atom() must be sequence of length 8\n"}
symtab[1395]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,452/#00402720,string,"argument to :%LoadMint must be an atom\n"}
symtab[1396]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,453/#00402724,string,"argument to atom_to_float32() must be atom\n"}
symtab[1397]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,454/#00402728,string,"argument to atom_to_float64() must be atom\n"}
symtab[1398]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,455/#0040272C,string,"HeapFree error code [%08x]\n"}
symtab[1399]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,456/#00402730,string,"p2js violation: JavaScript does not support string subscript destructuring\n"}
symtab[1400]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,457/#00402734,string,"memory corruption at #%08x (pGtcb*4=#%08x, diff=#%08x)\n"}
symtab[1401]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,458/#00402738,string,"attempt to raise negative number to non-integer power\n"}
symtab[1402]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,459/#0040273C,string,"unhandled exception\n"}
symtab[1403]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,460/#00402740,string,"p2js violation: relies on copy on write semantics\n"}
symtab[1404]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,461/#00402744,string,"invalid file name\n"}
symtab[1405]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,462/#00402748,string,"invalid file number (%d)\n"}
symtab[1406]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,463/#0040274C,string,"wrong file mode for attempted operation\n"}
symtab[1407]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,464/#00402750,string,"file number is not an integer\n"}
symtab[1408]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,465/#00402754,string,"invalid open mode\n"}
symtab[1409]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,466/#00402758,string,"file number %d is not open\n"}
symtab[1410]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,467/#0040275C,string,"second parameter of seek() must be an atom\n"}
symtab[1411]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,468/#00402760,string,"seek fail on open append\n"}
symtab[1412]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,469/#00402764,string,"sequence found in character string\n"}
symtab[1413]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,470/#00402768,string,"invalid lock type\n"}
symtab[1414]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,471/#0040276C,string,"byterange must be {} or pair of atoms\n"}
symtab[1415]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,472/#00402770,string,"crash(`%s`)\n"}
symtab[1416]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,473/#00402774,string,"error in format string\n"}
symtab[1417]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,474/#00402778,string,"insufficient values for (s)printf()\n"}
symtab[1418]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,475/#0040277C,string,"call_func/proc parameter error\n"}
symtab[1419]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,476/#00402780,string,"invalid routine_id(%d)\n"}
symtab[1420]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,477/#00402784,string,"argument to open_dll() must be string\n"}
symtab[1421]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,478/#00402788,string,"define_c_func/proc parameter error\n"}
symtab[1422]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,479/#0040278C,string,"call back routine parameters must all be atoms\n"}
symtab[1423]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,480/#00402790,string,"%c requires an atom value\n"}
symtab[1424]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,481/#00402794,string,"program has run out of memory\n"}
symtab[1425]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,482/#00402798,string,"attempt to get_text() >1GB file\n"}
symtab[1426]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,483/#0040279C,string,"argument to rand() must be an atom\n"}
symtab[1427]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,484/#004027A0,string,"call_back returned non-atom\n"}
symtab[1428]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,485/#004027A4,string,"insufficient parameters in call_func/proc()\n"}
symtab[1429]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,486/#004027A8,string,"argument to call() must be atom\n"}
symtab[1430]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,487/#004027AC,string,"arguments to position() must be integer\n"}
symtab[1431]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,488/#004027B0,string,"call_back parameter must be routine_id or {\'+\',routine_id}\n"}
symtab[1432]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,489/#004027B4,string,"unknown type byte (not 0x12, 0x80, or 0x82)\n"}
symtab[1433]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,490/#004027B8,string,"argument to trace() must be integer 0..3\n"}
symtab[1434]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,491/#004027BC,string,"abort() code must be integer\n"}
symtab[1435]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,492/#004027C0,string,"arguments to c_%sc() must be atoms or strings\n"}
symtab[1436]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,493/#004027C4,string,"too many parameters in call_func/proc()\n"}
symtab[1437]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,494/#004027C8,string,"argument to profile() must be 0 or 1\n"}
symtab[1438]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,495/#004027CC,string,"variable %s has not been assigned a value\n"}
symtab[1439]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,496/#004027D0,string,"text_color error [%08x]\n"}
symtab[1440]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,497/#004027D4,string,"bk_color error [%08x]\n"}
symtab[1441]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,498/#004027D8,string,"heap error [%s]\n"}
symtab[1442]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,499/#004027DC,string,"flush error [%s]\n"}
symtab[1443]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,500/#004027E0,string,"invalid peek memory address\n"}
symtab[1444]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,501/#004027E4,string,"invalid poke memory address\n"}
symtab[1445]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,502/#004027E8,string,"attempt to allocate string of negative length\n"}
symtab[1446]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,503/#004027EC,string,"attempt to raise 0 to power <= 0\n"}
symtab[1447]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,504/#004027F0,string,"attempt to get remainder of a number divided by 0\n"}
symtab[1448]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,505/#004027F4,string,"call back error?\n"}
symtab[1449]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,506/#004027F8,string,"not enough format strings to print data\n"}
symtab[1450]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,507/#004027FC,string,"index %d out of bounds, reading sequence length %d\n"}
symtab[1451]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,508/#00402800,string,"invalid free memory address\n"}
symtab[1452]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,509/#00402804,string,"position error [%d]\n"}
symtab[1453]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,510/#00402808,string,"clear_screen error\n"}
symtab[1454]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,511/#0040280C,string,"bitwise operations are limited to 32-bit numbers\n"}
symtab[1455]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,512/#00402810,string,"second argument of find() must be a sequence\n"}
symtab[1456]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,513/#00402814,string,"second argument of match() must be a sequence\n"}
symtab[1457]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,514/#00402818,string,"sequence to be poked must only contain atoms\n"}
symtab[1458]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,515/#0040281C,string,"argument to sleep() must be atom\n"}
symtab[1459]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,516/#00402820,string,"routine requires %d parameters, not %d\n"}
symtab[1460]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,517/#00402824,string,"routine does not return a value\n"}
symtab[1461]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,518/#00402828,string,"routine returns a value\n"}
symtab[1462]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,519/#0040282C,string,"assertion failure%s\n"}
symtab[1463]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,520/#00402830,string,"for loop error, %s is %s\n"}
symtab[1464]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,521/#00402834,string,"for loop error, limit is %s, step is %s\n"}
symtab[1465]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,522/#00402838,string,"invalid poke size\n"}
symtab[1466]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,523/#0040283C,string,"delete_routine already set\n"}
symtab[1467]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,524/#00402840,string,"not permitted in safe mode\n"}
symtab[1468]:{e14ops,S_TVar,2,(S_used+S_set+K_wdb),0,1483,sequence,{T_Dsq,MININT,MAXINT,string,14},[esp-160]}
symtab[1469]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,525/#00402844,string,`add`}
symtab[1470]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,526/#00402848,string,`sub`}
symtab[1471]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,527/#0040284C,string,`div`}
symtab[1472]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,528/#00402850,string,`mul`}
symtab[1473]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,529/#00402854,string,`remainder`}
symtab[1474]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,530/#00402858,string,`floor`}
symtab[1475]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,531/#0040285C,string,`unary minus`}
symtab[1476]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,532/#00402860,string,`not`}
symtab[1477]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,533/#00402864,string,`and_bits`}
symtab[1478]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,534/#00402868,string,`or_bits`}
symtab[1479]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,535/#0040286C,string,`xor_bits`}
symtab[1480]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,536/#00402870,string,`not_bits`}
symtab[1481]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,537/#00402874,string,`power`}
symtab[1482]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,538/#00402878,string,`xor`}
symtab[1483]:{rtndescs,S_TVar,2,(S_used+S_set+K_wdb),0,1487,sequence,{T_Dsq,MININT,MAXINT,string,3},[esp-164]}
symtab[1484]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,539/#0040287C,string,`type`}
symtab[1485]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,540/#00402880,string,`function`}
symtab[1486]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,541/#00402884,string,`procedure`}
symtab[1487]:{-1,S_TVar,0,(S_set),0,1488,object,{object,MININT,MAXINT,object,-2},[esp-168]}
symtab[1488]:{-1,S_TVar,0,(S_set),0,1489,integer,{integer,0,MAXLEN,object,-1},[esp-172]}
symtab[1489]:{-1,S_TVar,0,(S_set),0,1490,atom,{atom,MININT,MAXINT,object,-1},[esp-176]}
symtab[1490]:{-1,S_TVar,0,(S_set),1489,1491,atom,{atom,MININT,MAXINT,object,-1},[esp-180]}
symtab[1491]:{-1,S_TVar,0,(S_set),0,1492,T_Dsq,{0b0101,0,0,object,2},[esp-184]}
symtab[1492]:{-1,S_TVar,0,(S_set),0,1493,object,{0b0101,0,0,atom,-2},[esp-188]}
symtab[1493]:{-1,S_TVar,0,(S_set),1494,1494,string,{0b1001,0,0,integer,-2},[esp-192]}
symtab[1494]:{-1,S_TVar,0,(S_set),1495,1495,string,{string,MININT,MAXINT,integer,-2},[esp-196]}
symtab[1495]:{-1,S_TVar,0,(S_set),1496,1496,string,{string,MININT,MAXINT,integer,-2},[esp-200]}
symtab[1496]:{-1,S_TVar,0,(S_set),1497,1497,string,?,[esp-204]}
symtab[1497]:{-1,S_TVar,0,(S_set),0,1499,string,?,[esp-208]}
symtab[1498]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,542/#00402888,string,"diag(%d) [**BAD MESSAGE ID**] called\n"}
symtab[1499]:{i,S_TVar,2,(S_used+S_set+S_for+K_wdb),1302,1500,integer,{integer,0,MAXLEN,object,-1},[esp-212]}
symtab[1500]:{-1,S_TVar,0,(S_set),0,1501,object,{object,MININT,MAXINT,object,-2},[esp-216]}
symtab[1501]:{-1,S_TVar,0,(S_set),0,1509,sequence,{sequence,MININT,MAXINT,object,-2},[esp-220]}
symtab[1502]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,543/#0040288C,integer,106}
symtab[1503]:{a32h4,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,544/#00402890,T_N,1073741824}
symtab[1504]:{a64h4,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,545/#00402894,T_N,4.611686018e+18}
symtab[1505]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,546/#00402898,integer,30}
symtab[1506]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,547/#0040289C,integer,131}
symtab[1507]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,548/#004028A0,integer,68}
symtab[1508]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,549/#004028A4,integer,199}
symtab[1509]:{-1,S_TVar,0,(S_set),0,1523,integer,{integer,0,MAXLEN,object,-1},[esp-224]}
symtab[1510]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,550/#004028A8,integer,248}
symtab[1511]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,551/#004028AC,T_N,3221225477}
symtab[1512]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,552/#004028B0,integer,-1073741819}
symtab[1513]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,553/#004028B4,string,`[MEMORY VIOLATION]`}
symtab[1514]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,554/#004028B8,T_N,3221225725}
symtab[1515]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,555/#004028BC,integer,-1073741571}
symtab[1516]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,556/#004028C0,string,`[STACK OVERFLOW]`}
symtab[1517]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,557/#004028C4,string,`#%08x`}
symtab[1518]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,558/#004028C8,string,`???`}
symtab[1519]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,559/#004028CC,string,`???(varno=%d[or_ecx=#%08x])`}
symtab[1520]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,560/#004028D0,string,`???(atom(symtab[%d]))`}
symtab[1521]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,561/#004028D4,string,`subscript`}
symtab[1522]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,562/#004028D8,string,`???(symtab[%d] wrong type)`}
symtab[1523]:{-1,S_TVar,0,(S_set),0,1525,T_Dsq,{0b0101,0,0,object,2},[esp-228]}
symtab[1524]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,563/#004028DC,integer,50}
symtab[1525]:{-1,S_TVar,0,(S_set),0,1535,T_Dsq,{0b0101,0,0,object,-2},[esp-232]}
symtab[1526]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,564/#004028E0,integer,94}
symtab[1527]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,565/#004028E4,string,`???(varno=%d)`}
symtab[1528]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,566/#004028E8,string,`???(symtab[%d][S_name]=%d)`}
symtab[1529]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,567/#004028EC,integer,119}
symtab[1530]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,568/#004028F0,string,`: `}
symtab[1531]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,569/#004028F4,integer,120}
symtab[1532]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,570/#004028F8,string,`init`}
symtab[1533]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,571/#004028FC,string,`limit`}
symtab[1534]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,572/#00402900,string,`step`}
symtab[1535]:{-1,S_TVar,0,(S_set),0,1536,integer,{integer,0,MAXLEN,object,-1},[esp-236]}
symtab[1536]:{-1,S_TVar,0,(S_set),0,1538,T_Dsq,{0b0101,0,0,object,2},[esp-240]}
symtab[1537]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,573/#00402904,integer,55}
symtab[1538]:{-1,S_TVar,0,(S_set),0,1543,T_Dsq,{0b0101,0,0,object,-2},[esp-244]}
symtab[1539]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,574/#00402908,string,"slice end(%d) less than negative length(%d)\n"}
symtab[1540]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,575/#0040290C,string,`???(%d)`}
symtab[1541]:{e108pe,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,576/#00402910,integer,108}
symtab[1542]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,577/#00402914,integer,80}
symtab[1543]:{-1,S_TVar,0,(S_set),1490,1547,atom,{atom,MININT,MAXINT,object,-1},[esp-248]}
symtab[1544]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,578/#00402918,string,`fun`}
symtab[1545]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,579/#0040291C,string,`pro`}
symtab[1546]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,580/#00402920,integer,42}
symtab[1547]:{lm,S_TVar,2,(S_used+S_set+K_wdb),0,1548,integer,{integer,0,MAXLEN,object,-1},[esp-252]}
symtab[1548]:{lt,S_TVar,2,(S_used+S_set+K_wdb),1115,1553,integer,{integer,0,MAXLEN,object,-1},[esp-256]}
symtab[1549]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,581/#00402924,integer,76}
symtab[1550]:{e74dcfpe,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,582/#00402928,integer,74}
symtab[1551]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,583/#0040292C,string,`...`}
symtab[1552]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,584/#00402930,string,"%s (%s)\n"}
symtab[1553]:{error_handler,S_TVar,2,(S_used+S_set+K_wdb+K_asmm),0,1562,integer,{atom,MININT,MAXINT,object,-2},[esp-260]}
symtab[1554]:{sizeof_BHFI64,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,585/#00402934,integer,56}
symtab[1555]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,586/#00402938,string,`oops, pDiagN.e line 3170: rid is`}
symtab[1556]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,587/#0040293C,string,`NUL`}
symtab[1557]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,588/#00402940,string,`NULL`}
symtab[1558]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,589/#00402944,string,`/dev/null`}
symtab[1559]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,590/#00402948,string,`w`}
symtab[1560]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,591/#0040294C,string,`ex.err`}
symtab[1561]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,592/#00402950,string,"pDiagN.e line 398: oops, rid[=%d] out of range[1..%d]\n"}
symtab[1562]:{-1,S_TVar,0,(S_set),1584,1563,object,{object,MININT,MAXINT,object,-2},[esp-264]}
symtab[1563]:{-1,S_TVar,0,(S_set),0,1565,integer,{integer,0,MAXLEN,object,-1},[esp-268]}
symtab[1564]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,593/#00402954,string,"  (warning: lineno of -1 for era of #%08x)\n"}
symtab[1565]:{sfs,S_TVar,2,(S_used+S_set+K_wdb),0,1566,sequence,{object,MININT,MAXINT,object,-2},[esp-272]}
symtab[1566]:{srfn,S_TVar,2,(S_used+S_set+K_wdb),0,1569,integer,{integer,MININT,MAXINT,object,-1},[esp-276]}
symtab[1567]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,594/#00402958,string,`<unknown file>`}
symtab[1568]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,595/#0040295C,string,`(%d)`}
symtab[1569]:{-1,S_TVar,0,(S_set),1562,1573,object,{object,MININT,MAXINT,object,-2},[esp-280]}
symtab[1570]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,596/#00402960,string,`-1 (era=#%s, from_addr=#%s, ret_addr=#%s)`}
symtab[1571]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,597/#00402964,string,`%s%s:%s`}
symtab[1572]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,598/#00402968,string," in %s %s()\n"}
symtab[1573]:{-1,S_TVar,0,(S_set),0,1577,integer,{integer,0,MAXLEN,object,-1},[esp-284]}
symtab[1574]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,599/#0040296C,string,"oops, p(%d) out of bounds(1..%d), pDiagN.e line 3281\n"}
symtab[1575]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,600/#00402970,string,"oops, atom(symtab[%d]), pDiagN.e line 3288\n"}
symtab[1576]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,601/#00402974,string,`%d[!!]`}
symtab[1577]:{-1,S_TVar,0,(S_set),0,1578,T_Dsq,{0b0101,0,0,object,2},[esp-288]}
symtab[1578]:{-1,S_TVar,0,(S_set),0,1583,T_Dsq,{0b0101,0,0,object,2},[esp-292]}
symtab[1579]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,602/#00402978,string," (^^^) call_back from OperatingSystem/sharedlib/asm\n"}
symtab[1580]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,603/#0040297C,string,"pDiagN.e line 3413: oops, lineno=-1/e92/not retD(), era=#%08x\n"}
symtab[1581]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,604/#00402980,string,`... called from `}
symtab[1582]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,605/#00402984,string,"\nGlobal & Local Variables\n"}
symtab[1583]:{-1,S_TVar,0,(S_set),0,1584,integer,{integer,0,MAXLEN,object,-1},[esp-296]}
symtab[1584]:{-1,S_TVar,0,(S_set),0,1587,object,{object,MININT,MAXINT,object,-2},[esp-300]}
symtab[1585]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,606/#00402988,string,"\n %s%s:\n"}
symtab[1586]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,607/#0040298C,string,"    %s = <novalue>\n"}
symtab[1587]:{-1,S_TVar,0,(S_set),0,1593,T_Dsq,{0b0101,0,0,object,-2},[esp-304]}
symtab[1588]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,608/#00402990,string,"--> see %s\n"}
symtab[1589]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,609/#00402994,string,`--> see `}
symtab[1590]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,610/#00402998,integer,-9}
symtab[1591]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,611/#0040299C,string,`Press Enter...`}
symtab[1592]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,612/#004029A0,string,`-nopause`}
symtab[1593]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,65791,object,-1},[esp-308]}
symtab[1594]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,613/#004029A4,string,`error code `}
symtab[1595]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,614/#004029A8,string,`, or_era=#`}
symtab[1596]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,615/#004029AC,string,`, or_ebp=#`}
symtab[1597]:{-1,S_GVar,0,(S_set),0,616/#004029B0,atom,{atom,MININT,MAXINT,object,-1},0}
symtab[1598]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,617/#004029B4,string,`, or_esp=#`}
symtab[1599]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,618/#004029B8,string,"exception #%08x at #%08x, or_era=#%08x, or_ebp=#%08x, or_esp=#%08x\n"}
symtab[1600]:{-1,S_GVar,0,(S_set),0,619/#004029BC,atom,{atom,MININT,MAXINT,object,-1},0}
symtab[1601]:{-1,S_GVar,0,(S_set),0,620/#004029C0,T_Dsq,{T_Dsq,MININT,MAXINT,atom,5},0}
symtab[1602]:{-1,S_Const,2,(S_set+K_noclr+K_lit),0,621/#004029C4,string,"stack(#%08x): %08x, %08x, %08x, %08x\n"}
symtab[1603]:{-1,S_GVar,0,(S_set),0,622/#004029C8,T_Dsq,{T_Dsq,MININT,MAXINT,atom,2},0}
symtab[1604]:{-1,S_GVar,0,(S_set),0,623/#004029CC,object,{T_Dsq,MININT,MAXINT,atom,-2},0}
symtab[1605]:{-1,S_GVar,0,(S_set),0,624/#004029D0,sequence,{T_Dsq,MININT,MAXINT,object,-2},0}
symtab[1606]:{-1,S_GVar,0,(S_set),0,625/#004029D4,atom,{atom,MININT,MAXINT,object,-1},0}
symtab[1607]:{-1,S_GVar,0,(S_set),0,626/#004029D8,atom,{atom,MININT,MAXINT,object,-1},0}
symtab[1608]:{-1,S_GVar,0,(S_set),0,627/#004029DC,T_Dsq,{T_Dsq,MININT,MAXINT,atom,2},0}
symtab[1609]:{-1,S_GVar,0,(S_set),0,628/#004029E0,object,{T_Dsq,MININT,MAXINT,atom,-2},0}
symtab[1610]:{-1,S_GVar,0,(S_set),0,629/#004029E4,sequence,{0b0111,MININT,MAXINT,atom,-2},0}
symtab[1611]:{-1,S_GVar,0,(S_set),0,630/#004029E8,atom,{atom,MININT,MAXINT,object,-1},0}
symtab[1612]:{-1,S_GVar,0,(S_set),0,631/#004029EC,atom,{atom,MININT,MAXINT,object,-1},0}
symtab[1613]:{-1,S_GVar,0,(S_set),0,632/#004029F0,T_Dsq,{T_Dsq,MININT,MAXINT,atom,2},0}
symtab[1614]:{-1,S_GVar,0,(S_set),0,633/#004029F4,object,{T_Dsq,MININT,MAXINT,atom,-2},0}
symtab[1615]:{-1,S_GVar,0,(S_set),0,634/#004029F8,sequence,{0b0111,MININT,MAXINT,atom,-2},0}
symtab[1616]:{-1,S_GVar,0,(S_set),0,635/#004029FC,atom,{atom,MININT,MAXINT,object,-1},0}
symtab[1617]:{-1,S_GVar,0,(S_set),0,636/#00402A00,atom,{atom,MININT,MAXINT,object,-1},0}
symtab[1618]:{-1,S_GVar,0,(S_set),0,637/#00402A04,T_Dsq,{T_Dsq,MININT,MAXINT,atom,2},0}
symtab[1619]:{-1,S_GVar,0,(S_set),0,638/#00402A08,object,{T_Dsq,MININT,MAXINT,atom,-2},0}
symtab[1620]:{-1,S_GVar,0,(S_set),0,639/#00402A0C,sequence,{0b0111,MININT,MAXINT,atom,-2},0}
symtab[1621]:{-1,S_Const,2,(S_used+S_set+K_noclr+K_lit),0,640/#00402A10,string,"uh? (pdiagN.e line 4791)\n"}
symtab[1622]:{x,S_GVar,1,(S_used+K_wdb+K_noclr),0,641/#00402A14,integer,{integer,11,11,object,-1},11}
symtab[1623]:{y,S_GVar,1,(S_used+K_wdb+K_noclr),0,642/#00402A18,integer,{integer,7,7,object,-1},7}
symtab[1624]:{z,S_GVar,1,(S_used+S_set+K_wdb),0,643/#00402A1C,integer,{integer,18,18,object,-1},0}
symtab[1625]:{<tls>,S_Proc,19,(S_used+K_used+K_wdb),0,1626,{80},0,0,0,#00460EF6}
symtab[1626]:{<tls>,S_Proc,20,(S_used+K_used+K_wdb),0,1629,{80},0,0,0,#00460D56}
symtab[1627]:{ma_ip,S_GVar,19,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,644/#00402A20,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[1628]:{-1,S_Const,1,(S_used+S_set+K_noclr+K_lit),0,645/#00402A24,string,`Hello ASM.  I can see you now!`}
symtab[1629]:{<tls>,S_Proc,21,(S_used+K_used+K_wdb),0,1631,{80},0,0,0,#00460A55}
symtab[1630]:{-1,S_GVar,0,(S_set),0,646/#00402A28,T_Dsq,{T_Dsq,MININT,MAXINT,integer,1},0}
symtab[1631]:{<tls>,S_Proc,22,(S_used+K_used+K_wdb),0,1633,{80},0,0,0,#0046066E}
symtab[1632]:{ma_ip,S_GVar,22,(S_used+S_set+K_wdb+K_noclr+K_asmm),2439,647/#00402A2C,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[1633]:{<tls>,S_Proc,23,(S_used+K_used+K_wdb),0,1634,{80},0,0,0,#0046017F}
symtab[1634]:{<tls>,S_Proc,24,(S_used+K_used+K_wdb),0,1635,{80},0,0,0,#0046013E}
symtab[1635]:{<tls>,S_Proc,25,(S_used+K_used+K_wdb),0,1636,{80},0,0,0,#0045F9F1}
symtab[1636]:{<tls>,S_Proc,26,(S_used+K_used+K_wdb),0,1637,{80},0,0,0,#0045F6DE}
symtab[1637]:{<tls>,S_Proc,27,(S_used+K_used+K_wdb),0,1638,{80},0,0,0,#0045F644}
symtab[1638]:{<tls>,S_Proc,28,(S_used+K_used+K_wdb),0,1639,{80},0,0,0,#0045F4E2}
symtab[1639]:{<tls>,S_Proc,29,(S_used+K_used+K_wdb),0,1640,{80},0,0,0,#0045F0BE}
symtab[1640]:{<tls>,S_Proc,30,(S_used+K_used+K_wdb),0,1643,{80},0,0,0,#0045F038}
symtab[1641]:{half,S_Const,29,(S_used+S_set+K_noclr+K_lit),0,648/#00402A30,T_N,0.5}
symtab[1642]:{e14code,S_GVar,29,(S_used+S_set+K_wdb+K_asmm),0,649/#00402A34,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[1643]:{<tls>,S_Proc,31,(S_used+K_used+K_wdb),0,1644,{80},0,0,0,#0045EFE7}
symtab[1644]:{<tls>,S_Proc,32,(S_used+K_used+K_wdb),0,1645,{80},0,0,0,#0045EF3F}
symtab[1645]:{<tls>,S_Proc,33,(S_used+K_used+K_wdb),0,1646,{80},0,0,0,#0045E8EE}
symtab[1646]:{<tls>,S_Proc,34,(S_used+K_used+K_wdb),0,1714,{80},0,0,0,#0045DB44}
symtab[1647]:{INVALID_HANDLE_VALUE,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,650/#00402A38,integer,-1}
symtab[1648]:{STD_INPUT_HANDLE,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,651/#00402A3C,integer,-10}
symtab[1649]:{STD_OUTPUT_HANDLE,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,652/#00402A40,integer,-11}
symtab[1650]:{STD_ERROR_HANDLE,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,653/#00402A44,integer,-12}
symtab[1651]:{FDSIZE32,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,654/#00402A48,integer,8192}
symtab[1652]:{sizeof_CSBI,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,655/#00402A4C,integer,24}
symtab[1653]:{BUFFERSIZE32,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,656/#00402A50,integer,8168}
symtab[1654]:{FDSIZE64,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,657/#00402A54,integer,8192}
symtab[1655]:{BHFI_NLINK,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,658/#00402A58,integer,40}
symtab[1656]:{BUFFERSIZE64,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,659/#00402A5C,integer,8152}
symtab[1657]:{CSBI_SIZEX,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,660/#00402A60,integer,0}
symtab[1658]:{CSBI_SIZEY,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,661/#00402A64,integer,2}
symtab[1659]:{CSBI_CPOSX,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,662/#00402A68,integer,4}
symtab[1660]:{CSBI_CPOSY,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,663/#00402A6C,integer,6}
symtab[1661]:{CSBI_ATTR,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,664/#00402A70,integer,8}
symtab[1662]:{sizeof_CSBI64,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,665/#00402A74,integer,24}
symtab[1663]:{BHFI_FSHI,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,666/#00402A78,integer,32}
symtab[1664]:{sizeof_BHFI,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,667/#00402A7C,integer,52}
symtab[1665]:{OV_OFFSET,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,668/#00402A80,integer,8}
symtab[1666]:{OV_OFFHI,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,669/#00402A84,integer,12}
symtab[1667]:{OV_EVENT,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,670/#00402A88,integer,16}
symtab[1668]:{sizeof_OVERLAPPED64,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,671/#00402A8C,integer,24}
symtab[1669]:{CREATE_NEW,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,672/#00402A90,integer,1}
symtab[1670]:{OPEN_EXISTING,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,673/#00402A94,integer,3}
symtab[1671]:{OPEN_ALWAYS,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,674/#00402A98,integer,4}
symtab[1672]:{TRUNCATE_EXISTING,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,675/#00402A9C,integer,5}
symtab[1673]:{GENERIC_READo4,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,676/#00402AA0,integer,536870912}
symtab[1674]:{GENERIC_WRITEo4,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,677/#00402AA4,integer,268435456}
symtab[1675]:{FILE_SHARE_READ,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,678/#00402AA8,integer,1}
symtab[1676]:{FILE_SHARE_WRITE,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,679/#00402AAC,integer,2}
symtab[1677]:{FILE_ATTRIBUTE_NORMAL,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,680/#00402AB0,integer,128}
symtab[1678]:{FILE_BEGIN,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,681/#00402AB4,integer,0}
symtab[1679]:{FILE_END,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,682/#00402AB8,integer,2}
symtab[1680]:{NO_ERROR,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,683/#00402ABC,integer,0}
symtab[1681]:{ENABLE_PROCESSED_INPUT,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,684/#00402AC0,integer,1}
symtab[1682]:{ENABLE_WRAP_AT_EOL_OUTPUT,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,685/#00402AC4,integer,2}
symtab[1683]:{O_RDONLY,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,686/#00402AC8,integer,0}
symtab[1684]:{O_WRONLY,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,687/#00402ACC,integer,1}
symtab[1685]:{O_RDWR,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,688/#00402AD0,integer,2}
symtab[1686]:{O_CREAT,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,689/#00402AD4,integer,64}
symtab[1687]:{O_TRUNC,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,690/#00402AD8,integer,512}
symtab[1688]:{S_IRWXU,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,691/#00402ADC,integer,448}
symtab[1689]:{S_IRWXG,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,692/#00402AE0,integer,56}
symtab[1690]:{S_IRX_O,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,693/#00402AE4,integer,5}
symtab[1691]:{fdcs,S_GVar,34,(S_used+S_set+K_wdb),0,694/#00402AE8,atom,{integer,0,MAXINT,object,-1},0}
symtab[1692]:{fdtbl,S_GVar,34,(S_used+S_set+K_wdb),0,695/#00402AEC,sequence,{sequence,MININT,MAXINT,object,-2},0}
symtab[1693]:{fdmax,S_GVar,34,(S_used+S_set+K_wdb+K_noclr),0,696/#00402AF0,integer,{integer,0,MAXLEN,object,-1},0}
symtab[1694]:{freelist,S_GVar,34,(S_used+S_set+K_wdb+K_noclr),0,697/#00402AF4,integer,{atom,MININT,MAXINT,object,-1},0}
symtab[1695]:{HNDL,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,698/#00402AF8,integer,0}
symtab[1696]:{MODE,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,699/#00402AFC,integer,4}
symtab[1697]:{POSN,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,700/#00402B00,integer,8}
symtab[1698]:{FEND,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,701/#00402B04,integer,12}
symtab[1699]:{POSL,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,702/#00402B08,integer,16}
symtab[1700]:{POSH,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,703/#00402B0C,integer,20}
symtab[1701]:{BUFF,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,704/#00402B10,integer,24}
symtab[1702]:{HNDL64,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,705/#00402B14,integer,0}
symtab[1703]:{MODE64,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,706/#00402B18,integer,8}
symtab[1704]:{POSN64,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,707/#00402B1C,integer,16}
symtab[1705]:{FEND64,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,708/#00402B20,integer,24}
symtab[1706]:{RPOS64,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,709/#00402B24,integer,32}
symtab[1707]:{BUFF64,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,710/#00402B28,integer,40}
symtab[1708]:{F_CLOSED,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,711/#00402B2C,integer,0}
symtab[1709]:{F_READ,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,712/#00402B30,integer,1}
symtab[1710]:{F_WRITE,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,713/#00402B34,integer,2}
symtab[1711]:{F_BINARY,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,714/#00402B38,integer,4}
symtab[1712]:{F_DIRTY,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,715/#00402B3C,integer,8}
symtab[1713]:{finit,S_GVar,34,(S_used+S_set+K_wdb+K_noclr+K_asmm),1235,716/#00402B40,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[1714]:{initF,S_Proc,34,(S_used+K_used+K_wdb),0,1717,{80},0,0,0,#0045BECD}
symtab[1715]:{e59wfmfao,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,717/#00402B44,integer,59}
symtab[1716]:{e83atpmbi,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,718/#00402B48,integer,83}
symtab[1717]:{fatalN,S_Proc,34,(S_used+K_used+K_wdb),441,1723,{80,1,1,1,1},1718,2,4,#0045C077}
symtab[1718]:{level,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),442,1719,integer,{integer,2,2,object,-1},[esp]}
symtab[1719]:{errcode,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),443,1720,integer,{integer,58,108,object,-1},[esp-4]}
symtab[1720]:{ep1,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),444,1721,integer,{integer,MININT,MAXINT,object,-1},[esp-8]}
symtab[1721]:{ep2,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),445,0,integer,{integer,0,0,object,-1},[esp-12]}
symtab[1722]:{-1,S_TVar,0,(S_set+K_Fres),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,0b1001,2},(eax)}
symtab[1723]:{toStringN,S_Func,34,(S_used+K_used+K_wdb),0,1733,{70,12},1724,1,8,#0045DA5C}
symtab[1724]:{name,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),1312,1725,sequence,{T_Dsq,MININT,MAXINT,object,-2},[esp]}
symtab[1725]:{nlen,S_TVar,34,(S_used+S_set+K_wdb),801,1726,integer,{integer,0,MAXLEN,object,-1},[esp-4]}
symtab[1726]:{ch,S_TVar,34,(S_used+S_set+K_wdb),979,1727,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1727]:{res,S_TVar,34,(S_used+S_set+K_wdb),1259,1728,string,{string,MININT,MAXINT,integer,-2},[esp-12]}
symtab[1728]:{flag,S_TVar,34,(S_used+S_set+K_used+K_aod+K_wdb),0,1729,integer,{integer,0,1,object,-1},[esp-16]}
symtab[1729]:{-1,S_TVar,0,(S_set),0,1730,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[1730]:{i,S_TVar,34,(S_used+S_set+S_for+K_wdb),1499,1731,integer,{integer,0,MAXLEN,object,-1},[esp-24]}
symtab[1731]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,0b1001,2},[esp-28]}
symtab[1732]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,MININT,MAXINT,object,-1},(eax)}
symtab[1733]:{fopen,S_Func,34,(S_used+K_used+K_wdb+K_ridt),0,1756,{70,12,15},1734,2,15,#0045D493}
symtab[1734]:{filepath,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),831,1735,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1735]:{openmode,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),0,1736,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1736]:{res,S_TVar,34,(S_used+S_set+K_wdb),1727,1737,integer,{0b1001,MININT,MAXINT,integer,-2},[esp-8]}
symtab[1737]:{imode,S_TVar,34,(S_used+S_set+K_wdb),0,1738,integer,{integer,1,3,object,-1},[esp-12]}
symtab[1738]:{fmode,S_TVar,34,(S_used+S_set+K_wdb),0,1739,integer,{integer,MININT,MAXINT,object,-1},[esp-16]}
symtab[1739]:{accessmode,S_TVar,34,(S_used+S_set+K_wdb),0,1740,integer,{integer,268435456,MAXLEN,object,-1},[esp-20]}
symtab[1740]:{createmode,S_TVar,34,(S_used+S_set+K_wdb),0,1741,integer,{integer,1,5,object,-1},[esp-24]}
symtab[1741]:{sharemode,S_TVar,34,(S_used+S_set+K_wdb),0,1742,integer,{integer,1,3,object,-1},[esp-28]}
symtab[1742]:{fhandle,S_TVar,34,(S_used+S_set+K_wdb+K_asmm),0,1743,atom,{atom,MININT,MAXINT,object,-2},[esp-32]}
symtab[1743]:{iThis,S_TVar,34,(S_used+S_set+K_wdb),0,1744,integer,{atom,MININT,MAXINT,object,-1},[esp-36]}
symtab[1744]:{-1,S_TVar,0,(S_set),0,1745,integer,{integer,0,MAXLEN,object,-1},[esp-40]}
symtab[1745]:{-1,S_TVar,0,(S_set),0,1747,object,{object,MININT,MAXINT,object,-2},[esp-44]}
symtab[1746]:{-1,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,719/#00402B4C,string,`bB`}
symtab[1747]:{-1,S_TVar,0,(S_set),0,1749,T_Dsq,{0b0101,0,0,0b1001,2},[esp-48]}
symtab[1748]:{-1,S_Const,34,(S_set+K_noclr+K_lit),0,720/#00402B50,integer,805306368}
symtab[1749]:{-1,S_TVar,0,(S_set),0,1750,atom,{atom,MININT,MAXINT,object,-1},[esp-52]}
symtab[1750]:{-1,S_TVar,0,(S_set),1749,0,atom,{atom,MININT,MAXINT,object,-1},[esp-56]}
symtab[1751]:{stdin,S_GVar,34,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,721/#00402B54,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[1752]:{stdout,S_GVar,34,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,722/#00402B58,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[1753]:{stderr,S_GVar,34,(S_used+S_set+K_wdb+K_asmm),0,723/#00402B5C,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[1754]:{cinit,S_GVar,34,(S_used+S_set+K_wdb+K_noclr),0,724/#00402B60,integer,{integer,0,1,object,-1},0}
symtab[1755]:{stdin_redirected,S_GVar,34,(S_used+S_set+K_wdb+K_noclr+K_asmm),0,725/#00402B64,integer,{atom,MININT,MAXINT,object,-2},0}
symtab[1756]:{initConsole,S_Proc,34,(S_used+K_used+K_wdb),0,1758,{80},0,0,0,#0045BE97}
symtab[1757]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,MININT,MAXINT,object,-1},(eax)}
symtab[1758]:{get_this,S_Func,34,(S_used+K_used+K_wdb),0,1765,{70,1},1759,1,6,#0045CA11}
symtab[1759]:{fn,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),1063,1760,integer,{integer,MININT,MAXINT,object,-1},[esp]}
symtab[1760]:{iThis,S_TVar,34,(S_used+S_set+K_used+K_aod+K_wdb+K_asmm),1743,1761,integer,{atom,MININT,MAXINT,object,-2},[esp-4]}
symtab[1761]:{fidx,S_TVar,34,(S_used+S_set+K_wdb),646,1762,integer,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[1762]:{fmode,S_TVar,34,(S_used+S_set+K_used+K_aod+K_wdb),1738,1763,integer,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[1763]:{-1,S_TVar,0,(S_set),0,1764,atom,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[1764]:{-1,S_TVar,0,(S_set),1763,0,atom,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[1765]:{fflush,S_Proc,34,(S_used+K_used+K_wdb+K_ridt),0,1771,{80,1},1766,1,5,#0045D3A4}
symtab[1766]:{fn,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr+K_asmm),1759,1767,integer,{atom,MININT,MAXINT,object,-2},[esp]}
symtab[1767]:{fidx,S_TVar,34,(S_used+S_set+K_wdb),1761,1768,integer,{atom,MININT,MAXINT,object,-1},[esp-4]}
symtab[1768]:{-1,S_TVar,0,(S_set),0,1769,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[1769]:{i,S_TVar,34,(S_used+S_set+S_for+K_wdb),1730,1770,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[1770]:{-1,S_TVar,0,(S_set),0,0,atom,{integer,2,805306370,object,-1},[esp-16]}
symtab[1771]:{fclose,S_Proc,34,(S_used+K_used+K_wdb+K_ridt),0,1780,{80,1},1772,1,7,#0045D0D7}
symtab[1772]:{fn,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),1766,1773,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1773]:{fidx,S_TVar,34,(S_used+S_set+K_wdb),1767,1774,integer,{atom,MININT,MAXINT,object,-1},[esp-4]}
symtab[1774]:{iThis,S_TVar,34,(S_used+S_set+K_wdb+K_asmm),1760,1775,integer,{atom,MININT,MAXINT,object,-2},[esp-8]}
symtab[1775]:{-1,S_TVar,0,(S_set),0,1776,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[1776]:{i,S_TVar,34,(S_used+S_set+S_for+K_wdb),1769,1777,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[1777]:{-1,S_TVar,0,(S_set),0,1778,atom,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[1778]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,MAXLEN,object,-1},[esp-24]}
symtab[1779]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,0,0,object,-1},(eax)}
symtab[1780]:{fseek,S_Func,34,(S_used+K_used+K_wdb+K_ridt),0,1794,{70,1,3},1781,2,12,#0045CC8E}
symtab[1781]:{fn,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),1772,1782,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1782]:{pos,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),0,1783,atom,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1783]:{fidx,S_TVar,34,(S_used+S_set+K_wdb),1773,1784,integer,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[1784]:{fmode,S_TVar,34,(S_used+S_set+K_wdb+K_asmm),1762,1785,integer,{atom,MININT,MAXINT,object,-2},[esp-12]}
symtab[1785]:{fend,S_TVar,34,(S_used+S_set+K_wdb),0,1786,integer,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[1786]:{workpos,S_TVar,34,(S_used+S_set+K_wdb),0,1787,atom,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[1787]:{frealposn,S_TVar,34,(S_used+S_set+K_wdb),0,1788,atom,{atom,MININT,MAXINT,object,-1},[esp-24]}
symtab[1788]:{iThis,S_TVar,34,(S_used+S_set+K_wdb+K_asmm),1774,1789,integer,{atom,MININT,MAXINT,object,-2},[esp-28]}
symtab[1789]:{-1,S_TVar,0,(S_set),1790,1790,atom,{atom,MININT,MAXINT,object,-1},[esp-32]}
symtab[1790]:{-1,S_TVar,0,(S_set),0,1791,atom,{atom,MININT,MAXINT,object,-1},[esp-36]}
symtab[1791]:{-1,S_TVar,0,(S_set),1792,1792,object,{atom,MININT,MAXINT,object,-1},[esp-40]}
symtab[1792]:{-1,S_TVar,0,(S_set),0,0,object,{atom,MININT,MAXINT,object,-1},[esp-44]}
symtab[1793]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[1794]:{fwhere,S_Func,34,(S_used+K_used+K_wdb+K_ridt),0,1799,{70,1},1795,1,3,#0045CB97}
symtab[1795]:{fn,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),1781,1796,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1796]:{fidx,S_TVar,34,(S_used+S_set+K_wdb),1783,1797,integer,{atom,MININT,MAXINT,object,-1},[esp-4]}
symtab[1797]:{frealposn,S_TVar,34,(S_used+S_set+K_wdb+K_asmm),1787,0,atom,{atom,MININT,MAXINT,object,-2},[esp-8]}
symtab[1798]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,0,1,object,-1},(eax)}
symtab[1799]:{lock_type,S_Type,34,(S_used+K_used+K_wdb),0,1803,{84,1},1800,1,2,#0045CB64}
symtab[1800]:{t,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_type),0,1801,integer,{integer,MININT,MAXINT,object,-1},[esp]}
symtab[1801]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,1,object,-1},[esp-4]}
symtab[1802]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,0,1,object,-1},(eax)}
symtab[1803]:{byte_range,S_Type,34,(S_used+K_used+K_wdb),0,1810,{84,12},1804,1,4,#0045CAD0}
symtab[1804]:{r,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_type),0,1805,sequence,{sequence,MININT,MAXINT,object,-2},[esp]}
symtab[1805]:{-1,S_TVar,0,(S_set),0,1806,integer,{integer,0,MAXLEN,object,-1},[esp-4]}
symtab[1806]:{-1,S_TVar,0,(S_set),1807,1807,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1807]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[1808]:{UNLOCK,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,726/#00402B68,integer,0}
symtab[1809]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,MININT,MAXINT,object,-1},(eax)}
symtab[1810]:{flock,S_Func,34,(S_used+K_used+K_wdb+K_ridt),0,1821,{70,1,1,1803},1811,3,9,#0045C852}
symtab[1811]:{fn,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),1795,1812,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1812]:{locktype,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),0,1813,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1813]:{byterange,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),0,1814,byte_range,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1814]:{iThis,S_TVar,34,(S_used+S_set+K_wdb),1788,1815,integer,{integer,MININT,MAXINT,object,-1},[esp-12]}
symtab[1815]:{offset,S_TVar,34,(S_used+S_set+K_wdb),0,1816,atom,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[1816]:{bytes,S_TVar,34,(S_used+S_set+K_wdb+K_asmm),0,1817,atom,{atom,MININT,MAXINT,object,-2},[esp-20]}
symtab[1817]:{res,S_TVar,34,(S_used+S_set+K_wdb+K_asmm),1736,1818,integer,{atom,MININT,MAXINT,object,-2},[esp-24]}
symtab[1818]:{-1,S_TVar,0,(S_set),0,1819,integer,{integer,0,MAXLEN,object,-1},[esp-28]}
symtab[1819]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-32]}
symtab[1820]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,MININT,MAXINT,object,-1},(eax)}
symtab[1821]:{flock_file,S_Func,34,(S_used+K_used+K_wdb+K_ridt),0,1826,{70,1,1799,1803},1822,3,3,#0045C7AE}
symtab[1822]:{fn,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),1811,1823,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1823]:{locktype,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),1812,1824,lock_type,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1824]:{byterange,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),1813,0,byte_range,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1825]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[1826]:{fget_text,S_Func,34,(S_used+K_used+K_wdb+K_ridt),0,1842,{70,1,1},1827,2,14,#0045C324}
symtab[1827]:{fn,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),1822,1828,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1828]:{option,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),0,1829,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1829]:{fidx,S_TVar,34,(S_used+S_set+K_wdb),1796,1830,integer,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[1830]:{ch,S_TVar,34,(S_used+S_set+K_wdb),1726,1831,integer,{integer,0,255,object,-1},[esp-12]}
symtab[1831]:{fmode,S_TVar,34,(S_used+S_set+K_wdb+K_asmm),1784,1832,integer,{atom,MININT,MAXINT,object,-2},[esp-16]}
symtab[1832]:{res,S_TVar,34,(S_used+S_set+K_wdb),1817,1833,object,{integer,-1,-1,object,-1},[esp-20]}
symtab[1833]:{filesize,S_TVar,34,(S_used+S_set+K_wdb+K_asmm),0,1834,integer,{atom,MININT,MAXINT,object,-2},[esp-24]}
symtab[1834]:{src,S_TVar,34,(S_used+S_set+K_wdb),0,1835,string,{string,MININT,MAXINT,integer,-2},[esp-28]}
symtab[1835]:{iThis,S_TVar,34,(S_used+S_set+K_wdb+K_asmm),1814,1836,integer,{atom,MININT,MAXINT,object,-2},[esp-32]}
symtab[1836]:{from_hll,S_TVar,34,(S_used+S_set+K_used+K_aod+K_wdb),0,1837,integer,{integer,0,1,object,-1},[esp-36]}
symtab[1837]:{-1,S_TVar,0,(S_set),0,1838,integer,{atom,MININT,MAXINT,object,-1},[esp-40]}
symtab[1838]:{-1,S_TVar,0,(S_set),0,1839,T_Dsq,{T_Dsq,MININT,MAXINT,object,0},[esp-44]}
symtab[1839]:{-1,S_TVar,0,(S_set),0,1840,atom,{atom,MININT,MAXINT,object,-1},[esp-48]}
symtab[1840]:{-1,S_TVar,0,(S_set),1837,0,integer,{integer,0,255,object,-1},[esp-52]}
symtab[1841]:{-1,S_TVar,0,(S_set+K_Fres),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,atom,2},(eax)}
symtab[1842]:{fget_position,S_Func,34,(S_used+K_used+K_wdb+K_ridt),0,1848,{70},1843,0,5,#0045C266}
symtab[1843]:{posX,S_TVar,34,(S_used+S_set+K_wdb+K_asmm),0,1844,integer,{atom,MININT,MAXINT,object,-2},[esp]}
symtab[1844]:{posY,S_TVar,34,(S_used+S_set+K_wdb+K_asmm),0,1845,integer,{atom,MININT,MAXINT,object,-2},[esp-4]}
symtab[1845]:{-1,S_TVar,0,(S_set),1846,1846,atom,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[1846]:{-1,S_TVar,0,(S_set),0,1847,atom,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[1847]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,atom,2},[esp-16]}
symtab[1848]:{fwrap,S_Proc,34,(S_used+K_used+K_wdb+K_ridt),0,1851,{80,1},1849,1,1,#0045C1F4}
symtab[1849]:{flag,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr+K_asmm),1728,0,integer,{atom,MININT,MAXINT,object,-2},[esp]}
symtab[1850]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,MININT,MAXINT,object,-1},(eax)}
symtab[1851]:{ftext_rows,S_Func,34,(S_used+K_used+K_wdb+K_ridt),0,1856,{70,1},1852,1,2,#0045C14C}
symtab[1852]:{newrows,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),0,1853,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1853]:{res,S_TVar,34,(S_used+S_set+K_wdb+K_asmm),1832,0,integer,{atom,MININT,MAXINT,object,-2},[esp-4]}
symtab[1854]:{BACKGROUNDCOLOR,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,727/#00402B6C,integer,0}
symtab[1855]:{TEXTCOLOR,S_Const,34,(S_used+S_set+K_wdb+K_noclr+K_lit),0,728/#00402B70,integer,1}
symtab[1856]:{set_console_color,S_Proc,34,(S_used+K_used+K_wdb+K_ridt),0,1861,{80,1,1},1857,2,4,#0045C0BD}
symtab[1857]:{color,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),0,1858,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1858]:{cmode,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr+K_asmm),0,1859,integer,{atom,MININT,MAXINT,object,-2},[esp-4]}
symtab[1859]:{txt,S_TVar,34,(S_used+S_set+K_wdb),983,1860,string,?,[esp-8]}
symtab[1860]:{bold,S_TVar,34,(S_used+S_set+K_wdb),0,0,integer,?,[esp-12]}
symtab[1861]:{fposition,S_Proc,34,(S_used+K_used+K_wdb+K_ridt),0,1869,{80,1,1},1862,2,6,#0045BF2A}
symtab[1862]:{line,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),0,1863,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1863]:{col,S_TVar,34,(S_used+S_set+K_used+K_wdb+K_othr),972,1864,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1864]:{coord,S_TVar,34,(S_used+S_set+K_wdb+K_asmm),0,1865,integer,{atom,MININT,MAXINT,object,-2},[esp-8]}
symtab[1865]:{-1,S_TVar,0,(S_set),1868,1867,atom,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[1866]:{-1,S_Const,34,(S_used+S_set+K_noclr+K_lit),0,729/#00402B74,integer,65535}
symtab[1867]:{-1,S_TVar,0,(S_set),0,1868,integer,{integer,0,65535,object,-1},[esp-16]}
symtab[1868]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[1869]:{fclear_screen,S_Proc,34,(S_used+K_used+K_wdb+K_ridt),0,1870,{80},0,0,0,#0045BE1A}
symtab[1870]:{ffree_console,S_Proc,34,(S_used+K_used+K_wdb+K_ridt),0,1871,{80},0,0,0,#0045BDF7}
symtab[1871]:{<tls>,S_Proc,35,(S_used+K_used+K_wdb),0,1872,{80},0,0,0,#0045BD96}
symtab[1872]:{<tls>,S_Proc,36,(S_used+K_used+K_wdb),0,1879,{80},0,0,0,#0045BD8C}
symtab[1873]:{e16cbchop,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),0,730/#00402B78,integer,16}
symtab[1874]:{e72iri,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),1242,731/#00402B7C,integer,72}
symtab[1875]:{e73atodmbs,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,732/#00402B80,integer,73}
symtab[1876]:{e84cbpmbropr,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,733/#00402B84,integer,84}
symtab[1877]:{e117rdnrav,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),1245,734/#00402B88,integer,117}
symtab[1878]:{e118rrav,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),1246,735/#00402B8C,integer,118}
symtab[1879]:{fatalN,S_Proc,36,(S_used+K_used+K_wdb),1717,1885,{80,1,1,1,1},1880,2,4,#0044B7D5}
symtab[1880]:{level,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1718,1881,integer,{integer,2,4,object,-1},[esp]}
symtab[1881]:{errcode,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1719,1882,integer,{integer,16,124,object,-1},[esp-4]}
symtab[1882]:{ep1,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),1720,1883,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1883]:{ep2,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),1721,0,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[1884]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[1885]:{toString,S_Func,36,(S_used+K_used+K_wdb),798,1899,{70,12,1,1},1886,3,8,#00458794}
symtab[1886]:{name,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1724,1887,sequence,{T_Dsq,MININT,MAXINT,object,-2},[esp]}
symtab[1887]:{errcode,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1881,1888,integer,{integer,73,74,object,-1},[esp-4]}
symtab[1888]:{level,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1880,1889,integer,{integer,3,4,object,-1},[esp-8]}
symtab[1889]:{nlen,S_TVar,36,(S_used+S_set+K_wdb),1725,1890,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[1890]:{res,S_TVar,36,(S_used+S_set+K_wdb),1853,1891,string,{string,MININT,MAXINT,integer,-2},[esp-16]}
symtab[1891]:{-1,S_TVar,0,(S_set),0,1892,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[1892]:{i,S_TVar,36,(S_used+S_set+S_for+K_wdb),1776,1893,integer,{integer,0,MAXLEN,object,-1},[esp-24]}
symtab[1893]:{ch,S_TVar,36,(S_used+S_set+K_wdb),1830,0,object,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[1894]:{libaninit,S_GVar,36,(S_used+S_set+K_wdb+K_noclr),0,736/#00402B90,integer,{integer,0,1,object,-1},0}
symtab[1895]:{libaddrs,S_GVar,36,(S_used+S_set+K_wdb),0,737/#00402B94,sequence,{T_Dsq,MININT,MAXINT,atom,-2},0}
symtab[1896]:{libnames,S_GVar,36,(S_used+S_set+K_wdb),0,738/#00402B98,sequence,{T_Dsq,MININT,MAXINT,string,-2},0}
symtab[1897]:{libsafe,S_GVar,36,(S_used+S_set+K_wdb),0,739/#00402B9C,sequence,{T_Dsq,MININT,MAXINT,integer,-2},0}
symtab[1898]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[1899]:{OpenOneDLL,S_Func,36,(S_used+K_used+K_wdb),0,1920,{70,12},1900,1,5,#0045851C}
symtab[1900]:{filename,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1325,1901,sequence,{string,MININT,MAXINT,object,-2},[esp]}
symtab[1901]:{res,S_TVar,36,(S_used+S_set+K_wdb+K_asmm),1890,1902,atom,{atom,MININT,MAXINT,object,-2},[esp-4]}
symtab[1902]:{safe,S_TVar,36,(S_used+S_set+K_wdb+K_asmm),0,1904,integer,{atom,MININT,MAXINT,object,-2},[esp-8]}
symtab[1903]:{-1,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,740/#00402BA0,string,`VCRUNTIME140.DLL`}
symtab[1904]:{-1,S_TVar,0,(S_set),0,1905,T_Dsq,{T_Dsq,MININT,MAXINT,string,1},[esp-12]}
symtab[1905]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,MININT,MAXINT,object,-1},[esp-16]}
symtab[1906]:{filename,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1900,1907,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1907]:{bCrash,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,1908,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1908]:{res,S_TVar,36,(S_used+S_set+K_used+K_aod+K_wdb),1901,1909,atom,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[1909]:{-1,S_TVar,0,(S_set),0,1910,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[1910]:{idx,S_TVar,36,(S_used+S_set+S_for+K_wdb),629,1911,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[1911]:{fi,S_TVar,36,(S_used+S_set+K_wdb),645,1913,string,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[1912]:{-1,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,741/#00402BA4,string,`cannot open dll:`}
symtab[1913]:{-1,S_TVar,0,(S_set),0,0,sequence,{sequence,MININT,MAXINT,object,-2},[esp-24]}
symtab[1914]:{lib,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),0,1915,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1915]:{name,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1886,1916,string,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1916]:{addr,S_TVar,36,(S_used+S_set+K_wdb+K_asmm),1265,1917,atom,{atom,MININT,MAXINT,object,-2},[esp-8]}
symtab[1917]:{safe,S_TVar,36,(S_used+S_set+K_wdb+K_asmm),1902,1918,integer,{atom,MININT,MAXINT,object,-2},[esp-12]}
symtab[1918]:{-1,S_TVar,0,(S_set),0,1919,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[1919]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,atom,2},[esp-20]}
symtab[1920]:{check,S_Proc,36,(S_used+K_used+K_wdb),0,1937,{80,15,1},1921,2,2,#0045B5DA}
symtab[1921]:{o,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1313,1922,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1922]:{level,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1888,0,integer,{integer,2,2,object,-1},[esp-4]}
symtab[1923]:{T_name,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),0,742/#00402BA8,integer,1}
symtab[1924]:{T_address,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),0,743/#00402BAC,integer,2}
symtab[1925]:{T_args,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),0,744/#00402BB0,integer,3}
symtab[1926]:{T_return_type,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),0,745/#00402BB4,integer,4}
symtab[1927]:{T_convention,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),0,746/#00402BB8,integer,5}
symtab[1928]:{T_safe,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),0,747/#00402BBC,integer,6}
symtab[1929]:{STDCALL,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),0,748/#00402BC0,integer,1}
symtab[1930]:{CDECL,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),0,749/#00402BC4,integer,2}
symtab[1931]:{table,S_GVar,36,(S_used+S_set+K_wdb),0,750/#00402BC8,sequence,{sequence,MININT,MAXINT,object,-2},0}
symtab[1932]:{previd,S_GVar,36,(S_used+S_set+K_wdb),0,751/#00402BCC,sequence,{sequence,MININT,MAXINT,object,-2},0}
symtab[1933]:{prevcb,S_GVar,36,(S_used+S_set+K_wdb),0,752/#00402BD0,sequence,{sequence,MININT,MAXINT,object,-2},0}
symtab[1934]:{tinit,S_GVar,36,(S_used+S_set+K_wdb+K_noclr),0,753/#00402BD4,integer,{integer,0,1,object,-1},0}
symtab[1935]:{tcs,S_GVar,36,(S_used+S_set+K_wdb),0,754/#00402BD8,integer,{integer,0,MAXINT,object,-1},0}
symtab[1936]:{tmax,S_GVar,36,(S_used+S_set+K_wdb+K_noclr),0,755/#00402BDC,integer,{integer,0,MAXLEN,object,-1},0}
symtab[1937]:{c_cleanup,S_Proc,36,(S_used+K_used+K_wdb+K_ridt),0,1941,{80},1938,0,3,#0045BC99}
symtab[1938]:{-1,S_TVar,0,(S_set),0,1939,integer,{integer,0,MAXLEN,object,-1},[esp]}
symtab[1939]:{i,S_TVar,36,(S_used+S_set+S_for+K_wdb),1892,1940,integer,{integer,0,MAXLEN,object,-1},[esp-4]}
symtab[1940]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1941]:{Tinit,S_Proc,36,(S_used+K_used+K_wdb),0,1943,{80},0,0,0,#004592FF}
symtab[1942]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,-1,MAXLEN,object,-1},(eax)}
symtab[1943]:{define_c,S_Func,36,(S_used+K_used+K_wdb),0,1976,{70,15,15,15,3,1},1944,5,18,#0045AEC1}
symtab[1944]:{lib,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1914,1945,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1945]:{fname,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),0,1946,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1946]:{args,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),743,1947,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1947]:{return_type,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),0,1948,atom,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[1948]:{bCrash,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1907,1949,integer,{integer,MININT,MAXINT,object,-1},[esp-16]}
symtab[1949]:{nlen,S_TVar,36,(S_used+S_set+K_wdb),1889,1950,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[1950]:{safe,S_TVar,36,(S_used+S_set+K_wdb+K_asmm),1917,1951,integer,{atom,MININT,MAXINT,object,-2},[esp-24]}
symtab[1951]:{addr,S_TVar,36,(S_used+S_set+K_wdb),1916,1952,atom,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[1952]:{res,S_TVar,36,(S_used+S_set+K_wdb),1908,1953,integer,{integer,0,MAXLEN,object,-1},[esp-32]}
symtab[1953]:{convention,S_TVar,36,(S_used+S_set+K_wdb),0,1954,integer,{integer,1,2,object,-1},[esp-36]}
symtab[1954]:{level,S_TVar,36,(S_used+S_set+K_wdb),1922,1955,integer,{integer,2,2,object,-1},[esp-40]}
symtab[1955]:{name,S_TVar,36,(S_used+S_set+K_wdb),1915,1956,object,{object,MININT,MAXINT,object,-2},[esp-44]}
symtab[1956]:{-1,S_TVar,0,(S_set),0,1957,object,{object,MININT,MAXINT,object,-2},[esp-48]}
symtab[1957]:{-1,S_TVar,0,(S_set),0,1959,T_Dsq,{0b0101,0,0,atom,2},[esp-52]}
symtab[1958]:{-1,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,756/#00402BE0,string,`cannot link `}
symtab[1959]:{-1,S_TVar,0,(S_set),0,1960,sequence,{T_Dsq,MININT,MAXINT,object,-2},[esp-56]}
symtab[1960]:{-1,S_TVar,0,(S_set),0,1961,integer,{integer,0,MAXLEN,object,-1},[esp-60]}
symtab[1961]:{i,S_TVar,36,(S_used+S_set+S_for+K_wdb),1939,1962,integer,{integer,0,MAXLEN,object,-1},[esp-64]}
symtab[1962]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{0b0101,0,0,object,6},[esp-68]}
symtab[1963]:{lib,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1944,1964,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1964]:{fname,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1945,1965,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1965]:{args,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1946,1966,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1966]:{return_type,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1947,1967,atom,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[1967]:{bCrash,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),1948,0,integer,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[1968]:{lib,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1963,1969,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1969]:{name,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1955,1970,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1970]:{args,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1965,1971,sequence,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1971]:{bCrash,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),1967,1972,integer,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[1972]:{-1,S_TVar,0,(S_set),0,1974,integer,{integer,0,1,object,-1},[esp-16]}
symtab[1973]:{-1,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,757/#00402BE4,string,` define_c_proc: bCrash is #%x`}
symtab[1974]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,integer,1},[esp-20]}
symtab[1975]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[1976]:{c_name,S_Func,36,(S_used+S_set+K_used+K_wdb+K_gbl+K_ridt),0,1993,{70,1},1977,1,3,#00442051}
symtab[1977]:{rid,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1330,1978,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1978]:{-1,S_TVar,0,(S_set),0,1979,integer,{integer,0,1,object,-1},[esp-4]}
symtab[1979]:{name,S_TVar,36,(S_used+S_set+K_wdb),1969,0,string,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1980]:{lib,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1968,1981,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1981]:{name,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1979,1982,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1982]:{addr,S_TVar,36,(S_used+S_set+K_wdb),1951,1983,atom,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[1983]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{0b0101,0,0,atom,2},[esp-12]}
symtab[1984]:{S_NTyp,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),1985,758/#00402BE8,integer,2}
symtab[1985]:{S_sig,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),1253,759/#00402BEC,integer,7}
symtab[1986]:{S_ParmN,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),1254,760/#00402BF0,integer,9}
symtab[1987]:{S_Type,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),1996,761/#00402BF4,integer,6}
symtab[1988]:{S_Func,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),0,762/#00402BF8,integer,7}
symtab[1989]:{T_atom,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),0,763/#00402BFC,integer,3}
symtab[1990]:{T_object,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),0,764/#00402C00,integer,15}
symtab[1991]:{T_const1,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),2004,765/#00402C04,integer,26}
symtab[1992]:{DEBUG,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),0,766/#00402C08,integer,0}
symtab[1993]:{<tls>,S_Proc,37,(S_used+K_used+K_wdb),0,2017,{80},0,0,0,#0045BBCB}
symtab[1994]:{id,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),0,1995,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[1995]:{siNTyp,S_TVar,36,(S_used+S_set+K_wdb),0,1996,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[1996]:{sigi,S_TVar,36,(S_used+S_set+K_wdb),0,1997,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[1997]:{noofparams,S_TVar,36,(S_used+S_set+K_wdb),464,1998,integer,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[1998]:{symtab,S_TVar,36,(S_used+S_set+K_wdb+K_asmm),1309,1999,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[1999]:{sig,S_TVar,36,(S_used+S_set+K_wdb),0,2000,object,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[2000]:{si,S_TVar,36,(S_used+S_set+K_wdb),1310,2001,object,{object,MININT,MAXINT,object,-2},[esp-24]}
symtab[2001]:{r,S_TVar,36,(S_used+S_set+K_wdb),1804,2002,atom,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[2002]:{convention,S_TVar,36,(S_used+S_set+K_wdb+K_asmm),1953,2003,integer,{atom,MININT,MAXINT,object,-2},[esp-32]}
symtab[2003]:{k,S_TVar,36,(S_used+S_set+K_used+K_aod+K_wdb),978,2004,integer,{integer,MININT,MAXINT,object,-1},[esp-36]}
symtab[2004]:{-1,S_TVar,0,(S_set),0,2005,integer,{integer,0,MAXLEN,object,-1},[esp-40]}
symtab[2005]:{-1,S_TVar,0,(S_set),0,2006,object,{object,MININT,MAXINT,object,-2},[esp-44]}
symtab[2006]:{i,S_TVar,36,(S_used+S_set+S_for+K_wdb),1961,2007,integer,{integer,0,MAXLEN,object,-1},[esp-48]}
symtab[2007]:{-1,S_TVar,0,(S_set),0,2008,integer,{integer,0,MAXLEN,object,-1},[esp-52]}
symtab[2008]:{-1,S_TVar,0,(S_set),0,0,atom,{integer,-1,805306367,object,-1},[esp-56]}
symtab[2009]:{addr,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1982,2010,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2010]:{prev_ebp4,S_TVar,36,(S_used+S_set+K_wdb+K_asmm),0,0,integer,{atom,MININT,MAXINT,object,-2},[esp-4]}
symtab[2011]:{FUNC,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),0,767/#00402C0C,integer,1}
symtab[2012]:{PROC,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),0,768/#00402C10,integer,0}
symtab[2013]:{S_FPno,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),1986,769/#00402C14,integer,3}
symtab[2014]:{T_pathset,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),1998,770/#00402C18,integer,16}
symtab[2015]:{T_fileset,S_Const,36,(S_used+S_set+K_wdb+K_noclr+K_lit),1999,771/#00402C1C,integer,17}
symtab[2016]:{-1,S_TVar,0,(S_set+K_Fres),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,atom,3},(eax)}
symtab[2017]:{c_common,S_Func,36,(S_used+K_used+K_wdb),0,2192,{70,1,12,1},2018,3,36,#0044AE66}
symtab[2018]:{rid,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1977,2019,integer,{integer,MININT,MAXINT,object,-1},[esp]}
symtab[2019]:{args,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1970,2020,sequence,{sequence,MININT,MAXINT,object,-2},[esp-4]}
symtab[2020]:{flag,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),1849,2021,integer,{integer,0,1,object,-1},[esp-8]}
symtab[2021]:{argdefs,S_TVar,36,(S_used+S_set+K_wdb),0,2022,object,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2022]:{argdefi,S_TVar,36,(S_used+S_set+K_wdb),0,2023,integer,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[2023]:{convention,S_TVar,36,(S_used+S_set+K_wdb),2002,2024,integer,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[2024]:{safe,S_TVar,36,(S_used+S_set+K_wdb),1950,2025,integer,{object,MININT,MAXINT,object,-2},[esp-24]}
symtab[2025]:{la,S_TVar,36,(S_used+S_set+K_wdb),0,2026,integer,{integer,0,MAXLEN,object,-1},[esp-28]}
symtab[2026]:{lad,S_TVar,36,(S_used+S_set+K_wdb),0,2027,integer,{integer,0,MAXLEN,object,-1},[esp-32]}
symtab[2027]:{argi,S_TVar,36,(S_used+S_set+K_wdb),0,2028,object,{object,MININT,MAXINT,object,-2},[esp-36]}
symtab[2028]:{return_type,S_TVar,36,(S_used+S_set+K_wdb),1966,2029,integer,{object,MININT,MAXINT,object,-2},[esp-40]}
symtab[2029]:{name,S_TVar,36,(S_used+S_set+K_wdb),1981,2030,object,{object,MININT,MAXINT,object,-2},[esp-44]}
symtab[2030]:{tr,S_TVar,36,(S_used+S_set+K_wdb),0,2031,object,{object,MININT,MAXINT,object,-2},[esp-48]}
symtab[2031]:{addr,S_TVar,36,(S_used+S_set+K_wdb+K_asmm),2009,2032,atom,{atom,MININT,MAXINT,object,-2},[esp-52]}
symtab[2032]:{esp4,S_TVar,36,(S_used+S_set+K_wdb+K_asmm),0,2033,integer,{atom,MININT,MAXINT,object,-2},[esp-56]}
symtab[2033]:{symtab,S_TVar,36,(S_used+S_set+K_wdb+K_asmm),1998,2034,sequence,{sequence,MININT,MAXINT,object,-2},[esp-60]}
symtab[2034]:{rtnid,S_TVar,36,(S_used+S_set+K_wdb+K_asmm),0,2035,integer,{atom,MININT,MAXINT,object,-2},[esp-64]}
symtab[2035]:{fno,S_TVar,36,(S_used+S_set+K_wdb),1230,2036,integer,{integer,MININT,MAXINT,object,-1},[esp-68]}
symtab[2036]:{pathno,S_TVar,36,(S_used+S_set+K_wdb),0,2037,integer,{object,MININT,MAXINT,object,-2},[esp-72]}
symtab[2037]:{level,S_TVar,36,(S_used+S_set+S_for+K_wdb),1954,2038,integer,{integer,1,2,object,-1},[esp-76]}
symtab[2038]:{si,S_TVar,36,(S_used+S_set+K_wdb),2000,2039,sequence,{object,MININT,MAXINT,object,-2},[esp-80]}
symtab[2039]:{file,S_TVar,36,(S_used+S_set+K_wdb),0,2041,string,{object,MININT,MAXINT,object,-2},[esp-84]}
symtab[2040]:{-1,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,772/#00402C20,string,`pcmdlnN.e`}
symtab[2041]:{-1,S_TVar,0,(S_set),0,2042,T_Dsq,{T_Dsq,MININT,MAXINT,0b1011,-2},[esp-88]}
symtab[2042]:{path,S_TVar,36,(S_used+S_set+K_wdb),0,2043,string,{object,MININT,MAXINT,object,-2},[esp-92]}
symtab[2043]:{bpath,S_TVar,36,(S_used+S_set+K_wdb),0,2044,string,{object,MININT,MAXINT,object,-2},[esp-96]}
symtab[2044]:{spath,S_TVar,36,(S_used+S_set+K_wdb),0,2053,string,{sequence,MININT,MAXINT,object,-2},[esp-100]}
symtab[2045]:{-1,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,773/#00402C24,string,`demo\pGUI`}
symtab[2046]:{-1,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,774/#00402C28,string,`builtins`}
symtab[2047]:{-1,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,775/#00402C2C,string,`pgetpath.e`}
symtab[2048]:{-1,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,776/#00402C30,string,`pdir.e`}
symtab[2049]:{-1,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,777/#00402C34,string,`penv.e`}
symtab[2050]:{-1,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,778/#00402C38,string,`pcurrdir.e`}
symtab[2051]:{-1,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,779/#00402C3C,string,`mpfr.e`}
symtab[2052]:{-1,S_Const,36,(S_used+S_set+K_noclr+K_lit),0,780/#00402C40,string,`pGUI.e`}
symtab[2053]:{-1,S_TVar,0,(S_set),0,2054,sequence,?,[esp-104]}
symtab[2054]:{xmmi,S_TVar,36,(S_used+S_set+K_wdb),0,2055,sequence,{sequence,MININT,MAXINT,object,-2},[esp-108]}
symtab[2055]:{xmmr,S_TVar,36,(S_used+S_set+K_wdb),0,2056,integer,{atom,MININT,MAXINT,object,-1},[esp-112]}
symtab[2056]:{-1,S_TVar,0,(S_set),0,2057,integer,{integer,0,MAXLEN,object,-1},[esp-116]}
symtab[2057]:{i,S_TVar,36,(S_used+S_set+S_for+K_wdb),2006,2058,integer,{integer,0,MAXLEN,object,-1},[esp-120]}
symtab[2058]:{-1,S_TVar,0,(S_set),0,2059,object,{object,MININT,MAXINT,object,-2},[esp-124]}
symtab[2059]:{-1,S_TVar,0,(S_set),0,2060,integer,{integer,0,MAXLEN,object,-1},[esp-128]}
symtab[2060]:{xi,S_TVar,36,(S_used+S_set+K_wdb),758,2061,integer,{integer,MININT,MAXINT,object,-1},[esp-132]}
symtab[2061]:{bAtom,S_TVar,36,(S_used+S_set+K_wdb),0,2062,integer,{integer,0,1,object,-1},[esp-136]}
symtab[2062]:{addr2,S_TVar,36,(S_used+S_set+K_wdb+K_asmm),0,0,atom,{atom,MININT,MAXINT,object,-2},[esp-140]}
symtab[2063]:{rid,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),2018,2064,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2064]:{args,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2019,2065,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2065]:{return_type,S_TVar,36,(S_used+S_set+K_wdb),2028,2066,integer,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2066]:{addr,S_TVar,36,(S_used+S_set+K_wdb),2031,2067,atom,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[2067]:{res,S_TVar,36,(S_used+S_set+K_wdb+K_asmm),1952,2068,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[2068]:{esp4,S_TVar,36,(S_used+S_set+K_wdb),2032,2069,integer,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[2069]:{prev_ebp4,S_TVar,36,(S_used+S_set+K_wdb+K_asmm),2010,2070,integer,{atom,MININT,MAXINT,object,-2},[esp-24]}
symtab[2070]:{-1,S_TVar,0,(S_set),0,2071,T_Dsq,{0b0101,0,0,atom,3},[esp-28]}
symtab[2071]:{k,S_TVar,36,(S_used+S_set+K_wdb),2003,0,integer,?,[esp-32]}
symtab[2072]:{rid,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr),2063,2073,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2073]:{args,S_TVar,36,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2064,2074,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2074]:{return_type,S_TVar,36,(S_used+S_set+K_wdb),2065,2075,integer,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2075]:{addr,S_TVar,36,(S_used+S_set+K_wdb),2066,2076,atom,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[2076]:{esp4,S_TVar,36,(S_used+S_set+K_wdb),2068,2077,integer,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[2077]:{prev_ebp4,S_TVar,36,(S_used+S_set+K_wdb+K_asmm),2069,2078,integer,{atom,MININT,MAXINT,object,-2},[esp-20]}
symtab[2078]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{0b0101,0,0,atom,3},[esp-24]}
symtab[2079]:{needle,S_TVar,38,(S_used+S_set+K_used+K_wdb+K_othr),0,2080,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2080]:{haystack,S_TVar,38,(S_used+S_set+K_used+K_wdb+K_othr),0,2081,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2081]:{start,S_TVar,38,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,2082,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2082]:{-1,S_TVar,0,(S_set),0,2083,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2083]:{-1,S_TVar,0,(S_set),0,2084,atom,{integer,1,805306369,object,-1},[esp-16]}
symtab[2084]:{-1,S_TVar,0,(S_set),0,2085,integer,{integer,MININT,MAXINT,object,-1},[esp-20]}
symtab[2085]:{i,S_TVar,38,(S_used+S_set+S_for+K_wdb),2057,2086,integer,{integer,MININT,MAXINT,object,-1},[esp-24]}
symtab[2086]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[2087]:{needle,S_TVar,38,(S_used+S_set+K_used+K_wdb+K_othr),2079,2088,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2088]:{haystack,S_TVar,38,(S_used+S_set+K_used+K_wdb+K_othr),2080,2089,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2089]:{start,S_TVar,38,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2081,2090,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2090]:{-1,S_TVar,0,(S_set),0,2091,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2091]:{-1,S_TVar,0,(S_set),0,2092,atom,{integer,1,805306369,object,-1},[esp-16]}
symtab[2092]:{-1,S_TVar,0,(S_set),0,2093,integer,{integer,MININT,MAXINT,object,-1},[esp-20]}
symtab[2093]:{i,S_TVar,38,(S_used+S_set+S_for+K_wdb),2085,2094,integer,{integer,MININT,MAXINT,object,-1},[esp-24]}
symtab[2094]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[2095]:{needle,S_TVar,39,(S_used+S_set+K_used+K_othr),2087,2096,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2096]:{haystack,S_TVar,39,(S_used+S_set+K_used+K_othr),2088,2097,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2097]:{start,S_TVar,39,(S_used+S_set+K_used+K_othr+K_dlft),2089,2098,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2098]:{case_sensitive,S_TVar,39,(S_used+S_set+K_used+K_othr+K_dlft),0,2099,integer,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2099]:{res,S_TVar,39,(S_used+S_set),2067,2100,integer,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[2100]:{nl,S_TVar,39,(S_used+S_set),0,2101,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[2101]:{hl,S_TVar,39,(S_used+S_set),0,2102,integer,{integer,0,MAXLEN,object,-1},[esp-24]}
symtab[2102]:{-1,S_TVar,0,(S_set),0,2103,atom,{atom,MININT,MAXINT,object,-1},[esp-28]}
symtab[2103]:{-1,S_TVar,0,(S_set),2102,2104,atom,{atom,MININT,MAXINT,object,-1},[esp-32]}
symtab[2104]:{-1,S_TVar,0,(S_set),0,2105,integer,{integer,0,MAXLEN,object,-1},[esp-36]}
symtab[2105]:{i,S_TVar,39,(S_used+S_set+S_for),2093,2106,integer,{integer,0,MAXLEN,object,-1},[esp-40]}
symtab[2106]:{hdx,S_TVar,39,(S_used+S_set),0,2107,integer,{atom,MININT,MAXINT,object,-1},[esp-44]}
symtab[2107]:{ni,S_TVar,39,(S_used+S_set),0,2108,object,{object,MININT,MAXINT,object,-2},[esp-48]}
symtab[2108]:{hi,S_TVar,39,(S_used+S_set),0,2109,object,{object,MININT,MAXINT,object,-2},[esp-52]}
symtab[2109]:{j,S_TVar,39,(S_used+S_set+S_for),1094,2110,integer,{atom,MININT,MAXINT,object,-1},[esp-56]}
symtab[2110]:{-1,S_TVar,0,(S_set),0,0,atom,{integer,-1,805306367,object,-1},[esp-60]}
symtab[2111]:{needle,S_TVar,39,(S_used+S_set+K_used+K_othr),2095,2112,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2112]:{haystack,S_TVar,39,(S_used+S_set+K_used+K_othr),2096,2113,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2113]:{start,S_TVar,39,(S_used+S_set+K_used+K_othr+K_dlft),2097,2114,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2114]:{case_sensitive,S_TVar,39,(S_used+S_set+K_used+K_othr+K_dlft),2098,2115,integer,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2115]:{nl,S_TVar,39,(S_used+S_set),2100,2116,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[2116]:{hl,S_TVar,39,(S_used+S_set),2101,2117,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[2117]:{-1,S_TVar,0,(S_set),2118,2118,atom,{atom,MININT,MAXINT,object,-1},[esp-24]}
symtab[2118]:{-1,S_TVar,0,(S_set),0,2119,atom,{atom,MININT,MAXINT,object,-1},[esp-28]}
symtab[2119]:{-1,S_TVar,0,(S_set),0,2120,integer,{integer,MININT,MAXINT,object,-1},[esp-32]}
symtab[2120]:{i,S_TVar,39,(S_used+S_set+S_for),2105,2121,integer,{integer,MININT,MAXINT,object,-1},[esp-36]}
symtab[2121]:{-1,S_TVar,0,(S_set),0,2122,integer,{integer,0,MAXLEN,object,-1},[esp-40]}
symtab[2122]:{j,S_TVar,39,(S_used+S_set+S_for),2109,2123,integer,{integer,0,MAXLEN,object,-1},[esp-44]}
symtab[2123]:{-1,S_TVar,0,(S_set),2124,2124,object,{object,MININT,MAXINT,object,-2},[esp-48]}
symtab[2124]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-52]}
symtab[2125]:{needle,S_TVar,39,(S_used+S_set+K_used+K_othr),2111,2126,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2126]:{haystack,S_TVar,39,(S_used+S_set+K_used+K_othr),2112,2127,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2127]:{start,S_TVar,39,(S_used+S_set+K_used+K_othr+K_dlft),2113,2128,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2128]:{case_sensitive,S_TVar,39,(S_used+S_set+K_used+K_othr+K_dlft),2114,2129,integer,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2129]:{overlap,S_TVar,39,(S_used+S_set+K_used+K_othr+K_dlft),0,2130,integer,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[2130]:{res,S_TVar,39,(S_used+S_set),2099,2131,sequence,{T_Dsq,MININT,MAXINT,integer,-2},[esp-20]}
symtab[2131]:{-1,S_TVar,0,(S_set),0,0,object,{integer,0,MAXLEN,object,-1},[esp-24]}
symtab[2132]:{sub_text,S_TVar,39,(S_used+S_set+K_used+K_othr),0,2133,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2133]:{full_text,S_TVar,39,(S_used+S_set+K_used+K_othr),0,2134,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2134]:{lf,S_TVar,39,(S_used+S_set),0,2135,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[2135]:{-1,S_TVar,0,(S_set),0,2136,object,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2136]:{-1,S_TVar,0,(S_set),0,2137,integer,{integer,0,1,object,-1},[esp-16]}
symtab[2137]:{ls,S_TVar,39,(S_used+S_set),0,2138,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[2138]:{-1,S_TVar,0,(S_set),0,0,sequence,{sequence,MININT,MAXINT,object,-2},[esp-24]}
symtab[2139]:{s,S_TVar,40,(S_used+S_set+K_used+K_wdb+K_othr),1297,2140,string,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2140]:{def_value,S_TVar,40,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,2141,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2141]:{base,S_TVar,40,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),1207,2142,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2142]:{res,S_TVar,40,(S_used+S_set+K_used+K_aod+K_wdb),2130,2143,integer,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[2143]:{sgn,S_TVar,40,(S_used+S_set+K_used+K_aod+K_wdb),654,2144,integer,{integer,-1,1,object,-1},[esp-16]}
symtab[2144]:{ch,S_TVar,40,(S_used+S_set+K_wdb),1893,2145,integer,{integer,0,255,object,-1},[esp-20]}
symtab[2145]:{d,S_TVar,40,(S_used+S_set+K_wdb),0,2146,integer,{atom,MININT,MAXINT,object,-1},[esp-24]}
symtab[2146]:{-1,S_TVar,0,(S_set),0,2148,integer,{integer,0,MAXLEN,object,-1},[esp-28]}
symtab[2147]:{-1,S_Const,40,(S_set+K_noclr+K_lit),0,781/#00402C44,integer,35}
symtab[2148]:{-1,S_TVar,0,(S_set),0,2150,string,{string,MININT,MAXINT,integer,2},[esp-32]}
symtab[2149]:{-1,S_Const,40,(S_used+S_set+K_noclr+K_lit),0,782/#00402C48,string,`0x`}
symtab[2150]:{-1,S_TVar,0,(S_set),0,2151,object,{object,MININT,MAXINT,object,-2},[esp-36]}
symtab[2151]:{i,S_TVar,40,(S_used+S_set+S_for+K_wdb),2120,2152,integer,{integer,0,MAXLEN,object,-1},[esp-40]}
symtab[2152]:{-1,S_TVar,0,(S_set),0,2153,object,{integer,65,97,object,-1},[esp-44]}
symtab[2153]:{rchk,S_TVar,40,(S_used+S_set+K_wdb),0,2154,atom,{atom,MININT,MAXINT,object,-1},[esp-48]}
symtab[2154]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-52]}
symtab[2155]:{s,S_TVar,40,(S_used+S_set+K_used+K_wdb+K_othr),2139,2156,string,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2156]:{base,S_TVar,40,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2141,2157,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2157]:{r,S_TVar,40,(S_used+S_set+K_wdb),2001,2158,integer,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2158]:{-1,S_TVar,0,(S_set),0,2159,atom,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[2159]:{-1,S_TVar,0,(S_set),0,2160,integer,{integer,MININT,MAXINT,object,-1},[esp-16]}
symtab[2160]:{-1,S_TVar,0,(S_set),2159,0,integer,{integer,0,1,object,-1},[esp-20]}
symtab[2161]:{addr,S_TVar,41,(S_used+S_set+K_used+K_othr),2075,2162,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2162]:{-1,S_TVar,0,(S_set),0,2163,integer,{integer,0,MAXLEN,object,-1},[esp-4]}
symtab[2163]:{i,S_TVar,41,(S_used+S_set+S_for),2151,2164,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[2164]:{ai,S_TVar,41,(S_used+S_set),0,2165,atom,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2165]:{rid,S_TVar,41,(S_used+S_set+K_asmm),2072,2166,integer,{atom,MININT,MAXINT,object,-2},[esp-16]}
symtab[2166]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,object,1},[esp-20]}
symtab[2167]:{r_free,S_Const,41,(S_used+S_set+K_rtn),0,783/#00402C4C,integer,398}
symtab[2168]:{addr,S_TVar,41,(S_used+S_set+K_used+K_othr),2161,2169,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2169]:{-1,S_TVar,0,(S_set),0,2170,integer,{integer,0,MAXLEN,object,-1},[esp-4]}
symtab[2170]:{i,S_TVar,41,(S_used+S_set+S_for),2163,2171,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[2171]:{ai,S_TVar,41,(S_used+S_set),2164,0,atom,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2172]:{size,S_TVar,41,(S_used+S_set+K_used+K_othr),0,2173,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2173]:{cleanup,S_TVar,41,(S_used+S_set+K_used+K_othr+K_dlft),0,2174,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2174]:{res,S_TVar,41,(S_used+S_set+K_asmm),2142,0,atom,{atom,MININT,MAXINT,object,-2},[esp-8]}
symtab[2175]:{v,S_TVar,41,(S_used+S_set+K_used+K_othr+K_dlft),0,2176,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2176]:{cleanup,S_TVar,41,(S_used+S_set+K_used+K_othr+K_dlft),2173,2177,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2177]:{size,S_TVar,41,(S_used+S_set+K_used+K_othr+K_dlft),2172,2178,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2178]:{res,S_TVar,41,(S_used+S_set),2174,0,atom,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[2179]:{size,S_TVar,41,(S_used+S_set+K_used+K_othr),2177,2180,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2180]:{cleanup,S_TVar,41,(S_used+S_set+K_used+K_othr+K_dlft),2176,0,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2181]:{s,S_TVar,41,(S_used+S_set+K_used+K_othr),2155,2182,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2182]:{cleanup,S_TVar,41,(S_used+S_set+K_used+K_othr+K_dlft),2180,2183,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2183]:{mem,S_TVar,41,(S_used+S_set),0,2184,atom,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2184]:{-1,S_TVar,0,(S_set),0,2185,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2185]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[2186]:{s,S_TVar,41,(S_used+S_set+K_used+K_othr),2181,2187,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2187]:{cleanup,S_TVar,41,(S_used+S_set+K_used+K_othr+K_dlft),2182,2188,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2188]:{mem,S_TVar,41,(S_used+S_set),2183,2189,atom,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2189]:{-1,S_TVar,0,(S_set),0,2190,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2190]:{-1,S_TVar,0,(S_set),2191,2191,atom,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[2191]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[2192]:{<tls>,S_Proc,42,(S_used+K_used+K_wdb),0,2193,{80},0,0,0,#0045BB5A}
symtab[2193]:{loadFloat,S_Proc,42,(S_used+K_used+K_wdb),0,2202,{80,3},2194,1,1,#0045716E}
symtab[2194]:{a,S_TVar,42,(S_used+S_set+K_used+K_wdb+K_othr),1299,0,atom,{atom,MININT,MAXINT,object,-1},[esp]}
symtab[2195]:{a,S_TVar,42,(S_used+S_set+K_used+K_wdb+K_othr),2194,2196,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2196]:{res,S_TVar,42,(S_used+S_set+K_wdb),2178,0,string,{string,MININT,MAXINT,integer,-2},[esp-4]}
symtab[2197]:{a,S_TVar,42,(S_used+S_set+K_used+K_wdb+K_othr),2195,2198,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2198]:{res,S_TVar,42,(S_used+S_set+K_wdb),2196,0,string,{string,MININT,MAXINT,integer,-2},[esp-4]}
symtab[2199]:{a,S_TVar,42,(S_used+S_set+K_used+K_wdb+K_othr),2197,2200,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2200]:{res,S_TVar,42,(S_used+S_set+K_wdb),2198,0,string,{string,MININT,MAXINT,integer,-2},[esp-4]}
symtab[2201]:{-1,S_TVar,0,(S_set+K_Fres),0,0,string,{string,MININT,MAXINT,integer,-2},(eax)}
symtab[2202]:{toBinaryString,S_Func,42,(S_used+K_used+K_wdb),0,2288,{70,12},2203,1,6,#0045892D}
symtab[2203]:{s,S_TVar,42,(S_used+S_set+K_used+K_wdb+K_othr),2186,2204,sequence,{sequence,MININT,MAXINT,object,-2},[esp]}
symtab[2204]:{res,S_TVar,42,(S_used+S_set+K_wdb),2200,2205,string,{string,MININT,MAXINT,integer,-2},[esp-4]}
symtab[2205]:{-1,S_TVar,0,(S_set),0,2206,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[2206]:{i,S_TVar,42,(S_used+S_set+S_for+K_wdb),2170,2207,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2207]:{-1,S_TVar,0,(S_set),0,2208,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[2208]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,255,object,-1},[esp-20]}
symtab[2209]:{-1,S_GVar,0,(S_set),0,784/#00402C50,string,{0b1001,0,0,integer,-2},0}
symtab[2210]:{s,S_TVar,42,(S_used+S_set+K_used+K_wdb+K_othr),2203,2211,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2211]:{res,S_TVar,42,(S_used+S_set+K_wdb+K_asmm),2204,2212,atom,{atom,MININT,MAXINT,object,-2},[esp-4]}
symtab[2212]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[2213]:{s,S_TVar,42,(S_used+S_set+K_used+K_wdb+K_othr),2210,2214,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2214]:{res,S_TVar,42,(S_used+S_set+K_wdb+K_asmm),2211,2215,atom,{atom,MININT,MAXINT,object,-2},[esp-4]}
symtab[2215]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[2216]:{s,S_TVar,42,(S_used+S_set+K_used+K_wdb+K_othr),2213,2217,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2217]:{res,S_TVar,42,(S_used+S_set+K_wdb+K_asmm),2214,2218,atom,{atom,MININT,MAXINT,object,-2},[esp-4]}
symtab[2218]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[2219]:{s,S_TVar,43,(S_used+S_set+K_used+K_wdb+K_othr),2216,2220,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2220]:{res,S_TVar,43,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2217,2221,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2221]:{-1,S_TVar,0,(S_set),0,2222,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[2222]:{i,S_TVar,43,(S_used+S_set+S_for+K_wdb),2206,2223,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2223]:{si,S_TVar,43,(S_used+S_set+K_wdb),2038,2224,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[2224]:{-1,S_TVar,0,(S_set),0,0,sequence,{sequence,MININT,MAXINT,object,-2},[esp-20]}
symtab[2225]:{-1,S_Const,43,(S_used+S_set+K_noclr+K_lit),0,785/#00402C54,string,` `}
symtab[2226]:{s,S_TVar,43,(S_used+S_set+K_used+K_wdb+K_othr),2219,2227,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2227]:{delim,S_TVar,43,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,2228,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2228]:{lastdelim,S_TVar,43,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,2229,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2229]:{fmt,S_TVar,43,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),742,2230,string,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2230]:{res,S_TVar,43,(S_used+S_set+K_used+K_aod+K_wdb),2220,2231,sequence,{sequence,MININT,MAXINT,object,-2},[esp-16]}
symtab[2231]:{l,S_TVar,43,(S_used+S_set+K_wdb),843,2233,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[2232]:{-1,S_Const,43,(S_set+K_rtn),0,786/#00402C58,integer,210}
symtab[2233]:{-1,S_TVar,0,(S_set),0,2234,T_Dsq,{T_Dsq,MININT,MAXINT,string,1},[esp-24]}
symtab[2234]:{-1,S_TVar,0,(S_set),2233,2235,T_Dsq,{T_Dsq,MININT,MAXINT,sequence,2},[esp-28]}
symtab[2235]:{-1,S_TVar,0,(S_set),0,2236,integer,{integer,0,MAXLEN,object,-1},[esp-32]}
symtab[2236]:{i,S_TVar,43,(S_used+S_set+S_for+K_wdb),2222,2237,integer,{integer,0,MAXLEN,object,-1},[esp-36]}
symtab[2237]:{-1,S_TVar,0,(S_set),0,2238,integer,?,[esp-40]}
symtab[2238]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-44]}
symtab[2239]:{-1,S_Const,43,(S_used+S_set+K_noclr+K_lit),0,787/#00402C5C,string,`   `}
symtab[2240]:{s,S_TVar,43,(S_used+S_set+K_used+K_wdb+K_othr),2226,2241,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2241]:{step,S_TVar,43,(S_used+S_set+K_used+K_wdb+K_othr),0,2242,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2242]:{n,S_TVar,43,(S_used+S_set+K_used+K_wdb+K_othr),622,2243,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2243]:{step_pad,S_TVar,43,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,2244,object,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2244]:{n_pad,S_TVar,43,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,2245,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[2245]:{fmt,S_TVar,43,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2229,2246,string,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[2246]:{skip,S_TVar,43,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),1206,2247,integer,{object,MININT,MAXINT,object,-2},[esp-24]}
symtab[2247]:{res,S_TVar,43,(S_used+S_set+K_wdb),2230,2248,sequence,{T_Dsq,MININT,MAXINT,sequence,-2},[esp-28]}
symtab[2248]:{js,S_TVar,43,(S_used+S_set+K_wdb),0,2249,sequence,{sequence,MININT,MAXINT,object,-2},[esp-32]}
symtab[2249]:{nmax,S_TVar,43,(S_used+S_set+K_wdb),0,2250,integer,{integer,MININT,MAXINT,object,-1},[esp-36]}
symtab[2250]:{ls,S_TVar,43,(S_used+S_set+K_wdb),2137,2251,integer,{integer,MININT,MAXINT,object,-1},[esp-40]}
symtab[2251]:{-1,S_TVar,0,(S_set),0,2252,atom,{atom,MININT,MAXINT,object,-1},[esp-44]}
symtab[2252]:{-1,S_TVar,0,(S_set),0,2253,integer,{integer,0,MAXLEN,object,-1},[esp-48]}
symtab[2253]:{i,S_TVar,43,(S_used+S_set+S_for+K_wdb),2236,2254,integer,{atom,MININT,MAXINT,object,-1},[esp-52]}
symtab[2254]:{-1,S_TVar,0,(S_set),2263,2255,object,{object,MININT,MAXINT,object,-2},[esp-56]}
symtab[2255]:{-1,S_TVar,0,(S_set),0,2256,string,{0b1001,0,0,integer,-2},[esp-60]}
symtab[2256]:{-1,S_TVar,0,(S_set),0,2257,atom,{atom,MININT,MAXINT,object,-1},[esp-64]}
symtab[2257]:{-1,S_TVar,0,(S_set),0,2258,integer,{integer,0,MAXLEN,object,-1},[esp-68]}
symtab[2258]:{-1,S_TVar,0,(S_set),0,2259,integer,{integer,MININT,MAXINT,object,-1},[esp-72]}
symtab[2259]:{j,S_TVar,43,(S_used+S_set+S_for+K_wdb),2122,2260,integer,{atom,MININT,MAXINT,object,-1},[esp-76]}
symtab[2260]:{-1,S_TVar,0,(S_set),0,2261,atom,{atom,MININT,MAXINT,object,-1},[esp-80]}
symtab[2261]:{-1,S_TVar,0,(S_set),2260,2262,atom,{atom,MININT,MAXINT,object,-1},[esp-84]}
symtab[2262]:{jdx,S_TVar,43,(S_used+S_set+K_wdb),0,2263,integer,{atom,MININT,MAXINT,object,-1},[esp-88]}
symtab[2263]:{-1,S_TVar,0,(S_set),0,2264,object,{object,MININT,MAXINT,object,-2},[esp-92]}
symtab[2264]:{-1,S_TVar,0,(S_set),0,2265,T_Dsq,{T_Dsq,MININT,MAXINT,object,2},[esp-96]}
symtab[2265]:{-1,S_TVar,0,(S_set),0,2266,sequence,{0b1101,0,0,object,-2},[esp-100]}
symtab[2266]:{sdx,S_TVar,43,(S_used+S_set+K_wdb),0,2267,integer,{atom,MININT,MAXINT,object,-1},[esp-104]}
symtab[2267]:{-1,S_TVar,0,(S_set),2265,0,sequence,{0b1101,0,0,object,-2},[esp-108]}
symtab[2268]:{path_elements,S_TVar,43,(S_used+S_set+K_used+K_wdb+K_othr),0,2269,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2269]:{trailsep,S_TVar,43,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,2270,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2270]:{fname,S_TVar,43,(S_used+S_set+K_used+K_aod+K_wdb),1964,2271,string,{sequence,MININT,MAXINT,integer,-2},[esp-8]}
symtab[2271]:{-1,S_TVar,0,(S_set),0,2272,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2272]:{i,S_TVar,43,(S_used+S_set+S_for+K_wdb),2253,2273,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[2273]:{elem,S_TVar,43,(S_used+S_set+K_wdb),0,2274,string,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[2274]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,255,object,-1},[esp-24]}
symtab[2275]:{S_Name,S_Const,45,(S_used+S_set+K_noclr+K_lit),1984,788/#00402C60,integer,1}
symtab[2276]:{S_NTyp,S_Const,45,(S_used+S_set+K_noclr+K_lit),2796,789/#00402C64,integer,2}
symtab[2277]:{S_FPno,S_Const,45,(S_used+S_set+K_noclr+K_lit),2825,790/#00402C68,integer,3}
symtab[2278]:{S_State,S_Const,45,(S_used+S_set+K_noclr+K_lit),1987,791/#00402C6C,integer,4}
symtab[2279]:{S_sig,S_Const,45,(S_used+S_set+K_noclr+K_lit),2797,792/#00402C70,integer,7}
symtab[2280]:{S_value,S_Const,45,(S_used+S_set+K_noclr+K_lit),0,793/#00402C74,integer,8}
symtab[2281]:{S_ParmN,S_Const,45,(S_used+S_set+K_noclr+K_lit),2798,794/#00402C78,integer,9}
symtab[2282]:{S_Const,S_Const,45,(S_used+S_set+K_noclr+K_lit),0,795/#00402C7C,integer,1}
symtab[2283]:{S_Type,S_Const,45,(S_used+S_set+K_noclr+K_lit),2799,796/#00402C80,integer,6}
symtab[2284]:{S_Proc,S_Const,45,(S_used+S_set+K_noclr+K_lit),1258,797/#00402C84,integer,8}
symtab[2285]:{K_gbl,S_Const,45,(S_used+S_set+K_noclr+K_lit),0,798/#00402C88,integer,4096}
symtab[2286]:{T_object,S_Const,45,(S_used+S_set+K_noclr+K_lit),2802,799/#00402C8C,integer,15}
symtab[2287]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,MININT,MAXINT,object,-1},(eax)}
symtab[2288]:{rtnid,S_Func,45,(S_used+K_used+K_ridt),2034,2327,{70,8},2289,1,1,#00441FFA}
symtab[2289]:{name,S_TVar,45,(S_used+S_set+K_used+K_othr),2029,0,string,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2290]:{grid,S_GVar,45,(S_used+S_set+K_noclr),0,800/#00402C90,integer,{integer,MININT,MAXINT,object,-1},0}
symtab[2291]:{rid,S_TVar,45,(S_used+S_set+K_used+K_othr+K_asmm),2165,2292,integer,{atom,MININT,MAXINT,object,-2},[esp]}
symtab[2292]:{bName,S_TVar,45,(S_used+S_set+K_used+K_othr+K_dlft),0,2294,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2293]:{-1,S_Const,45,(S_used+S_set+K_noclr+K_lit),0,801/#00402C94,string,`XX`}
symtab[2294]:{-1,S_TVar,0,(S_set),0,2296,T_Dsq,{T_Dsq,MININT,MAXINT,0b1001,3},[esp-8]}
symtab[2295]:{-1,S_Const,45,(S_used+S_set+K_noclr+K_lit),0,802/#00402C98,string,`get_routine_info`}
symtab[2296]:{symtab,S_TVar,45,(S_used+S_set+K_asmm),2033,2297,object,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2297]:{sr,S_TVar,45,(S_used+S_set),1324,2298,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[2298]:{name,S_TVar,45,(S_used+S_set),2289,2299,object,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[2299]:{ntype,S_TVar,45,(S_used+S_set),0,2300,integer,{object,MININT,MAXINT,object,-2},[esp-24]}
symtab[2300]:{minp,S_TVar,45,(S_used+S_set),0,2301,integer,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[2301]:{sigl,S_TVar,45,(S_used+S_set),0,2302,integer,{integer,0,MAXLEN,object,-1},[esp-32]}
symtab[2302]:{maxp,S_TVar,45,(S_used+S_set),0,2303,integer,{integer,-1,805306367,object,-1},[esp-36]}
symtab[2303]:{res,S_TVar,45,(S_used+S_set),2247,2304,sequence,{sequence,MININT,MAXINT,object,-2},[esp-40]}
symtab[2304]:{-1,S_TVar,0,(S_set),0,2305,integer,{integer,0,MAXLEN,object,-1},[esp-44]}
symtab[2305]:{i,S_TVar,45,(S_used+S_set+S_for),2272,2306,integer,{integer,0,MAXLEN,object,-1},[esp-48]}
symtab[2306]:{si,S_TVar,45,(S_used+S_set),2223,2308,integer,{object,MININT,MAXINT,object,-2},[esp-52]}
symtab[2307]:{-1,S_Const,45,(S_used+S_set+K_noclr+K_lit),0,803/#00402C9C,string,`I?N????S???P??O`}
symtab[2308]:{-1,S_TVar,0,(S_set),0,0,object,{T_Dsq,MININT,MAXINT,object,-2},[esp-56]}
symtab[2309]:{v,S_TVar,45,(S_used+S_set+K_used+K_othr),2175,2310,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2310]:{fdx,S_TVar,45,(S_used+S_set+K_used+K_othr+K_dlft),0,2311,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2311]:{bGlobal,S_TVar,45,(S_used+S_set+K_used+K_othr+K_dlft),0,2312,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2312]:{-1,S_TVar,0,(S_set),0,2313,object,{T_Dsq,MININT,MAXINT,object,-2},[esp-12]}
symtab[2313]:{-1,S_TVar,0,(S_set),0,2314,T_Dsq,{T_Dsq,MININT,MAXINT,object,0},[esp-16]}
symtab[2314]:{-1,S_TVar,0,(S_set),0,2316,integer,{integer,0,1,object,-1},[esp-20]}
symtab[2315]:{-1,S_Const,45,(S_used+S_set+K_noclr+K_lit),0,804/#00402CA0,string,`locals for any file makes no sense!`}
symtab[2316]:{res,S_TVar,45,(S_used+S_set),2303,2317,sequence,{T_Dsq,MININT,MAXINT,object,-2},[esp-24]}
symtab[2317]:{symtab,S_TVar,45,(S_used+S_set+K_asmm),2296,2318,object,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[2318]:{si,S_TVar,45,(S_used+S_set),2306,2319,object,{object,MININT,MAXINT,object,-2},[esp-32]}
symtab[2319]:{-1,S_TVar,0,(S_set),0,2320,integer,{integer,0,MAXLEN,object,-1},[esp-36]}
symtab[2320]:{i,S_TVar,45,(S_used+S_set+S_for),2305,2321,integer,{integer,0,MAXLEN,object,-1},[esp-40]}
symtab[2321]:{-1,S_TVar,0,(S_set),0,2322,object,{object,MININT,MAXINT,object,-2},[esp-44]}
symtab[2322]:{-1,S_TVar,0,(S_set),0,2323,integer,{integer,0,4096,object,-1},[esp-48]}
symtab[2323]:{-1,S_TVar,0,(S_set),2322,0,integer,{integer,0,1,object,-1},[esp-52]}
symtab[2324]:{APPLY_PROC,S_Const,44,(S_used+S_set+K_wdb+K_noclr+K_lit),0,805/#00402CA4,integer,1}
symtab[2325]:{APPLY_FUNC,S_Const,44,(S_used+S_set+K_wdb+K_noclr+K_lit),0,806/#00402CA8,integer,2}
symtab[2326]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[2327]:{apply_,S_Func,44,(S_used+K_used+K_wdb),0,2378,{70,15,1,1,15},2328,3,28,#0044A0F2}
symtab[2328]:{s,S_TVar,44,(S_used+S_set+K_used+K_wdb+K_othr),2240,2329,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2329]:{fn,S_TVar,44,(S_used+S_set+K_used+K_wdb+K_othr),1827,2330,integer,{integer,MININT,MAXINT,object,-1},[esp-4]}
symtab[2330]:{pf,S_TVar,44,(S_used+S_set+K_used+K_wdb+K_othr),534,2331,integer,{integer,1,2,object,-1},[esp-8]}
symtab[2331]:{userdata,S_TVar,44,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,2332,object,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2332]:{maxp,S_TVar,44,(S_used+S_set+K_wdb),2302,2333,integer,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[2333]:{minp,S_TVar,44,(S_used+S_set+K_wdb),2300,2334,integer,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[2334]:{-1,S_TVar,0,(S_set),0,2335,sequence,{0b1101,0,0,object,-2},[esp-24]}
symtab[2335]:{res,S_TVar,44,(S_used+S_set+K_wdb),2316,2336,sequence,{sequence,MININT,MAXINT,object,-2},[esp-28]}
symtab[2336]:{l,S_TVar,44,(S_used+S_set+K_wdb),2231,2337,integer,{integer,0,MAXLEN,object,-1},[esp-32]}
symtab[2337]:{n,S_TVar,44,(S_used+S_set+K_wdb),2242,2338,integer,{integer,0,MAXLEN,object,-1},[esp-36]}
symtab[2338]:{-1,S_TVar,0,(S_set),0,2339,object,{integer,0,1,object,-1},[esp-40]}
symtab[2339]:{args,S_TVar,44,(S_used+S_set+K_wdb),2073,2340,sequence,{object,MININT,MAXINT,object,-2},[esp-44]}
symtab[2340]:{multi,S_TVar,44,(S_used+S_set+K_wdb),0,2341,sequence,{sequence,MININT,MAXINT,object,-2},[esp-48]}
symtab[2341]:{-1,S_TVar,0,(S_set),0,2342,integer,{integer,0,MAXLEN,object,-1},[esp-52]}
symtab[2342]:{i,S_TVar,44,(S_used+S_set+S_for+K_wdb),2320,2343,integer,{integer,0,MAXLEN,object,-1},[esp-56]}
symtab[2343]:{ui,S_TVar,44,(S_used+S_set+K_wdb),0,2344,object,{object,MININT,MAXINT,object,-2},[esp-60]}
symtab[2344]:{m,S_TVar,44,(S_used+S_set+K_wdb),0,2345,integer,{integer,0,MAXLEN,object,-1},[esp-64]}
symtab[2345]:{-1,S_TVar,0,(S_set),0,2348,object,{object,MININT,MAXINT,object,-2},[esp-68]}
symtab[2346]:{-1,S_Const,44,(S_used+S_set+K_noclr+K_lit),0,807/#00402CAC,string,`invalid lengths`}
symtab[2347]:{-1,S_Const,44,(S_used+S_set+K_noclr+K_lit),0,808/#00402CB0,string,`supplied function must accept %d parameters`}
symtab[2348]:{-1,S_TVar,0,(S_set),0,2349,T_Dsq,{0b0101,0,0,object,-2},[esp-72]}
symtab[2349]:{-1,S_TVar,0,(S_set),0,2350,integer,{integer,0,MAXLEN,object,-1},[esp-76]}
symtab[2350]:{-1,S_TVar,0,(S_set),0,2351,integer,{integer,0,MAXLEN,object,-1},[esp-80]}
symtab[2351]:{j,S_TVar,44,(S_used+S_set+S_for+K_wdb),2259,2352,integer,{integer,0,MAXLEN,object,-1},[esp-84]}
symtab[2352]:{-1,S_TVar,0,(S_set),0,2353,integer,{integer,0,MAXLEN,object,-1},[esp-88]}
symtab[2353]:{ui,S_TVar,44,(S_used+S_set+K_wdb),2343,2354,object,{object,MININT,MAXINT,object,-2},[esp-92]}
symtab[2354]:{lui,S_TVar,44,(S_used+S_set+K_wdb),0,2356,integer,{integer,0,MAXLEN,object,-1},[esp-96]}
symtab[2355]:{-1,S_Const,44,(S_used+S_set+K_noclr+K_lit),0,809/#00402CB4,string,`supplied function must accept 1..%d parameters`}
symtab[2356]:{ls,S_TVar,44,(S_used+S_set+K_wdb),2250,2358,integer,{integer,0,MAXLEN,object,-1},[esp-100]}
symtab[2357]:{-1,S_Const,44,(S_used+S_set+K_noclr+K_lit),0,810/#00402CB8,string,`supplied function must accept 1 parameter`}
symtab[2358]:{-1,S_TVar,0,(S_set),0,2360,integer,{integer,0,MAXLEN,object,-1},[esp-104]}
symtab[2359]:{-1,S_Const,44,(S_used+S_set+K_noclr+K_lit),0,811/#00402CBC,string,`supplied function must accept 1..2 parameters`}
symtab[2360]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,MAXLEN,object,-1},[esp-108]}
symtab[2361]:{s,S_TVar,44,(S_used+S_set+K_used+K_wdb+K_othr),2328,2362,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2362]:{fn,S_TVar,44,(S_used+S_set+K_used+K_wdb+K_othr),2329,2363,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2363]:{userdata,S_TVar,44,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2331,0,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2364]:{s,S_TVar,44,(S_used+S_set+K_used+K_wdb+K_othr),2361,2365,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2365]:{fn,S_TVar,44,(S_used+S_set+K_used+K_wdb+K_othr),2362,2366,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2366]:{userdata,S_TVar,44,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2363,0,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2367]:{S_Name,S_Const,46,(S_used+S_set+K_wdb+K_noclr+K_lit),3094,812/#00402CC0,integer,1}
symtab[2368]:{S_NTyp,S_Const,46,(S_used+S_set+K_wdb+K_noclr+K_lit),3095,813/#00402CC4,integer,2}
symtab[2369]:{S_FPno,S_Const,46,(S_used+S_set+K_wdb+K_noclr+K_lit),3096,814/#00402CC8,integer,3}
symtab[2370]:{S_State,S_Const,46,(S_used+S_set+K_wdb+K_noclr+K_lit),3097,815/#00402CCC,integer,4}
symtab[2371]:{S_Slink,S_Const,46,(S_used+S_set+K_wdb+K_noclr+K_lit),1988,816/#00402CD0,integer,6}
symtab[2372]:{S_vtype,S_Const,46,(S_used+S_set+K_wdb+K_noclr+K_lit),0,817/#00402CD4,integer,7}
symtab[2373]:{S_GVar2,S_Const,46,(S_used+S_set+K_wdb+K_noclr+K_lit),1994,818/#00402CD8,integer,2}
symtab[2374]:{K_gbl,S_Const,46,(S_used+S_set+K_wdb+K_noclr+K_lit),3104,819/#00402CDC,integer,4096}
symtab[2375]:{T_maintls,S_Const,46,(S_used+S_set+K_wdb+K_noclr+K_lit),2001,820/#00402CE0,integer,21}
symtab[2376]:{T_nslink,S_Const,46,(S_used+S_set+K_noclr+K_lit),0,821/#00402CE4,integer,18}
symtab[2377]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,MININT,MAXINT,object,-1},(eax)}
symtab[2378]:{prev_gvar,S_Func,46,(S_used+K_used+K_wdb),0,2383,{70,12,1},2379,2,3,#00441F83}
symtab[2379]:{symtab,S_TVar,46,(S_used+S_set+K_used+K_wdb+K_othr),2317,2380,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2380]:{idx,S_TVar,46,(S_used+S_set+K_used+K_wdb+K_othr),1910,2381,integer,{atom,MININT,MAXINT,object,-1},[esp-4]}
symtab[2381]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2382]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,MININT,MAXINT,object,-1},(eax)}
symtab[2383]:{get_id,S_Func,46,(S_used+K_used+K_wdb),0,2403,{70,8,1},2384,1,17,#004419A4}
symtab[2384]:{s,S_TVar,46,(S_used+S_set+K_used+K_wdb+K_othr),2364,2385,string,{string,MININT,MAXINT,integer,-2},[esp]}
symtab[2385]:{bVar,S_TVar,46,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,2386,integer,{integer,0,1,object,-1},[esp-4]}
symtab[2386]:{symtab,S_TVar,46,(S_used+S_set+K_wdb+K_asmm),2379,2387,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2387]:{si,S_TVar,46,(S_used+S_set+K_wdb),2318,2388,object,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2388]:{si_name,S_TVar,46,(S_used+S_set+K_wdb),0,2389,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[2389]:{rid,S_TVar,46,(S_used+S_set+K_wdb+K_asmm),2291,2390,integer,{atom,MININT,MAXINT,object,-2},[esp-20]}
symtab[2390]:{cFno,S_TVar,46,(S_used+S_set+K_wdb),0,2391,integer,{object,MININT,MAXINT,object,-2},[esp-24]}
symtab[2391]:{tFno,S_TVar,46,(S_used+S_set+K_wdb),0,2392,integer,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[2392]:{siFno,S_TVar,46,(S_used+S_set+K_wdb),0,2393,integer,{object,MININT,MAXINT,object,-2},[esp-32]}
symtab[2393]:{clink,S_TVar,46,(S_used+S_set+K_wdb),0,2394,integer,{object,MININT,MAXINT,object,-2},[esp-36]}
symtab[2394]:{state,S_TVar,46,(S_used+S_set+K_wdb),0,2395,integer,{object,MININT,MAXINT,object,-2},[esp-40]}
symtab[2395]:{isGlobal,S_TVar,46,(S_used+S_set+K_wdb),0,2396,integer,{integer,0,4096,object,-1},[esp-44]}
symtab[2396]:{res,S_TVar,46,(S_used+S_set+K_wdb),2335,2397,integer,{integer,MININT,MAXINT,object,-1},[esp-48]}
symtab[2397]:{name_space,S_TVar,46,(S_used+S_set+K_wdb),0,2398,sequence,{string,MININT,MAXINT,integer,-2},[esp-52]}
symtab[2398]:{-1,S_TVar,0,(S_set),0,2399,atom,{atom,MININT,MAXINT,object,-1},[esp-56]}
symtab[2399]:{-1,S_TVar,0,(S_set),0,2400,integer,{integer,0,MAXLEN,object,-1},[esp-60]}
symtab[2400]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-64]}
symtab[2401]:{s,S_TVar,46,(S_used+S_set+K_used+K_wdb+K_othr),2384,0,string,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2402]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,MININT,MAXINT,object,-1},(eax)}
symtab[2403]:{var_id,S_Func,46,(S_used+S_set+K_used+K_wdb+K_gbl+K_ridt),0,2415,{70,8},2404,1,1,#00441946}
symtab[2404]:{s,S_TVar,46,(S_used+S_set+K_used+K_wdb+K_othr),2401,0,string,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2405]:{T_pathset,S_Const,47,(S_used+S_set+K_wdb+K_noclr+K_lit),2826,822/#00402CE8,integer,16}
symtab[2406]:{T_fileset,S_Const,47,(S_used+S_set+K_wdb+K_noclr+K_lit),2827,823/#00402CEC,integer,17}
symtab[2407]:{T_cmdlnflg,S_Const,47,(S_used+S_set+K_wdb+K_noclr+K_lit),2000,824/#00402CF0,integer,19}
symtab[2408]:{init,S_GVar,47,(S_used+S_set+K_wdb+K_noclr),1649,825/#00402CF4,integer,{integer,0,1,object,-1},0}
symtab[2409]:{xKernel32,S_GVar,47,(S_used+S_set+K_wdb),0,826/#00402CF8,atom,{atom,MININT,MAXINT,object,-1},0}
symtab[2410]:{xGetCommandLine,S_GVar,47,(S_used+S_set+K_wdb),0,827/#00402CFC,atom,{integer,-1,MAXLEN,object,-1},0}
symtab[2411]:{xSearchPath,S_GVar,47,(S_used+S_set+K_wdb),0,828/#00402D00,atom,{integer,-1,MAXLEN,object,-1},0}
symtab[2412]:{dotEXE,S_GVar,47,(S_used+S_set+K_wdb),0,829/#00402D04,atom,{atom,MININT,MAXINT,object,-1},0}
symtab[2413]:{pFilePart,S_GVar,47,(S_used+S_set+K_wdb),0,830/#00402D08,atom,{atom,MININT,MAXINT,object,-1},0}
symtab[2414]:{-1,S_TVar,0,(S_set+K_Fres),0,0,sequence,{sequence,MININT,MAXINT,object,-2},(eax)}
symtab[2415]:{expandPath,S_Func,47,(S_used+K_used+K_wdb),0,2514,{70,12},2416,1,13,#00453E87}
symtab[2416]:{filepath,S_TVar,47,(S_used+S_set+K_used+K_wdb+K_othr),1734,2417,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2417]:{xPath,S_TVar,47,(S_used+S_set+K_wdb),0,2418,atom,{atom,MININT,MAXINT,object,-1},[esp-4]}
symtab[2418]:{xRawStr,S_TVar,47,(S_used+S_set+K_wdb),0,2419,atom,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2419]:{xBuffer,S_TVar,47,(S_used+S_set+K_wdb),0,2420,atom,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[2420]:{tmp,S_TVar,47,(S_used+S_set+K_wdb),1209,2421,sequence,{sequence,MININT,MAXINT,object,-2},[esp-16]}
symtab[2421]:{l,S_TVar,47,(S_used+S_set+K_wdb),2336,2422,integer,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[2422]:{-1,S_TVar,0,(S_set),0,2423,integer,{integer,0,MAXLEN,object,-1},[esp-24]}
symtab[2423]:{j,S_TVar,47,(S_used+S_set+S_for+K_wdb),2351,2424,integer,{integer,0,MAXLEN,object,-1},[esp-28]}
symtab[2424]:{-1,S_TVar,0,(S_set),0,2425,object,{object,MININT,MAXINT,object,-2},[esp-32]}
symtab[2425]:{-1,S_TVar,0,(S_set),2427,2426,sequence,{sequence,MININT,MAXINT,object,-2},[esp-36]}
symtab[2426]:{-1,S_TVar,0,(S_set),0,2427,atom,{integer,1,805306369,object,-1},[esp-40]}
symtab[2427]:{-1,S_TVar,0,(S_set),0,2428,sequence,{sequence,MININT,MAXINT,object,-2},[esp-44]}
symtab[2428]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,atom,-2},[esp-48]}
symtab[2429]:{bRaw,S_TVar,47,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,2430,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2430]:{symtab,S_TVar,47,(S_used+S_set+K_wdb+K_asmm),2386,2431,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2431]:{tmp2,S_TVar,47,(S_used+S_set+K_wdb),0,2432,object,{0b0101,0,0,object,-2},[esp-8]}
symtab[2432]:{plainstr,S_TVar,47,(S_used+S_set+K_wdb),0,2433,sequence,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2433]:{res,S_TVar,47,(S_used+S_set+K_wdb),2396,2434,sequence,{sequence,MININT,MAXINT,object,-2},[esp-16]}
symtab[2434]:{tmp,S_TVar,47,(S_used+S_set+K_wdb),2420,2435,object,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[2435]:{chfirst,S_TVar,47,(S_used+S_set+K_wdb),0,2436,integer,{atom,MININT,MAXINT,object,-1},[esp-24]}
symtab[2436]:{chlast,S_TVar,47,(S_used+S_set+K_wdb),0,2437,integer,{atom,MININT,MAXINT,object,-1},[esp-28]}
symtab[2437]:{l,S_TVar,47,(S_used+S_set+K_wdb),2421,2438,integer,{object,MININT,MAXINT,object,-2},[esp-32]}
symtab[2438]:{lr,S_TVar,47,(S_used+S_set+K_wdb),0,2439,integer,{integer,-1,MAXLEN,object,-1},[esp-36]}
symtab[2439]:{pArg4,S_TVar,47,(S_used+S_set+K_wdb+K_asmm),0,2440,integer,{atom,MININT,MAXINT,object,-2},[esp-40]}
symtab[2440]:{W,S_TVar,47,(S_used+S_set+K_wdb),0,2441,integer,?,[esp-44]}
symtab[2441]:{N,S_TVar,47,(S_used+S_set+K_wdb),1329,2443,integer,?,[esp-48]}
symtab[2442]:{-1,S_Const,47,(S_used+S_set+K_noclr+K_lit),0,831/#00402D0C,string,`GetCommandLineA`}
symtab[2443]:{-1,S_TVar,0,(S_set),0,2446,T_Dsq,{T_Dsq,MININT,MAXINT,integer,-2},[esp-52]}
symtab[2444]:{-1,S_Const,47,(S_used+S_set+K_noclr+K_lit),0,832/#00402D10,string,`SearchPathA`}
symtab[2445]:{-1,S_Const,47,(S_used+S_set+K_noclr+K_lit),0,833/#00402D14,string,`.exe`}
symtab[2446]:{-1,S_TVar,0,(S_set),0,2448,object,{object,MININT,MAXINT,object,-2},[esp-56]}
symtab[2447]:{-1,S_Const,47,(S_used+S_set+K_noclr+K_lit),0,834/#00402D18,string," \t"}
symtab[2448]:{-1,S_TVar,0,(S_set),0,2449,atom,{atom,MININT,MAXINT,object,-1},[esp-60]}
symtab[2449]:{-1,S_TVar,0,(S_set),0,2450,atom,{atom,MININT,MAXINT,object,-1},[esp-64]}
symtab[2450]:{i,S_TVar,47,(S_used+S_set+S_for+K_wdb),2342,2451,integer,{atom,MININT,MAXINT,object,-1},[esp-68]}
symtab[2451]:{-1,S_TVar,0,(S_set),0,2452,integer,{integer,0,MAXLEN,object,-1},[esp-72]}
symtab[2452]:{-1,S_TVar,0,(S_set),0,2453,integer,{integer,MININT,MAXINT,object,-1},[esp-76]}
symtab[2453]:{-1,S_TVar,0,(S_set),0,2454,integer,{integer,MININT,MAXINT,object,-1},[esp-80]}
symtab[2454]:{-1,S_TVar,0,(S_set),0,2455,atom,{atom,MININT,MAXINT,object,-1},[esp-84]}
symtab[2455]:{-1,S_TVar,0,(S_set),0,2456,integer,{integer,0,MAXLEN,object,-1},[esp-88]}
symtab[2456]:{-1,S_TVar,0,(S_set),0,2457,integer,?,[esp-92]}
symtab[2457]:{-1,S_TVar,0,(S_set),0,2458,string,?,[esp-96]}
symtab[2458]:{r1,S_TVar,47,(S_used+S_set+K_wdb),649,2459,string,?,[esp-100]}
symtab[2459]:{s,S_TVar,47,(S_used+S_set+K_wdb),2404,2460,sequence,?,[esp-104]}
symtab[2460]:{sir,S_TVar,47,(S_used+S_set+K_wdb),0,2461,string,?,[esp-108]}
symtab[2461]:{r2,S_TVar,47,(S_used+S_set+K_wdb),0,2462,string,?,[esp-112]}
symtab[2462]:{cdr,S_TVar,47,(S_used+S_set+K_wdb),0,2463,string,?,[esp-116]}
symtab[2463]:{-1,S_TVar,0,(S_set),0,0,sequence,{sequence,MININT,MAXINT,object,-2},[esp-120]}
symtab[2464]:{-1,S_Const,47,(S_used+S_set+K_noclr+K_lit),0,835/#00402D1C,string,`exw`}
symtab[2465]:{-1,S_Const,47,(S_used+S_set+K_noclr+K_lit),0,836/#00402D20,string,`exu`}
symtab[2466]:{-1,S_Const,47,(S_used+S_set+K_noclr+K_lit),0,837/#00402D24,string,`exwc`}
symtab[2467]:{-1,S_Const,47,(S_used+S_set+K_noclr+K_lit),0,838/#00402D28,string,`ex`}
symtab[2468]:{-1,S_Const,47,(S_used+S_set+K_noclr+K_lit),0,839/#00402D2C,string,"\\/ \t"&#22&"\'"}
symtab[2469]:{needle,S_TVar,48,(S_used+S_set+K_used+K_wdb+K_othr),2125,2470,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2470]:{haystack,S_TVar,48,(S_used+S_set+K_used+K_wdb+K_othr),2126,2471,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2471]:{start,S_TVar,48,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2127,2472,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2472]:{res,S_TVar,48,(S_used+S_set+K_wdb),2433,0,sequence,{T_Dsq,MININT,MAXINT,integer,-2},[esp-12]}
symtab[2473]:{o,S_TVar,49,(S_used+S_set+K_used+K_othr),1921,2474,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2474]:{-1,S_TVar,0,(S_set),0,2475,integer,{integer,0,1,object,-1},[esp-4]}
symtab[2475]:{-1,S_TVar,0,(S_set),2474,2476,integer,{integer,0,1,object,-1},[esp-8]}
symtab[2476]:{l,S_TVar,49,(S_used+S_set),2437,2477,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2477]:{res,S_TVar,49,(S_used+S_set),2472,2478,sequence,{sequence,MININT,MAXINT,object,-2},[esp-16]}
symtab[2478]:{-1,S_TVar,0,(S_set),0,2479,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[2479]:{i,S_TVar,49,(S_used+S_set+S_for),2450,2480,integer,{integer,0,MAXLEN,object,-1},[esp-24]}
symtab[2480]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[2481]:{ch,S_TVar,49,(S_used+S_set+K_used+K_othr),2144,2482,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2482]:{n,S_TVar,49,(S_used+S_set+K_used+K_othr),2337,2483,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2483]:{nFrames,S_TVar,49,(S_used+S_set+K_used+K_othr+K_dlft),0,2484,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2484]:{-1,S_TVar,0,(S_set),0,2486,integer,{integer,0,255,object,-1},[esp-12]}
symtab[2485]:{-1,S_Const,49,(S_used+S_set+K_noclr+K_lit),0,840/#00402D30,string,`repeat count must not be negative`}
symtab[2486]:{-1,S_TVar,0,(S_set),0,2487,T_Dsq,{T_Dsq,MININT,MAXINT,object,0},[esp-16]}
symtab[2487]:{res,S_TVar,49,(S_used+S_set+K_asmm),2477,0,string,{string,MININT,MAXINT,object,-2},[esp-20]}
symtab[2488]:{x,S_TVar,49,(S_used+S_set+K_used+K_othr),1088,2489,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2489]:{n,S_TVar,49,(S_used+S_set+K_used+K_othr),2482,2490,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2490]:{allow_strings,S_TVar,49,(S_used+S_set+K_used+K_othr+K_dlft),0,2491,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2491]:{res,S_TVar,49,(S_used+S_set+K_asmm),2487,2493,sequence,{sequence,MININT,MAXINT,object,-2},[esp-12]}
symtab[2492]:{-1,S_Const,49,(S_used+S_set+K_noclr+K_lit),0,841/#00402D34,integer,63}
symtab[2493]:{bDeep,S_TVar,49,(S_used+S_set),0,2494,integer,{integer,0,1,object,-1},[esp-16]}
symtab[2494]:{-1,S_TVar,0,(S_set),0,2495,integer,{integer,0,1,object,-1},[esp-20]}
symtab[2495]:{-1,S_TVar,0,(S_set),0,2496,integer,{integer,0,1,object,-1},[esp-24]}
symtab[2496]:{x0,S_TVar,49,(S_used+S_set),0,2497,object,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[2497]:{-1,S_TVar,0,(S_set),0,2498,object,{object,MININT,MAXINT,object,-2},[esp-32]}
symtab[2498]:{-1,S_TVar,0,(S_set),0,2499,integer,{integer,MININT,MAXINT,object,-1},[esp-36]}
symtab[2499]:{i,S_TVar,49,(S_used+S_set+S_for),2479,2500,integer,{integer,MININT,MAXINT,object,-1},[esp-40]}
symtab[2500]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-44]}
symtab[2501]:{x,S_TVar,50,(S_used+S_set+K_used+K_wdb+K_othr),2488,2502,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2502]:{specifically,S_TVar,50,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,2503,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2503]:{rid,S_TVar,50,(S_used+S_set+K_wdb+K_asmm),2389,2504,integer,{atom,MININT,MAXINT,object,-2},[esp-8]}
symtab[2504]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,1,object,-1},[esp-12]}
symtab[2505]:{s,S_TVar,51,(S_used+S_set+K_used+K_wdb+K_othr),2459,2506,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2506]:{l,S_TVar,51,(S_used+S_set+K_wdb),2476,2507,integer,{integer,0,MAXLEN,object,-1},[esp-4]}
symtab[2507]:{r,S_TVar,51,(S_used+S_set+K_wdb),2157,2508,sequence,{sequence,MININT,MAXINT,object,-2},[esp-8]}
symtab[2508]:{-1,S_TVar,0,(S_set),0,2509,object,{integer,0,32,object,-1},[esp-12]}
symtab[2509]:{-1,S_TVar,0,(S_set),0,2510,atom,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[2510]:{-1,S_TVar,0,(S_set),0,2511,atom,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[2511]:{i,S_TVar,51,(S_used+S_set+S_for+K_wdb),2499,2512,integer,{atom,MININT,MAXINT,object,-1},[esp-24]}
symtab[2512]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[2513]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,0,1,object,-1},(eax)}
symtab[2514]:{trig_range,S_Type,51,(S_used+K_used+K_wdb),0,2524,{84,3},2515,1,2,#0045BAF9}
symtab[2515]:{x,S_TVar,51,(S_used+S_set+K_used+K_wdb+K_type),2501,2516,atom,{atom,MININT,MAXINT,object,-1},[esp]}
symtab[2516]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,1,object,-1},[esp-4]}
symtab[2517]:{x,S_TVar,51,(S_used+S_set+K_used+K_wdb+K_othr),2515,2519,trig_range,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2518]:{-1,S_Const,51,(S_used+S_set+K_noclr+K_lit),0,842/#00402D38,atom,1.570796327}
symtab[2519]:{-1,S_TVar,0,(S_set),0,2520,atom,{atom,MININT,MAXINT,object,-1},[esp-4]}
symtab[2520]:{-1,S_TVar,0,(S_set),2519,0,atom,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2521]:{x,S_TVar,51,(S_used+S_set+K_used+K_wdb+K_othr),2517,2522,trig_range,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2522]:{-1,S_TVar,0,(S_set),2523,2523,atom,{atom,MININT,MAXINT,object,-1},[esp-4]}
symtab[2523]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2524]:{<tls>,S_Proc,52,(S_used+K_used+K_wdb),0,2611,{80},0,0,0,#0045BA6B}
symtab[2525]:{a,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2199,0,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2526]:{a,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2525,0,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2527]:{a,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2526,2528,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2528]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-4]}
symtab[2529]:{a,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2527,2530,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2530]:{inverted_precision,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,2531,atom,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2531]:{-1,S_TVar,0,(S_set),2532,2532,atom,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2532]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[2533]:{pence,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),0,2534,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2534]:{precision,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),666,2535,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2535]:{pennies,S_TVar,53,(S_used+S_set+K_wdb),0,2536,integer,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2536]:{s,S_TVar,53,(S_used+S_set+K_wdb),2505,2537,integer,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[2537]:{whole,S_TVar,53,(S_used+S_set+K_wdb),0,2538,integer,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[2538]:{-1,S_TVar,0,(S_set),0,2539,atom,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[2539]:{fract,S_TVar,53,(S_used+S_set+K_wdb),0,2540,atom,{atom,MININT,MAXINT,object,-1},[esp-24]}
symtab[2540]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,1,object,-1},[esp-28]}
symtab[2541]:{o,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2473,2542,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2542]:{-1,S_TVar,0,(S_set),0,2543,atom,{atom,MININT,MAXINT,object,-1},[esp-4]}
symtab[2543]:{-1,S_TVar,0,(S_set),2542,0,atom,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2544]:{a,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2529,2545,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2545]:{b,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),0,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2546]:{s,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2536,2547,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2547]:{return_index,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,2548,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2548]:{res,S_TVar,53,(S_used+S_set+K_wdb),2491,2549,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2549]:{rdx,S_TVar,53,(S_used+S_set+K_used+K_aod+K_wdb),0,2550,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2550]:{-1,S_TVar,0,(S_set),0,2551,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[2551]:{i,S_TVar,53,(S_used+S_set+S_for+K_wdb),2511,2552,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[2552]:{si,S_TVar,53,(S_used+S_set+K_wdb),2387,2553,object,{object,MININT,MAXINT,object,-2},[esp-24]}
symtab[2553]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[2554]:{a,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2544,2555,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2555]:{b,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2545,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2556]:{s,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2546,2557,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2557]:{return_index,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2547,2558,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2558]:{res,S_TVar,53,(S_used+S_set+K_wdb),2548,2559,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2559]:{rdx,S_TVar,53,(S_used+S_set+K_used+K_aod+K_wdb),2549,2560,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2560]:{-1,S_TVar,0,(S_set),0,2561,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[2561]:{i,S_TVar,53,(S_used+S_set+S_for+K_wdb),2551,2562,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[2562]:{si,S_TVar,53,(S_used+S_set+K_wdb),2552,2563,object,{object,MININT,MAXINT,object,-2},[esp-24]}
symtab[2563]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[2564]:{s,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2556,2565,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2565]:{m,S_TVar,53,(S_used+S_set+K_wdb),2344,2566,atom,{atom,MININT,MAXINT,object,-1},[esp-4]}
symtab[2566]:{-1,S_TVar,0,(S_set),0,2567,integer,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2567]:{-1,S_TVar,0,(S_set),0,2568,object,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2568]:{-1,S_TVar,0,(S_set),2569,2569,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[2569]:{-1,S_TVar,0,(S_set),0,2570,object,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[2570]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-24]}
symtab[2571]:{x,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2521,2572,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2572]:{y,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),1623,2573,atom,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2573]:{-1,S_TVar,0,(S_set),2574,2574,atom,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2574]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[2575]:{x,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2571,2576,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2576]:{-1,S_TVar,0,(S_set),2577,2577,atom,{atom,MININT,MAXINT,object,-1},[esp-4]}
symtab[2577]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2578]:{y,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2572,2579,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2579]:{x,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2575,2580,atom,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2580]:{-1,S_TVar,0,(S_set),0,2581,atom,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2581]:{-1,S_TVar,0,(S_set),2580,0,atom,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[2582]:{-1,S_Const,53,(S_used+S_set+K_noclr+K_lit),0,843/#00402D3C,atom,-1.570796327}
symtab[2583]:{a,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2554,2584,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2584]:{b,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2555,2585,atom,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2585]:{modulus,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),0,2587,atom,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2586]:{-1,S_Const,53,(S_set+K_noclr+K_lit),0,844/#00402D40,integer,16777215}
symtab[2587]:{-1,S_TVar,0,(S_set),0,2588,atom,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[2588]:{-1,S_TVar,0,(S_set),0,2589,T_Dsq,{0b0101,0,0,atom,2},[esp-16]}
symtab[2589]:{result,S_TVar,53,(S_used+S_set+K_wdb),648,2590,atom,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[2590]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,1,object,-1},[esp-24]}
symtab[2591]:{base,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2156,2592,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2592]:{exponent,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),552,2593,atom,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2593]:{modulus,S_TVar,53,(S_used+S_set+K_used+K_wdb+K_othr),2585,2594,atom,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2594]:{result,S_TVar,53,(S_used+S_set+K_used+K_aod+K_wdb),2589,2595,atom,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[2595]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,1,object,-1},[esp-16]}
symtab[2596]:{x,S_TVar,54,(S_used+S_set+K_used+K_othr),2579,2597,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2597]:{order,S_TVar,54,(S_used+S_set+K_used+K_othr+K_dlft),0,2598,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2598]:{gap,S_TVar,54,(S_used+S_set),0,2599,integer,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2599]:{j,S_TVar,54,(S_used+S_set),2423,2600,integer,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[2600]:{first,S_TVar,54,(S_used+S_set),0,2601,integer,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[2601]:{last,S_TVar,54,(S_used+S_set),0,2602,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[2602]:{tempi,S_TVar,54,(S_used+S_set),0,2603,object,{object,MININT,MAXINT,object,-2},[esp-24]}
symtab[2603]:{tempj,S_TVar,54,(S_used+S_set),0,2604,object,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[2604]:{-1,S_TVar,0,(S_set),0,2605,integer,{atom,MININT,MAXINT,object,-1},[esp-32]}
symtab[2605]:{-1,S_TVar,0,(S_set),0,2606,integer,{integer,MININT,MAXINT,object,-1},[esp-36]}
symtab[2606]:{-1,S_TVar,0,(S_set),0,2607,integer,{integer,0,MAXLEN,object,-1},[esp-40]}
symtab[2607]:{i,S_TVar,54,(S_used+S_set+S_for),2561,2609,integer,{integer,MININT,MAXINT,object,-1},[esp-44]}
symtab[2608]:{-1,S_Const,54,(S_used+S_set+K_noclr+K_lit),0,845/#00402D44,T_N,3.5}
symtab[2609]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-48]}
symtab[2610]:{-1,S_TVar,0,(S_set+K_Fres),0,0,integer,{integer,-1,1,object,-1},(eax)}
symtab[2611]:{tagsort,S_Func,54,(S_used+K_used+K_ridt),0,2638,{70,1,1,12},2612,3,6,#00441099}
symtab[2612]:{i,S_TVar,54,(S_used+S_set+K_used+K_othr),2607,2613,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2613]:{j,S_TVar,54,(S_used+S_set+K_used+K_othr),2599,2614,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2614]:{data,S_TVar,54,(S_used+S_set+K_used+K_othr),0,2615,sequence,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2615]:{c,S_TVar,54,(S_used+S_set),1318,2616,integer,{integer,-1,1,object,-1},[esp-12]}
symtab[2616]:{-1,S_TVar,0,(S_set),2617,2617,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[2617]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[2618]:{custom_compare,S_TVar,54,(S_used+S_set+K_used+K_othr),0,2619,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2619]:{x,S_TVar,54,(S_used+S_set+K_used+K_othr),2596,2620,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2620]:{data,S_TVar,54,(S_used+S_set+K_used+K_othr+K_dlft),2614,2621,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2621]:{order,S_TVar,54,(S_used+S_set+K_used+K_othr+K_dlft),2597,2622,integer,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2622]:{gap,S_TVar,54,(S_used+S_set),2598,2623,integer,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[2623]:{j,S_TVar,54,(S_used+S_set),2613,2624,integer,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[2624]:{first,S_TVar,54,(S_used+S_set),2600,2625,integer,{atom,MININT,MAXINT,object,-1},[esp-24]}
symtab[2625]:{last,S_TVar,54,(S_used+S_set),2601,2626,integer,{integer,0,MAXLEN,object,-1},[esp-28]}
symtab[2626]:{tempi,S_TVar,54,(S_used+S_set),2602,2627,object,{object,MININT,MAXINT,object,-2},[esp-32]}
symtab[2627]:{tempj,S_TVar,54,(S_used+S_set),2603,2628,object,{object,MININT,MAXINT,object,-2},[esp-36]}
symtab[2628]:{args,S_TVar,54,(S_used+S_set),2339,2629,sequence,{T_Dsq,MININT,MAXINT,object,-2},[esp-40]}
symtab[2629]:{-1,S_TVar,0,(S_set),0,2630,T_Dsq,{T_Dsq,MININT,MAXINT,object,0},[esp-44]}
symtab[2630]:{-1,S_TVar,0,(S_set),0,2631,integer,{atom,MININT,MAXINT,object,-1},[esp-48]}
symtab[2631]:{-1,S_TVar,0,(S_set),0,2633,object,{object,MININT,MAXINT,object,-2},[esp-52]}
symtab[2632]:{-1,S_Const,54,(S_used+S_set+K_rtn),0,846/#00402D48,integer,2611}
symtab[2633]:{-1,S_TVar,0,(S_set),0,2634,integer,{integer,MININT,MAXINT,object,-1},[esp-56]}
symtab[2634]:{-1,S_TVar,0,(S_set),0,2635,integer,{integer,0,MAXLEN,object,-1},[esp-60]}
symtab[2635]:{i,S_TVar,54,(S_used+S_set+S_for),2612,2636,integer,{integer,MININT,MAXINT,object,-1},[esp-64]}
symtab[2636]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-68]}
symtab[2637]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{integer,-1,1,object,-1},(eax)}
symtab[2638]:{column_compare,S_Func,54,(S_used+K_used+K_ridt),0,2718,{70,15,15,12},2639,3,12,#0044112A}
symtab[2639]:{a,S_TVar,54,(S_used+S_set+K_used+K_othr),2583,2640,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2640]:{b,S_TVar,54,(S_used+S_set+K_used+K_othr),2584,2641,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2641]:{cols,S_TVar,54,(S_used+S_set+K_used+K_othr),0,2642,sequence,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2642]:{-1,S_TVar,0,(S_set),0,2643,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2643]:{i,S_TVar,54,(S_used+S_set+S_for),2635,2644,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[2644]:{sgn,S_TVar,54,(S_used+S_set),2143,2645,integer,{integer,-1,1,object,-1},[esp-20]}
symtab[2645]:{column,S_TVar,54,(S_used+S_set),0,2646,integer,{integer,MININT,MAXINT,object,-1},[esp-24]}
symtab[2646]:{-1,S_TVar,0,(S_set),0,2647,integer,{integer,0,MAXLEN,object,-1},[esp-28]}
symtab[2647]:{-1,S_TVar,0,(S_set),0,2648,atom,{integer,-1,1,object,-1},[esp-32]}
symtab[2648]:{c,S_TVar,54,(S_used+S_set),2615,2649,integer,{integer,-1,1,object,-1},[esp-36]}
symtab[2649]:{-1,S_TVar,0,(S_set),2650,2650,object,{object,MININT,MAXINT,object,-2},[esp-40]}
symtab[2650]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-44]}
symtab[2651]:{x,S_TVar,54,(S_used+S_set+K_used+K_othr),2619,2652,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2652]:{column_list,S_TVar,54,(S_used+S_set+K_used+K_othr),0,2654,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2653]:{-1,S_Const,54,(S_used+S_set+K_rtn),0,847/#00402D4C,integer,2638}
symtab[2654]:{-1,S_TVar,0,(S_set),0,2655,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2655]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,sequence,1},[esp-12]}
symtab[2656]:{text,S_TVar,55,(S_used+S_set+K_used+K_wdb+K_othr),1072,2657,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2657]:{s,S_TVar,55,(S_used+S_set+K_used+K_wdb+K_othr),2564,2658,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2658]:{r,S_TVar,55,(S_used+S_set+K_used+K_wdb+K_othr),2507,2659,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2659]:{limit,S_TVar,55,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,2660,integer,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2660]:{k,S_TVar,55,(S_used+S_set+K_used+K_aod+K_wdb),2071,2661,integer,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[2661]:{l,S_TVar,55,(S_used+S_set+K_wdb),2506,2662,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[2662]:{-1,S_TVar,0,(S_set),0,2663,object,{integer,0,MAXLEN,object,-1},[esp-24]}
symtab[2663]:{startidx,S_TVar,55,(S_used+S_set+K_used+K_aod+K_wdb),0,2664,integer,{integer,MININT,MAXINT,object,-1},[esp-28]}
symtab[2664]:{chunks,S_TVar,55,(S_used+S_set+K_wdb),0,2665,sequence,{T_Dsq,MININT,MAXINT,0b1101,-2},[esp-32]}
symtab[2665]:{-1,S_TVar,0,(S_set),0,2666,integer,{integer,0,MAXLEN,object,-1},[esp-36]}
symtab[2666]:{-1,S_TVar,0,(S_set),0,2667,atom,{atom,MININT,MAXINT,object,-1},[esp-40]}
symtab[2667]:{-1,S_TVar,0,(S_set),0,2668,sequence,{0b1101,0,0,object,-2},[esp-44]}
symtab[2668]:{i,S_TVar,55,(S_used+S_set+S_for+K_wdb),2643,2669,integer,{integer,0,MAXLEN,object,-1},[esp-48]}
symtab[2669]:{-1,S_TVar,0,(S_set),0,0,object,{0b1101,MININT,MAXINT,object,-2},[esp-52]}
symtab[2670]:{text,S_TVar,55,(S_used+S_set+K_used+K_wdb+K_othr),2656,2671,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2671]:{strings,S_TVar,55,(S_used+S_set+K_used+K_wdb+K_othr),0,2672,sequence,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2672]:{replacements,S_TVar,55,(S_used+S_set+K_used+K_wdb+K_othr),0,2673,sequence,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2673]:{-1,S_TVar,0,(S_set),0,2674,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2674]:{i,S_TVar,55,(S_used+S_set+S_for+K_wdb),2668,2675,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[2675]:{ch,S_TVar,55,(S_used+S_set+K_wdb),2481,2676,integer,{integer,0,255,object,-1},[esp-20]}
symtab[2676]:{repch,S_TVar,55,(S_used+S_set+K_wdb),0,2677,integer,{integer,0,255,object,-1},[esp-24]}
symtab[2677]:{-1,S_TVar,0,(S_set),0,2678,integer,{integer,0,MAXLEN,object,-1},[esp-28]}
symtab[2678]:{j,S_TVar,55,(S_used+S_set+S_for+K_wdb),2623,2679,integer,{integer,0,MAXLEN,object,-1},[esp-32]}
symtab[2679]:{-1,S_TVar,0,(S_set),2681,2680,object,{object,MININT,MAXINT,object,-2},[esp-36]}
symtab[2680]:{-1,S_TVar,0,(S_set),0,2681,sequence,{sequence,MININT,MAXINT,object,-2},[esp-40]}
symtab[2681]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-44]}
symtab[2682]:{lim,S_TVar,56,(S_used+S_set+K_used+K_wdb+K_othr),0,2683,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2683]:{start,S_TVar,56,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2471,2684,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2684]:{step,S_TVar,56,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2241,2685,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2685]:{bString,S_TVar,56,(S_used+S_set+K_wdb),0,2686,integer,{integer,0,1,object,-1},[esp-12]}
symtab[2686]:{-1,S_TVar,0,(S_set),0,2687,integer,{integer,0,1,object,-1},[esp-16]}
symtab[2687]:{l,S_TVar,56,(S_used+S_set+K_wdb),2661,2688,integer,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[2688]:{-1,S_TVar,0,(S_set),2689,2689,atom,{atom,MININT,MAXINT,object,-1},[esp-24]}
symtab[2689]:{-1,S_TVar,0,(S_set),0,2690,atom,{atom,MININT,MAXINT,object,-1},[esp-28]}
symtab[2690]:{res,S_TVar,56,(S_used+S_set+K_wdb),2558,2691,sequence,{sequence,MININT,MAXINT,object,-2},[esp-32]}
symtab[2691]:{-1,S_TVar,0,(S_set),0,2692,object,{integer,0,32,object,-1},[esp-36]}
symtab[2692]:{-1,S_TVar,0,(S_set),0,2693,integer,{integer,MININT,MAXINT,object,-1},[esp-40]}
symtab[2693]:{i,S_TVar,56,(S_used+S_set+S_for+K_wdb),2674,0,integer,{integer,MININT,MAXINT,object,-1},[esp-44]}
symtab[2694]:{start,S_TVar,56,(S_used+S_set+K_used+K_wdb+K_othr),2683,2695,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2695]:{len,S_TVar,56,(S_used+S_set+K_used+K_wdb+K_othr),976,2696,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2696]:{step,S_TVar,56,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2684,2697,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2697]:{-1,S_TVar,0,(S_set),2698,2698,atom,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[2698]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[2699]:{n,S_TVar,57,(S_used+S_set+K_used+K_wdb+K_othr),2489,2700,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2700]:{shift_distance,S_TVar,57,(S_used+S_set+K_used+K_wdb+K_othr),0,2701,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2701]:{-1,S_TVar,0,(S_set),0,2702,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[2702]:{i,S_TVar,57,(S_used+S_set+S_for+K_wdb),2693,2703,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2703]:{-1,S_TVar,0,(S_set),0,2704,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[2704]:{-1,S_TVar,0,(S_set),2705,2705,atom,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[2705]:{-1,S_TVar,0,(S_set),0,2706,atom,{atom,MININT,MAXINT,object,-1},[esp-24]}
symtab[2706]:{lSigned,S_TVar,57,(S_used+S_set+K_wdb),0,0,integer,{integer,0,1,object,-1},[esp-28]}
symtab[2707]:{n,S_TVar,57,(S_used+S_set+K_used+K_wdb+K_othr),2699,2708,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2708]:{nFrames,S_TVar,57,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2483,2709,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2709]:{-1,S_TVar,0,(S_set),0,2710,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[2710]:{i,S_TVar,57,(S_used+S_set+S_for+K_wdb),2702,2711,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2711]:{-1,S_TVar,0,(S_set),0,2712,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[2712]:{-1,S_TVar,0,(S_set),2716,2713,atom,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[2713]:{res,S_TVar,57,(S_used+S_set+K_wdb),2690,2714,integer,{object,MININT,MAXINT,object,-2},[esp-24]}
symtab[2714]:{-1,S_TVar,0,(S_set),0,2715,string,{string,MININT,MAXINT,integer,-2},[esp-28]}
symtab[2715]:{-1,S_TVar,0,(S_set),0,2716,integer,{integer,0,255,object,-1},[esp-32]}
symtab[2716]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-36]}
symtab[2717]:{-1,S_Const,57,(S_used+S_set+K_noclr+K_lit),0,848/#00402D50,integer,1073741823}
symtab[2718]:{sq_fatal,S_Proc,58,(S_used+K_used+K_wdb),0,2726,{80,12,12},2719,2,5,#0044D6E4}
symtab[2719]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2639,2720,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2720]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2640,2722,sequence,{sequence,MININT,MAXINT,object,-2},[esp-4]}
symtab[2721]:{-1,S_Const,58,(S_used+S_set+K_noclr+K_lit),0,849/#00402D54,string,"sequence lengths not the same (%d!=%d)!\n"}
symtab[2722]:{-1,S_TVar,0,(S_set),2723,2723,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[2723]:{-1,S_TVar,0,(S_set),0,2724,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2724]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,integer,2},[esp-16]}
symtab[2725]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[2726]:{sq_general,S_Func,58,(S_used+K_used+K_wdb),0,2751,{70,15,15,1,1},2727,3,19,#0044CCD1}
symtab[2727]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2719,2728,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2728]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2720,2729,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2729]:{fn,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2365,2730,integer,{integer,MININT,MAXINT,object,-1},[esp-8]}
symtab[2730]:{recursive,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,2732,integer,{integer,1,1,object,-1},[esp-12]}
symtab[2731]:{-1,S_Const,58,(S_set+K_noclr+K_lit),0,850/#00402D58,integer,60}
symtab[2732]:{-1,S_TVar,0,(S_set),0,2734,integer,{integer,0,1,object,-1},[esp-16]}
symtab[2733]:{-1,S_Const,58,(S_set+K_noclr+K_lit),0,851/#00402D5C,integer,109}
symtab[2734]:{-1,S_TVar,0,(S_set),0,2737,integer,{integer,0,1,object,-1},[esp-20]}
symtab[2735]:{-1,S_Const,58,(S_set+K_noclr+K_lit),0,852/#00402D60,integer,112}
symtab[2736]:{-1,S_Const,58,(S_set+K_noclr+K_lit),0,853/#00402D64,integer,77}
symtab[2737]:{lb,S_TVar,58,(S_used+S_set+K_wdb),0,2738,integer,{integer,0,MAXLEN,object,-1},[esp-24]}
symtab[2738]:{res,S_TVar,58,(S_used+S_set+K_wdb),2713,2739,sequence,{sequence,MININT,MAXINT,object,-2},[esp-28]}
symtab[2739]:{-1,S_TVar,0,(S_set),0,2740,object,{integer,0,32,object,-1},[esp-32]}
symtab[2740]:{-1,S_TVar,0,(S_set),0,2741,integer,{integer,0,MAXLEN,object,-1},[esp-36]}
symtab[2741]:{i,S_TVar,58,(S_used+S_set+S_for+K_wdb),2710,2742,integer,{integer,0,MAXLEN,object,-1},[esp-40]}
symtab[2742]:{-1,S_TVar,0,(S_set),0,2743,object,{object,MININT,MAXINT,object,-2},[esp-44]}
symtab[2743]:{la,S_TVar,58,(S_used+S_set+K_wdb),2025,2744,integer,{integer,0,MAXLEN,object,-1},[esp-48]}
symtab[2744]:{res,S_TVar,58,(S_used+S_set+K_wdb),2738,2745,sequence,{sequence,MININT,MAXINT,object,-2},[esp-52]}
symtab[2745]:{-1,S_TVar,0,(S_set),0,2746,integer,{integer,0,MAXLEN,object,-1},[esp-56]}
symtab[2746]:{-1,S_TVar,0,(S_set),2749,2747,object,{object,MININT,MAXINT,object,-2},[esp-60]}
symtab[2747]:{-1,S_TVar,0,(S_set),0,2748,integer,{integer,0,MAXLEN,object,-1},[esp-64]}
symtab[2748]:{-1,S_TVar,0,(S_set),0,2749,integer,{integer,0,MAXLEN,object,-1},[esp-68]}
symtab[2749]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-72]}
symtab[2750]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[2751]:{sq_unary,S_Func,58,(S_used+K_used+K_wdb),0,2830,{70,15,1,1,1},2752,2,12,#0044128C}
symtab[2752]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2727,2753,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2753]:{fn,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2729,2754,integer,{integer,MININT,MAXINT,object,-1},[esp-4]}
symtab[2754]:{level,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2037,2755,integer,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2755]:{recursive,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2730,2756,integer,{integer,MININT,MAXINT,object,-1},[esp-12]}
symtab[2756]:{-1,S_TVar,0,(S_set),0,2759,integer,{integer,0,1,object,-1},[esp-16]}
symtab[2757]:{-1,S_Const,58,(S_set+K_noclr+K_lit),0,854/#00402D68,integer,67}
symtab[2758]:{-1,S_Const,58,(S_set+K_noclr+K_lit),0,855/#00402D6C,integer,85}
symtab[2759]:{la,S_TVar,58,(S_used+S_set+K_wdb),2743,2760,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[2760]:{res,S_TVar,58,(S_used+S_set+K_wdb),2744,2761,sequence,{sequence,MININT,MAXINT,object,-2},[esp-24]}
symtab[2761]:{-1,S_TVar,0,(S_set),0,2762,object,{integer,0,32,object,-1},[esp-28]}
symtab[2762]:{-1,S_TVar,0,(S_set),0,2763,integer,{integer,0,MAXLEN,object,-1},[esp-32]}
symtab[2763]:{i,S_TVar,58,(S_used+S_set+S_for+K_wdb),2741,2764,integer,{integer,0,MAXLEN,object,-1},[esp-36]}
symtab[2764]:{-1,S_TVar,0,(S_set),0,2765,object,{object,MININT,MAXINT,object,-2},[esp-40]}
symtab[2765]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-44]}
symtab[2766]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2752,2767,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2767]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2728,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2768]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2766,2769,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2769]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2767,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2770]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2768,2771,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2771]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2769,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2772]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2770,2773,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2773]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2771,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2774]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2772,2775,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2775]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2773,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2776]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2774,2777,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2777]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2775,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2778]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2776,2779,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2779]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2777,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2780]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2778,2781,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2781]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2779,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2782]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2780,2783,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2783]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2781,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2784]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2782,2785,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2785]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2783,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2786]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2784,2787,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2787]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2785,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2788]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2786,2789,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2789]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2787,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2790]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2788,2791,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2791]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2789,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2792]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2790,2793,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2793]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2791,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2794]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2792,2795,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2795]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2793,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2796]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2794,2797,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2797]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2795,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2798]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2796,2799,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2799]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2797,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2800]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2798,2801,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2801]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2799,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2802]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2800,2803,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2803]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2801,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2804]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2802,2805,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2805]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2803,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2806]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2804,2807,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2807]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2805,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2808]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2806,2809,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2809]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2807,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2810]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2808,2811,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2811]:{b,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2809,0,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2812]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2810,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2813]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2812,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2814]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2813,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2815]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2814,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2816]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2815,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2817]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2816,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2818]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2817,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2819]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2818,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2820]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2819,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2821]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2820,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2822]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2821,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2823]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2822,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2824]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2823,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2825]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2824,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2826]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2825,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2827]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2826,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2828]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2827,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2829]:{-1,S_TVar,0,(S_set+K_Fres),0,0,object,{object,MININT,MAXINT,object,-2},(eax)}
symtab[2830]:{sq_ln,S_Func,58,(S_used+S_set+K_used+K_wdb+K_gbl+K_ridt),0,2852,{70,15},2831,1,1,#0044124A}
symtab[2831]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2828,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2832]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2831,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2833]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2832,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2834]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2833,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2835]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2834,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2836]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2835,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2837]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2836,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2838]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2837,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2839]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2838,0,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2840]:{a,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr),2839,2841,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2841]:{inverted_precision,S_TVar,58,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2530,2842,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2842]:{len,S_TVar,58,(S_used+S_set+K_wdb),2695,2843,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[2843]:{lp,S_TVar,58,(S_used+S_set+K_wdb),1114,2844,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2844]:{res,S_TVar,58,(S_used+S_set+K_wdb),2760,2845,object,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[2845]:{-1,S_TVar,0,(S_set),0,2846,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[2846]:{i,S_TVar,58,(S_used+S_set+S_for+K_wdb),2763,2847,integer,{integer,0,MAXLEN,object,-1},[esp-24]}
symtab[2847]:{-1,S_TVar,0,(S_set),2851,2848,object,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[2848]:{-1,S_TVar,0,(S_set),0,2849,integer,{integer,0,MAXLEN,object,-1},[esp-32]}
symtab[2849]:{-1,S_TVar,0,(S_set),0,2850,T_Dsq,{T_Dsq,MININT,MAXINT,integer,2},[esp-36]}
symtab[2850]:{-1,S_TVar,0,(S_set),0,2851,integer,{integer,0,MAXLEN,object,-1},[esp-40]}
symtab[2851]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-44]}
symtab[2852]:{<tls>,S_Proc,59,(S_used+K_used+K_wdb),0,2911,{80},0,0,0,#0045B9DE}
symtab[2853]:{n,S_TVar,60,(S_used+S_set+K_used+K_wdb+K_othr),2707,2854,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2854]:{t,S_TVar,60,(S_used+S_set+K_wdb),1800,2855,atom,{atom,MININT,MAXINT,object,-1},[esp-4]}
symtab[2855]:{r,S_TVar,60,(S_used+S_set+K_wdb),2658,2856,atom,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2856]:{-1,S_TVar,0,(S_set),0,2857,atom,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[2857]:{-1,S_TVar,0,(S_set),2856,0,atom,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[2858]:{n,S_TVar,60,(S_used+S_set+K_used+K_wdb+K_othr),2853,2859,atom,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2859]:{-1,S_TVar,0,(S_set),2860,2860,atom,{atom,MININT,MAXINT,object,-1},[esp-4]}
symtab[2860]:{-1,S_TVar,0,(S_set),0,2861,atom,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2861]:{t,S_TVar,60,(S_used+S_set+K_wdb),2854,2862,integer,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[2862]:{r,S_TVar,60,(S_used+S_set+K_wdb),2855,0,integer,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[2863]:{-1,S_Const,60,(S_used+S_set+K_noclr+K_lit),0,856/#00402D70,T_N,1.442695041}
symtab[2864]:{-1,S_Const,61,(S_used+S_set+K_noclr+K_lit),0,857/#00402D74,string," \t\r\n"}
symtab[2865]:{source,S_TVar,61,(S_used+S_set+K_used+K_othr),0,2866,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2866]:{what,S_TVar,61,(S_used+S_set+K_used+K_othr+K_dlft),0,2867,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2867]:{return_index,S_TVar,61,(S_used+S_set+K_used+K_othr+K_dlft),2557,2868,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2868]:{lpos,S_TVar,61,(S_used+S_set),0,2869,integer,{atom,MININT,MAXINT,object,-1},[esp-12]}
symtab[2869]:{rpos,S_TVar,61,(S_used+S_set),0,2870,integer,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[2870]:{-1,S_TVar,0,(S_set),0,2871,object,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[2871]:{-1,S_TVar,0,(S_set),0,2872,T_Dsq,{T_Dsq,MININT,MAXINT,integer,2},[esp-24]}
symtab[2872]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,MAXLEN,object,-1},[esp-28]}
symtab[2873]:{source,S_TVar,61,(S_used+S_set+K_used+K_othr),2865,2874,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2874]:{what,S_TVar,61,(S_used+S_set+K_used+K_othr+K_dlft),2866,2875,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2875]:{return_index,S_TVar,61,(S_used+S_set+K_used+K_othr+K_dlft),2867,2876,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2876]:{s,S_TVar,61,(S_used+S_set),2657,2877,sequence,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2877]:{lpos,S_TVar,61,(S_used+S_set),2868,0,integer,{integer,MININT,MAXINT,object,-1},[esp-16]}
symtab[2878]:{source,S_TVar,61,(S_used+S_set+K_used+K_othr),2873,2879,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2879]:{what,S_TVar,61,(S_used+S_set+K_used+K_othr+K_dlft),2874,2880,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2880]:{return_index,S_TVar,61,(S_used+S_set+K_used+K_othr+K_dlft),2875,2881,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2881]:{s,S_TVar,61,(S_used+S_set),2876,2882,sequence,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2882]:{lpos,S_TVar,61,(S_used+S_set),2877,2883,integer,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[2883]:{rpos,S_TVar,61,(S_used+S_set),2869,2884,integer,{object,MININT,MAXINT,object,-2},[esp-20]}
symtab[2884]:{-1,S_TVar,0,(S_set),0,0,integer,{integer,0,MAXLEN,object,-1},[esp-24]}
symtab[2885]:{-1,S_Const,61,(S_used+S_set+K_noclr+K_lit),0,858/#00402D78,string,`digits`}
symtab[2886]:{s,S_TVar,61,(S_used+S_set+K_used+K_othr),2881,2887,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2887]:{what,S_TVar,61,(S_used+S_set+K_used+K_othr+K_dlft),2879,2888,string,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2888]:{ml,S_TVar,61,(S_used+S_set+K_used+K_othr+K_dlft),0,2889,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2889]:{fmt,S_TVar,61,(S_used+S_set+K_used+K_othr+K_dlft),2245,2890,string,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2890]:{l,S_TVar,61,(S_used+S_set),2687,2891,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[2891]:{c,S_TVar,61,(S_used+S_set),2648,2892,integer,{atom,MININT,MAXINT,object,-1},[esp-20]}
symtab[2892]:{-1,S_TVar,0,(S_set),0,2893,object,{atom,MININT,MAXINT,object,-1},[esp-24]}
symtab[2893]:{-1,S_TVar,0,(S_set),0,2895,object,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[2894]:{-1,S_Const,61,(S_used+S_set+K_noclr+K_lit),0,859/#00402D7C,string,`+-`}
symtab[2895]:{ls,S_TVar,61,(S_used+S_set),2356,2897,string,{object,MININT,MAXINT,object,-2},[esp-32]}
symtab[2896]:{-1,S_Const,61,(S_used+S_set+K_noclr+K_lit),0,860/#00402D80,string,` (%,d %s)`}
symtab[2897]:{-1,S_TVar,0,(S_set),0,2898,atom,{atom,MININT,MAXINT,object,-1},[esp-36]}
symtab[2898]:{-1,S_TVar,0,(S_set),2903,2899,T_Dsq,{sequence,MININT,MAXINT,object,-2},[esp-40]}
symtab[2899]:{-1,S_TVar,0,(S_set),0,2900,object,{integer,2,805306371,object,-1},[esp-44]}
symtab[2900]:{-1,S_TVar,0,(S_set),0,2901,integer,{integer,0,MAXLEN,object,-1},[esp-48]}
symtab[2901]:{-1,S_TVar,0,(S_set),2902,2902,atom,{atom,MININT,MAXINT,object,-1},[esp-52]}
symtab[2902]:{-1,S_TVar,0,(S_set),2897,2903,atom,{atom,MININT,MAXINT,object,-1},[esp-56]}
symtab[2903]:{-1,S_TVar,0,(S_set),2904,2904,T_Dsq,{T_Dsq,MININT,MAXINT,string,1},[esp-60]}
symtab[2904]:{-1,S_TVar,0,(S_set),0,2905,T_Dsq,{sequence,MININT,MAXINT,object,-2},[esp-64]}
symtab[2905]:{-1,S_TVar,0,(S_set),0,2906,integer,{integer,MININT,MAXINT,object,-1},[esp-68]}
symtab[2906]:{i,S_TVar,61,(S_used+S_set+S_for),2846,2907,integer,{integer,MININT,MAXINT,object,-1},[esp-72]}
symtab[2907]:{-1,S_TVar,0,(S_set),0,2908,object,{object,MININT,MAXINT,object,-2},[esp-76]}
symtab[2908]:{-1,S_TVar,0,(S_set),0,2909,string,{0b1001,0,0,integer,-2},[esp-80]}
symtab[2909]:{-1,S_TVar,0,(S_set),2900,0,integer,{integer,0,MAXLEN,object,-1},[esp-84]}
symtab[2910]:{-1,S_TVar,0,(S_set+K_Fres),0,0,atom,{atom,MININT,MAXINT,object,-1},(eax)}
symtab[2911]:{zl,S_Func,62,(S_used+K_used+K_wdb),0,0,{70,15},2912,1,4,#0045750F}
symtab[2912]:{zlr,S_TVar,62,(S_used+S_set+K_used+K_wdb+K_othr),0,2913,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2913]:{res,S_TVar,62,(S_used+S_set+K_wdb),2844,2914,atom,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2914]:{-1,S_TVar,0,(S_set),0,2916,integer,{integer,0,MAXLEN,object,-1},[esp-8]}
symtab[2915]:{-1,S_Const,62,(S_used+S_set+K_noclr+K_lit),0,861/#00402D84,string,`zlr not length 1`}
symtab[2916]:{-1,S_TVar,0,(S_set),0,0,object,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[2917]:{-1,S_Const,62,(S_used+S_set+K_noclr+K_lit),0,862/#00402D88,string,`zlr[1] not atom`}
symtab[2918]:{a,S_TVar,62,(S_used+S_set+K_used+K_wdb+K_othr),2840,2919,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2919]:{zlr,S_TVar,62,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2912,2920,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2920]:{res,S_TVar,62,(S_used+S_set+K_wdb),2913,2921,atom,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2921]:{l,S_TVar,62,(S_used+S_set+K_wdb),2890,2922,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2922]:{-1,S_TVar,0,(S_set),0,2923,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[2923]:{i,S_TVar,62,(S_used+S_set+S_for+K_wdb),2906,2924,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[2924]:{-1,S_TVar,0,(S_set),0,2925,object,{object,MININT,MAXINT,object,-2},[esp-24]}
symtab[2925]:{-1,S_TVar,0,(S_set),0,2926,object,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[2926]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-32]}
symtab[2927]:{a,S_TVar,62,(S_used+S_set+K_used+K_wdb+K_othr),2918,2928,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2928]:{zlr,S_TVar,62,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2919,2929,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2929]:{res,S_TVar,62,(S_used+S_set+K_wdb),2920,2930,atom,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2930]:{l,S_TVar,62,(S_used+S_set+K_wdb),2921,2931,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2931]:{-1,S_TVar,0,(S_set),0,2932,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[2932]:{i,S_TVar,62,(S_used+S_set+S_for+K_wdb),2923,2933,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[2933]:{-1,S_TVar,0,(S_set),0,2934,object,{object,MININT,MAXINT,object,-2},[esp-24]}
symtab[2934]:{-1,S_TVar,0,(S_set),0,2935,object,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[2935]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-32]}
symtab[2936]:{a,S_TVar,62,(S_used+S_set+K_used+K_wdb+K_othr),2927,2937,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2937]:{zlr,S_TVar,62,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2928,2938,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2938]:{res,S_TVar,62,(S_used+S_set+K_wdb),2929,2939,atom,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[2939]:{l,S_TVar,62,(S_used+S_set+K_wdb),2930,2940,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2940]:{-1,S_TVar,0,(S_set),0,2941,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[2941]:{i,S_TVar,62,(S_used+S_set+S_for+K_wdb),2932,2942,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[2942]:{-1,S_TVar,0,(S_set),0,2943,object,{object,MININT,MAXINT,object,-2},[esp-24]}
symtab[2943]:{-1,S_TVar,0,(S_set),0,2944,object,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[2944]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-32]}
symtab[2945]:{INVALID_UTF8,S_Const,63,(S_used+S_set+K_noclr+K_lit),0,863/#00402D8C,integer,65533}
symtab[2946]:{utf8,S_TVar,63,(S_used+S_set+K_used+K_wdb+K_othr),0,2947,string,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2947]:{fail_flag,S_TVar,63,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),0,2948,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2948]:{utf32,S_TVar,63,(S_used+S_set+K_wdb),0,2949,sequence,{sequence,MININT,MAXINT,integer,-2},[esp-8]}
symtab[2949]:{utf8len,S_TVar,63,(S_used+S_set+K_wdb),0,2950,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2950]:{i,S_TVar,63,(S_used+S_set+K_wdb),2941,2951,integer,{atom,MININT,MAXINT,object,-1},[esp-16]}
symtab[2951]:{headb,S_TVar,63,(S_used+S_set+K_wdb),0,2952,integer,{integer,0,255,object,-1},[esp-20]}
symtab[2952]:{bytes,S_TVar,63,(S_used+S_set+K_wdb),1816,2953,integer,{integer,0,4,object,-1},[esp-24]}
symtab[2953]:{c,S_TVar,63,(S_used+S_set+K_wdb),2891,2958,integer,{integer,0,2097151,object,-1},[esp-28]}
symtab[2954]:{-1,S_Const,63,(S_set+K_noclr+K_lit),0,864/#00402D90,integer,191}
symtab[2955]:{-1,S_Const,63,(S_set+K_noclr+K_lit),0,865/#00402D94,integer,223}
symtab[2956]:{-1,S_Const,63,(S_set+K_noclr+K_lit),0,866/#00402D98,integer,239}
symtab[2957]:{-1,S_Const,63,(S_set+K_noclr+K_lit),0,867/#00402D9C,integer,244}
symtab[2958]:{-1,S_TVar,0,(S_set),2964,2959,atom,{atom,MININT,MAXINT,object,-1},[esp-32]}
symtab[2959]:{-1,S_TVar,0,(S_set),2958,2960,atom,{atom,MININT,MAXINT,object,-1},[esp-36]}
symtab[2960]:{j,S_TVar,63,(S_used+S_set+S_for+K_wdb),2678,2961,integer,{integer,-1,3,object,-1},[esp-40]}
symtab[2961]:{-1,S_TVar,0,(S_set),2962,2962,integer,{atom,MININT,MAXINT,object,-1},[esp-44]}
symtab[2962]:{-1,S_TVar,0,(S_set),0,2964,integer,{integer,0,255,object,-1},[esp-48]}
symtab[2963]:{-1,S_Const,63,(S_set+K_noclr+K_lit),0,868/#00402DA0,integer,2047}
symtab[2964]:{-1,S_TVar,0,(S_set),2965,2965,atom,{integer,0,2093056,object,-1},[esp-52]}
symtab[2965]:{-1,S_TVar,0,(S_set),0,0,atom,{integer,0,1835008,object,-1},[esp-56]}
symtab[2966]:{-1,S_Const,63,(S_set+K_noclr+K_lit),0,869/#00402DA4,integer,2048}
symtab[2967]:{-1,S_Const,63,(S_used+S_set+K_noclr+K_lit),0,870/#00402DA8,integer,55296}
symtab[2968]:{-1,S_Const,63,(S_set+K_noclr+K_lit),0,871/#00402DAC,integer,57343}
symtab[2969]:{INVALID_UNICODE,S_Const,63,(S_used+S_set+K_noclr+K_lit),0,872/#00402DB0,string,{239,191,189}}
symtab[2970]:{utf32,S_TVar,63,(S_used+S_set+K_used+K_wdb+K_othr),2948,2971,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2971]:{fail_flag,S_TVar,63,(S_used+S_set+K_used+K_wdb+K_othr+K_dlft),2947,2972,integer,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[2972]:{utf8,S_TVar,63,(S_used+S_set+K_wdb),2946,2973,string,{sequence,MININT,MAXINT,object,-2},[esp-8]}
symtab[2973]:{-1,S_TVar,0,(S_set),0,2974,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2974]:{i,S_TVar,63,(S_used+S_set+S_for+K_wdb),2950,2975,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[2975]:{u,S_TVar,63,(S_used+S_set+K_wdb),0,2976,integer,{integer,MININT,MAXINT,object,-1},[esp-20]}
symtab[2976]:{chr,S_TVar,63,(S_used+S_set+K_wdb),0,2977,object,{0b1101,MININT,MAXINT,object,-2},[esp-24]}
symtab[2977]:{-1,S_TVar,0,(S_set),0,2978,integer,{integer,-16777216,16777215,object,-1},[esp-28]}
symtab[2978]:{-1,S_TVar,0,(S_set),2979,2979,integer,{integer,-16777216,16777407,object,-1},[esp-32]}
symtab[2979]:{-1,S_TVar,0,(S_set),2981,2981,integer,{integer,-262144,262367,object,-1},[esp-36]}
symtab[2980]:{-1,S_Const,63,(S_used+S_set+K_noclr+K_lit),0,873/#00402DB4,integer,224}
symtab[2981]:{-1,S_TVar,0,(S_set),2983,2983,integer,{integer,-16777216,16777215,object,-1},[esp-40]}
symtab[2982]:{-1,S_Const,63,(S_used+S_set+K_noclr+K_lit),0,874/#00402DB8,integer,240}
symtab[2983]:{-1,S_TVar,0,(S_set),2977,0,integer,{integer,128,191,object,-1},[esp-44]}
symtab[2984]:{utf16,S_TVar,63,(S_used+S_set+K_used+K_wdb+K_othr),0,2985,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2985]:{utf32,S_TVar,63,(S_used+S_set+K_wdb),2970,2986,sequence,{T_Dsq,MININT,MAXINT,integer,-2},[esp-4]}
symtab[2986]:{i,S_TVar,63,(S_used+S_set+K_wdb),2974,2987,integer,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2987]:{ch,S_TVar,63,(S_used+S_set+K_wdb),2675,2988,integer,{integer,MININT,MAXINT,object,-1},[esp-12]}
symtab[2988]:{ch2,S_TVar,63,(S_used+S_set+K_wdb),0,2989,integer,{integer,MININT,MAXINT,object,-1},[esp-16]}
symtab[2989]:{-1,S_TVar,0,(S_set),0,2993,integer,{integer,0,MAXLEN,object,-1},[esp-20]}
symtab[2990]:{-1,S_Const,63,(S_set+K_noclr+K_lit),0,875/#00402DBC,integer,56319}
symtab[2991]:{-1,S_Const,63,(S_used+S_set+K_noclr+K_lit),0,876/#00402DC0,integer,56320}
symtab[2992]:{-1,S_Const,63,(S_used+S_set+K_noclr+K_lit),0,877/#00402DC4,integer,1023}
symtab[2993]:{-1,S_TVar,0,(S_set),2994,2994,atom,{integer,0,1114111,object,-1},[esp-24]}
symtab[2994]:{-1,S_TVar,0,(S_set),0,0,atom,{integer,65536,1113088,object,-1},[esp-28]}
symtab[2995]:{utf32,S_TVar,63,(S_used+S_set+K_used+K_wdb+K_othr),2985,2996,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[2996]:{utf16,S_TVar,63,(S_used+S_set+K_wdb),2984,2997,sequence,{T_Dsq,MININT,MAXINT,integer,-2},[esp-4]}
symtab[2997]:{ch,S_TVar,63,(S_used+S_set+K_wdb),2987,2998,integer,{atom,MININT,MAXINT,object,-1},[esp-8]}
symtab[2998]:{-1,S_TVar,0,(S_set),0,2999,integer,{integer,0,MAXLEN,object,-1},[esp-12]}
symtab[2999]:{i,S_TVar,63,(S_used+S_set+S_for+K_wdb),2986,3000,integer,{integer,0,MAXLEN,object,-1},[esp-16]}
symtab[3000]:{-1,S_TVar,0,(S_set),0,3001,integer,{integer,-1048576,1048575,object,-1},[esp-20]}
symtab[3001]:{-1,S_TVar,0,(S_set),0,0,atom,{integer,-993280,1103871,object,-1},[esp-24]}
symtab[3002]:{utf8,S_TVar,63,(S_used+S_set+K_used+K_wdb+K_othr),2972,3003,string,{object,MININT,MAXINT,object,-2},[esp]}
symtab[3003]:{-1,S_TVar,0,(S_set),0,0,0b1101,{0b1101,-1,-1,integer,-2},[esp-4]}
symtab[3004]:{utf16,S_TVar,63,(S_used+S_set+K_used+K_wdb+K_othr),2996,3005,sequence,{object,MININT,MAXINT,object,-2},[esp]}
symtab[3005]:{-1,S_TVar,0,(S_set),0,0,sequence,{T_Dsq,MININT,MAXINT,integer,-2},[esp-4]}
symtab[3006]:{msg,S_TVar,64,(S_used+S_set+K_used+K_othr),1322,3007,string,{object,MININT,MAXINT,object,-2},[esp]}
symtab[3007]:{args,S_TVar,64,(S_used+S_set+K_used+K_othr+K_dlft),2628,3008,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[3008]:{nFrames,S_TVar,64,(S_used+S_set+K_used+K_othr+K_dlft),2708,3009,integer,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[3009]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,object,0},[esp-12]}
symtab[3010]:{condition,S_TVar,64,(S_used+S_set+K_used+K_othr),0,3011,integer,{object,MININT,MAXINT,object,-2},[esp]}
symtab[3011]:{msg,S_TVar,64,(S_used+S_set+K_used+K_othr+K_dlft),3006,3012,string,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[3012]:{args,S_TVar,64,(S_used+S_set+K_used+K_othr+K_dlft),3007,3013,object,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[3013]:{nFrames,S_TVar,64,(S_used+S_set+K_used+K_othr+K_dlft),3008,3014,integer,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[3014]:{colon,S_TVar,64,(S_used+S_set),0,3015,string,{string,MININT,MAXINT,integer,-2},[esp-16]}
symtab[3015]:{-1,S_TVar,0,(S_set),0,3018,object,{string,MININT,MAXINT,integer,-2},[esp-20]}
symtab[3016]:{-1,S_Const,64,(S_used+S_set+K_noclr+K_lit),0,878/#00402DC8,string,`:`}
symtab[3017]:{-1,S_Const,64,(S_used+S_set+K_noclr+K_lit),0,879/#00402DCC,string,`assertion failure`}
symtab[3018]:{-1,S_TVar,0,(S_set),0,3019,string,{string,MININT,MAXINT,integer,-2},[esp-24]}
symtab[3019]:{-1,S_TVar,0,(S_set),0,0,atom,{atom,MININT,MAXINT,object,-1},[esp-28]}
symtab[3020]:{a,S_TVar,64,(S_used+S_set+K_used+K_othr),2936,3021,object,{object,MININT,MAXINT,object,-2},[esp]}
symtab[3021]:{b,S_TVar,64,(S_used+S_set+K_used+K_othr),2811,3022,object,{object,MININT,MAXINT,object,-2},[esp-4]}
symtab[3022]:{msg,S_TVar,64,(S_used+S_set+K_used+K_othr+K_dlft),3011,3023,string,{object,MININT,MAXINT,object,-2},[esp-8]}
symtab[3023]:{args,S_TVar,64,(S_used+S_set+K_used+K_othr+K_dlft),3012,3024,object,{object,MININT,MAXINT,object,-2},[esp-12]}
symtab[3024]:{nFrames,S_TVar,64,(S_used+S_set+K_used+K_othr+K_dlft),3013,3025,integer,{object,MININT,MAXINT,object,-2},[esp-16]}
symtab[3025]:{tests,S_TVar,64,(S_used+S_set),0,3033,sequence,{T_Dsq,MININT,MAXINT,string,7},[esp-20]}
symtab[3026]:{-1,S_Const,64,(S_used+S_set+K_noclr+K_lit),0,880/#00402DD0,string,`=`}
symtab[3027]:{-1,S_Const,64,(S_used+S_set+K_noclr+K_lit),0,881/#00402DD4,string,`==`}
symtab[3028]:{-1,S_Const,64,(S_used+S_set+K_noclr+K_lit),0,882/#00402DD8,string,`<`}
symtab[3029]:{-1,S_Const,64,(S_used+S_set+K_noclr+K_lit),0,883/#00402DDC,string,`<=`}
symtab[3030]:{-1,S_Const,64,(S_used+S_set+K_noclr+K_lit),0,884/#00402DE0,string,`>`}
symtab[3031]:{-1,S_Const,64,(S_used+S_set+K_noclr+K_lit),0,885/#00402DE4,string,`>=`}
symtab[3032]:{-1,S_Const,64,(S_used+S_set+K_noclr+K_lit),0,886/#00402DE8,string,`!=`}
symtab[3033]:{k,S_TVar,64,(S_used+S_set),2660,3034,integer,{integer,MININT,MAXINT,object,-1},[esp-24]}
symtab[3034]:{l,S_TVar,64,(S_used+S_set),2939,3035,integer,{object,MININT,MAXINT,object,-2},[esp-28]}
symtab[3035]:{bOK,S_TVar,64,(S_used+S_set),0,3036,integer,{integer,0,1,object,-1},[esp-32]}
symtab[3036]:{m,S_TVar,64,(S_used+S_set),2565,3037,string,{string,MININT,MAXINT,integer,-2},[esp-36]}
symtab[3037]:{-1,S_TVar,0,(S_set),0,3040,object,{string,MININT,MAXINT,integer,-2},[esp-40]}
symtab[3038]:{-1,S_Const,64,(S_used+S_set+K_noclr+K_lit),0,887/#00402DEC,string,` (`}
symtab[3039]:{-1,S_Const,64,(S_used+S_set+K_noclr+K_lit),0,888/#00402DF0,string,`)`}
symtab[3040]:{-1,S_TVar,0,(S_set),0,3041,string,{string,MININT,MAXINT,integer,-2},[esp-44]}
symtab[3041]:{t,S_TVar,64,(S_used+S_set),2861,3042,string,{string,MININT,MAXINT,integer,-2},[esp-48]}
symtab[3042]:{-1,S_TVar,0,(S_set),0,3043,object,{object,MININT,MAXINT,object,-2},[esp-52]}
symtab[3043]:{-1,S_TVar,0,(S_set),0,3045,atom,{atom,MININT,MAXINT,object,-1},[esp-56]}
symtab[3044]:{-1,S_Const,64,(S_used+S_set+K_noclr+K_lit),0,889/#00402DF4,string,`assertion failure: %v %s %v%s`}
symtab[3045]:{-1,S_TVar,0,(S_set),0,0,T_Dsq,{T_Dsq,MININT,MAXINT,object,4},[esp-60]}
